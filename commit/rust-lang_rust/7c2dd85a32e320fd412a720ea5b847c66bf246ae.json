{"sha": "7c2dd85a32e320fd412a720ea5b847c66bf246ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMmRkODVhMzJlMzIwZmQ0MTJhNzIwZWE1Yjg0N2M2NmJmMjQ2YWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T09:58:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T10:06:37Z"}, "message": "Use chalk_ir::Scalar directly", "tree": {"sha": "fc5fb1d9ae0ae59f4d7eafe68720005d095bd360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc5fb1d9ae0ae59f4d7eafe68720005d095bd360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c2dd85a32e320fd412a720ea5b847c66bf246ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2dd85a32e320fd412a720ea5b847c66bf246ae", "html_url": "https://github.com/rust-lang/rust/commit/7c2dd85a32e320fd412a720ea5b847c66bf246ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c2dd85a32e320fd412a720ea5b847c66bf246ae/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5183c9f08345c664237ae138e86f96ff46714f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/5183c9f08345c664237ae138e86f96ff46714f15", "html_url": "https://github.com/rust-lang/rust/commit/5183c9f08345c664237ae138e86f96ff46714f15"}], "stats": {"total": 275, "additions": 78, "deletions": 197}, "files": [{"sha": "b4801cb2158334449a71f6603df8b44f60cde3d8", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -3,9 +3,9 @@\n use std::{borrow::Cow, fmt};\n \n use crate::{\n-    db::HirDatabase, utils::generics, ApplicationTy, CallableDefId, FnSig, GenericPredicate,\n-    Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n-    TypeCtor,\n+    db::HirDatabase, primitive, utils::generics, ApplicationTy, CallableDefId, FnSig,\n+    GenericPredicate, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs,\n+    TraitRef, Ty, TypeCtor,\n };\n use arrayvec::ArrayVec;\n use hir_def::{\n@@ -244,9 +244,11 @@ impl HirDisplay for ApplicationTy {\n         match self.ctor {\n             TypeCtor::Scalar(Scalar::Bool) => write!(f, \"bool\")?,\n             TypeCtor::Scalar(Scalar::Char) => write!(f, \"char\")?,\n-            TypeCtor::Scalar(Scalar::Float(t)) => write!(f, \"{}\", t)?,\n-            TypeCtor::Scalar(Scalar::Int(t)) => write!(f, \"{}\", t)?,\n-            TypeCtor::Scalar(Scalar::Uint(t)) => write!(f, \"{}\", t)?,\n+            TypeCtor::Scalar(Scalar::Float(t)) => {\n+                write!(f, \"{}\", primitive::float_ty_to_string(t))?\n+            }\n+            TypeCtor::Scalar(Scalar::Int(t)) => write!(f, \"{}\", primitive::int_ty_to_string(t))?,\n+            TypeCtor::Scalar(Scalar::Uint(t)) => write!(f, \"{}\", primitive::uint_ty_to_string(t))?,\n             TypeCtor::Str => write!(f, \"str\")?,\n             TypeCtor::Slice => {\n                 let t = self.parameters.as_single();"}, {"sha": "3fec0e431845e5278b60305af30b6fbbdc242b03", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -15,7 +15,7 @@ use test_utils::mark;\n \n use crate::{\n     autoderef, method_resolution, op,\n-    primitive::UintTy,\n+    primitive::{self, UintTy},\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, Binders, CallableDefId, InferTy, Mutability, Obligation, OpaqueTyId, Rawness,\n@@ -730,17 +730,21 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 Literal::Char(..) => Ty::simple(TypeCtor::Scalar(Scalar::Char)),\n                 Literal::Int(_v, ty) => match ty {\n-                    Some(int_ty) => Ty::simple(TypeCtor::Scalar(Scalar::Int((*int_ty).into()))),\n+                    Some(int_ty) => Ty::simple(TypeCtor::Scalar(Scalar::Int(\n+                        primitive::int_ty_from_builtin(*int_ty),\n+                    ))),\n                     None => self.table.new_integer_var(),\n                 },\n                 Literal::Uint(_v, ty) => match ty {\n-                    Some(int_ty) => Ty::simple(TypeCtor::Scalar(Scalar::Uint((*int_ty).into()))),\n+                    Some(int_ty) => Ty::simple(TypeCtor::Scalar(Scalar::Uint(\n+                        primitive::uint_ty_from_builtin(*int_ty),\n+                    ))),\n                     None => self.table.new_integer_var(),\n                 },\n                 Literal::Float(_v, ty) => match ty {\n-                    Some(float_ty) => {\n-                        Ty::simple(TypeCtor::Scalar(Scalar::Float((*float_ty).into())))\n-                    }\n+                    Some(float_ty) => Ty::simple(TypeCtor::Scalar(Scalar::Float(\n+                        primitive::float_ty_from_builtin(*float_ty),\n+                    ))),\n                     None => self.table.new_float_var(),\n                 },\n             },"}, {"sha": "676519594b43169557f4729abdbba46c12deaa58", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -38,7 +38,6 @@ use itertools::Itertools;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    primitive::{FloatTy, IntTy, UintTy},\n     utils::{generics, make_mut_slice, Generics},\n };\n \n@@ -50,25 +49,14 @@ pub use lower::{\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n-pub use chalk_ir::{BoundVar, DebruijnIndex};\n+pub use chalk_ir::{BoundVar, DebruijnIndex, Scalar};\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n     Parameter(LifetimeParamId),\n     Static,\n }\n \n-/// Types of scalar values.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-#[allow(missing_docs)]\n-pub enum Scalar {\n-    Bool,\n-    Char,\n-    Int(IntTy),\n-    Uint(UintTy),\n-    Float(FloatTy),\n-}\n-\n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or\n /// tuples.\n@@ -736,9 +724,13 @@ impl Ty {\n             BuiltinType::Char => TypeCtor::Scalar(Scalar::Char),\n             BuiltinType::Bool => TypeCtor::Scalar(Scalar::Bool),\n             BuiltinType::Str => TypeCtor::Str,\n-            BuiltinType::Int(t) => TypeCtor::Scalar(Scalar::Int(t.into())),\n-            BuiltinType::Uint(t) => TypeCtor::Scalar(Scalar::Uint(t.into())),\n-            BuiltinType::Float(t) => TypeCtor::Scalar(Scalar::Float(t.into())),\n+            BuiltinType::Int(t) => TypeCtor::Scalar(Scalar::Int(primitive::int_ty_from_builtin(t))),\n+            BuiltinType::Uint(t) => {\n+                TypeCtor::Scalar(Scalar::Uint(primitive::uint_ty_from_builtin(t)))\n+            }\n+            BuiltinType::Float(t) => {\n+                TypeCtor::Scalar(Scalar::Float(primitive::float_ty_from_builtin(t)))\n+            }\n         })\n     }\n "}, {"sha": "66d8de95917031d50ce5ca8809cabab872a9edc4", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -16,7 +16,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     autoderef,\n     db::HirDatabase,\n-    primitive::{FloatTy, IntTy, UintTy},\n+    primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n     ApplicationTy, Canonical, DebruijnIndex, InEnvironment, Scalar, Substs, TraitEnvironment,\n     TraitRef, Ty, TyKind, TypeCtor, TypeWalk,\n@@ -225,8 +225,12 @@ impl Ty {\n                     FloatTy::F32 => lang_item_crate!(\"f32\", \"f32_runtime\"),\n                     FloatTy::F64 => lang_item_crate!(\"f64\", \"f64_runtime\"),\n                 },\n-                TypeCtor::Scalar(Scalar::Int(t)) => lang_item_crate!(t.ty_to_string()),\n-                TypeCtor::Scalar(Scalar::Uint(t)) => lang_item_crate!(t.ty_to_string()),\n+                TypeCtor::Scalar(Scalar::Int(t)) => {\n+                    lang_item_crate!(primitive::int_ty_to_string(t))\n+                }\n+                TypeCtor::Scalar(Scalar::Uint(t)) => {\n+                    lang_item_crate!(primitive::uint_ty_to_string(t))\n+                }\n                 TypeCtor::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n                 TypeCtor::Slice => lang_item_crate!(\"slice_alloc\", \"slice\"),\n                 TypeCtor::RawPtr(Mutability::Shared) => lang_item_crate!(\"const_ptr\"),"}, {"sha": "2449addfb75ef25834ce71e69c99b1fb7984bfee", "filename": "crates/hir_ty/src/primitive.rs", "status": "modified", "additions": 41, "deletions": 106, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -3,128 +3,63 @@\n //! * during type inference, they can be uncertain (ie, `let x = 92;`)\n //! * they don't belong to any particular crate.\n \n-use std::fmt;\n-\n+pub use chalk_ir::{FloatTy, IntTy, UintTy};\n pub use hir_def::builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint};\n \n-/// Different signed int types.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum IntTy {\n-    Isize,\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128,\n-}\n-\n-/// Different unsigned int types.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum UintTy {\n-    Usize,\n-    U8,\n-    U16,\n-    U32,\n-    U64,\n-    U128,\n-}\n-\n-impl fmt::Display for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl IntTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            IntTy::Isize => \"isize\",\n-            IntTy::I8 => \"i8\",\n-            IntTy::I16 => \"i16\",\n-            IntTy::I32 => \"i32\",\n-            IntTy::I64 => \"i64\",\n-            IntTy::I128 => \"i128\",\n-        }\n-    }\n-}\n-\n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl UintTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            UintTy::Usize => \"usize\",\n-            UintTy::U8 => \"u8\",\n-            UintTy::U16 => \"u16\",\n-            UintTy::U32 => \"u32\",\n-            UintTy::U64 => \"u64\",\n-            UintTy::U128 => \"u128\",\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum FloatTy {\n-    F32,\n-    F64,\n-}\n-\n-impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+pub fn int_ty_to_string(ty: IntTy) -> &'static str {\n+    match ty {\n+        IntTy::Isize => \"isize\",\n+        IntTy::I8 => \"i8\",\n+        IntTy::I16 => \"i16\",\n+        IntTy::I32 => \"i32\",\n+        IntTy::I64 => \"i64\",\n+        IntTy::I128 => \"i128\",\n     }\n }\n \n-impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n+pub fn uint_ty_to_string(ty: UintTy) -> &'static str {\n+    match ty {\n+        UintTy::Usize => \"usize\",\n+        UintTy::U8 => \"u8\",\n+        UintTy::U16 => \"u16\",\n+        UintTy::U32 => \"u32\",\n+        UintTy::U64 => \"u64\",\n+        UintTy::U128 => \"u128\",\n     }\n }\n \n-impl FloatTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            FloatTy::F32 => \"f32\",\n-            FloatTy::F64 => \"f64\",\n-        }\n+pub fn float_ty_to_string(ty: FloatTy) -> &'static str {\n+    match ty {\n+        FloatTy::F32 => \"f32\",\n+        FloatTy::F64 => \"f64\",\n     }\n }\n \n-impl From<BuiltinInt> for IntTy {\n-    fn from(t: BuiltinInt) -> Self {\n-        match t {\n-            BuiltinInt::Isize => Self::Isize,\n-            BuiltinInt::I8 => Self::I8,\n-            BuiltinInt::I16 => Self::I16,\n-            BuiltinInt::I32 => Self::I32,\n-            BuiltinInt::I64 => Self::I64,\n-            BuiltinInt::I128 => Self::I128,\n-        }\n+pub(super) fn int_ty_from_builtin(t: BuiltinInt) -> IntTy {\n+    match t {\n+        BuiltinInt::Isize => IntTy::Isize,\n+        BuiltinInt::I8 => IntTy::I8,\n+        BuiltinInt::I16 => IntTy::I16,\n+        BuiltinInt::I32 => IntTy::I32,\n+        BuiltinInt::I64 => IntTy::I64,\n+        BuiltinInt::I128 => IntTy::I128,\n     }\n }\n \n-impl From<BuiltinUint> for UintTy {\n-    fn from(t: BuiltinUint) -> Self {\n-        match t {\n-            BuiltinUint::Usize => Self::Usize,\n-            BuiltinUint::U8 => Self::U8,\n-            BuiltinUint::U16 => Self::U16,\n-            BuiltinUint::U32 => Self::U32,\n-            BuiltinUint::U64 => Self::U64,\n-            BuiltinUint::U128 => Self::U128,\n-        }\n+pub(super) fn uint_ty_from_builtin(t: BuiltinUint) -> UintTy {\n+    match t {\n+        BuiltinUint::Usize => UintTy::Usize,\n+        BuiltinUint::U8 => UintTy::U8,\n+        BuiltinUint::U16 => UintTy::U16,\n+        BuiltinUint::U32 => UintTy::U32,\n+        BuiltinUint::U64 => UintTy::U64,\n+        BuiltinUint::U128 => UintTy::U128,\n     }\n }\n \n-impl From<BuiltinFloat> for FloatTy {\n-    fn from(t: BuiltinFloat) -> Self {\n-        match t {\n-            BuiltinFloat::F32 => Self::F32,\n-            BuiltinFloat::F64 => Self::F64,\n-        }\n+pub(super) fn float_ty_from_builtin(t: BuiltinFloat) -> FloatTy {\n+    match t {\n+        BuiltinFloat::F32 => FloatTy::F32,\n+        BuiltinFloat::F64 => FloatTy::F64,\n     }\n }"}, {"sha": "5a3cb7906003d3ff2948708ad4e03bc878878c85", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2dd85a32e320fd412a720ea5b847c66bf246ae/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7c2dd85a32e320fd412a720ea5b847c66bf246ae", "patch": "@@ -14,7 +14,7 @@ use hir_def::{type_ref::Mutability, AssocContainerId, GenericDefId, Lookup, Type\n \n use crate::{\n     db::HirDatabase,\n-    primitive::{FloatTy, IntTy, UintTy},\n+    primitive::UintTy,\n     traits::{Canonical, Obligation},\n     ApplicationTy, CallableDefId, GenericPredicate, InEnvironment, OpaqueTy, OpaqueTyId,\n     ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitEnvironment, TraitRef, Ty, TyKind,\n@@ -64,31 +64,7 @@ impl ToChalk for Ty {\n                     chalk_ir::TyKind::Foreign(foreign_type_id).intern(&Interner)\n                 }\n \n-                TypeCtor::Scalar(scalar) => chalk_ir::TyKind::Scalar(match scalar {\n-                    Scalar::Bool => chalk_ir::Scalar::Bool,\n-                    Scalar::Char => chalk_ir::Scalar::Char,\n-                    Scalar::Int(it) => chalk_ir::Scalar::Int(match it {\n-                        IntTy::Isize => chalk_ir::IntTy::Isize,\n-                        IntTy::I8 => chalk_ir::IntTy::I8,\n-                        IntTy::I16 => chalk_ir::IntTy::I16,\n-                        IntTy::I32 => chalk_ir::IntTy::I32,\n-                        IntTy::I64 => chalk_ir::IntTy::I64,\n-                        IntTy::I128 => chalk_ir::IntTy::I128,\n-                    }),\n-                    Scalar::Uint(it) => chalk_ir::Scalar::Uint(match it {\n-                        UintTy::Usize => chalk_ir::UintTy::Usize,\n-                        UintTy::U8 => chalk_ir::UintTy::U8,\n-                        UintTy::U16 => chalk_ir::UintTy::U16,\n-                        UintTy::U32 => chalk_ir::UintTy::U32,\n-                        UintTy::U64 => chalk_ir::UintTy::U64,\n-                        UintTy::U128 => chalk_ir::UintTy::U128,\n-                    }),\n-                    Scalar::Float(it) => chalk_ir::Scalar::Float(match it {\n-                        FloatTy::F32 => chalk_ir::FloatTy::F32,\n-                        FloatTy::F64 => chalk_ir::FloatTy::F64,\n-                    }),\n-                })\n-                .intern(&Interner),\n+                TypeCtor::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n \n                 TypeCtor::Tuple { cardinality } => {\n                     let substitution = apply_ty.parameters.to_chalk(db);\n@@ -232,38 +208,7 @@ impl ToChalk for Ty {\n                 apply_ty_from_chalk(db, TypeCtor::OpaqueType(from_chalk(db, opaque_type_id)), subst)\n             }\n \n-            chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Bool) => {\n-                Ty::simple(TypeCtor::Scalar(Scalar::Bool))\n-            }\n-            chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Char) => {\n-                Ty::simple(TypeCtor::Scalar(Scalar::Char))\n-            }\n-            chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(int_ty)) => {\n-                Ty::simple(TypeCtor::Scalar(Scalar::Int(match int_ty {\n-                    chalk_ir::IntTy::Isize => IntTy::Isize,\n-                    chalk_ir::IntTy::I8 => IntTy::I8,\n-                    chalk_ir::IntTy::I16 => IntTy::I16,\n-                    chalk_ir::IntTy::I32 => IntTy::I32,\n-                    chalk_ir::IntTy::I64 => IntTy::I64,\n-                    chalk_ir::IntTy::I128 => IntTy::I128,\n-                })))\n-            }\n-            chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(int_ty)) => {\n-                Ty::simple(TypeCtor::Scalar(Scalar::Uint(match int_ty {\n-                    chalk_ir::UintTy::Usize => UintTy::Usize,\n-                    chalk_ir::UintTy::U8 => UintTy::U8,\n-                    chalk_ir::UintTy::U16 => UintTy::U16,\n-                    chalk_ir::UintTy::U32 => UintTy::U32,\n-                    chalk_ir::UintTy::U64 => UintTy::U64,\n-                    chalk_ir::UintTy::U128 => UintTy::U128,\n-                })))\n-            }\n-            chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Float(float_ty)) => {\n-                Ty::simple(TypeCtor::Scalar(Scalar::Float(match float_ty {\n-                    chalk_ir::FloatTy::F32 => FloatTy::F32,\n-                    chalk_ir::FloatTy::F64 => FloatTy::F64,\n-                })))\n-            }\n+            chalk_ir::TyKind::Scalar(scalar) => Ty::simple(TypeCtor::Scalar(scalar)),\n             chalk_ir::TyKind::Tuple(cardinality, subst) => {\n                 apply_ty_from_chalk(db, TypeCtor::Tuple { cardinality: cardinality as u16 }, subst)\n             }\n@@ -321,8 +266,7 @@ fn ref_to_chalk(\n /// fake constant here, because Chalks built-in logic may expect it to be there.\n fn array_to_chalk(db: &dyn HirDatabase, subst: Substs) -> chalk_ir::Ty<Interner> {\n     let arg = subst[0].clone().to_chalk(db);\n-    let usize_ty =\n-        chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(&Interner);\n+    let usize_ty = chalk_ir::TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner);\n     let const_ = chalk_ir::ConstData {\n         ty: usize_ty,\n         value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: () }),"}]}