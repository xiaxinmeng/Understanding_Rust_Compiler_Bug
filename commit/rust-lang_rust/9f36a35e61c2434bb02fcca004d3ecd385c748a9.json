{"sha": "9f36a35e61c2434bb02fcca004d3ecd385c748a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzZhMzVlNjFjMjQzNGJiMDJmY2NhMDA0ZDNlY2QzODVjNzQ4YTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T18:24:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-23T18:24:52Z"}, "message": "Rollup merge of #48221 - rkruppe:improve-ctypes-lint, r=estebank\n\nOverhaul improper_ctypes output\n\nThis snowballed into a rather big set of improvements to the diagnostics of the improper_ctypes lint. See commits for details, including effects of each change on the `compile-fail/improper-ctypes.rs` test (now a UI test), which is pretty gnarly and hopefully not representative of real code, but covers a lot of different error cases.\n\nFixes #42050", "tree": {"sha": "3a18ee05ee358e2d5ffc40085e12a05dca22dcc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a18ee05ee358e2d5ffc40085e12a05dca22dcc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f36a35e61c2434bb02fcca004d3ecd385c748a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakFx0CRBK7hj4Ov3rIwAAdHIIAFC2B4gSCG7vKCWbHFHXG5us\nTMuso21IcLk7jIKbm35BIj5U2YwBS1qKtTTQUiJ57TSV79Kl4MAfXiadaEL0Fw7U\nsgtZ9gh+zM3+EOARwDu8GPYL9S5iaqezEHdhjITCtbvvltKjQKKegGWMCuHtEyeK\nPw4gq7Zgog1tqF+oX2YN0dwWe8TkQVBF54jVJa5D5csyc2HwIiPNiHMi0ElLIbPh\nuvAxR++30pCKWfg/6Fv6gX37DojVCuGAP1VoXYjtFJFMXkEKHAXqM2kbBbppAimO\nKnknBA7/2AAk0RXyfp2LDpD4zVgNlZs3eNsF4pvXAieGl+MCg709Nk852PebiDA=\n=PmUw\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a18ee05ee358e2d5ffc40085e12a05dca22dcc9\nparent 5d30cbab8e17bbc94b1140de874892775d30c519\nparent 051ea5cc9bac00c7f588b4eae72b8a382d8ceb68\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519410292 -0800\ncommitter GitHub <noreply@github.com> 1519410292 -0800\n\nRollup merge of #48221 - rkruppe:improve-ctypes-lint, r=estebank\n\nOverhaul improper_ctypes output\n\nThis snowballed into a rather big set of improvements to the diagnostics of the improper_ctypes lint. See commits for details, including effects of each change on the `compile-fail/improper-ctypes.rs` test (now a UI test), which is pretty gnarly and hopefully not representative of real code, but covers a lot of different error cases.\n\nFixes #42050\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f36a35e61c2434bb02fcca004d3ecd385c748a9", "html_url": "https://github.com/rust-lang/rust/commit/9f36a35e61c2434bb02fcca004d3ecd385c748a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f36a35e61c2434bb02fcca004d3ecd385c748a9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d30cbab8e17bbc94b1140de874892775d30c519", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d30cbab8e17bbc94b1140de874892775d30c519", "html_url": "https://github.com/rust-lang/rust/commit/5d30cbab8e17bbc94b1140de874892775d30c519"}, {"sha": "051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "url": "https://api.github.com/repos/rust-lang/rust/commits/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68", "html_url": "https://github.com/rust-lang/rust/commit/051ea5cc9bac00c7f588b4eae72b8a382d8ceb68"}], "stats": {"total": 482, "additions": 316, "deletions": 166}, "files": [{"sha": "ef9b3d38c637cc509cb1a74512b4e32096ba52e9", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 104, "deletions": 136, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_snake_case)]\n \n-use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind, Ty, TyCtxt};\n@@ -26,7 +25,6 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::attr;\n use syntax_pos::Span;\n use syntax::codemap;\n \n@@ -353,13 +351,14 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-enum FfiResult {\n+enum FfiResult<'tcx> {\n     FfiSafe,\n-    FfiPhantom,\n-    FfiUnsafe(&'static str),\n-    FfiBadStruct(DefId, &'static str),\n-    FfiBadUnion(DefId, &'static str),\n-    FfiBadEnum(DefId, &'static str),\n+    FfiPhantom(Ty<'tcx>),\n+    FfiUnsafe {\n+        ty: Ty<'tcx>,\n+        reason: &'static str,\n+        help: Option<&'static str>,\n+    },\n }\n \n /// Check if this enum can be safely exported based on the\n@@ -397,23 +396,12 @@ fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     false\n }\n \n-fn is_ffi_safe(ty: attr::IntType) -> bool {\n-    match ty {\n-        attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) |\n-        attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) |\n-        attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) |\n-        attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) |\n-        attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => true,\n-        attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => false\n-    }\n-}\n-\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self,\n                           cache: &mut FxHashSet<Ty<'tcx>>,\n-                          ty: Ty<'tcx>) -> FfiResult {\n+                          ty: Ty<'tcx>) -> FfiResult<'tcx> {\n         use self::FfiResult::*;\n \n         let cx = self.cx.tcx;\n@@ -429,19 +417,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.sty {\n             ty::TyAdt(def, substs) => {\n                 if def.is_phantom_data() {\n-                    return FfiPhantom;\n+                    return FfiPhantom(ty);\n                 }\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !def.repr.c() && !def.repr.transparent() {\n-                            return FfiUnsafe(\"found struct without foreign-function-safe \\\n-                                              representation annotation in foreign module, \\\n-                                              consider adding a #[repr(C)] attribute to the type\");\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this struct has unspecified layout\",\n+                                help: Some(\"consider adding a #[repr(C)] or #[repr(transparent)] \\\n+                                            attribute to this struct\"),\n+                            };\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n-                                              adding a member to this struct\");\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this struct has no fields\",\n+                                help: Some(\"consider adding a member to this struct\"),\n+                            };\n                         }\n \n                         // We can't completely trust repr(C) and repr(transparent) markings;\n@@ -467,28 +461,30 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiSafe => {\n                                     all_phantom = false;\n                                 }\n-                                FfiPhantom => {}\n-                                FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                FfiPhantom(..) => {}\n+                                FfiUnsafe { .. } => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(s) => {\n-                                    return FfiBadStruct(def.did, s);\n-                                }\n                             }\n                         }\n \n-                        if all_phantom { FfiPhantom } else { FfiSafe }\n+                        if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n                         if !def.repr.c() {\n-                            return FfiUnsafe(\"found union without foreign-function-safe \\\n-                                              representation annotation in foreign module, \\\n-                                              consider adding a #[repr(C)] attribute to the type\");\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this union has unspecified layout\",\n+                                help: Some(\"consider adding a #[repr(C)] attribute to this union\"),\n+                            };\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n-                                              adding a member to this union\");\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this union has no fields\",\n+                                help: Some(\"consider adding a field to this union\"),\n+                            };\n                         }\n \n                         let mut all_phantom = true;\n@@ -501,17 +497,14 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiSafe => {\n                                     all_phantom = false;\n                                 }\n-                                FfiPhantom => {}\n-                                FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                FfiPhantom(..) => {}\n+                                FfiUnsafe { .. } => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(s) => {\n-                                    return FfiBadUnion(def.did, s);\n-                                }\n                             }\n                         }\n \n-                        if all_phantom { FfiPhantom } else { FfiSafe }\n+                        if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n                     }\n                     AdtKind::Enum => {\n                         if def.variants.is_empty() {\n@@ -524,25 +517,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         if !def.repr.c() && def.repr.int.is_none() {\n                             // Special-case types like `Option<extern fn()>`.\n                             if !is_repr_nullable_ptr(cx, def, substs) {\n-                                return FfiUnsafe(\"found enum without foreign-function-safe \\\n-                                                  representation annotation in foreign \\\n-                                                  module, consider adding a #[repr(...)] \\\n-                                                  attribute to the type\");\n-                            }\n-                        }\n-\n-                        if let Some(int_ty) = def.repr.int {\n-                            if !is_ffi_safe(int_ty) {\n-                                // FIXME: This shouldn't be reachable: we should check\n-                                // this earlier.\n-                                return FfiUnsafe(\"enum has unexpected #[repr(...)] attribute\");\n+                                return FfiUnsafe {\n+                                    ty: ty,\n+                                    reason: \"enum has no representation hint\",\n+                                    help: Some(\"consider adding a #[repr(...)] attribute \\\n+                                                to this enum\"),\n+                                };\n                             }\n-\n-                            // Enum with an explicitly sized discriminant; either\n-                            // a C-style enum or a discriminated union.\n-\n-                            // The layout of enum variants is implicitly repr(C).\n-                            // FIXME: Is that correct?\n                         }\n \n                         // Check the contained variants.\n@@ -554,15 +535,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 let r = self.check_type_for_ffi(cache, arg);\n                                 match r {\n                                     FfiSafe => {}\n-                                    FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                    FfiUnsafe { .. } => {\n                                         return r;\n                                     }\n-                                    FfiPhantom => {\n-                                        return FfiBadEnum(def.did,\n-                                                          \"Found phantom data in enum variant\");\n-                                    }\n-                                    FfiUnsafe(s) => {\n-                                        return FfiBadEnum(def.did, s);\n+                                    FfiPhantom(..) => {\n+                                        return FfiUnsafe {\n+                                            ty: ty,\n+                                            reason: \"this enum contains a PhantomData field\",\n+                                            help: None,\n+                                        };\n                                     }\n                                 }\n                             }\n@@ -572,45 +553,44 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyChar => {\n-                FfiUnsafe(\"found Rust type `char` in foreign module, while \\\n-                           `u32` or `libc::wchar_t` should be used\")\n-            }\n+            ty::TyChar => FfiUnsafe {\n+                ty: ty,\n+                reason: \"the `char` type has no C equivalent\",\n+                help: Some(\"consider using `u32` or `libc::wchar_t` instead\"),\n+            },\n \n-            ty::TyInt(ast::IntTy::I128) => {\n-                FfiUnsafe(\"found Rust type `i128` in foreign module, but \\\n-                           128-bit integers don't currently have a known \\\n-                           stable ABI\")\n-            }\n-\n-            ty::TyUint(ast::UintTy::U128) => {\n-                FfiUnsafe(\"found Rust type `u128` in foreign module, but \\\n-                           128-bit integers don't currently have a known \\\n-                           stable ABI\")\n-            }\n+            ty::TyInt(ast::IntTy::I128) | ty::TyUint(ast::UintTy::U128) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"128-bit integers don't currently have a known stable ABI\",\n+                help: None,\n+            },\n \n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) | ty::TyFloat(..) | ty::TyNever => FfiSafe,\n \n-            ty::TySlice(_) => {\n-                FfiUnsafe(\"found Rust slice type in foreign module, \\\n-                           consider using a raw pointer instead\")\n-            }\n-\n-            ty::TyDynamic(..) => {\n-                FfiUnsafe(\"found Rust trait type in foreign module, \\\n-                           consider using a raw pointer instead\")\n-            }\n-\n-            ty::TyStr => {\n-                FfiUnsafe(\"found Rust type `str` in foreign module; \\\n-                           consider using a `*const libc::c_char`\")\n-            }\n-\n-            ty::TyTuple(..) => {\n-                FfiUnsafe(\"found Rust tuple type in foreign module; \\\n-                           consider using a struct instead\")\n-            }\n+            ty::TySlice(_) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"slices have no C equivalent\",\n+                help: Some(\"consider using a raw pointer instead\"),\n+            },\n+\n+            ty::TyDynamic(..) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"trait objects have no C equivalent\",\n+                help: None,\n+            },\n+\n+            ty::TyStr => FfiUnsafe {\n+                ty: ty,\n+                reason: \"string slices have no C equivalent\",\n+                help: Some(\"consider using `*const u8` and a length instead\"),\n+            },\n+\n+            ty::TyTuple(..) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"tuples have unspecified layout\",\n+                help: Some(\"consider using a struct instead\"),\n+            },\n \n             ty::TyRawPtr(ref m) |\n             ty::TyRef(_, ref m) => self.check_type_for_ffi(cache, m.ty),\n@@ -620,9 +600,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::TyFnPtr(sig) => {\n                 match sig.abi() {\n                     Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n-                        return FfiUnsafe(\"found function pointer with Rust calling convention in \\\n-                                          foreign module; consider using an `extern` function \\\n-                                          pointer\")\n+                        return FfiUnsafe {\n+                            ty: ty,\n+                            reason: \"this function pointer has Rust-specific calling convention\",\n+                            help: Some(\"consider using an `fn \\\"extern\\\"(...) -> ...` \\\n+                                        function pointer instead\"),\n+                        }\n                     }\n                     _ => {}\n                 }\n@@ -670,40 +653,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n-            FfiResult::FfiPhantom => {\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found zero-sized type composed only \\\n-                                            of phantom-data in a foreign-function.\"));\n-            }\n-            FfiResult::FfiUnsafe(s) => {\n-                self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n-            }\n-            FfiResult::FfiBadStruct(_, s) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant field.\n+            FfiResult::FfiPhantom(ty) => {\n                 self.cx.span_lint(IMPROPER_CTYPES,\n                                   sp,\n-                                  &format!(\"found non-foreign-function-safe member in struct \\\n-                                            marked #[repr(C)]: {}\",\n-                                           s));\n+                                  &format!(\"`extern` block uses type `{}` which is not FFI-safe: \\\n+                                            composed only of PhantomData\", ty));\n             }\n-            FfiResult::FfiBadUnion(_, s) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant field.\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found non-foreign-function-safe member in union \\\n-                                            marked #[repr(C)]: {}\",\n-                                           s));\n-            }\n-            FfiResult::FfiBadEnum(_, s) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant variant.\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"found non-foreign-function-safe member in enum: {}\",\n-                                           s));\n+            FfiResult::FfiUnsafe { ty: unsafe_ty, reason, help } => {\n+                let msg = format!(\"`extern` block uses type `{}` which is not FFI-safe: {}\",\n+                                  unsafe_ty, reason);\n+                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n+                if let Some(s) = help {\n+                    diag.help(s);\n+                }\n+                if let ty::TyAdt(def, _) = unsafe_ty.sty {\n+                    if let Some(sp) = self.cx.tcx.hir.span_if_local(def.did) {\n+                        diag.span_note(sp, \"type defined here\");\n+                    }\n+                }\n+                diag.emit();\n             }\n         }\n     }"}, {"sha": "f76fa3e4a8ecec2f2029951958a52861b13d851d", "filename": "src/test/compile-fail/issue-14309.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -37,13 +37,13 @@ struct D {\n }\n \n extern \"C\" {\n-    fn foo(x: A); //~ ERROR found struct without foreign-function-safe\n-    fn bar(x: B); //~ ERROR foreign-function-safe\n+    fn foo(x: A); //~ ERROR type `A` which is not FFI-safe\n+    fn bar(x: B); //~ ERROR type `A`\n     fn baz(x: C);\n-    fn qux(x: A2); //~ ERROR foreign-function-safe\n-    fn quux(x: B2); //~ ERROR foreign-function-safe\n+    fn qux(x: A2); //~ ERROR type `A`\n+    fn quux(x: B2); //~ ERROR type `A`\n     fn corge(x: C2);\n-    fn fred(x: D); //~ ERROR foreign-function-safe\n+    fn fred(x: D); //~ ERROR type `A`\n }\n \n fn main() { }"}, {"sha": "f9d01003005e4c045dc6cf16586eb46ae4566216", "filename": "src/test/compile-fail/issue-16250.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -13,7 +13,7 @@\n pub struct Foo;\n \n extern {\n-    pub fn foo(x: (Foo)); //~ ERROR found struct without\n+    pub fn foo(x: (Foo)); //~ ERROR unspecified layout\n }\n \n fn main() {"}, {"sha": "7b7ffd8fc107cfe108cc1395654bdcf7a296f97c", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -16,11 +16,23 @@ enum U { A }\n enum B { C, D }\n enum T { E, F, G }\n \n+#[repr(C)]\n+enum ReprC { A, B, C }\n+\n+#[repr(u8)]\n+enum U8 { A, B, C }\n+\n+#[repr(isize)]\n+enum Isize { A, B, C }\n+\n extern {\n    fn zf(x: Z);\n-   fn uf(x: U); //~ ERROR found enum without foreign-function-safe\n-   fn bf(x: B); //~ ERROR found enum without foreign-function-safe\n-   fn tf(x: T); //~ ERROR found enum without foreign-function-safe\n+   fn uf(x: U); //~ ERROR enum has no representation hint\n+   fn bf(x: B); //~ ERROR enum has no representation hint\n+   fn tf(x: T); //~ ERROR enum has no representation hint\n+   fn reprc(x: ReprC);\n+   fn u8(x: U8);\n+   fn isize(x: Isize);\n }\n \n pub fn main() { }"}, {"sha": "36c42ce1104e0bfbc08ed5ab99b2e1a5171410cf", "filename": "src/test/compile-fail/union/union-repr-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -22,7 +22,7 @@ union W {\n \n extern \"C\" {\n     static FOREIGN1: U; // OK\n-    static FOREIGN2: W; //~ ERROR found union without foreign-function-safe representation\n+    static FOREIGN2: W; //~ ERROR union has unspecified layout\n }\n \n fn main() {}"}, {"sha": "77cb1ef0f5130a29197a9cc53a0d1d3bf61f41fd", "filename": "src/test/ui/lint-ctypes.rs", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -51,27 +51,27 @@ pub struct TransparentCustomZst(i32, ZeroSize);\n pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n \n extern {\n-    pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n-    pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n-    pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n-    pub fn str_type(p: &str); //~ ERROR: found Rust type\n-    pub fn box_type(p: Box<u32>); //~ ERROR found struct without\n-    pub fn char_type(p: char); //~ ERROR found Rust type\n-    pub fn i128_type(p: i128); //~ ERROR found Rust type\n-    pub fn u128_type(p: u128); //~ ERROR found Rust type\n-    pub fn trait_type(p: &Clone); //~ ERROR found Rust trait type\n-    pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n-    pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n-    pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n-    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+    pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n+    pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n+    pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n+    pub fn str_type(p: &str); //~ ERROR: uses type `str`\n+    pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n+    pub fn char_type(p: char); //~ ERROR uses type `char`\n+    pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n+    pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n+    pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+    pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n+    pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n+    pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n     pub fn zero_size_phantom_toplevel()\n-        -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n-    pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n-    pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n-    pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n-    pub fn transparent_i128(p: TransparentI128); //~ ERROR: found Rust type `i128`\n-    pub fn transparent_str(p: TransparentStr); //~ ERROR: found Rust type `str`\n-    pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: found struct without\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n+    pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n+    pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n+    pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n+    pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n+    pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n+    pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n \n     pub fn good3(fptr: Option<extern fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);", "previous_filename": "src/test/compile-fail/lint-ctypes.rs"}, {"sha": "748c311055fa93df6df287aa79186429fd3e7f3f", "filename": "src/test/ui/lint-ctypes.stderr", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f36a35e61c2434bb02fcca004d3ecd385c748a9/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=9f36a35e61c2434bb02fcca004d3ecd385c748a9", "patch": "@@ -0,0 +1,170 @@\n+error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n+  --> $DIR/lint-ctypes.rs:54:28\n+   |\n+54 |     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n+   |                            ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-ctypes.rs:11:9\n+   |\n+11 | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+note: type defined here\n+  --> $DIR/lint-ctypes.rs:32:1\n+   |\n+32 | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n+  --> $DIR/lint-ctypes.rs:55:28\n+   |\n+55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n+   |                            ^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+note: type defined here\n+  --> $DIR/lint-ctypes.rs:32:1\n+   |\n+32 | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n+  --> $DIR/lint-ctypes.rs:56:26\n+   |\n+56 |     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n+   |                          ^^^^^^\n+   |\n+   = help: consider using a raw pointer instead\n+\n+error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n+  --> $DIR/lint-ctypes.rs:57:24\n+   |\n+57 |     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n+   |                        ^^^^\n+   |\n+   = help: consider using `*const u8` and a length instead\n+\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n+  --> $DIR/lint-ctypes.rs:58:24\n+   |\n+58 |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n+   |                        ^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+\n+error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n+  --> $DIR/lint-ctypes.rs:59:25\n+   |\n+59 |     pub fn char_type(p: char); //~ ERROR uses type `char`\n+   |                         ^^^^\n+   |\n+   = help: consider using `u32` or `libc::wchar_t` instead\n+\n+error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+  --> $DIR/lint-ctypes.rs:60:25\n+   |\n+60 |     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n+   |                         ^^^^\n+\n+error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+  --> $DIR/lint-ctypes.rs:61:25\n+   |\n+61 |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n+   |                         ^^^^\n+\n+error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n+  --> $DIR/lint-ctypes.rs:62:26\n+   |\n+62 |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+   |                          ^^^^^^\n+\n+error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n+  --> $DIR/lint-ctypes.rs:63:26\n+   |\n+63 |     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n+   |                          ^^^^^^^^^^\n+   |\n+   = help: consider using a struct instead\n+\n+error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n+  --> $DIR/lint-ctypes.rs:64:27\n+   |\n+64 |     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n+   |                           ^^^^^^^\n+   |\n+   = help: consider using a struct instead\n+\n+error: `extern` block uses type `ZeroSize` which is not FFI-safe: this struct has no fields\n+  --> $DIR/lint-ctypes.rs:65:25\n+   |\n+65 |     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n+   |                         ^^^^^^^^\n+   |\n+   = help: consider adding a member to this struct\n+note: type defined here\n+  --> $DIR/lint-ctypes.rs:28:1\n+   |\n+28 | pub struct ZeroSize;\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `ZeroSizeWithPhantomData` which is not FFI-safe: composed only of PhantomData\n+  --> $DIR/lint-ctypes.rs:66:33\n+   |\n+66 |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `std::marker::PhantomData<bool>` which is not FFI-safe: composed only of PhantomData\n+  --> $DIR/lint-ctypes.rs:68:12\n+   |\n+68 |         -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n+  --> $DIR/lint-ctypes.rs:69:23\n+   |\n+69 |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n+   |                       ^^^^^^\n+   |\n+   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n+\n+error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n+  --> $DIR/lint-ctypes.rs:70:24\n+   |\n+70 |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n+   |                        ^^^^\n+   |\n+   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n+\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n+  --> $DIR/lint-ctypes.rs:71:28\n+   |\n+71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n+   |                            ^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+\n+error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+  --> $DIR/lint-ctypes.rs:72:32\n+   |\n+72 |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n+   |                                ^^^^^^^^^^^^^^^\n+\n+error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n+  --> $DIR/lint-ctypes.rs:73:31\n+   |\n+73 |     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n+   |                               ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `*const u8` and a length instead\n+\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n+  --> $DIR/lint-ctypes.rs:74:30\n+   |\n+74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n+   |                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+\n+error: aborting due to 20 previous errors\n+"}]}