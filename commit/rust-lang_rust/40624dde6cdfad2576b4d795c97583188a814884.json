{"sha": "40624dde6cdfad2576b4d795c97583188a814884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjI0ZGRlNmNkZmFkMjU3NmI0ZDc5NWM5NzU4MzE4OGE4MTQ4ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-23T16:33:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-23T16:33:03Z"}, "message": "Auto merge of #79345 - jonas-schievink:rollup-1yhhzx9, r=jonas-schievink\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #76829 (stabilize const_int_pow)\n - #79080 (MIR visitor: Don't treat debuginfo field access as a use of the struct)\n - #79236 (const_generics: assert resolve hack causes an error)\n - #79287 (Allow using generic trait methods in `const fn`)\n - #79324 (Use Option::and_then instead of open-coding it)\n - #79325 (Reduce boilerplate with the `?` operator)\n - #79330 (Fix typo in comment)\n - #79333 (doc typo)\n - #79337 (Use Option::map instead of open coding it)\n - #79343 (Add my (`@flip1995)` work mail to the mailmap)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7994ac92e4e2b85ce96de1512eef29e96bfab33d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7994ac92e4e2b85ce96de1512eef29e96bfab33d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40624dde6cdfad2576b4d795c97583188a814884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40624dde6cdfad2576b4d795c97583188a814884", "html_url": "https://github.com/rust-lang/rust/commit/40624dde6cdfad2576b4d795c97583188a814884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40624dde6cdfad2576b4d795c97583188a814884/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cf72108edb9b8633a9d284b238988309204494", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cf72108edb9b8633a9d284b238988309204494", "html_url": "https://github.com/rust-lang/rust/commit/40cf72108edb9b8633a9d284b238988309204494"}, {"sha": "ea3c269b70ea9dd77453ab13b9cfec0f4e1df899", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c269b70ea9dd77453ab13b9cfec0f4e1df899", "html_url": "https://github.com/rust-lang/rust/commit/ea3c269b70ea9dd77453ab13b9cfec0f4e1df899"}], "stats": {"total": 384, "additions": 283, "deletions": 101}, "files": [{"sha": "94f2938f11c269258c95fce8375e9f522d418450", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -230,6 +230,7 @@ Phil Dawes <phil@phildawes.net> Phil Dawes <pdawes@drw.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <blei42@gmail.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <bruphili@student.ethz.ch>\n Philipp Krones <hello@philkrones.com> flip1995 <hello@philkrones.com>\n+Philipp Krones <hello@philkrones.com> <philipp.krones@embecosm.com>\n Philipp Matthias Sch\u00e4fer <philipp.matthias.schaefer@posteo.de>\n Przemys\u0142aw Weso\u0142ek <jest@go.art.pl> Przemek Weso\u0142ek <jest@go.art.pl>\n Rafael \u00c1vila de Esp\u00edndola <respindola@mozilla.com> Rafael Avila de Espindola <espindola@dream.(none)>"}, {"sha": "f00dfd1241fbbb6287ac8b91121874128deecc32", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -649,17 +649,13 @@ pub mod shell {\n     impl<'a> Iterator for Substitutions<'a> {\n         type Item = Substitution<'a>;\n         fn next(&mut self) -> Option<Self::Item> {\n-            match parse_next_substitution(self.s) {\n-                Some((mut sub, tail)) => {\n-                    self.s = tail;\n-                    if let Some(InnerSpan { start, end }) = sub.position() {\n-                        sub.set_position(start + self.pos, end + self.pos);\n-                        self.pos += end;\n-                    }\n-                    Some(sub)\n-                }\n-                None => None,\n+            let (mut sub, tail) = parse_next_substitution(self.s)?;\n+            self.s = tail;\n+            if let Some(InnerSpan { start, end }) = sub.position() {\n+                sub.set_position(start + self.pos, end + self.pos);\n+                self.pos += end;\n             }\n+            Some(sub)\n         }\n \n         fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "96484034da7cd7102384d361d20c46472c83731c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1152,10 +1152,7 @@ impl<'ll> MemberDescription<'ll> {\n                 self.size.bits(),\n                 self.align.bits() as u32,\n                 self.offset.bits(),\n-                match self.discriminant {\n-                    None => None,\n-                    Some(value) => Some(cx.const_u64(value)),\n-                },\n+                self.discriminant.map(|v| cx.const_u64(v)),\n                 self.flags,\n                 self.type_metadata,\n             )"}, {"sha": "9651d0505e684dddf42b076c0737a1ea71dc55e2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -37,12 +37,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     /// `funclet_bb` member if it is not `None`.\n     fn funclet<'b, Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'b mut FunctionCx<'a, 'tcx, Bx>,\n+        fx: &'b FunctionCx<'a, 'tcx, Bx>,\n     ) -> Option<&'b Bx::Funclet> {\n-        match self.funclet_bb {\n-            Some(funcl) => fx.funclets[funcl].as_ref(),\n-            None => None,\n-        }\n+        self.funclet_bb.and_then(|funcl| fx.funclets[funcl].as_ref())\n     }\n \n     fn lltarget<Bx: BuilderMethods<'a, 'tcx>>("}, {"sha": "8273c2d291d096020ede192b4f10f6c7a2e257e0", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -309,7 +309,7 @@ impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToT\n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(obligation) = self.base_iterator.next() {\n             if let Some(data) = obligation.predicate.to_opt_poly_trait_ref() {\n-                return Some(data);\n+                return Some(data.value);\n             }\n         }\n         None"}, {"sha": "ad47c6e75d354a1733a88dbaffcc7f9b60c76f90", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1017,11 +1017,14 @@ macro_rules! visit_place_fns {\n             let mut context = context;\n \n             if !place.projection.is_empty() {\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n+                if context.is_use() {\n+                    // ^ Only change the context if it is a real use, not a \"use\" in debuginfo.\n+                    context = if context.is_mutating_use() {\n+                        PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                    } else {\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                    };\n+                }\n             }\n \n             self.visit_local(&place.local, context, location);"}, {"sha": "1902a97e21c013a4b84f2b534245110f7d08b7e2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -16,6 +16,7 @@ use crate::ty::{self, AdtKind, Ty, TyCtxt};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::Constness;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -457,7 +458,7 @@ pub enum ImplSource<'tcx, N> {\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n     /// any).\n-    Param(Vec<N>),\n+    Param(Vec<N>, Constness),\n \n     /// Virtual calls through an object.\n     Object(ImplSourceObjectData<'tcx, N>),\n@@ -487,7 +488,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n             ImplSource::UserDefined(i) => i.nested,\n-            ImplSource::Param(n) => n,\n+            ImplSource::Param(n, _) => n,\n             ImplSource::Builtin(i) => i.nested,\n             ImplSource::AutoImpl(d) => d.nested,\n             ImplSource::Closure(c) => c.nested,\n@@ -502,7 +503,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match &self {\n             ImplSource::UserDefined(i) => &i.nested[..],\n-            ImplSource::Param(n) => &n[..],\n+            ImplSource::Param(n, _) => &n[..],\n             ImplSource::Builtin(i) => &i.nested[..],\n             ImplSource::AutoImpl(d) => &d.nested[..],\n             ImplSource::Closure(c) => &c.nested[..],\n@@ -524,7 +525,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                 substs: i.substs,\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSource::Param(n) => ImplSource::Param(n.into_iter().map(f).collect()),\n+            ImplSource::Param(n, ct) => ImplSource::Param(n.into_iter().map(f).collect(), ct),\n             ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {\n                 nested: i.nested.into_iter().map(f).collect(),\n             }),"}, {"sha": "e056240f9415045ae2f18f600a9ea62f5dec8f71", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -101,7 +101,7 @@ pub enum SelectionCandidate<'tcx> {\n         /// `false` if there are no *further* obligations.\n         has_nested: bool,\n     },\n-    ParamCandidate(ty::PolyTraitRef<'tcx>),\n+    ParamCandidate(ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>),\n     ImplCandidate(DefId),\n     AutoImplCandidate(DefId),\n "}, {"sha": "5a17d38c73460bacbb994669ba118171ed4050d8", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -21,7 +21,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n \n             super::ImplSource::Object(ref d) => write!(f, \"{:?}\", d),\n \n-            super::ImplSource::Param(ref n) => write!(f, \"ImplSourceParamData({:?})\", n),\n+            super::ImplSource::Param(ref n, ct) => {\n+                write!(f, \"ImplSourceParamData({:?}, {:?})\", n, ct)\n+            }\n \n             super::ImplSource::Builtin(ref d) => write!(f, \"{:?}\", d),\n "}, {"sha": "a6f91278a3bc4a58c0f718f9b671e29a1173a283", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -42,7 +42,9 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate};\n+use rustc_hir::{\n+    Constness, HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate,\n+};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n@@ -1635,6 +1637,8 @@ nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n // This is the impl for `&'a InternalSubsts<'a>`.\n nop_list_lift! {substs; GenericArg<'a> => GenericArg<'tcx>}\n \n+CloneLiftImpls! { for<'tcx> { Constness, } }\n+\n pub mod tls {\n     use super::{ptr_eq, GlobalCtxt, TyCtxt};\n "}, {"sha": "5d8edcf70bfd3329eff91af509afa157cbf3a37a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1503,9 +1503,11 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    pub fn to_opt_poly_trait_ref(self) -> Option<PolyTraitRef<'tcx>> {\n+    pub fn to_opt_poly_trait_ref(self) -> Option<ConstnessAnd<PolyTraitRef<'tcx>>> {\n         match self.skip_binders() {\n-            PredicateAtom::Trait(t, _) => Some(ty::Binder::bind(t.trait_ref)),\n+            PredicateAtom::Trait(t, constness) => {\n+                Some(ConstnessAnd { constness, value: ty::Binder::bind(t.trait_ref) })\n+            }\n             PredicateAtom::Projection(..)\n             | PredicateAtom::Subtype(..)\n             | PredicateAtom::RegionOutlives(..)\n@@ -1947,7 +1949,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ConstnessAnd<T> {\n     pub constness: Constness,\n     pub value: T,"}, {"sha": "c906b8ac901a57656a929a3b380fd0169e446214", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1106,10 +1106,7 @@ impl<T> Binder<T> {\n \n impl<T> Binder<Option<T>> {\n     pub fn transpose(self) -> Option<Binder<T>> {\n-        match self.0 {\n-            Some(v) => Some(Binder(v)),\n-            None => None,\n-        }\n+        self.0.map(Binder)\n     }\n }\n "}, {"sha": "d00038f345c9950ee022273b7436475c117043fa", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -4,16 +4,18 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n };\n+use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::{self, TraitEngine};\n+use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n \n use std::mem;\n use std::ops::Deref;\n@@ -765,9 +767,39 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     }\n                 };\n \n-                // Resolve a trait method call to its concrete implementation, which may be in a\n-                // `const` trait impl.\n-                if self.tcx.features().const_trait_impl {\n+                // Attempting to call a trait method?\n+                if let Some(trait_id) = tcx.trait_of_item(callee) {\n+                    if !self.tcx.features().const_trait_impl {\n+                        self.check_op(ops::FnCallNonConst(callee));\n+                        return;\n+                    }\n+\n+                    let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n+                    let obligation = Obligation::new(\n+                        ObligationCause::dummy(),\n+                        param_env,\n+                        Binder::bind(TraitPredicate {\n+                            trait_ref: TraitRef::from_method(tcx, trait_id, substs),\n+                        }),\n+                    );\n+\n+                    let implsrc = tcx.infer_ctxt().enter(|infcx| {\n+                        let mut selcx = SelectionContext::new(&infcx);\n+                        selcx.select(&obligation).unwrap()\n+                    });\n+\n+                    // If the method is provided via a where-clause that does not use the `?const`\n+                    // opt-out, the call is allowed.\n+                    if let Some(ImplSource::Param(_, hir::Constness::Const)) = implsrc {\n+                        debug!(\n+                            \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n+                            trait_ref, param_env\n+                        );\n+                        return;\n+                    }\n+\n+                    // Resolve a trait method call to its concrete implementation, which may be in a\n+                    // `const` trait impl.\n                     let instance = Instance::resolve(tcx, param_env, callee, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", callee, instance);\n                     if let Ok(Some(func)) = instance {"}, {"sha": "29b90bff210bdcec17aec07a4fc132263a653230", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n-    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n+    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n@@ -200,12 +200,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_var_debug_info(&mut self, var_debug_info: &VarDebugInfo<'tcx>) {\n-        // Debuginfo can contain field projections, which count as a use of the base local. Skip\n-        // debuginfo so that we avoid the storage liveness assertion in that case.\n-        self.visit_source_info(&var_debug_info.source_info);\n-    }\n-\n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         // This check is somewhat expensive, so only run it when -Zvalidate-mir is passed.\n         if self.tcx.sess.opts.debugging_opts.validate_mir {"}, {"sha": "b8fa9081aa34b6007f37dbc77339493e6423491c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -691,7 +691,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::OpaqueTy(..) => {\n                 // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)\n-                // Since rustdoc never need to do codegen and doesn't care about link-time reachability,\n+                // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,\n                 // mark this as unreachable.\n                 // See https://github.com/rust-lang/rust/issues/75100\n                 if !self.tcx.sess.opts.actually_rustdoc {"}, {"sha": "67491b5bf7e4e38334ea8b8be9ca0f45e62f8b61", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -143,7 +143,7 @@ impl<'a> Resolver<'a> {\n                     _ => {\n                         bug!(\n                             \"GenericParamsFromOuterFunction should only be used with Res::SelfTy, \\\n-                            DefKind::TyParam\"\n+                            DefKind::TyParam or DefKind::ConstParam\"\n                         );\n                     }\n                 }"}, {"sha": "e8a06265adaf36d1c0d1a581e31b0005eb93fef0", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -2539,6 +2539,7 @@ impl<'a> Resolver<'a> {\n         span: Span,\n         all_ribs: &[Rib<'a>],\n     ) -> Res {\n+        const CG_BUG_STR: &str = \"min_const_generics resolve check didn't stop compilation\";\n         debug!(\"validate_res_from_ribs({:?})\", res);\n         let ribs = &all_ribs[rib_index + 1..];\n \n@@ -2639,6 +2640,8 @@ impl<'a> Resolver<'a> {\n                                             },\n                                         );\n                                     }\n+\n+                                    self.session.delay_span_bug(span, CG_BUG_STR);\n                                     return Res::Err;\n                                 }\n                             }\n@@ -2720,6 +2723,8 @@ impl<'a> Resolver<'a> {\n                                         },\n                                     );\n                                 }\n+\n+                                self.session.delay_span_bug(span, CG_BUG_STR);\n                                 return Res::Err;\n                             }\n "}, {"sha": "ca3369b8f1e9d2d2c313f16d3d782faa6efdd752", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -350,11 +350,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds =\n-            all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());\n+            all_bounds.filter(|p| p.value.def_id() == stack.obligation.predicate.def_id());\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n-            let wc = self.evaluate_where_clause(stack, bound)?;\n+            let wc = self.evaluate_where_clause(stack, bound.value)?;\n             if wc.may_apply() {\n                 candidates.vec.push(ParamCandidate(bound));\n             }"}, {"sha": "a42c8021346496fc6a30b3f2c67e56efa4a24722", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -8,6 +8,7 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n+use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -55,8 +56,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ParamCandidate(param) => {\n-                let obligations = self.confirm_param_candidate(obligation, param);\n-                Ok(ImplSource::Param(obligations))\n+                let obligations = self.confirm_param_candidate(obligation, param.value);\n+                Ok(ImplSource::Param(obligations, param.constness))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -70,7 +71,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ProjectionCandidate(idx) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n-                Ok(ImplSource::Param(obligations))\n+                // FIXME(jschievink): constness\n+                Ok(ImplSource::Param(obligations, Constness::NotConst))\n             }\n \n             ObjectCandidate(idx) => {\n@@ -106,7 +108,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSource::Param(Vec::new()))\n+                Ok(ImplSource::Param(Vec::new(), Constness::NotConst))\n             }\n \n             BuiltinUnsizeCandidate => {\n@@ -151,7 +153,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate)\n+                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);"}, {"sha": "5b31998b7d33f162b8be57bab648a7492835cf2e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -31,6 +31,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::Constness;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n@@ -1335,7 +1336,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate, _) => true,\n             (_, BuiltinCandidate { has_nested: false } | DiscriminantKindCandidate) => false,\n \n-            (ParamCandidate(..), ParamCandidate(..)) => false,\n+            (ParamCandidate(other), ParamCandidate(victim)) => {\n+                if other.value == victim.value && victim.constness == Constness::NotConst {\n+                    // Drop otherwise equivalent non-const candidates in favor of const candidates.\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n \n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n@@ -1354,11 +1362,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(_),\n-            ) => !is_global(cand),\n+            ) => !is_global(&cand.value),\n             (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand)\n+                is_global(&cand.value)\n             }\n             (\n                 ImplCandidate(_)\n@@ -1373,7 +1381,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand) && other.evaluation.must_apply_modulo_regions()\n+                is_global(&cand.value) && other.evaluation.must_apply_modulo_regions()\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j))\n@@ -2364,13 +2372,9 @@ impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {\n     type Item = &'o TraitObligationStack<'o, 'tcx>;\n \n     fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {\n-        match self.head {\n-            Some(o) => {\n-                *self = o.previous;\n-                Some(o)\n-            }\n-            None => None,\n-        }\n+        let o = self.head?;\n+        *self = o.previous;\n+        Some(o)\n     }\n }\n "}, {"sha": "0133a961c11a7a343f2b89ef857c89f8e8642835", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -498,8 +498,8 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n \n     for (p, _) in predicates {\n         if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n-            if Some(poly_trait_ref.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n+            if Some(poly_trait_ref.value.def_id()) == sized_trait {\n+                types_without_default_bounds.remove(poly_trait_ref.value.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "ab4a81c7d152edcc9bcd28e70fbf5d31c9dd7883", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n                 .to_opt_poly_trait_ref()\n-                .map(|trait_ref| item.clone_and_push(trait_ref, *span))\n+                .map(|trait_ref| item.clone_and_push(trait_ref.value, *span))\n         });\n         debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n \n@@ -182,7 +182,7 @@ impl Iterator for SupertraitDefIds<'tcx> {\n                 .predicates\n                 .iter()\n                 .filter_map(|(pred, _)| pred.to_opt_poly_trait_ref())\n-                .map(|trait_ref| trait_ref.def_id())\n+                .map(|trait_ref| trait_ref.value.def_id())\n                 .filter(|&super_def_id| visited.insert(super_def_id)),\n         );\n         Some(def_id)"}, {"sha": "5bcb16d21e09c6789326ef4f40b08a763de5ba9e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -294,7 +294,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             let mut cause = cause.clone();\n             if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n                 let derived_cause = traits::DerivedObligationCause {\n-                    parent_trait_ref,\n+                    parent_trait_ref: parent_trait_ref.value,\n                     parent_code: Rc::new(obligation.cause.code.clone()),\n                 };\n                 cause.make_mut().code ="}, {"sha": "b011e26d64b9a34c56f9c87181d09c304a60014c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1364,7 +1364,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             || {\n                 traits::transitive_bounds(\n                     tcx,\n-                    predicates.iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref()),\n+                    predicates.iter().filter_map(|(p, _)| {\n+                        p.to_opt_poly_trait_ref().map(|trait_ref| trait_ref.value)\n+                    }),\n                 )\n             },\n             || param_name.to_string(),"}, {"sha": "d12d2cb59a5a9e7dc076252ca586b564d835c8c2", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -810,10 +810,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // can be given the suggestion \"u32::from(x) > y\" rather than\n                 // \"x > y.try_into().unwrap()\".\n                 let lhs_expr_and_src = expected_ty_expr.and_then(|expr| {\n-                    match self.tcx.sess.source_map().span_to_snippet(expr.span).ok() {\n-                        Some(src) => Some((expr, src)),\n-                        None => None,\n-                    }\n+                    self.tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(expr.span)\n+                        .ok()\n+                        .map(|src| (expr, src))\n                 });\n                 let (span, msg, suggestion) = if let (Some((lhs_expr, lhs_src)), false) =\n                     (lhs_expr_and_src, exp_to_found_is_fallible)"}, {"sha": "eb32cef24a1ea5b735057ee571d5d1945f1ba6a2", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1551,12 +1551,12 @@ where\n     pred: F,\n     inner: DrainFilterInner<'a, K, V>,\n }\n-/// Most of the implementation of DrainFilter, independent of the type\n+/// Most of the implementation of DrainFilter are generic over the type\n /// of the predicate, thus also serving for BTreeSet::DrainFilter.\n pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n     /// Reference to the length field in the borrowed map, updated live.\n     length: &'a mut usize,\n-    /// Burried reference to the root field in the borrowed map.\n+    /// Buried reference to the root field in the borrowed map.\n     /// Wrapped in `Option` to allow drop handler to `take` it.\n     dormant_root: Option<DormantMutRef<'a, Root<K, V>>>,\n     /// Contains a leaf edge preceding the next element to be returned, or the last leaf edge."}, {"sha": "5a5aa76a076272210aef2da9248f209f1e896592", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1486,7 +1486,7 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = unsafe { ctlz_nonzero(x) };\n     /// assert_eq!(num_leading, 3);\n     /// ```\n-    #[rustc_const_unstable(feature = \"constctlz\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"constctlz\", since = \"1.50.0\")]\n     pub fn ctlz_nonzero<T: Copy>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`."}, {"sha": "cb4c24c39677d028e911cdc4b50ab01a042ccd30", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -78,8 +78,6 @@\n #![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_mut_refs)]\n-#![feature(const_int_pow)]\n-#![feature(constctlz)]\n #![feature(const_cttz)]\n #![feature(const_panic)]\n #![feature(const_pin)]"}, {"sha": "33eefe5d26580d8150658b884690af0c3fa17339", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -791,7 +791,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -974,7 +974,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1340,7 +1340,7 @@ assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1707,7 +1707,7 @@ assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1757,7 +1757,7 @@ assert_eq!(x.pow(5), 32);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]"}, {"sha": "390c1b7e9e8710f3ea415f61e7509fce07b29c7b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -749,7 +749,7 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -865,7 +865,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1159,7 +1159,7 @@ Basic usage:\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1484,7 +1484,7 @@ Basic usage:\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1532,7 +1532,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".pow(5), 32);\", $EndFeature, \"\n ```\"),\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -1648,7 +1648,7 @@ assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n         #[inline]\n-        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+        #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n         const fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n@@ -1677,7 +1677,7 @@ Basic usage:\n assert_eq!(3\", stringify!($SelfT), \".next_power_of_two(), 4);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn next_power_of_two(self) -> Self {\n@@ -1703,7 +1703,7 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             pub const fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n@@ -1728,7 +1728,7 @@ $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n-            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_pow\", since = \"1.50.0\")]\n             pub const fn wrapping_next_power_of_two(self) -> Self {\n                 self.one_less_than_next_power_of_two().wrapping_add(1)\n             }"}, {"sha": "30bcb78bcf2701d95da8cc60f4f8a0fcd2fc66d5", "filename": "src/test/ui/consts/const-int-pow-rpass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_int_pow)]\n #![feature(wrapping_next_power_of_two)]\n \n const IS_POWER_OF_TWO_A: bool = 0u32.is_power_of_two();"}, {"sha": "6a511f4ed3ed8492c146ac20153ffb32e60a4dbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,27 @@\n+//! Basic test for calling methods on generic type parameters in `const fn`.\n+\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+const fn equals_self_wrapper<T: PartialEq>(t: &T) -> bool {\n+    equals_self(t)\n+}\n+\n+pub const EQ: bool = equals_self_wrapper(&S);\n+\n+fn main() {}"}, {"sha": "b39d27779f45f72f5f546e2370d01e61881c37a5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+// This duplicate bound should not result in ambiguities. It should be equivalent to a single const\n+// bound.\n+const fn equals_self<T: PartialEq + ?const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}, {"sha": "6d4bfe722dee72058dffbb2f411d6ee6d68f7daf", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+pub const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+    //~^ ERROR calls in constant functions are limited to constant functions\n+}\n+\n+fn main() {}"}, {"sha": "4b2fc56aaa78a944791f288eeb42035c050ff00e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/call-generic-method-fail.rs:7:5\n+   |\n+LL |     *t == *t\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "f0e321422215440ea8e090ecf1434f1d277529c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-opt-out.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+// Calling `equals_self` with a type that only has a non-const impl is fine, because we opted out.\n+\n+fn main() {}"}, {"sha": "2c8f6354dc60f652036275c5393197e49e32cda8", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(jschievink): this is not rejected correctly (only when the non-const impl is actually used)\n+// ignore-test\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+// Calling `equals_self` with something that has a non-const impl should throw an error, despite\n+// it not using the impl.\n+\n+pub const EQ: bool = equals_self(&S);\n+//~^ ERROR\n+\n+fn main() {}"}, {"sha": "e968e6ec7bb80ef33114e1845fd68e46ef1509ac", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -0,0 +1,23 @@\n+//! Basic test for calling methods on generic type parameters in `const fn`.\n+\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}, {"sha": "f9697afe405257aaab6a1e9341bce83cce7a364d", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40624dde6cdfad2576b4d795c97583188a814884/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=40624dde6cdfad2576b4d795c97583188a814884", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             for &(p, _span) in preds {\n                 let p = p.subst(cx.tcx, subst);\n                 if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n-                    if Some(trait_ref.def_id()) == cx.tcx.lang_items().future_trait() {\n+                    if Some(trait_ref.value.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n                         break;\n                     }"}]}