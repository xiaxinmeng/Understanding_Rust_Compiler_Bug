{"sha": "e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZDI5MWFmYmZkMjUzY2RjYTYwYmNmODNmMmFmYjJiNTcxOWM2YmE=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-16T16:06:48Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-19T19:19:11Z"}, "message": "mir-borrowck: Use bool for autoderef in append_lvalue_to_string()", "tree": {"sha": "33f287f2de470e7fff0b84a64d606311421af536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f287f2de470e7fff0b84a64d606311421af536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "html_url": "https://github.com/rust-lang/rust/commit/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094d67ee37d37caa2ebd755fa39ebcaa7b586b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/094d67ee37d37caa2ebd755fa39ebcaa7b586b26", "html_url": "https://github.com/rust-lang/rust/commit/094d67ee37d37caa2ebd755fa39ebcaa7b586b26"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "b1fa9ba48485f3e5a6c867dbca28b4dc189e865b", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "patch": "@@ -1577,15 +1577,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     // End-user visible description of `lvalue`\n     fn describe_lvalue(&self, lvalue: &Lvalue<'tcx>) -> String {\n         let mut buf = String::new();\n-        self.append_lvalue_to_string(lvalue, &mut buf, None);\n+        self.append_lvalue_to_string(lvalue, &mut buf, false);\n         buf\n     }\n \n     // Appends end-user visible description of `lvalue` to `buf`.\n     fn append_lvalue_to_string(&self,\n                                lvalue: &Lvalue<'tcx>,\n                                buf: &mut String,\n-                               autoderef: Option<bool>) {\n+                               mut autoderef: bool) {\n         match *lvalue {\n             Lvalue::Local(local) => {\n                 self.append_local_to_string(local, buf, \"_\");\n@@ -1594,19 +1594,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 buf.push_str(&format!(\"{}\", &self.tcx.item_name(static_.def_id)));\n             }\n             Lvalue::Projection(ref proj) => {\n-                let mut autoderef = autoderef.unwrap_or(false);\n-\n                 match proj.elem {\n                     ProjectionElem::Deref => {\n                         if autoderef {\n-                            self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                            self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                         } else {\n                             buf.push_str(&\"*\");\n-                            self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                            self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                         }\n                     },\n                     ProjectionElem::Downcast(..) => {\n-                        self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                        self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                     },\n                     ProjectionElem::Field(field, _ty) => {\n                         autoderef = true;\n@@ -1617,14 +1615,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         if is_projection_from_ty_closure {\n                             buf.push_str(&format!(\"{}\", field_name));\n                         } else {\n-                            self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                            self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                             buf.push_str(&format!(\".{}\", field_name));\n                         }\n                     },\n                     ProjectionElem::Index(index) => {\n                         autoderef = true;\n \n-                        self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                        self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                         buf.push_str(\"[\");\n                         self.append_local_to_string(index, buf, \"..\");\n                         buf.push_str(\"]\");\n@@ -1634,7 +1632,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         // Since it isn't possible to borrow an element on a particular index and\n                         // then use another while the borrow is held, don't output indices details\n                         // to avoid confusing the end-user\n-                        self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n+                        self.append_lvalue_to_string(&proj.base, buf, autoderef);\n                         buf.push_str(&\"[..]\");\n                     },\n                 };"}]}