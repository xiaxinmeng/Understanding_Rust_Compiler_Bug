{"sha": "b6113066429bc3108f62b920ccbfc79accfef2dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTEzMDY2NDI5YmMzMTA4ZjYyYjkyMGNjYmZjNzlhY2NmZWYyZGQ=", "commit": {"author": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-11-28T01:44:02Z"}, "committer": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-03T23:54:26Z"}, "message": "Add lint unsafe_sizeof_count_copies", "tree": {"sha": "67d3ca97a89d72a81065c1d4b52334395176cfc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d3ca97a89d72a81065c1d4b52334395176cfc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6113066429bc3108f62b920ccbfc79accfef2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6113066429bc3108f62b920ccbfc79accfef2dd", "html_url": "https://github.com/rust-lang/rust/commit/b6113066429bc3108f62b920ccbfc79accfef2dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6113066429bc3108f62b920ccbfc79accfef2dd/comments", "author": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249b6fee9120efb6d6bb8f559524c478b2ab4b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/249b6fee9120efb6d6bb8f559524c478b2ab4b74", "html_url": "https://github.com/rust-lang/rust/commit/249b6fee9120efb6d6bb8f559524c478b2ab4b74"}], "stats": {"total": 293, "additions": 293, "deletions": 0}, "files": [{"sha": "e0f3b82ad25cf563e7385b025c3f47d86cd20d8e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -2124,6 +2124,7 @@ Released 2018-09-13\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n [`unsafe_derive_deserialize`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n+[`unsafe_sizeof_count_copies`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_sizeof_count_copies\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization\n [`unseparated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix\n [`unsound_collection_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsound_collection_transmute"}, {"sha": "1bce0130b40391cb0dd90dc95dc4ae0f863a7cc7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -329,6 +329,7 @@ mod unnecessary_sort_by;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n+mod unsafe_sizeof_count_copies;\n mod unused_io_amount;\n mod unused_self;\n mod unused_unit;\n@@ -916,6 +917,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnecessary_wraps::UNNECESSARY_WRAPS,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        &unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n         &unused_self::UNUSED_SELF,\n         &unused_unit::UNUSED_UNIT,\n@@ -998,6 +1000,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box matches::Matches::new(msrv));\n     store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n     store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n+    store.register_late_pass(|| box unsafe_sizeof_count_copies::UnsafeSizeofCountCopies);\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -1605,6 +1608,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+        LintId::of(&unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1883,6 +1887,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n+        LintId::of(&unsafe_sizeof_count_copies::UNSAFE_SIZEOF_COUNT_COPIES),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),"}, {"sha": "2422df8feba7a1139807b605b368ebd239258e60", "filename": "clippy_lints/src/unsafe_sizeof_count_copies.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Funsafe_sizeof_count_copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Funsafe_sizeof_count_copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_sizeof_count_copies.rs?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -0,0 +1,98 @@\n+//! Lint on unsafe memory copying that use the `size_of` of the pointee type instead of a pointee\n+//! count\n+\n+use crate::utils::{match_def_path, paths, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::BinOpKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{Ty as TyM, TyS};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Detects expressions where\n+    /// size_of::<T> is used as the count argument to unsafe\n+    /// memory copying functions like ptr::copy and\n+    /// ptr::copy_nonoverlapping where T is the pointee type\n+    /// of the pointers used\n+    ///\n+    /// **Why is this bad?** These functions expect a count\n+    /// of T and not a number of bytes, which can lead to\n+    /// copying the incorrect amount of bytes, which can\n+    /// result in Undefined Behaviour\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,no_run\n+    /// # use std::ptr::copy_nonoverlapping;\n+    /// # use std::mem::size_of;\n+    ///\n+    /// const SIZE: usize = 128;\n+    /// let x = [2u8; SIZE];\n+    /// let mut y = [2u8; SIZE];\n+    /// unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    /// ```\n+    pub UNSAFE_SIZEOF_COUNT_COPIES,\n+    correctness,\n+    \"unsafe memory copying using a byte count instead of a count of T\"\n+}\n+\n+declare_lint_pass!(UnsafeSizeofCountCopies => [UNSAFE_SIZEOF_COUNT_COPIES]);\n+\n+fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<TyM<'tcx>> {\n+    match &expr.kind {\n+        ExprKind::Call(ref count_func, _func_args) => {\n+            if_chain! {\n+                if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n+                if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n+                if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n+                    || match_def_path(cx, def_id, &paths::MEM_SIZE_OF_VAL);\n+                then {\n+                    cx.typeck_results().node_substs(count_func.hir_id).types().next()\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n+            get_size_of_ty(cx, &*left).or_else(|| get_size_of_ty(cx, &*right))\n+        },\n+        _ => None,\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnsafeSizeofCountCopies {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            // Find calls to ptr::copy and copy_nonoverlapping\n+            if let ExprKind::Call(ref func, ref func_args) = expr.kind;\n+            if let ExprKind::Path(ref func_qpath) = func.kind;\n+            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if match_def_path(cx, def_id, &paths::COPY_NONOVERLAPPING)\n+                || match_def_path(cx, def_id, &paths::COPY);\n+\n+            // Get the pointee type\n+            let _substs = cx.typeck_results().node_substs(func.hir_id);\n+            if let Some(pointee_ty) = cx.typeck_results().node_substs(func.hir_id).types().next();\n+\n+            // Find a size_of call in the count parameter expression and\n+            // check that it's the same type\n+            if let [_src, _dest, count] = &**func_args;\n+            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count);\n+            if TyS::same_type(pointee_ty, ty_used_for_size_of);\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    UNSAFE_SIZEOF_COUNT_COPIES,\n+                    expr.span,\n+                    \"unsafe memory copying using a byte count (Multiplied by size_of::<T>) \\\n+                    instead of a count of T\",\n+                    None,\n+                    \"use a count of elements instead of a count of bytes for the count parameter, \\\n+                    it already gets multiplied by the size of the pointed to type\"\n+                );\n+            }\n+        };\n+    }\n+}"}, {"sha": "fe763d4bfbb7c7b39bf760f9d819b376026a2bee", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -20,6 +20,8 @@ pub const CLONE_TRAIT: [&str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n+pub const COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n+pub const COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n@@ -73,6 +75,8 @@ pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"Manua\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n+pub const MEM_SIZE_OF: [&str; 3] = [\"core\", \"mem\", \"size_of\"];\n+pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];"}, {"sha": "0077ed07fce43f354e6a3fbd6a4cae878fa19d33", "filename": "tests/ui/unsafe_sizeof_count_copies.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/tests%2Fui%2Funsafe_sizeof_count_copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/tests%2Fui%2Funsafe_sizeof_count_copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_sizeof_count_copies.rs?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -0,0 +1,54 @@\n+#![warn(clippy::unsafe_sizeof_count_copies)]\n+\n+use std::mem::{size_of, size_of_val};\n+use std::ptr::{copy, copy_nonoverlapping};\n+\n+fn main() {\n+    const SIZE: usize = 128;\n+    const HALF_SIZE: usize = SIZE / 2;\n+    const DOUBLE_SIZE: usize = SIZE * 2;\n+    let mut x = [2u8; SIZE];\n+    let mut y = [2u8; SIZE];\n+\n+    // Count is size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+\n+    // Count expression involving multiplication of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n+\n+    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * HALF_SIZE * 2) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE * HALF_SIZE) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * HALF_SIZE * 2) };\n+\n+    // Count expression involving divisions of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * DOUBLE_SIZE / 2) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / 2 * size_of_val(&x[0])) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * DOUBLE_SIZE / 2) };\n+\n+    // No size_of calls (Should not trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+\n+    // Different types for pointee and size_of (Should not trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u16>() / 2 * SIZE) };\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&0u16) / 2 * SIZE) };\n+\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u16>() / 2 * SIZE) };\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&0u16) / 2 * SIZE) };\n+}"}, {"sha": "6804df8cdfcc1b16b2c478411e83f2b60668da98", "filename": "tests/ui/unsafe_sizeof_count_copies.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/b6113066429bc3108f62b920ccbfc79accfef2dd/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6113066429bc3108f62b920ccbfc79accfef2dd/tests%2Fui%2Funsafe_sizeof_count_copies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_sizeof_count_copies.stderr?ref=b6113066429bc3108f62b920ccbfc79accfef2dd", "patch": "@@ -0,0 +1,131 @@\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:14:14\n+   |\n+LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unsafe-sizeof-count-copies` implied by `-D warnings`\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:15:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:17:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:18:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:21:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:22:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:24:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:25:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * SIZE) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:28:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * HALF_SIZE * 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:29:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:31:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE * HALF_SIZE) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:32:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * HALF_SIZE * 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:35:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * DOUBLE_SIZE / 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:36:14\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / 2 * size_of_val(&x[0])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:38:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: unsafe memory copying using a byte count (Multiplied by size_of::<T>) instead of a count of T\n+  --> $DIR/unsafe_sizeof_count_copies.rs:39:14\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0]) * DOUBLE_SIZE / 2) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes for the count parameter, it already gets multiplied by the size of the pointed to type\n+\n+error: aborting due to 16 previous errors\n+"}]}