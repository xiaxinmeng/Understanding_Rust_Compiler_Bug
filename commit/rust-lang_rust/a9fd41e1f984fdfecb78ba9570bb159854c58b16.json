{"sha": "a9fd41e1f984fdfecb78ba9570bb159854c58b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZmQ0MWUxZjk4NGZkZmVjYjc4YmE5NTcwYmIxNTk4NTRjNThiMTY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-13T22:15:32Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-14T15:15:45Z"}, "message": "Fallout: move from scoped to spawn", "tree": {"sha": "d7dcda50ed1a28a5f3c1e1c7af3225516bb12522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dcda50ed1a28a5f3c1e1c7af3225516bb12522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9fd41e1f984fdfecb78ba9570bb159854c58b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fd41e1f984fdfecb78ba9570bb159854c58b16", "html_url": "https://github.com/rust-lang/rust/commit/a9fd41e1f984fdfecb78ba9570bb159854c58b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9fd41e1f984fdfecb78ba9570bb159854c58b16/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0fb70ff6effe7b7be2c5fe951e9161613e6707", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0fb70ff6effe7b7be2c5fe951e9161613e6707", "html_url": "https://github.com/rust-lang/rust/commit/6e0fb70ff6effe7b7be2c5fe951e9161613e6707"}], "stats": {"total": 252, "additions": 128, "deletions": 124}, "files": [{"sha": "e6d560d8122e6c9bb29899be075a83d6ed05df18", "filename": "src/doc/intro.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -389,6 +389,7 @@ safe concurrent programs.\n Here's an example of a concurrent Rust program:\n \n ```{rust}\n+# #![feature(scoped)]\n use std::thread;\n \n fn main() {\n@@ -421,6 +422,7 @@ problem.\n Let's see an example. This Rust code will not compile:\n \n ```{rust,ignore}\n+# #![feature(scoped)]\n use std::thread;\n \n fn main() {\n@@ -467,6 +469,7 @@ that our mutation doesn't cause a data race.\n Here's what using a Mutex looks like:\n \n ```{rust}\n+# #![feature(scoped)]\n use std::thread;\n use std::sync::Mutex;\n \n@@ -527,6 +530,7 @@ As an example, Rust's ownership system is _entirely_ at compile time. The\n safety check that makes this an error about moved values:\n \n ```{rust,ignore}\n+# #![feature(scoped)]\n use std::thread;\n \n fn main() {"}, {"sha": "159e04e9429a079a048c204757bf0ed4513c639c", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -56,68 +56,35 @@ place!\n \n ## Threads\n \n-Rust's standard library provides a library for 'threads', which allow you to\n+Rust's standard library provides a library for threads, which allow you to\n run Rust code in parallel. Here's a basic example of using `std::thread`:\n \n ```\n use std::thread;\n \n fn main() {\n-    thread::scoped(|| {\n+    thread::spawn(|| {\n         println!(\"Hello from a thread!\");\n     });\n }\n ```\n \n-The `thread::scoped()` method accepts a closure, which is executed in a new\n-thread. It's called `scoped` because this thread returns a join guard:\n+The `thread::spawn()` method accepts a closure, which is executed in a\n+new thread. It returns a handle to the thread, that can be used to\n+wait for the child thread to finish and extract its result:\n \n ```\n use std::thread;\n \n fn main() {\n-    let guard = thread::scoped(|| {\n-        println!(\"Hello from a thread!\");\n+    let handle = thread::spawn(|| {\n+        \"Hello from a thread!\"\n     });\n \n-    // guard goes out of scope here\n+    println!(\"{}\", handle.join().unwrap());\n }\n ```\n \n-When `guard` goes out of scope, it will block execution until the thread is\n-finished. If we didn't want this behaviour, we could use `thread::spawn()`:\n-\n-```\n-use std::thread;\n-\n-fn main() {\n-    thread::spawn(|| {\n-        println!(\"Hello from a thread!\");\n-    });\n-\n-    thread::sleep_ms(50);\n-}\n-```\n-\n-We need to `sleep` here because when `main()` ends, it kills all of the\n-running threads.\n-\n-[`scoped`](std/thread/struct.Builder.html#method.scoped) has an interesting\n-type signature:\n-\n-```text\n-fn scoped<'a, T, F>(self, f: F) -> JoinGuard<'a, T>\n-    where T: Send + 'a,\n-          F: FnOnce() -> T,\n-          F: Send + 'a\n-```\n-\n-Specifically, `F`, the closure that we pass to execute in the new thread. It\n-has two restrictions: It must be a `FnOnce` from `()` to `T`. Using `FnOnce`\n-allows the closure to take ownership of any data it mentions from the parent\n-thread. The other restriction is that `F` must be `Send`. We aren't allowed to\n-transfer this ownership unless the type thinks that's okay.\n-\n Many languages have the ability to execute threads, but it's wildly unsafe.\n There are entire books about how to prevent errors that occur from shared\n mutable state. Rust helps out with its type system here as well, by preventing"}, {"sha": "1393c39f66c954362250a4df667e11a47356138c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -130,10 +130,10 @@ struct Output {\n \n pub fn main() {\n     const STACK_SIZE: usize = 32000000; // 32MB\n-    let res = std::thread::Builder::new().stack_size(STACK_SIZE).scoped(move || {\n+    let res = std::thread::Builder::new().stack_size(STACK_SIZE).spawn(move || {\n         let s = env::args().collect::<Vec<_>>();\n         main_args(&s)\n-    }).unwrap().join();\n+    }).unwrap().join().unwrap();\n     env::set_exit_status(res as i32);\n }\n "}, {"sha": "90ef94bb6e15b3eaa5e9baf5a7a9d31064cc8ba0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -93,6 +93,7 @@\n //! a join before any relevant stack frames are popped:\n //!\n //! ```rust\n+//! # #![feature(scoped)]\n //! use std::thread;\n //!\n //! let guard = thread::scoped(move || {"}, {"sha": "61fe6593dc398dd72381c5691bf9b5aa51d4e5f6", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -111,11 +111,11 @@ fn main() {\n     let messages = (min_depth..max_depth + 1).step_by(2).map(|depth| {\n         use std::num::Int;\n         let iterations = 2.pow((max_depth - depth + min_depth) as u32);\n-        thread::scoped(move || inner(depth, iterations))\n+        thread::spawn(move || inner(depth, iterations))\n     }).collect::<Vec<_>>();\n \n     for message in messages {\n-        println!(\"{}\", message.join());\n+        println!(\"{}\", message.join().unwrap());\n     }\n \n     println!(\"long lived tree of depth {}\\t check: {}\","}, {"sha": "32504350e42682d33fcea64af426e6a1fe65c032", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -166,15 +166,15 @@ fn fannkuch(n: i32) -> (i32, i32) {\n     for (_, j) in (0..N).zip((0..).step_by(k)) {\n         let max = cmp::min(j+k, perm.max());\n \n-        futures.push(thread::scoped(move|| {\n+        futures.push(thread::spawn(move|| {\n             work(perm, j as usize, max as usize)\n         }))\n     }\n \n     let mut checksum = 0;\n     let mut maxflips = 0;\n     for fut in futures {\n-        let (cs, mf) = fut.join();\n+        let (cs, mf) = fut.join().unwrap();\n         checksum += cs;\n         maxflips = cmp::max(maxflips, mf);\n     }"}, {"sha": "07cb120ef0e29c18cf0d7ca1bef57d9802170d8d", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -307,17 +307,17 @@ fn main() {\n \n     let nb_freqs: Vec<_> = (1..3).map(|i| {\n         let input = input.clone();\n-        (i, thread::scoped(move|| generate_frequencies(&input, i)))\n+        (i, thread::spawn(move|| generate_frequencies(&input, i)))\n     }).collect();\n     let occ_freqs: Vec<_> = OCCURRENCES.iter().map(|&occ| {\n         let input = input.clone();\n-        thread::scoped(move|| generate_frequencies(&input, occ.len()))\n+        thread::spawn(move|| generate_frequencies(&input, occ.len()))\n     }).collect();\n \n     for (i, freq) in nb_freqs {\n-        print_frequencies(&freq.join(), i);\n+        print_frequencies(&freq.join().unwrap(), i);\n     }\n     for (&occ, freq) in OCCURRENCES.iter().zip(occ_freqs.into_iter()) {\n-        print_occurrences(&mut freq.join(), occ);\n+        print_occurrences(&mut freq.join().unwrap(), occ);\n     }\n }"}, {"sha": "bf41838bfa7e7e6710a809fc8907be22772462be", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -82,7 +82,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n     let mut precalc_i = Vec::with_capacity(h);\n \n     let precalc_futures = (0..WORKERS).map(|i| {\n-        thread::scoped(move|| {\n+        thread::spawn(move|| {\n             let mut rs = Vec::with_capacity(w / WORKERS);\n             let mut is = Vec::with_capacity(w / WORKERS);\n \n@@ -108,7 +108,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n     }).collect::<Vec<_>>();\n \n     for res in precalc_futures {\n-        let (rs, is) = res.join();\n+        let (rs, is) = res.join().unwrap();\n         precalc_r.extend(rs.into_iter());\n         precalc_i.extend(is.into_iter());\n     }\n@@ -123,7 +123,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n         let vec_init_r = arc_init_r.clone();\n         let vec_init_i = arc_init_i.clone();\n \n-        thread::scoped(move|| {\n+        thread::spawn(move|| {\n             let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n             let init_r_slice = vec_init_r;\n \n@@ -144,7 +144,7 @@ fn mandelbrot<W: old_io::Writer>(w: usize, mut out: W) -> old_io::IoResult<()> {\n \n     try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n     for res in data {\n-        try!(out.write(&res.join()));\n+        try!(out.write(&res.join().unwrap()));\n     }\n     out.flush()\n }"}, {"sha": "e200682acfdd9df533131a6f691600efc051b697", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(unboxed_closures, libc, old_io, collections, io, core)]\n+#![feature(unboxed_closures, libc, old_io, collections, io, core, scoped)]\n \n extern crate libc;\n "}, {"sha": "b0e8c39567323b4b32ec5d5d8503c57095051995", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -41,7 +41,7 @@\n // no-pretty-expanded FIXME #15189\n \n #![allow(non_snake_case)]\n-#![feature(unboxed_closures, core, os)]\n+#![feature(unboxed_closures, core, os, scoped)]\n \n use std::iter::repeat;\n use std::thread;"}, {"sha": "561f141100ca7c3a7c962f4a50c7b893598b162c", "filename": "src/test/run-fail/panic-task-name-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-task-name-owned.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -13,9 +13,9 @@\n use std::thread::Builder;\n \n fn main() {\n-    let r: () = Builder::new().name(\"owned name\".to_string()).scoped(move|| {\n+    let r: () = Builder::new().name(\"owned name\".to_string()).spawn(move|| {\n         panic!(\"test\");\n         ()\n-    }).unwrap().join();\n+    }).unwrap().join().unwrap();\n     panic!();\n }"}, {"sha": "b4f0d7ceb99eb911ef8990dcd7ee8d3c52129191", "filename": "src/test/run-fail/rt-set-exit-status-panic2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-panic2.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -37,7 +37,7 @@ fn r(x:isize) -> r {\n \n fn main() {\n     error!(\"whatever\");\n-    let _t = thread::scoped(move|| {\n+    let _t = thread::spawn(move|| {\n       let _i = r(5);\n     });\n     panic!();"}, {"sha": "ae0a358ac4e3f952d6a1681c310e20e4ac41f43e", "filename": "src/test/run-pass/atomic-print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-print.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -27,7 +27,7 @@ fn main(){\n     if env::args().count() == 2 {\n         let barrier = sync::Arc::new(sync::Barrier::new(2));\n         let tbarrier = barrier.clone();\n-        let t = thread::scoped(||{\n+        let t = thread::spawn(move || {\n             tbarrier.wait();\n             do_print(1);\n         });"}, {"sha": "f7e8edca4405a19045d68cae7231cbf5e7c9e737", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -36,12 +36,13 @@ impl Logger for MyWriter {\n fn main() {\n     let (tx, rx) = channel();\n     let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         set_logger(box MyWriter(w) as Box<Logger+Send>);\n         debug!(\"debug\");\n         info!(\"info\");\n     });\n     let s = r.read_to_string().unwrap();\n     assert!(s.contains(\"info\"));\n     assert!(!s.contains(\"debug\"));\n+    t.join();\n }"}, {"sha": "ef2796243c8078e2b2861af715deb5e88ec8ff4c", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -23,8 +23,8 @@ struct Pair {\n pub fn main() {\n     let z: Box<_> = box Pair { a : 10, b : 12};\n \n-    let _t = thread::scoped(move|| {\n+    thread::spawn(move|| {\n         assert_eq!(z.a, 10);\n         assert_eq!(z.b, 12);\n-    });\n+    }).join();\n }"}, {"sha": "72f623ccfde7aaa30a0e207a8c5834acaec7ff7e", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -15,11 +15,12 @@ use std::sync::mpsc::{channel, Sender};\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move|| { child(&tx) });\n+    let t = thread::spawn(move|| { child(&tx) });\n     let y = rx.recv().unwrap();\n     println!(\"received\");\n     println!(\"{}\", y);\n     assert_eq!(y, 10);\n+    t.join();\n }\n \n fn child(c: &Sender<isize>) {"}, {"sha": "b35095171ece00d800c2b918a5a407c996c6cc77", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -42,7 +42,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let result = count(1000);\n         println!(\"result = {}\", result);\n         assert_eq!(result, 1000);"}, {"sha": "3993868068197ebb44a026865b761c85f6b78867", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -46,9 +46,9 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n-    let _t = thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let result = count(12);\n         println!(\"result = {}\", result);\n         assert_eq!(result, 2048);\n-    });\n+    }).join();\n }"}, {"sha": "3be47e8430d598f675336ea0bda6a11300d7e097", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -34,22 +34,19 @@ fn main() {\n \n fn parent() {\n     let file = File::open(\"Makefile\").unwrap();\n-    let _dir = fs::read_dir(\"/\").unwrap();\n     let tcp1 = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n-    assert_eq!(tcp1.as_raw_fd(), file.as_raw_fd() + 2);\n     let tcp2 = tcp1.try_clone().unwrap();\n     let addr = tcp1.local_addr().unwrap();\n-    let t = thread::scoped(|| TcpStream::connect(addr).unwrap());\n+    let t = thread::spawn(move || TcpStream::connect(addr).unwrap());\n     let tcp3 = tcp1.accept().unwrap().0;\n-    let tcp4 = t.join();\n+    let tcp4 = t.join().unwrap();\n     let tcp5 = tcp3.try_clone().unwrap();\n     let tcp6 = tcp4.try_clone().unwrap();\n     let udp1 = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\n     let udp2 = udp1.try_clone().unwrap();\n \n     let status = Command::new(env::args().next().unwrap())\n                         .arg(file.as_raw_fd().to_string())\n-                        .arg((file.as_raw_fd() + 1).to_string())\n                         .arg(tcp1.as_raw_fd().to_string())\n                         .arg(tcp2.as_raw_fd().to_string())\n                         .arg(tcp3.as_raw_fd().to_string())"}, {"sha": "dafa8ee10339ee706c810153987fe7787bbc35a3", "filename": "src/test/run-pass/init-large-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-large-type.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -26,7 +26,7 @@ const SIZE: usize = 1024 * 1024;\n \n fn main() {\n     // do the test in a new thread to avoid (spurious?) stack overflows\n-    let _ = thread::scoped(|| {\n+    thread::spawn(|| {\n         let _memory: [u8; SIZE] = unsafe { init() };\n     }).join();\n }"}, {"sha": "71897ea68c209b39358e5ca678a632e1978584ca", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -26,7 +26,7 @@ fn helper(rx: Receiver<Sender<()>>) {\n \n fn main() {\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move|| { helper(rx) });\n+    let t = thread::spawn(move|| { helper(rx) });\n     let (snd, rcv) = channel::<isize>();\n     for _ in 1..100000 {\n         snd.send(1).unwrap();\n@@ -38,4 +38,5 @@ fn main() {\n         }\n     }\n     drop(tx);\n+    t.join();\n }"}, {"sha": "522f544a21c1037c87e89c7142c8ecb8d2a31efd", "filename": "src/test/run-pass/issue-20454.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20454.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -13,11 +13,11 @@\n use std::thread;\n \n fn _foo() {\n-    let _t = thread::scoped(move || { // no need for -> ()\n+    thread::spawn(move || { // no need for -> ()\n         loop {\n             println!(\"hello\");\n         }\n-    });\n+    }).join();\n }\n \n fn main() {}"}, {"sha": "61de3c6385e7bb49581f01e73703a241e7ded94b", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -23,7 +23,7 @@ enum Msg\n }\n \n fn foo(name: String, samples_chan: Sender<Msg>) {\n-    let _t = thread::scoped(move|| {\n+    thread::spawn(move|| {\n         let mut samples_chan = samples_chan;\n \n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n@@ -34,7 +34,7 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n         });\n \n         samples_chan.send(Msg::GetSamples(name.clone(), callback));\n-    });\n+    }).join();\n }\n \n pub fn main() {}"}, {"sha": "6845d3b3aec5b11cbed5d258be335a6d55bc8033", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -19,7 +19,7 @@ use std::time::Duration;\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move||{\n+    let t = thread::spawn(move||{\n         let mut timer = Timer::new().unwrap();\n         timer.sleep(Duration::milliseconds(10));\n         tx.send(()).unwrap();\n@@ -31,4 +31,5 @@ pub fn main() {\n             Err(TryRecvError::Disconnected) => unreachable!()\n         }\n     }\n+    t.join();\n }"}, {"sha": "3f0daf2610ce970704f31a2fa685b3a23b8fda7d", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -23,9 +23,10 @@ fn producer(tx: &Sender<Vec<u8>>) {\n \n pub fn main() {\n     let (tx, rx) = channel::<Vec<u8>>();\n-    let _prod = thread::scoped(move|| {\n+    let prod = thread::spawn(move|| {\n         producer(&tx)\n     });\n \n     let _data: Vec<u8> = rx.recv().unwrap();\n+    prod.join();\n }"}, {"sha": "a81c0846a279489534080fc789c3cb7ef5509040", "filename": "src/test/run-pass/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -18,36 +18,39 @@ fn foo() {\n     // Here, i is *copied* into the proc (heap closure).\n     // Requires allocation.  The proc's copy is not mutable.\n     let mut i = 0;\n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         user(i);\n         println!(\"spawned {}\", i)\n     });\n     i += 1;\n-    println!(\"original {}\", i)\n+    println!(\"original {}\", i);\n+    t.join();\n }\n \n fn bar() {\n     // Here, the original i has not been moved, only copied, so is still\n     // mutable outside of the proc.\n     let mut i = 0;\n     while i < 10 {\n-        let _t = thread::scoped(move|| {\n+        let t = thread::spawn(move|| {\n             user(i);\n         });\n         i += 1;\n+        t.join();\n     }\n }\n \n fn car() {\n     // Here, i must be shadowed in the proc to be mutable.\n     let mut i = 0;\n     while i < 10 {\n-        let _t = thread::scoped(move|| {\n+        let t = thread::spawn(move|| {\n             let mut i = i;\n             i += 1;\n             user(i);\n         });\n         i += 1;\n+        t.join();\n     }\n }\n "}, {"sha": "c7ef9776367bd10d410d56e80f68dd398b428557", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -14,7 +14,7 @@ use std::thread;\n \n pub fn main() {\n     let x = \"Hello world!\".to_string();\n-    let _t = thread::scoped(move|| {\n+    thread::spawn(move|| {\n         println!(\"{}\", x);\n-    });\n+    }).join();\n }"}, {"sha": "6e4901b82d72955d593fc205c215270822fa5592", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -37,7 +37,7 @@ fn recurse() {\n fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"recurse\" {\n-        let _t = thread::scoped(recurse);\n+        thread::spawn(recurse).join();\n     } else {\n         let recurse = Command::new(&args[0]).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());"}, {"sha": "c65d8dd3d13269210c73ca6b2784d6ac0557c859", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -41,7 +41,7 @@ impl log::Logger for ChannelLogger {\n pub fn main() {\n     let (logger, rx) = ChannelLogger::new();\n \n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         log::set_logger(logger);\n \n         info!(\"foo\");\n@@ -54,4 +54,6 @@ pub fn main() {\n     assert_eq!(rx.recv().unwrap(), \"foo bar\");\n     assert_eq!(rx.recv().unwrap(), \"bar foo\");\n     assert!(rx.recv().is_err());\n+\n+    t.join();\n }"}, {"sha": "5f0902d34d3e87a28a73fa8809742fca4bab9587", "filename": "src/test/run-pass/send-is-not-static-par-for.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core, std_misc)]\n+#![feature(core, std_misc, scoped)]\n use std::thread;\n use std::sync::Mutex;\n \n@@ -25,7 +25,6 @@ fn par_for<I, F>(iter: I, f: F)\n             f(elem)\n         })\n     }).collect();\n-\n }\n \n fn sum(x: &[i32]) {"}, {"sha": "66878d98c840cf5088112c79cb33c96aabb0f041", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -32,12 +32,14 @@ fn test(f: isize) -> test {\n pub fn main() {\n     let (tx, rx) = channel();\n \n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         let (tx2, rx2) = channel();\n         tx.send(tx2).unwrap();\n \n         let _r = rx2.recv().unwrap();\n     });\n \n     rx.recv().unwrap().send(test(42)).unwrap();\n+\n+    t.join();\n }"}, {"sha": "4a35ed609e0801c793997c53785cc46d39e63549", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -16,13 +16,16 @@ fn x(s: String, n: isize) {\n }\n \n pub fn main() {\n-    let _t = thread::scoped(|| x(\"hello from first spawned fn\".to_string(), 65) );\n-    let _t = thread::scoped(|| x(\"hello from second spawned fn\".to_string(), 66) );\n-    let _t = thread::scoped(|| x(\"hello from third spawned fn\".to_string(), 67) );\n+    let t1 = thread::spawn(|| x(\"hello from first spawned fn\".to_string(), 65) );\n+    let t2 = thread::spawn(|| x(\"hello from second spawned fn\".to_string(), 66) );\n+    let t3 = thread::spawn(|| x(\"hello from third spawned fn\".to_string(), 67) );\n     let mut i = 30;\n     while i > 0 {\n         i = i - 1;\n         println!(\"parent sleeping\");\n         thread::yield_now();\n     }\n+    t1.join();\n+    t2.join();\n+    t3.join();\n }"}, {"sha": "1409caf9c702db352b046f27e46c8419571c9941", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -26,12 +26,13 @@ fn test05_start(tx : &Sender<isize>) {\n \n fn test05() {\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move|| { test05_start(&tx) });\n+    let t = thread::spawn(move|| { test05_start(&tx) });\n     let mut value: isize = rx.recv().unwrap();\n     println!(\"{}\", value);\n     value = rx.recv().unwrap();\n     println!(\"{}\", value);\n     value = rx.recv().unwrap();\n     println!(\"{}\", value);\n     assert_eq!(value, 30);\n+    t.join();\n }"}, {"sha": "b3327d82c3ebe8b05707b35cef118278f52479b4", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -17,6 +17,6 @@ pub fn main() { test00(); }\n fn start() { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n-    let _ = thread::scoped(move|| start() ).join();\n+    thread::spawn(move|| start() ).join();\n     println!(\"Completing.\");\n }"}, {"sha": "a796750ef88b7d999e4a289f893203ff6288930c", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -29,10 +29,12 @@ fn start(tx: &Sender<Sender<String>>) {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _child = thread::scoped(move|| { start(&tx) });\n+    let child = thread::spawn(move|| { start(&tx) });\n \n     let mut c = rx.recv().unwrap();\n     c.send(\"A\".to_string()).unwrap();\n     c.send(\"B\".to_string()).unwrap();\n     thread::yield_now();\n+\n+    child.join();\n }"}, {"sha": "7af8f5d3b35759b109760146dadec7000bf09828", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -22,8 +22,9 @@ fn start(tx: &Sender<Sender<isize>>) {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _child = thread::scoped(move|| {\n+    let child = thread::spawn(move|| {\n         start(&tx)\n     });\n     let _tx = rx.recv().unwrap();\n+    child.join();\n }"}, {"sha": "f8d608d31689c0536a09d8955e4022e218e1a3c1", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -18,7 +18,7 @@ fn start(_task_number: isize) { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: isize = 0;\n-    let mut result = thread::scoped(move|| {\n+    let mut result = thread::spawn(move|| {\n         start(i)\n     });\n "}, {"sha": "156ddd9c77fc339d817b749a9e13b5bef09d9c31", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -21,6 +21,6 @@ fn start(tx: &Sender<isize>, start: isize, number_of_messages: isize) {\n pub fn main() {\n     println!(\"Check that we don't deadlock.\");\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move|| { start(&tx, 0, 10) }).join();\n+    let _ = thread::spawn(move|| { start(&tx, 0, 10) }).join();\n     println!(\"Joined task\");\n }"}, {"sha": "0048d7d2d73217de7971695569e9c28df12f9473", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     while (i > 0) {\n         println!(\"{}\", i);\n         let tx = tx.clone();\n-        thread::scoped({let i = i; move|| { child(i, &tx) }});\n+        thread::spawn({let i = i; move|| { child(i, &tx) }});\n         i = i - 1;\n     }\n "}, {"sha": "1d853b3e67ffc4c86c55b9c9de9d9ce22d796ad0", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -29,8 +29,9 @@ pub fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let (tx, rx) = channel();\n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         start(&tx, 10)\n     });\n     rx.recv();\n+    t.join();\n }"}, {"sha": "8f6f971ce35c817dd4a06a2a3a2ca4a9592da68a", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -22,5 +22,5 @@ fn f() {\n }\n \n pub fn main() {\n-    let _t = thread::scoped(move|| f() ).join();\n+    thread::spawn(move|| f() ).join();\n }"}, {"sha": "25f40757b7b8ae652cdab0cd08a953bf3d49be09", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -42,7 +42,7 @@ fn test00() {\n     let mut results = Vec::new();\n     while i < number_of_tasks {\n         let tx = tx.clone();\n-        results.push(thread::scoped({\n+        results.push(thread::spawn({\n             let i = i;\n             move|| {\n                 test00_start(&tx, i, number_of_messages)"}, {"sha": "aa73925874fa00cdeb330163840f3418ea99a005", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -31,19 +31,19 @@ fn test00() {\n     let number_of_messages: isize = 10;\n \n     let tx2 = tx.clone();\n-    let _t = thread::scoped(move|| {\n+    let t1 = thread::spawn(move|| {\n         test00_start(&tx2, number_of_messages * 0, number_of_messages);\n     });\n     let tx2 = tx.clone();\n-    let _t = thread::scoped(move|| {\n+    let t2 = thread::spawn(move|| {\n         test00_start(&tx2, number_of_messages * 1, number_of_messages);\n     });\n     let tx2 = tx.clone();\n-    let _t = thread::scoped(move|| {\n+    let t3 = thread::spawn(move|| {\n         test00_start(&tx2, number_of_messages * 2, number_of_messages);\n     });\n     let tx2 = tx.clone();\n-    let _t = thread::scoped(move|| {\n+    let t4 = thread::spawn(move|| {\n         test00_start(&tx2, number_of_messages * 3, number_of_messages);\n     });\n \n@@ -61,4 +61,9 @@ fn test00() {\n     }\n \n     assert_eq!(sum, number_of_messages * 4 * (number_of_messages * 4 - 1) / 2);\n+\n+    t1.join();\n+    t2.join();\n+    t3.join();\n+    t4.join();\n }"}, {"sha": "d8eec4169e3531c0f749a827b39ffc64256ec97a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -26,7 +26,7 @@ fn test00() {\n     let (tx, rx) = channel();\n     let number_of_messages: isize = 10;\n \n-    let result = thread::scoped(move|| {\n+    let result = thread::spawn(move|| {\n         test00_start(&tx, number_of_messages);\n     });\n "}, {"sha": "ba8819fd0b0fee8e236977c8ac70b97672a3c15d", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -15,7 +15,7 @@\n use std::thread;\n \n pub fn main() {\n-    let _t = thread::scoped(move|| child(\"Hello\".to_string()) );\n+    thread::spawn(move|| child(\"Hello\".to_string()) ).join();\n }\n \n fn child(_s: String) {"}, {"sha": "548f876421b6a3141fd50abc5762dd4389b4f854", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -22,11 +22,13 @@ pub fn main() {\n     let x: Box<isize> = box 1;\n     let x_in_parent = &(*x) as *const isize as usize;\n \n-    let _t = thread::scoped(move || {\n+    let t = thread::spawn(move || {\n         let x_in_child = &(*x) as *const isize as usize;\n         tx.send(x_in_child).unwrap();\n     });\n \n     let x_in_child = rx.recv().unwrap();\n     assert_eq!(x_in_parent, x_in_child);\n+\n+    t.join();\n }"}, {"sha": "3347287748e1db56b2e946d8b6770f1cf1a79226", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -36,11 +36,11 @@ fn test() {\n \n     let (srv_tx, srv_rx) = channel();\n     let (cli_tx, cli_rx) = channel();\n-    let _t = (0..N).map(|_| {\n+    let ts1 = (0..N).map(|_| {\n         let a = a.clone();\n         let cnt = cnt.clone();\n         let srv_tx = srv_tx.clone();\n-        thread::scoped(move|| {\n+        thread::spawn(move|| {\n             let mut a = a;\n             loop {\n                 match a.accept() {\n@@ -57,7 +57,7 @@ fn test() {\n         })\n     }).collect::<Vec<_>>();\n \n-    let _t = (0..N).map(|_| {\n+    let ts2 = (0..N).map(|_| {\n         let cli_tx = cli_tx.clone();\n         thread::scoped(move|| {\n             for _ in 0..M {\n@@ -85,4 +85,7 @@ fn test() {\n \n     // Everything should have been accepted.\n     assert_eq!(cnt.load(Ordering::SeqCst), N * M);\n+\n+    for t in ts1 { t.join() }\n+    for t in ts2 { t.join() }\n }"}, {"sha": "c31400a832c749fdfbfdf41d6df06ce23bde699b", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -34,7 +34,7 @@ fn eventual_timeout() {\n \n     let (tx1, rx1) = channel();\n     let (_tx2, rx2) = channel::<()>();\n-    let _t = thread::scoped(move|| {\n+    let t = thread::spawn(move|| {\n         let _l = TcpListener::bind(addr).unwrap().listen();\n         tx1.send(()).unwrap();\n         let _ = rx2.recv();\n@@ -50,6 +50,7 @@ fn eventual_timeout() {\n         }\n     }\n     panic!(\"never timed out!\");\n+    t.join();\n }\n \n fn timeout_success() {"}, {"sha": "3f99c338c0e33537d08fb7e16aa5727b424ec1a2", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -64,7 +64,7 @@ fn test_rm_tempdir() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = thread::scoped(f).join();\n+        let tmp: TempDir = thread::spawn(f).join().unwrap();\n         path = tmp.path().clone();\n         assert!(path.exists());\n     }\n@@ -108,7 +108,7 @@ fn test_rm_tempdir_close() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = thread::scoped(f).join();\n+        let tmp: TempDir = thread::spawn(f).join().unwrap();\n         path = tmp.path().clone();\n         assert!(path.exists());\n         tmp.close();"}, {"sha": "184338c3294ff9290502609af17cd762263705d3", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -15,7 +15,7 @@ use std::thread;\n pub fn main() {\n     let mut i = 10;\n     while i > 0 {\n-        thread::scoped({let i = i; move|| child(i)});\n+        thread::spawn({let i = i; move|| child(i)}).join();\n         i = i - 1;\n     }\n     println!(\"main thread exiting\");"}, {"sha": "21205a2d7fa590427a4ee581e2f74d6535430610", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -83,16 +83,19 @@ pub fn main() {\n                             box dogge2 as Box<Pet+Sync+Send>));\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n-    let _t1 = thread::scoped(move|| { check_legs(arc1); tx1.send(()); });\n+    let t1 = thread::spawn(move|| { check_legs(arc1); tx1.send(()); });\n     let (tx2, rx2) = channel();\n     let arc2 = arc.clone();\n-    let _t2 = thread::scoped(move|| { check_names(arc2); tx2.send(()); });\n+    let t2 = thread::spawn(move|| { check_names(arc2); tx2.send(()); });\n     let (tx3, rx3) = channel();\n     let arc3 = arc.clone();\n-    let _t3 = thread::scoped(move|| { check_pedigree(arc3); tx3.send(()); });\n+    let t3 = thread::spawn(move|| { check_pedigree(arc3); tx3.send(()); });\n     rx1.recv();\n     rx2.recv();\n     rx3.recv();\n+    t1.join();\n+    t2.join();\n+    t3.join();\n }\n \n fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {"}, {"sha": "c32483f629e03dd4d6130e8602a38834a550ad99", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9fd41e1f984fdfecb78ba9570bb159854c58b16/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=a9fd41e1f984fdfecb78ba9570bb159854c58b16", "patch": "@@ -23,10 +23,10 @@ pub fn main() {\n     let (tx, rx) = channel();\n     let n = 100;\n     let mut expected = 0;\n-    let _t = (0..n).map(|i| {\n+    let ts = (0..n).map(|i| {\n         expected += i;\n         let tx = tx.clone();\n-        thread::scoped(move|| {\n+        thread::spawn(move|| {\n             child(&tx, i)\n         })\n     }).collect::<Vec<_>>();\n@@ -38,4 +38,6 @@ pub fn main() {\n     }\n \n     assert_eq!(expected, actual);\n+\n+    for t in ts { t.join(); }\n }"}]}