{"sha": "5971266301e76a0f9ea131996cf699b18eaa7c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzEyNjYzMDFlNzZhMGY5ZWExMzE5OTZjZjY5OWIxOGVhYTdjODk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-04-17T22:02:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-04-17T22:02:12Z"}, "message": "Fixes attributes position in types decl", "tree": {"sha": "93ccc4cc1186cec6bfd9dc896ea3c228e2a4605b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ccc4cc1186cec6bfd9dc896ea3c228e2a4605b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5971266301e76a0f9ea131996cf699b18eaa7c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5971266301e76a0f9ea131996cf699b18eaa7c89", "html_url": "https://github.com/rust-lang/rust/commit/5971266301e76a0f9ea131996cf699b18eaa7c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5971266301e76a0f9ea131996cf699b18eaa7c89/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe", "html_url": "https://github.com/rust-lang/rust/commit/464473ab3b4bedb89fa6841ab2ceea83cb8d75fe"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "e99cdb90b0ab8b260e99ef3d987f4f51bea9a771", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5971266301e76a0f9ea131996cf699b18eaa7c89", "patch": "@@ -3002,7 +3002,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n fn item_constant(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n     write!(w, \"<pre class='rust const'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"{vis}const \\\n                {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n@@ -3014,7 +3014,7 @@ fn item_constant(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n fn item_static(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Static) -> fmt::Result {\n     write!(w, \"<pre class='rust static'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"{vis}static {mutability}\\\n                {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n@@ -3037,7 +3037,7 @@ fn item_function(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n         f.generics\n     ).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w,\n            \"{vis}{constness}{unsafety}{asyncness}{abi}fn \\\n            {name}{generics}{decl}{where_clause}</pre>\",\n@@ -3126,7 +3126,7 @@ fn item_trait(\n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust trait'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         write!(w, \"{}{}{}trait {}{}{}\",\n                VisSpace(&it.visibility),\n                UnsafetySpace(t.unsafety),\n@@ -3479,7 +3479,7 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n         } else {\n             (0, true)\n         };\n-        render_attributes(w, meth)?;\n+        render_attributes(w, meth, false)?;\n         write!(w, \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                if parent == ItemType::Trait { \"    \" } else { \"\" },\n@@ -3526,7 +3526,7 @@ fn item_struct(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Struct) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust struct'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         render_struct(w,\n                       it,\n                       Some(&s.generics),\n@@ -3577,7 +3577,7 @@ fn item_union(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Union) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust union'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         render_union(w,\n                      it,\n                      Some(&s.generics),\n@@ -3622,7 +3622,7 @@ fn item_enum(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust enum'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         write!(w, \"{}enum {}{}{}\",\n                VisSpace(&it.visibility),\n                it.name.as_ref().unwrap(),\n@@ -3783,7 +3783,7 @@ const ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n     \"non_exhaustive\"\n ];\n \n-fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n+fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item, top: bool) -> fmt::Result {\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {\n@@ -3795,7 +3795,8 @@ fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n         }\n     }\n     if attrs.len() > 0 {\n-        write!(w, \"<div class=\\\"docblock attributes\\\">{}</div>\", &attrs)?;\n+        write!(w, \"<div class=\\\"docblock attributes{}\\\">{}</div>\",\n+               if top { \" top-attr\" } else { \"\" }, &attrs)?;\n     }\n     Ok(())\n }\n@@ -4344,7 +4345,7 @@ fn item_existential(\n     t: &clean::Existential,\n ) -> fmt::Result {\n     write!(w, \"<pre class='rust existential'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"existential type {}{}{where_clause}: {bounds};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4363,7 +4364,7 @@ fn item_existential(\n fn item_trait_alias(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                     t: &clean::TraitAlias) -> fmt::Result {\n     write!(w, \"<pre class='rust trait-alias'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"trait {}{}{} = {};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4382,7 +4383,7 @@ fn item_trait_alias(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n fn item_typedef(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     write!(w, \"<pre class='rust typedef'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"type {}{}{where_clause} = {type_};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4400,7 +4401,7 @@ fn item_typedef(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n \n fn item_foreign_type(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item) -> fmt::Result {\n     writeln!(w, \"<pre class='rust foreigntype'>extern {{\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\","}, {"sha": "fe9b7c2012ad3009b781debf7e48e2db2bd393b9", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5971266301e76a0f9ea131996cf699b18eaa7c89", "patch": "@@ -2325,7 +2325,11 @@ if (!DOMTokenList.prototype.remove) {\n     }\n     var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n     onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-        i_e.parentNode.insertBefore(attributesToggle.cloneNode(true), i_e);\n+        var attr_tog = attributesToggle.cloneNode(true);\n+        if (hasClass(i_e, \"top-attr\") === true) {\n+            addClass(attr_tog, \"top-attr\");\n+        }\n+        i_e.parentNode.insertBefore(attr_tog, i_e);\n         itemAttributesFunc(i_e);\n     });\n "}, {"sha": "94e95d4e34e5f75bada3d1f72517ed80af39eeaf", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5971266301e76a0f9ea131996cf699b18eaa7c89/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5971266301e76a0f9ea131996cf699b18eaa7c89", "patch": "@@ -1579,10 +1579,10 @@ div.name.expand::before {\n }\n \n /* This part is to fix the \"Expand attributes\" part in the type declaration. */\n-.type-decl > pre > :first-child {\n+.type-decl > pre > .toggle-wrapper.toggle-attributes.top-attr {\n \tmargin-left: 0 !important;\n }\n-.type-decl > pre > :nth-child(2) {\n+.type-decl > pre > .docblock.attributes.top-attr {\n \tmargin-left: 1.8em !important;\n }\n .type-decl > pre > .toggle-attributes {"}]}