{"sha": "d7ece3028de09f30af4384726eca1eff2cd52dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZWNlMzAyOGRlMDlmMzBhZjQzODQ3MjZlY2ExZWZmMmNkNTJkZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-24T10:19:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-24T10:22:28Z"}, "message": "Add Early Return rule to style", "tree": {"sha": "aba886ff55f59399c1affebc3bbf867b5b2573af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba886ff55f59399c1affebc3bbf867b5b2573af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ece3028de09f30af4384726eca1eff2cd52dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ece3028de09f30af4384726eca1eff2cd52dff", "html_url": "https://github.com/rust-lang/rust/commit/d7ece3028de09f30af4384726eca1eff2cd52dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ece3028de09f30af4384726eca1eff2cd52dff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "html_url": "https://github.com/rust-lang/rust/commit/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "bb7a351f3fa04f59e37b14325971c05d386eee4e", "filename": "docs/dev/style.md", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7ece3028de09f30af4384726eca1eff2cd52dff/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7ece3028de09f30af4384726eca1eff2cd52dff/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=d7ece3028de09f30af4384726eca1eff2cd52dff", "patch": "@@ -181,6 +181,30 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n+# Early Returns\n+\n+Do use early returns\n+\n+```rust\n+// Good\n+fn foo() -> Option<Bar> {\n+    if !condition() {\n+        return None;\n+    }\n+\n+    Some(...)\n+}\n+\n+// Not as good\n+fn foo() -> Option<Bar> {\n+    if condition() {\n+        Some(...)\n+    } else {\n+        None\n+    }\n+}\n+```\n+\n # Getters & Setters\n \n If a field can have any value without breaking invariants, make the field public.\n@@ -189,7 +213,7 @@ Never provide setters.\n \n Getters should return borrowed data:\n \n-```\n+```rust\n struct Person {\n     // Invariant: never empty\n     first_name: String,"}]}