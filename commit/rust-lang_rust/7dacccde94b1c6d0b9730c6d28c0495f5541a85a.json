{"sha": "7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYWNjY2RlOTRiMWM2ZDBiOTczMGM2ZDI4YzA0OTVmNTU0MWE4NWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T15:00:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T15:00:14Z"}, "message": "Make shared kind the default only for generic functions\n\nYou almost never want a function with pinned type params. For\ntypes, objects, resources, and tags, pinned types are actually often\nmore sane. For most of these, shared rarely makes sense. Only tricky\ncase is objs -- you'll have to think about the kinds you want there.\n\nIssue #1076", "tree": {"sha": "6bcbfe5089861a2582629887358456cb7e7023bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcbfe5089861a2582629887358456cb7e7023bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "html_url": "https://github.com/rust-lang/rust/commit/7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe7aa4aff1f179562869dae611560efcc2b29b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe7aa4aff1f179562869dae611560efcc2b29b8", "html_url": "https://github.com/rust-lang/rust/commit/6fe7aa4aff1f179562869dae611560efcc2b29b8"}], "stats": {"total": 134, "additions": 63, "deletions": 71}, "files": [{"sha": "a62783f78dace4606f9b9c320c49800cdddf4c90", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -170,12 +170,11 @@ fn encode_type_param_kinds(ebml_w: ebml::writer, tps: [ty_param]) {\n     ebml::start_tag(ebml_w, tag_items_data_item_ty_param_kinds);\n     ebml::write_vint(ebml_w.writer, vec::len::<ty_param>(tps));\n     for tp: ty_param in tps {\n-        let c =\n-            alt tp.kind {\n-              kind_unique. { 'u' }\n-              kind_shared. { 's' }\n-              kind_pinned. { 'p' }\n-            };\n+        let c = alt ast_util::ty_param_kind(tp) {\n+          kind_unique. { 'u' }\n+          kind_shared. { 's' }\n+          kind_pinned. { 'p' }\n+        };\n         ebml_w.writer.write([c as u8]);\n     }\n     ebml::end_tag(ebml_w);"}, {"sha": "29d4c173cf394e8cac41512b09e1b6a6d7e9d3ab", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -90,9 +90,9 @@ fn new_smallintmap_adapter<K, V>(key_idx: fn(K) -> uint,\n                                    idx_key: fn(uint) -> K)\n     -> std::map::hashmap<K, V> {\n \n-    obj adapter<K, V>(map: smallintmap::smallintmap<V>,\n-                      key_idx: fn(K) -> uint,\n-                      idx_key: fn(uint) -> K) {\n+    obj adapter<shar K, shar V>(map: smallintmap::smallintmap<V>,\n+                                key_idx: fn(K) -> uint,\n+                                idx_key: fn(uint) -> K) {\n \n         fn size() -> uint { fail }\n "}, {"sha": "57cbb1a0800f043e61c3183b1154eb3c14aa7009", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -619,7 +619,7 @@ fn def_is_obj_field(d: def) -> bool {\n }\n \n fn def_is_ty_arg(d: def) -> bool {\n-    ret alt d { ast::def_ty_arg(_, _) { true } _ { false } };\n+    ret alt d { ast::def_ty_param(_, _) { true } _ { false } };\n }\n \n fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n@@ -734,7 +734,9 @@ fn lookup_in_ty_params(name: ident, ty_params: [ast::ty_param]) ->\n    option::t<def> {\n     let i = 0u;\n     for tp: ast::ty_param in ty_params {\n-        if str::eq(tp.ident, name) { ret some(ast::def_ty_arg(i, tp.kind)); }\n+        if str::eq(tp.ident, name) {\n+            ret some(ast::def_ty_param(i, ast_util::ty_param_kind(tp)));\n+        }\n         i += 1u;\n     }\n     ret none::<def>;"}, {"sha": "a855fe2bacf7aa7ab85e7c290e162ccb98e4df34", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -5227,7 +5227,8 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n     let ty_param_substs: [ty::t] = [];\n     i = 0u;\n     for tp: ast::ty_param in ty_params {\n-        ty_param_substs += [ty::mk_param(cx.ccx.tcx, i, tp.kind)];\n+        ty_param_substs += [ty::mk_param(cx.ccx.tcx, i,\n+                                         ast_util::ty_param_kind(tp))];\n         i += 1u;\n     }\n     let arg_tys = arg_tys_of_fn(cx.ccx, variant.node.id);"}, {"sha": "46a2fb3fc1e97f1b0f84b0b69a9dce91e284d518", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -2752,7 +2752,7 @@ fn def_has_ty_params(def: ast::def) -> bool {\n       ast::def_upvar(_, _, _) { ret false; }\n       ast::def_variant(_, _) { ret true; }\n       ast::def_ty(_) { ret false; }\n-      ast::def_ty_arg(_, _) { ret false; }\n+      ast::def_ty_param(_, _) { ret false; }\n       ast::def_binding(_) { ret false; }\n       ast::def_use(_) { ret false; }\n       ast::def_native_ty(_) { ret false; }"}, {"sha": "2c8034abc0e30e6b5a83094f3c1e3bd245977044", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1,6 +1,6 @@\n import syntax::{ast, ast_util};\n import ast::{mutability, spanned};\n-import syntax::ast_util::{local_def, respan};\n+import syntax::ast_util::{local_def, respan, ty_param_kind};\n import syntax::visit;\n import metadata::csearch;\n import driver::session;\n@@ -342,7 +342,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, getter: ty_getter, &&ast_ty: @ast::ty)\n             typ = instantiate(tcx, ast_ty.span, getter, id, path.node.types);\n           }\n           some(ast::def_native_ty(id)) { typ = getter(id).ty; }\n-          some(ast::def_ty_arg(id, k)) { typ = ty::mk_param(tcx, id, k); }\n+          some(ast::def_ty_param(id, k)) { typ = ty::mk_param(tcx, id, k); }\n           some(_) {\n             tcx.sess.span_fatal(ast_ty.span,\n                                 \"found type name used as a variable\");\n@@ -495,15 +495,15 @@ mod collect {\n         let tps = [];\n         let i = 0u;\n         for atp: ast::ty_param in atps {\n-            tps += [ty::mk_param(cx.tcx, i, atp.kind)];\n+            tps += [ty::mk_param(cx.tcx, i, ty_param_kind(atp))];\n             i += 1u;\n         }\n         ret tps;\n     }\n \n     fn ty_param_kinds(tps: [ast::ty_param]) -> [ast::kind] {\n         let k: [ast::kind] = [];\n-        for p: ast::ty_param in tps { k += [p.kind]; }\n+        for p: ast::ty_param in tps { k += [ty_param_kind(p)]; }\n         ret k;\n     }\n "}, {"sha": "4bff18fa3f5139c0221f06bc8d09ff9ce407543a", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -23,7 +23,7 @@ type def_id = {crate: crate_num, node: node_id};\n \n const local_crate: crate_num = 0;\n \n-type ty_param = {ident: ident, kind: kind};\n+type ty_param = {ident: ident, kind: plicit<kind>};\n \n tag def {\n     def_fn(def_id, purity);\n@@ -37,7 +37,7 @@ tag def {\n \n     /* variant */\n     def_ty(def_id);\n-    def_ty_arg(uint, kind);\n+    def_ty_param(uint, kind);\n     def_binding(def_id);\n     def_use(def_id);\n     def_native_ty(def_id);\n@@ -99,7 +99,8 @@ tag pat_ {\n \n tag mutability { mut; imm; maybe_mut; }\n \n-tag kind { kind_pinned; kind_shared; kind_unique; }\n+tag plicit<T> { explicit(T); implicit(T); }\n+tag kind { kind_pinned; kind_shared; kind_unique; kind_auto; }\n \n tag _auth { auth_unsafe; }\n \n@@ -489,16 +490,10 @@ tag item_ {\n     item_ty(@ty, [ty_param]);\n     item_tag([variant], [ty_param]);\n     item_obj(_obj, [ty_param], /* constructor id */node_id);\n-    item_res(_fn,\n-\n-             /* dtor */\n-             node_id,\n-\n-             /* dtor id */\n+    item_res(_fn /* dtor */,\n+             node_id /* dtor id */,\n              [ty_param],\n-\n-             /* ctor id */\n-             node_id);\n+             node_id /* ctor id */);\n }\n \n type native_item ="}, {"sha": "8270adb696d75c7bdb0ab040325e555b68cb7090", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -33,7 +33,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_local(id, _) { ret id; }\n       def_variant(_, id) { ret id; }\n       def_ty(id) { ret id; }\n-      def_ty_arg(_, _) { fail; }\n+      def_ty_param(_, _) { fail; }\n       def_binding(id) { ret id; }\n       def_use(id) { ret id; }\n       def_native_ty(id) { ret id; }\n@@ -228,6 +228,10 @@ fn ret_by_ref(style: ret_style) -> bool {\n     }\n }\n \n+fn ty_param_kind(tp: ty_param) -> kind {\n+    alt tp.kind { explicit(x) | implicit(x) { x } }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "dea3b493bd5ea5d70ca6750ca46009c128366e5c", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1735,25 +1735,21 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n     ret spanned(lo, hi, bloc);\n }\n \n-fn parse_ty_param(p: parser) -> ast::ty_param {\n-    let k = if eat_word(p, \"pin\") { ast::kind_pinned }\n-            else if eat_word(p, \"uniq\") { ast::kind_unique }\n-            else if eat_word(p, \"shar\") { ast::kind_shared }\n+fn parse_ty_param(default: ast::kind, p: parser) -> ast::ty_param {\n+    let k = if eat_word(p, \"pin\") { ast::explicit(ast::kind_pinned) }\n+            else if eat_word(p, \"uniq\") { ast::explicit(ast::kind_unique) }\n+            else if eat_word(p, \"shar\") { ast::explicit(ast::kind_shared) }\n             // FIXME distinguish implied shared from explicit\n-            else { ast::kind_shared };\n+            else { ast::implicit(default) };\n     ret {ident: parse_ident(p), kind: k};\n }\n \n-fn parse_ty_params(p: parser) -> [ast::ty_param] {\n+fn parse_ty_params(p: parser, default: ast::kind) -> [ast::ty_param] {\n     let ty_params: [ast::ty_param] = [];\n     if p.peek() == token::LT {\n         p.bump();\n-        ty_params = parse_seq_to_gt(some(token::COMMA), parse_ty_param, p);\n-    }\n-    if p.peek() == token::LT {\n-        ty_params =\n-            parse_seq(token::LT, token::GT, some(token::COMMA),\n-                      parse_ty_param, p).node;\n+        ty_params = parse_seq_to_gt(some(token::COMMA),\n+                                    {|p| parse_ty_param(default, p)}, p);\n     }\n     ret ty_params;\n }\n@@ -1806,7 +1802,7 @@ fn parse_fn(p: parser, proto: ast::proto, purity: ast::purity,\n \n fn parse_fn_header(p: parser) -> {ident: ast::ident, tps: [ast::ty_param]} {\n     let id = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p);\n+    let ty_params = parse_ty_params(p, ast::kind_shared);\n     ret {ident: id, tps: ty_params};\n }\n \n@@ -1859,7 +1855,7 @@ fn parse_method(p: parser) -> @ast::method {\n fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let ident = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p);\n+    let ty_params = parse_ty_params(p, ast::kind_pinned);\n     let fields: ast::spanned<[ast::obj_field]> =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n                   parse_obj_field, p);\n@@ -1876,7 +1872,7 @@ fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let ident = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p);\n+    let ty_params = parse_ty_params(p, ast::kind_pinned);\n     expect(p, token::LPAREN);\n     let arg_ident = parse_value_ident(p);\n     expect(p, token::COLON);\n@@ -2052,7 +2048,7 @@ fn parse_type_decl(p: parser) -> {lo: uint, ident: ast::ident} {\n \n fn parse_item_type(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let t = parse_type_decl(p);\n-    let tps = parse_ty_params(p);\n+    let tps = parse_ty_params(p, ast::kind_pinned);\n     expect(p, token::EQ);\n     let ty = parse_ty(p, false);\n     let hi = p.get_hi_pos();\n@@ -2063,7 +2059,7 @@ fn parse_item_type(p: parser, attrs: [ast::attribute]) -> @ast::item {\n fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let id = parse_ident(p);\n-    let ty_params = parse_ty_params(p);\n+    let ty_params = parse_ty_params(p, ast::kind_pinned);\n     let variants: [ast::variant] = [];\n     // Newtype syntax\n     if p.peek() == token::EQ {"}, {"sha": "14afc69165cf508db33a242306301bc2c91fdb72", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1191,11 +1191,12 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n     }\n }\n \n-fn print_kind(s: ps, kind: ast::kind) {\n+fn print_kind(s: ps, kind: ast::plicit<ast::kind>) {\n     alt kind {\n-      ast::kind_unique. { word_nbsp(s, \"uniq\"); }\n-      ast::kind_pinned. { word_nbsp(s, \"pin\"); }\n-      _ {/* fallthrough */ }\n+      ast::implicit(_) {}\n+      ast::explicit(ast::kind_unique.) { word_nbsp(s, \"uniq\"); }\n+      ast::explicit(ast::kind_pinned.) { word_nbsp(s, \"pin\"); }\n+      ast::explicit(ast::kind_shared.) { word_nbsp(s, \"shar\"); }\n     }\n }\n "}, {"sha": "f262e855b0c5813d485a6865e98c7c149ce2525c", "filename": "src/lib/deque.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -41,12 +41,6 @@ fn create<T>() -> t<T> {\n       * Grow is only called on full elts, so nelts is also len(elts), unlike\n       * elsewhere.\n       */\n-\n-\n-\n-\n-\n-\n     fn grow<T>(nelts: uint, lo: uint, elts: [mutable cell<T>]) ->\n        [mutable cell<T>] {\n         assert (nelts == vec::len(elts));\n@@ -66,10 +60,10 @@ fn create<T>() -> t<T> {\n     fn get<T>(elts: [mutable cell<T>], i: uint) -> T {\n         ret alt elts[i] { option::some(t) { t } _ { fail } };\n     }\n-    obj deque<T>(mutable nelts: uint,\n-                  mutable lo: uint,\n-                  mutable hi: uint,\n-                  mutable elts: [mutable cell<T>]) {\n+    obj deque<shar T>(mutable nelts: uint,\n+                      mutable lo: uint,\n+                      mutable hi: uint,\n+                      mutable elts: [mutable cell<T>]) {\n         fn size() -> uint { ret nelts; }\n         fn add_front(t: T) {\n             let oldlo: uint = lo;"}, {"sha": "43bf2f390e37b7bb667014241c32399e43a8e0a6", "filename": "src/lib/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -201,12 +201,12 @@ fn mk_hashmap<K, V>(hasher: hashfn<K>, eqer: eqfn<K>) -> hashmap<K, V> {\n             }\n         }\n     }\n-    obj hashmap<K, V>(hasher: hashfn<K>,\n-                    eqer: eqfn<K>,\n-                    mutable bkts: [mutable bucket<K, V>],\n-                    mutable nbkts: uint,\n-                    mutable nelts: uint,\n-                    lf: util::rational) {\n+    obj hashmap<shar K, shar V>(hasher: hashfn<K>,\n+                                eqer: eqfn<K>,\n+                                mutable bkts: [mutable bucket<K, V>],\n+                                mutable nbkts: uint,\n+                                mutable nelts: uint,\n+                                lf: util::rational) {\n         fn size() -> uint { ret nelts; }\n         fn insert(key: K, val: V) -> bool {\n             let load: util::rational ="}, {"sha": "6778f2597ede3e611ab14773289ed3a5e6315b28", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1,5 +1,5 @@\n \n-obj ob<K>(k: K) {\n+obj ob<shar K>(k: K) {\n     fn foo(it: block(~{a: K})) { it(~{a: k}); }\n }\n "}, {"sha": "435a61e165fd07e85c08328dea8112352e64076b", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj handle<T>(data: T) {\n+obj handle<shar T>(data: T) {\n     fn get() -> T { ret data; }\n }\n "}, {"sha": "eb3d7793e8b4639c1265eb83987e25050432ab11", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj buf<T>(data: {_0: T, _1: T, _2: T}) {\n+obj buf<shar T>(data: {_0: T, _1: T, _2: T}) {\n     fn get(i: int) -> T {\n         if i == 0 {\n             ret data._0;"}, {"sha": "e8747f1a95b70befbb260dac690daa1ba654f9d6", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dacccde94b1c6d0b9730c6d28c0495f5541a85a/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=7dacccde94b1c6d0b9730c6d28c0495f5541a85a", "patch": "@@ -6,7 +6,7 @@ tag clam<T> { signed(int); unsigned(uint); }\n \n fn getclam<T>() -> clam<T> { ret signed::<T>(42); }\n \n-obj impatience<T>() {\n+obj impatience<shar T>() {\n     fn moreclam() -> clam<T> { be getclam::<T>(); }\n }\n "}]}