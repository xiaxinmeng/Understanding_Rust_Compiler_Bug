{"sha": "4e1b86595590e2f78f8b4820a7f51687b31d38df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMWI4NjU5NTU5MGUyZjc4ZjhiNDgyMGE3ZjUxNjg3YjMxZDM4ZGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T02:18:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T02:18:44Z"}, "message": "Rollup merge of #63486 - Observer42:document-from-trait-in-binaryheap, r=Centril\n\nDocument `From` trait for `BinaryHeap`\n\nThis PR solves part of #51430. (cc @skade)\n\nThe comments described allocation and time complexity of the conversion from Vec to BinaryHeap\n\nThe complexity description of BinaryHeap operations is available at mod level:\nhttps://doc.rust-lang.org/alloc/collections/binary_heap/index.html\n\nBut it doesn't show up at BinaryHeap page:\nhttps://doc.rust-lang.org/alloc/collections/binary_heap/struct.BinaryHeap.html", "tree": {"sha": "48813ced0335f3a75e6bf4578f5772b9393f4161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48813ced0335f3a75e6bf4578f5772b9393f4161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1b86595590e2f78f8b4820a7f51687b31d38df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdU2+ECRBK7hj4Ov3rIwAAdHIIAI7hrytWbF5bcxnDHyq6BgxP\nK/ICSAzNcdjntytYkHbb027PygVy+PdWy5YcUUoCXFZDAWYhQGXSEtCy3T6M1m5l\n2QcQ1Ruo+Wj+wIqOSIz6LvoxyDt/ZrQBGlt1ApccLuDJE6gA2P5EH5tfSKwybfo1\n5EXKAIk0ryO2Vn/Gly1EcqUmvWf49NAmL67DOPNFzlSyWA44I9h89eE9pfJyH1+H\nKqaWh4y9PrBl3TV3X6DmHeuUEItamXDvs603N64L+36pTkpVWAlmXgqTyPZ8cNwI\nBJTb2fr6ugzjMjpU4y4eex7E0/DeLXvCeci2VPjH57e3HwLqaKRDP2W6lTeDIUY=\n=0apA\n-----END PGP SIGNATURE-----\n", "payload": "tree 48813ced0335f3a75e6bf4578f5772b9393f4161\nparent 6092519e44a09cbac73fb6aa263879f9890b7b8a\nparent e30480ca864c5810c89bbf1f475eb0bc2999c251\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565749124 +0200\ncommitter GitHub <noreply@github.com> 1565749124 +0200\n\nRollup merge of #63486 - Observer42:document-from-trait-in-binaryheap, r=Centril\n\nDocument `From` trait for `BinaryHeap`\n\nThis PR solves part of #51430. (cc @skade)\n\nThe comments described allocation and time complexity of the conversion from Vec to BinaryHeap\n\nThe complexity description of BinaryHeap operations is available at mod level:\nhttps://doc.rust-lang.org/alloc/collections/binary_heap/index.html\n\nBut it doesn't show up at BinaryHeap page:\nhttps://doc.rust-lang.org/alloc/collections/binary_heap/struct.BinaryHeap.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1b86595590e2f78f8b4820a7f51687b31d38df", "html_url": "https://github.com/rust-lang/rust/commit/4e1b86595590e2f78f8b4820a7f51687b31d38df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1b86595590e2f78f8b4820a7f51687b31d38df/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6092519e44a09cbac73fb6aa263879f9890b7b8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6092519e44a09cbac73fb6aa263879f9890b7b8a", "html_url": "https://github.com/rust-lang/rust/commit/6092519e44a09cbac73fb6aa263879f9890b7b8a"}, {"sha": "e30480ca864c5810c89bbf1f475eb0bc2999c251", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30480ca864c5810c89bbf1f475eb0bc2999c251", "html_url": "https://github.com/rust-lang/rust/commit/e30480ca864c5810c89bbf1f475eb0bc2999c251"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "3d04f30e7bde54bf2c8e832bcd4cedb40688fbb8", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e1b86595590e2f78f8b4820a7f51687b31d38df/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1b86595590e2f78f8b4820a7f51687b31d38df/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=4e1b86595590e2f78f8b4820a7f51687b31d38df", "patch": "@@ -1163,6 +1163,9 @@ impl<T> FusedIterator for Drain<'_, T> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n+    /// Converts a `Vec<T>` into a `BinaryHeap<T>`.\n+    ///\n+    /// This conversion happens in-place, and has `O(n)` time complexity.\n     fn from(vec: Vec<T>) -> BinaryHeap<T> {\n         let mut heap = BinaryHeap { data: vec };\n         heap.rebuild();"}]}