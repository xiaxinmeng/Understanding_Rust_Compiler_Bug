{"sha": "d54615528c9d90523865a5bc518b21bb20909ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDYxNTUyOGM5ZDkwNTIzODY1YTViYzUxOGIyMWJiMjA5MDljZTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-25T17:46:57Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-25T21:05:56Z"}, "message": "debuginfo: Fixed a few things for PR.", "tree": {"sha": "90b34a6733929aa3473859c62a8049a45ea7d78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b34a6733929aa3473859c62a8049a45ea7d78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54615528c9d90523865a5bc518b21bb20909ce2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54615528c9d90523865a5bc518b21bb20909ce2", "html_url": "https://github.com/rust-lang/rust/commit/d54615528c9d90523865a5bc518b21bb20909ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54615528c9d90523865a5bc518b21bb20909ce2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7b87f69d9c4633d7e0c7dd77f34c23bbd433d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7b87f69d9c4633d7e0c7dd77f34c23bbd433d8", "html_url": "https://github.com/rust-lang/rust/commit/af7b87f69d9c4633d7e0c7dd77f34c23bbd433d8"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "8a2766b47e1adeacf26da38dc69987535b8fc8e1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d54615528c9d90523865a5bc518b21bb20909ce2", "patch": "@@ -1790,7 +1790,7 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n         bcx = _match::store_arg(bcx, args[arg_n].pat, llarg);\n \n         if fcx.ccx.sess.opts.extra_debuginfo && fcx_has_nonzero_span(fcx) {\n-            debuginfo::create_argument_metadata(bcx, &args[arg_n], args[arg_n].ty.span);\n+            debuginfo::create_argument_metadata(bcx, &args[arg_n]);\n         }\n     }\n "}, {"sha": "7333850bf96d4c11cce94a99b3d696854f74a779", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d54615528c9d90523865a5bc518b21bb20909ce2", "patch": "@@ -99,7 +99,8 @@ pub struct DebugContext {\n     priv created_functions: HashMap<ast::node_id, DISubprogram>,\n     priv created_blocks: HashMap<ast::node_id, DILexicalBlock>,\n     priv created_types: HashMap<uint, DIType>,\n-    priv argument_index_counters: HashMap<ast::node_id, uint>,\n+    priv last_function_context_id: ast::node_id,\n+    priv argument_counter: uint,\n }\n \n impl DebugContext {\n@@ -117,7 +118,8 @@ impl DebugContext {\n             created_functions: HashMap::new(),\n             created_blocks: HashMap::new(),\n             created_types: HashMap::new(),\n-            argument_index_counters: HashMap::new(),\n+            last_function_context_id: -1, // magic value :(\n+            argument_counter: 1,\n         };\n     }\n }\n@@ -196,25 +198,35 @@ pub fn create_local_var_metadata(bcx: @mut Block, local: &ast::Local) {\n /// Creates debug information for the given function argument.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n-pub fn create_argument_metadata(bcx: @mut Block, arg: &ast::arg, span: span) {\n+pub fn create_argument_metadata(bcx: @mut Block,\n+                                arg: &ast::arg) {\n     let fcx = bcx.fcx;\n     let cx = fcx.ccx;\n \n+    let pattern = arg.pat;\n+    let filename = span_start(cx, pattern.span).file.name;\n+\n     if fcx.id == -1 ||\n        fcx.span.is_none() ||\n-       \"<intrinsic>\" == span_start(cx, span).file.name {\n+       \"<intrinsic>\" == filename {\n         return;\n     }\n \n-    let def_map = cx.tcx.def_map;\n-    let pattern = arg.pat;\n+    // Limited the scope within which `debug_context` is live,\n+    // otherwise => borrowing errors\n+    {\n+        let debug_context = dbg_cx(cx);\n \n-    let mut argument_index = match dbg_cx(cx).argument_index_counters.find_copy(&fcx.id) {\n-        Some(value) => value,\n-        None => 0\n-    };\n+        // If this is a new function, reset the counter. llvm::DIBuilder\n+        // wants arguments to be indexed starting from 1.\n+        if fcx.id != debug_context.last_function_context_id {\n+                    debug_context.argument_counter = 1;\n+        }\n+        // Keep track of the function we are in\n+        debug_context.last_function_context_id = fcx.id;\n+    }\n \n-    let filename = span_start(cx, span).file.name;\n+    let def_map = cx.tcx.def_map;\n     let file_metadata = file_metadata(cx, filename);\n     let scope = create_function_metadata(fcx);\n \n@@ -227,6 +239,13 @@ pub fn create_argument_metadata(bcx: @mut Block, arg: &ast::arg, span: span) {\n         let name: &str = cx.sess.str_of(ident);\n         debug!(\"create_argument_metadata: %s\", name);\n \n+        let argument_index = {\n+            let debug_context = dbg_cx(cx);\n+            let argument_index = debug_context.argument_counter;\n+            debug_context.argument_counter += 1;\n+            argument_index as c_uint\n+        };\n+\n         let arg_metadata = do name.as_c_str |name| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateLocalVariable(\n@@ -239,12 +258,10 @@ pub fn create_argument_metadata(bcx: @mut Block, arg: &ast::arg, span: span) {\n                     type_metadata,\n                     false,\n                     0,\n-                    argument_index as c_uint)\n+                    argument_index)\n             }\n         };\n \n-        argument_index += 1;\n-\n         let llptr = match bcx.fcx.llargs.find_copy(&node_id) {\n             Some(v) => v,\n             None => {\n@@ -263,8 +280,6 @@ pub fn create_argument_metadata(bcx: @mut Block, arg: &ast::arg, span: span) {\n             llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n         }\n     }\n-\n-    dbg_cx(cx).argument_index_counters.insert(fcx.id, argument_index);\n }\n \n /// Sets the current debug location at the beginning of the span"}, {"sha": "05718ab48909f3d7a1775158e4ba5f518eec1559", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=d54615528c9d90523865a5bc518b21bb20909ce2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run\n@@ -282,7 +284,7 @@ fn multiple_arguments((oo, pp): (int, int), qq : int) {\n }\n \n fn main() {\n-\tsimple_tuple((1, false));\n+    simple_tuple((1, false));\n     nested_tuple((2, (3, 4)));\n     destructure_only_first_level((5, (6, 7)));\n     struct_as_tuple_element((8, Struct { a: 9, b: 10 }, 11));\n@@ -291,8 +293,8 @@ fn main() {\n     ignored_struct_field(Struct { a: 17, b: 18 });\n     one_struct_destructured_one_not((Struct { a: 19, b: 20 }, Struct { a: 21, b: 22 }));\n     different_order_of_struct_fields(Struct { a: 23, b: 24 });\n-\tcomplex_nesting(((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33));\n-\tmanaged_box(@(34, 35));\n+    complex_nesting(((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33));\n+    managed_box(@(34, 35));\n     borrowed_pointer(&(36, 37));\n     contained_borrowed_pointer((&38, 39));\n     unique_pointer(~(40, 41, 42));"}, {"sha": "f8db7981c941bce78ce7d5b9585196e8e3722a46", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=d54615528c9d90523865a5bc518b21bb20909ce2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run\n@@ -125,8 +127,8 @@\n \n \n struct Struct {\n-\ta: i64,\n-\tb: i32\n+    a: i64,\n+    b: i32\n }\n \n enum Univariant {\n@@ -137,7 +139,7 @@ struct TupleStruct (float, int);\n \n \n fn main() {\n-\t// simple tuple\n+    // simple tuple\n     let (a, b) : (int, bool) = (1, false);\n \n     // nested tuple\n@@ -162,14 +164,14 @@ fn main() {\n     let (Struct { a: p, b: q }, r) = (Struct { a: 19, b: 20 }, Struct { a: 21, b: 22 });\n \n     // different order of struct fields\n-\tlet Struct { b: s, a: t } = Struct { a: 23, b: 24 };\n+    let Struct { b: s, a: t } = Struct { a: 23, b: 24 };\n \n-\t// complex nesting\n-\tlet ((u, v), ((w, (x, Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue) =\n-\t\t((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33);\n+    // complex nesting\n+    let ((u, v), ((w, (x, Struct { a: y, b: z})), Struct { a: ae, b: oe }), ue) =\n+        ((25, 26), ((27, (28, Struct { a: 29, b: 30})), Struct { a: 31, b: 32 }), 33);\n \n-\t// managed box\n-\tlet @aa = @(34, 35);\n+    // managed box\n+    let @aa = @(34, 35);\n \n     // borrowed pointer\n     let &bb = &(36, 37);\n@@ -192,7 +194,7 @@ fn main() {\n     // univariant enum\n     let Unit(ii) = Unit(51);\n \n-    // univariant enum with ref binding\n+    // univariant enum with ref      binding\n     let Unit(ref jj) = Unit(52);\n \n     // tuple struct"}, {"sha": "1fe79b8e2a9e903b04ff5fb74b2232f245d918b3", "filename": "src/test/debug-info/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54615528c9d90523865a5bc518b21bb20909ce2/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs?ref=d54615528c9d90523865a5bc518b21bb20909ce2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n // compile-flags:-Z extra-debug-info\n // debugger:break zzz\n // debugger:run"}]}