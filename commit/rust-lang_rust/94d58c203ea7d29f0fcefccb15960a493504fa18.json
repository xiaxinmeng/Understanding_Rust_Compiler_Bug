{"sha": "94d58c203ea7d29f0fcefccb15960a493504fa18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDU4YzIwM2VhN2QyOWYwZmNlZmNjYjE1OTYwYTQ5MzUwNGZhMTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-28T10:00:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-28T10:00:53Z"}, "message": "Add missing urls for atomic_int macros types", "tree": {"sha": "b8be90f2ff42d704f3e43dfcd52f17a3092cbe5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8be90f2ff42d704f3e43dfcd52f17a3092cbe5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d58c203ea7d29f0fcefccb15960a493504fa18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d58c203ea7d29f0fcefccb15960a493504fa18", "html_url": "https://github.com/rust-lang/rust/commit/94d58c203ea7d29f0fcefccb15960a493504fa18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d58c203ea7d29f0fcefccb15960a493504fa18/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "e5fb8a7a73c6782c4a0df0407c49758832e18503", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/94d58c203ea7d29f0fcefccb15960a493504fa18/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d58c203ea7d29f0fcefccb15960a493504fa18/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=94d58c203ea7d29f0fcefccb15960a493504fa18", "patch": "@@ -913,12 +913,16 @@ macro_rules! atomic_int {\n \n             /// Loads a value from the atomic integer.\n             ///\n-            /// `load` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `load` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n             /// # Panics\n             ///\n-            /// Panics if `order` is `Release` or `AcqRel`.\n+            /// Panics if `order` is [`Release`] or [`AcqRel`].\n+            ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///\n@@ -937,9 +941,11 @@ macro_rules! atomic_int {\n \n             /// Stores a value into the atomic integer.\n             ///\n-            /// `store` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `store` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -962,9 +968,11 @@ macro_rules! atomic_int {\n \n             /// Stores a value into the atomic integer, returning the old value.\n             ///\n-            /// `swap` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `swap` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -986,9 +994,11 @@ macro_rules! atomic_int {\n             /// The return value is always the previous value. If it is equal to `current`, then the\n             /// value was updated.\n             ///\n-            /// `compare_and_swap` also takes an `Ordering` argument which describes the memory\n+            /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n             /// ordering of this operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -1024,11 +1034,15 @@ macro_rules! atomic_int {\n             /// containing the previous value. On success this value is guaranteed to be equal to\n             /// `current`.\n             ///\n-            /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of\n-            /// this operation. The first describes the required ordering if the operation succeeds\n-            /// while the second describes the required ordering when the operation fails. The\n-            /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker\n-            /// than the success ordering.\n+            /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n+            /// ordering of this operation. The first describes the required ordering if\n+            /// the operation succeeds while the second describes the required ordering when\n+            /// the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n+            /// must be equivalent or weaker than the success ordering.\n+            ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///\n@@ -1062,16 +1076,21 @@ macro_rules! atomic_int {\n             /// Stores a value into the atomic integer if the current value is the same as the\n             /// `current` value.\n             ///\n-            /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n-            /// comparison succeeds, which can result in more efficient code on some platforms. The\n-            /// return value is a result indicating whether the new value was written and containing\n-            /// the previous value.\n+            /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even\n+            /// when the comparison succeeds, which can result in more efficient code on some\n+            /// platforms. The return value is a result indicating whether the new value was\n+            /// written and containing the previous value.\n             ///\n-            /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n+            /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n             /// ordering of this operation. The first describes the required ordering if the\n             /// operation succeeds while the second describes the required ordering when the\n-            /// operation fails. The failure ordering can't be `Release` or `AcqRel` and must be\n-            /// equivalent or weaker than the success ordering.\n+            /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n+            /// must be equivalent or weaker than the success ordering.\n+            ///\n+            /// [`compare_exchange`]: #method.compare_exchange\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///"}]}