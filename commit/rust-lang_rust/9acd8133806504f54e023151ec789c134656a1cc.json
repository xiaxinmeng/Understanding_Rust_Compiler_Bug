{"sha": "9acd8133806504f54e023151ec789c134656a1cc", "node_id": "C_kwDOAAsO6NoAKDlhY2Q4MTMzODA2NTA0ZjU0ZTAyMzE1MWVjNzg5YzEzNDY1NmExY2M", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T22:43:27Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-11T03:23:26Z"}, "message": "Use Res instead of Disambiguator for `resolved` in `report_mismatch`\n\nThis allows simplifying a lot of code. It also fixes a subtle bug,\nexemplified by the test output changes.", "tree": {"sha": "f335eee109484b24646ad891694b5f4c94a0a8eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f335eee109484b24646ad891694b5f4c94a0a8eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9acd8133806504f54e023151ec789c134656a1cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9acd8133806504f54e023151ec789c134656a1cc", "html_url": "https://github.com/rust-lang/rust/commit/9acd8133806504f54e023151ec789c134656a1cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9acd8133806504f54e023151ec789c134656a1cc/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977a7ca2e4b9c02d7f43a999bbeee651a31241d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/977a7ca2e4b9c02d7f43a999bbeee651a31241d8", "html_url": "https://github.com/rust-lang/rust/commit/977a7ca2e4b9c02d7f43a999bbeee651a31241d8"}], "stats": {"total": 119, "additions": 52, "deletions": 67}, "files": [{"sha": "20e248a445cb79cb543df3ef6a9b762c48f20e2e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 50, "deletions": 65, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/9acd8133806504f54e023151ec789c134656a1cc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acd8133806504f54e023151ec789c134656a1cc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9acd8133806504f54e023151ec789c134656a1cc", "patch": "@@ -109,6 +109,45 @@ impl Res {\n             Res::Primitive(_) => None,\n         }\n     }\n+\n+    /// Used for error reporting.\n+    fn disambiguator_suggestion(self) -> Suggestion {\n+        let kind = match self {\n+            Res::Primitive(_) => return Suggestion::Prefix(\"prim\"),\n+            Res::Def(kind, _) => kind,\n+        };\n+        if kind == DefKind::Macro(MacroKind::Bang) {\n+            return Suggestion::Macro;\n+        } else if kind == DefKind::Fn || kind == DefKind::AssocFn {\n+            return Suggestion::Function;\n+        } else if kind == DefKind::Field {\n+            return Suggestion::RemoveDisambiguator;\n+        }\n+\n+        let prefix = match kind {\n+            DefKind::Struct => \"struct\",\n+            DefKind::Enum => \"enum\",\n+            DefKind::Trait => \"trait\",\n+            DefKind::Union => \"union\",\n+            DefKind::Mod => \"mod\",\n+            DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst => {\n+                \"const\"\n+            }\n+            DefKind::Static => \"static\",\n+            DefKind::Macro(MacroKind::Derive) => \"derive\",\n+            // Now handle things that don't have a specific disambiguator\n+            _ => match kind\n+                .ns()\n+                .expect(\"tried to calculate a disambiguator for a def without a namespace?\")\n+            {\n+                Namespace::TypeNS => \"type\",\n+                Namespace::ValueNS => \"value\",\n+                Namespace::MacroNS => \"macro\",\n+            },\n+        };\n+\n+        Suggestion::Prefix(prefix)\n+    }\n }\n \n impl TryFrom<ResolveRes> for Res {\n@@ -1267,7 +1306,7 @@ impl LinkCollector<'_, '_> {\n             }\n         }\n \n-        let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n+        let report_mismatch = |specified: Disambiguator, resolved: Res| {\n             // The resolved item did not match the disambiguator; give a better error than 'not found'\n             let msg = format!(\"incompatible link kind for `{}`\", path_str);\n             let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n@@ -1276,7 +1315,7 @@ impl LinkCollector<'_, '_> {\n                     resolved.article(),\n                     resolved.descr(),\n                     specified.article(),\n-                    specified.descr()\n+                    specified.descr(),\n                 );\n                 if let Some(sp) = sp {\n                     diag.span_label(sp, &note);\n@@ -1311,7 +1350,7 @@ impl LinkCollector<'_, '_> {\n                 => {}\n                 (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n                 (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n-                    report_mismatch(specified, Disambiguator::Kind(kind));\n+                    report_mismatch(specified, Res::Def(kind, id));\n                     return None;\n                 }\n             }\n@@ -1362,7 +1401,7 @@ impl LinkCollector<'_, '_> {\n                     match disambiguator {\n                         Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n                         Some(other) => {\n-                            report_mismatch(other, Disambiguator::Primitive);\n+                            report_mismatch(other, res);\n                             return None;\n                         }\n                     }\n@@ -1676,53 +1715,6 @@ impl Disambiguator {\n         }\n     }\n \n-    fn from_res(res: Res) -> Self {\n-        match res {\n-            Res::Def(kind, _) => Disambiguator::Kind(kind),\n-            Res::Primitive(_) => Disambiguator::Primitive,\n-        }\n-    }\n-\n-    /// Used for error reporting.\n-    fn suggestion(self) -> Suggestion {\n-        let kind = match self {\n-            Disambiguator::Primitive => return Suggestion::Prefix(\"prim\"),\n-            Disambiguator::Kind(kind) => kind,\n-            Disambiguator::Namespace(_) => panic!(\"display_for cannot be used on namespaces\"),\n-        };\n-        if kind == DefKind::Macro(MacroKind::Bang) {\n-            return Suggestion::Macro;\n-        } else if kind == DefKind::Fn || kind == DefKind::AssocFn {\n-            return Suggestion::Function;\n-        } else if kind == DefKind::Field {\n-            return Suggestion::RemoveDisambiguator;\n-        }\n-\n-        let prefix = match kind {\n-            DefKind::Struct => \"struct\",\n-            DefKind::Enum => \"enum\",\n-            DefKind::Trait => \"trait\",\n-            DefKind::Union => \"union\",\n-            DefKind::Mod => \"mod\",\n-            DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst => {\n-                \"const\"\n-            }\n-            DefKind::Static => \"static\",\n-            DefKind::Macro(MacroKind::Derive) => \"derive\",\n-            // Now handle things that don't have a specific disambiguator\n-            _ => match kind\n-                .ns()\n-                .expect(\"tried to calculate a disambiguator for a def without a namespace?\")\n-            {\n-                Namespace::TypeNS => \"type\",\n-                Namespace::ValueNS => \"value\",\n-                Namespace::MacroNS => \"macro\",\n-            },\n-        };\n-\n-        Suggestion::Prefix(prefix)\n-    }\n-\n     fn ns(self) -> Namespace {\n         match self {\n             Self::Namespace(n) => n,\n@@ -2070,15 +2062,9 @@ fn resolution_failure(\n                     ResolutionFailure::NotResolved { .. } => unreachable!(\"handled above\"),\n                     ResolutionFailure::Dummy => continue,\n                     ResolutionFailure::WrongNamespace { res, expected_ns } => {\n-                        if let Res::Def(kind, _) = res {\n-                            let disambiguator = Disambiguator::Kind(kind);\n-                            suggest_disambiguator(\n-                                disambiguator,\n-                                diag,\n-                                path_str,\n-                                diag_info.ori_link,\n-                                sp,\n-                            )\n+                        // FIXME: does this need to be behind an `if`?\n+                        if matches!(res, Res::Def(..)) {\n+                            suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n                         }\n \n                         format!(\n@@ -2214,23 +2200,22 @@ fn ambiguity_error(\n         }\n \n         for res in candidates {\n-            let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(disambiguator, diag, path_str, diag_info.ori_link, sp);\n+            suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n }\n \n /// In case of an ambiguity or mismatched disambiguator, suggest the correct\n /// disambiguator.\n fn suggest_disambiguator(\n-    disambiguator: Disambiguator,\n+    res: Res,\n     diag: &mut DiagnosticBuilder<'_>,\n     path_str: &str,\n     ori_link: &str,\n     sp: Option<rustc_span::Span>,\n ) {\n-    let suggestion = disambiguator.suggestion();\n-    let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n+    let suggestion = res.disambiguator_suggestion();\n+    let help = format!(\"to link to the {}, {}\", res.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n         let mut spans = suggestion.as_help_span(path_str, ori_link, sp);"}, {"sha": "2d66566119bc3027accb42f24cf09c473ebd14bd", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9acd8133806504f54e023151ec789c134656a1cc/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acd8133806504f54e023151ec789c134656a1cc/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs?ref=9acd8133806504f54e023151ec789c134656a1cc", "patch": "@@ -77,5 +77,5 @@ trait T {}\n /// Link to [fn@std]\n //~^ ERROR unresolved link to `std`\n //~| NOTE this link resolves to the crate `std`\n-//~| HELP to link to the module, prefix with `mod@`\n+//~| HELP to link to the crate, prefix with `mod@`\n pub fn f() {}"}, {"sha": "ad9102c506f7fb792dc291b64071b9c3ff43da63", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9acd8133806504f54e023151ec789c134656a1cc/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9acd8133806504f54e023151ec789c134656a1cc/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=9acd8133806504f54e023151ec789c134656a1cc", "patch": "@@ -144,7 +144,7 @@ error: unresolved link to `std`\n LL | /// Link to [fn@std]\n    |              ^^^^^^ this link resolves to the crate `std`, which is not in the value namespace\n    |\n-help: to link to the module, prefix with `mod@`\n+help: to link to the crate, prefix with `mod@`\n    |\n LL | /// Link to [mod@std]\n    |              ~~~~"}]}