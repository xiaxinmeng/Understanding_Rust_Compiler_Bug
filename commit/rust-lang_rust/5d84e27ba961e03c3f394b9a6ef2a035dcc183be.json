{"sha": "5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODRlMjdiYTk2MWUwM2MzZjM5NGI5YTZlZjJhMDM1ZGNjMTgzYmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T09:52:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T09:52:24Z"}, "message": "Merge #5022\n\n5022: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0d3e1feeb92d40a080653f1e79233f18d161a8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3e1feeb92d40a080653f1e79233f18d161a8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8yJYCRBK7hj4Ov3rIwAAdHIIACWU8OgGdvst1myqdidijEFt\nw7/9o4DeoFipwxeS0pryBhkvZh4OmE80lZB+dq1YjhzzSwvFObfG/b3KvlBq0L8q\n4cOHFd+RoZyl2JgzkDRVx0UdCuGKuN4yjn4dGz+9/T3r/OQ8iB/U8f3Ek+nr1Eb3\n84DGJYA3LqBM41ZG1UWrjBQawly0NcUnSaagN4HkAYaAX2l3wWHDuQpOvrG9KqPC\nCqIl02z/hRBe1LALxxEuvMtVz+J1KuNq9FoYZ6W1fbhWRgmy8k1C6L8OjS3E6JtQ\n7AVmDlD/bbAaV1Ld2Bc/TYiqgwDCEPFoyQvPpmqYUUfABb/T3SQ9uH20wbSQxT4=\n=o+rb\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d3e1feeb92d40a080653f1e79233f18d161a8ef\nparent 7c28d060b5a5c4e7004282aa6827c3023c5b03c8\nparent 04fe512f0d3567727cfb9ccab166c5344716711a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592992344 +0000\ncommitter GitHub <noreply@github.com> 1592992344 +0000\n\nMerge #5022\n\n5022: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "html_url": "https://github.com/rust-lang/rust/commit/5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d84e27ba961e03c3f394b9a6ef2a035dcc183be/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c28d060b5a5c4e7004282aa6827c3023c5b03c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c28d060b5a5c4e7004282aa6827c3023c5b03c8", "html_url": "https://github.com/rust-lang/rust/commit/7c28d060b5a5c4e7004282aa6827c3023c5b03c8"}, {"sha": "04fe512f0d3567727cfb9ccab166c5344716711a", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fe512f0d3567727cfb9ccab166c5344716711a", "html_url": "https://github.com/rust-lang/rust/commit/04fe512f0d3567727cfb9ccab166c5344716711a"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "b7325bfc3cf27faf894868e8e7486dad2eca35ec", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d84e27ba961e03c3f394b9a6ef2a035dcc183be/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d84e27ba961e03c3f394b9a6ef2a035dcc183be/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "patch": "@@ -79,9 +79,6 @@ pub struct MockAnalysis {\n }\n \n impl MockAnalysis {\n-    pub fn new() -> MockAnalysis {\n-        MockAnalysis::default()\n-    }\n     /// Creates `MockAnalysis` using a fixture data in the following format:\n     ///\n     /// ```not_rust\n@@ -93,7 +90,7 @@ impl MockAnalysis {\n     /// struct Baz;\n     /// ```\n     pub fn with_files(fixture: &str) -> MockAnalysis {\n-        let mut res = MockAnalysis::new();\n+        let mut res = MockAnalysis::default();\n         for entry in Fixture::parse(fixture) {\n             res.add_file_fixture(entry);\n         }\n@@ -104,11 +101,14 @@ impl MockAnalysis {\n     /// whose position is also returned.\n     pub fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n         let mut position = None;\n-        let mut res = MockAnalysis::new();\n-        for entry in Fixture::parse(fixture) {\n+        let mut res = MockAnalysis::default();\n+        for mut entry in Fixture::parse(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                position = Some(res.add_file_fixture_with_position(entry));\n+                let (offset, text) = extract_offset(&entry.text);\n+                entry.text = text;\n+                let file_id = res.add_file_fixture(entry);\n+                position = Some(FilePosition { file_id, offset });\n             } else {\n                 res.add_file_fixture(entry);\n             }\n@@ -123,19 +123,6 @@ impl MockAnalysis {\n         file_id\n     }\n \n-    fn add_file_fixture_with_position(&mut self, mut fixture: Fixture) -> FilePosition {\n-        let (offset, text) = extract_offset(&fixture.text);\n-        fixture.text = text;\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::from(fixture));\n-        FilePosition { file_id, offset }\n-    }\n-\n-    pub fn add_file(&mut self, path: &str, text: &str) -> FileId {\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::new(path.to_string(), text.to_string()));\n-        file_id\n-    }\n     fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n         let (range, text) = extract_range(text);\n         let file_id = self.next_id();\n@@ -223,7 +210,7 @@ pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n pub fn single_file_with_range(ra_fixture: &str) -> (Analysis, FileRange) {\n-    let mut mock = MockAnalysis::new();\n+    let mut mock = MockAnalysis::default();\n     let pos = mock.add_file_with_range(\"/main.rs\", ra_fixture);\n     (mock.analysis(), pos)\n }"}, {"sha": "b7fad97197f55ba13ad72b78aa5b6c0266ef6f2f", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d84e27ba961e03c3f394b9a6ef2a035dcc183be/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d84e27ba961e03c3f394b9a6ef2a035dcc183be/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "patch": "@@ -2,10 +2,7 @@ use std::fs;\n \n use test_utils::{assert_eq_text, project_dir, read_text};\n \n-use crate::{\n-    mock_analysis::{single_file, MockAnalysis},\n-    FileRange, TextRange,\n-};\n+use crate::{mock_analysis::single_file, FileRange, TextRange};\n \n #[test]\n fn test_highlighting() {\n@@ -127,12 +124,10 @@ fn accidentally_quadratic() {\n     let file = project_dir().join(\"crates/ra_syntax/test_data/accidentally_quadratic\");\n     let src = fs::read_to_string(file).unwrap();\n \n-    let mut mock = MockAnalysis::new();\n-    let file_id = mock.add_file(\"/main.rs\", &src);\n-    let host = mock.analysis_host();\n+    let (analysis, file_id) = single_file(&src);\n \n     // let t = std::time::Instant::now();\n-    let _ = host.analysis().highlight(file_id).unwrap();\n+    let _ = analysis.highlight(file_id).unwrap();\n     // eprintln!(\"elapsed: {:?}\", t.elapsed());\n }\n "}]}