{"sha": "d2ffe40864e6dc93881225621a05b833957963a5", "node_id": "C_kwDOAAsO6NoAKGQyZmZlNDA4NjRlNmRjOTM4ODEyMjU2MjFhMDViODMzOTU3OTYzYTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T17:16:09Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T17:16:09Z"}, "message": "Cleanup -Ztime-passes output", "tree": {"sha": "7e05bdc2989d934fcf40ff028facb4e5f08275b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e05bdc2989d934fcf40ff028facb4e5f08275b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ffe40864e6dc93881225621a05b833957963a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ffe40864e6dc93881225621a05b833957963a5", "html_url": "https://github.com/rust-lang/rust/commit/d2ffe40864e6dc93881225621a05b833957963a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ffe40864e6dc93881225621a05b833957963a5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a465d6a8600faed173f896f4b8dc2db0ee2d5498", "url": "https://api.github.com/repos/rust-lang/rust/commits/a465d6a8600faed173f896f4b8dc2db0ee2d5498", "html_url": "https://github.com/rust-lang/rust/commit/a465d6a8600faed173f896f4b8dc2db0ee2d5498"}], "stats": {"total": 186, "additions": 92, "deletions": 94}, "files": [{"sha": "184ddbdd28063cb53c4c4d115e990f52819f59de", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d2ffe40864e6dc93881225621a05b833957963a5", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         next_ssa_var: 0,\n     };\n \n-    tcx.sess.time(\"codegen clif ir\", || codegen_fn_body(&mut fx, start_block));\n+    tcx.prof.generic_activity(\"codegen clif ir\").run(|| codegen_fn_body(&mut fx, start_block));\n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n \n@@ -174,7 +174,7 @@ pub(crate) fn compile_fn(\n     };\n \n     // Define function\n-    cx.profiler.verbose_generic_activity(\"define function\").run(|| {\n+    cx.profiler.generic_activity(\"define function\").run(|| {\n         context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n     });\n@@ -203,7 +203,7 @@ pub(crate) fn compile_fn(\n     let isa = module.isa();\n     let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n-    cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n+    cx.profiler.generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n             codegened_func.func_debug_cx.unwrap().finalize(\n                 debug_context,\n@@ -220,7 +220,7 @@ pub(crate) fn verify_func(\n     writer: &crate::pretty_clif::CommentWriter,\n     func: &Function,\n ) {\n-    tcx.sess.time(\"verify clif ir\", || {\n+    tcx.prof.generic_activity(\"verify clif ir\").run(|| {\n         let flags = cranelift_codegen::settings::Flags::new(cranelift_codegen::settings::builder());\n         match cranelift_codegen::verify_function(&func, &flags) {\n             Ok(_) => {}\n@@ -256,7 +256,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n         fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n         return;\n     }\n-    fx.tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(fx, start_block));\n+    fx.tcx\n+        .prof\n+        .generic_activity(\"codegen prelude\")\n+        .run(|| crate::abi::codegen_fn_prelude(fx, start_block));\n \n     for (bb, bb_data) in fx.mir.basic_blocks.iter_enumerated() {\n         let block = fx.get_block(bb);\n@@ -417,7 +420,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 cleanup: _,\n                 from_hir_call: _,\n             } => {\n-                fx.tcx.sess.time(\"codegen call\", || {\n+                fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n                     crate::abi::codegen_terminator_call(\n                         fx,\n                         mir::SourceInfo { span: *fn_span, ..source_info },"}, {"sha": "263401e1c4b8343f76a2ad52e8fc90097a58a1c7", "filename": "src/config.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=d2ffe40864e6dc93881225621a05b833957963a5", "patch": "@@ -42,12 +42,6 @@ pub struct BackendConfig {\n     /// Defaults to the value of `CG_CLIF_JIT_ARGS`.\n     pub jit_args: Vec<String>,\n \n-    /// Display the time it took to perform codegen for a crate.\n-    ///\n-    /// Defaults to true when the `CG_CLIF_DISPLAY_CG_TIME` env var is set to 1 or false otherwise.\n-    /// Can be set using `-Cllvm-args=display_cg_time=...`.\n-    pub display_cg_time: bool,\n-\n     /// Enable the Cranelift ir verifier for all compilation passes. If not set it will only run\n     /// once before passing the clif ir to Cranelift for compilation.\n     ///\n@@ -73,7 +67,6 @@ impl Default for BackendConfig {\n                 let args = std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n                 args.split(' ').map(|arg| arg.to_string()).collect()\n             },\n-            display_cg_time: bool_env_var(\"CG_CLIF_DISPLAY_CG_TIME\"),\n             enable_verifier: cfg!(debug_assertions) || bool_env_var(\"CG_CLIF_ENABLE_VERIFIER\"),\n             disable_incr_cache: bool_env_var(\"CG_CLIF_DISABLE_INCR_CACHE\"),\n         }\n@@ -92,7 +85,6 @@ impl BackendConfig {\n             if let Some((name, value)) = opt.split_once('=') {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,\n-                    \"display_cg_time\" => config.display_cg_time = parse_bool(name, value)?,\n                     \"enable_verifier\" => config.enable_verifier = parse_bool(name, value)?,\n                     \"disable_incr_cache\" => config.disable_incr_cache = parse_bool(name, value)?,\n                     _ => return Err(format!(\"Unknown option `{}`\", name)),"}, {"sha": "2aa3209e2b158ed22fc70a1da792a2064c1259b1", "filename": "src/driver/aot.rs", "status": "modified", "additions": 80, "deletions": 64, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=d2ffe40864e6dc93881225621a05b833957963a5", "patch": "@@ -272,80 +272,97 @@ fn module_codegen(\n         ConcurrencyLimiterToken,\n     ),\n ) -> OngoingModuleCodegen {\n-    let (cgu_name, mut cx, mut module, codegened_functions) = tcx.sess.time(\"codegen cgu\", || {\n-        let cgu = tcx.codegen_unit(cgu_name);\n-        let mono_items = cgu.items_in_deterministic_order(tcx);\n-\n-        let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n-\n-        let mut cx = crate::CodegenCx::new(\n-            tcx,\n-            backend_config.clone(),\n-            module.isa(),\n-            tcx.sess.opts.debuginfo != DebugInfo::None,\n-            cgu_name,\n-        );\n-        super::predefine_mono_items(tcx, &mut module, &mono_items);\n-        let mut codegened_functions = vec![];\n-        for (mono_item, _) in mono_items {\n-            match mono_item {\n-                MonoItem::Fn(inst) => {\n-                    tcx.sess.time(\"codegen fn\", || {\n-                        let codegened_function = crate::base::codegen_fn(\n+    let (cgu_name, mut cx, mut module, codegened_functions) =\n+        tcx.prof.verbose_generic_activity_with_arg(\"codegen cgu\", cgu_name.as_str()).run(|| {\n+            let cgu = tcx.codegen_unit(cgu_name);\n+            let mono_items = cgu.items_in_deterministic_order(tcx);\n+\n+            let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n+\n+            let mut cx = crate::CodegenCx::new(\n+                tcx,\n+                backend_config.clone(),\n+                module.isa(),\n+                tcx.sess.opts.debuginfo != DebugInfo::None,\n+                cgu_name,\n+            );\n+            super::predefine_mono_items(tcx, &mut module, &mono_items);\n+            let mut codegened_functions = vec![];\n+            for (mono_item, _) in mono_items {\n+                match mono_item {\n+                    MonoItem::Fn(inst) => {\n+                        tcx.prof.generic_activity(\"codegen fn\").run(|| {\n+                            let codegened_function = crate::base::codegen_fn(\n+                                tcx,\n+                                &mut cx,\n+                                Function::new(),\n+                                &mut module,\n+                                inst,\n+                            );\n+                            codegened_functions.push(codegened_function);\n+                        });\n+                    }\n+                    MonoItem::Static(def_id) => {\n+                        crate::constant::codegen_static(tcx, &mut module, def_id)\n+                    }\n+                    MonoItem::GlobalAsm(item_id) => {\n+                        crate::global_asm::codegen_global_asm_item(\n                             tcx,\n-                            &mut cx,\n-                            Function::new(),\n-                            &mut module,\n-                            inst,\n+                            &mut cx.global_asm,\n+                            item_id,\n                         );\n-                        codegened_functions.push(codegened_function);\n-                    });\n-                }\n-                MonoItem::Static(def_id) => {\n-                    crate::constant::codegen_static(tcx, &mut module, def_id)\n-                }\n-                MonoItem::GlobalAsm(item_id) => {\n-                    crate::global_asm::codegen_global_asm_item(tcx, &mut cx.global_asm, item_id);\n+                    }\n                 }\n             }\n-        }\n-        crate::main_shim::maybe_create_entry_wrapper(\n-            tcx,\n-            &mut module,\n-            &mut cx.unwind_context,\n-            false,\n-            cgu.is_primary(),\n-        );\n+            crate::main_shim::maybe_create_entry_wrapper(\n+                tcx,\n+                &mut module,\n+                &mut cx.unwind_context,\n+                false,\n+                cgu.is_primary(),\n+            );\n \n-        let cgu_name = cgu.name().as_str().to_owned();\n+            let cgu_name = cgu.name().as_str().to_owned();\n \n-        (cgu_name, cx, module, codegened_functions)\n-    });\n+            (cgu_name, cx, module, codegened_functions)\n+        });\n \n     OngoingModuleCodegen::Async(std::thread::spawn(move || {\n-        cx.profiler.clone().verbose_generic_activity(\"compile functions\").run(|| {\n-            let mut cached_context = Context::new();\n-            for codegened_func in codegened_functions {\n-                crate::base::compile_fn(&mut cx, &mut cached_context, &mut module, codegened_func);\n-            }\n-        });\n+        cx.profiler.clone().verbose_generic_activity_with_arg(\"compile functions\", &*cgu_name).run(\n+            || {\n+                let mut cached_context = Context::new();\n+                for codegened_func in codegened_functions {\n+                    crate::base::compile_fn(\n+                        &mut cx,\n+                        &mut cached_context,\n+                        &mut module,\n+                        codegened_func,\n+                    );\n+                }\n+            },\n+        );\n \n-        let global_asm_object_file =\n-            cx.profiler.verbose_generic_activity(\"compile assembly\").run(|| {\n+        let global_asm_object_file = cx\n+            .profiler\n+            .verbose_generic_activity_with_arg(\"compile assembly\", &*cgu_name)\n+            .run(|| {\n                 crate::global_asm::compile_global_asm(&global_asm_config, &cgu_name, &cx.global_asm)\n             })?;\n \n-        let codegen_result = cx.profiler.verbose_generic_activity(\"write object file\").run(|| {\n-            emit_cgu(\n-                &global_asm_config.output_filenames,\n-                &cx.profiler,\n-                cgu_name,\n-                module,\n-                cx.debug_context,\n-                cx.unwind_context,\n-                global_asm_object_file,\n-            )\n-        });\n+        let codegen_result = cx\n+            .profiler\n+            .verbose_generic_activity_with_arg(\"write object file\", &*cgu_name)\n+            .run(|| {\n+                emit_cgu(\n+                    &global_asm_config.output_filenames,\n+                    &cx.profiler,\n+                    cgu_name,\n+                    module,\n+                    cx.debug_context,\n+                    cx.unwind_context,\n+                    global_asm_object_file,\n+                )\n+            });\n         std::mem::drop(token);\n         codegen_result\n     }))\n@@ -375,7 +392,7 @@ pub(crate) fn run_aot(\n \n     let mut concurrency_limiter = ConcurrencyLimiter::new(tcx.sess, cgus.len());\n \n-    let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n+    let modules = tcx.sess.time(\"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n                 let cgu_reuse = if backend_config.disable_incr_cache {\n@@ -437,7 +454,6 @@ pub(crate) fn run_aot(\n     };\n \n     let metadata_module = if need_metadata_module {\n-        let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n         let (metadata_cgu_name, tmp_file) = tcx.sess.time(\"write compressed metadata\", || {\n             use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n "}, {"sha": "8b5a2da2c5944d631de0499f1905029de5c4b3c8", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=d2ffe40864e6dc93881225621a05b833957963a5", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n+    tcx.sess.time(\"codegen mono items\", || {\n         super::predefine_mono_items(tcx, &mut jit_module, &mono_items);\n         for (mono_item, _) in mono_items {\n             match mono_item {\n@@ -224,7 +224,7 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n-    tcx.sess.time(\"codegen and compile fn\", || {\n+    tcx.prof.generic_activity(\"codegen and compile fn\").run(|| {\n         let _inst_guard =\n             crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n "}, {"sha": "d09d3a529759cab809e2e8d637b23999fcf57d23", "filename": "src/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ffe40864e6dc93881225621a05b833957963a5/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=d2ffe40864e6dc93881225621a05b833957963a5", "patch": "@@ -17,7 +17,7 @@ fn predefine_mono_items<'tcx>(\n     module: &mut dyn Module,\n     mono_items: &[(MonoItem<'tcx>, (RLinkage, Visibility))],\n ) {\n-    tcx.sess.time(\"predefine functions\", || {\n+    tcx.prof.generic_activity(\"predefine functions\").run(|| {\n         let is_compiler_builtins = tcx.is_compiler_builtins(LOCAL_CRATE);\n         for &(mono_item, (linkage, visibility)) in mono_items {\n             match mono_item {\n@@ -39,16 +39,3 @@ fn predefine_mono_items<'tcx>(\n         }\n     });\n }\n-\n-fn time<R>(tcx: TyCtxt<'_>, display: bool, name: &'static str, f: impl FnOnce() -> R) -> R {\n-    if display {\n-        println!(\"[{:<30}: {}] start\", tcx.crate_name(LOCAL_CRATE), name);\n-        let before = std::time::Instant::now();\n-        let res = tcx.sess.time(name, f);\n-        let after = std::time::Instant::now();\n-        println!(\"[{:<30}: {}] end time: {:?}\", tcx.crate_name(LOCAL_CRATE), name, after - before);\n-        res\n-    } else {\n-        tcx.sess.time(name, f)\n-    }\n-}"}]}