{"sha": "51f79b618d41b8319134827d92ccc674dab4aa32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjc5YjYxOGQ0MWI4MzE5MTM0ODI3ZDkyY2NjNjc0ZGFiNGFhMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T22:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-02T22:16:22Z"}, "message": "Auto merge of #76233 - cuviper:unhasher, r=Mark-Simulacrum\n\nAvoid rehashing Fingerprint as a map key\n\nThis introduces a no-op `Unhasher` for map keys that are already hash-\nlike, for example `Fingerprint` and its wrapper `DefPathHash`. For these\nwe can directly produce the `u64` hash for maps. The first use of this\nis `def_path_hash_to_def_id: Option<UnhashMap<DefPathHash, DefId>>`.\n\ncc #56308\nr? @eddyb", "tree": {"sha": "074d8426365c0f20fbe974d45298f52f5e68e3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074d8426365c0f20fbe974d45298f52f5e68e3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f79b618d41b8319134827d92ccc674dab4aa32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f79b618d41b8319134827d92ccc674dab4aa32", "html_url": "https://github.com/rust-lang/rust/commit/51f79b618d41b8319134827d92ccc674dab4aa32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f79b618d41b8319134827d92ccc674dab4aa32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80fc9b0ecb29050d45b17c64af004200afd3cfc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80fc9b0ecb29050d45b17c64af004200afd3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/80fc9b0ecb29050d45b17c64af004200afd3cfc2"}, {"sha": "469ca379d6dc0ade5ee08f14892c1549bb383e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/469ca379d6dc0ade5ee08f14892c1549bb383e77", "html_url": "https://github.com/rust-lang/rust/commit/469ca379d6dc0ade5ee08f14892c1549bb383e77"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "aba0bbbac804f3f6741f53c190c2aafe984ff528", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=51f79b618d41b8319134827d92ccc674dab4aa32", "patch": "@@ -3,9 +3,10 @@ use rustc_serialize::{\n     opaque::{self, EncodeResult},\n     Decodable, Encodable,\n };\n+use std::hash::{Hash, Hasher};\n use std::mem;\n \n-#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n@@ -76,6 +77,33 @@ impl ::std::fmt::Display for Fingerprint {\n     }\n }\n \n+impl Hash for Fingerprint {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        state.write_fingerprint(self);\n+    }\n+}\n+\n+trait FingerprintHasher {\n+    fn write_fingerprint(&mut self, fingerprint: &Fingerprint);\n+}\n+\n+impl<H: Hasher> FingerprintHasher for H {\n+    #[inline]\n+    default fn write_fingerprint(&mut self, fingerprint: &Fingerprint) {\n+        self.write_u64(fingerprint.0);\n+        self.write_u64(fingerprint.1);\n+    }\n+}\n+\n+impl FingerprintHasher for crate::unhash::Unhasher {\n+    #[inline]\n+    fn write_fingerprint(&mut self, fingerprint: &Fingerprint) {\n+        // `Unhasher` only wants a single `u64`\n+        self.write_u64(fingerprint.0);\n+    }\n+}\n+\n impl stable_hasher::StableHasherResult for Fingerprint {\n     #[inline]\n     fn finish(hasher: stable_hasher::StableHasher) -> Self {"}, {"sha": "de4e7a134243101f4361b3a698280de668bea96e", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=51f79b618d41b8319134827d92ccc674dab4aa32", "patch": "@@ -103,6 +103,7 @@ pub use atomic_ref::AtomicRef;\n pub mod frozen;\n pub mod tagged_ptr;\n pub mod temp_dir;\n+pub mod unhash;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "48e21a9dab1b6f051c5d0e2861b6733be8d29921", "filename": "compiler/rustc_data_structures/src/unhash.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Funhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_data_structures%2Fsrc%2Funhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funhash.rs?ref=51f79b618d41b8319134827d92ccc674dab4aa32", "patch": "@@ -0,0 +1,29 @@\n+use std::collections::{HashMap, HashSet};\n+use std::hash::{BuildHasherDefault, Hasher};\n+\n+pub type UnhashMap<K, V> = HashMap<K, V, BuildHasherDefault<Unhasher>>;\n+pub type UnhashSet<V> = HashSet<V, BuildHasherDefault<Unhasher>>;\n+\n+/// This no-op hasher expects only a single `write_u64` call. It's intended for\n+/// map keys that already have hash-like quality, like `Fingerprint`.\n+#[derive(Default)]\n+pub struct Unhasher {\n+    value: u64,\n+}\n+\n+impl Hasher for Unhasher {\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        self.value\n+    }\n+\n+    fn write(&mut self, _bytes: &[u8]) {\n+        unimplemented!(\"use write_u64\");\n+    }\n+\n+    #[inline]\n+    fn write_u64(&mut self, value: u64) {\n+        debug_assert_eq!(0, self.value, \"Unhasher doesn't mix values!\");\n+        self.value = value;\n+    }\n+}"}, {"sha": "5819c774bc2db815da95a96eb41409cfc87c3eef", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f79b618d41b8319134827d92ccc674dab4aa32/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=51f79b618d41b8319134827d92ccc674dab4aa32", "patch": "@@ -34,6 +34,7 @@ use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n+use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -935,7 +936,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// A map from `DefPathHash` -> `DefId`. Includes `DefId`s from the local crate\n     /// as well as all upstream crates. Only populated in incremental mode.\n-    pub def_path_hash_to_def_id: Option<FxHashMap<DefPathHash, DefId>>,\n+    pub def_path_hash_to_def_id: Option<UnhashMap<DefPathHash, DefId>>,\n \n     pub queries: query::Queries<'tcx>,\n \n@@ -1104,7 +1105,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let def_path_hash_to_def_id = if s.opts.build_dep_graph() {\n             let capacity = definitions.def_path_table().num_def_ids()\n                 + crates.iter().map(|cnum| cstore.num_def_ids(*cnum)).sum::<usize>();\n-            let mut map = FxHashMap::with_capacity_and_hasher(capacity, Default::default());\n+            let mut map = UnhashMap::with_capacity_and_hasher(capacity, Default::default());\n \n             map.extend(definitions.def_path_table().all_def_path_hashes_and_def_ids(LOCAL_CRATE));\n             for cnum in &crates {"}]}