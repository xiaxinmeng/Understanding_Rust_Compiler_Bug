{"sha": "0e47c371fdea2bc898f4fed210782047937af208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDdjMzcxZmRlYTJiYzg5OGY0ZmVkMjEwNzgyMDQ3OTM3YWYyMDg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T12:44:01Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Ignore unnamed trait fns and add more tests", "tree": {"sha": "238f22e6262a8447b1d9fef6b24a3f4485302948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238f22e6262a8447b1d9fef6b24a3f4485302948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e47c371fdea2bc898f4fed210782047937af208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e47c371fdea2bc898f4fed210782047937af208", "html_url": "https://github.com/rust-lang/rust/commit/0e47c371fdea2bc898f4fed210782047937af208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e47c371fdea2bc898f4fed210782047937af208/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406343492c9f1741fcc3eafbb13efa42691fe0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/406343492c9f1741fcc3eafbb13efa42691fe0db", "html_url": "https://github.com/rust-lang/rust/commit/406343492c9f1741fcc3eafbb13efa42691fe0db"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "5000d01221d4d7cd3c7dcd7bc438e2466b5804a1", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0e47c371fdea2bc898f4fed210782047937af208/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e47c371fdea2bc898f4fed210782047937af208/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=0e47c371fdea2bc898f4fed210782047937af208", "patch": "@@ -69,6 +69,7 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n \n     let missing_fns: Vec<_> = trait_fns\n         .into_iter()\n+        .filter(|t| def_name(t).is_some())\n         .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n         .collect();\n     if missing_fns.is_empty() {\n@@ -89,8 +90,7 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n                 .unwrap_or_else(|| impl_block_indent().to_owned() + DEFAULT_INDENT)\n         };\n \n-        let mut func_bodies = missing_fns.into_iter().map(build_func_body);\n-        let func_bodies = func_bodies.join(\"\\n\");\n+        let func_bodies = missing_fns.into_iter().map(build_func_body).join(\"\\n\");\n         let func_bodies = String::from(\"\\n\") + &func_bodies;\n         let func_bodies = reindent(&func_bodies, &indent) + \"\\n\";\n \n@@ -152,6 +152,40 @@ impl Foo for S {\n         );\n     }\n \n+    #[test]\n+    fn test_copied_overriden_members() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self) -> bool { true }\n+    fn baz(&self) -> u32 { 42 }\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    <|>\n+}\",\n+            \"\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self) -> bool { true }\n+    fn baz(&self) -> u32 { 42 }\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    fn foo(&self) { unimplemented!() }\n+    fn baz(&self) -> u32 { 42 }<|>\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn test_empty_impl_block() {\n         check_assist(\n@@ -179,4 +213,38 @@ struct S;\n impl Foo for S {}<|>\",\n         )\n     }\n+\n+    #[test]\n+    fn test_empty_trait() {\n+        check_assist_not_applicable(\n+            add_missing_impl_members,\n+            \"\n+trait Foo;\n+struct S;\n+impl Foo for S { <|> }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_unnamed_trait_members() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+trait Foo {\n+    fn (arg: u32);\n+    fn valid(some: u32) -> bool { false }\n+}\n+struct S;\n+impl Foo for S { <|> }\",\n+            \"\n+trait Foo {\n+    fn (arg: u32);\n+    fn valid(some: u32) -> bool { false }\n+}\n+struct S;\n+impl Foo for S {\n+    fn valid(some: u32) -> bool { false }<|>\n+}\",\n+        )\n+    }\n }"}]}