{"sha": "23400677d7efb82c396d37e01afc9d10698b3d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDAwNjc3ZDdlZmI4MmMzOTZkMzdlMDFhZmM5ZDEwNjk4YjNkM2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-04T05:04:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-04T05:04:39Z"}, "message": "Simplify change to layout_of", "tree": {"sha": "04b99ba10d9a36ef180fae587e4f3363f580c1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b99ba10d9a36ef180fae587e4f3363f580c1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23400677d7efb82c396d37e01afc9d10698b3d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23400677d7efb82c396d37e01afc9d10698b3d3e", "html_url": "https://github.com/rust-lang/rust/commit/23400677d7efb82c396d37e01afc9d10698b3d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23400677d7efb82c396d37e01afc9d10698b3d3e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db099fb491fa2e713047af4f22d4139a71a21dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db099fb491fa2e713047af4f22d4139a71a21dbc", "html_url": "https://github.com/rust-lang/rust/commit/db099fb491fa2e713047af4f22d4139a71a21dbc"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "de812410e8bd83260f66925bcabbe285fbc0ee7d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -901,9 +901,6 @@ impl<'a, 'tcx> LayoutOf for LateContext<'a, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {"}, {"sha": "3b4b814c92a90fff9d37846b58db408df5af67bc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -3,7 +3,7 @@ use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::DUMMY_SP;\n \n use std::cmp;\n use std::fmt;\n@@ -1943,9 +1943,6 @@ impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         Ok(layout)\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n@@ -1977,9 +1974,6 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n \n         Ok(layout)\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n // Helper (inherent) `layout_of` methods to avoid pushing `LayoutCx` to users."}, {"sha": "894e5c2fd3d93049d53f513039659813952b593b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -6,7 +6,6 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use syntax::symbol::LocalInternedString;\n-use syntax::source_map::Span;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -91,9 +90,6 @@ impl ty::layout::LayoutOf for Builder<'_, '_, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.cx.layout_of(ty)\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.cx.layout_of(ty)\n-    }\n }\n \n impl Deref for Builder<'_, 'll, 'tcx> {"}, {"sha": "4df45d1586086ae3368ca7f2831412a901ec0691", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -713,7 +713,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let ty = rvalue.ty(self.mir, self.cx.tcx());\n                 let ty = self.monomorphize(&ty);\n                 self.cx.spanned_layout_of(ty, span).is_zst()\n-                // self.cx.layout_of(ty).is_zst()\n             }\n         }\n "}, {"sha": "1f23d8c017ccd0d570262de6eb2e5fca27494012", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -193,9 +193,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n             .layout_of(self.param_env.and(ty))\n             .map_err(|layout| err_inval!(Layout(layout)).into())\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -509,7 +506,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n-        span: source_map::Span,\n+        span: Span,\n         body: &'mir mir::Body<'tcx>,\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,"}, {"sha": "a450ec32e1a478410a432d9c971c7d9b32f6dbab", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -134,9 +134,6 @@ impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {"}, {"sha": "95cb8de70675d12c604572560870fe51fb006c9f", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n-use syntax::source_map::Span;\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n@@ -117,9 +116,6 @@ impl LayoutOf for UnwrapLayoutCx<'tcx> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty)).unwrap()\n     }\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _: Option<Span>) -> Self::TyLayout {\n-        self.layout_of(ty)\n-    }\n }\n \n impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {"}, {"sha": "4f53c7795c2be0652aa2584e2feaf4f07d3c548e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23400677d7efb82c396d37e01afc9d10698b3d3e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=23400677d7efb82c396d37e01afc9d10698b3d3e", "patch": "@@ -1013,7 +1013,9 @@ pub trait LayoutOf {\n     type TyLayout;\n \n     fn layout_of(&self, ty: Self::Ty) -> Self::TyLayout;\n-    fn spanned_layout_of(&self, ty: Self::Ty, span: Option<Span>) -> Self::TyLayout;\n+    fn spanned_layout_of(&self, ty: Self::Ty, _span: Option<Span>) -> Self::TyLayout {\n+        self.layout_of(ty)\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq)]"}]}