{"sha": "fa4d8bc878f80ae22d350e998508861426749664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGQ4YmM4NzhmODBhZTIyZDM1MGU5OTg1MDg4NjE0MjY3NDk2NjQ=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-01-05T01:01:29Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2021-01-06T13:34:19Z"}, "message": "Prefer enum Endian in rustc_target::Target", "tree": {"sha": "51b0452a8ac56d3f71af33c08245f23536e01b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b0452a8ac56d3f71af33c08245f23536e01b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4d8bc878f80ae22d350e998508861426749664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4d8bc878f80ae22d350e998508861426749664", "html_url": "https://github.com/rust-lang/rust/commit/fa4d8bc878f80ae22d350e998508861426749664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4d8bc878f80ae22d350e998508861426749664/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9530fdc3f4355ff790ad33255682493fcda33bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9530fdc3f4355ff790ad33255682493fcda33bbb", "html_url": "https://github.com/rust-lang/rust/commit/9530fdc3f4355ff790ad33255682493fcda33bbb"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "07fde27b5a3148a149da0f33db1f4267f47a931d", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=fa4d8bc878f80ae22d350e998508861426749664", "patch": "@@ -9,7 +9,7 @@ use rustc_codegen_ssa::{\n };\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size};\n+use rustc_target::abi::{Align, Endian, HasDataLayout, LayoutOf, Size};\n \n fn round_pointer_up_to_alignment(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n@@ -52,7 +52,7 @@ fn emit_direct_ptr_va_arg(\n     let next = bx.inbounds_gep(addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n-    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.endian == \"big\" {\n+    if size.bytes() < slot_size.bytes() && bx.tcx().sess.target.endian == Endian::Big {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n         let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n@@ -105,7 +105,7 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert!(&*bx.tcx().sess.target.endian == \"little\");\n+    assert_eq!(bx.tcx().sess.target.endian, Endian::Little);\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {"}, {"sha": "b653de42b361e9beac61b1a27d098be5a971ae31", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=fa4d8bc878f80ae22d350e998508861426749664", "patch": "@@ -819,7 +819,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n         }\n     }\n     ret.insert((sym::target_arch, Some(Symbol::intern(arch))));\n-    ret.insert((sym::target_endian, Some(Symbol::intern(end))));\n+    ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));"}, {"sha": "61bfd58533a91866913a10e5b53c96bbe67a7156", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=fa4d8bc878f80ae22d350e998508861426749664", "patch": "@@ -4,11 +4,14 @@ pub use Primitive::*;\n use crate::spec::Target;\n \n use std::convert::{TryFrom, TryInto};\n+use std::fmt;\n use std::num::NonZeroUsize;\n use std::ops::{Add, AddAssign, Deref, Mul, Range, RangeInclusive, Sub};\n+use std::str::FromStr;\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable_Generic;\n+use rustc_serialize::json::{Json, ToJson};\n use rustc_span::Span;\n \n pub mod call;\n@@ -152,22 +155,19 @@ impl TargetDataLayout {\n         }\n \n         // Perform consistency checks against the Target information.\n-        let endian_str = match dl.endian {\n-            Endian::Little => \"little\",\n-            Endian::Big => \"big\",\n-        };\n-        if endian_str != target.endian {\n+        if dl.endian != target.endian {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                                architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                endian_str, target.endian\n+                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n+                dl.endian.as_str(),\n+                target.endian.as_str(),\n             ));\n         }\n \n         if dl.pointer_size.bits() != target.pointer_width.into() {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                                pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n+                 pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n                 dl.pointer_size.bits(),\n                 target.pointer_width\n             ));\n@@ -234,6 +234,39 @@ pub enum Endian {\n     Big,\n }\n \n+impl Endian {\n+    pub fn as_str(&self) -> &'static str {\n+        match self {\n+            Self::Little => \"little\",\n+            Self::Big => \"big\",\n+        }\n+    }\n+}\n+\n+impl fmt::Debug for Endian {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(self.as_str())\n+    }\n+}\n+\n+impl FromStr for Endian {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"little\" => Ok(Self::Little),\n+            \"big\" => Ok(Self::Big),\n+            _ => Err(format!(r#\"unknown endian: \"{}\"\"#, s)),\n+        }\n+    }\n+}\n+\n+impl ToJson for Endian {\n+    fn to_json(&self) -> Json {\n+        self.as_str().to_json()\n+    }\n+}\n+\n /// Size of a type in bytes.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n #[derive(HashStable_Generic)]"}, {"sha": "abc96eb3322ec528a5301d44cb1d0eb354a94752", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4d8bc878f80ae22d350e998508861426749664/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=fa4d8bc878f80ae22d350e998508861426749664", "patch": "@@ -34,6 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n+use crate::abi::Endian;\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n@@ -705,8 +706,8 @@ pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n-    /// String to use as the `target_endian` `cfg` variable. Defaults to \"little\".\n-    pub endian: String,\n+    /// Used as the `target_endian` `cfg` variable. Defaults to little endian.\n+    pub endian: Endian,\n     /// Width of c_int type. Defaults to \"32\".\n     pub c_int_width: String,\n     /// OS name to use for conditional compilation (`target_os`). Defaults to \"none\".\n@@ -1010,7 +1011,7 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            endian: \"little\".to_string(),\n+            endian: Endian::Little,\n             c_int_width: \"32\".to_string(),\n             os: \"none\".to_string(),\n             env: String::new(),\n@@ -1439,8 +1440,10 @@ impl Target {\n             } );\n         }\n \n+        if let Some(s) = obj.find(\"target-endian\").and_then(Json::as_string) {\n+            base.endian = s.parse()?;\n+        }\n         key!(is_builtin, bool);\n-        key!(endian = \"target-endian\");\n         key!(c_int_width = \"target-c-int-width\");\n         key!(os);\n         key!(env);"}]}