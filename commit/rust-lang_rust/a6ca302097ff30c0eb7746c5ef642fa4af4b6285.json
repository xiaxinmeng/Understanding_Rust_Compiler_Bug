{"sha": "a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2EzMDIwOTdmZjMwYzBlYjc3NDZjNWVmNjQyZmE0YWY0YjYyODU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-28T20:50:24Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-28T20:50:24Z"}, "message": "add comments", "tree": {"sha": "33ee94570c1e453a5be7330629ec055a6ad848ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ee94570c1e453a5be7330629ec055a6ad848ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "html_url": "https://github.com/rust-lang/rust/commit/a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca302097ff30c0eb7746c5ef642fa4af4b6285/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac976861d68c9e00bb844c0feadbe1ce882d5e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac976861d68c9e00bb844c0feadbe1ce882d5e6", "html_url": "https://github.com/rust-lang/rust/commit/3ac976861d68c9e00bb844c0feadbe1ce882d5e6"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "55a2c281403b776c51e1cceef2b8432f11825ff0", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6ca302097ff30c0eb7746c5ef642fa4af4b6285/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ca302097ff30c0eb7746c5ef642fa4af4b6285/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "patch": "@@ -304,7 +304,11 @@ fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         scx.tcx().hir.krate().visit_all_item_likes(&mut visitor);\n     }\n \n+    // We can only translate items that are instantiable - items all of\n+    // whose predicates hold. Luckily, items that aren't instantiable\n+    // can't actually be used, so we can just skip translating them.\n     roots.retain(|root| root.is_instantiable(scx.tcx()));\n+\n     roots\n }\n "}, {"sha": "192e23a66a1d4d2a51ad4f27c9228b5c2a01e46c", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6ca302097ff30c0eb7746c5ef642fa4af4b6285/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ca302097ff30c0eb7746c5ef642fa4af4b6285/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=a6ca302097ff30c0eb7746c5ef642fa4af4b6285", "patch": "@@ -253,6 +253,29 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n     /// Returns whether this instance is instantiable - whether it has no unsatisfied\n     /// predicates.\n+    ///\n+    /// In order to translate an item, all of its predicates must hold, because\n+    /// otherwise the item does not make sense. Type-checking ensures that\n+    /// the predicates of every item that is *used by* a valid item *do*\n+    /// hold, so we can rely on that.\n+    ///\n+    /// However, we translate collector roots (reachable items) and functions\n+    /// in vtables when they are seen, even if they are not used, and so they\n+    /// might not be instantiable. For example, a programmer can define this\n+    /// public function:\n+    ///\n+    ///     pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n+    ///         <&mut () as Clone>::clone(&s);\n+    ///     }\n+    ///\n+    /// That function can't be translated, because the method `<&mut () as Clone>::clone`\n+    /// does not exist. Luckily for us, that function can't ever be used,\n+    /// because that would require for `&'a mut (): Clone` to hold, so we\n+    /// can just not emit any code, or even a linker reference for it.\n+    ///\n+    /// Similarly, if a vtable method has such a signature, and therefore can't\n+    /// be used, we can just not emit it and have a placeholder (a null pointer,\n+    /// which will never be accessed) in its place.\n     pub fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n         debug!(\"is_instantiable({:?})\", self);\n         let (def_id, substs) = match *self {"}]}