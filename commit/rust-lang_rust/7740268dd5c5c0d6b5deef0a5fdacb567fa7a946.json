{"sha": "7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NDAyNjhkZDVjNWMwZDZiNWRlZWYwYTVmZGFjYjU2N2ZhN2E5NDY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T22:08:23Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T22:08:23Z"}, "message": "Reimplement crate-local function calls.", "tree": {"sha": "f1fb1d8f2d8234c920394354f342b8b0c023a9a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fb1d8f2d8234c920394354f342b8b0c023a9a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "html_url": "https://github.com/rust-lang/rust/commit/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "373f8a7a87c069f18b623cd5cb2eca8f83eb865a", "url": "https://api.github.com/repos/rust-lang/rust/commits/373f8a7a87c069f18b623cd5cb2eca8f83eb865a", "html_url": "https://github.com/rust-lang/rust/commit/373f8a7a87c069f18b623cd5cb2eca8f83eb865a"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "b364e7286971f892897038b9846f8a52d2dd369f", "filename": "src/interpreter.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         }\n     }\n \n-    fn push_stack_frame(&mut self, mir: &'a mir::Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n+    fn push_stack_frame(&mut self, mir: &'a mir::Mir<'tcx>, args: &[mir::Operand<'tcx>],\n                         return_ptr: Option<Pointer>) -> EvalResult<()> {\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n@@ -132,7 +132,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         // TODO(tsion): Deallocate local variables.\n     }\n \n-    fn call(&mut self, mir: &'a mir::Mir<'tcx>, args: &[&mir::Operand<'tcx>],\n+    fn call(&mut self, mir: &'a mir::Mir<'tcx>, args: &[mir::Operand<'tcx>],\n             return_ptr: Option<Pointer>) -> EvalResult<()> {\n         try!(self.push_stack_frame(mir, args, return_ptr));\n         let mut current_block = mir::START_BLOCK;\n@@ -188,42 +188,44 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                     current_block = targets[discr_val.to_int() as usize];\n                 }\n \n-                // Call { ref func, ref args, ref destination, .. } => {\n-                //     use rustc::middle::cstore::CrateStore;\n-                //     let ptr = destination.as_ref().map(|&(ref lv, _)| self.lvalue_to_ptr(lv));\n-                //     let func_val = self.operand_to_ptr(func);\n-\n-                //     if let Value::Func(def_id) = func_val {\n-                //         let mir_data;\n-                //         let mir = match self.tcx.map.as_local_node_id(def_id) {\n-                //             Some(node_id) => self.mir_map.map.get(&node_id).unwrap(),\n-                //             None => {\n-                //                 let cstore = &self.tcx.sess.cstore;\n-                //                 mir_data = cstore.maybe_get_item_mir(self.tcx, def_id).unwrap();\n-                //                 &mir_data\n-                //             }\n-                //         };\n-\n-                //         let arg_vals: Vec<Value> =\n-                //             args.iter().map(|arg| self.operand_to_ptr(arg)).collect();\n-\n-                //         self.call(mir, &arg_vals, ptr);\n-\n-                //         if let Some((_, target)) = *destination {\n-                //             current_block = target;\n-                //         }\n-                //     } else {\n-                //         panic!(\"tried to call a non-function value: {:?}\", func_val);\n-                //     }\n-                // }\n+                Call { ref func, ref args, ref destination, .. } => {\n+                    let ptr = match *destination {\n+                        Some((ref lv, _)) => Some(try!(self.eval_lvalue(lv)).0),\n+                        None => None,\n+                    };\n+                    let func_ty = self.current_frame().mir.operand_ty(self.tcx, func);\n+\n+                    match func_ty.sty {\n+                        ty::TyFnDef(def_id, _, _) => {\n+                            // let mir_data;\n+                            let mir = match self.tcx.map.as_local_node_id(def_id) {\n+                                Some(node_id) => self.mir_map.map.get(&node_id).unwrap(),\n+                                None => {\n+                                    unimplemented!()\n+                                    // use rustc::middle::cstore::CrateStore;\n+                                    // let cs = &self.tcx.sess.cstore;\n+                                    // mir_data = cs.maybe_get_item_mir(self.tcx, def_id).unwrap();\n+                                    // &mir_data\n+                                }\n+                            };\n+\n+                            try!(self.call(mir, args, ptr));\n+                        }\n+\n+                        _ => panic!(\"can't handle callee of type {:?}\", func_ty),\n+                    }\n+\n+                    if let Some((_, target)) = *destination {\n+                        current_block = target;\n+                    }\n+                }\n \n                 Drop { target, .. } => {\n                     // TODO: Handle destructors and dynamic drop.\n                     current_block = target;\n                 }\n \n                 Resume => unimplemented!(),\n-                _ => unimplemented!(),\n             }\n         }\n "}, {"sha": "d56349ddf73b37f956ec40a51d70de9b3c5669c7", "filename": "test/calls.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946/test%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7740268dd5c5c0d6b5deef0a5fdacb567fa7a946/test%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fcalls.rs?ref=7740268dd5c5c0d6b5deef0a5fdacb567fa7a946", "patch": "@@ -1,27 +1,25 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n-// #[miri_run(expected = \"Int(2)\")]\n-// fn call() -> i64 {\n-//     fn increment(x: i64) -> i64 {\n-//         x + 1\n-//     }\n+#[miri_run]\n+fn call() -> i32 {\n+    fn increment(x: i32) -> i32 {\n+        x + 1\n+    }\n+    increment(1)\n+}\n \n-//     increment(1)\n-// }\n-\n-// #[miri_run(expected = \"Int(3628800)\")]\n-// fn factorial_recursive() -> i64 {\n-//     fn fact(n: i64) -> i64 {\n-//         if n == 0 {\n-//             1\n-//         } else {\n-//             n * fact(n - 1)\n-//         }\n-//     }\n-\n-//     fact(10)\n-// }\n+#[miri_run]\n+fn factorial_recursive() -> i64 {\n+    fn fact(n: i64) -> i64 {\n+        if n == 0 {\n+            1\n+        } else {\n+            n * fact(n - 1)\n+        }\n+    }\n+    fact(10)\n+}\n \n // Test calling a very simple function from the standard library.\n // #[miri_run(expected = \"Int(1)\")]"}]}