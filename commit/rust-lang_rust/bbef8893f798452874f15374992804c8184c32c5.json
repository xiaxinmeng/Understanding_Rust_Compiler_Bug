{"sha": "bbef8893f798452874f15374992804c8184c32c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZWY4ODkzZjc5ODQ1Mjg3NGYxNTM3NDk5MjgwNGM4MTg0YzMyYzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:11:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:42:21Z"}, "message": "rollup merge of #27676: alexcrichton/msvc-unwind\n\nThis commit leverages the runtime support for DWARF exception info added\nin #27210 to enable unwinding by default on 64-bit MSVC. This also additionally\nadds a few minor fixes here and there in the test harness and such to get\n`make check` entirely passing on 64-bit MSVC:\n\n* The invocation of `maketest.py` now works with spaces/quotes in CC\n* debuginfo tests are disabled on MSVC\n* A link error for librustc was hacked around (see #27438)", "tree": {"sha": "1812eacb670c43d35cbe6d5b5a522c3f4ae63362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1812eacb670c43d35cbe6d5b5a522c3f4ae63362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbef8893f798452874f15374992804c8184c32c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbef8893f798452874f15374992804c8184c32c5", "html_url": "https://github.com/rust-lang/rust/commit/bbef8893f798452874f15374992804c8184c32c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbef8893f798452874f15374992804c8184c32c5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00ac2c0550d98609c813da07ac400eaa4aaf1730", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ac2c0550d98609c813da07ac400eaa4aaf1730", "html_url": "https://github.com/rust-lang/rust/commit/00ac2c0550d98609c813da07ac400eaa4aaf1730"}, {"sha": "b6b4f5a0e7a98d918d7c5a56e291c0063f257f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b4f5a0e7a98d918d7c5a56e291c0063f257f1e", "html_url": "https://github.com/rust-lang/rust/commit/b6b4f5a0e7a98d918d7c5a56e291c0063f257f1e"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "f91828838a8ea6b1b4a66eab2fafb9d6591d15d4", "filename": "mk/tests.mk", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -597,6 +597,10 @@ CTEST_DISABLE_debuginfo-gdb =\n CTEST_DISABLE_debuginfo-lldb = \"lldb tests are disabled on android\"\n endif\n \n+ifeq ($(findstring msvc,$(CFG_TARGET)),msvc)\n+CTEST_DISABLE_debuginfo-gdb = \"gdb tests are disabled on MSVC\"\n+endif\n+\n # CTEST_DISABLE_NONSELFHOST_$(TEST_GROUP), if set, will cause that\n # test group to be disabled *unless* the target is able to build a\n # compiler (i.e. when the target triple is in the set of of host\n@@ -1050,7 +1054,8 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n         $$(MAKE) \\\n \t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t    $(3)/test/run-make/$$* \\\n-\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\" \\\n+\t    $$(CC_$(3)) \\\n+\t    \"$$(CFG_GCCISH_CFLAGS_$(3))\" \\\n \t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t    \"$$(TESTNAME)\" \\\n \t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\"}, {"sha": "04bf81a96aaf3ab09d6389712645c05228e6ddf2", "filename": "src/etc/maketest.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -41,14 +41,14 @@ def convert_path_spec(name, value):\n make = sys.argv[2]\n putenv('RUSTC', os.path.abspath(sys.argv[3]))\n putenv('TMPDIR', os.path.abspath(sys.argv[4]))\n-putenv('CC', sys.argv[5])\n-putenv('RUSTDOC', os.path.abspath(sys.argv[6]))\n-filt = sys.argv[7]\n-putenv('LD_LIB_PATH_ENVVAR', sys.argv[8])\n-putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[9]))\n-putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[10]))\n-putenv('RUST_BUILD_STAGE', sys.argv[11])\n-putenv('S', os.path.abspath(sys.argv[12]))\n+putenv('CC', sys.argv[5] + ' ' + sys.argv[6])\n+putenv('RUSTDOC', os.path.abspath(sys.argv[7]))\n+filt = sys.argv[8]\n+putenv('LD_LIB_PATH_ENVVAR', sys.argv[9])\n+putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[10]))\n+putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[11]))\n+putenv('RUST_BUILD_STAGE', sys.argv[12])\n+putenv('S', os.path.abspath(sys.argv[13]))\n putenv('PYTHON', sys.executable)\n \n if filt not in sys.argv[1]:"}, {"sha": "6b53f835be59218b3405b6b5c75a9323bfa01654", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -179,5 +179,18 @@ mod rustc {\n     pub use lint;\n }\n \n+// FIXME(#27438): right now the unit tests of librustc don't refer to any actual\n+//                functions generated in librustc_data_structures (all\n+//                references are through generic functions), but statics are\n+//                referenced from time to time. Due to this bug we won't\n+//                actually correctly link in the statics unless we also\n+//                reference a function, so be sure to reference a dummy\n+//                function.\n+#[test]\n+fn noop() {\n+    rustc_data_structures::__noop_fix_for_27438();\n+}\n+\n+\n // Build the diagnostics array at the end so that the metadata includes error use sites.\n __build_diagnostic_array! { librustc, DIAGNOSTICS }"}, {"sha": "85756db96061fc81f8b1fa227f33ab37e207c863", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -13,6 +13,7 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n+    base.custom_unwind_resume = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "897a05952e64f8c5df1445cfb6508b2c16e26f82", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -38,3 +38,7 @@ pub mod graph;\n pub mod bitvec;\n pub mod ivar;\n pub mod unify;\n+\n+// See comments in src/librustc/lib.rs\n+#[doc(hidden)]\n+pub fn __noop_fix_for_27438() {}"}, {"sha": "947c902b2a91b392d2750c0ccc50f9daca506ca6", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -745,13 +745,22 @@ pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n+/// Returns whether this session's target will use SEH-based unwinding.\n+///\n+/// This is only true for MSVC targets, and even then the 64-bit MSVC target\n+/// currently uses SEH-ish unwinding with DWARF info tables to the side (same as\n+/// 64-bit MinGW) instead of \"full SEH\".\n+pub fn wants_msvc_seh(sess: &Session) -> bool {\n+    sess.target.target.options.is_like_msvc && sess.target.target.arch == \"x86\"\n+}\n+\n pub fn need_invoke(bcx: Block) -> bool {\n-    // FIXME(#25869) currently unwinding is not implemented for MSVC and our\n-    //               normal unwinding infrastructure ends up just causing linker\n-    //               errors with the current LLVM implementation, so landing\n-    //               pads are disabled entirely for MSVC targets\n-    if bcx.sess().no_landing_pads() ||\n-       bcx.sess().target.target.options.is_like_msvc {\n+    // FIXME(#25869) currently SEH-based unwinding is pretty buggy in LLVM and\n+    //               is being overhauled as this is being written. Until that\n+    //               time such that upstream LLVM's implementation is more solid\n+    //               and we start binding it we need to skip invokes for any\n+    //               target which wants SEH-based unwinding.\n+    if bcx.sess().no_landing_pads() || wants_msvc_seh(bcx.sess()) {\n         return false;\n     }\n "}, {"sha": "98301221f96e8aa803e5c6589fec557736f48a7f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         // landing pads as \"landing pads for SEH\".\n         let target = &self.ccx.sess().target.target;\n         match self.ccx.tcx().lang_items.eh_personality() {\n-            Some(def_id) if !target.options.is_like_msvc => {\n+            Some(def_id) if !base::wants_msvc_seh(self.ccx.sess()) => {\n                 callee::trans_fn_ref(self.ccx, def_id, ExprId(0),\n                                      self.param_substs).val\n             }\n@@ -604,7 +604,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n                 match *personality {\n                     Some(llpersonality) => llpersonality,\n                     None => {\n-                        let name = if !target.options.is_like_msvc {\n+                        let name = if !base::wants_msvc_seh(self.ccx.sess()) {\n                             \"rust_eh_personality\"\n                         } else if target.arch == \"x86\" {\n                             \"_except_handler3\""}, {"sha": "293a0a6a4ca084cc1e30051c714ad6995add355e", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -1037,7 +1037,7 @@ fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         Call(bcx, func, &[data], None, dloc);\n         Store(bcx, C_null(Type::i8p(bcx.ccx())), dest);\n         bcx\n-    } else if bcx.sess().target.target.options.is_like_msvc {\n+    } else if wants_msvc_seh(bcx.sess()) {\n         trans_msvc_try(bcx, func, data, dest, dloc)\n     } else {\n         trans_gnu_try(bcx, func, data, dest, dloc)"}, {"sha": "4feb2d49a98ba8b27dec53c3cfbdb25af005560d", "filename": "src/libstd/rt/unwind/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fmod.rs?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -77,18 +77,18 @@ use sys_common::mutex::Mutex;\n // implementations. One goes through SEH on Windows and the other goes through\n // libgcc via the libunwind-like API.\n \n-// *-pc-windows-msvc\n-#[cfg(all(windows, target_env = \"msvc\"))]\n+// i686-pc-windows-msvc\n+#[cfg(all(windows, target_arch = \"x86\", target_env = \"msvc\"))]\n #[path = \"seh.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-// x86_64-pc-windows-gnu\n-#[cfg(all(windows, target_arch=\"x86_64\", target_env=\"gnu\"))]\n+// x86_64-pc-windows-*\n+#[cfg(all(windows, target_arch = \"x86_64\"))]\n #[path = \"seh64_gnu.rs\"] #[doc(hidden)]\n pub mod imp;\n \n // i686-pc-windows-gnu and all others\n-#[cfg(any(unix, all(windows, target_arch=\"x86\", target_env=\"gnu\")))]\n+#[cfg(any(unix, all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"] #[doc(hidden)]\n pub mod imp;\n "}]}