{"sha": "9b882197233c06454e376fd80adca7f4a80264ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODgyMTk3MjMzYzA2NDU0ZTM3NmZkODBhZGNhN2Y0YTgwMjY0Y2E=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-01T22:38:25Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-06T13:00:13Z"}, "message": "Don't attach def ids to types when the type already contains the def id", "tree": {"sha": "3d2fba4f3bada2416a2b04df4f2e4b69526c6feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2fba4f3bada2416a2b04df4f2e4b69526c6feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b882197233c06454e376fd80adca7f4a80264ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b882197233c06454e376fd80adca7f4a80264ca", "html_url": "https://github.com/rust-lang/rust/commit/9b882197233c06454e376fd80adca7f4a80264ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b882197233c06454e376fd80adca7f4a80264ca/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc99ce5bdd64942736e9db24244f2edded69610a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc99ce5bdd64942736e9db24244f2edded69610a", "html_url": "https://github.com/rust-lang/rust/commit/cc99ce5bdd64942736e9db24244f2edded69610a"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "33be02a1586b4c37f4a4188ce084aa19b66aea00", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b882197233c06454e376fd80adca7f4a80264ca/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b882197233c06454e376fd80adca7f4a80264ca/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=9b882197233c06454e376fd80adca7f4a80264ca", "patch": "@@ -463,31 +463,22 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n       ast::item_res(decl, tps, _, _, _) {\n         let {bounds, params} = mk_ty_params(tcx, tps);\n         let t_arg = ty_of_arg(tcx, mode, decl.inputs[0]);\n-        let t = {\n-            let t0 = ty::mk_res(tcx, local_def(it.id), t_arg.ty, params);\n-            ty::mk_with_id(tcx, t0, def_id)\n-        };\n+        let t = ty::mk_res(tcx, local_def(it.id), t_arg.ty, params);\n         let t_res = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), t_res);\n         ret t_res;\n       }\n       ast::item_enum(_, tps) {\n         // Create a new generic polytype.\n         let {bounds, params} = mk_ty_params(tcx, tps);\n-        let t = {\n-            let t0 = ty::mk_enum(tcx, local_def(it.id), params);\n-            ty::mk_with_id(tcx, t0, def_id)\n-        };\n+        let t = ty::mk_enum(tcx, local_def(it.id), params);\n         let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n       ast::item_iface(tps, ms) {\n         let {bounds, params} = mk_ty_params(tcx, tps);\n-        let t = {\n-            let t0 = ty::mk_iface(tcx, local_def(it.id), params);\n-            ty::mk_with_id(tcx, t0, def_id)\n-        };\n+        let t = ty::mk_iface(tcx, local_def(it.id), params);\n         let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n@@ -920,7 +911,6 @@ mod collect {\n             let def_id = local_def(it.id);\n             let t_arg = ty_of_arg(tcx, m_collect, decl.inputs[0]);\n             let t_res = ty::mk_res(tcx, def_id, t_arg.ty, params);\n-            let t_res = ty::mk_with_id(tcx, t_res, def_id);\n             let t_ctor = ty::mk_fn(tcx, {\n                 proto: ast::proto_box,\n                 inputs: [{mode: ast::expl(ast::by_copy) with t_arg}],"}, {"sha": "9ebcce1b9a86146517416aa6a694228c5ba237ec", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b882197233c06454e376fd80adca7f4a80264ca/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b882197233c06454e376fd80adca7f4a80264ca/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=9b882197233c06454e376fd80adca7f4a80264ca", "patch": "@@ -123,9 +123,6 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       }\n       ty_enum(did, tps) | ty_res(did, _, tps) | ty_iface(did, tps) |\n       ty_class(did, tps) {\n-        // Not sure why, but under some circumstances enum or resource types\n-        // do not have an associated id.  I didn't investigate enough to know\n-        // if there is a good reason for this. - Niko, 2012-02-10\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path);\n         parameterized(cx, base, tps)"}]}