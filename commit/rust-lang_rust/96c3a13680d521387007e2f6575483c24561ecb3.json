{"sha": "96c3a13680d521387007e2f6575483c24561ecb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzNhMTM2ODBkNTIxMzg3MDA3ZTJmNjU3NTQ4M2MyNDU2MWVjYjM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-23T19:47:04Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-07T05:36:07Z"}, "message": "sync: Add is_poisoned to Mutex and RwLock", "tree": {"sha": "67b3c14eb0ed9c19614efdbaa3c141891430616a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b3c14eb0ed9c19614efdbaa3c141891430616a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c3a13680d521387007e2f6575483c24561ecb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c3a13680d521387007e2f6575483c24561ecb3", "html_url": "https://github.com/rust-lang/rust/commit/96c3a13680d521387007e2f6575483c24561ecb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c3a13680d521387007e2f6575483c24561ecb3/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebf9bc5c22155d622537ded42b4ebf94238b296", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebf9bc5c22155d622537ded42b4ebf94238b296", "html_url": "https://github.com/rust-lang/rust/commit/7ebf9bc5c22155d622537ded42b4ebf94238b296"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "74692c1273c2790130597171adfc86a679cd6e8f", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96c3a13680d521387007e2f6575483c24561ecb3/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c3a13680d521387007e2f6575483c24561ecb3/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=96c3a13680d521387007e2f6575483c24561ecb3", "patch": "@@ -228,6 +228,17 @@ impl<T: Send> Mutex<T> {\n             Err(TryLockError::WouldBlock)\n         }\n     }\n+\n+    /// Determine whether the lock is poisoned.\n+    ///\n+    /// If another thread is active, the lock can still become poisoned at any\n+    /// time.  You should not trust a `false` value for program correctness\n+    /// without additional synchronization.\n+    #[inline]\n+    #[unstable(feature = \"std_misc\")]\n+    pub fn is_poisoned(&self) -> bool {\n+        self.inner.poison.get()\n+    }\n }\n \n #[unsafe_destructor]\n@@ -458,12 +469,14 @@ mod test {\n     #[test]\n     fn test_mutex_arc_poison() {\n         let arc = Arc::new(Mutex::new(1));\n+        assert!(!arc.is_poisoned());\n         let arc2 = arc.clone();\n         let _ = Thread::scoped(move|| {\n             let lock = arc2.lock().unwrap();\n             assert_eq!(*lock, 2);\n         }).join();\n         assert!(arc.lock().is_err());\n+        assert!(arc.is_poisoned());\n     }\n \n     #[test]"}, {"sha": "c4f1f2ccadddd034038a3e62c77d3e991c642e14", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96c3a13680d521387007e2f6575483c24561ecb3/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c3a13680d521387007e2f6575483c24561ecb3/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=96c3a13680d521387007e2f6575483c24561ecb3", "patch": "@@ -237,6 +237,17 @@ impl<T: Send + Sync> RwLock<T> {\n             Err(TryLockError::WouldBlock)\n         }\n     }\n+\n+    /// Determine whether the lock is poisoned.\n+    ///\n+    /// If another thread is active, the lock can still become poisoned at any\n+    /// time.  You should not trust a `false` value for program correctness\n+    /// without additional synchronization.\n+    #[inline]\n+    #[unstable(feature = \"std_misc\")]\n+    pub fn is_poisoned(&self) -> bool {\n+        self.inner.poison.get()\n+    }\n }\n \n #[unsafe_destructor]\n@@ -451,12 +462,14 @@ mod tests {\n     #[test]\n     fn test_rw_arc_poison_ww() {\n         let arc = Arc::new(RwLock::new(1));\n+        assert!(!arc.is_poisoned());\n         let arc2 = arc.clone();\n         let _: Result<uint, _> = Thread::scoped(move|| {\n             let _lock = arc2.write().unwrap();\n             panic!();\n         }).join();\n         assert!(arc.write().is_err());\n+        assert!(arc.is_poisoned());\n     }\n \n     #[test]"}]}