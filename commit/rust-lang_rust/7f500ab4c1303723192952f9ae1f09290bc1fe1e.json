{"sha": "7f500ab4c1303723192952f9ae1f09290bc1fe1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTAwYWI0YzEzMDM3MjMxOTI5NTJmOWFlMWYwOTI5MGJjMWZlMWU=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-12T07:09:53Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-12T08:03:34Z"}, "message": "Keep everything tidy.", "tree": {"sha": "57b72b84cf4d8ca50b3d8f0ec903894522cc4e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57b72b84cf4d8ca50b3d8f0ec903894522cc4e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f500ab4c1303723192952f9ae1f09290bc1fe1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f500ab4c1303723192952f9ae1f09290bc1fe1e", "html_url": "https://github.com/rust-lang/rust/commit/7f500ab4c1303723192952f9ae1f09290bc1fe1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f500ab4c1303723192952f9ae1f09290bc1fe1e/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa734d6a1946e526832bb602e1bb271bf26c0b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa734d6a1946e526832bb602e1bb271bf26c0b1", "html_url": "https://github.com/rust-lang/rust/commit/5aa734d6a1946e526832bb602e1bb271bf26c0b1"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "445cab4ba95fd4b94e9f21880551f24a8cdeb0f7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7f500ab4c1303723192952f9ae1f09290bc1fe1e", "patch": "@@ -2303,7 +2303,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n-      ast::expr_inline_asm(*) => { \n+      ast::expr_inline_asm(*) => {\n           fcx.require_unsafe(expr.span, ~\"use of inline assembly\");\n           fcx.write_nil(id);\n       }"}, {"sha": "7b4b382393f6ce794181a36723bcc1be95cf6df4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7f500ab4c1303723192952f9ae1f09290bc1fe1e", "patch": "@@ -600,7 +600,7 @@ pub enum expr_ {\n     expr_again(Option<ident>),\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n-    \n+\n     /* asm, clobbers + constraints, volatile */\n     expr_inline_asm(@~str, @~str, bool),\n "}, {"sha": "3f1aea59ab502439ab6131c6e19335b412564d3a", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f500ab4c1303723192952f9ae1f09290bc1fe1e/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=7f500ab4c1303723192952f9ae1f09290bc1fe1e", "patch": "@@ -55,7 +55,6 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n \n     let mut state = Asm;\n     loop outer: {\n-        \n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n@@ -65,11 +64,11 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n                 while *p.token != token::EOF &&\n                       *p.token != token::COLON &&\n                       *p.token != token::MOD_SEP {\n-                    \n+\n                     if outputs.len() != 0 {\n                         p.eat(&token::COMMA);\n                     }\n-                    \n+\n                     let constraint = p.parse_str();\n                     p.expect(&token::LPAREN);\n                     let out = p.parse_expr();\n@@ -82,11 +81,11 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n                 while *p.token != token::EOF &&\n                       *p.token != token::COLON &&\n                       *p.token != token::MOD_SEP {\n-                    \n+\n                     if inputs.len() != 0 {\n                         p.eat(&token::COMMA);\n                     }\n-                    \n+\n                     let constraint = p.parse_str();\n                     p.expect(&token::LPAREN);\n                     let in = p.parse_expr();\n@@ -100,11 +99,11 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n                 while *p.token != token::EOF &&\n                       *p.token != token::COLON &&\n                       *p.token != token::MOD_SEP {\n-                    \n+\n                     if clobs.len() != 0 {\n                         p.eat(&token::COMMA);\n                     }\n-                    \n+\n                     let clob = ~\"~{\" + *p.parse_str() + ~\"}\";\n                     clobs.push(clob);\n                 }\n@@ -113,7 +112,7 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n             }\n             Options => {\n                 let option = *p.parse_str();\n-                \n+\n                 if option == ~\"volatile\" {\n                     volatile = true;\n                 }\n@@ -146,7 +145,7 @@ pub fn expand_asm(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n             } else if *p.token == token::EOF {\n                 break outer;\n             } else {\n-               state \n+               state\n             };\n         }\n     }"}]}