{"sha": "8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjE5N2YzOWY3ZDQ2OGRmYzViMmJkNDFkYWU0NzY5OTkyYTJmODM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T01:17:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T13:55:32Z"}, "message": "Remove `#![feature(never_type)]` from tests.\n\nAlso remove `never_type` the feature-gate test.", "tree": {"sha": "3719895c5a9bed6ef713cb4009161ae9fc3f5305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3719895c5a9bed6ef713cb4009161ae9fc3f5305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "html_url": "https://github.com/rust-lang/rust/commit/8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "html_url": "https://github.com/rust-lang/rust/commit/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1"}], "stats": {"total": 407, "additions": 130, "deletions": 277}, "files": [{"sha": "7e00dc5463f6852cbfce901200c5f57cead33b95", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -12,8 +12,6 @@\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Placeholder\",{{.*}}extraData: i64 4294967295{{[,)].*}}\n // CHECK: {{.*}}DIDerivedType{{.*}}tag: DW_TAG_member,{{.*}}name: \"Error\",{{.*}}extraData: i64 0{{[,)].*}}\n \n-#![feature(never_type)]\n-\n #[derive(Copy, Clone)]\n pub struct Entity {\n     private: std::num::NonZeroU32,"}, {"sha": "409be8587cf0fbed0f9eb4fb5a1868ae86a9910c", "filename": "src/test/mir-opt/uninhabited-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n pub enum Void {}\n \n #[no_mangle]"}, {"sha": "408e55f890317794d7b01031c02fc8aba6debf5d", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -21,5 +21,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n }"}, {"sha": "f85c8a1a515a5edb6e6fb97b904b99beb4bfd729", "filename": "src/test/ui/associated-types/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): Add<A>` is not satisfied\n+error[E0277]: the trait bound `!: Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:23:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `()`\n+   |           ^ the trait `Add<A>` is not implemented for `!`\n \n error: aborting due to previous error\n "}, {"sha": "facb70d1253a8eff2670499dec114af19b2ea0ae", "filename": "src/test/ui/binding/empty-types-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fempty-types-in-patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]"}, {"sha": "52b2e70d159a953c64d9e52bed99958f90ae9f18", "filename": "src/test/ui/borrowck/assign-never-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign-never-type.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n pub fn main() {\n     loop {\n         match None {"}, {"sha": "7aa5682b923a67318a00403b6480741400d85b9f", "filename": "src/test/ui/break-while-condition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn main() {\n     // The `if false` expressions are simply to\n     // make sure we don't avoid checking everything"}, {"sha": "bae3b6765e21b8ce7016a1c399093b0fa36a35e7", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:9:20\n+  --> $DIR/break-while-condition.rs:7:20\n    |\n LL |           let _: ! = {\n    |  ____________________^\n@@ -11,7 +11,7 @@ LL | |         };\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:16:13\n+  --> $DIR/break-while-condition.rs:14:13\n    |\n LL | /             while false {\n LL | |                 break\n@@ -22,7 +22,7 @@ LL | |             }\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:24:13\n+  --> $DIR/break-while-condition.rs:22:13\n    |\n LL | /             while false {\n LL | |                 return"}, {"sha": "b71c3663a4f630f759c33fbf3c098d4217d60c75", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(never_type)]\n #![allow(unreachable_code)]\n \n use std::error::Error;"}, {"sha": "ea1384a1dab55de5c766d5cd938f0d83838f2f09", "filename": "src/test/ui/coercion/coerce-to-bang-cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn cast_a() {"}, {"sha": "0e17f32511f8209b7b28c47b4c1f4b4c4e707ae3", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,13 +1,13 @@\n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:6:13\n+  --> $DIR/coerce-to-bang-cast.rs:4:13\n    |\n LL |     let y = {return; 22} as !;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error[E0605]: non-primitive cast: `i32` as `!`\n-  --> $DIR/coerce-to-bang-cast.rs:11:13\n+  --> $DIR/coerce-to-bang-cast.rs:9:13\n    |\n LL |     let y = 22 as !;\n    |             ^^^^^^^"}, {"sha": "d52f79fbb7a989e2e023a6b2d25c46f99eab1503", "filename": "src/test/ui/coercion/coerce-to-bang.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {"}, {"sha": "b6fd5bf43abf207c6ae0ce4683eaff34fa1477ed", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:6:17\n+  --> $DIR/coerce-to-bang.rs:4:17\n    |\n LL |     foo(return, 22, 44);\n    |                 ^^ expected !, found integer\n@@ -8,7 +8,7 @@ LL |     foo(return, 22, 44);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:18:13\n+  --> $DIR/coerce-to-bang.rs:16:13\n    |\n LL |     foo(22, 44, return);\n    |             ^^ expected !, found integer\n@@ -17,7 +17,7 @@ LL |     foo(22, 44, return);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:26:12\n+  --> $DIR/coerce-to-bang.rs:24:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n    |            ^ expected !, found integer\n@@ -26,7 +26,7 @@ LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverg\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:36:12\n+  --> $DIR/coerce-to-bang.rs:34:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n@@ -35,7 +35,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:45:12\n+  --> $DIR/coerce-to-bang.rs:43:12\n    |\n LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n@@ -44,7 +44,7 @@ LL |     foo(a, b, c);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:50:21\n+  --> $DIR/coerce-to-bang.rs:48:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n    |                     ^^^^^^^^^^^^ expected !, found integer\n@@ -53,7 +53,7 @@ LL |     let x: [!; 2] = [return, 22];\n               found type `[{integer}; 2]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:55:22\n+  --> $DIR/coerce-to-bang.rs:53:22\n    |\n LL |     let x: [!; 2] = [22, return];\n    |                      ^^ expected !, found integer\n@@ -62,7 +62,7 @@ LL |     let x: [!; 2] = [22, return];\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:60:37\n+  --> $DIR/coerce-to-bang.rs:58:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, 66);\n    |                                     ^^ expected !, found integer\n@@ -71,7 +71,7 @@ LL |     let x: (usize, !, usize) = (22, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:65:41\n+  --> $DIR/coerce-to-bang.rs:63:41\n    |\n LL |     let x: (usize, !, usize) = (return, 44, 66);\n    |                                         ^^ expected !, found integer\n@@ -80,7 +80,7 @@ LL |     let x: (usize, !, usize) = (return, 44, 66);\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-to-bang.rs:76:37\n+  --> $DIR/coerce-to-bang.rs:74:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, return);\n    |                                     ^^ expected !, found integer"}, {"sha": "1270dc4ee30e6ff78b7848cef0607026a3c987c5", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_deref, never_type)]\n+#![feature(const_raw_ptr_deref)]\n \n const FOO: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior\n "}, {"sha": "38702f8d28f900a11c12b2cf34928e79a51ac764", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n enum Helper<T, U> {\n     T(T, [!; 0]),\n     #[allow(dead_code)]"}, {"sha": "defcd256f7d982b6aa51a51daa7138e5d7772672", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n-  --> $DIR/empty-never-array.rs:10:9\n+  --> $DIR/empty-never-array.rs:8:9\n    |\n LL | / enum Helper<T, U> {\n LL | |     T(T, [!; 0]),\n@@ -20,7 +20,7 @@ LL |     if let Helper::U(u) = Helper::T(t, []) { /* */ }\n    |\n \n error[E0381]: use of possibly-uninitialized variable: `u`\n-  --> $DIR/empty-never-array.rs:12:5\n+  --> $DIR/empty-never-array.rs:10:5\n    |\n LL |     u\n    |     ^ use of possibly-uninitialized `u`"}, {"sha": "c27089d2a05906151f427574718eeb91b8dbc32f", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn foo() -> Result<u32, !> {\n     Ok(123)\n }"}, {"sha": "e599a9ee150f4ddc628027df2a27a93324b4d430", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:6:9\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered"}, {"sha": "be8c27dbb1b02d63c8720d45aa356986a3545bab", "filename": "src/test/ui/feature-gates/feature-gate-never_type.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -1,17 +0,0 @@\n-// Test that ! errors when used in illegal positions with feature(never_type) disabled\n-\n-trait Foo {\n-    type Wub;\n-}\n-\n-type Ma = (u32, !, i32); //~ ERROR type is experimental\n-type Meeshka = Vec<!>; //~ ERROR type is experimental\n-type Mow = &'static fn(!) -> !; //~ ERROR type is experimental\n-type Skwoz = &'static mut !; //~ ERROR type is experimental\n-\n-impl Foo for Meeshka {\n-    type Wub = !; //~ ERROR type is experimental\n-}\n-\n-fn main() {\n-}"}, {"sha": "d86ab99b82bd5bd79cc654b35c4ad105b82018f5", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -1,48 +0,0 @@\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:7:17\n-   |\n-LL | type Ma = (u32, !, i32);\n-   |                 ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:8:20\n-   |\n-LL | type Meeshka = Vec<!>;\n-   |                    ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:9:24\n-   |\n-LL | type Mow = &'static fn(!) -> !;\n-   |                        ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:10:27\n-   |\n-LL | type Skwoz = &'static mut !;\n-   |                           ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental\n-  --> $DIR/feature-gate-never_type.rs:13:16\n-   |\n-LL |     type Wub = !;\n-   |                ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n-   = help: add `#![feature(never_type)]` to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "29848bb0cedaa867b8efee471f6b8dc80c1572c0", "filename": "src/test/ui/for-loop-while/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-break-value.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(unreachable_code)]\n-#![feature(never_type)]\n \n #[allow(unused)]\n fn never_returns() {"}, {"sha": "8f59bab26d3ef11cff88ea37b10b5bbc88eb85ad", "filename": "src/test/ui/lint/must_use-unit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![deny(unused_must_use)]\n \n #[must_use]"}, {"sha": "a6d0259a081afb1671e2af514ced22845849610a", "filename": "src/test/ui/lint/must_use-unit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-unit.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,17 +1,17 @@\n error: unused return value of `foo` that must be used\n-  --> $DIR/must_use-unit.rs:13:5\n+  --> $DIR/must_use-unit.rs:12:5\n    |\n LL |     foo();\n    |     ^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/must_use-unit.rs:2:9\n+  --> $DIR/must_use-unit.rs:1:9\n    |\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n error: unused return value of `bar` that must be used\n-  --> $DIR/must_use-unit.rs:15:5\n+  --> $DIR/must_use-unit.rs:14:5\n    |\n LL |     bar();\n    |     ^^^^^^"}, {"sha": "ed2369fd650b0f45f228cf6e03dc995786a8f002", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,7 @@\n // This test checks that calling `mem::{uninitialized,zeroed}` with certain types results\n // in a lint.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![allow(deprecated)]\n #![deny(invalid_value)]\n "}, {"sha": "8d88aefdb51857ee7aab524ac375ac140b5a3f5d", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "8c4bcd3a9b73cf43e38f1461dd500239cf965087", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,13 +1,13 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/loop-break-value.rs:26:5\n+  --> $DIR/loop-break-value.rs:24:5\n    |\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:28:9\n+  --> $DIR/loop-break-value.rs:26:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -18,7 +18,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/loop-break-value.rs:30:13\n+  --> $DIR/loop-break-value.rs:28:13\n    |\n LL |             break 'while_loop 123;\n    |             ^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -29,7 +29,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:38:12\n+  --> $DIR/loop-break-value.rs:36:12\n    |\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -40,7 +40,7 @@ LL |         if break {\n    |            ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:43:9\n+  --> $DIR/loop-break-value.rs:41:9\n    |\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -51,7 +51,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while let` loop\n-  --> $DIR/loop-break-value.rs:49:13\n+  --> $DIR/loop-break-value.rs:47:13\n    |\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -62,7 +62,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:56:9\n+  --> $DIR/loop-break-value.rs:54:9\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -73,7 +73,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:57:9\n+  --> $DIR/loop-break-value.rs:55:9\n    |\n LL |         break [()];\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -84,7 +84,7 @@ LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:64:13\n+  --> $DIR/loop-break-value.rs:62:13\n    |\n LL |             break 'for_loop Some(17);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n@@ -95,7 +95,7 @@ LL |             break;\n    |             ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:4:31\n+  --> $DIR/loop-break-value.rs:2:31\n    |\n LL |     let val: ! = loop { break break; };\n    |                               ^^^^^ expected !, found ()\n@@ -104,7 +104,7 @@ LL |     let val: ! = loop { break break; };\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:11:19\n+  --> $DIR/loop-break-value.rs:9:19\n    |\n LL |             break 123;\n    |                   ^^^ expected &str, found integer\n@@ -113,7 +113,7 @@ LL |             break 123;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:16:15\n+  --> $DIR/loop-break-value.rs:14:15\n    |\n LL |         break \"asdf\";\n    |               ^^^^^^ expected i32, found reference\n@@ -122,7 +122,7 @@ LL |         break \"asdf\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:21:31\n+  --> $DIR/loop-break-value.rs:19:31\n    |\n LL |             break 'outer_loop \"nope\";\n    |                               ^^^^^^ expected i32, found reference\n@@ -131,7 +131,7 @@ LL |             break 'outer_loop \"nope\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:73:26\n+  --> $DIR/loop-break-value.rs:71:26\n    |\n LL |                 break 'c 123;\n    |                          ^^^ expected (), found integer\n@@ -140,7 +140,7 @@ LL |                 break 'c 123;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:80:15\n+  --> $DIR/loop-break-value.rs:78:15\n    |\n LL |         break (break, break);\n    |               ^^^^^^^^^^^^^^ expected (), found tuple\n@@ -149,7 +149,7 @@ LL |         break (break, break);\n               found type `(!, !)`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:85:15\n+  --> $DIR/loop-break-value.rs:83:15\n    |\n LL |         break 2;\n    |               ^ expected (), found integer\n@@ -158,7 +158,7 @@ LL |         break 2;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/loop-break-value.rs:90:9\n+  --> $DIR/loop-break-value.rs:88:9\n    |\n LL |         break;\n    |         ^^^^^"}, {"sha": "df7c45ad1d1c7c817c68dc93ffaa3cd5c7dae0ed", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n-#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "e4d15c8a17dfae0ba01f20432ed9a7028481319b", "filename": "src/test/ui/never_type/adjust_never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fadjust_never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x;"}, {"sha": "a2b44e91f11418de6dcdc4c9fc178969cc0c57a8", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,5 @@\n // Test that we can't pass other types for !\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "e5cbdcbe73bdeec5debc8826ce7e836dd1dfe81b", "filename": "src/test/ui/never_type/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg-wrong-type.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n+  --> $DIR/call-fn-never-arg-wrong-type.rs:8:9\n    |\n LL |     foo(\"wow\");\n    |         ^^^^^ expected !, found reference"}, {"sha": "55a7b79157a829cc98368dabb12693d79961c57f", "filename": "src/test/ui/never_type/call-fn-never-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcall-fn-never-arg.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "fbba114ab327487033ffb75593b1642398a635ca", "filename": "src/test/ui/never_type/cast-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fcast-never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: ! = panic!();\n     let y: u32 = x as u32;"}, {"sha": "714ef6adaf52bef9fa91e4fcba1457cc60108313", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,3 @@\n-// We need to opt into the `!` feature in order to trigger the\n-// requirement that this is testing.\n-#![feature(never_type)]\n-\n #![allow(unused)]\n \n trait Deserialize: Sized {"}, {"sha": "eb780b6328cd3d940f7c2961a750e63277b2b7ea", "filename": "src/test/ui/never_type/defaulted-never-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:27:5\n+  --> $DIR/defaulted-never-note.rs:23:5\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n    |    ---    ----------------------------- required by this bound in `foo`"}, {"sha": "342d5e4791515a9a339ad31759008921642fd8c4", "filename": "src/test/ui/never_type/dispatch_from_dyn_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdispatch_from_dyn_zst.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(unsize, dispatch_from_dyn, never_type)]\n+#![feature(unsize, dispatch_from_dyn)]\n \n #![allow(dead_code)]\n "}, {"sha": "2ea9c18ee90058462d82a7e1f32a69882c2cdd37", "filename": "src/test/ui/never_type/diverging-fallback-control-flow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-control-flow.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -11,8 +11,6 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n-#![feature(never_type)]\n-\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "cbfda9a2cc00a4b82e4a98591a7f04e7d945d71d", "filename": "src/test/ui/never_type/impl-for-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl-for-never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(never_type)]\n-\n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n trait StringifyType {"}, {"sha": "da914a2b49ce727d51bfd7f08f52781c07531005", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: cannot add `()` to `usize`\n+error[E0277]: cannot add `!` to `usize`\n   --> $DIR/issue-13352.rs:9:13\n    |\n LL |     2_usize + (loop {});\n-   |             ^ no implementation for `usize + ()`\n+   |             ^ no implementation for `usize + !`\n    |\n-   = help: the trait `std::ops::Add<()>` is not implemented for `usize`\n+   = help: the trait `std::ops::Add<!>` is not implemented for `usize`\n \n error: aborting due to previous error\n "}, {"sha": "67fe3966d6242523d209dcc456a6eca0a3346dd9", "filename": "src/test/ui/never_type/issue-2149.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: cannot add `std::vec::Vec<B>` to `()`\n+error[E0277]: cannot add `std::vec::Vec<B>` to `!`\n   --> $DIR/issue-2149.rs:8:33\n    |\n LL |         for elt in self { r = r + f(*elt); }\n-   |                                 ^ no implementation for `() + std::vec::Vec<B>`\n+   |                                 ^ no implementation for `! + std::vec::Vec<B>`\n    |\n-   = help: the trait `std::ops::Add<std::vec::Vec<B>>` is not implemented for `()`\n+   = help: the trait `std::ops::Add<std::vec::Vec<B>>` is not implemented for `!`\n \n error[E0599]: no method named `bind` found for type `[&str; 1]` in the current scope\n   --> $DIR/issue-2149.rs:13:12"}, {"sha": "0e6588bbe78eac9c8c18122f1c031061bcb2faf4", "filename": "src/test/ui/never_type/issue-44402.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-44402.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![allow(dead_code)]\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old"}, {"sha": "5c1300c715128e180a0ebc746fb98dfce7568681", "filename": "src/test/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "1dc15251d1aa1f28a5560b7570bb4af0658426e4", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,35 +1,35 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:9:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:9:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:9:9\n+  --> $DIR/never-assign-dead-code.rs:8:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^"}, {"sha": "9ca1ac7462d4d8f319ca3c8d2465b7da25e041eb", "filename": "src/test/ui/never_type/never-assign-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,5 @@\n // Test that we can't use another type in place of !\n \n-#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "32c9fab6590df1162953d2370646c40f5d1f56cf", "filename": "src/test/ui/never_type/never-assign-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-wrong-type.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/never-assign-wrong-type.rs:7:16\n+  --> $DIR/never-assign-wrong-type.rs:6:16\n    |\n LL |     let x: ! = \"hello\";\n    |                ^^^^^^^ expected !, found reference"}, {"sha": "45e54b9bf7c18398c150c826caf8957705f75e3a", "filename": "src/test/ui/never_type/never-associated-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-associated-type.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n trait Foo {\n     type Wow;\n "}, {"sha": "df74b6a53f8884acd56afae8cca1462c2433fd61", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,5 @@\n // check that the `for<T> T: From<!>` impl is reserved\n \n-#![feature(never_type)]\n-\n pub struct MyFoo;\n pub trait MyTrait {}\n "}, {"sha": "8b3155988ea956c86f97e44622e6c4deb60f21ee", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n-  --> $DIR/never-from-impl-is-reserved.rs:10:1\n+  --> $DIR/never-from-impl-is-reserved.rs:8:1\n    |\n LL | impl MyTrait for MyFoo {}\n    | ---------------------- first implementation here"}, {"sha": "800553fce874da69c4596d21371638258f469516", "filename": "src/test/ui/never_type/never-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-result.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -5,8 +5,6 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "3cbb114f43b946b44e39b475b32b17778edc8914", "filename": "src/test/ui/never_type/never-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-arg.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,8 +2,6 @@\n \n // check-pass\n \n-#![feature(never_type)]\n-\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "9bfc5572b9ee61ac8816029add99ad12dd8a16e0", "filename": "src/test/ui/never_type/never-type-rvalues.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-type-rvalues.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(unreachable_patterns)]"}, {"sha": "cdf04de19e5236d7c49bf0f657822ea574cd4fe8", "filename": "src/test/ui/never_type/never_transmute_never.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever_transmute_never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n #![crate_type=\"lib\"]\n \n-#![feature(never_type)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n #![allow(unused_variables)]"}, {"sha": "e5e0e188de63cc65b5776034ac7cc07bd09c4ed0", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -3,7 +3,6 @@\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n \n-#![feature(never_type)]\n #![allow(deprecated, invalid_value)]\n \n use std::{mem, panic};"}, {"sha": "977ea3656b3dda76d2eb772925f9baddc65ebcd3", "filename": "src/test/ui/never_type/try_from.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ftry_from.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -5,8 +5,6 @@\n // This test was added to show the motivation for doing this\n // over `TryFrom` being blanket impl for all `T: From`\n \n-#![feature(never_type)]\n-\n use std::convert::{TryInto, Infallible};\n \n struct Foo<T> {"}, {"sha": "ea608651387b7738eea062c4ad25e655eb27f2ba", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod private {"}, {"sha": "66d0d9587741b629c311ea7b005f970f85164288", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not covered\n-  --> $DIR/match-privately-empty.rs:13:11\n+  --> $DIR/match-privately-empty.rs:12:11\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered"}, {"sha": "3a2ca19d8e0c3ebc6ab59dce81891525dbe5f11b", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -4,7 +4,6 @@\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects.\n \n-#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "640c2a2cf8fccdf7abde97bb3e116141fa247b03", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "11c41fdc3946bf6487753070e82a24abdcc26988", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_add.rs:17:13\n+  --> $DIR/expr_add.rs:16:13\n    |\n LL |     let x = Foo + return;\n    |             ^^^^^^------\n@@ -8,7 +8,7 @@ LL |     let x = Foo + return;\n    |             unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_add.rs:3:9\n+  --> $DIR/expr_add.rs:2:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "3914fb32432ef6c2e743a235295522b299b7fab0", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "90aec15e3be1ebca38c0e61c3f5ee45edc0694c8", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_assign.rs:10:5\n+  --> $DIR/expr_assign.rs:9:5\n    |\n LL |     x = return;\n    |     ^^^^------\n@@ -8,21 +8,21 @@ LL |     x = return;\n    |     unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_assign.rs:5:9\n+  --> $DIR/expr_assign.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:20:14\n+  --> $DIR/expr_assign.rs:19:14\n    |\n LL |         *p = return;\n    |         --   ^^^^^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:26:15\n+  --> $DIR/expr_assign.rs:25:15\n    |\n LL |     *{return; &mut i} = 22;\n    |       ------  ^^^^^^ unreachable expression"}, {"sha": "ce1a94e3c4a2565b9ab9c549e8ef98db3299a2d8", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "613fc31b8613e970e524ab0355e4bb342ac6642b", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_call.rs:13:17\n+  --> $DIR/expr_call.rs:12:17\n    |\n LL |     foo(return, 22);\n    |         ------  ^^ unreachable expression\n    |         |\n    |         any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_call.rs:5:9\n+  --> $DIR/expr_call.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_call.rs:18:5\n+  --> $DIR/expr_call.rs:17:5\n    |\n LL |     bar(return);\n    |     ^^^ ------ any code following this expression is unreachable"}, {"sha": "76a7306b9d9e01c6fcb2394fc5f346ea2b205fa1", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type, type_ascription)]\n+#![feature(type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "e74a7daec88286ee16181bf4e0cb9a97d3d37087", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "7475cf7a365b5c98ab4113aaede617a31022162a", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,19 +1,19 @@\n error: unreachable expression\n-  --> $DIR/expr_method.rs:16:21\n+  --> $DIR/expr_method.rs:15:21\n    |\n LL |     Foo.foo(return, 22);\n    |             ------  ^^ unreachable expression\n    |             |\n    |             any code following this expression is unreachable\n    |\n note: lint level defined here\n-  --> $DIR/expr_method.rs:5:9\n+  --> $DIR/expr_method.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable call\n-  --> $DIR/expr_method.rs:21:9\n+  --> $DIR/expr_method.rs:20:9\n    |\n LL |     Foo.bar(return);\n    |         ^^^ ------ any code following this expression is unreachable"}, {"sha": "ff647bda0e87e3be335e5750e3b89d4932846a77", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type, type_ascription)]\n+#![feature(type_ascription)]\n \n fn a() {\n     // the cast is unreachable:"}, {"sha": "6f221c360cb176bec7d037d74c7ac61093bc44c5", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(dead_code)]"}, {"sha": "a576f920923356a492b2510342ba61953f4e4152", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,11 +1,11 @@\n error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:8:16\n+  --> $DIR/expr_unary.rs:7:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^^^^^^^^^^ cannot apply unary operator `!`\n \n error: unreachable expression\n-  --> $DIR/expr_unary.rs:8:16\n+  --> $DIR/expr_unary.rs:7:16\n    |\n LL |     let x: ! = ! { return; };\n    |                ^^^^------^^^\n@@ -14,7 +14,7 @@ LL |     let x: ! = ! { return; };\n    |                unreachable expression\n    |\n note: lint level defined here\n-  --> $DIR/expr_unary.rs:5:9\n+  --> $DIR/expr_unary.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "6d882737003750675bd6ac3ae99736227594d97f", "filename": "src/test/ui/reachable/unreachable-loop-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n #![allow(unreachable_code)]"}, {"sha": "6ade480125ba5023d3b1c15bd33f525bd515a688", "filename": "src/test/ui/reachable/unreachable-loop-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-loop-patterns.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,17 +1,17 @@\n error: unreachable pattern\n-  --> $DIR/unreachable-loop-patterns.rs:18:9\n+  --> $DIR/unreachable-loop-patterns.rs:17:9\n    |\n LL |     for _ in unimplemented!() as Void {}\n    |         ^\n    |\n note: lint level defined here\n-  --> $DIR/unreachable-loop-patterns.rs:5:9\n+  --> $DIR/unreachable-loop-patterns.rs:4:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/unreachable-loop-patterns.rs:18:14\n+  --> $DIR/unreachable-loop-patterns.rs:17:14\n    |\n LL |     for _ in unimplemented!() as Void {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e2d89e93a2aa051caeea08d7620acde3a768d904", "filename": "src/test/ui/reachable/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-try-pattern.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(never_type, exhaustive_patterns)]\n+#![feature(exhaustive_patterns)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "c38ea6ab9ad019473d3b59c5d4d2d7372a03feb0", "filename": "src/test/ui/reachable/unwarned-match-on-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,8 +1,6 @@\n #![deny(unreachable_code)]\n #![allow(dead_code)]\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> bool {\n     // Explicit matches on the never type are unwarned.\n     match x {}"}, {"sha": "6710fcb777f7a7e08e93a99e26a7b1958693c57a", "filename": "src/test/ui/reachable/unwarned-match-on-never.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funwarned-match-on-never.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:10:5\n+  --> $DIR/unwarned-match-on-never.rs:8:5\n    |\n LL |     match x {}\n    |           - any code following this expression is unreachable\n@@ -14,15 +14,15 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable arm\n-  --> $DIR/unwarned-match-on-never.rs:15:15\n+  --> $DIR/unwarned-match-on-never.rs:13:15\n    |\n LL |     match (return) {\n    |           -------- any code following this expression is unreachable\n LL |         () => ()\n    |               ^^ unreachable arm\n \n error: unreachable expression\n-  --> $DIR/unwarned-match-on-never.rs:21:5\n+  --> $DIR/unwarned-match-on-never.rs:19:5\n    |\n LL |       return;\n    |       ------ any code following this expression is unreachable"}, {"sha": "e074183a0490c6dfc2d39a57fc5ed6e4397a14fb", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"rlib\"]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "5684ee6b7bf862d9e0733fad808251dc6350f4ac", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "dd4b0cd1e87e2890b428b0909d3213ab5e08cf47", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:23:5\n+  --> $DIR/coercions.rs:22:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n@@ -10,7 +10,7 @@ LL |     x\n               found type `uninhabited::UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:27:5\n+  --> $DIR/coercions.rs:26:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n@@ -21,7 +21,7 @@ LL |     x\n               found type `uninhabited::UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:31:5\n+  --> $DIR/coercions.rs:30:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n@@ -32,7 +32,7 @@ LL |     x\n               found type `uninhabited::UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions.rs:35:5\n+  --> $DIR/coercions.rs:34:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "c3c0ce650d73e97897fa23d33a8df0b892d757a9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "fd49c6823988aca069235074b6d9ff4858c7b35a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:30:5\n+  --> $DIR/coercions_same_crate.rs:28:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n@@ -10,7 +10,7 @@ LL |     x\n               found type `UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:34:5\n+  --> $DIR/coercions_same_crate.rs:32:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n@@ -21,7 +21,7 @@ LL |     x\n               found type `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:38:5\n+  --> $DIR/coercions_same_crate.rs:36:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n@@ -32,7 +32,7 @@ LL |     x\n               found type `UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:42:5\n+  --> $DIR/coercions_same_crate.rs:40:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "511b6b1bf8f6c72e91903806088837afeb35be14", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "b903e9b288ef7ba80cbad48299fe5cf3c299d27f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `uninhabited::IndirectUninhabitedEnum` is not handled\n-  --> $DIR/indirect_match.rs:19:11\n+  --> $DIR/indirect_match.rs:18:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `uninhabited::IndirectUninhabitedStruct` is not handled\n-  --> $DIR/indirect_match.rs:23:11\n+  --> $DIR/indirect_match.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `uninhabited::IndirectUninhabitedTupleStruct` is not handled\n-  --> $DIR/indirect_match.rs:27:11\n+  --> $DIR/indirect_match.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `uninhabited::IndirectUninhabitedVariants` is not handled\n-  --> $DIR/indirect_match.rs:33:11\n+  --> $DIR/indirect_match.rs:32:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "9c3ec4240a5fdaabc1368df879bd4e787d3f5243", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "f94616dc64b1b30129c3a85703d3caeae5c2aec9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `IndirectUninhabitedEnum` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:34:11\n+  --> $DIR/indirect_match_same_crate.rs:32:11\n    |\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ----------------------------------------------------\n@@ -13,7 +13,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `IndirectUninhabitedStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:38:11\n+  --> $DIR/indirect_match_same_crate.rs:36:11\n    |\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | --------------------------------------------------------\n@@ -27,7 +27,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `IndirectUninhabitedTupleStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:42:11\n+  --> $DIR/indirect_match_same_crate.rs:40:11\n    |\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ------------------------------------------------------------------\n@@ -41,7 +41,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `IndirectUninhabitedVariants` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:48:11\n+  --> $DIR/indirect_match_same_crate.rs:46:11\n    |\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ------------------------------------------------------------"}, {"sha": "68ac42ef5878d11bf4192b7c8dd9053231f23b37", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,6 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "2c2e542934177965e1be044cff41ab6b8f4bdc42", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:23:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:30:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n-  --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:36:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "06c318414f03f83fa69ba7ba42aa770d37f17367", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "fd3dbca04c00f073ec2ed89c0ccf430bd8a329d3", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,4 @@\n // aux-build:uninhabited.rs\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "de3fa900cd6220c890b39de38937fee8ae361d7b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match.rs:19:11\n+  --> $DIR/match.rs:18:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `uninhabited::UninhabitedStruct` is not handled\n-  --> $DIR/match.rs:23:11\n+  --> $DIR/match.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `uninhabited::UninhabitedTupleStruct` is not handled\n-  --> $DIR/match.rs:27:11\n+  --> $DIR/match.rs:26:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `uninhabited::UninhabitedVariants` are not handled\n-  --> $DIR/match.rs:31:11\n+  --> $DIR/match.rs:30:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "c31688add91b2fa4e31224ffa80f4d5f18a6bfcf", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,3 @@\n-#![feature(never_type)]\n-\n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }"}, {"sha": "3dd1a914d5542a20506ef3b213ffdbcf19897f82", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `UninhabitedStruct` is not handled\n-  --> $DIR/match_same_crate.rs:30:11\n+  --> $DIR/match_same_crate.rs:28:11\n    |\n LL |   pub struct UninhabitedStruct {\n    |   -          ----------------- variant not covered\n@@ -15,7 +15,7 @@ LL |       match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `UninhabitedTupleStruct` is not handled\n-  --> $DIR/match_same_crate.rs:34:11\n+  --> $DIR/match_same_crate.rs:32:11\n    |\n LL | pub struct UninhabitedTupleStruct(!);\n    | -------------------------------------\n@@ -29,7 +29,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `UninhabitedVariants` are not handled\n-  --> $DIR/match_same_crate.rs:38:11\n+  --> $DIR/match_same_crate.rs:36:11\n    |\n LL | / pub enum UninhabitedVariants {\n LL | |     #[non_exhaustive] Tuple(!),"}, {"sha": "37d739834d20c0760cce2cbd8acdf6e78065e3f1", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,7 +1,6 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n extern crate uninhabited;\n "}, {"sha": "3b56c6890710d223612ba51ec93265851e2662ff", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,29 +1,29 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:22:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:21:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:26:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:25:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:30:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:29:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedVariants` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:34:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:33:11\n    |\n LL |     match x {}\n    |           ^"}, {"sha": "2b2e4b6e77d8700da17366b84f2de9101ff4f041", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "3d4cca4505ef1e930b83018da5fe2f927806add8", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,5 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "fea883f8912005e8d7c50320112cb04cb69d253b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:52:9\n+  --> $DIR/patterns_same_crate.rs:51:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:57:9\n+  --> $DIR/patterns_same_crate.rs:56:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:61:15\n+  --> $DIR/patterns_same_crate.rs:60:15\n    |\n LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:65:15\n+  --> $DIR/patterns_same_crate.rs:64:15\n    |\n LL |     while let Some(_x) = uninhabited_struct() {\n    |               ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:68:15\n+  --> $DIR/patterns_same_crate.rs:67:15\n    |\n LL |     while let Some(_x) = uninhabited_tuple_struct() {\n    |               ^^^^^^^^"}, {"sha": "0e0197803b76185773f578787de93a5bcb8e5609", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-non-lattice-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-non-lattice-ok.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -30,7 +30,7 @@\n //\n // [ii]: http://smallcultfollowing.com/babysteps/blog/2016/09/24/intersection-impls/\n \n-#![feature(rustc_attrs, never_type)]\n+#![feature(rustc_attrs)]\n \n trait MyTrait {}\n "}, {"sha": "e6c7b566b4428c47806692a8cfc73ffda74796a5", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -4,7 +4,7 @@ error: concrete type differs from previous defining opaque type use\n LL | / fn bar() -> Foo {\n LL | |     panic!()\n LL | | }\n-   | |_^ expected `&'static str`, got `()`\n+   | |_^ expected `&'static str`, got `!`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n@@ -20,7 +20,7 @@ error: concrete type differs from previous defining opaque type use\n LL | / fn boo() -> Foo {\n LL | |     loop {}\n LL | | }\n-   | |_^ expected `&'static str`, got `()`\n+   | |_^ expected `&'static str`, got `!`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1"}, {"sha": "3dfe0ad7f72c1e19eff92963a0a28bc2c2aa46c8", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n-#![feature(never_type)]\n \n use std::mem::size_of;\n "}, {"sha": "84daa35484f81ba7c03cf1617530cce47277924d", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n \n mod foo {"}, {"sha": "6ba03ee5083168f5063d0d5f019546d3971fd5e5", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `A(_)` not covered\n-  --> $DIR/uninhabited-irrefutable.rs:27:9\n+  --> $DIR/uninhabited-irrefutable.rs:26:9\n    |\n LL | / enum Foo {\n LL | |     A(foo::SecretlyEmpty),"}, {"sha": "66a1a7f7735ebc0741379e163b8150ca4eff04ea", "filename": "src/test/ui/uninhabited/uninhabited-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.rs?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]"}, {"sha": "4a793c4510ec1dcfbe236ba906c8bceeb9e7f2ad", "filename": "src/test/ui/uninhabited/uninhabited-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f6197f39f7d468dfc5b2bd41dae4769992a2f83/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-patterns.stderr?ref=8f6197f39f7d468dfc5b2bd41dae4769992a2f83", "patch": "@@ -1,35 +1,35 @@\n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:27:9\n+  --> $DIR/uninhabited-patterns.rs:26:9\n    |\n LL |         &[..] => (),\n    |         ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/uninhabited-patterns.rs:6:9\n+  --> $DIR/uninhabited-patterns.rs:5:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:32:9\n+  --> $DIR/uninhabited-patterns.rs:31:9\n    |\n LL |         Ok(box _) => (),\n    |         ^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:34:9\n+  --> $DIR/uninhabited-patterns.rs:33:9\n    |\n LL |         Err(&[..]) => (),\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:41:9\n+  --> $DIR/uninhabited-patterns.rs:40:9\n    |\n LL |         Err(Ok(_y)) => (),\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/uninhabited-patterns.rs:44:15\n+  --> $DIR/uninhabited-patterns.rs:43:15\n    |\n LL |     while let Some(_y) = foo() {\n    |               ^^^^^^^^"}]}