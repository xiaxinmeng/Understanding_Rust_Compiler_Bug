{"sha": "c19ed3bc5b281fa5e74e70e008a154204fbfd814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOWVkM2JjNWIyODFmYTVlNzRlNzBlMDA4YTE1NDIwNGZiZmQ4MTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T04:12:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T17:43:05Z"}, "message": "fn adt_kind -> wfcheck", "tree": {"sha": "ef8e70513bde02f17698638a52baa747e5584ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8e70513bde02f17698638a52baa747e5584ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c19ed3bc5b281fa5e74e70e008a154204fbfd814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c19ed3bc5b281fa5e74e70e008a154204fbfd814", "html_url": "https://github.com/rust-lang/rust/commit/c19ed3bc5b281fa5e74e70e008a154204fbfd814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c19ed3bc5b281fa5e74e70e008a154204fbfd814/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8377d37e9bc47f9a5a982c41705a7800cbb51d", "html_url": "https://github.com/rust-lang/rust/commit/cd8377d37e9bc47f9a5a982c41705a7800cbb51d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b7609fa0898e9d0558ef041a40efac84403c001b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c19ed3bc5b281fa5e74e70e008a154204fbfd814/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ed3bc5b281fa5e74e70e008a154204fbfd814/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c19ed3bc5b281fa5e74e70e008a154204fbfd814", "patch": "@@ -12,7 +12,6 @@ use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use crate::mir::mono::Linkage;\n use crate::ty::query::Providers;\n-use crate::ty::AdtKind;\n use crate::util::nodemap::{FxHashSet, NodeMap};\n \n use errors::FatalError;\n@@ -2550,15 +2549,6 @@ impl ItemKind<'_> {\n         }\n     }\n \n-    pub fn adt_kind(&self) -> Option<AdtKind> {\n-        match *self {\n-            ItemKind::Struct(..) => Some(AdtKind::Struct),\n-            ItemKind::Union(..) => Some(AdtKind::Union),\n-            ItemKind::Enum(..) => Some(AdtKind::Enum),\n-            _ => None,\n-        }\n-    }\n-\n     pub fn generics(&self) -> Option<&Generics<'_>> {\n         Some(match *self {\n             ItemKind::Fn(_, ref generics, _)"}, {"sha": "5e2178cf910605a62e68af13809c4933a3ef569b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c19ed3bc5b281fa5e74e70e008a154204fbfd814/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c19ed3bc5b281fa5e74e70e008a154204fbfd814/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c19ed3bc5b281fa5e74e70e008a154204fbfd814", "patch": "@@ -1,12 +1,13 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use crate::hir::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::ItemKind;\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n-use rustc::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n use errors::DiagnosticBuilder;\n@@ -252,6 +253,15 @@ fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_>\n     }\n }\n \n+fn item_adt_kind(kind: &ItemKind<'_>) -> Option<AdtKind> {\n+    match kind {\n+        ItemKind::Struct(..) => Some(AdtKind::Struct),\n+        ItemKind::Union(..) => Some(AdtKind::Union),\n+        ItemKind::Enum(..) => Some(AdtKind::Enum),\n+        _ => None,\n+    }\n+}\n+\n /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n fn check_type_defn<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n@@ -297,7 +307,7 @@ fn check_type_defn<'tcx, F>(\n                         field.span,\n                         fcx.body_id,\n                         traits::FieldSized {\n-                            adt_kind: match item.kind.adt_kind() {\n+                            adt_kind: match item_adt_kind(&item.kind) {\n                                 Some(i) => i,\n                                 None => bug!(),\n                             },"}]}