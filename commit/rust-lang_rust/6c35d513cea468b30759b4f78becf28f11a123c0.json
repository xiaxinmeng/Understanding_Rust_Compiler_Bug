{"sha": "6c35d513cea468b30759b4f78becf28f11a123c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzVkNTEzY2VhNDY4YjMwNzU5YjRmNzhiZWNmMjhmMTFhMTIzYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-16T04:31:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-16T04:31:12Z"}, "message": "auto merge of #15656 : nick29581/rust/index-bck, r=pnkfelix\n\nCloses #15525\r\n\r\nThe important bit of this are the changes from line 445 in mem_categorization.rs. Most of the other changes are about adding an Implicit PointerKind, and this is only necessary for getting a decent error message :-s An alternative would have been to add an implciti/explicit flag to cat_deref, which could be mostly ignored and so would mean much fewer changes. However, the implicit state would only be valid if the PointerKind was BorrowedPtr, so it felt like it ought to be another kind of PointerKind. I still don't know which is the better design.", "tree": {"sha": "3ecd3f6f340ee609f637162e39657c78c582b6de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecd3f6f340ee609f637162e39657c78c582b6de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c35d513cea468b30759b4f78becf28f11a123c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c35d513cea468b30759b4f78becf28f11a123c0", "html_url": "https://github.com/rust-lang/rust/commit/6c35d513cea468b30759b4f78becf28f11a123c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c35d513cea468b30759b4f78becf28f11a123c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c523d86552d6797ad52acece4e2e65cb319ee4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c523d86552d6797ad52acece4e2e65cb319ee4f2", "html_url": "https://github.com/rust-lang/rust/commit/c523d86552d6797ad52acece4e2e65cb319ee4f2"}, {"sha": "2bc6547a5a293d61a2485090fd1d1d8a57b6baee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc6547a5a293d61a2485090fd1d1d8a57b6baee", "html_url": "https://github.com/rust-lang/rust/commit/2bc6547a5a293d61a2485090fd1d1d8a57b6baee"}], "stats": {"total": 119, "additions": 96, "deletions": 23}, "files": [{"sha": "cfec67bf3a395e422d7c07d5dc8e44f62fd2db21", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -734,7 +734,8 @@ impl<'a> CheckLoanCtxt<'a> {\n                     mc::cat_static_item |\n                     mc::cat_copied_upvar(..) |\n                     mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n-                    mc::cat_deref(_, _, mc::BorrowedPtr(..)) => {\n+                    mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n+                    mc::cat_deref(_, _, mc::Implicit(..)) => {\n                         assert_eq!(cmt.mutbl, mc::McDeclared);\n                         return;\n                     }"}, {"sha": "322471f30294f06c70e8e7275ca293fc91dce57b", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -131,6 +131,7 @@ fn check_and_get_illegal_move_origin(bccx: &BorrowckCtxt,\n                                      cmt: &mc::cmt) -> Option<mc::cmt> {\n     match cmt.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n+        mc::cat_deref(_, _, mc::Implicit(..)) |\n         mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |"}, {"sha": "0785538cc76abba674fa9095bf8d84cddb4106dc", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -72,6 +72,7 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n             mc::cat_arg(..) |                           // L-Local\n             mc::cat_upvar(..) |\n             mc::cat_deref(_, _, mc::BorrowedPtr(..)) |  // L-Deref-Borrowed\n+            mc::cat_deref(_, _, mc::Implicit(..)) |\n             mc::cat_deref(_, _, mc::UnsafePtr(..)) => {\n                 self.check_scope(self.scope(cmt))\n             }\n@@ -180,7 +181,8 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n             mc::cat_deref(_, _, mc::UnsafePtr(..)) => {\n                 ty::ReStatic\n             }\n-            mc::cat_deref(_, _, mc::BorrowedPtr(_, r)) => {\n+            mc::cat_deref(_, _, mc::BorrowedPtr(_, r)) |\n+            mc::cat_deref(_, _, mc::Implicit(_, r)) => {\n                 r\n             }\n             mc::cat_downcast(ref cmt) |"}, {"sha": "10f051f004f19b41018e036d4e63c983353ff066", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -113,6 +113,7 @@ fn group_errors_with_same_origin(errors: &Vec<MoveError>)\n fn report_cannot_move_out_of(bccx: &BorrowckCtxt, move_from: mc::cmt) {\n     match move_from.cat {\n         mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n+        mc::cat_deref(_, _, mc::Implicit(..)) |\n         mc::cat_deref(_, _, mc::GcPtr) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_upvar(..) | mc::cat_static_item |"}, {"sha": "48399cb0b7e02f1fbd54c2445b5929a1c5c9f424", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -122,7 +122,9 @@ impl<'a> RestrictionsContext<'a> {\n             }\n \n             mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::ImmBorrow, lt)) |\n-            mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::UniqueImmBorrow, lt)) => {\n+            mc::cat_deref(cmt_base, _, mc::BorrowedPtr(ty::UniqueImmBorrow, lt)) |\n+            mc::cat_deref(cmt_base, _, mc::Implicit(ty::ImmBorrow, lt)) |\n+            mc::cat_deref(cmt_base, _, mc::Implicit(ty::UniqueImmBorrow, lt)) => {\n                 // R-Deref-Imm-Borrowed\n                 if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                     self.bccx.report(\n@@ -137,7 +139,8 @@ impl<'a> RestrictionsContext<'a> {\n                 Safe\n             }\n \n-            mc::cat_deref(cmt_base, _, pk @ mc::BorrowedPtr(ty::MutBorrow, lt)) => {\n+            mc::cat_deref(cmt_base, _, pk @ mc::BorrowedPtr(ty::MutBorrow, lt)) |\n+            mc::cat_deref(cmt_base, _, pk @ mc::Implicit(ty::MutBorrow, lt)) => {\n                 // R-Deref-Mut-Borrowed\n                 if !self.bccx.is_subregion_of(self.loan_region, lt) {\n                     self.bccx.report("}, {"sha": "e928704b0ccf6d170ffb36815a529269aab1e153", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -106,7 +106,8 @@ pub enum PointerKind {\n     OwnedPtr,\n     GcPtr,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n-    UnsafePtr(ast::Mutability),\n+    Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n+    UnsafePtr(ast::Mutability)\n }\n \n // We use the term \"interior\" to mean \"something reachable from the\n@@ -293,7 +294,7 @@ impl MutabilityCategory {\n             OwnedPtr => {\n                 base_mutbl.inherit()\n             }\n-            BorrowedPtr(borrow_kind, _) => {\n+            BorrowedPtr(borrow_kind, _) | Implicit(borrow_kind, _) => {\n                 MutabilityCategory::from_borrow_kind(borrow_kind)\n             }\n             GcPtr => {\n@@ -422,7 +423,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                                -> McResult<cmt> {\n         let mut cmt = if_ok!(self.cat_expr_unadjusted(expr));\n         for deref in range(1u, autoderefs + 1) {\n-            cmt = self.cat_deref(expr, cmt, deref);\n+            cmt = self.cat_deref(expr, cmt, deref, false);\n         }\n         return Ok(cmt);\n     }\n@@ -434,7 +435,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n         match expr.node {\n           ast::ExprUnary(ast::UnDeref, ref e_base) => {\n             let base_cmt = if_ok!(self.cat_expr(&**e_base));\n-            Ok(self.cat_deref(expr, base_cmt, 0))\n+            Ok(self.cat_deref(expr, base_cmt, 0, false))\n           }\n \n           ast::ExprField(ref base, f_name, _) => {\n@@ -443,8 +444,22 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n           }\n \n           ast::ExprIndex(ref base, _) => {\n-            let base_cmt = if_ok!(self.cat_expr(&**base));\n-            Ok(self.cat_index(expr, base_cmt, 0))\n+            let method_call = typeck::MethodCall::expr(expr.id());\n+            match self.typer.node_method_ty(method_call) {\n+                Some(method_ty) => {\n+                    // If this is an index implemented by a method call, then it will\n+                    // include an implicit deref of the result.\n+                    let ret_ty = ty::ty_fn_ret(method_ty);\n+                    Ok(self.cat_deref(expr,\n+                                      self.cat_rvalue_node(expr.id(),\n+                                                           expr.span(),\n+                                                           ret_ty), 1, true))\n+                }\n+                None => {\n+                    let base_cmt = if_ok!(self.cat_expr(&**base));\n+                    Ok(self.cat_index(expr, base_cmt, 0))\n+                }\n+            }\n           }\n \n           ast::ExprPath(_) => {\n@@ -687,13 +702,14 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n     }\n \n     pub fn cat_deref_obj<N:ast_node>(&self, node: &N, base_cmt: cmt) -> cmt {\n-        self.cat_deref_common(node, base_cmt, 0, ty::mk_nil())\n+        self.cat_deref_common(node, base_cmt, 0, ty::mk_nil(), false)\n     }\n \n     fn cat_deref<N:ast_node>(&self,\n                              node: &N,\n                              base_cmt: cmt,\n-                             deref_cnt: uint)\n+                             deref_cnt: uint,\n+                             implicit: bool)\n                              -> cmt {\n         let adjustment = match self.typer.adjustments().borrow().find(&node.id()) {\n             Some(&ty::AutoObject(..)) => typeck::AutoObject,\n@@ -717,7 +733,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n             None => base_cmt\n         };\n         match ty::deref(base_cmt.ty, true) {\n-            Some(mt) => self.cat_deref_common(node, base_cmt, deref_cnt, mt.ty),\n+            Some(mt) => self.cat_deref_common(node, base_cmt, deref_cnt, mt.ty, implicit),\n             None => {\n                 self.tcx().sess.span_bug(\n                     node.span(),\n@@ -731,10 +747,20 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                                     node: &N,\n                                     base_cmt: cmt,\n                                     deref_cnt: uint,\n-                                    deref_ty: ty::t)\n+                                    deref_ty: ty::t,\n+                                    implicit: bool)\n                                     -> cmt {\n         let (m, cat) = match deref_kind(self.tcx(), base_cmt.ty) {\n             deref_ptr(ptr) => {\n+                let ptr = if implicit {\n+                    match ptr {\n+                        BorrowedPtr(bk, r) => Implicit(bk, r),\n+                        _ => self.tcx().sess.span_bug(node.span(),\n+                            \"Implicit deref of non-borrowed pointer\")\n+                    }\n+                } else {\n+                    ptr\n+                };\n                 // for unique ptrs, we inherit mutability from the\n                 // owning reference.\n                 (MutabilityCategory::from_pointer_kind(base_cmt.mutbl, ptr),\n@@ -1073,7 +1099,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n \n           ast::PatBox(ref subpat) | ast::PatRegion(ref subpat) => {\n             // @p1, ~p1\n-            let subcmt = self.cat_deref(pat, cmt, 0);\n+            let subcmt = self.cat_deref(pat, cmt, 0, false);\n             if_ok!(self.cat_pattern(subcmt, &**subpat, op));\n           }\n \n@@ -1129,6 +1155,9 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                   }\n                   _ => {\n                       match pk {\n+                          Implicit(..) => {\n+                            \"dereference (dereference is implicit, due to indexing)\".to_string()\n+                          }\n                           OwnedPtr | GcPtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n                           _ => format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                       }\n@@ -1188,6 +1217,7 @@ impl cmt_ {\n             cat_deref(_, _, UnsafePtr(..)) |\n             cat_deref(_, _, GcPtr(..)) |\n             cat_deref(_, _, BorrowedPtr(..)) |\n+            cat_deref(_, _, Implicit(..)) |\n             cat_upvar(..) => {\n                 Rc::new((*self).clone())\n             }\n@@ -1212,7 +1242,9 @@ impl cmt_ {\n \n         match self.cat {\n             cat_deref(ref b, _, BorrowedPtr(ty::MutBorrow, _)) |\n+            cat_deref(ref b, _, Implicit(ty::MutBorrow, _)) |\n             cat_deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n+            cat_deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n             cat_downcast(ref b) |\n             cat_deref(ref b, _, OwnedPtr) |\n             cat_interior(ref b, _) |\n@@ -1252,7 +1284,8 @@ impl cmt_ {\n                 Some(AliasableManaged)\n             }\n \n-            cat_deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) => {\n+            cat_deref(_, _, BorrowedPtr(ty::ImmBorrow, _)) |\n+            cat_deref(_, _, Implicit(ty::ImmBorrow, _)) => {\n                 Some(AliasableBorrowed)\n             }\n         }\n@@ -1300,9 +1333,12 @@ pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     match ptr {\n         OwnedPtr => \"Box\",\n         GcPtr => \"Gc\",\n-        BorrowedPtr(ty::ImmBorrow, _) => \"&\",\n-        BorrowedPtr(ty::MutBorrow, _) => \"&mut\",\n-        BorrowedPtr(ty::UniqueImmBorrow, _) => \"&unique\",\n+        BorrowedPtr(ty::ImmBorrow, _) |\n+        Implicit(ty::ImmBorrow, _) => \"&\",\n+        BorrowedPtr(ty::MutBorrow, _) |\n+        Implicit(ty::MutBorrow, _) => \"&mut\",\n+        BorrowedPtr(ty::UniqueImmBorrow, _) |\n+        Implicit(ty::UniqueImmBorrow, _) => \"&unique\",\n         UnsafePtr(_) => \"*\"\n     }\n }"}, {"sha": "180dac53828052fb11ed63cf0053327ab78e39f8", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -1219,7 +1219,8 @@ fn link_region(rcx: &Rcx,\n                kind.repr(rcx.tcx()),\n                cmt_borrowed.repr(rcx.tcx()));\n         match cmt_borrowed.cat.clone() {\n-            mc::cat_deref(base, _, mc::BorrowedPtr(_, r_borrowed)) => {\n+            mc::cat_deref(base, _, mc::BorrowedPtr(_, r_borrowed)) |\n+            mc::cat_deref(base, _, mc::Implicit(_, r_borrowed)) => {\n                 // References to an upvar `x` are translated to\n                 // `*x`, since that is what happens in the\n                 // underlying machine.  We detect such references\n@@ -1340,7 +1341,8 @@ fn adjust_upvar_borrow_kind_for_mut(rcx: &Rcx,\n                 continue;\n             }\n \n-            mc::cat_deref(base, _, mc::BorrowedPtr(..)) => {\n+            mc::cat_deref(base, _, mc::BorrowedPtr(..)) |\n+            mc::cat_deref(base, _, mc::Implicit(..)) => {\n                 match base.cat {\n                     mc::cat_upvar(ref upvar_id, _) => {\n                         // if this is an implicit deref of an\n@@ -1394,7 +1396,8 @@ fn adjust_upvar_borrow_kind_for_unique(rcx: &Rcx, cmt: mc::cmt) {\n                 continue;\n             }\n \n-            mc::cat_deref(base, _, mc::BorrowedPtr(..)) => {\n+            mc::cat_deref(base, _, mc::BorrowedPtr(..)) |\n+            mc::cat_deref(base, _, mc::Implicit(..)) => {\n                 match base.cat {\n                     mc::cat_upvar(ref upvar_id, _) => {\n                         // if this is an implicit deref of an"}, {"sha": "1e3144a931fbf68e181fa0103d2ce4d6e0860085", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyVec<T> {\n+    data: Vec<T>,\n+}\n+\n+impl<T> Index<uint, T> for MyVec<T> {\n+    fn index<'a>(&'a self, &i: &uint) -> &'a T {\n+        self.data.get(i)\n+    }\n+}\n+\n+fn main() {\n+    let v = MyVec { data: vec!(box 1i, box 2, box 3) };\n+    let good = &v[0]; // Shouldn't fail here\n+    let bad = v[0];\n+    //~^ ERROR cannot move out of dereference (dereference is implicit, due to indexing)\n+}"}, {"sha": "0422f6381dc3d0fe61c2604d49f4d3d7eff977c0", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c35d513cea468b30759b4f78becf28f11a123c0/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=6c35d513cea468b30759b4f78becf28f11a123c0", "patch": "@@ -58,7 +58,7 @@ fn main() {\n         x: 1,\n     };\n     s[2] = 20;\n-    //~^ ERROR cannot assign to immutable indexed content\n+    //~^ ERROR cannot assign to immutable dereference (dereference is implicit, due to indexing)\n }\n \n "}]}