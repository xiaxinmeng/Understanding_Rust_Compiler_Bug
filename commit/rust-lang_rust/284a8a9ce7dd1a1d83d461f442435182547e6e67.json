{"sha": "284a8a9ce7dd1a1d83d461f442435182547e6e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NGE4YTljZTdkZDFhMWQ4M2Q0NjFmNDQyNDM1MTgyNTQ3ZTZlNjc=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-07T07:42:44Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-09-16T12:12:27Z"}, "message": "Point at argument instead of call for their obligations\n\nWhen an obligation is introduced by a specific `fn` argument, point at\nthe argument instead of the `fn` call if the obligation fails to be\nfulfilled.", "tree": {"sha": "963ba3dbb55796e54c4f6694af2d746ab388c6d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963ba3dbb55796e54c4f6694af2d746ab388c6d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284a8a9ce7dd1a1d83d461f442435182547e6e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284a8a9ce7dd1a1d83d461f442435182547e6e67", "html_url": "https://github.com/rust-lang/rust/commit/284a8a9ce7dd1a1d83d461f442435182547e6e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284a8a9ce7dd1a1d83d461f442435182547e6e67/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5ddf36fdc784106b3a064d93dd054c32b1f10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5ddf36fdc784106b3a064d93dd054c32b1f10f", "html_url": "https://github.com/rust-lang/rust/commit/2b5ddf36fdc784106b3a064d93dd054c32b1f10f"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "ed01dae59f6723e1460d2a534c8c34faac305813", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -83,7 +83,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// version (resolve_vars_if_possible), this version will\n     /// also select obligations if it seems useful, in an effort\n     /// to get more type information.\n-    pub(in super::super) fn resolve_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> {\n+    pub(in super::super) fn resolve_vars_with_obligations(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        self.resolve_vars_with_obligations_and_mutate_fulfillment(ty, |_| {})\n+    }\n+\n+    pub(in super::super) fn resolve_vars_with_obligations_and_mutate_fulfillment(\n+        &self,\n+        mut ty: Ty<'tcx>,\n+        mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n+    ) -> Ty<'tcx> {\n         debug!(\"resolve_vars_with_obligations(ty={:?})\", ty);\n \n         // No Infer()? Nothing needs doing.\n@@ -103,7 +111,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible(false, |_| {});\n+        self.select_obligations_where_possible(false, mutate_fulfillment_errors);\n         ty = self.resolve_vars_if_possible(ty);\n \n         debug!(\"resolve_vars_with_obligations: ty={:?}\", ty);"}, {"sha": "f5f1dd4265254082f65ea163b7e90f73acf70582", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -354,8 +354,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     continue;\n                 }\n \n-                debug!(\"checking the argument\");\n                 let formal_ty = formal_tys[i];\n+                debug!(\"checking argument {}: {:?} = {:?}\", i, arg, formal_ty);\n \n                 // The special-cased logic below has three functions:\n                 // 1. Provide as good of an expected type as possible.\n@@ -367,6 +367,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //    to, which is `expected_ty` if `rvalue_hint` returns an\n                 //    `ExpectHasType(expected_ty)`, or the `formal_ty` otherwise.\n                 let coerce_ty = expected.only_has_type(self).unwrap_or(formal_ty);\n+\n+                // Cause selection errors caused by resolving a single argument to point at the\n+                // argument and not the call. This is otherwise redundant with the `demand_coerce`\n+                // call immediately after, but it lets us customize the span pointed to in the\n+                // fulfillment error to be more accurate.\n+                let _ = self.resolve_vars_with_obligations_and_mutate_fulfillment(\n+                    coerce_ty,\n+                    |errors| {\n+                        // This is not coming from a macro or a `derive`.\n+                        if sp.desugaring_kind().is_none()\n+                        && !arg.span.from_expansion()\n+                        // Do not change the spans of `async fn`s.\n+                        && !matches!(\n+                            expr.kind,\n+                            hir::ExprKind::Call(\n+                                hir::Expr {\n+                                    kind: hir::ExprKind::Path(hir::QPath::LangItem(_, _)),\n+                                    ..\n+                                },\n+                                _\n+                            )\n+                        ) {\n+                            for error in errors {\n+                                error.obligation.cause.make_mut().span = arg.span;\n+                                error.points_at_arg_span = true;\n+                            }\n+                        }\n+                    },\n+                );\n+\n                 // We're processing function arguments so we definitely want to use\n                 // two-phase borrows.\n                 self.demand_coerce(&arg, checked_ty, coerce_ty, None, AllowTwoPhase::Yes);"}, {"sha": "ac4ac4cc99c1d8151af9a0ca3ac0b12fd4c4d0aa", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -10,10 +10,10 @@ LL |     f1(2i32, 4u32);\n    |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:5\n+  --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n@@ -25,13 +25,13 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n LL |     f1(2u32, 4u32);\n-   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:5\n+  --> $DIR/associated-types-path-2.rs:35:14\n    |\n LL |     f1(2u32, 4i32);\n-   |     ^^ the trait `Foo` is not implemented for `u32`\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n@@ -43,7 +43,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n LL |     f1(2u32, 4i32);\n-   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18"}, {"sha": "c1ad986099e3e49dc36cd9ac7c502534c1d4966f", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -1,11 +1,17 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-62529-1.rs:80:10\n    |\n-LL |     task(annotate(\n-   |          ^^^^^^^^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n-...\n-LL |         |value: &mut usize| {\n-   |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n+LL |       task(annotate(\n+   |  __________^\n+LL | |\n+LL | |\n+LL | |         Annotate::<RefMutFamily<usize>>::new(),\n+LL | |         |value: &mut usize| {\n+   | |         ------------------- found signature of `for<'r> fn(&'r mut usize) -> _`\n+LL | |             *value = 2;\n+LL | |         }\n+LL | |     ));\n+   | |_____^ expected signature of `for<'r> fn(<RefMutFamily<usize> as FamilyLt<'r>>::Out) -> _`\n    |\n note: required by a bound in `annotate`\n   --> $DIR/issue-62529-1.rs:44:8"}, {"sha": "7f01f7fa8c686ecf7726fde6346febabf87e2126", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&u32: Foo` is not satisfied\n-  --> $DIR/issue-60218.rs:18:5\n+  --> $DIR/issue-60218.rs:18:27\n    |\n LL |     trigger_error(vec![], |x: &u32| x)\n-   |     ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n+   |                           ^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n    |\n note: required by a bound in `trigger_error`\n   --> $DIR/issue-60218.rs:13:72"}, {"sha": "39b6583bc4ec4123d915ad1372e47022b1c6973e", "filename": "src/test/ui/unsized/unsized3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.rs?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -44,8 +44,6 @@ fn f9<X: ?Sized>(x1: Box<S<X>>) {\n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n     //~^ ERROR the size for values of type\n-    //~| ERROR the size for values of type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "e8d346a8b29633f585ed078f0f0a4d847816b811", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/284a8a9ce7dd1a1d83d461f442435182547e6e67/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=284a8a9ce7dd1a1d83d461f442435182547e6e67", "patch": "@@ -92,27 +92,6 @@ LL - fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f9<X>(x1: Box<S<X>>) {\n    | \n \n-error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:45:9\n-   |\n-LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n-LL |     f5(&(32, *x1));\n-   |         ^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-note: required because it appears within the type `S<X>`\n-  --> $DIR/unsized3.rs:28:8\n-   |\n-LL | struct S<X: ?Sized> {\n-   |        ^\n-   = note: required because it appears within the type `({integer}, S<X>)`\n-   = note: tuples must have a statically known size to be initialized\n-help: consider removing the `?Sized` bound to make the type parameter `Sized`\n-   |\n-LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-LL + fn f10<X>(x1: Box<S<X>>) {\n-   | \n-\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n    |\n@@ -127,21 +106,13 @@ note: required because it appears within the type `S<X>`\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n-note: required by a bound in `f5`\n-  --> $DIR/unsized3.rs:24:7\n-   |\n-LL | fn f5<Y>(x: &Y) {}\n-   |       ^ required by this bound in `f5`\n+   = note: tuples must have a statically known size to be initialized\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f10<X>(x1: Box<S<X>>) {\n    | \n-help: consider relaxing the implicit `Sized` restriction\n-   |\n-LL | fn f5<Y: ?Sized>(x: &Y) {}\n-   |        ++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}