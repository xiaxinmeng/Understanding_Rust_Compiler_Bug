{"sha": "dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYWViNmFhMjNlY2JhMmRjMmFmODcwNjY4YTkyMzkxMzZkMjBmYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T11:28:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T11:28:53Z"}, "message": "auto merge of #20901 : dgrunwald/rust/update-token-can-begin-expr, r=sanxiyn\n\n * add `Token::AndAnd` (double borrow)\r\n * add `Token::DotDot` (range notation)\r\n * remove `Token::Pound` and `Token::At`\r\n\r\nThis fixes a syntax error when parsing `fn f() -> RangeTo<i32> { return ..1; }`.\r\n\r\nAlso, remove `fn_expr_lookahead`.\r\nIt's from the `fn~` days and seems to no longer be necessary.", "tree": {"sha": "a1702f3eae2c0e1f487d1236271d0ec9f84403c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1702f3eae2c0e1f487d1236271d0ec9f84403c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "html_url": "https://github.com/rust-lang/rust/commit/dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f081e54843952e34b0632e1b0ec54547bf6e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f081e54843952e34b0632e1b0ec54547bf6e3c", "html_url": "https://github.com/rust-lang/rust/commit/30f081e54843952e34b0632e1b0ec54547bf6e3c"}, {"sha": "ca8578a953d0563dbef499ea2c2c853c9b71887c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8578a953d0563dbef499ea2c2c853c9b71887c", "html_url": "https://github.com/rust-lang/rust/commit/ca8578a953d0563dbef499ea2c2c853c9b71887c"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "130972b4582968ad95b5029ffcdfe096b4def384", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "patch": "@@ -2139,6 +2139,7 @@ impl<'a> Parser<'a> {\n \n         let ex: Expr_;\n \n+        // Note: when adding new syntax here, don't forget to adjust Token::can_begin_expr().\n         match self.token {\n             token::OpenDelim(token::Paren) => {\n                 self.bump();\n@@ -2776,6 +2777,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n         let hi;\n \n+        // Note: when adding new unary operators, don't forget to adjust Token::can_begin_expr()\n         let ex;\n         match self.token {\n           token::Not => {\n@@ -5536,13 +5538,6 @@ impl<'a> Parser<'a> {\n         (id, ItemEnum(enum_definition, generics), None)\n     }\n \n-    fn fn_expr_lookahead(tok: &token::Token) -> bool {\n-        match *tok {\n-          token::OpenDelim(token::Paren) | token::At | token::Tilde | token::BinOp(_) => true,\n-          _ => false\n-        }\n-    }\n-\n     /// Parses a string as an ABI spec on an extern type or module. Consumes\n     /// the `extern` keyword, if one is found.\n     fn parse_opt_abi(&mut self) -> Option<abi::Abi> {\n@@ -5715,8 +5710,7 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return IoviItem(item);\n         }\n-        if self.token.is_keyword(keywords::Fn) &&\n-                self.look_ahead(1, |f| !Parser::fn_expr_lookahead(f)) {\n+        if self.token.is_keyword(keywords::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) ="}, {"sha": "e5aef12e82795b807201d64794e3b4fb55a9d066", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "patch": "@@ -183,14 +183,14 @@ impl Token {\n             Underscore                  => true,\n             Tilde                       => true,\n             Literal(_, _)               => true,\n-            Pound                       => true,\n-            At                          => true,\n             Not                         => true,\n             BinOp(Minus)                => true,\n             BinOp(Star)                 => true,\n             BinOp(And)                  => true,\n             BinOp(Or)                   => true, // in lambda syntax\n             OrOr                        => true, // in lambda syntax\n+            AndAnd                      => true, // double borrow\n+            DotDot                      => true, // range notation\n             ModSep                      => true,\n             Interpolated(NtExpr(..))    => true,\n             Interpolated(NtIdent(..))   => true,"}, {"sha": "bfd3e43768f50992f3aafeb8ead7324f53d3ddba", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcaeb6aa23ecba2dc2af870668a9239136d20fa3/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "patch": "@@ -12,6 +12,9 @@\n \n fn foo() -> int { 42 }\n \n+// Test that range syntax works in return statements\n+fn return_range_to() -> ::std::ops::RangeTo<i32> { return ..1; }\n+\n pub fn main() {\n     let mut count = 0;\n     for i in 0u..10 {"}]}