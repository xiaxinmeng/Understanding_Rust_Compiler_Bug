{"sha": "cc07061190713059dc533f68a450799dbfb70c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDcwNjExOTA3MTMwNTlkYzUzM2Y2OGE0NTA3OTlkYmZiNzBjNWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:50Z"}, "message": "Rollup merge of #82091 - henryboisdequin:use-place-ref-more, r=RalfJung\n\nuse PlaceRef abstractions more consistently\n\nAddresses this [comment](https://github.com/rust-lang/rust/pull/80865/files#r558978715)\nAssociated issue: #80647\n\nr? ```@RalfJung```", "tree": {"sha": "3ca9bb1a40af3badf72591121aae373e6a4e2287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca9bb1a40af3badf72591121aae373e6a4e2287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc07061190713059dc533f68a450799dbfb70c5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+2CRBK7hj4Ov3rIwAAdHIIACVFny4ZBGRXMmftgx962JPd\nBt1oCKjcdkrcuXjWeVOQInljdow73pJL3rfTOFLOq0oq0niHdJUzMrZezAHsAicL\nkGDwoLZ1SZfi77BDC9Vf6r+HSbKdreUlniTm/cmawSozbA4SRjO2p/GhiFMkdd0M\njNTUFirBgHjUJe+4avnEngDKRFhn4h7HXHZB6ba6CxxFO/XDGHYLGvTLnR2X941t\nuvRstyeJY1iENA11xu6vroCiFl2X1qzOSVNbB02mdTbe8HObS6C/fjKm9hlNMjbi\nF3/o+8ZG7Ph73zF9GqXn3njPenN4RsaHWS4dE0ABDKMBxS5DoubJrmOy16jw8TQ=\n=KEMv\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ca9bb1a40af3badf72591121aae373e6a4e2287\nparent 7b9ef2fde4233a30b15bc7b92004a4cc0bb22dc5\nparent a9c61888896da6feea45875813b894e7fa4067f6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045110 +0100\ncommitter GitHub <noreply@github.com> 1614045110 +0100\n\nRollup merge of #82091 - henryboisdequin:use-place-ref-more, r=RalfJung\n\nuse PlaceRef abstractions more consistently\n\nAddresses this [comment](https://github.com/rust-lang/rust/pull/80865/files#r558978715)\nAssociated issue: #80647\n\nr? ```@RalfJung```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc07061190713059dc533f68a450799dbfb70c5e", "html_url": "https://github.com/rust-lang/rust/commit/cc07061190713059dc533f68a450799dbfb70c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc07061190713059dc533f68a450799dbfb70c5e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b9ef2fde4233a30b15bc7b92004a4cc0bb22dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9ef2fde4233a30b15bc7b92004a4cc0bb22dc5", "html_url": "https://github.com/rust-lang/rust/commit/7b9ef2fde4233a30b15bc7b92004a4cc0bb22dc5"}, {"sha": "a9c61888896da6feea45875813b894e7fa4067f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c61888896da6feea45875813b894e7fa4067f6", "html_url": "https://github.com/rust-lang/rust/commit/a9c61888896da6feea45875813b894e7fa4067f6"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "289629d921545b87bd0167257e0ae8b66d14ee58", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=cc07061190713059dc533f68a450799dbfb70c5e", "patch": "@@ -199,7 +199,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             }\n \n             self.visit_local(&place_ref.local, context, location);\n-            self.visit_projection(place_ref.local, place_ref.projection, context, location);\n+            self.visit_projection(*place_ref, context, location);\n         }\n     }\n }"}, {"sha": "9530efaedbce44e2b5a1ce2aeec6f8cc00871ddc", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=cc07061190713059dc533f68a450799dbfb70c5e", "patch": "@@ -998,12 +998,11 @@ macro_rules! visit_place_fns {\n     () => {\n         fn visit_projection(\n             &mut self,\n-            local: Local,\n-            projection: &[PlaceElem<'tcx>],\n+            place_ref: PlaceRef<'tcx>,\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            self.super_projection(local, projection, context, location);\n+            self.super_projection(place_ref, context, location);\n         }\n \n         fn visit_projection_elem(\n@@ -1033,20 +1032,20 @@ macro_rules! visit_place_fns {\n \n             self.visit_local(&place.local, context, location);\n \n-            self.visit_projection(place.local, &place.projection, context, location);\n+            self.visit_projection(place.as_ref(), context, location);\n         }\n \n         fn super_projection(\n             &mut self,\n-            local: Local,\n-            projection: &[PlaceElem<'tcx>],\n+            place_ref: PlaceRef<'tcx>,\n             context: PlaceContext,\n             location: Location,\n         ) {\n-            let mut cursor = projection;\n+            // FIXME: Use PlaceRef::iter_projections, once that exists.\n+            let mut cursor = place_ref.projection;\n             while let &[ref proj_base @ .., elem] = cursor {\n                 cursor = proj_base;\n-                self.visit_projection_elem(local, cursor, elem, context, location);\n+                self.visit_projection_elem(place_ref.local, cursor, elem, context, location);\n             }\n         }\n "}, {"sha": "2d20f0d9547c1b75586deb3f8e017d5de1120815", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=cc07061190713059dc533f68a450799dbfb70c5e", "patch": "@@ -95,7 +95,7 @@ where\n \n         // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n         // place with one of the `Projection` variants of `PlaceContext`.\n-        self.visit_projection(local, projection, context, location);\n+        self.visit_projection(place.as_ref(), context, location);\n \n         match DefUse::for_place(context) {\n             // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use."}, {"sha": "a82636837122fa298fbb5e21678633cd1e59a31f", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=cc07061190713059dc533f68a450799dbfb70c5e", "patch": "@@ -515,7 +515,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         // Special-case reborrows to be more like a copy of a reference.\n         match *rvalue {\n             Rvalue::Ref(_, kind, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(reborrowed_place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match kind {\n                         BorrowKind::Shared => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n@@ -530,21 +530,21 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n             }\n             Rvalue::AddressOf(mutbl, place) => {\n-                if let Some(reborrowed_proj) = place_as_reborrow(self.tcx, self.body, place) {\n+                if let Some(reborrowed_place_ref) = place_as_reborrow(self.tcx, self.body, place) {\n                     let ctx = match mutbl {\n                         Mutability::Not => {\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_local(&place.local, ctx, location);\n-                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n+                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n             }\n@@ -1039,7 +1039,7 @@ fn place_as_reborrow(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     place: Place<'tcx>,\n-) -> Option<&'a [PlaceElem<'tcx>]> {\n+) -> Option<PlaceRef<'tcx>> {\n     match place.as_ref().last_projection() {\n         Some((place_base, ProjectionElem::Deref)) => {\n             // A borrow of a `static` also looks like `&(*_1)` in the MIR, but `_1` is a `const`\n@@ -1048,13 +1048,14 @@ fn place_as_reborrow(\n                 None\n             } else {\n                 // Ensure the type being derefed is a reference and not a raw pointer.\n-                //\n                 // This is sufficient to prevent an access to a `static mut` from being marked as a\n                 // reborrow, even if the check above were to disappear.\n                 let inner_ty = place_base.ty(body, tcx).ty;\n-                match inner_ty.kind() {\n-                    ty::Ref(..) => Some(place_base.projection),\n-                    _ => None,\n+\n+                if let ty::Ref(..) = inner_ty.kind() {\n+                    return Some(place_base);\n+                } else {\n+                    return None;\n                 }\n             }\n         }"}, {"sha": "ae4f15b3bbc4d10efc906c37cda28fbbfb76fc54", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07061190713059dc533f68a450799dbfb70c5e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=cc07061190713059dc533f68a450799dbfb70c5e", "patch": "@@ -413,8 +413,7 @@ impl UsedLocals {\n         } else {\n             // A definition. Although, it still might use other locals for indexing.\n             self.super_projection(\n-                place.local,\n-                &place.projection,\n+                place.as_ref(),\n                 PlaceContext::MutatingUse(MutatingUseContext::Projection),\n                 location,\n             );"}]}