{"sha": "e0eb1ba0db9c832a0385f31710edddd675feee14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWIxYmEwZGI5YzgzMmEwMzg1ZjMxNzEwZWRkZGQ2NzVmZWVlMTQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-23T19:36:19Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-08-23T19:38:57Z"}, "message": "fixed and extended tests, however...\n\n...there is still one confusing thing \u2013 see the _BAZ functions, which\nappear to be elided in the `compile-fail` test and defaulted in the\n\u00b4run-pass` test (if you uncomment line 73).", "tree": {"sha": "a1f80c6aa4c05318dab67529036a179884812742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f80c6aa4c05318dab67529036a179884812742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0eb1ba0db9c832a0385f31710edddd675feee14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb1ba0db9c832a0385f31710edddd675feee14", "html_url": "https://github.com/rust-lang/rust/commit/e0eb1ba0db9c832a0385f31710edddd675feee14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb1ba0db9c832a0385f31710edddd675feee14/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b9fea5cd10afe9d7b81d30b2b082f727aea255", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b9fea5cd10afe9d7b81d30b2b082f727aea255", "html_url": "https://github.com/rust-lang/rust/commit/a6b9fea5cd10afe9d7b81d30b2b082f727aea255"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "840307ea456e52c4f1273a0af9564da6b672b949", "filename": "src/test/compile-fail/rfc1623.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1ba0db9c832a0385f31710edddd675feee14/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1ba0db9c832a0385f31710edddd675feee14/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=e0eb1ba0db9c832a0385f31710edddd675feee14", "patch": "@@ -13,10 +13,21 @@\n fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 { a }\n \n // the boundaries of elision\n-static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 = \n-//~^ERROR: missing lifetime specifier\n+static NON_ELIDABLE_FN : &fn(&u8, &u8) -> &u8 =\n+//^ERROR: missing lifetime specifier\n         &(non_elidable as fn(&u8, &u8) -> &u8);\n \n+type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n+\n+fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n+\n+static STATIC_BAZ : &Baz<'static> = &(baz as Baz);\n+const CONST_BAZ : &Baz<'static> = &(baz as Baz);\n+\n fn main() {\n-    // nothing to do here\n+    let y = [1u8, 2, 3];\n+\n+    //surprisingly this appears to work, so lifetime < `'static` is valid\n+    assert_eq!(Some(1), STATIC_BAZ(y));\n+    assert_eq!(Some(1), CONST_BAZ(y));\n }"}, {"sha": "bd0420bb5067a98f19434ee958464dca5f72ec06", "filename": "src/test/run-pass/rfc1623.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb1ba0db9c832a0385f31710edddd675feee14/src%2Ftest%2Frun-pass%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb1ba0db9c832a0385f31710edddd675feee14/src%2Ftest%2Frun-pass%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1623.rs?ref=e0eb1ba0db9c832a0385f31710edddd675feee14", "patch": "@@ -11,48 +11,72 @@\n #![allow(dead_code)]\n \n // very simple test for a 'static static with default lifetime\n-static SOME_STATIC_STR : &str = \"&'static str\";\n-const SOME_CONST_STR : &str = \"&'static str\";\n+static STATIC_STR : &str = \"&'static str\";\n+const CONST_STR : &str = \"&'static str\";\n \n // this should be the same as without default:\n-static SOME_EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n-const SOME_EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n+static EXPLICIT_STATIC_STR : &'static str = \"&'static str\";\n+const EXPLICIT_CONST_STR : &'static str = \"&'static str\";\n \n // a function that elides to an unbound lifetime for both in- and output\n fn id_u8_slice(arg: &[u8]) -> &[u8] { arg }\n \n // one with a function, argument elided\n-static SOME_STATIC_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n+static STATIC_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n         &(id_u8_slice as fn(&[u8]) -> &[u8]);\n-const SOME_CONST_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n+const CONST_SIMPLE_FN : &fn(&[u8]) -> &[u8] =\n         &(id_u8_slice as fn(&[u8]) -> &[u8]);\n \n // this should be the same as without elision\n-static SOME_STATIC_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n+static STATIC_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n         &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n-const SOME_CONST_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n+const CONST_NON_ELIDED_fN : &for<'a> fn(&'a [u8]) -> &'a [u8] =\n         &(id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8]);\n \n // another function that elides, each to a different unbound lifetime\n fn multi_args(a: &u8, b: &u8, c: &u8) { }\n \n-static SOME_STATIC_MULTI_FN : &fn(&u8, &u8, &u8) =\n+static STATIC_MULTI_FN : &fn(&u8, &u8, &u8) =\n         &(multi_args as fn(&u8, &u8, &u8));\n-const SOME_CONST_MULTI_FN : &fn(&u8, &u8, &u8) =\n+const CONST_MULTI_FN : &fn(&u8, &u8, &u8) =\n         &(multi_args as fn(&u8, &u8, &u8));\n \n+struct Foo<'a> {\n+    bools: &'a [bool]\n+}\n+\n+static STATIC_FOO : Foo = Foo { bools: &[true, false] };\n+const CONST_FOO : Foo = Foo { bools: &[true, false] };\n+\n+type Bar<'a> = Foo<'a>;\n+\n+static STATIC_BAR : Bar = Bar { bools: &[true, false] };\n+const CONST_BAR : Bar = Bar { bools: &[true, false] };\n+\n+type Baz<'a> = fn(&'a [u8]) -> Option<u8>;\n+\n+fn baz(e: &[u8]) -> Option<u8> { e.first().map(|x| *x) }\n+\n+static STATIC_BAZ : &Baz = &(baz as Baz);\n+const CONST_BAZ : &Baz = &(baz as Baz);\n+\n+static BYTES : &[u8] = &[1, 2, 3];\n \n fn main() {\n     // make sure that the lifetime is actually elided (and not defaulted)\n     let x = &[1u8, 2, 3];\n-    SOME_STATIC_SIMPLE_FN(x);\n-    SOME_CONST_SIMPLE_FN(x);\n+    STATIC_SIMPLE_FN(x);\n+    CONST_SIMPLE_FN(x);\n+\n+    let y = &[1u8, 2, 3];\n+    STATIC_BAZ(BYTES);\n+    //CONST_BAZ(y); // strangely enough, this fails\n \n     // make sure this works with different lifetimes\n     let a = &1;\n     {\n         let b = &2;\n         let c = &3;\n-        SOME_CONST_MULTI_FN(a, b, c);\n+        CONST_MULTI_FN(a, b, c);\n     }\n }"}]}