{"sha": "266bab2ab0659d2c29666e0161238cb4c5abd763", "node_id": "C_kwDOAAsO6NoAKDI2NmJhYjJhYjA2NTlkMmMyOTY2NmUwMTYxMjM4Y2I0YzVhYmQ3NjM", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-13T08:30:59Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-28T20:09:29Z"}, "message": "make `get_relocations` private\n\nThis limits access to the relocations data a bit (instead of increasing it just\nfor the purposes of interning).", "tree": {"sha": "a2fb326728459bb90bcdb02e91398e997432c2c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2fb326728459bb90bcdb02e91398e997432c2c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266bab2ab0659d2c29666e0161238cb4c5abd763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266bab2ab0659d2c29666e0161238cb4c5abd763", "html_url": "https://github.com/rust-lang/rust/commit/266bab2ab0659d2c29666e0161238cb4c5abd763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266bab2ab0659d2c29666e0161238cb4c5abd763/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a0b2e2d0816bcf935b7d925f8f1d4225f7def7", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a0b2e2d0816bcf935b7d925f8f1d4225f7def7", "html_url": "https://github.com/rust-lang/rust/commit/97a0b2e2d0816bcf935b7d925f8f1d4225f7def7"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "c2a5b71b8f9d4f13aa876df28439af0f6249776b", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266bab2ab0659d2c29666e0161238cb4c5abd763/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266bab2ab0659d2c29666e0161238cb4c5abd763/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=266bab2ab0659d2c29666e0161238cb4c5abd763", "patch": "@@ -945,7 +945,7 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {\n \n     /// Returns whether the allocation has relocations for the entire range of the `AllocRef`.\n     pub(crate) fn has_relocations(&self) -> bool {\n-        !self.alloc.get_relocations(&self.tcx, self.range).is_empty()\n+        self.alloc.has_relocations(&self.tcx, self.range)\n     }\n }\n "}, {"sha": "1e2b53040d2d7d8b41f817ecacf3fea4a81dd142", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/266bab2ab0659d2c29666e0161238cb4c5abd763/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266bab2ab0659d2c29666e0161238cb4c5abd763/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=266bab2ab0659d2c29666e0161238cb4c5abd763", "patch": "@@ -537,21 +537,26 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n /// Relocations.\n impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Returns all relocations overlapping with the given pointer-offset pair.\n-    pub fn get_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> &[(Size, Tag)] {\n+    fn get_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> &[(Size, Tag)] {\n         // We have to go back `pointer_size - 1` bytes, as that one would still overlap with\n         // the beginning of this range.\n         let start = range.start.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);\n         self.relocations.range(Size::from_bytes(start)..range.end())\n     }\n \n+    /// Returns whether this allocation has relocations overlapping with the given range.\n+    ///\n+    /// Note: this function exists to allow `get_relocations` to be private, in order to somewhat\n+    /// limit access to relocations outside of the `Allocation` abstraction.\n+    ///\n+    pub fn has_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> bool {\n+        !self.get_relocations(cx, range).is_empty()\n+    }\n+\n     /// Checks that there are no relocations overlapping with the given range.\n     #[inline(always)]\n     fn check_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {\n-        if self.get_relocations(cx, range).is_empty() {\n-            Ok(())\n-        } else {\n-            Err(AllocError::ReadPointerAsBytes)\n-        }\n+        if self.has_relocations(cx, range) { Err(AllocError::ReadPointerAsBytes) } else { Ok(()) }\n     }\n \n     /// Removes all relocations inside the given range."}]}