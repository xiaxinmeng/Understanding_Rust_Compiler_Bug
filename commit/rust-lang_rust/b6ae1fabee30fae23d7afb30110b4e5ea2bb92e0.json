{"sha": "b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YWUxZmFiZWUzMGZhZTIzZDdhZmIzMDExMGI0ZTVlYTJiYjkyZTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T12:12:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T12:12:13Z"}, "message": "Rollup merge of #78278 - lcnr:predicate-visit, r=matthewjasper\n\nmove `visit_predicate` into `TypeVisitor`\n\nSeems easier than dealing with `PredicateVisitor` for me which I needed for object safety checks for `PredicateAtom::ConstEvaluatable`. Is there a reason I am missing for this split?\n\nr? @matthewjasper", "tree": {"sha": "6022dc3e557b2560f594410c0a03bb0ac97597c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6022dc3e557b2560f594410c0a03bb0ac97597c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflBodCRBK7hj4Ov3rIwAAdHIIADbHUb71rZxN3IG3aA/REBNL\nXRAtMRtGf/mslhL7DTGA3jxBGw8xE1nYgzE5Czs+KiqSRxcJc662IHzVcxjsccQG\nyB0HLTL9orF7utNNu7/3diqXvxfxas0IMYrWZIp/E94IgBlENoAsjTMiSTyE+8em\nfNzvfBoIGMFGKQ+HLRZhhXAfa8ZrSo7alHbx5tidkeB+sz8+91ECQcVf8hP/9jMn\n3TJbmMnuXdANZawGEzj69lrGF9bp7wDPVCckHUOUXjeVVnmwNjoI4Cyyu+eHy+3V\nzxcghWhpHgQZ3uyZlByQxUj/pikMmtJN5l96vD8c9m6AtR+r57I6bLFptjrKb7M=\n=idFp\n-----END PGP SIGNATURE-----\n", "payload": "tree 6022dc3e557b2560f594410c0a03bb0ac97597c6\nparent eaa982305d56f1925a74511a64c0802761684b4c\nparent 972d9e886ca8787b2b4223bd39a76ff0250dfcaf\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603541533 +0200\ncommitter GitHub <noreply@github.com> 1603541533 +0200\n\nRollup merge of #78278 - lcnr:predicate-visit, r=matthewjasper\n\nmove `visit_predicate` into `TypeVisitor`\n\nSeems easier than dealing with `PredicateVisitor` for me which I needed for object safety checks for `PredicateAtom::ConstEvaluatable`. Is there a reason I am missing for this split?\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "html_url": "https://github.com/rust-lang/rust/commit/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa982305d56f1925a74511a64c0802761684b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa982305d56f1925a74511a64c0802761684b4c", "html_url": "https://github.com/rust-lang/rust/commit/eaa982305d56f1925a74511a64c0802761684b4c"}, {"sha": "972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "html_url": "https://github.com/rust-lang/rust/commit/972d9e886ca8787b2b4223bd39a76ff0250dfcaf"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "0e5e22dcaae9f34134dfaf4250e51189a81e3534", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "patch": "@@ -30,8 +30,6 @@\n //!\n //! These methods return true to indicate that the visitor has found what it is\n //! looking for, and does not need to visit anything else.\n-\n-use crate::ty::structural_impls::PredicateVisitor;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -211,6 +209,10 @@ pub trait TypeVisitor<'tcx>: Sized {\n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n         c.super_visit_with(self)\n     }\n+\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> bool {\n+        p.super_visit_with(self)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -868,9 +870,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n             _ => ct.super_visit_with(self),\n         }\n     }\n-}\n \n-impl<'tcx> PredicateVisitor<'tcx> for HasEscapingVarsVisitor {\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n         predicate.inner.outer_exclusive_binder > self.outer_index\n     }\n@@ -903,9 +903,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n         flags.intersects(self.flags)\n     }\n-}\n \n-impl<'tcx> PredicateVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n@@ -914,6 +912,7 @@ impl<'tcx> PredicateVisitor<'tcx> for HasTypeFlagsVisitor {\n         predicate.inner.flags.intersects(self.flags)\n     }\n }\n+\n /// Collects all the late-bound regions at the innermost binding level\n /// into a hash set.\n struct LateBoundRegionsCollector {"}, {"sha": "53521d0e9f332021dc0df1933e8ee0a229a2b1b1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=b6ae1fabee30fae23d7afb30110b4e5ea2bb92e0", "patch": "@@ -1040,16 +1040,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-pub(super) trait PredicateVisitor<'tcx>: TypeVisitor<'tcx> {\n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool;\n-}\n-\n-impl<T: TypeVisitor<'tcx>> PredicateVisitor<'tcx> for T {\n-    default fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n-        predicate.super_visit_with(self)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))"}]}