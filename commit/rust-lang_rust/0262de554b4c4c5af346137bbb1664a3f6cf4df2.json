{"sha": "0262de554b4c4c5af346137bbb1664a3f6cf4df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjJkZTU1NGI0YzRjNWFmMzQ2MTM3YmJiMTY2NGEzZjZjZjRkZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-07T17:55:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-07T17:55:19Z"}, "message": "Auto merge of #73099 - Dylan-DPC:rollup-7u8f3m4, r=Dylan-DPC\n\nRollup of 2 pull requests\n\nSuccessful merges:\n\n - #72952 (run-make regression test for issue #70924.)\n - #72977 (Fix codegen tests for RISC-V)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e4ad3ca111e57d76d2fe4a49b246435f33eb265e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ad3ca111e57d76d2fe4a49b246435f33eb265e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0262de554b4c4c5af346137bbb1664a3f6cf4df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0262de554b4c4c5af346137bbb1664a3f6cf4df2", "html_url": "https://github.com/rust-lang/rust/commit/0262de554b4c4c5af346137bbb1664a3f6cf4df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0262de554b4c4c5af346137bbb1664a3f6cf4df2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9fdf642bab2bfcabe1829a4c82aaf055330661b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fdf642bab2bfcabe1829a4c82aaf055330661b", "html_url": "https://github.com/rust-lang/rust/commit/f9fdf642bab2bfcabe1829a4c82aaf055330661b"}, {"sha": "4dd5d5d4d603db29f148fe820e2fc3f1a6341527", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd5d5d4d603db29f148fe820e2fc3f1a6341527", "html_url": "https://github.com/rust-lang/rust/commit/4dd5d5d4d603db29f148fe820e2fc3f1a6341527"}], "stats": {"total": 181, "additions": 140, "deletions": 41}, "files": [{"sha": "4ed491dfb2b43b21fa32e85456761f963222a90f", "filename": "src/test/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -10,6 +10,7 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n+// ignore-riscv64\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "89c9bcee052fbf73427ebb581082c6b18d4b45e9", "filename": "src/test/codegen/abi-sysv64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -4,6 +4,7 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-riscv64 sysv64 not supported\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "25c155c949dcd62b2a2fc4e9b9a4a75c3d49967e", "filename": "src/test/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -4,6 +4,7 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-riscv64 x86-interrupt is not supported\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "24e3d3cd64b58ce41268ac8f83e821d9f0c79ee5", "filename": "src/test/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n+// ignore-riscv64\n+\n #![feature(link_llvm_intrinsics)]\n #![crate_type = \"lib\"]\n "}, {"sha": "7ff9c0d15e003a871234cdae8908bd2e345fd3a1", "filename": "src/test/codegen/catch-unwind.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -1,5 +1,14 @@\n // compile-flags: -O\n \n+// On x86 the closure is inlined in foo() producting something like\n+// define i32 @foo() [...] {\n+// tail call void @bar() [...]\n+// ret i32 0\n+// }\n+// On riscv the closure is another function, placed before fn foo so CHECK can't\n+// find it\n+// ignore-riscv64 FIXME\n+\n #![crate_type = \"lib\"]\n \n extern \"C\" {"}, {"sha": "adbeae454494ac8b95624878cff2ac34294b97f8", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -17,6 +17,7 @@\n // ignore-powerpc64le\n // ignore-powerpc\n // ignore-r600\n+// ignore-riscv64\n // ignore-amdgcn\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "c23c57c8c590097d8a5656364cd7b34a1beb83c2", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -7,6 +7,7 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n+// ignore-riscv64 see codegen/riscv-abi\n // ignore-windows\n // See repr-transparent.rs\n "}, {"sha": "07e5af11f3577042c050fdaa6d5455bd58c0e9ed", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -6,6 +6,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64 see codegen/riscv-abi\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "7647e0198769cc7bc6f94bcd0f7ee2017b08cea8", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -1,5 +1,8 @@\n // compile-flags: -C no-prepopulate-passes\n \n+// ignore-riscv64 riscv64 has an i128 type used with test_Vector\n+// see codegen/riscv-abi for riscv functiona call tests\n+\n #![crate_type=\"lib\"]\n #![feature(repr_simd, transparent_unions)]\n "}, {"sha": "f100a23a3189756c75006937c389be5e51d0f063", "filename": "src/test/codegen/riscv-abi/call-llvm-intrinsics.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+// only-riscv64\n+\n+#![feature(link_llvm_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        println!(\"A\");\n+    }\n+}\n+\n+extern {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+}\n+\n+pub fn do_call() {\n+    let _a = A;\n+\n+    unsafe {\n+        // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n+        // CHECK: store float 4.000000e+00, float* %{{.}}, align 4\n+        // CHECK: call float @llvm.sqrt.f32(float %{{.}}\n+        sqrt(4.0);\n+    }\n+}"}, {"sha": "180ba07764b61f0ccb1bca736cf1e06cab512f8c", "filename": "src/test/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -39,12 +39,12 @@ pub extern \"C\" fn f_scalar_4(x: i64) -> i64 {\n     x\n }\n \n-// CHECK: define float @f_fp_scalar_1(float)\n+// CHECK: define float @f_fp_scalar_1(float %0)\n #[no_mangle]\n pub extern \"C\" fn f_fp_scalar_1(x: f32) -> f32 {\n     x\n }\n-// CHECK: define double @f_fp_scalar_2(double)\n+// CHECK: define double @f_fp_scalar_2(double %0)\n #[no_mangle]\n pub extern \"C\" fn f_fp_scalar_2(x: f64) -> f64 {\n     x\n@@ -67,7 +67,7 @@ pub struct Tiny {\n     d: u16,\n }\n \n-// CHECK: define void @f_agg_tiny(i64)\n+// CHECK: define void @f_agg_tiny(i64 %0)\n #[no_mangle]\n pub extern \"C\" fn f_agg_tiny(mut e: Tiny) {\n     e.a += e.b;\n@@ -86,7 +86,7 @@ pub struct Small {\n     b: *mut i64,\n }\n \n-// CHECK: define void @f_agg_small([2 x i64])\n+// CHECK: define void @f_agg_small([2 x i64] %0)\n #[no_mangle]\n pub extern \"C\" fn f_agg_small(mut x: Small) {\n     x.a += unsafe { *x.b };\n@@ -104,7 +104,7 @@ pub struct SmallAligned {\n     a: i128,\n }\n \n-// CHECK: define void @f_agg_small_aligned(i128)\n+// CHECK: define void @f_agg_small_aligned(i128 %0)\n #[no_mangle]\n pub extern \"C\" fn f_agg_small_aligned(mut x: SmallAligned) {\n     x.a += x.a;\n@@ -130,7 +130,7 @@ pub extern \"C\" fn f_agg_large_ret(i: i32, j: i8) -> Large {\n     Large { a: 1, b: 2, c: 3, d: 4 }\n }\n \n-// CHECK: define void @f_scalar_stack_1(i64, [2 x i64], i128, %Large* {{.*}}%d, i8 zeroext %e, i8 signext %f, i8 %g, i8 %h)\n+// CHECK: define void @f_scalar_stack_1(i64 %0, [2 x i64] %1, i128 %2, %Large* {{.*}}%d, i8 zeroext %e, i8 signext %f, i8 %g, i8 %h)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_1(\n     a: Tiny,\n@@ -144,7 +144,7 @@ pub extern \"C\" fn f_scalar_stack_1(\n ) {\n }\n \n-// CHECK: define void @f_scalar_stack_2(%Large* {{.*}}sret{{.*}}, i64 %a, i128, i128, i64 %d, i8 zeroext %e, i8 %f, i8 %g)\n+// CHECK: define void @f_scalar_stack_2(%Large* {{.*}}sret{{.*}} %0, i64 %a, i128 %1, i128 %2, i64 %d, i8 zeroext %e, i8 %f, i8 %g)\n #[no_mangle]\n pub extern \"C\" fn f_scalar_stack_2(\n     a: u64,"}, {"sha": "0b6e1878d4d3e72376a5a357c8873b24dbc8bef3", "filename": "src/test/codegen/riscv-abi/riscv64-lp64d-abi.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64d-abi.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -4,7 +4,7 @@\n // only-linux\n #![crate_type = \"lib\"]\n \n-// CHECK: define void @f_fpr_tracking(double, double, double, double, double, double, double, double, i8 zeroext %i)\n+// CHECK: define void @f_fpr_tracking(double %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, i8 zeroext %i)\n #[no_mangle]\n pub extern \"C\" fn f_fpr_tracking(\n     a: f64,\n@@ -36,7 +36,7 @@ pub struct DoubleFloat {\n     g: f32,\n }\n \n-// CHECK: define void @f_double_s_arg(double)\n+// CHECK: define void @f_double_s_arg(double %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_s_arg(a: Double) {}\n \n@@ -46,7 +46,7 @@ pub extern \"C\" fn f_ret_double_s() -> Double {\n     Double { f: 1. }\n }\n \n-// CHECK: define void @f_double_double_s_arg({ double, double })\n+// CHECK: define void @f_double_double_s_arg({ double, double } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_double_s_arg(a: DoubleDouble) {}\n \n@@ -56,7 +56,7 @@ pub extern \"C\" fn f_ret_double_double_s() -> DoubleDouble {\n     DoubleDouble { f: 1., g: 2. }\n }\n \n-// CHECK: define void @f_double_float_s_arg({ double, float })\n+// CHECK: define void @f_double_float_s_arg({ double, float } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_float_s_arg(a: DoubleFloat) {}\n \n@@ -66,7 +66,7 @@ pub extern \"C\" fn f_ret_double_float_s() -> DoubleFloat {\n     DoubleFloat { f: 1., g: 2. }\n }\n \n-// CHECK: define void @f_double_double_s_arg_insufficient_fprs(double, double, double, double, double, double, double, [2 x i64])\n+// CHECK: define void @f_double_double_s_arg_insufficient_fprs(double %0, double %1, double %2, double %3, double %4, double %5, double %6, [2 x i64] %7)\n #[no_mangle]\n pub extern \"C\" fn f_double_double_s_arg_insufficient_fprs(\n     a: f64,\n@@ -104,7 +104,7 @@ pub struct DoubleInt64 {\n     i: i64,\n }\n \n-// CHECK: define void @f_double_int8_s_arg({ double, i8 })\n+// CHECK: define void @f_double_int8_s_arg({ double, i8 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_int8_s_arg(a: DoubleInt8) {}\n \n@@ -114,7 +114,7 @@ pub extern \"C\" fn f_ret_double_int8_s() -> DoubleInt8 {\n     DoubleInt8 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_double_int32_s_arg({ double, i32 })\n+// CHECK: define void @f_double_int32_s_arg({ double, i32 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_int32_s_arg(a: DoubleInt32) {}\n \n@@ -124,7 +124,7 @@ pub extern \"C\" fn f_ret_double_int32_s() -> DoubleInt32 {\n     DoubleInt32 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_double_uint8_s_arg({ double, i8 })\n+// CHECK: define void @f_double_uint8_s_arg({ double, i8 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_uint8_s_arg(a: DoubleUInt8) {}\n \n@@ -134,7 +134,7 @@ pub extern \"C\" fn f_ret_double_uint8_s() -> DoubleUInt8 {\n     DoubleUInt8 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_double_int64_s_arg({ double, i64 })\n+// CHECK: define void @f_double_int64_s_arg({ double, i64 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_int64_s_arg(a: DoubleInt64) {}\n \n@@ -144,7 +144,7 @@ pub extern \"C\" fn f_ret_double_int64_s() -> DoubleInt64 {\n     DoubleInt64 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_double_int8_s_arg_insufficient_gprs(i32 signext %a, i32 signext %b, i32 signext %c, i32 signext %d, i32 signext %e, i32 signext %f, i32 signext %g, i32 signext %h, [2 x i64])\n+// CHECK: define void @f_double_int8_s_arg_insufficient_gprs(i32 signext %a, i32 signext %b, i32 signext %c, i32 signext %d, i32 signext %e, i32 signext %f, i32 signext %g, i32 signext %h, [2 x i64] %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_int8_s_arg_insufficient_gprs(\n     a: i32,\n@@ -159,7 +159,7 @@ pub extern \"C\" fn f_double_int8_s_arg_insufficient_gprs(\n ) {\n }\n \n-// CHECK: define void @f_struct_double_int8_insufficient_fprs(float, double, double, double, double, double, double, double, [2 x i64])\n+// CHECK: define void @f_struct_double_int8_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, [2 x i64] %8)\n #[no_mangle]\n pub extern \"C\" fn f_struct_double_int8_insufficient_fprs(\n     a: f32,\n@@ -179,7 +179,7 @@ pub struct DoubleArr1 {\n     a: [f64; 1],\n }\n \n-// CHECK: define void @f_doublearr1_s_arg(double)\n+// CHECK: define void @f_doublearr1_s_arg(double %0)\n #[no_mangle]\n pub extern \"C\" fn f_doublearr1_s_arg(a: DoubleArr1) {}\n \n@@ -194,7 +194,7 @@ pub struct DoubleArr2 {\n     a: [f64; 2],\n }\n \n-// CHECK: define void @f_doublearr2_s_arg({ double, double })\n+// CHECK: define void @f_doublearr2_s_arg({ double, double } %0)\n #[no_mangle]\n pub extern \"C\" fn f_doublearr2_s_arg(a: DoubleArr2) {}\n \n@@ -214,7 +214,7 @@ pub struct DoubleArr2Tricky1 {\n     g: [Tricky1; 2],\n }\n \n-// CHECK: define void @f_doublearr2_tricky1_s_arg({ double, double })\n+// CHECK: define void @f_doublearr2_tricky1_s_arg({ double, double } %0)\n #[no_mangle]\n pub extern \"C\" fn f_doublearr2_tricky1_s_arg(a: DoubleArr2Tricky1) {}\n \n@@ -233,7 +233,7 @@ pub struct DoubleArr2Tricky2 {\n     g: [Tricky1; 2],\n }\n \n-// CHECK: define void @f_doublearr2_tricky2_s_arg({ double, double })\n+// CHECK: define void @f_doublearr2_tricky2_s_arg({ double, double } %0)\n #[no_mangle]\n pub extern \"C\" fn f_doublearr2_tricky2_s_arg(a: DoubleArr2Tricky2) {}\n \n@@ -267,7 +267,7 @@ pub struct CharCharDouble {\n     c: f64,\n }\n \n-// CHECK: define void @f_char_char_double_s_arg([2 x i64])\n+// CHECK: define void @f_char_char_double_s_arg([2 x i64] %0)\n #[no_mangle]\n pub extern \"C\" fn f_char_char_double_s_arg(a: CharCharDouble) {}\n \n@@ -282,7 +282,7 @@ pub union DoubleU {\n     a: f64,\n }\n \n-// CHECK: define void @f_double_u_arg(i64)\n+// CHECK: define void @f_double_u_arg(i64 %0)\n #[no_mangle]\n pub extern \"C\" fn f_double_u_arg(a: DoubleU) {}\n "}, {"sha": "1cea6e3db2a84ae0a95f29369d10e6004647fd9e", "filename": "src/test/codegen/riscv-abi/riscv64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64f-lp64d-abi.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -4,7 +4,7 @@\n // only-linux\n #![crate_type = \"lib\"]\n \n-// CHECK: define void @f_fpr_tracking(float, float, float, float, float, float, float, float, i8 zeroext %i)\n+// CHECK: define void @f_fpr_tracking(float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, i8 zeroext %i)\n #[no_mangle]\n pub extern \"C\" fn f_fpr_tracking(\n     a: f32,\n@@ -30,7 +30,7 @@ pub struct FloatFloat {\n     g: f32,\n }\n \n-// CHECK: define void @f_float_s_arg(float)\n+// CHECK: define void @f_float_s_arg(float %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_s_arg(a: Float) {}\n \n@@ -40,7 +40,7 @@ pub extern \"C\" fn f_ret_float_s() -> Float {\n     Float { f: 1. }\n }\n \n-// CHECK: define void @f_float_float_s_arg({ float, float })\n+// CHECK: define void @f_float_float_s_arg({ float, float } %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_float_s_arg(a: FloatFloat) {}\n \n@@ -50,7 +50,7 @@ pub extern \"C\" fn f_ret_float_float_s() -> FloatFloat {\n     FloatFloat { f: 1., g: 2. }\n }\n \n-// CHECK: define void @f_float_float_s_arg_insufficient_fprs(float, float, float, float, float, float, float, i64)\n+// CHECK: define void @f_float_float_s_arg_insufficient_fprs(float %0, float %1, float %2, float %3, float %4, float %5, float %6, i64 %7)\n #[no_mangle]\n pub extern \"C\" fn f_float_float_s_arg_insufficient_fprs(\n     a: f32,\n@@ -88,7 +88,7 @@ pub struct FloatInt64 {\n     i: i64,\n }\n \n-// CHECK: define void @f_float_int8_s_arg({ float, i8 })\n+// CHECK: define void @f_float_int8_s_arg({ float, i8 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_int8_s_arg(a: FloatInt8) {}\n \n@@ -98,7 +98,7 @@ pub extern \"C\" fn f_ret_float_int8_s() -> FloatInt8 {\n     FloatInt8 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_float_int32_s_arg({ float, i32 })\n+// CHECK: define void @f_float_int32_s_arg({ float, i32 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_int32_s_arg(a: FloatInt32) {}\n \n@@ -108,7 +108,7 @@ pub extern \"C\" fn f_ret_float_int32_s() -> FloatInt32 {\n     FloatInt32 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_float_uint8_s_arg({ float, i8 })\n+// CHECK: define void @f_float_uint8_s_arg({ float, i8 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_uint8_s_arg(a: FloatUInt8) {}\n \n@@ -118,7 +118,7 @@ pub extern \"C\" fn f_ret_float_uint8_s() -> FloatUInt8 {\n     FloatUInt8 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_float_int64_s_arg({ float, i64 })\n+// CHECK: define void @f_float_int64_s_arg({ float, i64 } %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_int64_s_arg(a: FloatInt64) {}\n \n@@ -128,7 +128,7 @@ pub extern \"C\" fn f_ret_float_int64_s() -> FloatInt64 {\n     FloatInt64 { f: 1., i: 2 }\n }\n \n-// CHECK: define void @f_float_int8_s_arg_insufficient_gprs(i32 signext %a, i32 signext %b, i32 signext %c, i32 signext %d, i32 signext %e, i32 signext %f, i32 signext %g, i32 signext %h, i64)\n+// CHECK: define void @f_float_int8_s_arg_insufficient_gprs(i32 signext %a, i32 signext %b, i32 signext %c, i32 signext %d, i32 signext %e, i32 signext %f, i32 signext %g, i32 signext %h, i64 %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_int8_s_arg_insufficient_gprs(\n     a: i32,\n@@ -143,7 +143,7 @@ pub extern \"C\" fn f_float_int8_s_arg_insufficient_gprs(\n ) {\n }\n \n-// CHECK: define void @f_struct_float_int8_insufficient_fprs(float, float, float, float, float, float, float, float, i64)\n+// CHECK: define void @f_struct_float_int8_insufficient_fprs(float %0, float %1, float %2,  float %3, float %4, float %5, float %6, float %7, i64 %8)\n #[no_mangle]\n pub extern \"C\" fn f_struct_float_int8_insufficient_fprs(\n     a: f32,\n@@ -163,7 +163,7 @@ pub struct FloatArr1 {\n     a: [f32; 1],\n }\n \n-// CHECK: define void @f_floatarr1_s_arg(float)\n+// CHECK: define void @f_floatarr1_s_arg(float %0)\n #[no_mangle]\n pub extern \"C\" fn f_floatarr1_s_arg(a: FloatArr1) {}\n \n@@ -178,7 +178,7 @@ pub struct FloatArr2 {\n     a: [f32; 2],\n }\n \n-// CHECK: define void @f_floatarr2_s_arg({ float, float })\n+// CHECK: define void @f_floatarr2_s_arg({ float, float } %0)\n #[no_mangle]\n pub extern \"C\" fn f_floatarr2_s_arg(a: FloatArr2) {}\n \n@@ -198,7 +198,7 @@ pub struct FloatArr2Tricky1 {\n     g: [Tricky1; 2],\n }\n \n-// CHECK: define void @f_floatarr2_tricky1_s_arg({ float, float })\n+// CHECK: define void @f_floatarr2_tricky1_s_arg({ float, float } %0)\n #[no_mangle]\n pub extern \"C\" fn f_floatarr2_tricky1_s_arg(a: FloatArr2Tricky1) {}\n \n@@ -217,7 +217,7 @@ pub struct FloatArr2Tricky2 {\n     g: [Tricky1; 2],\n }\n \n-// CHECK: define void @f_floatarr2_tricky2_s_arg({ float, float })\n+// CHECK: define void @f_floatarr2_tricky2_s_arg({ float, float } %0)\n #[no_mangle]\n pub extern \"C\" fn f_floatarr2_tricky2_s_arg(a: FloatArr2Tricky2) {}\n \n@@ -234,7 +234,7 @@ pub struct IntFloatInt {\n     c: i32,\n }\n \n-// CHECK: define void @f_int_float_int_s_arg([2 x i64])\n+// CHECK: define void @f_int_float_int_s_arg([2 x i64] %0)\n #[no_mangle]\n pub extern \"C\" fn f_int_float_int_s_arg(a: IntFloatInt) {}\n \n@@ -251,7 +251,7 @@ pub struct CharCharFloat {\n     c: f32,\n }\n \n-// CHECK: define void @f_char_char_float_s_arg(i64)\n+// CHECK: define void @f_char_char_float_s_arg(i64 %0)\n #[no_mangle]\n pub extern \"C\" fn f_char_char_float_s_arg(a: CharCharFloat) {}\n \n@@ -266,7 +266,7 @@ pub union FloatU {\n     a: f32,\n }\n \n-// CHECK: define void @f_float_u_arg(i64)\n+// CHECK: define void @f_float_u_arg(i64 %0)\n #[no_mangle]\n pub extern \"C\" fn f_float_u_arg(a: FloatU) {}\n "}, {"sha": "3e3222d4735adb8741dc6d172c752e1e698dbfba", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -5,6 +5,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "9a58ef1c37a80d447d698dffb69efc064363d776", "filename": "src/test/codegen/x86_mmx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_mmx.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -6,6 +6,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-s390x"}, {"sha": "50ff3dd56ce92ef35e689616cd8dcc88a8fe2c77", "filename": "src/test/run-make-fulldeps/incr-add-rust-src-component/Makefile", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2FMakefile?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -0,0 +1,44 @@\n+-include ../tools.mk\n+\n+# rust-lang/rust#70924: Test that if we add rust-src component in between two\n+# incremetnal compiles, the compiler does not ICE on the second.\n+\n+# This test uses `ln -s` rather than copying to save testing time, but its\n+# usage doesn't work on windows. So ignore windows.\n+\n+# ignore-windows\n+\n+SYSROOT:=$(shell $(RUSTC) --print sysroot)\n+FAKEROOT=$(TMPDIR)/fakeroot\n+INCR=$(TMPDIR)/incr\n+\n+# Make a local copy of the sysroot; then remove the rust-src part of it, if\n+# present, for the *first* build. Then put in a facsimile of the rust-src\n+# component for the second build, in order to expose the ICE from issue #70924.\n+#\n+# Note that it is much easier to just do `cp -a $(SYSROOT)/* $(FAKEROOT)` as a\n+# first step, but I am concerned that would be too expensive in a unit test\n+# compared to making symbolic links.\n+#\n+# Anyway, the pattern you'll see here is: For every prefix in\n+# root/lib/rustlib/src, link all of prefix parent content, then remove the\n+# prefix, then loop on the next prefix. This way, we basically create a copy of\n+# the context around root/lib/rustlib/src, and can freely add/remove the src\n+# component itself.\n+all:\n+\tmkdir $(FAKEROOT)\n+\tln -s $(SYSROOT)/* $(FAKEROOT)\n+\trm -f $(FAKEROOT)/lib\n+\tmkdir $(FAKEROOT)/lib\n+\tln -s $(SYSROOT)/lib/* $(FAKEROOT)/lib\n+\trm -f $(FAKEROOT)/lib/rustlib\n+\tmkdir $(FAKEROOT)/lib/rustlib\n+\tln -s $(SYSROOT)/lib/rustlib/* $(FAKEROOT)/lib/rustlib\n+\trm -f $(FAKEROOT)/lib/rustlib/src\n+\tmkdir $(FAKEROOT)/lib/rustlib/src\n+\tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\trm -f $(FAKEROOT)/lib/rustlib/src/rust\n+\t$(RUSTC) --sysroot $(FAKEROOT) -C incremental=$(INCR) main.rs\n+\tmkdir -p $(FAKEROOT)/lib/rustlib/src/rust/src/libstd\n+\ttouch $(FAKEROOT)/lib/rustlib/src/rust/src/libstd/lib.rs\n+\t$(RUSTC) --sysroot $(FAKEROOT) -C incremental=$(INCR) main.rs"}, {"sha": "f6320bcb04aa8f747f266e1105886837414fd921", "filename": "src/test/run-make-fulldeps/incr-add-rust-src-component/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262de554b4c4c5af346137bbb1664a3f6cf4df2/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fincr-add-rust-src-component%2Fmain.rs?ref=0262de554b4c4c5af346137bbb1664a3f6cf4df2", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(\"Hello World\");\n+}"}]}