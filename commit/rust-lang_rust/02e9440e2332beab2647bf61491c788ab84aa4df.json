{"sha": "02e9440e2332beab2647bf61491c788ab84aa4df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZTk0NDBlMjMzMmJlYWIyNjQ3YmY2MTQ5MWM3ODhhYjg0YWE0ZGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-03T20:59:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-03T22:04:11Z"}, "message": "Complete `while let`", "tree": {"sha": "a5f4e9e1b30beed2f7ce1fdb59b0b66f3ce3a189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f4e9e1b30beed2f7ce1fdb59b0b66f3ce3a189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e9440e2332beab2647bf61491c788ab84aa4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e9440e2332beab2647bf61491c788ab84aa4df", "html_url": "https://github.com/rust-lang/rust/commit/02e9440e2332beab2647bf61491c788ab84aa4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e9440e2332beab2647bf61491c788ab84aa4df/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1914b7723f2f77a7259c65c888107e95f00d0ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1914b7723f2f77a7259c65c888107e95f00d0ba1", "html_url": "https://github.com/rust-lang/rust/commit/1914b7723f2f77a7259c65c888107e95f00d0ba1"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "03c6dd4547699d3c0d263f2140e871e824156c50", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e9440e2332beab2647bf61491c788ab84aa4df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e9440e2332beab2647bf61491c788ab84aa4df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=02e9440e2332beab2647bf61491c788ab84aa4df", "patch": "@@ -91,6 +91,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     if ctx.is_expr {\n         add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n         add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n+        add_keyword(ctx, acc, \"while let\", \"while let $1 = $0 {}\");\n         add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n         add_keyword(ctx, acc, \"if\", \"if $0 {}\");\n         add_keyword(ctx, acc, \"if let\", \"if let $1 = $0 {}\");\n@@ -269,6 +270,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -296,6 +298,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -323,6 +326,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -357,6 +361,7 @@ fn quux() -> i32 {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -406,6 +411,7 @@ fn quux() -> i32 {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -565,6 +571,7 @@ pub mod future {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -624,6 +631,7 @@ fn foo() {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let"}, {"sha": "72fb757b1687c471e690dcc706dde63c3b4933f1", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02e9440e2332beab2647bf61491c788ab84aa4df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e9440e2332beab2647bf61491c788ab84aa4df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=02e9440e2332beab2647bf61491c788ab84aa4df", "patch": "@@ -81,9 +81,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         return None;\n                     }\n                     match item {\n-                        hir::AssocItem::Function(func) => {\n-                            acc.add_function(ctx, func, None);\n-                        }\n+                        hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                         hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                         hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n@@ -110,9 +108,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     continue;\n                 }\n                 match item {\n-                    hir::AssocItem::Function(func) => {\n-                        acc.add_function(ctx, func, None);\n-                    }\n+                    hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                     hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                     hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                 }\n@@ -143,9 +139,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     // them.\n                     if seen.insert(item) {\n                         match item {\n-                            hir::AssocItem::Function(func) => {\n-                                acc.add_function(ctx, func, None);\n-                            }\n+                            hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                             hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                             hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                         }"}]}