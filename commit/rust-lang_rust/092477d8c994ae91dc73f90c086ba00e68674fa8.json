{"sha": "092477d8c994ae91dc73f90c086ba00e68674fa8", "node_id": "C_kwDOAAsO6NoAKDA5MjQ3N2Q4Yzk5NGFlOTFkYzczZjkwYzA4NmJhMDBlNjg2NzRmYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-26T21:41:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-26T21:41:44Z"}, "message": "Rollup merge of #91259 - jyn514:doctest-warnings, r=GuillaumeGomez\n\nRemove `--display-doctest-warnings`\n\n`--display-doctest-warnings` can be replicated in full with other existing features, there's no\nneed to have a separate option for it. This removes the option and documents the combination of other features to replicate it.\n\nThis also fixes a bug where `--test-args=--show-output` had no effect.\n\ncc `@ollie27,` https://github.com/rust-lang/rust/pull/73314#issuecomment-668317262\nFixes https://github.com/rust-lang/rust/issues/41574\n\nr? `@GuillaumeGomez`", "tree": {"sha": "7e66756005e23b898e4fcb052a961a61a2bb243a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e66756005e23b898e4fcb052a961a61a2bb243a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092477d8c994ae91dc73f90c086ba00e68674fa8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhoVSYCRBK7hj4Ov3rIwAAJXQIAIRuXilstAazp9elxeW/gVUB\nR3rZCpyycTruqHGhN7bbR3+vLotmsB/Pk8D59/vaxowRFtFuglzYgFnrLYy2/XVe\n20JQz/IZbvS4BhyTpWzbMwyQI16I0bLx+ZZDiAap25n/J233Uk96JT5wjnieoPcm\nGFObEbqoasyLx5R4rRb2gczDCCjQKwz9+jrUW3sQoZX9E6yHPG0FDZQm/FtQEmfG\nloQlCVR6GdeNJGik4Rd0XDCI2GN20BaqgXf9zJkh1hn3gFn8i6AnD4JIPtpO0sSJ\nNcaWjdxFJNpAPrG9cz8b5PiZx6vpou8OQBHhXF+65qvdc2Yw4hFpDJTHRBfuZSY=\n=Ordg\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e66756005e23b898e4fcb052a961a61a2bb243a\nparent 404235e039ac462b5a9facfbf89f959153504a53\nparent 7e4bf4bfc6a6048234d62923622636e5751b8c8f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637962904 +0100\ncommitter GitHub <noreply@github.com> 1637962904 +0100\n\nRollup merge of #91259 - jyn514:doctest-warnings, r=GuillaumeGomez\n\nRemove `--display-doctest-warnings`\n\n`--display-doctest-warnings` can be replicated in full with other existing features, there's no\nneed to have a separate option for it. This removes the option and documents the combination of other features to replicate it.\n\nThis also fixes a bug where `--test-args=--show-output` had no effect.\n\ncc `@ollie27,` https://github.com/rust-lang/rust/pull/73314#issuecomment-668317262\nFixes https://github.com/rust-lang/rust/issues/41574\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092477d8c994ae91dc73f90c086ba00e68674fa8", "html_url": "https://github.com/rust-lang/rust/commit/092477d8c994ae91dc73f90c086ba00e68674fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092477d8c994ae91dc73f90c086ba00e68674fa8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404235e039ac462b5a9facfbf89f959153504a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/404235e039ac462b5a9facfbf89f959153504a53", "html_url": "https://github.com/rust-lang/rust/commit/404235e039ac462b5a9facfbf89f959153504a53"}, {"sha": "7e4bf4bfc6a6048234d62923622636e5751b8c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4bf4bfc6a6048234d62923622636e5751b8c8f", "html_url": "https://github.com/rust-lang/rust/commit/7e4bf4bfc6a6048234d62923622636e5751b8c8f"}], "stats": {"total": 142, "additions": 68, "deletions": 74}, "files": [{"sha": "6be53fb4cfed4c53fd5eca1f7fdf74d5f4eb9593", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -261,6 +261,16 @@ conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n so that `rustdoc` understands you want an implicit `Result`-returning function.\n \n+## Showing warnings in doctests\n+\n+You can show warnings in doctests by running `rustdoc --test --test-args=--show-output`\n+(or, if you're using cargo, `cargo test --doc -- --show-output`).\n+By default, this will still hide `unused` warnings, since so many examples use private functions;\n+you can add `#![warn(unused)]` to the top of your example if you want to see unused variables or dead code warnings.\n+You can also use [`#![doc(test(attr(warn(unused))))]`][test-attr] in the crate root to enable warnings globally.\n+\n+[test-attr]: ./the-doc-attribute.md#testattr\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "021040215437e0015697c4fd3554292193a3f08e", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -257,22 +257,6 @@ all these files are linked from every page, changing where they are can be cumbe\n specially cache them. This flag will rename all these files in the output to include the suffix in\n the filename. For example, `light.css` would become `light-suf.css` with the above command.\n \n-### `--display-doctest-warnings`: display warnings when documenting or running documentation tests\n-\n-Using this flag looks like this:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --display-doctest-warnings\n-$ rustdoc --test src/lib.rs -Z unstable-options --display-doctest-warnings\n-```\n-\n-The intent behind this flag is to allow the user to see warnings that occur within their library or\n-their documentation tests, which are usually suppressed. However, [due to a\n-bug][issue-display-warnings], this flag doesn't 100% work as intended. See the linked issue for\n-details.\n-\n-[issue-display-warnings]: https://github.com/rust-lang/rust/issues/41574\n-\n ### `--extern-html-root-url`: control how rustdoc links to non-local crates\n \n Using this flag looks like this:"}, {"sha": "7c23117cce3af43a52ced775b6a8da229e207d6d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -136,9 +136,6 @@ crate struct Options {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     crate manual_passes: Vec<String>,\n-    /// Whether to display warnings during doc generation or while gathering doctests. By default,\n-    /// all non-rustdoc-specific lints are allowed when generating docs.\n-    crate display_doctest_warnings: bool,\n     /// Whether to run the `calculate-doc-coverage` pass, which counts the number of public items\n     /// with and without documentation.\n     crate show_coverage: bool,\n@@ -197,7 +194,6 @@ impl fmt::Debug for Options {\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n-            .field(\"display_doctest_warnings\", &self.display_doctest_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n@@ -639,7 +635,6 @@ impl Options {\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n-        let display_doctest_warnings = matches.opt_present(\"display-doctest-warnings\");\n         let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n         let resource_suffix = matches.opt_str(\"resource-suffix\").unwrap_or_default();\n         let enable_minification = !matches.opt_present(\"disable-minification\");\n@@ -707,7 +702,6 @@ impl Options {\n             test_args,\n             default_passes,\n             manual_passes,\n-            display_doctest_warnings,\n             show_coverage,\n             crate_version,\n             test_run_directory,"}, {"sha": "56ccdfae1d8bc1bb2b62ff4254decc8aca379051", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -38,9 +38,6 @@ use crate::passes::span_of_attrs;\n crate struct TestOptions {\n     /// Whether to disable the default `extern crate my_crate;` when creating doctests.\n     crate no_crate_inject: bool,\n-    /// Whether to emit compilation warnings when compiling doctests. Setting this will suppress\n-    /// the default `#![allow(unused)]`.\n-    crate display_doctest_warnings: bool,\n     /// Additional crate-level attributes to add to doctests.\n     crate attrs: Vec<String>,\n }\n@@ -65,14 +62,16 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         }\n     });\n \n+    debug!(?lint_opts);\n+\n     let crate_types =\n         if options.proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n \n     let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n         crate_types,\n-        lint_opts: if !options.display_doctest_warnings { lint_opts } else { vec![] },\n+        lint_opts,\n         lint_cap: Some(options.lint_cap.unwrap_or(lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n@@ -106,7 +105,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     };\n \n     let test_args = options.test_args.clone();\n-    let display_doctest_warnings = options.display_doctest_warnings;\n     let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n@@ -118,8 +116,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             let collector = global_ctxt.enter(|tcx| {\n                 let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n \n-                let mut opts = scrape_test_config(crate_attrs);\n-                opts.display_doctest_warnings |= options.display_doctest_warnings;\n+                let opts = scrape_test_config(crate_attrs);\n                 let enable_per_target_ignores = options.enable_per_target_ignores;\n                 let mut collector = Collector::new(\n                     tcx.crate_name(LOCAL_CRATE),\n@@ -165,7 +162,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n-    run_tests(test_args, nocapture, display_doctest_warnings, tests);\n+    run_tests(test_args, nocapture, tests);\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -208,29 +205,19 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     Ok(())\n }\n \n-crate fn run_tests(\n-    mut test_args: Vec<String>,\n-    nocapture: bool,\n-    display_doctest_warnings: bool,\n-    tests: Vec<test::TestDescAndFn>,\n-) {\n+crate fn run_tests(mut test_args: Vec<String>, nocapture: bool, tests: Vec<test::TestDescAndFn>) {\n     test_args.insert(0, \"rustdoctest\".to_string());\n     if nocapture {\n         test_args.push(\"--nocapture\".to_string());\n     }\n-    test::test_main(\n-        &test_args,\n-        tests,\n-        Some(test::Options::new().display_output(display_doctest_warnings)),\n-    );\n+    test::test_main(&test_args, tests, None);\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n-    let mut opts =\n-        TestOptions { no_crate_inject: false, display_doctest_warnings: false, attrs: Vec::new() };\n+    let mut opts = TestOptions { no_crate_inject: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = attrs\n         .iter()\n@@ -510,7 +497,7 @@ crate fn make_test(\n     let mut prog = String::new();\n     let mut supports_color = false;\n \n-    if opts.attrs.is_empty() && !opts.display_doctest_warnings {\n+    if opts.attrs.is_empty() {\n         // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n         // lints that are commonly triggered in doctests. The crate-level test attributes are\n         // commonly used to make tests fail in case they trigger warnings, so having this there in"}, {"sha": "099609d0f912e50b10a9c5a418d11ccdc4fa010e", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -52,8 +52,7 @@ assert_eq!(2+2, 4);\n fn make_test_no_crate_inject() {\n     // Even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n     // adding it anyway.\n-    let opts =\n-        TestOptions { no_crate_inject: true, display_doctest_warnings: false, attrs: vec![] };\n+    let opts = TestOptions { no_crate_inject: true, attrs: vec![] };\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -215,20 +214,6 @@ assert_eq!(2+2, 4);\"\n     assert_eq!((output, len), (expected, 1));\n }\n \n-#[test]\n-fn make_test_display_doctest_warnings() {\n-    // If the user is asking to display doctest warnings, suppress the default `allow(unused)`.\n-    let mut opts = TestOptions::default();\n-    opts.display_doctest_warnings = true;\n-    let input = \"assert_eq!(2+2, 4);\";\n-    let expected = \"fn main() {\n-assert_eq!(2+2, 4);\n-}\"\n-    .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n-    assert_eq!((output, len), (expected, 1));\n-}\n-\n #[test]\n fn make_test_issues_21299_33731() {\n     let opts = TestOptions::default();"}, {"sha": "abb4bec5ca133c69366949290ac3c8a2bbaf58bc", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -131,7 +131,6 @@ crate fn test(options: Options) -> Result<(), String> {\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n-    opts.display_doctest_warnings = options.display_doctest_warnings;\n     let mut collector = Collector::new(\n         Symbol::intern(&options.input.display().to_string()),\n         options.clone(),\n@@ -146,11 +145,6 @@ crate fn test(options: Options) -> Result<(), String> {\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n-    crate::doctest::run_tests(\n-        options.test_args,\n-        options.nocapture,\n-        options.display_doctest_warnings,\n-        collector.tests,\n-    );\n+    crate::doctest::run_tests(options.test_args, options.nocapture, collector.tests);\n     Ok(())\n }"}, {"sha": "30b32c511b5fa715c3099be9d530d9ee7d33b694", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -1,9 +1,15 @@\n+// Test that `--show-output` has an effect and `allow(unused)` can be overriden.\n+\n // check-pass\n-// compile-flags:-Zunstable-options --display-doctest-warnings --test\n+// edition:2018\n+// compile-flags:--test --test-args=--show-output\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```\n+/// #![warn(unused)]\n /// let x = 12;\n+///\n+/// fn foo(x: &std::fmt::Display) {}\n /// ```\n pub fn foo() {}"}, {"sha": "f76dec1c85008b306be771406c2827d36686da8b", "filename": "src/test/rustdoc-ui/display-output.stdout", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/092477d8c994ae91dc73f90c086ba00e68674fa8/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout?ref=092477d8c994ae91dc73f90c086ba00e68674fa8", "patch": "@@ -1,24 +1,58 @@\n \n running 1 test\n-test $DIR/display-output.rs - foo (line 6) ... ok\n+test $DIR/display-output.rs - foo (line 9) ... ok\n \n successes:\n \n----- $DIR/display-output.rs - foo (line 6) stdout ----\n+---- $DIR/display-output.rs - foo (line 9) stdout ----\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/display-output.rs:13:12\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn std::fmt::Display`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+\n warning: unused variable: `x`\n-  --> $DIR/display-output.rs:7:5\n+  --> $DIR/display-output.rs:11:5\n    |\n LL | let x = 12;\n    |     ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n-   = note: `#[warn(unused_variables)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/display-output.rs:9:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n+\n+warning: unused variable: `x`\n+  --> $DIR/display-output.rs:13:8\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+warning: function is never used: `foo`\n+  --> $DIR/display-output.rs:13:4\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |    ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/display-output.rs:9:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n-warning: 1 warning emitted\n+warning: 4 warnings emitted\n \n \n \n successes:\n-    $DIR/display-output.rs - foo (line 6)\n+    $DIR/display-output.rs - foo (line 9)\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}]}