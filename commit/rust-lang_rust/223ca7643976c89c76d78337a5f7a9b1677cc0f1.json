{"sha": "223ca7643976c89c76d78337a5f7a9b1677cc0f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyM2NhNzY0Mzk3NmM4OWM3NmQ3ODMzN2E1ZjdhOWIxNjc3Y2MwZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T13:31:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-07T13:31:25Z"}, "message": "auto merge of #18721 : SimonSapin/rust/safer-enumset, r=alexcrichton\n\nAssert at run time instead. Fixes #13756.\r\n\r\nI\u2019d rather have this be detected at compile-time, but I don\u2019t know how to do that.", "tree": {"sha": "f320b9f07101a010124ea5a02ed5daf762fad25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f320b9f07101a010124ea5a02ed5daf762fad25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223ca7643976c89c76d78337a5f7a9b1677cc0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223ca7643976c89c76d78337a5f7a9b1677cc0f1", "html_url": "https://github.com/rust-lang/rust/commit/223ca7643976c89c76d78337a5f7a9b1677cc0f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223ca7643976c89c76d78337a5f7a9b1677cc0f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a57ec909e61ecabadfce11fb9b36b2fe3783df", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a57ec909e61ecabadfce11fb9b36b2fe3783df", "html_url": "https://github.com/rust-lang/rust/commit/97a57ec909e61ecabadfce11fb9b36b2fe3783df"}, {"sha": "d8ab2f87c1705bff4f212cfb6d00ee4770abc1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ab2f87c1705bff4f212cfb6d00ee4770abc1e1", "html_url": "https://github.com/rust-lang/rust/commit/d8ab2f87c1705bff4f212cfb6d00ee4770abc1e1"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "1acdaef9c91c1c98617525d28d23bdcf3199647c", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/223ca7643976c89c76d78337a5f7a9b1677cc0f1/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223ca7643976c89c76d78337a5f7a9b1677cc0f1/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=223ca7643976c89c76d78337a5f7a9b1677cc0f1", "patch": "@@ -43,7 +43,27 @@ impl<E:CLike+fmt::Show> fmt::Show for EnumSet<E> {\n     }\n }\n \n-/// An interface for casting C-like enum to uint and back.\n+/**\n+An interface for casting C-like enum to uint and back.\n+A typically implementation is as below.\n+\n+```{rust,ignore}\n+#[repr(uint)]\n+enum Foo {\n+    A, B, C\n+}\n+\n+impl CLike for Foo {\n+    fn to_uint(&self) -> uint {\n+        *self as uint\n+    }\n+\n+    fn from_uint(v: uint) -> Foo {\n+        unsafe { mem::transmute(v) }\n+    }\n+}\n+```\n+*/\n pub trait CLike {\n     /// Converts a C-like enum to a `uint`.\n     fn to_uint(&self) -> uint;\n@@ -52,7 +72,11 @@ pub trait CLike {\n }\n \n fn bit<E:CLike>(e: &E) -> uint {\n-    1 << e.to_uint()\n+    use core::uint;\n+    let value = e.to_uint();\n+    assert!(value < uint::BITS,\n+            \"EnumSet only supports up to {} variants.\", uint::BITS - 1);\n+    1 << value\n }\n \n impl<E:CLike> EnumSet<E> {\n@@ -378,4 +402,31 @@ mod test {\n         let elems = e_subtract.iter().collect();\n         assert_eq!(vec![A], elems)\n     }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_overflow() {\n+        #[allow(dead_code)]\n+        #[repr(uint)]\n+        enum Bar {\n+            V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n+            V10, V11, V12, V13, V14, V15, V16, V17, V18, V19,\n+            V20, V21, V22, V23, V24, V25, V26, V27, V28, V29,\n+            V30, V31, V32, V33, V34, V35, V36, V37, V38, V39,\n+            V40, V41, V42, V43, V44, V45, V46, V47, V48, V49,\n+            V50, V51, V52, V53, V54, V55, V56, V57, V58, V59,\n+            V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n+        }\n+        impl CLike for Bar {\n+            fn to_uint(&self) -> uint {\n+                *self as uint\n+            }\n+\n+            fn from_uint(v: uint) -> Bar {\n+                unsafe { mem::transmute(v) }\n+            }\n+        }\n+        let mut set = EnumSet::empty();\n+        set.add(V64);\n+    }\n }"}]}