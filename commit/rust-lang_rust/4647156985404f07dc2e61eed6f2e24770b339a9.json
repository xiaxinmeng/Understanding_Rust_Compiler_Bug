{"sha": "4647156985404f07dc2e61eed6f2e24770b339a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDcxNTY5ODU0MDRmMDdkYzJlNjFlZWQ2ZjJlMjQ3NzBiMzM5YTk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-15T04:35:56Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2018-03-15T04:35:56Z"}, "message": "replace `convert::Infallible` with `!`", "tree": {"sha": "f9b49b7440b8f7300f694efbcc67965c315f9901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b49b7440b8f7300f694efbcc67965c315f9901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4647156985404f07dc2e61eed6f2e24770b339a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4647156985404f07dc2e61eed6f2e24770b339a9", "html_url": "https://github.com/rust-lang/rust/commit/4647156985404f07dc2e61eed6f2e24770b339a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4647156985404f07dc2e61eed6f2e24770b339a9/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a0c691914b72d1ca54057914b4cee2bd097ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a0c691914b72d1ca54057914b4cee2bd097ae3", "html_url": "https://github.com/rust-lang/rust/commit/a8a0c691914b72d1ca54057914b4cee2bd097ae3"}], "stats": {"total": 48, "additions": 6, "deletions": 42}, "files": [{"sha": "a45f1ceab5ab24f41c8e9109e1bce194ea032cc8", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=4647156985404f07dc2e61eed6f2e24770b339a9", "patch": "@@ -48,25 +48,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-\n-/// A type used as the error type for implementations of fallible conversion\n-/// traits in cases where conversions cannot actually fail.\n-///\n-/// Because `Infallible` has no variants, a value of this type can never exist.\n-/// It is used only to satisfy trait signatures that expect an error type, and\n-/// signals to both the compiler and the user that the error case is impossible.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n-pub enum Infallible {}\n-\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl fmt::Display for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-        }\n-    }\n-}\n /// A cheap reference-to-reference conversion. Used to convert a value to a\n /// reference value within generic code.\n ///\n@@ -438,7 +419,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n // with an uninhabited error type.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n-    type Error = Infallible;\n+    type Error = !;\n \n     fn try_from(value: U) -> Result<Self, Self::Error> {\n         Ok(T::from(value))"}, {"sha": "faeb87cf944c94331d284f35062d34d34e423264", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=4647156985404f07dc2e61eed6f2e24770b339a9", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use convert::{Infallible, TryFrom};\n+use convert::TryFrom;\n use fmt;\n use intrinsics;\n use ops;\n@@ -3595,20 +3595,12 @@ impl fmt::Display for TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl From<Infallible> for TryFromIntError {\n-    fn from(infallible: Infallible) -> TryFromIntError {\n-        match infallible {\n-        }\n-    }\n-}\n-\n // no possible bounds violation\n macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n-            type Error = Infallible;\n+            type Error = !;\n \n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n@@ -3719,7 +3711,7 @@ try_from_lower_bounded!(isize, usize);\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8);\n     try_from_unbounded!(usize, u16, u32, u64, u128);\n@@ -3745,7 +3737,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16);\n     try_from_unbounded!(usize, u32, u64, u128);\n@@ -3771,7 +3763,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16, u32);\n     try_from_unbounded!(usize, u64, u128);"}, {"sha": "79bb6af168fa022d4113c432c10c5757ac759159", "filename": "src/libstd/error.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4647156985404f07dc2e61eed6f2e24770b339a9/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4647156985404f07dc2e61eed6f2e24770b339a9", "patch": "@@ -56,7 +56,6 @@ use any::TypeId;\n use borrow::Cow;\n use cell;\n use char;\n-use convert;\n use core::array;\n use fmt::{self, Debug, Display};\n use mem::transmute;\n@@ -371,14 +370,6 @@ impl Error for char::ParseCharError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl Error for convert::Infallible {\n-    fn description(&self) -> &str {\n-        match *self {\n-        }\n-    }\n-}\n-\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}]}