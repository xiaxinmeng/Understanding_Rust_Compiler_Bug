{"sha": "256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "node_id": "C_kwDOAAsO6NoAKDI1NjcyMWVlNTE5ZjZmZjE1ZGM1YzFjZmFmM2ViZjlhZjc1ZWZhNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T03:46:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T03:46:19Z"}, "message": "Auto merge of #92553 - m-ou-se:thread-join-simplify, r=Mark-Simulacrum\n\nSimpilfy thread::JoinInner.\n\n`JoinInner`'s `native` field was an `Option`, but that's unnecessary.\n\nAlso, thanks to `Arc::get_mut`, there's no unsafety needed in `JoinInner::join()`.", "tree": {"sha": "e9ef6705d6784d0e68b441ffd061a8613491ee13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ef6705d6784d0e68b441ffd061a8613491ee13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "html_url": "https://github.com/rust-lang/rust/commit/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e916815d21e37af5cd85f9eb67cda155d7129fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e916815d21e37af5cd85f9eb67cda155d7129fff", "html_url": "https://github.com/rust-lang/rust/commit/e916815d21e37af5cd85f9eb67cda155d7129fff"}, {"sha": "a45b3ac1836b8d29a2a7b199aed169402aa01805", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45b3ac1836b8d29a2a7b199aed169402aa01805", "html_url": "https://github.com/rust-lang/rust/commit/a45b3ac1836b8d29a2a7b199aed169402aa01805"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "546f8a15b706e1e05972916fe0f5224cdca1995a", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "patch": "@@ -498,12 +498,12 @@ impl Builder {\n             // exist after the thread has terminated, which is signaled by `Thread::join`\n             // returning.\n             native: unsafe {\n-                Some(imp::Thread::new(\n+                imp::Thread::new(\n                     stack_size,\n                     mem::transmute::<Box<dyn FnOnce() + 'a>, Box<dyn FnOnce() + 'static>>(\n                         Box::new(main),\n                     ),\n-                )?)\n+                )?\n             },\n             thread: my_thread,\n             packet: Packet(my_packet),\n@@ -1261,15 +1261,15 @@ unsafe impl<T: Sync> Sync for Packet<T> {}\n \n /// Inner representation for JoinHandle\n struct JoinInner<T> {\n-    native: Option<imp::Thread>,\n+    native: imp::Thread,\n     thread: Thread,\n     packet: Packet<T>,\n }\n \n impl<T> JoinInner<T> {\n-    fn join(&mut self) -> Result<T> {\n-        self.native.take().unwrap().join();\n-        unsafe { (*self.packet.0.get()).take().unwrap() }\n+    fn join(mut self) -> Result<T> {\n+        self.native.join();\n+        Arc::get_mut(&mut self.packet.0).unwrap().get_mut().take().unwrap()\n     }\n }\n \n@@ -1400,7 +1400,7 @@ impl<T> JoinHandle<T> {\n     /// join_handle.join().expect(\"Couldn't join on the associated thread\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn join(mut self) -> Result<T> {\n+    pub fn join(self) -> Result<T> {\n         self.0.join()\n     }\n \n@@ -1416,13 +1416,13 @@ impl<T> JoinHandle<T> {\n \n impl<T> AsInner<imp::Thread> for JoinHandle<T> {\n     fn as_inner(&self) -> &imp::Thread {\n-        self.0.native.as_ref().unwrap()\n+        &self.0.native\n     }\n }\n \n impl<T> IntoInner<imp::Thread> for JoinHandle<T> {\n     fn into_inner(self) -> imp::Thread {\n-        self.0.native.unwrap()\n+        self.0.native\n     }\n }\n "}]}