{"sha": "014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "node_id": "C_kwDOAAsO6NoAKDAxNGQzZWYxYTRiNjljNDMyOWFiYTllMGMyN2NkN2E4NjQ5ZTMzYzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-14T17:35:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-14T17:35:12Z"}, "message": "Merge #11458\n\n11458: Fix  Immovable generator syntax (static ||) not recognized #11448 r=Veykril a=bellau\n\n\n\nCo-authored-by: bellau <laurent.belmonte@gmail.com>", "tree": {"sha": "399a87abc5e75887618ae502c68f6b4ba1ab7d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399a87abc5e75887618ae502c68f6b4ba1ab7d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiCpLQCRBK7hj4Ov3rIwAAk6UIABKIio8PsEPkaj2Sty0yEGUo\nB02SWAxPG41+B7OtKdF4JZnAq1M6b4pxECtItbQipAnIDsm7iwMtOI7ZZ620nOMR\nSFK31wnZIfwpOTb2zjQzhZs+Mze8Dy8VJLaQ6ZrhKT1JHCHMuMu+WQLn7MMWnXdT\nV8DnGe3tDXVc76HykgSsxwudTT1j4IRItlqaT5Csj3RNq3a5dfRbLJ/EZfMhiLto\nTEfk/WtwOE0Ii3S6Bq1Mh1F08WwmQ/CMV6FFGSEfeUCXrMi1UWxAzQviHTvKL1RU\njPTpzVDmZBBGxBeL5cxmdfHCaqrajT22yOs297PmNpu9rFn+SaU2Ac9OMTfOG9k=\n=Fkp5\n-----END PGP SIGNATURE-----\n", "payload": "tree 399a87abc5e75887618ae502c68f6b4ba1ab7d9d\nparent 0247e5067606a0b642fcfa463a26acfaf8a26557\nparent 06452cd102dc78df4e26eeacfb8d0e3cf8a2b711\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644860112 +0000\ncommitter GitHub <noreply@github.com> 1644860112 +0000\n\nMerge #11458\n\n11458: Fix  Immovable generator syntax (static ||) not recognized #11448 r=Veykril a=bellau\n\n\n\nCo-authored-by: bellau <laurent.belmonte@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "html_url": "https://github.com/rust-lang/rust/commit/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0247e5067606a0b642fcfa463a26acfaf8a26557", "url": "https://api.github.com/repos/rust-lang/rust/commits/0247e5067606a0b642fcfa463a26acfaf8a26557", "html_url": "https://github.com/rust-lang/rust/commit/0247e5067606a0b642fcfa463a26acfaf8a26557"}, {"sha": "06452cd102dc78df4e26eeacfb8d0e3cf8a2b711", "url": "https://api.github.com/repos/rust-lang/rust/commits/06452cd102dc78df4e26eeacfb8d0e3cf8a2b711", "html_url": "https://github.com/rust-lang/rust/commit/06452cd102dc78df4e26eeacfb8d0e3cf8a2b711"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "4b7a1b31fbdfc6ee78df6ee330ef73515f0453bd", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "patch": "@@ -72,8 +72,12 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T!['('] => tuple_expr(p),\n         T!['['] => array_expr(p),\n         T![|] => closure_expr(p),\n-        T![move] if la == T![|] => closure_expr(p),\n-        T![async] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => closure_expr(p),\n+        T![static] | T![async] | T![move] if la == T![|] => closure_expr(p),\n+        T![static] | T![async] if la == T![move] && p.nth(2) == T![|] => closure_expr(p),\n+        T![static] if la == T![async] && p.nth(2) == T![|] => closure_expr(p),\n+        T![static] if la == T![async] && p.nth(2) == T![move] && p.nth(3) == T![|] => {\n+            closure_expr(p)\n+        }\n         T![if] => if_expr(p),\n \n         T![loop] => loop_expr(p, None),\n@@ -234,15 +238,27 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n //     async || {};\n //     move || {};\n //     async move || {};\n+//     static || {};\n+//     static move || {};\n+//     static async || {};\n+//     static async move || {};\n // }\n fn closure_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(\n         p.at(T![|])\n             || (p.at(T![move]) && p.nth(1) == T![|])\n             || (p.at(T![async]) && p.nth(1) == T![|])\n             || (p.at(T![async]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n+            || (p.at(T![static]) && p.nth(1) == T![|])\n+            || (p.at(T![static]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n+            || (p.at(T![static]) && p.nth(1) == T![async] && p.nth(2) == T![|])\n+            || (p.at(T![static])\n+                && p.nth(1) == T![async]\n+                && p.nth(2) == T![move]\n+                && p.nth(3) == T![|])\n     );\n     let m = p.start();\n+    p.eat(T![static]);\n     p.eat(T![async]);\n     p.eat(T![move]);\n     params::param_list_closure(p);"}, {"sha": "36d13cc977305face7954bf27f095ba52347e55f", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "patch": "@@ -230,7 +230,7 @@ fn opt_item_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         IDENT if p.at_contextual_kw(T![macro_rules]) && p.nth(1) == BANG => macro_rules(p, m),\n \n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::konst(p, m),\n-        T![static] => consts::static_(p, m),\n+        T![static] if (la == IDENT || la == T![_] || la == T![mut]) => consts::static_(p, m),\n \n         _ => return Err(m),\n     };"}, {"sha": "d01f9216642b2a0ff3609069c0585011867693dd", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs?ref=014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "patch": "@@ -6,4 +6,8 @@ fn foo() {\n     async || {};\n     move || {};\n     async move || {};\n+    static || {};\n+    static move || {};\n+    static async || {};\n+    static async move || {};\n }"}, {"sha": "bc54b018697be6a39ef65969c3dbe5cd54d69471", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.txt", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.txt?ref=014d3ef1a4b69c4329aba9e0c27cd7a8649e33c2", "patch": "@@ -135,6 +135,70 @@ SOURCE_FILE\n                 L_CURLY \"{\"\n                 R_CURLY \"}\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            STATIC_KW \"static\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            STATIC_KW \"static\"\n+            WHITESPACE \" \"\n+            MOVE_KW \"move\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            STATIC_KW \"static\"\n+            WHITESPACE \" \"\n+            ASYNC_KW \"async\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            STATIC_KW \"static\"\n+            WHITESPACE \" \"\n+            ASYNC_KW \"async\"\n+            WHITESPACE \" \"\n+            MOVE_KW \"move\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}]}