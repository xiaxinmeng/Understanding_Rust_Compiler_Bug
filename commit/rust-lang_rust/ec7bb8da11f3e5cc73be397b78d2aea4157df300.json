{"sha": "ec7bb8da11f3e5cc73be397b78d2aea4157df300", "node_id": "C_kwDOAAsO6NoAKGVjN2JiOGRhMTFmM2U1Y2M3M2JlMzk3Yjc4ZDJhZWE0MTU3ZGYzMDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T06:10:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T06:10:06Z"}, "message": "Auto merge of #109803 - matthiaskrgr:rollup-mojot7k, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #109598 (Improve documentation for str::replace() and str::replacen())\n - #109779 (Update gccjit and remove libc 0.1 dependency)\n - #109784 (Refactor glibc time64 support, riscv32 always has 64-bit `time_t`)\n - #109793 (add comment to `impl !Error for &str`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "87fc637f98e4a868337a0246028b14e5e29f19a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87fc637f98e4a868337a0246028b14e5e29f19a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7bb8da11f3e5cc73be397b78d2aea4157df300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7bb8da11f3e5cc73be397b78d2aea4157df300", "html_url": "https://github.com/rust-lang/rust/commit/ec7bb8da11f3e5cc73be397b78d2aea4157df300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7bb8da11f3e5cc73be397b78d2aea4157df300/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3e9c1f45981b47160543cfd882ca00e69bbfab", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3e9c1f45981b47160543cfd882ca00e69bbfab", "html_url": "https://github.com/rust-lang/rust/commit/eb3e9c1f45981b47160543cfd882ca00e69bbfab"}, {"sha": "ec276c7e672c6deae091f05b4ba29f7bbe44f4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec276c7e672c6deae091f05b4ba29f7bbe44f4cd", "html_url": "https://github.com/rust-lang/rust/commit/ec276c7e672c6deae091f05b4ba29f7bbe44f4cd"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "0f2e152f8ce5641b8a1f35836eff167822010106", "filename": "compiler/rustc_codegen_gcc/Cargo.lock", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ec7bb8da11f3e5cc73be397b78d2aea4157df300/compiler%2Frustc_codegen_gcc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ec7bb8da11f3e5cc73be397b78d2aea4157df300/compiler%2Frustc_codegen_gcc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2FCargo.lock?ref=ec7bb8da11f3e5cc73be397b78d2aea4157df300", "patch": "@@ -35,17 +35,17 @@ dependencies = [\n [[package]]\n name = \"gccjit\"\n version = \"1.0.0\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#eefb8c662d61477f34b7c32d26bcda5f1ef08432\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#fe242b7eb26980e6c78859d51c8d4cc1e43381a3\"\n dependencies = [\n  \"gccjit_sys\",\n ]\n \n [[package]]\n name = \"gccjit_sys\"\n version = \"0.0.1\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#eefb8c662d61477f34b7c32d26bcda5f1ef08432\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#fe242b7eb26980e6c78859d51c8d4cc1e43381a3\"\n dependencies = [\n- \"libc 0.1.12\",\n+ \"libc\",\n ]\n \n [[package]]\n@@ -64,7 +64,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\n dependencies = [\n  \"cfg-if\",\n- \"libc 0.2.112\",\n+ \"libc\",\n  \"wasi\",\n ]\n \n@@ -74,7 +74,7 @@ version = \"0.1.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n dependencies = [\n- \"libc 0.2.112\",\n+ \"libc\",\n ]\n \n [[package]]\n@@ -85,20 +85,14 @@ checksum = \"96bd995a092cac79868250589869b5a5d656b02a02bd74c8ebdc566dc7203090\"\n dependencies = [\n  \"fm\",\n  \"getopts\",\n- \"libc 0.2.112\",\n+ \"libc\",\n  \"num_cpus\",\n  \"termcolor\",\n  \"threadpool\",\n  \"wait-timeout\",\n  \"walkdir\",\n ]\n \n-[[package]]\n-name = \"libc\"\n-version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e32a70cf75e5846d53a673923498228bbec6a8624708a9ea5645f075d6276122\"\n-\n [[package]]\n name = \"libc\"\n version = \"0.2.112\"\n@@ -118,7 +112,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\n dependencies = [\n  \"hermit-abi\",\n- \"libc 0.2.112\",\n+ \"libc\",\n ]\n \n [[package]]\n@@ -133,7 +127,7 @@ version = \"0.8.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8\"\n dependencies = [\n- \"libc 0.2.112\",\n+ \"libc\",\n  \"rand_chacha\",\n  \"rand_core\",\n  \"rand_hc\",\n@@ -234,7 +228,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22\"\n dependencies = [\n  \"cfg-if\",\n- \"libc 0.2.112\",\n+ \"libc\",\n  \"rand\",\n  \"redox_syscall\",\n  \"remove_dir_all\",\n@@ -271,7 +265,7 @@ version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6\"\n dependencies = [\n- \"libc 0.2.112\",\n+ \"libc\",\n ]\n \n [[package]]"}, {"sha": "b87ef59f64a3b9e2a9a3536a92690a0e068a8498", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=ec7bb8da11f3e5cc73be397b78d2aea4157df300", "patch": "@@ -256,7 +256,7 @@ impl str {\n     /// assert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n     /// ```\n     ///\n-    /// When the pattern doesn't match:\n+    /// When the pattern doesn't match, it returns this string slice as [`String`]:\n     ///\n     /// ```\n     /// let s = \"this is old\";\n@@ -297,7 +297,7 @@ impl str {\n     /// assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n     /// ```\n     ///\n-    /// When the pattern doesn't match:\n+    /// When the pattern doesn't match, it returns this string slice as [`String`]:\n     ///\n     /// ```\n     /// let s = \"this is old\";"}, {"sha": "041694299496742795906e21bfc16fd9e8f72e0b", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=ec7bb8da11f3e5cc73be397b78d2aea4157df300", "patch": "@@ -2655,5 +2655,6 @@ impl_fn_for_zst! {\n     };\n }\n \n+// This is required to make `impl From<&str> for Box<dyn Error>` and `impl<E> From<E> for Box<dyn Error>` not overlap.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl !crate::error::Error for &str {}"}, {"sha": "6f53583409db2883d39dfa204816e5a849f643f7", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7bb8da11f3e5cc73be397b78d2aea4157df300/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=ec7bb8da11f3e5cc73be397b78d2aea4157df300", "patch": "@@ -174,6 +174,34 @@ impl From<libc::timespec> for Timespec {\n     }\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+#[repr(C)]\n+pub(in crate::sys::unix) struct __timespec64 {\n+    pub(in crate::sys::unix) tv_sec: i64,\n+    #[cfg(target_endian = \"big\")]\n+    _padding: i32,\n+    pub(in crate::sys::unix) tv_nsec: i32,\n+    #[cfg(target_endian = \"little\")]\n+    _padding: i32,\n+}\n+\n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl From<__timespec64> for Timespec {\n+    fn from(t: __timespec64) -> Timespec {\n+        Timespec::new(t.tv_sec, t.tv_nsec.into())\n+    }\n+}\n+\n #[cfg(any(\n     all(target_os = \"macos\", any(not(target_arch = \"aarch64\"))),\n     target_os = \"ios\",\n@@ -352,29 +380,23 @@ mod inner {\n     impl Timespec {\n         pub fn now(clock: libc::clockid_t) -> Timespec {\n             // Try to use 64-bit time in preparation for Y2038.\n-            #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\"))]\n+            #[cfg(all(\n+                target_os = \"linux\",\n+                target_env = \"gnu\",\n+                target_pointer_width = \"32\",\n+                not(target_arch = \"riscv32\")\n+            ))]\n             {\n                 use crate::sys::weak::weak;\n \n                 // __clock_gettime64 was added to 32-bit arches in glibc 2.34,\n                 // and it handles both vDSO calls and ENOSYS fallbacks itself.\n-                weak!(fn __clock_gettime64(libc::clockid_t, *mut __timespec64) -> libc::c_int);\n-\n-                #[repr(C)]\n-                struct __timespec64 {\n-                    tv_sec: i64,\n-                    #[cfg(target_endian = \"big\")]\n-                    _padding: i32,\n-                    tv_nsec: i32,\n-                    #[cfg(target_endian = \"little\")]\n-                    _padding: i32,\n-                }\n+                weak!(fn __clock_gettime64(libc::clockid_t, *mut super::__timespec64) -> libc::c_int);\n \n                 if let Some(clock_gettime64) = __clock_gettime64.get() {\n                     let mut t = MaybeUninit::uninit();\n                     cvt(unsafe { clock_gettime64(clock, t.as_mut_ptr()) }).unwrap();\n-                    let t = unsafe { t.assume_init() };\n-                    return Timespec::new(t.tv_sec, t.tv_nsec as i64);\n+                    return Timespec::from(unsafe { t.assume_init() });\n                 }\n             }\n "}]}