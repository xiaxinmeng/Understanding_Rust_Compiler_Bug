{"sha": "4eaadd622d21948c488a4952b3c65fd5b9d852dc", "node_id": "C_kwDOAAsO6NoAKDRlYWFkZDYyMmQyMTk0OGM0ODhhNDk1MmIzYzY1ZmQ1YjlkODUyZGM", "commit": {"author": {"name": "Nahua Kang", "email": "kangnahua@gmail.com", "date": "2022-08-23T17:50:34Z"}, "committer": {"name": "Nahua Kang", "email": "kangnahua@gmail.com", "date": "2022-08-23T18:02:58Z"}, "message": "Run cargo dev bless to update fixes & stderr", "tree": {"sha": "534cf0ec242a0b7e3f730f3739bb4fe16d2d5b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534cf0ec242a0b7e3f730f3739bb4fe16d2d5b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eaadd622d21948c488a4952b3c65fd5b9d852dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eaadd622d21948c488a4952b3c65fd5b9d852dc", "html_url": "https://github.com/rust-lang/rust/commit/4eaadd622d21948c488a4952b3c65fd5b9d852dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eaadd622d21948c488a4952b3c65fd5b9d852dc/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee1c24f28029162ad25614c092224cc94ba59ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee1c24f28029162ad25614c092224cc94ba59ff", "html_url": "https://github.com/rust-lang/rust/commit/5ee1c24f28029162ad25614c092224cc94ba59ff"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "928128785f49ae36a443abde46c065dac1968502", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4eaadd622d21948c488a4952b3c65fd5b9d852dc/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eaadd622d21948c488a4952b3c65fd5b9d852dc/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=4eaadd622d21948c488a4952b3c65fd5b9d852dc", "patch": "@@ -96,18 +96,18 @@ impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n                 );\n             } else {\n                 span_lint_and_sugg(\n-                    cx, \n+                    cx,\n                     EQUATABLE_IF_LET,\n                     expr.span,\n-                    \"this pattern matching can be expressed using `matches!`\", \n-                    \"try\", \n+                    \"this pattern matching can be expressed using `matches!`\",\n+                    \"try\",\n                     format!(\n                         \"matches!({}, {})\",\n                         snippet_with_context(cx, let_expr.init.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n                         snippet_with_context(cx, let_expr.pat.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n-                    ), \n+                    ),\n                     applicability,\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "9af2ba9627200e69d1840214c16f132ec492c729", "filename": "tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4eaadd622d21948c488a4952b3c65fd5b9d852dc/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4eaadd622d21948c488a4952b3c65fd5b9d852dc/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=4eaadd622d21948c488a4952b3c65fd5b9d852dc", "patch": "@@ -23,6 +23,11 @@ struct Struct {\n     b: bool,\n }\n \n+struct NoPartialEqStruct {\n+    a: i32,\n+    b: bool,\n+}\n+\n enum NotPartialEq {\n     A,\n     B,\n@@ -47,6 +52,7 @@ fn main() {\n     let e = Enum::UnitVariant;\n     let f = NotPartialEq::A;\n     let g = NotStructuralEq::A;\n+    let h = NoPartialEqStruct { a: 2, b: false };\n \n     // true\n \n@@ -66,10 +72,11 @@ fn main() {\n     if let Some(3 | 4) = c {}\n     if let Struct { a, b: false } = d {}\n     if let Struct { a: 2, b: x } = d {}\n-    if let NotPartialEq::A = f {}\n+    if matches!(f, NotPartialEq::A) {}\n     if g == NotStructuralEq::A {}\n-    if let Some(NotPartialEq::A) = Some(f) {}\n+    if matches!(Some(f), Some(NotPartialEq::A)) {}\n     if Some(g) == Some(NotStructuralEq::A) {}\n+    if matches!(h, NoPartialEqStruct { a: 2, b: false }) {}\n \n     macro_rules! m1 {\n         (x) => {"}, {"sha": "40ca75b8da22cbdf0e1f03bd6635604706baf0c8", "filename": "tests/ui/equatable_if_let.stderr", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4eaadd622d21948c488a4952b3c65fd5b9d852dc/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eaadd622d21948c488a4952b3c65fd5b9d852dc/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=4eaadd622d21948c488a4952b3c65fd5b9d852dc", "patch": "@@ -1,70 +1,88 @@\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:53:8\n+  --> $DIR/equatable_if_let.rs:59:8\n    |\n LL |     if let 2 = a {}\n    |        ^^^^^^^^^ help: try: `a == 2`\n    |\n    = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:54:8\n+  --> $DIR/equatable_if_let.rs:60:8\n    |\n LL |     if let Ordering::Greater = a.cmp(&b) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:55:8\n+  --> $DIR/equatable_if_let.rs:61:8\n    |\n LL |     if let Some(2) = c {}\n    |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:56:8\n+  --> $DIR/equatable_if_let.rs:62:8\n    |\n LL |     if let Struct { a: 2, b: false } = d {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:57:8\n+  --> $DIR/equatable_if_let.rs:63:8\n    |\n LL |     if let Enum::TupleVariant(32, 64) = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:58:8\n+  --> $DIR/equatable_if_let.rs:64:8\n    |\n LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:59:8\n+  --> $DIR/equatable_if_let.rs:65:8\n    |\n LL |     if let Enum::UnitVariant = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:60:8\n+  --> $DIR/equatable_if_let.rs:66:8\n    |\n LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n \n+error: this pattern matching can be expressed using `matches!`\n+  --> $DIR/equatable_if_let.rs:75:8\n+   |\n+LL |     if let NotPartialEq::A = f {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(f, NotPartialEq::A)`\n+\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:70:8\n+  --> $DIR/equatable_if_let.rs:76:8\n    |\n LL |     if let NotStructuralEq::A = g {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n \n+error: this pattern matching can be expressed using `matches!`\n+  --> $DIR/equatable_if_let.rs:77:8\n+   |\n+LL |     if let Some(NotPartialEq::A) = Some(f) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(Some(f), Some(NotPartialEq::A))`\n+\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:72:8\n+  --> $DIR/equatable_if_let.rs:78:8\n    |\n LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n \n-error: this pattern matching can be expressed using equality\n+error: this pattern matching can be expressed using `matches!`\n   --> $DIR/equatable_if_let.rs:79:8\n    |\n+LL |     if let NoPartialEqStruct { a: 2, b: false } = h {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(h, NoPartialEqStruct { a: 2, b: false })`\n+\n+error: this pattern matching can be expressed using equality\n+  --> $DIR/equatable_if_let.rs:86:8\n+   |\n LL |     if let m1!(x) = \"abc\" {\n    |        ^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == m1!(x)`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 14 previous errors\n "}]}