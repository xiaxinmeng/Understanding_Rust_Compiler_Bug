{"sha": "85a05d1815217584c096ebc9d64b3a547b667f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTA1ZDE4MTUyMTc1ODRjMDk2ZWJjOWQ2NGIzYTU0N2I2NjdmNDg=", "commit": {"author": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-23T09:52:08Z"}, "committer": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-23T12:12:53Z"}, "message": "Light restructuring.", "tree": {"sha": "cec332995e4c2582eaeddd78faa4ba455e91d270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec332995e4c2582eaeddd78faa4ba455e91d270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a05d1815217584c096ebc9d64b3a547b667f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a05d1815217584c096ebc9d64b3a547b667f48", "html_url": "https://github.com/rust-lang/rust/commit/85a05d1815217584c096ebc9d64b3a547b667f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a05d1815217584c096ebc9d64b3a547b667f48/comments", "author": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3536359ad8b02933018a7b26f0ad6c3ed6f0c50e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3536359ad8b02933018a7b26f0ad6c3ed6f0c50e", "html_url": "https://github.com/rust-lang/rust/commit/3536359ad8b02933018a7b26f0ad6c3ed6f0c50e"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "8299dea1c4b0eec9c92b72f453dde86db4400b7f", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a05d1815217584c096ebc9d64b3a547b667f48/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/85a05d1815217584c096ebc9d64b3a547b667f48/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=85a05d1815217584c096ebc9d64b3a547b667f48", "patch": "@@ -2237,7 +2237,6 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "62eab40f3ec9a0aa2a459382b5f6238a71408243", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a05d1815217584c096ebc9d64b3a547b667f48/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85a05d1815217584c096ebc9d64b3a547b667f48/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=85a05d1815217584c096ebc9d64b3a547b667f48", "patch": "@@ -9,7 +9,6 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "6b19f4b779107bb10a729f28b69e2c2f898c5f5d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/85a05d1815217584c096ebc9d64b3a547b667f48/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a05d1815217584c096ebc9d64b3a547b667f48/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=85a05d1815217584c096ebc9d64b3a547b667f48", "patch": "@@ -18,7 +18,6 @@\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n extern crate rustc_typeck;\n@@ -150,7 +149,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        debug!(\"visit_item({:?})\", item);\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n             hir::ItemKind::Impl(..) => {\n@@ -161,21 +159,12 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ForeignMod(..) => {\n                 self.prev_level\n             }\n-            // Impl trait return types mark their parent function.\n-            // It (and its children) are revisited if the change applies.\n-            hir::ItemKind::Existential(ref ty_data) => {\n-                if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n-                    if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n-                        self.update(node_id, Some(AccessLevel::ReachableFromImplTrait));\n-                    }\n-                }\n-                if item.vis.node.is_pub() { self.prev_level } else { None }\n-            }\n             // Other `pub` items inherit levels from parents\n             hir::ItemKind::Const(..) | hir::ItemKind::Enum(..) | hir::ItemKind::ExternCrate(..) |\n             hir::ItemKind::GlobalAsm(..) | hir::ItemKind::Fn(..) | hir::ItemKind::Mod(..) |\n             hir::ItemKind::Static(..) | hir::ItemKind::Struct(..) |\n             hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) |\n+            hir::ItemKind::Existential(..) |\n             hir::ItemKind::Ty(..) | hir::ItemKind::Union(..) | hir::ItemKind::Use(..) => {\n                 if item.vis.node.is_pub() { self.prev_level } else { None }\n             }\n@@ -184,8 +173,6 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // Update level of the item itself\n         let item_level = self.update(item.id, inherited_item_level);\n \n-        debug!(\"item_level = {:?}\", item_level);\n-\n         // Update levels of nested things\n         match item.node {\n             hir::ItemKind::Enum(ref def, _) => {\n@@ -230,7 +217,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Existential(..) |\n+            // Impl trait return types mark their parent function.\n+            // It (and its children) are revisited if the change applies.\n+            hir::ItemKind::Existential(ref ty_data) => {\n+                if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n+                    if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n+                        self.update(node_id, Some(AccessLevel::ReachableFromImplTrait));\n+                    }\n+                }\n+            }\n             hir::ItemKind::Use(..) |\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n@@ -242,8 +237,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(..) => {}\n         }\n \n-        let orig_level = self.prev_level;\n-        self.prev_level = item_level;\n+        // Store this node's access level here to propagate the correct\n+        // reachability level through interfaces and children.\n+        let orig_level = replace(&mut self.prev_level, item_level);\n \n         // Mark all items in interfaces of reachable items as reachable\n         match item.node {\n@@ -1752,8 +1748,6 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     visitor.update(ast::CRATE_NODE_ID, Some(AccessLevel::Public));\n \n-    debug!(\"access levels after embargo: {:?}\", &visitor.access_levels);\n-\n     {\n         let mut visitor = ObsoleteVisiblePrivateTypesVisitor {\n             tcx,\n@@ -1783,8 +1777,6 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }\n \n-    debug!(\"final access levels: {:?}\", &visitor.access_levels);\n-\n     Lrc::new(visitor.access_levels)\n }\n "}]}