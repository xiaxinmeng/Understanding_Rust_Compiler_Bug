{"sha": "8ebdb37fd24435d08451625656cc53ebc814c3fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmRiMzdmZDI0NDM1ZDA4NDUxNjI1NjU2Y2M1M2ViYzgxNGMzZmE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-05T23:58:10Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:15Z"}, "message": "fix recv_ready for Port to take &self and not need to return a tuple. Close #8192.", "tree": {"sha": "9928f1d3d1179fd44ffd8001f6075ff55defa708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9928f1d3d1179fd44ffd8001f6075ff55defa708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebdb37fd24435d08451625656cc53ebc814c3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebdb37fd24435d08451625656cc53ebc814c3fa", "html_url": "https://github.com/rust-lang/rust/commit/8ebdb37fd24435d08451625656cc53ebc814c3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebdb37fd24435d08451625656cc53ebc814c3fa/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898226f39a5fcc4479899e9b90f616eb77d387b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/898226f39a5fcc4479899e9b90f616eb77d387b7", "html_url": "https://github.com/rust-lang/rust/commit/898226f39a5fcc4479899e9b90f616eb77d387b7"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "6dc44dd1193b9e57532df2ca6a55029ec4e307c4", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ebdb37fd24435d08451625656cc53ebc814c3fa/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebdb37fd24435d08451625656cc53ebc814c3fa/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=8ebdb37fd24435d08451625656cc53ebc814c3fa", "patch": "@@ -508,7 +508,11 @@ impl<T> Peekable<T> for Port<T> {\n     }\n }\n \n-impl<T> Select for Port<T> {\n+// XXX: Kind of gross. A Port<T> should be selectable so you can make an array\n+// of them, but a &Port<T> should also be selectable so you can select2 on it\n+// alongside a PortOne<U> without passing the port by value in recv_ready.\n+\n+impl<'self, T> Select for &'self Port<T> {\n     #[inline]\n     fn optimistic_check(&mut self) -> bool {\n         do self.next.with_mut_ref |pone| { pone.optimistic_check() }\n@@ -526,12 +530,29 @@ impl<T> Select for Port<T> {\n     }\n }\n \n-impl<T> SelectPort<(T, Port<T>)> for Port<T> {\n-    fn recv_ready(self) -> Option<(T, Port<T>)> {\n+impl<T> Select for Port<T> {\n+    #[inline]\n+    fn optimistic_check(&mut self) -> bool {\n+        (&*self).optimistic_check()\n+    }\n+\n+    #[inline]\n+    fn block_on(&mut self, sched: &mut Scheduler, task: BlockedTask) -> bool {\n+        (&*self).block_on(sched, task)\n+    }\n+\n+    #[inline]\n+    fn unblock_from(&mut self) -> bool {\n+        (&*self).unblock_from()\n+    }\n+}\n+\n+impl<'self, T> SelectPort<T> for &'self Port<T> {\n+    fn recv_ready(self) -> Option<T> {\n         match self.next.take().recv_ready() {\n             Some(StreamPayload { val, next }) => {\n                 self.next.put_back(next);\n-                Some((val, self))\n+                Some(val)\n             }\n             None => None\n         }"}, {"sha": "84ce36c3e6b5a36007f99ed280cf2b39a3b232a1", "filename": "src/libstd/rt/select.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebdb37fd24435d08451625656cc53ebc814c3fa/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebdb37fd24435d08451625656cc53ebc814c3fa/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=8ebdb37fd24435d08451625656cc53ebc814c3fa", "patch": "@@ -199,9 +199,7 @@ mod test {\n                 // get it back out\n                 util::swap(port.get_mut_ref(), &mut ports[index]);\n                 // NB. Not recv(), because optimistic_check randomly fails.\n-                let (data, new_port) = port.take_unwrap().recv_ready().unwrap();\n-                assert!(data == 31337);\n-                port = Some(new_port);\n+                assert!(port.get_ref().recv_ready().unwrap() == 31337);\n             }\n         }\n     }"}]}