{"sha": "00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "node_id": "C_kwDOAAsO6NoAKDAwZTMxZmE1YWYxODk1YmY4ZmYxZTJiMWUyNWIwNDEzNjJjZGMzM2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-03T17:46:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-03T17:46:15Z"}, "message": "Auto merge of #7925 - flip1995:backport, r=flip1995\n\n[beta] Backport: Move if_then_panic to pedantic and rename to manual_assert\n\nBackport of #7810\n\ncc `@camsteffen`\n\nr? `@ghost`\n\nchangelog: none (same release)", "tree": {"sha": "0dd893b960d39b60f594e7cb1abc49bf0601cc8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd893b960d39b60f594e7cb1abc49bf0601cc8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "html_url": "https://github.com/rust-lang/rust/commit/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f3f7f6082679da2da9a0b3faf1b5adef3afd3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f3f7f6082679da2da9a0b3faf1b5adef3afd3b", "html_url": "https://github.com/rust-lang/rust/commit/b7f3f7f6082679da2da9a0b3faf1b5adef3afd3b"}, {"sha": "d23a338543e6551154633546d680ad314024943e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23a338543e6551154633546d680ad314024943e", "html_url": "https://github.com/rust-lang/rust/commit/d23a338543e6551154633546d680ad314024943e"}], "stats": {"total": 184, "additions": 95, "deletions": 89}, "files": [{"sha": "fc788f471db6924f4bf52769a8947824d60c914d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -2746,7 +2746,6 @@ Released 2018-09-13\n [`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n-[`if_then_panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_panic\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n@@ -2804,6 +2803,7 @@ Released 2018-09-13\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n [`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n+[`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map"}, {"sha": "ce59311c4aa96acac5154ce00f02e3d0a746fa99", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 target_mut,\n                             },\n                         ));\n-                    }\n+                    },\n                     _ => (),\n                 }\n             },"}, {"sha": "57fd24bd4f04d81ca9263a905b84b258a100ae59", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -245,11 +245,14 @@ fn try_parse_contains(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(Map\n         ExprKind::MethodCall(\n             _,\n             _,\n-            [map, Expr {\n-                kind: ExprKind::AddrOf(_, _, key),\n-                span: key_span,\n-                ..\n-            }],\n+            [\n+                map,\n+                Expr {\n+                    kind: ExprKind::AddrOf(_, _, key),\n+                    span: key_span,\n+                    ..\n+                },\n+            ],\n             _,\n         ) if key_span.ctxt() == expr.span.ctxt() => {\n             let id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;"}, {"sha": "9247343b52a5322f8c7ee09eec77de8b655ffcff", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -169,13 +169,16 @@ fn check_inputs(cx: &LateContext<'_>, params: &[Param<'_>], call_args: &[Expr<'_\n         }\n         match *cx.typeck_results().expr_adjustments(arg) {\n             [] => true,\n-            [Adjustment {\n-                kind: Adjust::Deref(None),\n-                ..\n-            }, Adjustment {\n-                kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n-                ..\n-            }] => {\n+            [\n+                Adjustment {\n+                    kind: Adjust::Deref(None),\n+                    ..\n+                },\n+                Adjustment {\n+                    kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n+                    ..\n+                },\n+            ] => {\n                 // re-borrow with the same mutability is allowed\n                 let ty = cx.typeck_results().expr_ty(arg);\n                 matches!(*ty.kind(), ty::Ref(.., mu1) if mu1 == mu2.into())"}, {"sha": "6850e0c34767cb0864a002b5ce498c3cc157c5a8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -89,7 +89,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `x + 1 <= ...` or `1 + x <= ...`\n             (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _)\n                 if lhskind.node == BinOpKind::Add =>\n@@ -104,7 +104,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `... >= y - 1` or `... >= -1 + y`\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {"}, {"sha": "a02a3086b6110391189c178ca97717307e6c3f9e", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -74,7 +74,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),"}, {"sha": "111ce6c5a67ce78b8c4fab9563e22a0bbdb5e037", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -156,7 +156,6 @@ store.register_lints(&[\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n-    if_then_panic::IF_THEN_PANIC,\n     if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n     implicit_hasher::IMPLICIT_HASHER,\n     implicit_return::IMPLICIT_RETURN,\n@@ -213,6 +212,7 @@ store.register_lints(&[\n     loops::WHILE_LET_ON_ITERATOR,\n     macro_use::MACRO_USE_IMPORTS,\n     main_recursion::MAIN_RECURSION,\n+    manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_map::MANUAL_MAP,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,"}, {"sha": "a4b8109a359605865a66745013bb8f819a7df448", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -48,6 +48,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n     LintId::of(loops::EXPLICIT_ITER_LOOP),\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n+    LintId::of(manual_assert::MANUAL_ASSERT),\n     LintId::of(manual_ok_or::MANUAL_OK_OR),\n     LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_BOOL),"}, {"sha": "744880bda3e69c2a83763dc5d9b1a38ade7b6ec5", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -27,7 +27,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n     LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),"}, {"sha": "2caf4ed3367e851abdeba228b4e46f7f54f0036a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -227,7 +227,6 @@ mod get_last_with_len;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n-mod if_then_panic;\n mod if_then_some_else_none;\n mod implicit_hasher;\n mod implicit_return;\n@@ -254,6 +253,7 @@ mod literal_representation;\n mod loops;\n mod macro_use;\n mod main_recursion;\n+mod manual_assert;\n mod manual_async_fn;\n mod manual_map;\n mod manual_non_exhaustive;\n@@ -766,7 +766,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n-    store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n+    store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n     store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n }"}, {"sha": "f9f515cc40a0fbdd120af9de1358d4e92ba66ce7", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -338,7 +338,7 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n                     sugg::Sugg::hir_with_applicability(cx, arg_inner, \"_\", applic_ref).maybe_par(),\n                     meth_name,\n                 )\n-            }\n+            },\n             _ => format!(\n                 \"{}.into_iter()\",\n                 sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()"}, {"sha": "42c679e36480e10b3e5950cfb5d8e79bf34ff09a", "filename": "clippy_lints/src/manual_assert.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -26,14 +26,14 @@ declare_clippy_lint! {\n     /// let sad_people: Vec<&str> = vec![];\n     /// assert!(sad_people.is_empty(), \"there are sad people: {:?}\", sad_people);\n     /// ```\n-    pub IF_THEN_PANIC,\n-    style,\n+    pub MANUAL_ASSERT,\n+    pedantic,\n     \"`panic!` and only a `panic!` in `if`-then statement\"\n }\n \n-declare_lint_pass!(IfThenPanic => [IF_THEN_PANIC]);\n+declare_lint_pass!(ManualAssert => [MANUAL_ASSERT]);\n \n-impl LateLintPass<'_> for IfThenPanic {\n+impl LateLintPass<'_> for ManualAssert {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if let Expr {\n@@ -86,7 +86,7 @@ impl LateLintPass<'_> for IfThenPanic {\n \n                 span_lint_and_sugg(\n                     cx,\n-                    IF_THEN_PANIC,\n+                    MANUAL_ASSERT,\n                     expr.span,\n                     \"only a `panic!` in `if`-then statement\",\n                     \"try\",", "previous_filename": "clippy_lints/src/if_then_panic.rs"}, {"sha": "b4dacb2580c313fbc366aae7b251facfbdda215e", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -85,7 +85,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                     if expr.hir_id == self_arg.hir_id && ty != cx.typeck_results().expr_ty_adjusted(expr) =>\n                 {\n                     return;\n-                }\n+                },\n                 ExprKind::MethodCall(_, _, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n                 ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Field(..)\n@@ -100,7 +100,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                 ) =>\n             {\n                 return;\n-            }\n+            },\n             _ => false,\n         };\n "}, {"sha": "fe9ffde0d337c1f15506e73bdca1e0f373c88da5", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -186,7 +186,7 @@ pub(super) fn check<'tcx>(\n                         check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n                     }\n                 }\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "d41b54745649958de717e61f6d395bfbce0e62e5", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -106,7 +106,7 @@ impl EarlyLintPass for ModStyle {\n                     }\n                     process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n                     check_self_named_mod_exists(cx, path, file);\n-                }\n+                },\n                 _ => {},\n             }\n         }"}, {"sha": "f1be90c44f98b998901e0f4b2462722466c99d69", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -107,14 +107,18 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         if let ExprKind::AddrOf(BorrowKind::Ref, mutability, inner) = e.kind {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(inner).kind() {\n                 for adj3 in cx.typeck_results().expr_adjustments(e).windows(3) {\n-                    if let [Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Borrow(_),\n-                        ..\n-                    }] = *adj3\n+                    if let [\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Borrow(_),\n+                            ..\n+                        },\n+                    ] = *adj3\n                     {\n                         let help_msg_ty = if matches!(mutability, Mutability::Not) {\n                             format!(\"&{}\", ty)"}, {"sha": "5b71bb29c10a1763a81fdc7d5b92fcdc293bd40a", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -174,13 +174,13 @@ fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Op\n                         }\n                     });\n                 }\n-            }\n+            },\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)\n                     && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec) =>\n             {\n                 return Some(VecInitKind::New);\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "796c7dd70bfd449af67cd347a000fe225b96dcee", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -846,10 +846,13 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n     let mut capture_expr_ty = e;\n \n     for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n-        if let [Adjustment {\n-            kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n-            target,\n-        }, ref adjust @ ..] = *cx\n+        if let [\n+            Adjustment {\n+                kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n+                target,\n+            },\n+            ref adjust @ ..,\n+        ] = *cx\n             .typeck_results()\n             .adjustments()\n             .get(child_id)\n@@ -1234,9 +1237,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n     for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n-                e\n-                @\n-                Expr {\n+                e @ Expr {\n                     kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n                     ..\n                 },\n@@ -1698,10 +1699,12 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n pub fn get_async_fn_body(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if let ExprKind::Call(\n         _,\n-        &[Expr {\n-            kind: ExprKind::Closure(_, _, body, _, _),\n-            ..\n-        }],\n+        &[\n+            Expr {\n+                kind: ExprKind::Closure(_, _, body, _, _),\n+                ..\n+            },\n+        ],\n     ) = body.value.kind\n     {\n         if let ExprKind::Block("}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::fallible_impl_from)]\n-#![allow(clippy::if_then_panic)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "64c8ea857277e2af5b4a81e4390d55c2c7be23a3", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,5 +1,5 @@\n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:6:1\n+  --> $DIR/fallible_impl_from.rs:5:1\n    |\n LL | / impl From<String> for Foo {\n LL | |     fn from(s: String) -> Self {\n@@ -15,13 +15,13 @@ LL | #![deny(clippy::fallible_impl_from)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:8:13\n+  --> $DIR/fallible_impl_from.rs:7:13\n    |\n LL |         Foo(s.parse().unwrap())\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:27:1\n+  --> $DIR/fallible_impl_from.rs:26:1\n    |\n LL | / impl From<usize> for Invalid {\n LL | |     fn from(i: usize) -> Invalid {\n@@ -34,14 +34,14 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:30:13\n+  --> $DIR/fallible_impl_from.rs:29:13\n    |\n LL |             panic!();\n    |             ^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:36:1\n+  --> $DIR/fallible_impl_from.rs:35:1\n    |\n LL | / impl From<Option<String>> for Invalid {\n LL | |     fn from(s: Option<String>) -> Invalid {\n@@ -54,7 +54,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:38:17\n+  --> $DIR/fallible_impl_from.rs:37:17\n    |\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL |             panic!(\"{:?}\", s);\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:54:1\n+  --> $DIR/fallible_impl_from.rs:53:1\n    |\n LL | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n LL | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n@@ -81,7 +81,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:56:12\n+  --> $DIR/fallible_impl_from.rs:55:12\n    |\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9d461cff68d8806a78a1ef47536331b6abce3a52", "filename": "tests/ui/manual_assert.fixed", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::if_then_panic)]\n+#![warn(clippy::manual_assert)]\n \n fn main() {\n     let a = vec![1, 2, 3];", "previous_filename": "tests/ui/if_then_panic.fixed"}, {"sha": "6aadff887ca8dadfd8a55ac81009f90cae16e87d", "filename": "tests/ui/manual_assert.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::if_then_panic)]\n+#![warn(clippy::manual_assert)]\n \n fn main() {\n     let a = vec![1, 2, 3];", "previous_filename": "tests/ui/if_then_panic.rs"}, {"sha": "ab2786247b1debc3274f8afa80c3f6baf3f3ff33", "filename": "tests/ui/manual_assert.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fmanual_assert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.stderr?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,55 +1,55 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:19:5\n+  --> $DIR/manual_assert.rs:19:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n-   = note: `-D clippy::if-then-panic` implied by `-D warnings`\n+   = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:22:5\n+  --> $DIR/manual_assert.rs:22:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:39:5\n+  --> $DIR/manual_assert.rs:39:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:42:5\n+  --> $DIR/manual_assert.rs:42:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:45:5\n+  --> $DIR/manual_assert.rs:45:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:48:5\n+  --> $DIR/manual_assert.rs:48:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:51:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");", "previous_filename": "tests/ui/if_then_panic.stderr"}, {"sha": "06370dfce65188899dda939fb0dbee8e561c7170", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,9 +1,4 @@\n-#![allow(\n-    unused,\n-    clippy::many_single_char_names,\n-    clippy::redundant_clone,\n-    clippy::if_then_panic\n-)]\n+#![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;"}, {"sha": "64594eb870c2c5067b413095f6eabdeded968ebc", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00e31fa5af1895bf8ff1e2b1e25b041362cdc33e/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=00e31fa5af1895bf8ff1e2b1e25b041362cdc33e", "patch": "@@ -1,31 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:12:14\n+  --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:21:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:30:15\n+  --> $DIR/ptr_arg.rs:25:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:43:18\n+  --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:56:14\n+  --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:65:18\n+  --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -67,7 +67,7 @@ LL |     x.to_string()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:73:19\n+  --> $DIR/ptr_arg.rs:68:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:81:44\n+  --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -109,13 +109,13 @@ LL |     let c = y;\n    |             ~\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:95:25\n+  --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:148:21\n+  --> $DIR/ptr_arg.rs:143:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         let _ = vec.to_owned().clone();\n    |                 ~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:153:23\n+  --> $DIR/ptr_arg.rs:148:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -153,7 +153,7 @@ LL |         let _ = path.to_path_buf().clone();\n    |                 ~~~~~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:158:21\n+  --> $DIR/ptr_arg.rs:153:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^"}]}