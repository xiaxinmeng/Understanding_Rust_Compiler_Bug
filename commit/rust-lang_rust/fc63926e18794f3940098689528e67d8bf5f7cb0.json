{"sha": "fc63926e18794f3940098689528e67d8bf5f7cb0", "node_id": "C_kwDOAAsO6NoAKGZjNjM5MjZlMTg3OTRmMzk0MDA5ODY4OTUyOGU2N2Q4YmY1ZjdjYjA", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-04-28T18:19:48Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-04-28T18:19:48Z"}, "message": "remove unused `mut`s", "tree": {"sha": "77674d42d7ca66bc54759148aed14602a882abe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77674d42d7ca66bc54759148aed14602a882abe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc63926e18794f3940098689528e67d8bf5f7cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc63926e18794f3940098689528e67d8bf5f7cb0", "html_url": "https://github.com/rust-lang/rust/commit/fc63926e18794f3940098689528e67d8bf5f7cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc63926e18794f3940098689528e67d8bf5f7cb0/comments", "author": null, "committer": null, "parents": [{"sha": "69c71dacda9ce6442ee4600ddde7b528b5b411db", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c71dacda9ce6442ee4600ddde7b528b5b411db", "html_url": "https://github.com/rust-lang/rust/commit/69c71dacda9ce6442ee4600ddde7b528b5b411db"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7ab8c3eaba2273d96a6a4693dc53653f314eba36", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -360,7 +360,7 @@ impl Printer {\n \n     fn check_stack(&mut self, mut depth: usize) {\n         while let Some(&index) = self.scan_stack.back() {\n-            let mut entry = &mut self.buf[index];\n+            let entry = &mut self.buf[index];\n             match entry.token {\n                 Token::Begin(_) => {\n                     if depth == 0 {"}, {"sha": "842e90080582f5b7f40bf4059e0c5634a12c2a7e", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -221,7 +221,7 @@ fn append_list(\n ) {\n     let mut p = target_list;\n     loop {\n-        let mut r = &mut constraints[p];\n+        let r = &mut constraints[p];\n         match r.next_constraint {\n             Some(q) => p = q,\n             None => {"}, {"sha": "6ab5556e951d939a7704a6e239c9a800c664e27c", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -421,7 +421,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             let target_scopes = visitor.fixup_scopes.drain(start_point..);\n \n             for scope in target_scopes {\n-                let mut yield_data =\n+                let yield_data =\n                     visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap().last_mut().unwrap();\n                 let count = yield_data.expr_and_pat_count;\n                 let span = yield_data.span;"}, {"sha": "775fad1a365c24e6c6074d84abe5b086d47c58d8", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -917,7 +917,7 @@ mod parse {\n             }\n         }\n \n-        let mut options = slot.get_or_insert_default();\n+        let options = slot.get_or_insert_default();\n         let mut seen_always = false;\n         let mut seen_never = false;\n         let mut seen_ignore_loops = false;"}, {"sha": "556c95438817e0b88c08110349869cfbf1bd90d9", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.fixed?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut map = HashMap::new();\n     map.insert(\"a\", Test { v: 0 });\n \n-    for (_k, mut v) in map.iter_mut() {\n+    for (_k, v) in map.iter_mut() {\n         //~^ HELP use mutable method\n         //~| NOTE this iterator yields `&` references\n         v.v += 1;"}, {"sha": "b9d49a074eadeafd8d004b4f375ec8b3eade1ad1", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.rs?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut map = HashMap::new();\n     map.insert(\"a\", Test { v: 0 });\n \n-    for (_k, mut v) in map.iter() {\n+    for (_k, v) in map.iter() {\n         //~^ HELP use mutable method\n         //~| NOTE this iterator yields `&` references\n         v.v += 1;"}, {"sha": "c442ed6377a8c1097833e9a900c4126250b6a2b4", "filename": "tests/ui/suggestions/suggest-mut-method-for-loop-hashmap.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc63926e18794f3940098689528e67d8bf5f7cb0/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop-hashmap.stderr?ref=fc63926e18794f3940098689528e67d8bf5f7cb0", "patch": "@@ -1,11 +1,11 @@\n error[E0594]: cannot assign to `v.v`, which is behind a `&` reference\n   --> $DIR/suggest-mut-method-for-loop-hashmap.rs:17:9\n    |\n-LL |     for (_k, mut v) in map.iter() {\n-   |                        ----------\n-   |                        |   |\n-   |                        |   help: use mutable method: `iter_mut()`\n-   |                        this iterator yields `&` references\n+LL |     for (_k, v) in map.iter() {\n+   |                    ----------\n+   |                    |   |\n+   |                    |   help: use mutable method: `iter_mut()`\n+   |                    this iterator yields `&` references\n ...\n LL |         v.v += 1;\n    |         ^^^^^^^^ `v` is a `&` reference, so the data it refers to cannot be written"}]}