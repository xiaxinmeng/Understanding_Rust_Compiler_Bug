{"sha": "53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZWFiNzE5NWE4YjRjNjhlM2I1MWU5MjhmZmVkNGI0NTgwYzljZjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-08T18:18:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "make our filename handling work better across platforms", "tree": {"sha": "f19b777cb75faa42a9d5c02b4d3dffd8922f83fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19b777cb75faa42a9d5c02b4d3dffd8922f83fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "html_url": "https://github.com/rust-lang/rust/commit/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147330cc3603260d17085f3abcf7e62ca01b44ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/147330cc3603260d17085f3abcf7e62ca01b44ef", "html_url": "https://github.com/rust-lang/rust/commit/147330cc3603260d17085f3abcf7e62ca01b44ef"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "3e42cf1f77229ec4a5907ddef3aede7b13f447dc", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "patch": "@@ -486,14 +486,14 @@ fn phase_cargo_rustc(args: env::Args) {\n         let filename = out_filename(\"\", \"\");\n \n         if verbose {\n-            eprintln!(\"[cargo-miri rustc] writing run info to {:?}\", filename.display());\n+            eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n         }\n \n         let file = File::create(&filename)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot create {:?}\", filename.display())));\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot create `{}`\", filename.display())));\n         let file = BufWriter::new(file);\n         serde_json::ser::to_writer(file, &info)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot write to {:?}\", filename.display())));\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot write to `{}`\", filename.display())));\n         return;\n     }\n \n@@ -502,7 +502,7 @@ fn phase_cargo_rustc(args: env::Args) {\n     // Arguments are treated very differently depending on whether this crate is\n     // for interpretation by Miri, or for use by a build script / proc macro.\n     if target_crate {\n-        // Forward arguments, butremove \"link\" from \"--emit\" to make this a check-only build.\n+        // Forward arguments, but remove \"link\" from \"--emit\" to make this a check-only build.\n         let emit_flag = \"--emit\";\n         for arg in args {\n             if arg.starts_with(emit_flag) {\n@@ -547,21 +547,26 @@ fn phase_cargo_rustc(args: env::Args) {\n \n     // Create a stub .rlib file if \"link\" was requested by cargo.\n     if emit_link_hack {\n-        // FIXME: is \"lib\" always right?\n+        // Some platforms prepend \"lib\", some do not... let's just create both files.\n         let filename = out_filename(\"lib\", \".rlib\");\n         File::create(filename).expect(\"Failed to create rlib file\");\n+        let filename = out_filename(\"\", \".rlib\");\n+        File::create(filename).expect(\"Failed to create rlib file\");\n     }\n }\n \n fn phase_cargo_runner(binary: &str, binary_args: env::Args) {\n     let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n \n-    let file = File::open(binary)\n+    // Strip extension from binary name (Windows adds \".exe\").\n+    let mut filename = PathBuf::from(binary);\n+    filename.set_extension(\"\");\n+    let file = File::open(&filename)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n     let file = BufReader::new(file);\n     let info: CrateRunInfo = serde_json::from_reader(file)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n-    fs::remove_file(binary)\n+    fs::remove_file(&filename)\n         .unwrap_or_else(|_| show_error(format!(\"Unable to remove file {:?}\", binary)));\n \n     let mut cmd = miri();"}]}