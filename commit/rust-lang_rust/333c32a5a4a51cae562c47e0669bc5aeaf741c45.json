{"sha": "333c32a5a4a51cae562c47e0669bc5aeaf741c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzM2MzMmE1YTRhNTFjYWU1NjJjNDdlMDY2OWJjNWFlYWY3NDFjNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T05:19:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T05:19:52Z"}, "message": "Auto merge of #68583 - estebank:hrlt, r=oli-obk\n\nAccount for HR lifetimes when suggesting introduction of named lifetime\n\n```\nerror[E0106]: missing lifetime specifier\n --> src/test/ui/suggestions/fn-missing-lifetime-in-item.rs:2:32\n  |\n2 | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n  |                 ----  ----     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n  = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\nhelp: consider making the bound lifetime-generic with a new `'a` lifetime\n  |\n2 | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n  |              ^^^^^^^    ^^^^^^^  ^^^^^^^     ^^^\nhelp: consider introducing a named lifetime parameter\n  |\n2 | struct S2<'a, F: Fn(&'a i32, &'a i32) -> &'a i32>(F);=\n  |           ^^^       ^^^^^^^  ^^^^^^^     ^^^\n```\n\nFollow up to #68267. Addresses the diagnostics part of #49287.", "tree": {"sha": "2770b103250aa48e823361c46ea0b79a221b958c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2770b103250aa48e823361c46ea0b79a221b958c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/333c32a5a4a51cae562c47e0669bc5aeaf741c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/333c32a5a4a51cae562c47e0669bc5aeaf741c45", "html_url": "https://github.com/rust-lang/rust/commit/333c32a5a4a51cae562c47e0669bc5aeaf741c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/333c32a5a4a51cae562c47e0669bc5aeaf741c45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed853b861993ee5f3798037a3560f573c62b17cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed853b861993ee5f3798037a3560f573c62b17cd", "html_url": "https://github.com/rust-lang/rust/commit/ed853b861993ee5f3798037a3560f573c62b17cd"}, {"sha": "609a37407f6fbaeae66500c840cedc81a50960be", "url": "https://api.github.com/repos/rust-lang/rust/commits/609a37407f6fbaeae66500c840cedc81a50960be", "html_url": "https://github.com/rust-lang/rust/commit/609a37407f6fbaeae66500c840cedc81a50960be"}], "stats": {"total": 750, "additions": 560, "deletions": 190}, "files": [{"sha": "0c93a192667e52ac1898ab4ad2467973a3d921f5", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2260,10 +2260,10 @@ impl TraitRef<'_> {\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct PolyTraitRef<'hir> {\n-    /// The `'a` in `<'a> Foo<&'a T>`.\n+    /// The `'a` in `for<'a> Foo<&'a T>`.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n \n-    /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.\n+    /// The `Foo<&'a T>` in `for<'a> Foo<&'a T>`.\n     pub trait_ref: TraitRef<'hir>,\n \n     pub span: Span,"}, {"sha": "075dca8f01d7bdabeaf1cb006b09d22a3310b7e3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 231, "deletions": 62, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -20,6 +20,7 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n+use crate::lifetimes::{ElisionFailureInfo, LifetimeContext};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -48,6 +49,40 @@ crate struct ImportSuggestion {\n     pub path: Path,\n }\n \n+crate enum MissingLifetimeSpot<'tcx> {\n+    Generics(&'tcx hir::Generics<'tcx>),\n+    HigherRanked { span: Span, span_type: ForLifetimeSpanType },\n+}\n+\n+crate enum ForLifetimeSpanType {\n+    BoundEmpty,\n+    BoundTail,\n+    TypeEmpty,\n+    TypeTail,\n+}\n+\n+impl ForLifetimeSpanType {\n+    crate fn descr(&self) -> &'static str {\n+        match self {\n+            Self::BoundEmpty | Self::BoundTail => \"bound\",\n+            Self::TypeEmpty | Self::TypeTail => \"type\",\n+        }\n+    }\n+\n+    crate fn suggestion(&self, sugg: &str) -> String {\n+        match self {\n+            Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n+            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n+        }\n+    }\n+}\n+\n+impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n+    fn into(self) -> MissingLifetimeSpot<'tcx> {\n+        MissingLifetimeSpot::Generics(self)\n+    }\n+}\n+\n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n /// everything after `<` (`\"impl<T> Iterator for A<T> {}\" -> \"impl\"`) and\n /// everything after the first whitespace (`\"impl Iterator for A\" -> \"impl\"`).\n@@ -1457,72 +1492,206 @@ crate fn show_candidates(\n     }\n }\n \n-crate fn report_missing_lifetime_specifiers(\n-    sess: &Session,\n-    span: Span,\n-    count: usize,\n-) -> DiagnosticBuilder<'_> {\n-    struct_span_err!(sess, span, E0106, \"missing lifetime specifier{}\", pluralize!(count))\n-}\n+impl<'tcx> LifetimeContext<'_, 'tcx> {\n+    crate fn report_missing_lifetime_specifiers(\n+        &self,\n+        span: Span,\n+        count: usize,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        struct_span_err!(\n+            self.tcx.sess,\n+            span,\n+            E0106,\n+            \"missing lifetime specifier{}\",\n+            pluralize!(count)\n+        )\n+    }\n \n-crate fn add_missing_lifetime_specifiers_label(\n-    err: &mut DiagnosticBuilder<'_>,\n-    span: Span,\n-    count: usize,\n-    lifetime_names: &FxHashSet<ast::Ident>,\n-    snippet: Option<&str>,\n-    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n-) {\n-    if count > 1 {\n-        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-    } else {\n-        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-            err.span_suggestion(\n-                span,\n-                \"consider using the named lifetime\",\n-                sugg,\n-                Applicability::MaybeIncorrect,\n-            );\n-        };\n-        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-            err.span_label(span, \"expected named lifetime parameter\");\n-\n-            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n-                let mut introduce_suggestion = vec![];\n-                introduce_suggestion.push(match &generics.params {\n-                    [] => (generics.span, \"<'lifetime>\".to_string()),\n-                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n-                });\n-                introduce_suggestion.push((span, sugg));\n-                err.multipart_suggestion(\n-                    \"consider introducing a named lifetime parameter\",\n-                    introduce_suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n+    crate fn emit_undeclared_lifetime_error(&self, lifetime_ref: &hir::Lifetime) {\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            lifetime_ref.span,\n+            E0261,\n+            \"use of undeclared lifetime name `{}`\",\n+            lifetime_ref\n+        );\n+        err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n+        for missing in &self.missing_named_lifetime_spots {\n+            match missing {\n+                MissingLifetimeSpot::Generics(generics) => {\n+                    let (span, sugg) = if let Some(param) = generics\n+                        .params\n+                        .iter()\n+                        .filter(|p| match p.kind {\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } => false,\n+                            _ => true,\n+                        })\n+                        .next()\n+                    {\n+                        (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n+                    } else {\n+                        (generics.span, format!(\"<{}>\", lifetime_ref))\n+                    };\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n+                        sugg,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                    err.span_suggestion(\n+                        *span,\n+                        &format!(\n+                            \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n+                            span_type.descr(),\n+                            lifetime_ref\n+                        ),\n+                        span_type.suggestion(&lifetime_ref.to_string()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.note(\n+                        \"for more information on higher-ranked polymorphism, visit \\\n+                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                    );\n+                }\n             }\n-        };\n+        }\n+        err.emit();\n+    }\n \n-        match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n-            (1, Some(name), Some(\"&\")) => {\n-                suggest_existing(err, format!(\"&{} \", name));\n-            }\n-            (1, Some(name), Some(\"'_\")) => {\n-                suggest_existing(err, name.to_string());\n-            }\n-            (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n-            }\n-            (0, _, Some(\"&\")) => {\n-                suggest_new(err, \"&'lifetime \".to_string());\n-            }\n-            (0, _, Some(\"'_\")) => {\n-                suggest_new(err, \"'lifetime\".to_string());\n-            }\n-            (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n+    crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n+        if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n+            if [\n+                self.tcx.lang_items().fn_once_trait(),\n+                self.tcx.lang_items().fn_trait(),\n+                self.tcx.lang_items().fn_mut_trait(),\n+            ]\n+            .contains(&Some(did))\n+            {\n+                let (span, span_type) = match &trait_ref.bound_generic_params {\n+                    [] => (trait_ref.span.shrink_to_lo(), ForLifetimeSpanType::BoundEmpty),\n+                    [.., bound] => (bound.span.shrink_to_hi(), ForLifetimeSpanType::BoundTail),\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n+                return true;\n             }\n-            _ => {\n-                err.span_label(span, \"expected lifetime parameter\");\n+        };\n+        false\n+    }\n+\n+    crate fn add_missing_lifetime_specifiers_label(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        count: usize,\n+        lifetime_names: &FxHashSet<ast::Ident>,\n+        params: &[ElisionFailureInfo],\n+    ) {\n+        if count > 1 {\n+            err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+        } else {\n+            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n+            let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider using the named lifetime\",\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            };\n+            let suggest_new =\n+                |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n+                    err.span_label(span, \"expected named lifetime parameter\");\n+\n+                    for missing in self.missing_named_lifetime_spots.iter().rev() {\n+                        let mut introduce_suggestion = vec![];\n+                        let msg;\n+                        let should_break;\n+                        introduce_suggestion.push(match missing {\n+                        MissingLifetimeSpot::Generics(generics) => {\n+                            msg = \"consider introducing a named lifetime parameter\".to_string();\n+                            should_break = true;\n+                            if let Some(param) = generics.params.iter().filter(|p| match p.kind {\n+                                hir::GenericParamKind::Type {\n+                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                    ..\n+                                } => false,\n+                                _ => true,\n+                            }).next() {\n+                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n+                            } else {\n+                                (generics.span, \"<'a>\".to_string())\n+                            }\n+                        }\n+                        MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                            msg = format!(\n+                                \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n+                                span_type.descr(),\n+                            );\n+                            should_break = false;\n+                            err.note(\n+                                \"for more information on higher-ranked polymorphism, visit \\\n+                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                            );\n+                            (*span, span_type.suggestion(\"'a\"))\n+                        }\n+                    });\n+                        for param in params {\n+                            if let Ok(snippet) =\n+                                self.tcx.sess.source_map().span_to_snippet(param.span)\n+                            {\n+                                if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n+                                } else if snippet.starts_with(\"&'_ \") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                                }\n+                            }\n+                        }\n+                        introduce_suggestion.push((span, sugg.to_string()));\n+                        err.multipart_suggestion(\n+                            &msg,\n+                            introduce_suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        if should_break {\n+                            break;\n+                        }\n+                    }\n+                };\n+\n+            match (\n+                lifetime_names.len(),\n+                lifetime_names.iter().next(),\n+                snippet.as_ref().map(|s| s.as_str()),\n+            ) {\n+                (1, Some(name), Some(\"&\")) => {\n+                    suggest_existing(err, format!(\"&{} \", name));\n+                }\n+                (1, Some(name), Some(\"'_\")) => {\n+                    suggest_existing(err, name.to_string());\n+                }\n+                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                    suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n+                }\n+                (0, _, Some(\"&\")) => {\n+                    suggest_new(err, \"&'a \");\n+                }\n+                (0, _, Some(\"'_\")) => {\n+                    suggest_new(err, \"'a\");\n+                }\n+                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n+                }\n+                _ => {\n+                    err.span_label(span, \"expected lifetime parameter\");\n+                }\n             }\n         }\n     }"}, {"sha": "0ba9b4f17068e0fbcc5a047a179133acbc74afcb", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -5,9 +5,7 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use crate::diagnostics::{\n-    add_missing_lifetime_specifiers_label, report_missing_lifetime_specifiers,\n-};\n+use crate::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n@@ -153,8 +151,8 @@ struct NamedRegionMap {\n     object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n }\n \n-struct LifetimeContext<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+crate struct LifetimeContext<'a, 'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n@@ -186,7 +184,7 @@ struct LifetimeContext<'a, 'tcx> {\n \n     /// When encountering an undefined named lifetime, we will suggest introducing it in these\n     /// places.\n-    missing_named_lifetime_spots: Vec<&'tcx hir::Generics<'tcx>>,\n+    crate missing_named_lifetime_spots: Vec<MissingLifetimeSpot<'tcx>>,\n }\n \n #[derive(Debug)]\n@@ -264,13 +262,14 @@ enum Elide {\n }\n \n #[derive(Clone, Debug)]\n-struct ElisionFailureInfo {\n+crate struct ElisionFailureInfo {\n     /// Where we can find the argument pattern.\n     parent: Option<hir::BodyId>,\n     /// The index of the argument in the original definition.\n     index: usize,\n     lifetime_count: usize,\n     have_bound_regions: bool,\n+    crate span: Span,\n }\n \n type ScopeRef<'a> = &'a Scope<'a>;\n@@ -389,7 +388,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n-                self.missing_named_lifetime_spots.push(generics);\n+                self.missing_named_lifetime_spots.push(generics.into());\n                 self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n@@ -424,7 +423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemKind::Trait(_, _, ref generics, ..)\n             | hir::ItemKind::TraitAlias(ref generics, ..)\n             | hir::ItemKind::Impl { ref generics, .. } => {\n-                self.missing_named_lifetime_spots.push(generics);\n+                self.missing_named_lifetime_spots.push(generics.into());\n \n                 // Impls permit `'_` to be used and it is equivalent to \"some fresh lifetime name\".\n                 // This is not true for other kinds of items.x\n@@ -492,6 +491,21 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let next_early_index = self.next_early_index();\n                 let was_in_fn_syntax = self.is_in_fn_syntax;\n                 self.is_in_fn_syntax = true;\n+                let lifetime_span: Option<Span> = c\n+                    .generic_params\n+                    .iter()\n+                    .filter_map(|param| match param.kind {\n+                        GenericParamKind::Lifetime { .. } => Some(param.span),\n+                        _ => None,\n+                    })\n+                    .last();\n+                let (span, span_type) = if let Some(span) = lifetime_span {\n+                    (span.shrink_to_hi(), ForLifetimeSpanType::TypeTail)\n+                } else {\n+                    (ty.span.shrink_to_lo(), ForLifetimeSpanType::TypeEmpty)\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n                 let scope = Scope::Binder {\n                     lifetimes: c\n                         .generic_params\n@@ -514,6 +528,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.check_lifetime_params(old_scope, &c.generic_params);\n                     intravisit::walk_ty(this, ty);\n                 });\n+                self.missing_named_lifetime_spots.pop();\n                 self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime) => {\n@@ -696,7 +711,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n-        self.missing_named_lifetime_spots.push(&trait_item.generics);\n+        self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -753,7 +768,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n-        self.missing_named_lifetime_spots.push(&impl_item.generics);\n+        self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n         match impl_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -953,6 +968,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     ) {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n+        let should_pop_missing_lt = self.is_trait_ref_fn_scope(trait_ref);\n         if !self.trait_ref_hack\n             || trait_ref.bound_generic_params.iter().any(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => true,\n@@ -988,10 +1004,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n                 walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n-                this.visit_trait_ref(&trait_ref.trait_ref)\n+                this.visit_trait_ref(&trait_ref.trait_ref);\n             })\n         } else {\n-            self.visit_trait_ref(&trait_ref.trait_ref)\n+            self.visit_trait_ref(&trait_ref.trait_ref);\n+        }\n+        if should_pop_missing_lt {\n+            self.missing_named_lifetime_spots.pop();\n         }\n     }\n }\n@@ -1824,29 +1843,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             self.insert_lifetime(lifetime_ref, def);\n         } else {\n-            let mut err = struct_span_err!(\n-                self.tcx.sess,\n-                lifetime_ref.span,\n-                E0261,\n-                \"use of undeclared lifetime name `{}`\",\n-                lifetime_ref\n-            );\n-            err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n-            if !self.is_in_fn_syntax {\n-                for generics in &self.missing_named_lifetime_spots {\n-                    let (span, sugg) = match &generics.params {\n-                        [] => (generics.span, format!(\"<{}>\", lifetime_ref)),\n-                        [param, ..] => (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref)),\n-                    };\n-                    err.span_suggestion(\n-                        span,\n-                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-            }\n-            err.emit();\n+            self.emit_undeclared_lifetime_error(lifetime_ref);\n         }\n     }\n \n@@ -2230,6 +2227,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     index: i,\n                     lifetime_count: gather.lifetimes.len(),\n                     have_bound_regions: gather.have_bound_regions,\n+                    span: input.span,\n                 }\n             })\n             .collect();\n@@ -2385,7 +2383,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        let mut err = report_missing_lifetime_specifiers(self.tcx.sess, span, lifetime_refs.len());\n+        let mut err = self.report_missing_lifetime_specifiers(span, lifetime_refs.len());\n         let mut add_label = true;\n \n         if let Some(params) = error {\n@@ -2394,13 +2392,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n         if add_label {\n-            add_missing_lifetime_specifiers_label(\n+            self.add_missing_lifetime_specifiers_label(\n                 &mut err,\n                 span,\n                 lifetime_refs.len(),\n                 &lifetime_names,\n-                self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n-                &self.missing_named_lifetime_spots,\n+                error.map(|p| &p[..]).unwrap_or(&[]),\n             );\n         }\n \n@@ -2442,8 +2439,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let elided_len = elided_params.len();\n \n         for (i, info) in elided_params.into_iter().enumerate() {\n-            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions } = info;\n+            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions, span } =\n+                info;\n \n+            db.span_label(span, \"\");\n             let help_name = if let Some(ident) =\n                 parent.and_then(|body| self.tcx.hir().body(body).params[index].pat.simple_ident())\n             {\n@@ -2477,7 +2476,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         if len == 0 {\n             db.help(\n                 \"this function's return type contains a borrowed value, \\\n-                but there is no value for it to be borrowed from\",\n+                 but there is no value for it to be borrowed from\",\n             );\n             self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n@@ -2491,14 +2490,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         } else if elided_len == 1 {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n-                but the signature does not say which {} it is borrowed from\",\n+                 but the signature does not say which {} it is borrowed from\",\n                 m\n             ));\n             true\n         } else {\n             db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n-                but the signature does not say whether it is borrowed from {}\",\n+                 but the signature does not say whether it is borrowed from {}\",\n                 m\n             ));\n             true"}, {"sha": "6bd120d818d0949b0550c8afd18944c9f902e6c4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -1307,12 +1307,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             );\n                         }\n                     };\n+                    // FIXME: point at the type params that don't have appropriate lifetimes:\n+                    // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+                    //                         ----  ----     ^^^^^^^\n                     struct_span_err!(\n                         tcx.sess,\n                         binding.span,\n                         E0582,\n                         \"binding for associated type `{}` references lifetime `{}`, \\\n-                                     which does not appear in the trait input types\",\n+                         which does not appear in the trait input types\",\n                         binding.item_name,\n                         br_name\n                     )"}, {"sha": "6edb9e63d480a6ebc45f38b122b87885793e659b", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -1,6 +1,8 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-63388-2.rs:12:10\n    |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              --------       -----------\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |"}, {"sha": "9f51ced9c3f499cb73ab02e5cece2ebca63ea4f0", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -1,6 +1,8 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-63388-2.rs:12:10\n    |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              --------       -----------\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |"}, {"sha": "a23bcbfd71a562607a02d021c864718c357f4cca", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     x: &bool,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime bool,\n+LL | struct Foo<'a> {\n+LL |     x: &'a bool,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,9 +18,9 @@ LL |     B(&bool),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'lifetime> {\n+LL | enum Bar<'a> {\n LL |     A(u8),\n-LL |     B(&'lifetime bool),\n+LL |     B(&'a bool),\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -31,8 +31,8 @@ LL | type MyStr = &str;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | type MyStr<'lifetime> = &'lifetime str;\n-   |           ^^^^^^^^^^^   ^^^^^^^^^^\n+LL | type MyStr<'a> = &'a str;\n+   |           ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:17:10\n@@ -42,8 +42,8 @@ LL |     baz: Baz,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Quux<'lifetime> {\n-LL |     baz: Baz<'lifetime>,\n+LL | struct Quux<'a> {\n+LL |     baz: Baz<'a>,\n    |\n \n error[E0106]: missing lifetime specifiers"}, {"sha": "72951aea4aaf050875cdc1fea09d901cbaded47b", "filename": "src/test/ui/generic/generic-extern-lifetime.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -9,12 +9,24 @@ error[E0261]: use of undeclared lifetime name `'a`\n    |\n LL |    pub fn life4<'b>(x: for<'c> fn(&'a i32));\n    |                                    ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |    pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:11:38\n    |\n LL |    pub fn life7<'b>() -> for<'c> fn(&'a i32);\n    |                                      ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |    pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n+   |                                ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "211a3286cc355324441446a3179542f32f6f17fd", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     type Output = &i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'lifetime> = &'lifetime i32;\n-   |                ^^^^^^^^^^^   ^^^^^^^^^^\n+LL |     type Output<'a> = &'a i32;\n+   |                ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20\n@@ -17,8 +17,8 @@ LL |     type Output = &'_ i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'lifetime> = &'lifetime i32;\n-   |                ^^^^^^^^^^^    ^^^^^^^^^\n+LL |     type Output<'a> = &'a i32;\n+   |                ^^^^    ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f2a4150632d2f8ad477e3501c940bd17fda67ce8", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL | struct Heartbreak(Betrayal);\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Heartbreak<'lifetime>(Betrayal<'lifetime>);\n-   |                  ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^\n+LL | struct Heartbreak<'a>(Betrayal<'a>);\n+   |                  ^^^^ ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a43b49041ec2aa4fc0cb391cf3ebc305b9d33a3e", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -11,6 +11,16 @@ error[E0261]: use of undeclared lifetime name `'test`\n    |\n LL |     let y: fn(&'test u32) = foo2;\n    |                ^^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'test` here\n+   |\n+LL | fn bar<'test>() {\n+   |       ^^^^^^^\n+help: consider making the type lifetime-generic with a new `'test` lifetime\n+   |\n+LL |     let y: for<'test> fn(&'test u32) = foo2;\n+   |            ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "337f2f971ede0b8235e38c10c5a290a63d62d679", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,25 +2,35 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:3:28\n    |\n LL | type Foo = fn(&u8, &u8) -> &u8;\n-   |                            ^ expected named lifetime parameter\n+   |               ---  ---     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL | type Foo = for<'a> fn(&'a u8, &'a u8) -> &'a u8;\n+   |            ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | type Foo<'lifetime> = fn(&u8, &u8) -> &'lifetime u8;\n-   |         ^^^^^^^^^^^                   ^^^^^^^^^^\n+LL | type Foo<'a> = fn(&'a u8, &'a u8) -> &'a u8;\n+   |         ^^^^      ^^^^^^  ^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n    |\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n-   |                           ^ expected named lifetime parameter\n+   |              ---  ---     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | fn bar<F: for<'a> Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n+   |           ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn bar<'lifetime, F: Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n-   |        ^^^^^^^^^^                    ^^^^^^^^^^\n+LL | fn bar<'a, F: Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n+   |        ^^^       ^^^^^^  ^^^^^^     ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d8fbdc63c5e0271c3e99f68a7bb3cc8bbe3627e", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,13 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:1:62\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ^ expected named lifetime parameter\n+   |                     ------------------------------------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn parse_type<'lifetime>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'lifetime str { iter.next() }\n-   |              ^^^^^^^^^^^                                                ^^^^^^^^^^\n+LL | fn parse_type<'a>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'a str { iter.next() }\n+   |              ^^^^                                                ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "ab43d4a3c6002cfd7a497b9a4a4b2f975042cfdb", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,37 +2,37 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:9:24\n    |\n LL | fn f(a: &S, b: i32) -> &i32 {\n-   |                        ^ expected named lifetime parameter\n+   |         --             ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'lifetime>(a: &S, b: i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                   ^^^^^^^^^^\n+LL | fn f<'a>(a: &'a S, b: i32) -> &'a i32 {\n+   |     ^^^^    ^^^^^             ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n    |\n LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n-   |                                  ^ expected named lifetime parameter\n+   |         --              ----     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(a: &S, b: bool, c: &i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                             ^^^^^^^^^^\n+LL | fn g<'a>(a: &'a S, b: bool, c: &'a i32) -> &'a i32 {\n+   |     ^^^^    ^^^^^              ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n    |\n LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n-   |                                            ^ expected named lifetime parameter\n+   |         -----              --     ----     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(a: &bool, b: bool, c: &S, d: &i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                                       ^^^^^^^^^^\n+LL | fn h<'a>(a: &'a bool, b: bool, c: &'a S, d: &'a i32) -> &'a i32 {\n+   |     ^^^^    ^^^^^^^^              ^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "461c1832e9af959c9e82281d5e498a20a6a87fe8", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -10,25 +10,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n    |\n LL | fn g(_x: &isize, _y: &isize) -> &isize {\n-   |                                 ^ expected named lifetime parameter\n+   |          ------      ------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(_x: &isize, _y: &isize) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^                            ^^^^^^^^^^\n+LL | fn g<'a>(_x: &'a isize, _y: &'a isize) -> &'a isize {\n+   |     ^^^^     ^^^^^^^^^      ^^^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n    |\n LL | fn h(_x: &Foo) -> &isize {\n-   |                   ^ expected named lifetime parameter\n+   |          ----     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(_x: &Foo) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^              ^^^^^^^^^^\n+LL | fn h<'a>(_x: &'a Foo) -> &'a isize {\n+   |     ^^^^     ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "c1fcab2409f642287bf7fc9916547cd38bae910b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,13 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/ex1b-return-no-names-if-else.rs:1:29\n    |\n LL | fn foo(x: &i32, y: &i32) -> &i32 {\n-   |                             ^ expected named lifetime parameter\n+   |           ----     ----     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &i32, y: &i32) -> &'lifetime i32 {\n-   |       ^^^^^^^^^^^                      ^^^^^^^^^^\n+LL | fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+   |       ^^^^    ^^^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "27f7639d213d24b0138d4790e47bec962aea71e0", "filename": "src/test/ui/proc-macro/item-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     a: &u64\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct A<'lifetime> {\n-LL |     a: &'lifetime u64\n+LL | struct A<'a> {\n+LL |     a: &'a u64\n    |\n \n error: aborting due to previous error"}, {"sha": "b3649c5b48530dc486be9e658169a93c5b2315c6", "filename": "src/test/ui/regions/regions-in-enums-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     Bar(&isize)\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Foo<'lifetime> {\n-LL |     Bar(&'lifetime isize)\n+LL | enum Foo<'a> {\n+LL |     Bar(&'a isize)\n    |\n \n error: aborting due to previous error"}, {"sha": "60a6fb9a0fad9aa79cc9edaafd871413205c6c9c", "filename": "src/test/ui/regions/regions-in-structs-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     x: &isize\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime isize\n+LL | struct Foo<'a> {\n+LL |     x: &'a isize\n    |\n \n error: aborting due to previous error"}, {"sha": "eb19a30c52b970bfb3067b81652552a473c98e75", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -88,12 +88,32 @@ error[E0261]: use of undeclared lifetime name `'b`\n    |\n LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn fn_types<'b>(a: &'a isize,\n+   |            ^^^^\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:45:36\n    |\n LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn fn_types<'b>(a: &'a isize,\n+   |            ^^^^\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n+   |\n+LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:46:17"}, {"sha": "35a2ef10c2e3c48612ffc274c0587cba5d02355d", "filename": "src/test/ui/rfc1623-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,13 @@\n+#![allow(dead_code)]\n+\n+fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n+    a\n+}\n+\n+// the boundaries of elision\n+static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n+//~^ ERROR missing lifetime specifier [E0106]\n+    &(non_elidable as fn(&u8, &u8) -> &u8);\n+    //~^ ERROR missing lifetime specifier [E0106]\n+\n+fn main() {}"}, {"sha": "732bb61e6eebbab489c8b80b0a092591cfac126d", "filename": "src/test/ui/rfc1623-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,29 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/rfc1623-2.rs:8:42\n+   |\n+LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n+   |                             ---  ---     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL | static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n+   |                          ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/rfc1623-2.rs:10:39\n+   |\n+LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n+   |                          ---  ---     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n+   |                       ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "55f5d0b94dcb05b72c3e1b5762f1de2a5722f029", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -4,11 +4,10 @@ fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n     a\n }\n \n-// the boundaries of elision\n-static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-//~^ ERROR missing lifetime specifier [E0106]\n-    &(non_elidable as fn(&u8, &u8) -> &u8);\n-    //~^ ERROR missing lifetime specifier [E0106]\n+// The incorrect case without `for<'a>` is tested for in `rfc1623-2.rs`\n+static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n+    &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n+\n \n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n@@ -20,10 +19,12 @@ fn id<T>(t: T) -> T {\n     t\n }\n \n-static SOME_STRUCT: &SomeStruct = SomeStruct {\n+static SOME_STRUCT: &SomeStruct = SomeStruct { //~ ERROR mismatched types\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n+    //~^ ERROR type mismatch in function arguments\n+    //~| ERROR type mismatch resolving\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "ca956004ef76f5aac107abaf37c30600b4abd5fa", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -1,19 +1,46 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623.rs:8:42\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:22:35\n    |\n-LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-   |                                          ^ expected named lifetime parameter\n+LL |   static SOME_STRUCT: &SomeStruct = SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | | };\n+   | |_^ expected `&SomeStruct<'static, 'static, 'static>`, found struct `SomeStruct`\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider borrowing here\n+   |\n+LL | static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+LL |     foo: &Foo { bools: &[false, true] },\n+LL |     bar: &Bar { bools: &[true, true] },\n+LL |     f: &id,\n+LL |\n+LL |\n+ ...\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/rfc1623.rs:25:8\n+   |\n+LL | fn id<T>(t: T) -> T {\n+   | ------------------- found signature of `fn(_) -> _`\n+...\n+LL |     f: &id,\n+   |        ^^^ expected signature of `for<'a, 'b> fn(&'a Foo<'b>) -> _`\n+   |\n+   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623.rs:10:39\n+error[E0271]: type mismatch resolving `for<'a, 'b> <fn(_) -> _ {id::<_>} as std::ops::FnOnce<(&'a Foo<'b>,)>>::Output == &'a Foo<'b>`\n+  --> $DIR/rfc1623.rs:25:8\n    |\n-LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n-   |                                       ^ expected named lifetime parameter\n+LL |     f: &id,\n+   |        ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+Some errors have detailed explanations: E0271, E0308, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "dac6610b3355f314f23b4180965f271a3c9e398b", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,8 @@\n+struct S1<F: Fn(&i32, &i32) -> &'a i32>(F); //~ ERROR use of undeclared lifetime name `'a`\n+struct S2<F: Fn(&i32, &i32) -> &i32>(F); //~ ERROR missing lifetime specifier\n+struct S3<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+//~^ ERROR binding for associated type `Output` references lifetime `'a`, which does not appear\n+struct S4<F: for<'x> Fn(&'x i32, &'x i32) -> &'x i32>(F);\n+const C: Option<Box<dyn for<'a> Fn(&usize, &usize) -> &'a usize>> = None;\n+//~^ ERROR binding for associated type `Output` references lifetime `'a`, which does not appear\n+fn main() {}"}, {"sha": "fe9c3445fc46fcb2ab16a08bcc199f39c4f31ac3", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,49 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/fn-missing-lifetime-in-item.rs:1:33\n+   |\n+LL | struct S1<F: Fn(&i32, &i32) -> &'a i32>(F);\n+   |                                 ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n+   |           ^^^\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+   |              ^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/fn-missing-lifetime-in-item.rs:2:32\n+   |\n+LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n+   |                 ----  ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n+   |\n+LL | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n+   |              ^^^^^^^    ^^^^^^^  ^^^^^^^     ^^^\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct S2<'a, F: Fn(&'a i32, &'a i32) -> &'a i32>(F);\n+   |           ^^^       ^^^^^^^  ^^^^^^^     ^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/fn-missing-lifetime-in-item.rs:3:40\n+   |\n+LL | struct S3<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+   |                                        ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/fn-missing-lifetime-in-item.rs:6:55\n+   |\n+LL | const C: Option<Box<dyn for<'a> Fn(&usize, &usize) -> &'a usize>> = None;\n+   |                                                       ^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0106, E0261, E0582.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "22dc448c97ff0f13ac13f24b024951af2a68779c", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,2 @@\n+fn f(_: impl Iterator<Item = &'_ ()>) {} //~ ERROR missing lifetime specifier\n+fn main() {}"}, {"sha": "e31f25ab60304627e30e05219df1c00cdee324dd", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -0,0 +1,14 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime.rs:1:31\n+   |\n+LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                               ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |     ^^^^                          ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ce3b1748da435dcb150fc196fcac2f2e3d6512cf", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -8,15 +8,15 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:5:34\n    |\n LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n-   |                                  ^ help: consider using the named lifetime: `&'a`\n+   |                    ---------     ^ help: consider using the named lifetime: `&'a`\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:7:35\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n-   |                                   ^ help: consider using the named lifetime: `&'a`\n+   |                    ----------     ^ help: consider using the named lifetime: `&'a`\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n "}, {"sha": "1719a99d421d06efbf7446800d5acdaff77ae62d", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,12 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:39\n    |\n LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n-   |                                       ^ expected named lifetime parameter\n+   |                    ------  ------     ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn main<'lifetime>() {\n+LL | fn main<'a>() {\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n LL |           dyn Foo(&isize) -> &isize                                   >();\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,"}, {"sha": "fe242e6a909e376c77f3fb3f99b922a60da90d95", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     x: Box<dyn Debug + '_>,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: Box<dyn Debug + 'lifetime>,\n+LL | struct Foo<'a> {\n+LL |     x: Box<dyn Debug + 'a>,\n    |\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound"}, {"sha": "8d2c82e59edc15f4a01834890067975738db1f96", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -2,13 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-fn-return-illegal.rs:5:30\n    |\n LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n-   |                              ^^ expected named lifetime parameter\n+   |           ----     ----      ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &u32, y: &u32) -> &'lifetime u32 { loop { } }\n-   |       ^^^^^^^^^^^                       ^^^^^^^^^\n+LL | fn foo<'a>(x: &'a u32, y: &'a u32) -> &'a u32 { loop { } }\n+   |       ^^^^    ^^^^^^^     ^^^^^^^      ^^\n \n error: aborting due to previous error\n "}, {"sha": "4275cc26f735fb526946eaa8514b1166cc055763", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -6,8 +6,8 @@ LL |     x: &'_ u32,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime u32,\n+LL | struct Foo<'a> {\n+LL |     x: &'a u32,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,8 +18,8 @@ LL |     Variant(&'_ u32),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'lifetime> {\n-LL |     Variant(&'lifetime u32),\n+LL | enum Bar<'a> {\n+LL |     Variant(&'a u32),\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "c7cda38e47691a05909573a180c98fecfd83a2d3", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/333c32a5a4a51cae562c47e0669bc5aeaf741c45/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=333c32a5a4a51cae562c47e0669bc5aeaf741c45", "patch": "@@ -28,13 +28,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35\n    |\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n-   |                                   ^^ expected named lifetime parameter\n+   |            ------     ------      ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo2<'lifetime>(_: &'_ u8, y: &'_ u8) -> &'lifetime u8 { y }\n-   |        ^^^^^^^^^^^                           ^^^^^^^^^\n+LL | fn foo2<'a>(_: &'a u8, y: &'a u8) -> &'a u8 { y }\n+   |        ^^^^    ^^^^^^     ^^^^^^      ^^\n \n error: aborting due to 5 previous errors\n "}]}