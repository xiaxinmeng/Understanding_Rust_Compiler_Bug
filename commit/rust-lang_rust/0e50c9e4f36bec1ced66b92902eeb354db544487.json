{"sha": "0e50c9e4f36bec1ced66b92902eeb354db544487", "node_id": "C_kwDOAAsO6NoAKDBlNTBjOWU0ZjM2YmVjMWNlZDY2YjkyOTAyZWViMzU0ZGI1NDQ0ODc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T16:04:50Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T16:04:50Z"}, "message": "Update example output in pretty_clif.rs", "tree": {"sha": "5a6aecab1ee71463003df6446d2a9ef80e00a2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6aecab1ee71463003df6446d2a9ef80e00a2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e50c9e4f36bec1ced66b92902eeb354db544487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e50c9e4f36bec1ced66b92902eeb354db544487", "html_url": "https://github.com/rust-lang/rust/commit/0e50c9e4f36bec1ced66b92902eeb354db544487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e50c9e4f36bec1ced66b92902eeb354db544487/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6cf0a623fdda2bd42fd88c2909b626492e86737", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cf0a623fdda2bd42fd88c2909b626492e86737", "html_url": "https://github.com/rust-lang/rust/commit/b6cf0a623fdda2bd42fd88c2909b626492e86737"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "27e21183c55679f29f5380a601dcb5a0a96eade6", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0e50c9e4f36bec1ced66b92902eeb354db544487/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e50c9e4f36bec1ced66b92902eeb354db544487/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=0e50c9e4f36bec1ced66b92902eeb354db544487", "patch": "@@ -7,48 +7,51 @@\n //! test compile\n //! target x86_64\n //!\n-//! function u0:0(i64, i64, i64) system_v {\n-//! ; symbol _ZN119_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$u27$a$u20$$RF$$u27$b$u20$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17he85059d5e6a760a0E\n-//! ; instance Instance { def: Item(DefId(0/0:29 ~ example[8787]::{{impl}}[0]::call_once[0])), substs: [ReErased, ReErased] }\n-//! ; sig ([IsNotEmpty, (&&[u16],)]; c_variadic: false)->(u8, u8)\n+//! function u0:22(i64) -> i8, i8 system_v {\n+//! ; symbol _ZN97_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$RF$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17hd517c453d67c0915E\n+//! ; instance Instance { def: Item(WithOptConstParam { did: DefId(0:42 ~ example[4e51]::{impl#0}::call_once), const_param_did: None }), substs: [ReErased, ReErased] }\n+//! ; abi FnAbi { args: [ArgAbi { layout: TyAndLayout { ty: IsNotEmpty, layout: Layout { size: Size(0 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: Aggregate { sized: true }, fields: Arbitrary { offsets: [], memory_index: [] }, largest_niche: None, variants: Single { index: 0 } } }, mode: Ignore }, ArgAbi { layout: TyAndLayout { ty: &&[u16], layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), fields: Primitive, largest_niche: Some(Niche { offset: Size(0 bytes), value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), variants: Single { index: 0 } } }, mode: Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: Some(Align(8 bytes)) }) }], ret: ArgAbi { layout: TyAndLayout { ty: (u8, u8), layout: Layout { size: Size(2 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: ScalarPair(Initialized { value: Int(I8, false), valid_range: 0..=255 }, Initialized { value: Int(I8, false), valid_range: 0..=255 }), fields: Arbitrary { offsets: [Size(0 bytes), Size(1 bytes)], memory_index: [0, 1] }, largest_niche: None, variants: Single { index: 0 } } }, mode: Pair(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }, ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, c_variadic: false, fixed_count: 1, conv: Rust, can_unwind: false }\n //!\n-//! ; ssa {_2: NOT_SSA, _4: NOT_SSA, _0: NOT_SSA, _3: (empty), _1: NOT_SSA}\n-//! ; msg   loc.idx    param    pass mode            ssa flags  ty\n-//! ; ret    _0      = v0       ByRef                NOT_SSA    (u8, u8)\n-//! ; arg    _1      = v1       ByRef                NOT_SSA    IsNotEmpty\n-//! ; arg    _2.0    = v2       ByVal(types::I64)    NOT_SSA    &&[u16]\n+//! ; kind  loc.idx   param    pass mode                            ty\n+//! ; ssa   _0    (u8, u8)                          2b 1, 8              var=(0, 1)\n+//! ; ret   _0      -          Pair(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }, ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) (u8, u8)\n+//! ; arg   _1      -          Ignore                               IsNotEmpty\n+//! ; arg   _2.0    = v0       Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: Some(Align(8 bytes)) }) &&[u16]\n //!\n-//!     ss0 = explicit_slot 0 ; _1: IsNotEmpty size=0 align=1,8\n-//!     ss1 = explicit_slot 8 ; _2: (&&[u16],) size=8 align=8,8\n-//!     ss2 = explicit_slot 8 ; _4: (&&[u16],) size=8 align=8,8\n-//!     sig0 = (i64, i64, i64) system_v\n-//!     sig1 = (i64, i64, i64) system_v\n-//!     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n+//! ; kind  local ty                              size align (abi,pref)\n+//! ; zst   _1    IsNotEmpty                        0b 1, 8              align=8,offset=\n+//! ; stack _2    (&&[u16],)                        8b 8, 8              storage=ss0\n+//! ; ssa   _3    &mut IsNotEmpty                   8b 8, 8              var=2\n //!\n-//! block0(v0: i64, v1: i64, v2: i64):\n-//!     v3 = stack_addr.i64 ss0\n-//!     v4 = stack_addr.i64 ss1\n-//!     store v2, v4\n-//!     v5 = stack_addr.i64 ss2\n+//!     ss0 = explicit_slot 16\n+//!     sig0 = (i64, i64) -> i8, i8 system_v\n+//!     fn0 = colocated u0:23 sig0 ; Instance { def: Item(WithOptConstParam { did: DefId(0:46 ~ example[4e51]::{impl#1}::call_mut), const_param_did: None }), substs: [ReErased, ReErased] }\n+//!\n+//! block0(v0: i64):\n+//!     nop\n+//! ; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &&[u16] <- ByVal(v0): &&[u16]\n+//!     stack_store v0, ss0\n //!     jump block1\n //!\n //! block1:\n //!     nop\n //! ; _3 = &mut _1\n-//! ; _4 = _2\n-//!     v6 = load.i64 v4\n-//!     store v6, v5\n+//!     v1 = iconst.i64 8\n+//! ; write_cvalue: Var(_3, var2): &mut IsNotEmpty <- ByVal(v1): &mut IsNotEmpty\n //! ;\n-//! ; _0 = const mini_core::FnMut::call_mut(move _3, move _4)\n-//!     v7 = load.i64 v5\n-//!     call fn0(v0, v3, v7)\n+//! ; _0 = <IsNotEmpty as mini_core::FnMut<(&&[u16],)>>::call_mut(move _3, _2)\n+//!     v2 = stack_load.i64 ss0\n+//!     v3, v4 = call fn0(v1, v2)  ; v1 = 8\n+//!     v5 -> v3\n+//!     v6 -> v4\n+//! ; write_cvalue: VarPair(_0, var0, var1): (u8, u8) <- ByValPair(v3, v4): (u8, u8)\n //!     jump block2\n //!\n //! block2:\n //!     nop\n //! ;\n //! ; return\n-//!     return\n+//!     return v5, v6\n //! }\n //! ```\n "}]}