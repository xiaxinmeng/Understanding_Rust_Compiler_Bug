{"sha": "4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNmM0YzA4ZGY3ZjQ2ODVkYWYwZmEyY2ZlMTI3YjA2MjE2MTc2ZDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T16:23:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-13T20:33:50Z"}, "message": "Remove some ancient code providing special support for newtypes", "tree": {"sha": "90d6650d2522f2253c86672042b6806bfe5987c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d6650d2522f2253c86672042b6806bfe5987c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "html_url": "https://github.com/rust-lang/rust/commit/4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87ba3f1222ba20d491e8ed76a04977283280742", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ba3f1222ba20d491e8ed76a04977283280742", "html_url": "https://github.com/rust-lang/rust/commit/c87ba3f1222ba20d491e8ed76a04977283280742"}], "stats": {"total": 72, "additions": 16, "deletions": 56}, "files": [{"sha": "5594ac413e238fa87b379c795c927c45353cc681", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -223,10 +223,6 @@ fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> {\n             Ok(deref_ptr(UnsafePtr(mt.mutbl)))\n         }\n \n-        ty::TyAdt(..) => { // newtype\n-            Ok(deref_interior(InteriorField(PositionalField(0))))\n-        }\n-\n         ty::TyArray(..) | ty::TySlice(_) => {\n             // no deref of indexed content without supplying InteriorOffsetKind\n             if let Some(context) = context {"}, {"sha": "e228bf74302612f35c09b122911f04ffb2dafe35", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -252,27 +252,6 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n     }\n }\n \n-/// Iterates through \"auxiliary node IDs\", which are node IDs that describe\n-/// top-level items that are sub-items of the given item. Specifically:\n-///\n-/// * For newtype structs, iterates through the node ID of the constructor.\n-fn each_auxiliary_node_id<F>(item: &hir::Item, callback: F) -> bool where\n-    F: FnOnce(NodeId) -> bool,\n-{\n-    let mut continue_ = true;\n-    match item.node {\n-        hir::ItemStruct(ref struct_def, _) => {\n-            // If this is a newtype struct, return the constructor.\n-            if struct_def.is_tuple() {\n-                continue_ = callback(struct_def.id());\n-            }\n-        }\n-        _ => {}\n-    }\n-\n-    continue_\n-}\n-\n fn encode_reexports(ecx: &EncodeContext,\n                     rbml_w: &mut Encoder,\n                     id: NodeId) {\n@@ -313,13 +292,6 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n         for item_id in &md.item_ids {\n             self.rbml_w.wr_tagged_u64(tag_mod_child,\n                                  def_to_u64(ecx.tcx.map.local_def_id(item_id.id)));\n-\n-            let item = ecx.tcx.map.expect_item(item_id.id);\n-            each_auxiliary_node_id(item, |auxiliary_node_id| {\n-                self.rbml_w.wr_tagged_u64(tag_mod_child,\n-                                     def_to_u64(ecx.tcx.map.local_def_id(auxiliary_node_id)));\n-                true\n-            });\n         }\n \n         self.encode_visibility(vis);"}, {"sha": "83f03e7cfc5acc2f09b6379b91295e36ca059f47", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -261,8 +261,8 @@ impl<'b> Resolver<'b> {\n                 let def = Def::Struct(self.definitions.local_def_id(item.id));\n                 self.define(parent, name, TypeNS, (def, sp, vis));\n \n-                // If this is a newtype or unit-like struct, define a name\n-                // in the value namespace as well\n+                // If this is a tuple or unit struct, define a name\n+                // in the value namespace as well.\n                 if !struct_def.is_struct() {\n                     let def = Def::Struct(self.definitions.local_def_id(struct_def.id()));\n                     self.define(parent, name, ValueNS, (def, sp, vis));"}, {"sha": "67e5ec2616d29e12114f33a7473aec6eee976ead", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -231,7 +231,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n \n                 if cases.len() == 1 && hint == attr::ReprAny {\n-                    // Equivalent to a struct/tuple/newtype.\n+                    // Equivalent to a struct or tuple.\n                     return Univariant(mk_struct(cx, &cases[0].tys, false, t));\n                 }\n "}, {"sha": "709e36989244faa6ea602f609455ad627b5ee9e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -19,7 +19,7 @@ use rustc::middle::cstore;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::print as pprust;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, VariantKind};\n use rustc::util::nodemap::FnvHashSet;\n \n use rustc_const_eval::lookup_const_by_id;\n@@ -207,11 +207,10 @@ fn build_struct<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n-        struct_type: match &variant.fields[..] {\n-            &[] => doctree::Unit,\n-            &[_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n-            &[..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,\n-            _ => doctree::Plain,\n+        struct_type: match variant.kind {\n+            VariantKind::Struct => doctree::Plain,\n+            VariantKind::Tuple => doctree::Tuple,\n+            VariantKind::Unit => doctree::Unit,\n         },\n         generics: (t.generics, &predicates).clean(cx),\n         fields: variant.fields.clean(cx),"}, {"sha": "c2404f4294e9607d14a496bb07d9a7ec0410dadc", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -82,14 +82,12 @@ impl Module {\n \n #[derive(Debug, Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum StructType {\n-    /// A normal struct\n+    /// A braced struct\n     Plain,\n     /// A tuple struct\n     Tuple,\n-    /// A newtype struct (tuple struct with one element)\n-    Newtype,\n     /// A unit struct\n-    Unit\n+    Unit,\n }\n \n pub enum TypeBound {\n@@ -262,15 +260,10 @@ pub struct Import {\n     pub whence: Span,\n }\n \n-pub fn struct_type_from_def(sd: &hir::VariantData) -> StructType {\n-    if !sd.is_struct() {\n-        // We are in a tuple-struct\n-        match sd.fields().len() {\n-            0 => Unit,\n-            1 => Newtype,\n-            _ => Tuple\n-        }\n-    } else {\n-        Plain\n+pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {\n+    match *vdata {\n+        hir::VariantData::Struct(..) => Plain,\n+        hir::VariantData::Tuple(..) => Tuple,\n+        hir::VariantData::Unit(..) => Unit,\n     }\n }"}, {"sha": "df6b3239cd863df036e0a45b80cf3abf76acdbe6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6c4c08df7f4685daf0fa2cfe127b06216176d6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4b6c4c08df7f4685daf0fa2cfe127b06216176d6", "patch": "@@ -2537,7 +2537,7 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n             }\n             write!(w, \"}}\")?;\n         }\n-        doctree::Tuple | doctree::Newtype => {\n+        doctree::Tuple => {\n             write!(w, \"(\")?;\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {"}]}