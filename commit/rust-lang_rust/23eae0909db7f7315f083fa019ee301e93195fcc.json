{"sha": "23eae0909db7f7315f083fa019ee301e93195fcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZWFlMDkwOWRiN2Y3MzE1ZjA4M2ZhMDE5ZWUzMDFlOTMxOTVmY2M=", "commit": {"author": {"name": "Alex Hamilton", "email": "alex.hamilton@ou.edu", "date": "2019-01-25T16:56:00Z"}, "committer": {"name": "Alex Hamilton", "email": "alex.hamilton@ou.edu", "date": "2019-01-29T21:33:04Z"}, "message": "wildcard_match_arm: rename function.\n\nWe also don't need `ex` as an argument.", "tree": {"sha": "f8e0554e8f7d5d178ef68bfa98702bd7f0940c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e0554e8f7d5d178ef68bfa98702bd7f0940c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23eae0909db7f7315f083fa019ee301e93195fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23eae0909db7f7315f083fa019ee301e93195fcc", "html_url": "https://github.com/rust-lang/rust/commit/23eae0909db7f7315f083fa019ee301e93195fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23eae0909db7f7315f083fa019ee301e93195fcc/comments", "author": {"login": "Aehmlo", "id": 1622250, "node_id": "MDQ6VXNlcjE2MjIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1622250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aehmlo", "html_url": "https://github.com/Aehmlo", "followers_url": "https://api.github.com/users/Aehmlo/followers", "following_url": "https://api.github.com/users/Aehmlo/following{/other_user}", "gists_url": "https://api.github.com/users/Aehmlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aehmlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aehmlo/subscriptions", "organizations_url": "https://api.github.com/users/Aehmlo/orgs", "repos_url": "https://api.github.com/users/Aehmlo/repos", "events_url": "https://api.github.com/users/Aehmlo/events{/privacy}", "received_events_url": "https://api.github.com/users/Aehmlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aehmlo", "id": 1622250, "node_id": "MDQ6VXNlcjE2MjIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1622250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aehmlo", "html_url": "https://github.com/Aehmlo", "followers_url": "https://api.github.com/users/Aehmlo/followers", "following_url": "https://api.github.com/users/Aehmlo/following{/other_user}", "gists_url": "https://api.github.com/users/Aehmlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aehmlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aehmlo/subscriptions", "organizations_url": "https://api.github.com/users/Aehmlo/orgs", "repos_url": "https://api.github.com/users/Aehmlo/repos", "events_url": "https://api.github.com/users/Aehmlo/events{/privacy}", "received_events_url": "https://api.github.com/users/Aehmlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068924198babed20c11715bb4f4acb9f2e470a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/068924198babed20c11715bb4f4acb9f2e470a9c", "html_url": "https://github.com/rust-lang/rust/commit/068924198babed20c11715bb4f4acb9f2e470a9c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "024c88b368c508beec05a6c6c9a6710d53d8b7eb", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23eae0909db7f7315f083fa019ee301e93195fcc/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23eae0909db7f7315f083fa019ee301e93195fcc/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=23eae0909db7f7315f083fa019ee301e93195fcc", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n             check_wild_err_arm(cx, ex, arms);\n-            check_wild_arm(cx, ex, arms);\n+            check_wild_match(cx, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.node {\n@@ -463,7 +463,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n-fn check_wild_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n+fn check_wild_match(cx: &LateContext<'_, '_>, arms: &[Arm]) {\n     for arm in arms {\n         if is_wild(&arm.pats[0]) {\n             span_note_and_lint(cx,"}]}