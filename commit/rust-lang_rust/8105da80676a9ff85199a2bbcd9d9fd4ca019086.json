{"sha": "8105da80676a9ff85199a2bbcd9d9fd4ca019086", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDVkYTgwNjc2YTlmZjg1MTk5YTJiYmNkOWQ5ZmQ0Y2EwMTkwODY=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-25T07:21:22Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:58Z"}, "message": "GC the now-unused old layout helpers", "tree": {"sha": "91af3630ff9644060a18e27b3c52b34a799da4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91af3630ff9644060a18e27b3c52b34a799da4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8105da80676a9ff85199a2bbcd9d9fd4ca019086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8105da80676a9ff85199a2bbcd9d9fd4ca019086", "html_url": "https://github.com/rust-lang/rust/commit/8105da80676a9ff85199a2bbcd9d9fd4ca019086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8105da80676a9ff85199a2bbcd9d9fd4ca019086/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bcf1a81f14223b9108c724794d388db1233905", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bcf1a81f14223b9108c724794d388db1233905", "html_url": "https://github.com/rust-lang/rust/commit/b6bcf1a81f14223b9108c724794d388db1233905"}], "stats": {"total": 46, "additions": 0, "deletions": 46}, "files": [{"sha": "fb7d5bba1e56408f22b867927888bcbfe680fec4", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8105da80676a9ff85199a2bbcd9d9fd4ca019086/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105da80676a9ff85199a2bbcd9d9fd4ca019086/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8105da80676a9ff85199a2bbcd9d9fd4ca019086", "patch": "@@ -239,25 +239,6 @@ pub fn bump_ptr(bcx: block, t: ty::t, base: ValueRef, sz: ValueRef) ->\n     PointerCast(bcx, bumped, typ)\n }\n \n-// Replacement for the LLVM 'GEP' instruction when field indexing into a enum.\n-// @llblobptr is the data part of a enum value; its actual type\n-// is meaningless, as it will be cast away.\n-pub fn GEP_enum(bcx: block, llblobptr: ValueRef, enum_id: ast::def_id,\n-                variant_id: ast::def_id, ty_substs: &[ty::t],\n-                ix: uint) -> ValueRef {\n-    let _icx = bcx.insn_ctxt(\"GEP_enum\");\n-    let ccx = bcx.ccx();\n-    let variant = ty::enum_variant_with_id(ccx.tcx, enum_id, variant_id);\n-    assert ix < variant.args.len();\n-\n-    let arg_lltys = vec::map(variant.args, |aty| {\n-        type_of(ccx, ty::subst_tps(ccx.tcx, ty_substs, None, *aty))\n-    });\n-    let typed_blobptr = PointerCast(bcx, llblobptr,\n-                                    T_ptr(T_struct(arg_lltys)));\n-    GEPi(bcx, typed_blobptr, [0u, ix])\n-}\n-\n // Returns a pointer to the body for the box. The box may be an opaque\n // box. The result will be casted to the type of body_t, if it is statically\n // known."}, {"sha": "70b63f7952e1a5d25ffc0b24001765c3fb3882a4", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8105da80676a9ff85199a2bbcd9d9fd4ca019086/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105da80676a9ff85199a2bbcd9d9fd4ca019086/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8105da80676a9ff85199a2bbcd9d9fd4ca019086", "patch": "@@ -1042,21 +1042,6 @@ pub fn T_enum_discrim(cx: @CrateContext) -> TypeRef {\n     return cx.int_type;\n }\n \n-pub fn T_opaque_enum(cx: @CrateContext) -> TypeRef {\n-    let s = @\"opaque_enum\";\n-    match name_has_type(cx.tn, s) {\n-      Some(t) => return t,\n-      _ => ()\n-    }\n-    let t = T_struct(~[T_enum_discrim(cx), T_i8()]);\n-    associate_type(cx.tn, s, t);\n-    return t;\n-}\n-\n-pub fn T_opaque_enum_ptr(cx: @CrateContext) -> TypeRef {\n-    return T_ptr(T_opaque_enum(cx));\n-}\n-\n pub fn T_captured_tydescs(cx: @CrateContext, n: uint) -> TypeRef {\n     return T_struct(vec::from_elem::<TypeRef>(n, T_ptr(cx.tydesc_type)));\n }\n@@ -1468,18 +1453,6 @@ pub fn dummy_substs(+tps: ~[ty::t]) -> ty::substs {\n     }\n }\n \n-pub fn struct_field(index: uint) -> [uint * 3] {\n-    //! The GEPi sequence to access a field of a record/struct.\n-\n-    [0, 0, index]\n-}\n-\n-pub fn struct_dtor() -> [uint * 2] {\n-    //! The GEPi sequence to access the dtor of a struct.\n-\n-    [0, 1]\n-}\n-\n // Casts a Rust bool value to an i1.\n pub fn bool_to_i1(bcx: block, llval: ValueRef) -> ValueRef {\n     build::ICmp(bcx, lib::llvm::IntNE, llval, C_bool(false))"}]}