{"sha": "5501eba6452d5877b3c45aabadb105d3daa71b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MDFlYmE2NDUyZDU4NzdiM2M0NWFhYmFkYjEwNWQzZGFhNzFiNGI=", "commit": {"author": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2021-08-06T06:32:36Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2021-08-06T09:11:49Z"}, "message": "current_exe haiku code path simplification all of these part of libc", "tree": {"sha": "50b1250ee73d718cbd5f857f4811db20479f2e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b1250ee73d718cbd5f857f4811db20479f2e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5501eba6452d5877b3c45aabadb105d3daa71b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5501eba6452d5877b3c45aabadb105d3daa71b4b", "html_url": "https://github.com/rust-lang/rust/commit/5501eba6452d5877b3c45aabadb105d3daa71b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5501eba6452d5877b3c45aabadb105d3daa71b4b/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7129033b429d75709d71fb6bf66c0cce2fec77c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7129033b429d75709d71fb6bf66c0cce2fec77c1", "html_url": "https://github.com/rust-lang/rust/commit/7129033b429d75709d71fb6bf66c0cce2fec77c1"}], "stats": {"total": 41, "additions": 8, "deletions": 33}, "files": [{"sha": "bbfe846e31556d732a9ad70ee33800b894d11e2d", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5501eba6452d5877b3c45aabadb105d3daa71b4b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5501eba6452d5877b3c45aabadb105d3daa71b4b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=5501eba6452d5877b3c45aabadb105d3daa71b4b", "patch": "@@ -388,46 +388,21 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(target_os = \"haiku\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    // Use Haiku's image info functions\n-    #[repr(C)]\n-    struct image_info {\n-        id: i32,\n-        type_: i32,\n-        sequence: i32,\n-        init_order: i32,\n-        init_routine: *mut libc::c_void, // function pointer\n-        term_routine: *mut libc::c_void, // function pointer\n-        device: libc::dev_t,\n-        node: libc::ino_t,\n-        name: [libc::c_char; 1024], // MAXPATHLEN\n-        text: *mut libc::c_void,\n-        data: *mut libc::c_void,\n-        text_size: i32,\n-        data_size: i32,\n-        api_version: i32,\n-        abi: i32,\n-    }\n-\n     unsafe {\n-        extern \"C\" {\n-            fn _get_next_image_info(\n-                team_id: i32,\n-                cookie: *mut i32,\n-                info: *mut image_info,\n-                size: i32,\n-            ) -> i32;\n-        }\n-\n-        let mut info: image_info = mem::zeroed();\n+        let mut info: mem::MaybeUninit<libc::image_info> = mem::MaybeUninit::uninit();\n         let mut cookie: i32 = 0;\n         // the executable can be found at team id 0\n-        let result =\n-            _get_next_image_info(0, &mut cookie, &mut info, mem::size_of::<image_info>() as i32);\n+        let result = libc::_get_next_image_info(\n+            0,\n+            &mut cookie,\n+            info.as_mut_ptr(),\n+            mem::size_of::<libc::image_info>(),\n+        );\n         if result != 0 {\n             use crate::io::ErrorKind;\n             Err(io::Error::new_const(ErrorKind::Uncategorized, &\"Error getting executable path\"))\n         } else {\n-            let name = CStr::from_ptr(info.name.as_ptr()).to_bytes();\n+            let name = CStr::from_ptr((*info.as_ptr()).name.as_ptr()).to_bytes();\n             Ok(PathBuf::from(OsStr::from_bytes(name)))\n         }\n     }"}]}