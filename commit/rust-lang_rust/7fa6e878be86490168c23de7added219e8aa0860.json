{"sha": "7fa6e878be86490168c23de7added219e8aa0860", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTZlODc4YmU4NjQ5MDE2OGMyM2RlN2FkZGVkMjE5ZThhYTA4NjA=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-05-21T10:38:04Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-05-22T14:16:56Z"}, "message": "Provide some benchmarks for bitset hybrid union", "tree": {"sha": "7b3fb965f1e88d71a754738ac5077904374c28e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3fb965f1e88d71a754738ac5077904374c28e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa6e878be86490168c23de7added219e8aa0860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa6e878be86490168c23de7added219e8aa0860", "html_url": "https://github.com/rust-lang/rust/commit/7fa6e878be86490168c23de7added219e8aa0860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa6e878be86490168c23de7added219e8aa0860/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a0defd5a93523067ef239936cc2e0755220904", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a0defd5a93523067ef239936cc2e0755220904", "html_url": "https://github.com/rust-lang/rust/commit/50a0defd5a93523067ef239936cc2e0755220904"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "b9842b5b77a809b92b1764e4bdd2b99a5b2cd342", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7fa6e878be86490168c23de7added219e8aa0860/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa6e878be86490168c23de7added219e8aa0860/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=7fa6e878be86490168c23de7added219e8aa0860", "patch": "@@ -5,6 +5,10 @@ use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n use std::slice;\n+#[cfg(test)]\n+extern crate test;\n+#[cfg(test)]\n+use test::Bencher;\n \n pub type Word = u64;\n pub const WORD_BYTES: usize = mem::size_of::<Word>();\n@@ -1132,3 +1136,87 @@ fn sparse_matrix_iter() {\n     }\n     assert!(iter.next().is_none());\n }\n+\n+/// Merge dense hybrid set into empty sparse hybrid set.\n+#[bench]\n+fn union_hybrid_sparse_empty_to_dense(b: &mut Bencher) {\n+    let mut pre_dense: HybridBitSet<usize> = HybridBitSet::new_empty(256);\n+    for i in 0..10 {\n+        assert!(pre_dense.insert(i));\n+    }\n+    let pre_sparse: HybridBitSet<usize> = HybridBitSet::new_empty(256);\n+    b.iter(|| {\n+        let dense = pre_dense.clone();\n+        let mut sparse = pre_sparse.clone();\n+        sparse.union(&dense);\n+    })\n+}\n+\n+/// Merge dense hybrid set into full hybrid set with same indices.\n+#[bench]\n+fn union_hybrid_sparse_full_to_dense(b: &mut Bencher) {\n+    let mut pre_dense: HybridBitSet<usize> = HybridBitSet::new_empty(256);\n+    for i in 0..10 {\n+        assert!(pre_dense.insert(i));\n+    }\n+    let mut pre_sparse: HybridBitSet<usize> = HybridBitSet::new_empty(256);\n+    for i in 0..SPARSE_MAX {\n+        assert!(pre_sparse.insert(i));\n+    }\n+    b.iter(|| {\n+        let dense = pre_dense.clone();\n+        let mut sparse = pre_sparse.clone();\n+        sparse.union(&dense);\n+    })\n+}\n+\n+/// Merge dense hybrid set into full hybrid set with indices over the whole domain.\n+#[bench]\n+fn union_hybrid_sparse_domain_to_dense(b: &mut Bencher) {\n+    let mut pre_dense: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX*64);\n+    for i in 0..10 {\n+        assert!(pre_dense.insert(i));\n+    }\n+    let mut pre_sparse: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX*64);\n+    for i in 0..SPARSE_MAX {\n+        assert!(pre_sparse.insert(i*64));\n+    }\n+    b.iter(|| {\n+        let dense = pre_dense.clone();\n+        let mut sparse = pre_sparse.clone();\n+        sparse.union(&dense);\n+    })\n+}\n+\n+/// Merge dense hybrid set into empty hybrid set where the domain is very small.\n+#[bench]\n+fn union_hybrid_sparse_empty_small_domain(b: &mut Bencher) {\n+    let mut pre_dense: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX);\n+    for i in 0..SPARSE_MAX {\n+        assert!(pre_dense.insert(i));\n+    }\n+    let pre_sparse: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX);\n+    b.iter(|| {\n+        let dense = pre_dense.clone();\n+        let mut sparse = pre_sparse.clone();\n+        sparse.union(&dense);\n+    })\n+}\n+\n+/// Merge dense hybrid set into full hybrid set where the domain is very small.\n+#[bench]\n+fn union_hybrid_sparse_full_small_domain(b: &mut Bencher) {\n+    let mut pre_dense: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX);\n+    for i in 0..SPARSE_MAX {\n+        assert!(pre_dense.insert(i));\n+    }\n+    let mut pre_sparse: HybridBitSet<usize> = HybridBitSet::new_empty(SPARSE_MAX);\n+    for i in 0..SPARSE_MAX {\n+        assert!(pre_sparse.insert(i));\n+    }\n+    b.iter(|| {\n+        let dense = pre_dense.clone();\n+        let mut sparse = pre_sparse.clone();\n+        sparse.union(&dense);\n+    })\n+}"}]}