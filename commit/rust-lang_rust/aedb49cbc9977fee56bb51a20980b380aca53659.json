{"sha": "aedb49cbc9977fee56bb51a20980b380aca53659", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZGI0OWNiYzk5NzdmZWU1NmJiNTFhMjA5ODBiMzgwYWNhNTM2NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T00:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T00:56:18Z"}, "message": "Auto merge of #39199 - alexcrichton:rollup, r=alexcrichton\n\nRollup of 28 pull requests\n\n- Successful merges: #38603, #38761, #38842, #38847, #38955, #38966, #39062, #39068, #39077, #39111, #39112, #39114, #39118, #39120, #39132, #39135, #39138, #39142, #39143, #39146, #39157, #39166, #39167, #39168, #39179, #39184, #39195, #39197\n- Failed merges: #39060, #39145", "tree": {"sha": "65cdd472388b112d1bb3aba847f596ac13067755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65cdd472388b112d1bb3aba847f596ac13067755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aedb49cbc9977fee56bb51a20980b380aca53659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aedb49cbc9977fee56bb51a20980b380aca53659", "html_url": "https://github.com/rust-lang/rust/commit/aedb49cbc9977fee56bb51a20980b380aca53659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aedb49cbc9977fee56bb51a20980b380aca53659/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a52da95ced667fe8ff490f73c0b041a4f926c041", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52da95ced667fe8ff490f73c0b041a4f926c041", "html_url": "https://github.com/rust-lang/rust/commit/a52da95ced667fe8ff490f73c0b041a4f926c041"}, {"sha": "8bee3983f8d480ee928c40f5d92394da0adba9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bee3983f8d480ee928c40f5d92394da0adba9c2", "html_url": "https://github.com/rust-lang/rust/commit/8bee3983f8d480ee928c40f5d92394da0adba9c2"}], "stats": {"total": 5901, "additions": 4974, "deletions": 927}, "files": [{"sha": "0546f6827a6f59fa98c9209416400f0ba5affc9a", "filename": ".travis.yml", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,13 +8,13 @@ git:\n   depth: 1\n   submodules: false\n \n-osx_image: xcode8.2\n-\n matrix:\n+  fast_finish: true\n   include:\n     # Linux builders, all docker images\n-    - env: IMAGE=arm-android DEPLOY=1\n+    - env: IMAGE=android DEPLOY=1\n     - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=linux-tested-targets DEPLOY=1\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n     - env: IMAGE=dist-armv7-aarch64-linux DEPLOY=1\n     - env: IMAGE=dist-freebsd DEPLOY=1\n@@ -23,16 +23,17 @@ matrix:\n     - env: IMAGE=dist-powerpc-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n     - env: IMAGE=dist-s390x-linux-netbsd DEPLOY=1\n-    - env: IMAGE=i686-gnu DEPLOY=1\n+    - env: IMAGE=dist-x86-linux DEPLOY=1\n+    - env: IMAGE=emscripten\n+    - env: IMAGE=i686-gnu\n     - env: IMAGE=i686-gnu-nopt\n-    - env: IMAGE=x86_64-gnu DEPLOY=1\n+    - env: IMAGE=x86_64-gnu\n     - env: IMAGE=x86_64-gnu-full-bootstrap\n     - env: IMAGE=x86_64-gnu-aux\n     - env: IMAGE=x86_64-gnu-debug\n     - env: IMAGE=x86_64-gnu-nopt\n     - env: IMAGE=x86_64-gnu-make\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n-    - env: IMAGE=x86_64-musl DEPLOY=1\n     - env: IMAGE=x86_64-gnu-distcheck\n \n     # OSX builders\n@@ -41,6 +42,7 @@ matrix:\n         RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n         SRC=.\n       os: osx\n+      osx_image: xcode8.2\n       before_script: &osx_before_script >\n         ulimit -c unlimited\n       install: &osx_install_sccache >\n@@ -50,7 +52,7 @@ matrix:\n         echo 'bt all' > cmds;\n         for file in $(ls /cores); do\n           echo core file $file;\n-          lldb -c $file `which ld` -b -s cmds;\n+          lldb -c /cores/$file `which ld` -b -s cmds;\n         done\n \n     - env: >\n@@ -59,6 +61,7 @@ matrix:\n         SRC=.\n         DEPLOY=1\n       os: osx\n+      osx_image: xcode8.2\n       before_script: *osx_before_script\n       install: *osx_install_sccache\n       after_failure: *osx_after_failure\n@@ -67,6 +70,7 @@ matrix:\n         RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin --disable-rustbuild\n         SRC=.\n       os: osx\n+      osx_image: xcode8.2\n       before_script: *osx_before_script\n       install: *osx_install_sccache\n       after_failure: *osx_after_failure\n@@ -76,6 +80,7 @@ matrix:\n         SRC=.\n         DEPLOY=1\n       os: osx\n+      osx_image: xcode8.2\n       before_script: *osx_before_script\n       install: *osx_install_sccache\n       after_failure: *osx_after_failure\n@@ -119,11 +124,9 @@ before_deploy:\n   - mkdir -p deploy/$TRAVIS_COMMIT\n   - >\n       if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n-          cp build/dist/*.tar.gz deploy/$TRAVIS_COMMIT &&\n-          find \"deploy/$TRAVIS_COMMIT\" -maxdepth 1 -type f -exec sh -c 'shasum -a 256 -b \"{}\" > \"{}.sha256\"' \\;;\n+          cp build/dist/*.tar.gz deploy/$TRAVIS_COMMIT;\n       else\n-          cp obj/build/dist/*.tar.gz deploy/$TRAVIS_COMMIT &&\n-          find \"deploy/$TRAVIS_COMMIT\" -maxdepth 1 -type f -exec sh -c 'sha256sum -b \"{}\" > \"{}.sha256\"' \\;;\n+          cp obj/build/dist/*.tar.gz deploy/$TRAVIS_COMMIT;\n       fi\n \n deploy:"}, {"sha": "74ab03f7778e5b8332506fdd92992ea7a8e7188a", "filename": "RELEASES.md", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,3 +1,244 @@\n+Version 1.15.0 (2017-02-02)\n+===========================\n+\n+Language\n+--------\n+\n+* Basic procedural macros allowing custom `#[derive]`, aka \"macros 1.1\", are\n+  stable. This allows popular code-generating crates like Serde and Diesel to\n+  work ergonomically. [RFC 1681].\n+* [Tuple structs may be empty. Unary and empty tuple structs may be instantiated\n+  with curly braces][36868]. Part of [RFC 1506].\n+* [A number of minor changes to name resolution have been activated][37127].\n+  They add up to more consistent semantics, allowing for future evolution of\n+  Rust macros. Specified in [RFC 1560], see its section on [\"changes\"] for\n+  details of what is different. The breaking changes here have been transitioned\n+  through the [`legacy_imports`] lint since 1.14, with no known regressions.\n+* [In `macro_rules`, `path` fragments can now be parsed as type parameter\n+  bounds][38279]\n+* [`?Sized` can be used in `where` clauses][37791]\n+* [There is now a limit on the size of monomorphized types and it can be\n+  modified with the `#![type_size_limit]` crate attribute, similarly to\n+  the `#![recursion_limit]` attribute][37789]\n+\n+Compiler\n+--------\n+\n+* [On Windows, the compiler will apply dllimport attributes when linking to\n+  extern functions][37973]. Additional attributes and flags can control which\n+  library kind is linked and its name. [RFC 1717].\n+* [Rust-ABI symbols are no longer exported from cdylibs][38117]\n+* [The `--test` flag works with procedural macro crates][38107]\n+* [Fix `extern \"aapcs\" fn` ABI][37814]\n+* [The `-C no-stack-check` flag is deprecated][37636]. It does nothing.\n+* [The `format!` expander recognizes incorrect `printf` and shell-style\n+  formatting directives and suggests the correct format][37613].\n+* [Only report one error for all unused imports in an import list][37456]\n+\n+Compiler Performance\n+--------------------\n+\n+* [Avoid unnecessary `mk_ty` calls in `Ty::super_fold_with`][37705]\n+* [Avoid more unnecessary `mk_ty` calls in `Ty::super_fold_with`][37979]\n+* [Don't clone in `UnificationTable::probe`][37848]\n+* [Remove `scope_auxiliary` to cut RSS by 10%][37764]\n+* [Use small vectors in type walker][37760]\n+* [Macro expansion performance was improved][37701]\n+* [Change `HirVec<P<T>>` to `HirVec<T>` in `hir::Expr`][37642]\n+* [Replace FNV with a faster hash function][37229]\n+\n+Stabilized APIs\n+---------------\n+\n+* [`std::iter::Iterator::min_by`]\n+* [`std::iter::Iterator::max_by`]\n+* [`std::os::*::fs::FileExt`]\n+* [`std::sync::atomic::Atomic*::get_mut`]\n+* [`std::sync::atomic::Atomic*::into_inner`]\n+* [`std::vec::IntoIter::as_slice`]\n+* [`std::vec::IntoIter::as_mut_slice`]\n+* [`std::sync::mpsc::Receiver::try_iter`]\n+* [`std::os::unix::process::CommandExt::before_exec`]\n+* [`std::rc::Rc::strong_count`]\n+* [`std::rc::Rc::weak_count`]\n+* [`std::sync::Arc::strong_count`]\n+* [`std::sync::Arc::weak_count`]\n+* [`std::char::encode_utf8`]\n+* [`std::char::encode_utf16`]\n+* [`std::cell::Ref::clone`]\n+* [`std::io::Take::into_inner`]\n+\n+Libraries\n+---------\n+\n+* [The standard sorting algorithm has been rewritten for dramatic performance\n+  improvements][38192]. It is a hybrid merge sort, drawing influences from\n+  Timsort. Previously it was a naive merge sort.\n+* [`Iterator::nth` no longer has a `Sized` bound][38134]\n+* [`Extend<&T>` is specialized for `Vec` where `T: Copy`][38182] to improve\n+  performance.\n+* [`chars().count()` is much faster][37888] and so are [`chars().last()`\n+  and `char_indices().last()`][37882]\n+* [Fix ARM Objective-C ABI in `std::env::args`][38146]\n+* [Chinese characters display correctly in `fmt::Debug`][37855]\n+* [Derive `Default` for `Duration`][37699]\n+* [Support creation of anonymous pipes on WinXP/2k][37677]\n+* [`mpsc::RecvTimeoutError` implements `Error`][37527]\n+* [Don't pass overlapped handles to processes][38835]\n+\n+Cargo\n+-----\n+\n+* [In this release, Cargo build scripts no longer have access to the `OUT_DIR`\n+  environment variable at build time via `env!(\"OUT_DIR\")`][cargo/3368]. They\n+  should instead check the variable at runtime with `std::env`. That the value\n+  was set at build time was a bug, and incorrect when cross-compiling. This\n+  change is known to cause breakage.\n+* [Add `--all` flag to `cargo test`][cargo/3221]\n+* [Compile statically against the MSVC CRT][cargo/3363]\n+* [Mix feature flags into fingerprint/metadata shorthash][cargo/3102]\n+* [Link OpenSSL statically on OSX][cargo/3311]\n+* [Apply new fingerprinting to build dir outputs][cargo/3310]\n+* [Test for bad path overrides with summaries][cargo/3336]\n+* [Require `cargo install --vers` to take a semver version][cargo/3338]\n+* [Fix retrying crate downloads for network errors][cargo/3348]\n+* [Implement string lookup for `build.rustflags` config key][cargo/3356]\n+* [Emit more info on --message-format=json][cargo/3319]\n+* [Assume `build.rs` in the same directory as `Cargo.toml` is a build script][cargo/3361]\n+* [Don't ignore errors in workspace manifest][cargo/3409]\n+* [Fix `--message-format JSON` when rustc emits non-JSON warnings][cargo/3410]\n+\n+Tooling\n+-------\n+\n+* [Test runners (binaries built with `--test`) now support a `--list` argument\n+  that lists the tests it contains][38185]\n+* [Test runners now support a `--exact` argument that makes the test filter\n+  match exactly, instead of matching only a substring of the test name][38181]\n+* [rustdoc supports a `--playground-url` flag][37763]\n+* [rustdoc provides more details about `#[should_panic]` errors][37749]\n+\n+Misc\n+----\n+\n+* [The Rust build system is now written in Rust][37817]. The Makefiles may\n+  continue to be used in this release by passing `--disable-rustbuild` to the\n+  configure script, but they will be deleted soon. Note that the new build\n+  system uses a different on-disk layout that will likely affect any scripts\n+  building Rust.\n+* [Rust supports i686-unknown-openbsd][38086]. Tier 3 support. No testing or\n+  releases.\n+* [Rust supports the MSP430][37627]. Tier 3 support. No testing or releases.\n+* [Rust supports the ARMv5TE architecture][37615]. Tier 3 support. No testing or\n+  releases.\n+\n+Compatibility Notes\n+-------------------\n+\n+* [A number of minor changes to name resolution have been activated][37127].\n+  They add up to more consistent semantics, allowing for future evolution of\n+  Rust macros. Specified in [RFC 1560], see its section on [\"changes\"] for\n+  details of what is different. The breaking changes here have been transitioned\n+  through the [`legacy_imports`] lint since 1.14, with no known regressions.\n+* [In this release, Cargo build scripts no longer have access to the `OUT_DIR`\n+  environment variable at build time via `env!(\"OUT_DIR\")`][cargo/3368]. They\n+  should instead check the variable at runtime with `std::env`. That the value\n+  was set at build time was a bug, and incorrect when cross-compiling. This\n+  change is known to cause breakage.\n+* [Higher-ranked lifetimes are no longer allowed to appear _only_ in associated\n+  types][33685]. The [`hr_lifetime_in_assoc_type` lint] has been a warning since\n+  1.10 and is now an error by default. It will become a hard error in the near\n+  future.\n+* [The semantics relating modules to file system directories are changing in\n+  minor ways][37602]. This is captured in the new `legacy_directory_ownership`\n+  lint, which is a warning in this release, and will become a hard error in the\n+  future.\n+* [Rust-ABI symbols are no longer exported from cdylibs][38117]\n+* [Once `Peekable` peeks a `None` it will return that `None` without re-querying\n+  the underlying iterator][37834]\n+\n+[\"changes\"]: https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md#changes-to-name-resolution-rules\n+[33685]: https://github.com/rust-lang/rust/issues/33685\n+[36868]: https://github.com/rust-lang/rust/pull/36868\n+[37127]: https://github.com/rust-lang/rust/pull/37127\n+[37229]: https://github.com/rust-lang/rust/pull/37229\n+[37456]: https://github.com/rust-lang/rust/pull/37456\n+[37527]: https://github.com/rust-lang/rust/pull/37527\n+[37602]: https://github.com/rust-lang/rust/pull/37602\n+[37613]: https://github.com/rust-lang/rust/pull/37613\n+[37615]: https://github.com/rust-lang/rust/pull/37615\n+[37636]: https://github.com/rust-lang/rust/pull/37636\n+[37642]: https://github.com/rust-lang/rust/pull/37642\n+[37677]: https://github.com/rust-lang/rust/pull/37677\n+[37699]: https://github.com/rust-lang/rust/pull/37699\n+[37701]: https://github.com/rust-lang/rust/pull/37701\n+[37705]: https://github.com/rust-lang/rust/pull/37705\n+[37749]: https://github.com/rust-lang/rust/pull/37749\n+[37760]: https://github.com/rust-lang/rust/pull/37760\n+[37763]: https://github.com/rust-lang/rust/pull/37763\n+[37764]: https://github.com/rust-lang/rust/pull/37764\n+[37789]: https://github.com/rust-lang/rust/pull/37789\n+[37791]: https://github.com/rust-lang/rust/pull/37791\n+[37814]: https://github.com/rust-lang/rust/pull/37814\n+[37817]: https://github.com/rust-lang/rust/pull/37817\n+[37834]: https://github.com/rust-lang/rust/pull/37834\n+[37848]: https://github.com/rust-lang/rust/pull/37848\n+[37855]: https://github.com/rust-lang/rust/pull/37855\n+[37882]: https://github.com/rust-lang/rust/pull/37882\n+[37888]: https://github.com/rust-lang/rust/pull/37888\n+[37973]: https://github.com/rust-lang/rust/pull/37973\n+[37979]: https://github.com/rust-lang/rust/pull/37979\n+[38086]: https://github.com/rust-lang/rust/pull/38086\n+[38107]: https://github.com/rust-lang/rust/pull/38107\n+[38117]: https://github.com/rust-lang/rust/pull/38117\n+[38134]: https://github.com/rust-lang/rust/pull/38134\n+[38146]: https://github.com/rust-lang/rust/pull/38146\n+[38181]: https://github.com/rust-lang/rust/pull/38181\n+[38182]: https://github.com/rust-lang/rust/pull/38182\n+[38185]: https://github.com/rust-lang/rust/pull/38185\n+[38192]: https://github.com/rust-lang/rust/pull/38192\n+[38279]: https://github.com/rust-lang/rust/pull/38279\n+[38835]: https://github.com/rust-lang/rust/pull/38835\n+[RFC 1492]: https://github.com/rust-lang/rfcs/blob/master/text/1492-dotdot-in-patterns.md\n+[RFC 1506]: https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\n+[RFC 1560]: https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md\n+[RFC 1681]: https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md\n+[RFC 1717]: https://github.com/rust-lang/rfcs/blob/master/text/1717-dllimport.md\n+[`hr_lifetime_in_assoc_type` lint]: https://github.com/rust-lang/rust/issues/33685\n+[`legacy_imports`]: https://github.com/rust-lang/rust/pull/38271\n+[cargo/3102]: https://github.com/rust-lang/cargo/pull/3102\n+[cargo/3221]: https://github.com/rust-lang/cargo/pull/3221\n+[cargo/3310]: https://github.com/rust-lang/cargo/pull/3310\n+[cargo/3311]: https://github.com/rust-lang/cargo/pull/3311\n+[cargo/3319]: https://github.com/rust-lang/cargo/pull/3319\n+[cargo/3336]: https://github.com/rust-lang/cargo/pull/3336\n+[cargo/3338]: https://github.com/rust-lang/cargo/pull/3338\n+[cargo/3348]: https://github.com/rust-lang/cargo/pull/3348\n+[cargo/3356]: https://github.com/rust-lang/cargo/pull/3356\n+[cargo/3361]: https://github.com/rust-lang/cargo/pull/3361\n+[cargo/3363]: https://github.com/rust-lang/cargo/pull/3363\n+[cargo/3368]: https://github.com/rust-lang/cargo/issues/3368\n+[cargo/3409]: https://github.com/rust-lang/cargo/pull/3409\n+[cargo/3410]: https://github.com/rust-lang/cargo/pull/3410\n+[`std::iter::Iterator::min_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by\n+[`std::iter::Iterator::max_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n+[`std::os::*::fs::FileExt`]: https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html\n+[`std::sync::atomic::Atomic*::get_mut`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.get_mut\n+[`std::sync::atomic::Atomic*::into_inner`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html#method.into_inner\n+[`std::vec::IntoIter::as_slice`]: https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_slice\n+[`std::vec::IntoIter::as_mut_slice`]: https://doc.rust-lang.org/std/vec/struct.IntoIter.html#method.as_mut_slice\n+[`std::sync::mpsc::Receiver::try_iter`]: https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_iter\n+[`std::os::unix::process::CommandExt::before_exec`]: https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html#tymethod.before_exec\n+[`std::rc::Rc::strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.strong_count\n+[`std::rc::Rc::weak_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.weak_count\n+[`std::sync::Arc::strong_count`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.strong_count\n+[`std::sync::Arc::weak_count`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.weak_count\n+[`std::char::encode_utf8`]: https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\n+[`std::char::encode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf16\n+[`std::cell::Ref::clone`]: https://doc.rust-lang.org/std/cell/struct.Ref.html#method.clone\n+[`std::io::Take::into_inner`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.into_inner\n+\n+\n Version 1.14.0 (2016-12-22)\n ===========================\n "}, {"sha": "cd61f95875f7f49f2e9321daa67c14d0bc5289ff", "filename": "appveyor.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,8 +11,8 @@ environment:\n     SCRIPT: python x.py test && python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    SCRIPT: python x.py test && python x.py dist\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc --target=i586-pc-windows-msvc\n+    SCRIPT: python x.py test --host i686-pc-windows-msvc --target i686-pc-windows-msvc && python x.py dist\n     DEPLOY: 1\n \n   # MSVC makefiles\n@@ -73,6 +73,9 @@ environment:\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n \n+matrix:\n+  fast_finish: true\n+\n clone_depth: 1\n build: false\n \n@@ -131,9 +134,6 @@ before_deploy:\n   - ps: |\n         New-Item -Path deploy -ItemType directory\n         Get-ChildItem -Path build\\dist -Filter '*.tar.gz' | Move-Item -Destination deploy\n-        Get-FileHash .\\deploy\\* | ForEach-Object {\n-          [io.file]::WriteAllText($_.Path + \".sha256\", $_.Hash.ToLower() + \"`n\")\n-        }\n         Get-ChildItem -Path deploy | Foreach-Object {\n           Push-AppveyorArtifact $_.FullName -FileName ${env:APPVEYOR_REPO_COMMIT}/$_\n         }\n@@ -147,7 +147,7 @@ deploy:\n     bucket: rust-lang-ci\n     set_public: true\n     region: us-east-1\n-    artifact: /.*\\.(tar.gz|sha256)/\n+    artifact: /.*\\.tar.gz/\n     folder: rustc-builds\n     on:\n       branch: auto"}, {"sha": "54c8194678e61acd809cecec5c450369856e7713", "filename": "src/bootstrap/cc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -121,10 +121,14 @@ fn set_compiler(cfg: &mut gcc::Config,\n         }\n \n         \"mips-unknown-linux-musl\" => {\n-            cfg.compiler(\"mips-linux-musl-gcc\");\n+            if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n+                cfg.compiler(\"mips-linux-musl-gcc\");\n+            }\n         }\n         \"mipsel-unknown-linux-musl\" => {\n-            cfg.compiler(\"mipsel-linux-musl-gcc\");\n+            if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n+                cfg.compiler(\"mipsel-linux-musl-gcc\");\n+            }\n         }\n \n         t if t.contains(\"musl\") => {"}, {"sha": "079f93e7331f1db0763acc442ce417d86b440a10", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -213,7 +213,11 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n     if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n         cargo.env(\"CFG_LLVM_ROOT\", s);\n     }\n-    if build.config.llvm_static_stdcpp {\n+    // Building with a static libstdc++ is only supported on linux right now,\n+    // not for MSVC or OSX\n+    if build.config.llvm_static_stdcpp &&\n+       !target.contains(\"windows\") &&\n+       !target.contains(\"apple\") {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n                   compiler_file(build.cxx(target), \"libstdc++.a\"));\n     }"}, {"sha": "c5bbfd89b2787cc530ef7a96e2177585a09913ac", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -287,8 +287,8 @@ To learn more about a subcommand, run `./x.py <command> -h`\n             build: m.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()\n             }),\n-            host: m.opt_strs(\"host\"),\n-            target: m.opt_strs(\"target\"),\n+            host: split(m.opt_strs(\"host\")),\n+            target: split(m.opt_strs(\"target\")),\n             config: cfg_file,\n             src: m.opt_str(\"src\").map(PathBuf::from),\n             jobs: m.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n@@ -309,3 +309,7 @@ impl Subcommand {\n         }\n     }\n }\n+\n+fn split(s: Vec<String>) -> Vec<String> {\n+    s.iter().flat_map(|s| s.split(',')).map(|s| s.to_string()).collect()\n+}"}, {"sha": "8e79c2d27d1957e5d4dbbd1177a8f0ca2ed2502f", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -45,7 +45,7 @@ pub fn check(build: &mut Build) {\n             let target = path.join(cmd);\n             let mut cmd_alt = cmd.to_os_string();\n             cmd_alt.push(\".exe\");\n-            if target.exists() ||\n+            if target.is_file() ||\n                target.with_extension(\"exe\").exists() ||\n                target.join(cmd_alt).exists() {\n                 return Some(target);"}, {"sha": "9a0a4c8cb530a3610628c966e56f4a840371befa", "filename": "src/ci/docker/README.md", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,145 @@\n+# Docker images for CI\n+\n+This folder contains a bunch of docker images used by the continuous integration\n+(CI) of Rust. An script is accompanied (`run.sh`) with these images to actually\n+execute them. To test out an image execute:\n+\n+```\n+./src/ci/docker/run.sh $image_name\n+```\n+\n+for example:\n+\n+```\n+./src/ci/docker/run.sh x86_64-gnu\n+```\n+\n+Images will output artifacts in an `obj` dir at the root of a repository.\n+\n+## Cross toolchains\n+\n+A number of these images take quite a long time to compile as they're building\n+whole gcc toolchains to do cross builds with. Much of this is relatively\n+self-explanatory but some images use [crosstool-ng] which isn't quite as self\n+explanatory. Below is a description of where these `*.config` files come form,\n+how to generate them, and how the existing ones were generated.\n+\n+[crosstool-ng]: https://github.com/crosstool-ng/crosstool-ng\n+\n+### Generating a `.config` file\n+\n+If you have a `linux-cross` image lying around you can use that and skip the\n+next two steps.\n+\n+- First we spin up a container and copy `build_toolchain_root.sh` into it. All\n+  these steps are outside the container:\n+\n+```\n+# Note: We use ubuntu:15.10 because that's the \"base\" of linux-cross Docker\n+# image\n+$ docker run -it ubuntu:15.10 bash\n+$ docker ps\n+CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n+cfbec05ed730        ubuntu:15.10        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n+$ docker cp build_toolchain_root.sh drunk_murdock:/\n+```\n+\n+- Then inside the container we build crosstool-ng by simply calling the bash\n+  script we copied in the previous step:\n+\n+```\n+$ bash build_toolchain_root.sh\n+```\n+\n+- Now, inside the container run the following command to configure the\n+  toolchain. To get a clue of which options need to be changed check the next\n+  section and come back.\n+\n+```\n+$ ct-ng menuconfig\n+```\n+\n+- Finally, we retrieve the `.config` file from the container and give it a\n+  meaningful name. This is done outside the container.\n+\n+```\n+$ docker drunk_murdock:/.config arm-linux-gnueabi.config\n+```\n+\n+- Now you can shutdown the container or repeat the two last steps to generate a\n+  new `.config` file.\n+\n+### Toolchain configuration\n+\n+Changes on top of the default toolchain configuration used to generate the\n+`.config` files in this directory. The changes are formatted as follows:\n+\n+```\n+$category > $option = $value -- $comment\n+```\n+\n+### `arm-linux-gnueabi.config`\n+\n+For targets: `arm-unknown-linux-gnueabi`\n+\n+- Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n+- Target options > Target Architecture = arm\n+- Target options > Architecture level = armv6 -- (+)\n+- Target options > Floating point = software (no FPU) -- (\\*)\n+- Operating System > Target OS = linux\n+- Operating System > Linux kernel version = 3.2.72 -- Precise kernel\n+- C-library > glibc version = 2.14.1\n+- C compiler > gcc version = 4.9.3\n+- C compiler > C++ = ENABLE -- to cross compile LLVM\n+\n+### `arm-linux-gnueabihf.config`\n+\n+For targets: `arm-unknown-linux-gnueabihf`\n+\n+- Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n+- Target options > Target Architecture = arm\n+- Target options > Architecture level = armv6 -- (+)\n+- Target options > Use specific FPU = vfp -- (+)\n+- Target options > Floating point = hardware (FPU) -- (\\*)\n+- Target options > Default instruction set mode = arm -- (+)\n+- Operating System > Target OS = linux\n+- Operating System > Linux kernel version = 3.2.72 -- Precise kernel\n+- C-library > glibc version = 2.14.1\n+- C compiler > gcc version = 4.9.3\n+- C compiler > C++ = ENABLE -- to cross compile LLVM\n+\n+### `armv7-linux-gnueabihf.config`\n+\n+For targets: `armv7-unknown-linux-gnueabihf`\n+\n+- Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n+- Target options > Target Architecture = arm\n+- Target options > Suffix to the arch-part = v7\n+- Target options > Architecture level = armv7-a -- (+)\n+- Target options > Use specific FPU = vfpv3-d16 -- (\\*)\n+- Target options > Floating point = hardware (FPU) -- (\\*)\n+- Target options > Default instruction set mode = thumb -- (\\*)\n+- Operating System > Target OS = linux\n+- Operating System > Linux kernel version = 3.2.72 -- Precise kernel\n+- C-library > glibc version = 2.14.1\n+- C compiler > gcc version = 4.9.3\n+- C compiler > C++ = ENABLE -- to cross compile LLVM\n+\n+(\\*) These options have been selected to match the configuration of the arm\n+      toolchains shipped with Ubuntu 15.10\n+(+) These options have been selected to match the gcc flags we use to compile C\n+    libraries like jemalloc. See the mk/cfg/arm(v7)-uknown-linux-gnueabi{,hf}.mk\n+    file in Rust's source code.\n+\n+## `aarch64-linux-gnu.config`\n+\n+For targets: `aarch64-unknown-linux-gnu`\n+\n+- Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n+- Target options > Target Architecture = arm\n+- Target options > Bitness = 64-bit\n+- Operating System > Target OS = linux\n+- Operating System > Linux kernel version = 4.2.6\n+- C-library > glibc version = 2.17 -- aarch64 support was introduced in this version\n+- C compiler > gcc version = 5.2.0\n+- C compiler > C++ = ENABLE -- to cross compile LLVM"}, {"sha": "e3748af501fb8fc738f4936c5abc838aa3038831", "filename": "src/ci/docker/android/Dockerfile", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fandroid%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -53,8 +53,4 @@ ENV RUST_CONFIGURE_ARGS \\\n # to all the targets above eventually.\n ENV SCRIPT \\\n   python2.7 ../x.py test --target arm-linux-androideabi && \\\n-  python2.7 ../x.py dist \\\n-      --target arm-linux-androideabi \\\n-      --target armv7-linux-androideabi \\\n-      --target i686-linux-android \\\n-      --target aarch64-linux-android\n+  python2.7 ../x.py dist --target $TARGETS", "previous_filename": "src/ci/docker/arm-android/Dockerfile"}, {"sha": "8d8f60a5ec2604606571cdb6a7d231d5754aa38f", "filename": "src/ci/docker/android/accept-licenses.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Faccept-licenses.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Faccept-licenses.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fandroid%2Faccept-licenses.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "previous_filename": "src/ci/docker/arm-android/accept-licenses.sh"}, {"sha": "418ce69c5b1e5769e252034b918afa427dcfd2d6", "filename": "src/ci/docker/android/install-ndk.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fandroid%2Finstall-ndk.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "previous_filename": "src/ci/docker/arm-android/install-ndk.sh"}, {"sha": "2db1d46ba2273e89cfdb655ba59ef427ba0974ba", "filename": "src/ci/docker/android/install-sdk.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Finstall-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Finstall-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fandroid%2Finstall-sdk.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "previous_filename": "src/ci/docker/arm-android/install-sdk.sh"}, {"sha": "24c477d87f1a72975a3f0fb650d37b3e82dd3f99", "filename": "src/ci/docker/android/start-emulator.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Fstart-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fandroid%2Fstart-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fandroid%2Fstart-emulator.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "previous_filename": "src/ci/docker/arm-android/start-emulator.sh"}, {"sha": "8f947caf2cbf56146eed9e4297ea6ba35b74d273", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,7 +10,12 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   git \\\n   cmake \\\n   sudo \\\n-  xz-utils\n+  xz-utils \\\n+  zlib1g-dev \\\n+  g++-arm-linux-gnueabi \\\n+  g++-arm-linux-gnueabihf \\\n+  bzip2 \\\n+  patch\n \n ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n@@ -21,21 +26,50 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n+WORKDIR /tmp\n+\n+COPY build-rumprun.sh /tmp/\n+RUN ./build-rumprun.sh\n+\n+COPY build-arm-musl.sh /tmp/\n+RUN ./build-arm-musl.sh\n+\n+# originally from\n+# https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\n+RUN mkdir /usr/local/mips-linux-musl\n+RUN curl -L https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2 | \\\n+      tar xjf - -C /usr/local/mips-linux-musl --strip-components=2\n+RUN for file in /usr/local/mips-linux-musl/bin/mips-openwrt-linux-*; do \\\n+      ln -s $file /usr/local/bin/`basename $file`; \\\n+    done\n+\n+# Note that this originally came from:\n+# https://downloads.openwrt.org/snapshots/trunk/malta/generic/OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\n+RUN mkdir /usr/local/mipsel-linux-musl\n+RUN curl -L https://s3.amazonaws.com/rust-lang-ci/libc/OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2 | \\\n+      tar xjf - -C /usr/local/mipsel-linux-musl --strip-components=2\n+RUN for file in /usr/local/mipsel-linux-musl/bin/mipsel-openwrt-linux-*; do \\\n+      ln -s $file /usr/local/bin/`basename $file`; \\\n+    done\n+\n ENV TARGETS=asmjs-unknown-emscripten\n ENV TARGETS=$TARGETS,wasm32-unknown-emscripten\n+ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\n+ENV TARGETS=$TARGETS,mips-unknown-linux-musl\n+ENV TARGETS=$TARGETS,mipsel-unknown-linux-musl\n+ENV TARGETS=$TARGETS,arm-unknown-linux-musleabi\n+ENV TARGETS=$TARGETS,arm-unknown-linux-musleabihf\n+ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf\n+\n+ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n+    CC_mips_unknown_linux_musl=mips-openwrt-linux-gcc\n \n-#ENV TARGETS=$TARGETS,mips-unknown-linux-musl\n-#ENV TARGETS=$TARGETS,arm-unknown-linux-musleabi\n-#ENV TARGETS=$TARGETS,arm-unknown-linux-musleabihf\n-#ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf\n-#ENV TARGETS=$TARGETS,x86_64-rumprun-netbsd\n+# Suppress some warnings in the openwrt toolchains we downloaded\n+ENV STAGING_DIR=/tmp\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n-      --enable-rustbuild\n-\n-# Just a smoke test in dist to see if this works for now, we should expand this\n-# to all the targets above eventually.\n-ENV SCRIPT \\\n-  python2.7 ../x.py build && \\\n-  python2.7 ../x.py dist --target wasm32-unknown-emscripten\n+      --musl-root-arm=/usr/local/arm-linux-musleabi \\\n+      --musl-root-armhf=/usr/local/arm-linux-musleabihf \\\n+      --musl-root-armv7=/usr/local/armv7-linux-musleabihf\n+ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "938e69834e434f95641db3aaa588186d579578f4", "filename": "src/ci/docker/cross/build-arm-musl.sh", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2Fbuild-arm-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2Fbuild-arm-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2Fbuild-arm-musl.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,120 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+MUSL=1.1.16\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm /tmp/build.log\n+  set -x\n+}\n+\n+curl -O https://www.musl-libc.org/releases/musl-$MUSL.tar.gz\n+tar xf musl-$MUSL.tar.gz\n+cd musl-$MUSL\n+CC=arm-linux-gnueabi-gcc \\\n+CFLAGS=\"-march=armv6 -marm\" \\\n+    hide_output ./configure \\\n+        --prefix=/usr/local/arm-linux-musleabi \\\n+        --enable-wrapper=gcc\n+hide_output make -j$(nproc)\n+hide_output make install\n+cd ..\n+rm -rf musl-$MUSL\n+\n+tar xf musl-$MUSL.tar.gz\n+cd musl-$MUSL\n+CC=arm-linux-gnueabihf-gcc \\\n+CFLAGS=\"-march=armv6 -marm\" \\\n+    hide_output ./configure \\\n+        --prefix=/usr/local/arm-linux-musleabihf \\\n+        --enable-wrapper=gcc\n+hide_output make -j$(nproc)\n+hide_output make install\n+cd ..\n+rm -rf musl-$MUSL\n+\n+tar xf musl-$MUSL.tar.gz\n+cd musl-$MUSL\n+CC=arm-linux-gnueabihf-gcc \\\n+CFLAGS=\"-march=armv7-a\" \\\n+    hide_output ./configure \\\n+        --prefix=/usr/local/armv7-linux-musleabihf \\\n+        --enable-wrapper=gcc\n+hide_output make -j$(nproc)\n+hide_output make install\n+cd ..\n+rm -rf musl-$MUSL*\n+\n+ln -nsf ../arm-linux-musleabi/bin/musl-gcc /usr/local/bin/arm-linux-musleabi-gcc\n+ln -nsf ../arm-linux-musleabihf/bin/musl-gcc /usr/local/bin/arm-linux-musleabihf-gcc\n+ln -nsf ../armv7-linux-musleabihf/bin/musl-gcc /usr/local/bin/armv7-linux-musleabihf-gcc\n+\n+curl -L https://github.com/llvm-mirror/llvm/archive/release_39.tar.gz | tar xzf -\n+curl -L https://github.com/llvm-mirror/libunwind/archive/release_39.tar.gz | tar xzf -\n+\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_39 \\\n+          -DLLVM_PATH=/tmp/llvm-release_39 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0 \\\n+          -DCMAKE_C_COMPILER=arm-linux-gnueabi-gcc \\\n+          -DCMAKE_CXX_COMPILER=arm-linux-gnueabi-g++ \\\n+          -DCMAKE_C_FLAGS=\"-march=armv6 -marm\" \\\n+          -DCMAKE_CXX_FLAGS=\"-march=armv6 -marm\"\n+make -j$(nproc)\n+cp lib/libunwind.a /usr/local/arm-linux-musleabi/lib\n+cd ..\n+rm -rf libunwind-build\n+\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_39 \\\n+          -DLLVM_PATH=/tmp/llvm-release_39 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0 \\\n+          -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \\\n+          -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \\\n+          -DCMAKE_C_FLAGS=\"-march=armv6 -marm\" \\\n+          -DCMAKE_CXX_FLAGS=\"-march=armv6 -marm\"\n+make -j$(nproc)\n+cp lib/libunwind.a /usr/local/arm-linux-musleabihf/lib\n+cd ..\n+rm -rf libunwind-build\n+\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_39 \\\n+          -DLLVM_PATH=/tmp/llvm-release_39 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0 \\\n+          -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \\\n+          -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \\\n+          -DCMAKE_C_FLAGS=\"-march=armv7-a\" \\\n+          -DCMAKE_CXX_FLAGS=\"-march=armv7-a\"\n+make -j$(nproc)\n+cp lib/libunwind.a /usr/local/armv7-linux-musleabihf/lib\n+cd ..\n+rm -rf libunwind-build\n+\n+rm -rf libunwind-release_39\n+rm -rf llvm-release_39"}, {"sha": "59b1c9b641535f3b1106331bed41352bb93ca7df", "filename": "src/ci/docker/cross/build-rumprun.sh", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2Fbuild-rumprun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fcross%2Fbuild-rumprun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2Fbuild-rumprun.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,38 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm /tmp/build.log\n+  set -x\n+}\n+\n+git clone https://github.com/rumpkernel/rumprun\n+cd rumprun\n+git reset --hard 39a97f37a85e44c69b662f6b97b688fbe892603b\n+git submodule update --init\n+\n+CC=cc hide_output ./build-rr.sh -d /usr/local hw\n+cd ..\n+rm -rf rumprun"}, {"sha": "03ca4c28078b61fa0697940ff4024a2781d9d109", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,19 +1,29 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n   g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  patch \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n   sudo \\\n-  gdb \\\n-  xz-utils \\\n-  g++-arm-linux-gnueabi \\\n-  g++-arm-linux-gnueabihf\n+  texinfo \\\n+  wget \\\n+  xz-utils\n \n ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n@@ -24,11 +34,47 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=arm-unknown-linux-gnueabi,arm-unknown-linux-gnueabihf\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host arm-unknown-linux-gnueabi \\\n-        --target arm-unknown-linux-gnueabi \\\n-        --host arm-unknown-linux-gnueabihf \\\n-        --target arm-unknown-linux-gnueabihf\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY arm-linux-gnueabihf.config arm-linux-gnueabi.config build-toolchains.sh /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin\n+ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n+\n+ENV CC_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-gcc \\\n+    AR_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-ar \\\n+    CXX_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-g++ \\\n+    CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n+    AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar \\\n+    CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=arm-unknown-linux-gnueabi\n+ENV HOSTS=$HOSTS,arm-unknown-linux-gnueabihf\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "f73ad069550e15f871d48a9293aea9bce61249c5", "filename": "src/ci/docker/dist-arm-linux/arm-linux-gnueabi.config", "status": "added", "additions": 560, "deletions": 0, "changes": 560, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabi.config", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabi.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabi.config?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,560 @@\n+#\n+# Automatically generated file; DO NOT EDIT.\n+# Crosstool-NG Configuration\n+#\n+CT_CONFIGURE_has_make381=y\n+CT_MODULES=y\n+\n+#\n+# Paths and misc options\n+#\n+\n+#\n+# crosstool-NG behavior\n+#\n+# CT_OBSOLETE is not set\n+# CT_EXPERIMENTAL is not set\n+# CT_DEBUG_CT is not set\n+\n+#\n+# Paths\n+#\n+CT_LOCAL_TARBALLS_DIR=\"\"\n+CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_INSTALL_DIR=\"${CT_PREFIX_DIR}\"\n+CT_RM_RF_PREFIX_DIR=y\n+CT_REMOVE_DOCS=y\n+CT_INSTALL_DIR_RO=y\n+CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n+# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n+\n+#\n+# Downloading\n+#\n+# CT_FORBID_DOWNLOAD is not set\n+# CT_FORCE_DOWNLOAD is not set\n+CT_CONNECT_TIMEOUT=10\n+# CT_ONLY_DOWNLOAD is not set\n+# CT_USE_MIRROR is not set\n+\n+#\n+# Extracting\n+#\n+# CT_FORCE_EXTRACT is not set\n+CT_OVERIDE_CONFIG_GUESS_SUB=y\n+# CT_ONLY_EXTRACT is not set\n+CT_PATCH_BUNDLED=y\n+# CT_PATCH_LOCAL is not set\n+# CT_PATCH_BUNDLED_LOCAL is not set\n+# CT_PATCH_LOCAL_BUNDLED is not set\n+# CT_PATCH_BUNDLED_FALLBACK_LOCAL is not set\n+# CT_PATCH_LOCAL_FALLBACK_BUNDLED is not set\n+# CT_PATCH_NONE is not set\n+CT_PATCH_ORDER=\"bundled\"\n+\n+#\n+# Build behavior\n+#\n+CT_PARALLEL_JOBS=0\n+CT_LOAD=\"\"\n+CT_USE_PIPES=y\n+CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n+CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n+# CT_CONFIG_SHELL_SH is not set\n+# CT_CONFIG_SHELL_ASH is not set\n+CT_CONFIG_SHELL_BASH=y\n+# CT_CONFIG_SHELL_CUSTOM is not set\n+CT_CONFIG_SHELL=\"${bash}\"\n+\n+#\n+# Logging\n+#\n+# CT_LOG_ERROR is not set\n+# CT_LOG_WARN is not set\n+CT_LOG_INFO=y\n+# CT_LOG_EXTRA is not set\n+# CT_LOG_ALL is not set\n+# CT_LOG_DEBUG is not set\n+CT_LOG_LEVEL_MAX=\"INFO\"\n+# CT_LOG_SEE_TOOLS_WARN is not set\n+CT_LOG_PROGRESS_BAR=y\n+CT_LOG_TO_FILE=y\n+CT_LOG_FILE_COMPRESS=y\n+\n+#\n+# Target options\n+#\n+CT_ARCH=\"arm\"\n+CT_ARCH_SUPPORTS_BOTH_MMU=y\n+CT_ARCH_SUPPORTS_BOTH_ENDIAN=y\n+CT_ARCH_SUPPORTS_32=y\n+CT_ARCH_SUPPORTS_64=y\n+CT_ARCH_SUPPORTS_WITH_ARCH=y\n+CT_ARCH_SUPPORTS_WITH_CPU=y\n+CT_ARCH_SUPPORTS_WITH_TUNE=y\n+CT_ARCH_SUPPORTS_WITH_FLOAT=y\n+CT_ARCH_SUPPORTS_WITH_FPU=y\n+CT_ARCH_SUPPORTS_SOFTFP=y\n+CT_ARCH_DEFAULT_HAS_MMU=y\n+CT_ARCH_DEFAULT_LE=y\n+CT_ARCH_DEFAULT_32=y\n+CT_ARCH_ARCH=\"armv6\"\n+CT_ARCH_CPU=\"\"\n+CT_ARCH_TUNE=\"\"\n+CT_ARCH_FPU=\"\"\n+# CT_ARCH_BE is not set\n+CT_ARCH_LE=y\n+CT_ARCH_32=y\n+# CT_ARCH_64 is not set\n+CT_ARCH_BITNESS=32\n+# CT_ARCH_FLOAT_HW is not set\n+CT_ARCH_FLOAT_SW=y\n+CT_TARGET_CFLAGS=\"\"\n+CT_TARGET_LDFLAGS=\"\"\n+# CT_ARCH_alpha is not set\n+CT_ARCH_arm=y\n+# CT_ARCH_avr is not set\n+# CT_ARCH_m68k is not set\n+# CT_ARCH_mips is not set\n+# CT_ARCH_nios2 is not set\n+# CT_ARCH_powerpc is not set\n+# CT_ARCH_s390 is not set\n+# CT_ARCH_sh is not set\n+# CT_ARCH_sparc is not set\n+# CT_ARCH_x86 is not set\n+# CT_ARCH_xtensa is not set\n+CT_ARCH_alpha_AVAILABLE=y\n+CT_ARCH_arm_AVAILABLE=y\n+CT_ARCH_avr_AVAILABLE=y\n+CT_ARCH_m68k_AVAILABLE=y\n+CT_ARCH_microblaze_AVAILABLE=y\n+CT_ARCH_mips_AVAILABLE=y\n+CT_ARCH_nios2_AVAILABLE=y\n+CT_ARCH_powerpc_AVAILABLE=y\n+CT_ARCH_s390_AVAILABLE=y\n+CT_ARCH_sh_AVAILABLE=y\n+CT_ARCH_sparc_AVAILABLE=y\n+CT_ARCH_x86_AVAILABLE=y\n+CT_ARCH_xtensa_AVAILABLE=y\n+CT_ARCH_SUFFIX=\"\"\n+\n+#\n+# Generic target options\n+#\n+# CT_MULTILIB is not set\n+CT_ARCH_USE_MMU=y\n+CT_ARCH_ENDIAN=\"little\"\n+\n+#\n+# Target optimisations\n+#\n+CT_ARCH_EXCLUSIVE_WITH_CPU=y\n+# CT_ARCH_FLOAT_AUTO is not set\n+# CT_ARCH_FLOAT_SOFTFP is not set\n+CT_ARCH_FLOAT=\"soft\"\n+\n+#\n+# arm other options\n+#\n+CT_ARCH_ARM_MODE=\"arm\"\n+CT_ARCH_ARM_MODE_ARM=y\n+# CT_ARCH_ARM_MODE_THUMB is not set\n+# CT_ARCH_ARM_INTERWORKING is not set\n+CT_ARCH_ARM_EABI_FORCE=y\n+CT_ARCH_ARM_EABI=y\n+\n+#\n+# Toolchain options\n+#\n+\n+#\n+# General toolchain options\n+#\n+CT_FORCE_SYSROOT=y\n+CT_USE_SYSROOT=y\n+CT_SYSROOT_NAME=\"sysroot\"\n+CT_SYSROOT_DIR_PREFIX=\"\"\n+CT_WANTS_STATIC_LINK=y\n+# CT_STATIC_TOOLCHAIN is not set\n+CT_TOOLCHAIN_PKGVERSION=\"\"\n+CT_TOOLCHAIN_BUGURL=\"\"\n+\n+#\n+# Tuple completion and aliasing\n+#\n+CT_TARGET_VENDOR=\"unknown\"\n+CT_TARGET_ALIAS_SED_EXPR=\"\"\n+CT_TARGET_ALIAS=\"\"\n+\n+#\n+# Toolchain type\n+#\n+CT_CROSS=y\n+# CT_CANADIAN is not set\n+CT_TOOLCHAIN_TYPE=\"cross\"\n+\n+#\n+# Build system\n+#\n+CT_BUILD=\"\"\n+CT_BUILD_PREFIX=\"\"\n+CT_BUILD_SUFFIX=\"\"\n+\n+#\n+# Misc options\n+#\n+# CT_TOOLCHAIN_ENABLE_NLS is not set\n+\n+#\n+# Operating System\n+#\n+CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n+CT_KERNEL=\"linux\"\n+CT_KERNEL_VERSION=\"3.2.72\"\n+# CT_KERNEL_bare_metal is not set\n+CT_KERNEL_linux=y\n+CT_KERNEL_bare_metal_AVAILABLE=y\n+CT_KERNEL_linux_AVAILABLE=y\n+# CT_KERNEL_V_4_3 is not set\n+# CT_KERNEL_V_4_2 is not set\n+# CT_KERNEL_V_4_1 is not set\n+# CT_KERNEL_V_3_18 is not set\n+# CT_KERNEL_V_3_14 is not set\n+# CT_KERNEL_V_3_12 is not set\n+# CT_KERNEL_V_3_10 is not set\n+# CT_KERNEL_V_3_4 is not set\n+CT_KERNEL_V_3_2=y\n+# CT_KERNEL_V_2_6_32 is not set\n+# CT_KERNEL_LINUX_CUSTOM is not set\n+CT_KERNEL_windows_AVAILABLE=y\n+\n+#\n+# Common kernel options\n+#\n+CT_SHARED_LIBS=y\n+\n+#\n+# linux other options\n+#\n+CT_KERNEL_LINUX_VERBOSITY_0=y\n+# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n+# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n+CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n+CT_KERNEL_LINUX_INSTALL_CHECK=y\n+\n+#\n+# Binary utilities\n+#\n+CT_ARCH_BINFMT_ELF=y\n+CT_BINUTILS=\"binutils\"\n+CT_BINUTILS_binutils=y\n+\n+#\n+# GNU binutils\n+#\n+# CT_CC_BINUTILS_SHOW_LINARO is not set\n+CT_BINUTILS_V_2_25_1=y\n+# CT_BINUTILS_V_2_25 is not set\n+# CT_BINUTILS_V_2_24 is not set\n+# CT_BINUTILS_V_2_23_2 is not set\n+# CT_BINUTILS_V_2_23_1 is not set\n+# CT_BINUTILS_V_2_22 is not set\n+# CT_BINUTILS_V_2_21_53 is not set\n+# CT_BINUTILS_V_2_21_1a is not set\n+# CT_BINUTILS_V_2_20_1a is not set\n+# CT_BINUTILS_V_2_19_1a is not set\n+# CT_BINUTILS_V_2_18a is not set\n+CT_BINUTILS_VERSION=\"2.25.1\"\n+CT_BINUTILS_2_25_1_or_later=y\n+CT_BINUTILS_2_25_or_later=y\n+CT_BINUTILS_2_24_or_later=y\n+CT_BINUTILS_2_23_or_later=y\n+CT_BINUTILS_2_22_or_later=y\n+CT_BINUTILS_2_21_or_later=y\n+CT_BINUTILS_2_20_or_later=y\n+CT_BINUTILS_2_19_or_later=y\n+CT_BINUTILS_2_18_or_later=y\n+CT_BINUTILS_HAS_HASH_STYLE=y\n+CT_BINUTILS_HAS_GOLD=y\n+CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n+CT_BINUTILS_GOLD_SUPPORT=y\n+CT_BINUTILS_HAS_PLUGINS=y\n+CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n+CT_BINUTILS_FORCE_LD_BFD=y\n+CT_BINUTILS_LINKER_LD=y\n+# CT_BINUTILS_LINKER_LD_GOLD is not set\n+# CT_BINUTILS_LINKER_GOLD_LD is not set\n+CT_BINUTILS_LINKERS_LIST=\"ld\"\n+CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n+# CT_BINUTILS_PLUGINS is not set\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n+# CT_BINUTILS_FOR_TARGET is not set\n+\n+#\n+# binutils other options\n+#\n+\n+#\n+# C-library\n+#\n+CT_LIBC=\"glibc\"\n+CT_LIBC_VERSION=\"2.16.0\"\n+CT_LIBC_glibc=y\n+# CT_LIBC_musl is not set\n+# CT_LIBC_uClibc is not set\n+CT_LIBC_avr_libc_AVAILABLE=y\n+CT_LIBC_glibc_AVAILABLE=y\n+CT_THREADS=\"nptl\"\n+# CT_CC_GLIBC_SHOW_LINARO is not set\n+# CT_LIBC_GLIBC_V_2_22 is not set\n+# CT_LIBC_GLIBC_V_2_21 is not set\n+# CT_LIBC_GLIBC_V_2_20 is not set\n+# CT_LIBC_GLIBC_V_2_19 is not set\n+# CT_LIBC_GLIBC_V_2_18 is not set\n+# CT_LIBC_GLIBC_V_2_17 is not set\n+CT_LIBC_GLIBC_V_2_16_0=y\n+# CT_LIBC_GLIBC_V_2_15 is not set\n+# CT_LIBC_GLIBC_V_2_14_1 is not set\n+# CT_LIBC_GLIBC_V_2_14 is not set\n+# CT_LIBC_GLIBC_V_2_13 is not set\n+# CT_LIBC_GLIBC_V_2_12_2 is not set\n+# CT_LIBC_GLIBC_V_2_12_1 is not set\n+# CT_LIBC_GLIBC_V_2_11_1 is not set\n+# CT_LIBC_GLIBC_V_2_11 is not set\n+# CT_LIBC_GLIBC_V_2_10_1 is not set\n+# CT_LIBC_GLIBC_V_2_9 is not set\n+# CT_LIBC_GLIBC_V_2_8 is not set\n+CT_LIBC_mingw_AVAILABLE=y\n+CT_LIBC_musl_AVAILABLE=y\n+CT_LIBC_newlib_AVAILABLE=y\n+CT_LIBC_none_AVAILABLE=y\n+CT_LIBC_uClibc_AVAILABLE=y\n+CT_LIBC_SUPPORT_THREADS_ANY=y\n+CT_LIBC_SUPPORT_THREADS_NATIVE=y\n+\n+#\n+# Common C library options\n+#\n+CT_THREADS_NATIVE=y\n+CT_LIBC_XLDD=y\n+\n+#\n+# glibc other options\n+#\n+CT_LIBC_GLIBC_PORTS_EXTERNAL=y\n+CT_LIBC_GLIBC_MAY_FORCE_PORTS=y\n+CT_LIBC_glibc_familly=y\n+CT_LIBC_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_LIBC_GLIBC_CONFIGPARMS=\"\"\n+CT_LIBC_GLIBC_EXTRA_CFLAGS=\"\"\n+CT_LIBC_EXTRA_CC_ARGS=\"\"\n+# CT_LIBC_DISABLE_VERSIONING is not set\n+CT_LIBC_OLDEST_ABI=\"\"\n+CT_LIBC_GLIBC_FORCE_UNWIND=y\n+CT_LIBC_GLIBC_USE_PORTS=y\n+CT_LIBC_ADDONS_LIST=\"\"\n+\n+#\n+# WARNING !!!                                            \n+#\n+\n+#\n+#   For glibc >= 2.8, it can happen that the tarballs    \n+#\n+\n+#\n+#   for the addons are not available for download.       \n+#\n+\n+#\n+#   If that happens, bad luck... Try a previous version  \n+#\n+\n+#\n+#   or try again later... :-(                            \n+#\n+# CT_LIBC_LOCALES is not set\n+# CT_LIBC_GLIBC_KERNEL_VERSION_NONE is not set\n+CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n+# CT_LIBC_GLIBC_KERNEL_VERSION_CHOSEN is not set\n+CT_LIBC_GLIBC_MIN_KERNEL=\"3.2.72\"\n+\n+#\n+# C compiler\n+#\n+CT_CC=\"gcc\"\n+CT_CC_CORE_PASSES_NEEDED=y\n+CT_CC_CORE_PASS_1_NEEDED=y\n+CT_CC_CORE_PASS_2_NEEDED=y\n+CT_CC_gcc=y\n+# CT_CC_GCC_SHOW_LINARO is not set\n+# CT_CC_GCC_V_5_2_0 is not set\n+CT_CC_GCC_V_4_9_3=y\n+# CT_CC_GCC_V_4_8_5 is not set\n+# CT_CC_GCC_V_4_7_4 is not set\n+# CT_CC_GCC_V_4_6_4 is not set\n+# CT_CC_GCC_V_4_5_4 is not set\n+# CT_CC_GCC_V_4_4_7 is not set\n+# CT_CC_GCC_V_4_3_6 is not set\n+# CT_CC_GCC_V_4_2_4 is not set\n+CT_CC_GCC_4_2_or_later=y\n+CT_CC_GCC_4_3_or_later=y\n+CT_CC_GCC_4_4_or_later=y\n+CT_CC_GCC_4_5_or_later=y\n+CT_CC_GCC_4_6_or_later=y\n+CT_CC_GCC_4_7_or_later=y\n+CT_CC_GCC_4_8_or_later=y\n+CT_CC_GCC_4_9=y\n+CT_CC_GCC_4_9_or_later=y\n+CT_CC_GCC_HAS_GRAPHITE=y\n+CT_CC_GCC_USE_GRAPHITE=y\n+CT_CC_GCC_HAS_LTO=y\n+CT_CC_GCC_USE_LTO=y\n+CT_CC_GCC_HAS_PKGVERSION_BUGURL=y\n+CT_CC_GCC_HAS_BUILD_ID=y\n+CT_CC_GCC_HAS_LNK_HASH_STYLE=y\n+CT_CC_GCC_USE_GMP_MPFR=y\n+CT_CC_GCC_USE_MPC=y\n+CT_CC_GCC_HAS_LIBQUADMATH=y\n+CT_CC_GCC_HAS_LIBSANITIZER=y\n+CT_CC_GCC_VERSION=\"4.9.3\"\n+# CT_CC_LANG_FORTRAN is not set\n+CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n+CT_CC_GCC_STATIC_LIBSTDCXX=y\n+# CT_CC_GCC_SYSTEM_ZLIB is not set\n+\n+#\n+# Optimisation features\n+#\n+\n+#\n+# Settings for libraries running on target\n+#\n+CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n+# CT_CC_GCC_LIBMUDFLAP is not set\n+# CT_CC_GCC_LIBGOMP is not set\n+# CT_CC_GCC_LIBSSP is not set\n+# CT_CC_GCC_LIBQUADMATH is not set\n+# CT_CC_GCC_LIBSANITIZER is not set\n+\n+#\n+# Misc. obscure options.\n+#\n+CT_CC_CXA_ATEXIT=y\n+# CT_CC_GCC_DISABLE_PCH is not set\n+CT_CC_GCC_SJLJ_EXCEPTIONS=m\n+CT_CC_GCC_LDBL_128=m\n+# CT_CC_GCC_BUILD_ID is not set\n+CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n+# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n+CT_CC_GCC_LNK_HASH_STYLE=\"\"\n+CT_CC_GCC_DEC_FLOAT_AUTO=y\n+# CT_CC_GCC_DEC_FLOAT_BID is not set\n+# CT_CC_GCC_DEC_FLOAT_DPD is not set\n+# CT_CC_GCC_DEC_FLOATS_NO is not set\n+CT_CC_SUPPORT_CXX=y\n+CT_CC_SUPPORT_FORTRAN=y\n+CT_CC_SUPPORT_JAVA=y\n+CT_CC_SUPPORT_ADA=y\n+CT_CC_SUPPORT_OBJC=y\n+CT_CC_SUPPORT_OBJCXX=y\n+CT_CC_SUPPORT_GOLANG=y\n+\n+#\n+# Additional supported languages:\n+#\n+CT_CC_LANG_CXX=y\n+# CT_CC_LANG_JAVA is not set\n+\n+#\n+# Debug facilities\n+#\n+# CT_DEBUG_dmalloc is not set\n+# CT_DEBUG_duma is not set\n+# CT_DEBUG_gdb is not set\n+# CT_DEBUG_ltrace is not set\n+# CT_DEBUG_strace is not set\n+\n+#\n+# Companion libraries\n+#\n+CT_COMPLIBS_NEEDED=y\n+CT_LIBICONV_NEEDED=y\n+CT_GETTEXT_NEEDED=y\n+CT_GMP_NEEDED=y\n+CT_MPFR_NEEDED=y\n+CT_ISL_NEEDED=y\n+CT_CLOOG_NEEDED=y\n+CT_MPC_NEEDED=y\n+CT_COMPLIBS=y\n+CT_LIBICONV=y\n+CT_GETTEXT=y\n+CT_GMP=y\n+CT_MPFR=y\n+CT_ISL=y\n+CT_CLOOG=y\n+CT_MPC=y\n+CT_LIBICONV_V_1_14=y\n+CT_LIBICONV_VERSION=\"1.14\"\n+CT_GETTEXT_V_0_19_6=y\n+CT_GETTEXT_VERSION=\"0.19.6\"\n+CT_GMP_V_6_0_0=y\n+# CT_GMP_V_5_1_3 is not set\n+# CT_GMP_V_5_1_1 is not set\n+# CT_GMP_V_5_0_2 is not set\n+# CT_GMP_V_5_0_1 is not set\n+# CT_GMP_V_4_3_2 is not set\n+# CT_GMP_V_4_3_1 is not set\n+# CT_GMP_V_4_3_0 is not set\n+CT_GMP_5_0_2_or_later=y\n+CT_GMP_VERSION=\"6.0.0a\"\n+CT_MPFR_V_3_1_3=y\n+# CT_MPFR_V_3_1_2 is not set\n+# CT_MPFR_V_3_1_0 is not set\n+# CT_MPFR_V_3_0_1 is not set\n+# CT_MPFR_V_3_0_0 is not set\n+# CT_MPFR_V_2_4_2 is not set\n+# CT_MPFR_V_2_4_1 is not set\n+# CT_MPFR_V_2_4_0 is not set\n+CT_MPFR_VERSION=\"3.1.3\"\n+CT_ISL_V_0_14=y\n+CT_ISL_V_0_14_or_later=y\n+CT_ISL_V_0_12_or_later=y\n+CT_ISL_VERSION=\"0.14\"\n+CT_CLOOG_V_0_18_4=y\n+# CT_CLOOG_V_0_18_1 is not set\n+# CT_CLOOG_V_0_18_0 is not set\n+CT_CLOOG_VERSION=\"0.18.4\"\n+CT_CLOOG_0_18_4_or_later=y\n+CT_CLOOG_0_18_or_later=y\n+CT_MPC_V_1_0_3=y\n+# CT_MPC_V_1_0_2 is not set\n+# CT_MPC_V_1_0_1 is not set\n+# CT_MPC_V_1_0 is not set\n+# CT_MPC_V_0_9 is not set\n+# CT_MPC_V_0_8_2 is not set\n+# CT_MPC_V_0_8_1 is not set\n+# CT_MPC_V_0_7 is not set\n+CT_MPC_VERSION=\"1.0.3\"\n+\n+#\n+# Companion libraries common options\n+#\n+# CT_COMPLIBS_CHECK is not set\n+\n+#\n+# Companion tools\n+#\n+\n+#\n+# READ HELP before you say 'Y' below !!!\n+#\n+# CT_COMP_TOOLS is not set"}, {"sha": "1feeef15557498d7d0be00e216370aa2416b2a2b", "filename": "src/ci/docker/dist-arm-linux/arm-linux-gnueabihf.config", "status": "added", "additions": 561, "deletions": 0, "changes": 561, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2Farm-linux-gnueabihf.config?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,561 @@\n+#\n+# Automatically generated file; DO NOT EDIT.\n+# Crosstool-NG Configuration\n+#\n+CT_CONFIGURE_has_make381=y\n+CT_MODULES=y\n+\n+#\n+# Paths and misc options\n+#\n+\n+#\n+# crosstool-NG behavior\n+#\n+# CT_OBSOLETE is not set\n+# CT_EXPERIMENTAL is not set\n+# CT_DEBUG_CT is not set\n+\n+#\n+# Paths\n+#\n+CT_LOCAL_TARBALLS_DIR=\"\"\n+CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_INSTALL_DIR=\"${CT_PREFIX_DIR}\"\n+CT_RM_RF_PREFIX_DIR=y\n+CT_REMOVE_DOCS=y\n+CT_INSTALL_DIR_RO=y\n+CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n+# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n+\n+#\n+# Downloading\n+#\n+# CT_FORBID_DOWNLOAD is not set\n+# CT_FORCE_DOWNLOAD is not set\n+CT_CONNECT_TIMEOUT=10\n+# CT_ONLY_DOWNLOAD is not set\n+# CT_USE_MIRROR is not set\n+\n+#\n+# Extracting\n+#\n+# CT_FORCE_EXTRACT is not set\n+CT_OVERIDE_CONFIG_GUESS_SUB=y\n+# CT_ONLY_EXTRACT is not set\n+CT_PATCH_BUNDLED=y\n+# CT_PATCH_LOCAL is not set\n+# CT_PATCH_BUNDLED_LOCAL is not set\n+# CT_PATCH_LOCAL_BUNDLED is not set\n+# CT_PATCH_BUNDLED_FALLBACK_LOCAL is not set\n+# CT_PATCH_LOCAL_FALLBACK_BUNDLED is not set\n+# CT_PATCH_NONE is not set\n+CT_PATCH_ORDER=\"bundled\"\n+\n+#\n+# Build behavior\n+#\n+CT_PARALLEL_JOBS=0\n+CT_LOAD=\"\"\n+CT_USE_PIPES=y\n+CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n+CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n+# CT_CONFIG_SHELL_SH is not set\n+# CT_CONFIG_SHELL_ASH is not set\n+CT_CONFIG_SHELL_BASH=y\n+# CT_CONFIG_SHELL_CUSTOM is not set\n+CT_CONFIG_SHELL=\"${bash}\"\n+\n+#\n+# Logging\n+#\n+# CT_LOG_ERROR is not set\n+# CT_LOG_WARN is not set\n+CT_LOG_INFO=y\n+# CT_LOG_EXTRA is not set\n+# CT_LOG_ALL is not set\n+# CT_LOG_DEBUG is not set\n+CT_LOG_LEVEL_MAX=\"INFO\"\n+# CT_LOG_SEE_TOOLS_WARN is not set\n+CT_LOG_PROGRESS_BAR=y\n+CT_LOG_TO_FILE=y\n+CT_LOG_FILE_COMPRESS=y\n+\n+#\n+# Target options\n+#\n+CT_ARCH=\"arm\"\n+CT_ARCH_SUPPORTS_BOTH_MMU=y\n+CT_ARCH_SUPPORTS_BOTH_ENDIAN=y\n+CT_ARCH_SUPPORTS_32=y\n+CT_ARCH_SUPPORTS_64=y\n+CT_ARCH_SUPPORTS_WITH_ARCH=y\n+CT_ARCH_SUPPORTS_WITH_CPU=y\n+CT_ARCH_SUPPORTS_WITH_TUNE=y\n+CT_ARCH_SUPPORTS_WITH_FLOAT=y\n+CT_ARCH_SUPPORTS_WITH_FPU=y\n+CT_ARCH_SUPPORTS_SOFTFP=y\n+CT_ARCH_DEFAULT_HAS_MMU=y\n+CT_ARCH_DEFAULT_LE=y\n+CT_ARCH_DEFAULT_32=y\n+CT_ARCH_ARCH=\"armv6\"\n+CT_ARCH_CPU=\"\"\n+CT_ARCH_TUNE=\"\"\n+CT_ARCH_FPU=\"vfp\"\n+# CT_ARCH_BE is not set\n+CT_ARCH_LE=y\n+CT_ARCH_32=y\n+# CT_ARCH_64 is not set\n+CT_ARCH_BITNESS=32\n+CT_ARCH_FLOAT_HW=y\n+# CT_ARCH_FLOAT_SW is not set\n+CT_TARGET_CFLAGS=\"\"\n+CT_TARGET_LDFLAGS=\"\"\n+# CT_ARCH_alpha is not set\n+CT_ARCH_arm=y\n+# CT_ARCH_avr is not set\n+# CT_ARCH_m68k is not set\n+# CT_ARCH_mips is not set\n+# CT_ARCH_nios2 is not set\n+# CT_ARCH_powerpc is not set\n+# CT_ARCH_s390 is not set\n+# CT_ARCH_sh is not set\n+# CT_ARCH_sparc is not set\n+# CT_ARCH_x86 is not set\n+# CT_ARCH_xtensa is not set\n+CT_ARCH_alpha_AVAILABLE=y\n+CT_ARCH_arm_AVAILABLE=y\n+CT_ARCH_avr_AVAILABLE=y\n+CT_ARCH_m68k_AVAILABLE=y\n+CT_ARCH_microblaze_AVAILABLE=y\n+CT_ARCH_mips_AVAILABLE=y\n+CT_ARCH_nios2_AVAILABLE=y\n+CT_ARCH_powerpc_AVAILABLE=y\n+CT_ARCH_s390_AVAILABLE=y\n+CT_ARCH_sh_AVAILABLE=y\n+CT_ARCH_sparc_AVAILABLE=y\n+CT_ARCH_x86_AVAILABLE=y\n+CT_ARCH_xtensa_AVAILABLE=y\n+CT_ARCH_SUFFIX=\"\"\n+\n+#\n+# Generic target options\n+#\n+# CT_MULTILIB is not set\n+CT_ARCH_USE_MMU=y\n+CT_ARCH_ENDIAN=\"little\"\n+\n+#\n+# Target optimisations\n+#\n+CT_ARCH_EXCLUSIVE_WITH_CPU=y\n+# CT_ARCH_FLOAT_AUTO is not set\n+# CT_ARCH_FLOAT_SOFTFP is not set\n+CT_ARCH_FLOAT=\"hard\"\n+\n+#\n+# arm other options\n+#\n+CT_ARCH_ARM_MODE=\"arm\"\n+CT_ARCH_ARM_MODE_ARM=y\n+# CT_ARCH_ARM_MODE_THUMB is not set\n+# CT_ARCH_ARM_INTERWORKING is not set\n+CT_ARCH_ARM_EABI_FORCE=y\n+CT_ARCH_ARM_EABI=y\n+CT_ARCH_ARM_TUPLE_USE_EABIHF=y\n+\n+#\n+# Toolchain options\n+#\n+\n+#\n+# General toolchain options\n+#\n+CT_FORCE_SYSROOT=y\n+CT_USE_SYSROOT=y\n+CT_SYSROOT_NAME=\"sysroot\"\n+CT_SYSROOT_DIR_PREFIX=\"\"\n+CT_WANTS_STATIC_LINK=y\n+# CT_STATIC_TOOLCHAIN is not set\n+CT_TOOLCHAIN_PKGVERSION=\"\"\n+CT_TOOLCHAIN_BUGURL=\"\"\n+\n+#\n+# Tuple completion and aliasing\n+#\n+CT_TARGET_VENDOR=\"unknown\"\n+CT_TARGET_ALIAS_SED_EXPR=\"\"\n+CT_TARGET_ALIAS=\"\"\n+\n+#\n+# Toolchain type\n+#\n+CT_CROSS=y\n+# CT_CANADIAN is not set\n+CT_TOOLCHAIN_TYPE=\"cross\"\n+\n+#\n+# Build system\n+#\n+CT_BUILD=\"\"\n+CT_BUILD_PREFIX=\"\"\n+CT_BUILD_SUFFIX=\"\"\n+\n+#\n+# Misc options\n+#\n+# CT_TOOLCHAIN_ENABLE_NLS is not set\n+\n+#\n+# Operating System\n+#\n+CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n+CT_KERNEL=\"linux\"\n+CT_KERNEL_VERSION=\"3.2.72\"\n+# CT_KERNEL_bare_metal is not set\n+CT_KERNEL_linux=y\n+CT_KERNEL_bare_metal_AVAILABLE=y\n+CT_KERNEL_linux_AVAILABLE=y\n+# CT_KERNEL_V_4_3 is not set\n+# CT_KERNEL_V_4_2 is not set\n+# CT_KERNEL_V_4_1 is not set\n+# CT_KERNEL_V_3_18 is not set\n+# CT_KERNEL_V_3_14 is not set\n+# CT_KERNEL_V_3_12 is not set\n+# CT_KERNEL_V_3_10 is not set\n+# CT_KERNEL_V_3_4 is not set\n+CT_KERNEL_V_3_2=y\n+# CT_KERNEL_V_2_6_32 is not set\n+# CT_KERNEL_LINUX_CUSTOM is not set\n+CT_KERNEL_windows_AVAILABLE=y\n+\n+#\n+# Common kernel options\n+#\n+CT_SHARED_LIBS=y\n+\n+#\n+# linux other options\n+#\n+CT_KERNEL_LINUX_VERBOSITY_0=y\n+# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n+# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n+CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n+CT_KERNEL_LINUX_INSTALL_CHECK=y\n+\n+#\n+# Binary utilities\n+#\n+CT_ARCH_BINFMT_ELF=y\n+CT_BINUTILS=\"binutils\"\n+CT_BINUTILS_binutils=y\n+\n+#\n+# GNU binutils\n+#\n+# CT_CC_BINUTILS_SHOW_LINARO is not set\n+CT_BINUTILS_V_2_25_1=y\n+# CT_BINUTILS_V_2_25 is not set\n+# CT_BINUTILS_V_2_24 is not set\n+# CT_BINUTILS_V_2_23_2 is not set\n+# CT_BINUTILS_V_2_23_1 is not set\n+# CT_BINUTILS_V_2_22 is not set\n+# CT_BINUTILS_V_2_21_53 is not set\n+# CT_BINUTILS_V_2_21_1a is not set\n+# CT_BINUTILS_V_2_20_1a is not set\n+# CT_BINUTILS_V_2_19_1a is not set\n+# CT_BINUTILS_V_2_18a is not set\n+CT_BINUTILS_VERSION=\"2.25.1\"\n+CT_BINUTILS_2_25_1_or_later=y\n+CT_BINUTILS_2_25_or_later=y\n+CT_BINUTILS_2_24_or_later=y\n+CT_BINUTILS_2_23_or_later=y\n+CT_BINUTILS_2_22_or_later=y\n+CT_BINUTILS_2_21_or_later=y\n+CT_BINUTILS_2_20_or_later=y\n+CT_BINUTILS_2_19_or_later=y\n+CT_BINUTILS_2_18_or_later=y\n+CT_BINUTILS_HAS_HASH_STYLE=y\n+CT_BINUTILS_HAS_GOLD=y\n+CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n+CT_BINUTILS_GOLD_SUPPORT=y\n+CT_BINUTILS_HAS_PLUGINS=y\n+CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n+CT_BINUTILS_FORCE_LD_BFD=y\n+CT_BINUTILS_LINKER_LD=y\n+# CT_BINUTILS_LINKER_LD_GOLD is not set\n+# CT_BINUTILS_LINKER_GOLD_LD is not set\n+CT_BINUTILS_LINKERS_LIST=\"ld\"\n+CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n+# CT_BINUTILS_PLUGINS is not set\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n+# CT_BINUTILS_FOR_TARGET is not set\n+\n+#\n+# binutils other options\n+#\n+\n+#\n+# C-library\n+#\n+CT_LIBC=\"glibc\"\n+CT_LIBC_VERSION=\"2.16.0\"\n+CT_LIBC_glibc=y\n+# CT_LIBC_musl is not set\n+# CT_LIBC_uClibc is not set\n+CT_LIBC_avr_libc_AVAILABLE=y\n+CT_LIBC_glibc_AVAILABLE=y\n+CT_THREADS=\"nptl\"\n+# CT_CC_GLIBC_SHOW_LINARO is not set\n+# CT_LIBC_GLIBC_V_2_22 is not set\n+# CT_LIBC_GLIBC_V_2_21 is not set\n+# CT_LIBC_GLIBC_V_2_20 is not set\n+# CT_LIBC_GLIBC_V_2_19 is not set\n+# CT_LIBC_GLIBC_V_2_18 is not set\n+# CT_LIBC_GLIBC_V_2_17 is not set\n+CT_LIBC_GLIBC_V_2_16_0=y\n+# CT_LIBC_GLIBC_V_2_15 is not set\n+# CT_LIBC_GLIBC_V_2_14_1 is not set\n+# CT_LIBC_GLIBC_V_2_14 is not set\n+# CT_LIBC_GLIBC_V_2_13 is not set\n+# CT_LIBC_GLIBC_V_2_12_2 is not set\n+# CT_LIBC_GLIBC_V_2_12_1 is not set\n+# CT_LIBC_GLIBC_V_2_11_1 is not set\n+# CT_LIBC_GLIBC_V_2_11 is not set\n+# CT_LIBC_GLIBC_V_2_10_1 is not set\n+# CT_LIBC_GLIBC_V_2_9 is not set\n+# CT_LIBC_GLIBC_V_2_8 is not set\n+CT_LIBC_mingw_AVAILABLE=y\n+CT_LIBC_musl_AVAILABLE=y\n+CT_LIBC_newlib_AVAILABLE=y\n+CT_LIBC_none_AVAILABLE=y\n+CT_LIBC_uClibc_AVAILABLE=y\n+CT_LIBC_SUPPORT_THREADS_ANY=y\n+CT_LIBC_SUPPORT_THREADS_NATIVE=y\n+\n+#\n+# Common C library options\n+#\n+CT_THREADS_NATIVE=y\n+CT_LIBC_XLDD=y\n+\n+#\n+# glibc other options\n+#\n+CT_LIBC_GLIBC_PORTS_EXTERNAL=y\n+CT_LIBC_GLIBC_MAY_FORCE_PORTS=y\n+CT_LIBC_glibc_familly=y\n+CT_LIBC_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_LIBC_GLIBC_CONFIGPARMS=\"\"\n+CT_LIBC_GLIBC_EXTRA_CFLAGS=\"\"\n+CT_LIBC_EXTRA_CC_ARGS=\"\"\n+# CT_LIBC_DISABLE_VERSIONING is not set\n+CT_LIBC_OLDEST_ABI=\"\"\n+CT_LIBC_GLIBC_FORCE_UNWIND=y\n+CT_LIBC_GLIBC_USE_PORTS=y\n+CT_LIBC_ADDONS_LIST=\"\"\n+\n+#\n+# WARNING !!!                                            \n+#\n+\n+#\n+#   For glibc >= 2.8, it can happen that the tarballs    \n+#\n+\n+#\n+#   for the addons are not available for download.       \n+#\n+\n+#\n+#   If that happens, bad luck... Try a previous version  \n+#\n+\n+#\n+#   or try again later... :-(                            \n+#\n+# CT_LIBC_LOCALES is not set\n+# CT_LIBC_GLIBC_KERNEL_VERSION_NONE is not set\n+CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n+# CT_LIBC_GLIBC_KERNEL_VERSION_CHOSEN is not set\n+CT_LIBC_GLIBC_MIN_KERNEL=\"3.2.72\"\n+\n+#\n+# C compiler\n+#\n+CT_CC=\"gcc\"\n+CT_CC_CORE_PASSES_NEEDED=y\n+CT_CC_CORE_PASS_1_NEEDED=y\n+CT_CC_CORE_PASS_2_NEEDED=y\n+CT_CC_gcc=y\n+# CT_CC_GCC_SHOW_LINARO is not set\n+# CT_CC_GCC_V_5_2_0 is not set\n+CT_CC_GCC_V_4_9_3=y\n+# CT_CC_GCC_V_4_8_5 is not set\n+# CT_CC_GCC_V_4_7_4 is not set\n+# CT_CC_GCC_V_4_6_4 is not set\n+# CT_CC_GCC_V_4_5_4 is not set\n+# CT_CC_GCC_V_4_4_7 is not set\n+# CT_CC_GCC_V_4_3_6 is not set\n+# CT_CC_GCC_V_4_2_4 is not set\n+CT_CC_GCC_4_2_or_later=y\n+CT_CC_GCC_4_3_or_later=y\n+CT_CC_GCC_4_4_or_later=y\n+CT_CC_GCC_4_5_or_later=y\n+CT_CC_GCC_4_6_or_later=y\n+CT_CC_GCC_4_7_or_later=y\n+CT_CC_GCC_4_8_or_later=y\n+CT_CC_GCC_4_9=y\n+CT_CC_GCC_4_9_or_later=y\n+CT_CC_GCC_HAS_GRAPHITE=y\n+CT_CC_GCC_USE_GRAPHITE=y\n+CT_CC_GCC_HAS_LTO=y\n+CT_CC_GCC_USE_LTO=y\n+CT_CC_GCC_HAS_PKGVERSION_BUGURL=y\n+CT_CC_GCC_HAS_BUILD_ID=y\n+CT_CC_GCC_HAS_LNK_HASH_STYLE=y\n+CT_CC_GCC_USE_GMP_MPFR=y\n+CT_CC_GCC_USE_MPC=y\n+CT_CC_GCC_HAS_LIBQUADMATH=y\n+CT_CC_GCC_HAS_LIBSANITIZER=y\n+CT_CC_GCC_VERSION=\"4.9.3\"\n+# CT_CC_LANG_FORTRAN is not set\n+CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n+CT_CC_GCC_STATIC_LIBSTDCXX=y\n+# CT_CC_GCC_SYSTEM_ZLIB is not set\n+\n+#\n+# Optimisation features\n+#\n+\n+#\n+# Settings for libraries running on target\n+#\n+CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n+# CT_CC_GCC_LIBMUDFLAP is not set\n+# CT_CC_GCC_LIBGOMP is not set\n+# CT_CC_GCC_LIBSSP is not set\n+# CT_CC_GCC_LIBQUADMATH is not set\n+# CT_CC_GCC_LIBSANITIZER is not set\n+\n+#\n+# Misc. obscure options.\n+#\n+CT_CC_CXA_ATEXIT=y\n+# CT_CC_GCC_DISABLE_PCH is not set\n+CT_CC_GCC_SJLJ_EXCEPTIONS=m\n+CT_CC_GCC_LDBL_128=m\n+# CT_CC_GCC_BUILD_ID is not set\n+CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n+# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n+CT_CC_GCC_LNK_HASH_STYLE=\"\"\n+CT_CC_GCC_DEC_FLOAT_AUTO=y\n+# CT_CC_GCC_DEC_FLOAT_BID is not set\n+# CT_CC_GCC_DEC_FLOAT_DPD is not set\n+# CT_CC_GCC_DEC_FLOATS_NO is not set\n+CT_CC_SUPPORT_CXX=y\n+CT_CC_SUPPORT_FORTRAN=y\n+CT_CC_SUPPORT_JAVA=y\n+CT_CC_SUPPORT_ADA=y\n+CT_CC_SUPPORT_OBJC=y\n+CT_CC_SUPPORT_OBJCXX=y\n+CT_CC_SUPPORT_GOLANG=y\n+\n+#\n+# Additional supported languages:\n+#\n+CT_CC_LANG_CXX=y\n+# CT_CC_LANG_JAVA is not set\n+\n+#\n+# Debug facilities\n+#\n+# CT_DEBUG_dmalloc is not set\n+# CT_DEBUG_duma is not set\n+# CT_DEBUG_gdb is not set\n+# CT_DEBUG_ltrace is not set\n+# CT_DEBUG_strace is not set\n+\n+#\n+# Companion libraries\n+#\n+CT_COMPLIBS_NEEDED=y\n+CT_LIBICONV_NEEDED=y\n+CT_GETTEXT_NEEDED=y\n+CT_GMP_NEEDED=y\n+CT_MPFR_NEEDED=y\n+CT_ISL_NEEDED=y\n+CT_CLOOG_NEEDED=y\n+CT_MPC_NEEDED=y\n+CT_COMPLIBS=y\n+CT_LIBICONV=y\n+CT_GETTEXT=y\n+CT_GMP=y\n+CT_MPFR=y\n+CT_ISL=y\n+CT_CLOOG=y\n+CT_MPC=y\n+CT_LIBICONV_V_1_14=y\n+CT_LIBICONV_VERSION=\"1.14\"\n+CT_GETTEXT_V_0_19_6=y\n+CT_GETTEXT_VERSION=\"0.19.6\"\n+CT_GMP_V_6_0_0=y\n+# CT_GMP_V_5_1_3 is not set\n+# CT_GMP_V_5_1_1 is not set\n+# CT_GMP_V_5_0_2 is not set\n+# CT_GMP_V_5_0_1 is not set\n+# CT_GMP_V_4_3_2 is not set\n+# CT_GMP_V_4_3_1 is not set\n+# CT_GMP_V_4_3_0 is not set\n+CT_GMP_5_0_2_or_later=y\n+CT_GMP_VERSION=\"6.0.0a\"\n+CT_MPFR_V_3_1_3=y\n+# CT_MPFR_V_3_1_2 is not set\n+# CT_MPFR_V_3_1_0 is not set\n+# CT_MPFR_V_3_0_1 is not set\n+# CT_MPFR_V_3_0_0 is not set\n+# CT_MPFR_V_2_4_2 is not set\n+# CT_MPFR_V_2_4_1 is not set\n+# CT_MPFR_V_2_4_0 is not set\n+CT_MPFR_VERSION=\"3.1.3\"\n+CT_ISL_V_0_14=y\n+CT_ISL_V_0_14_or_later=y\n+CT_ISL_V_0_12_or_later=y\n+CT_ISL_VERSION=\"0.14\"\n+CT_CLOOG_V_0_18_4=y\n+# CT_CLOOG_V_0_18_1 is not set\n+# CT_CLOOG_V_0_18_0 is not set\n+CT_CLOOG_VERSION=\"0.18.4\"\n+CT_CLOOG_0_18_4_or_later=y\n+CT_CLOOG_0_18_or_later=y\n+CT_MPC_V_1_0_3=y\n+# CT_MPC_V_1_0_2 is not set\n+# CT_MPC_V_1_0_1 is not set\n+# CT_MPC_V_1_0 is not set\n+# CT_MPC_V_0_9 is not set\n+# CT_MPC_V_0_8_2 is not set\n+# CT_MPC_V_0_8_1 is not set\n+# CT_MPC_V_0_7 is not set\n+CT_MPC_VERSION=\"1.0.3\"\n+\n+#\n+# Companion libraries common options\n+#\n+# CT_COMPLIBS_CHECK is not set\n+\n+#\n+# Companion tools\n+#\n+\n+#\n+# READ HELP before you say 'Y' below !!!\n+#\n+# CT_COMP_TOOLS is not set"}, {"sha": "ed1406bd7cfa7cf4891d074191e87916cff9a408", "filename": "src/ci/docker/dist-arm-linux/build-toolchains.sh", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,45 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../arm-linux-gnueabi.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build\n+\n+mkdir build\n+cd build\n+cp ../arm-linux-gnueabihf.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "93d9e004c8c2d4edb3d726ef51b76361a891a867", "filename": "src/ci/docker/dist-armv7-aarch64-linux/Dockerfile", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,19 +1,29 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n   g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  patch \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n   sudo \\\n-  gdb \\\n-  xz-utils \\\n-  g++-arm-linux-gnueabihf \\\n-  g++-aarch64-linux-gnu\n+  texinfo \\\n+  wget \\\n+  xz-utils\n \n ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n@@ -24,11 +34,48 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=armv7-unknown-linux-gnueabihf,aarch64-unknown-linux-gnu\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host armv7-unknown-linux-gnueabihf \\\n-        --target armv7-unknown-linux-gnueabihf \\\n-        --host aarch64-unknown-linux-gnu \\\n-        --target aarch64-unknown-linux-gnu\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY armv7-linux-gnueabihf.config /tmp/\n+COPY armv7-linux-gnueabihf.config aarch64-linux-gnu.config build-toolchains.sh /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin\n+ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n+\n+ENV CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-gcc \\\n+    AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-ar \\\n+    CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-g++ \\\n+    CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n+    AR_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-ar \\\n+    CXX_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=armv7-unknown-linux-gnueabihf\n+ENV HOSTS=$HOSTS,aarch64-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "3d30ee49022d8f9318abc0fa52d71cd8310799d1", "filename": "src/ci/docker/dist-armv7-aarch64-linux/aarch64-linux-gnu.config", "status": "added", "additions": 551, "deletions": 0, "changes": 551, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Faarch64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Faarch64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Faarch64-linux-gnu.config?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,551 @@\n+#\n+# Automatically generated file; DO NOT EDIT.\n+# Crosstool-NG Configuration\n+#\n+CT_CONFIGURE_has_make381=y\n+CT_CONFIGURE_has_xz=y\n+CT_MODULES=y\n+\n+#\n+# Paths and misc options\n+#\n+\n+#\n+# crosstool-NG behavior\n+#\n+# CT_OBSOLETE is not set\n+# CT_EXPERIMENTAL is not set\n+# CT_DEBUG_CT is not set\n+\n+#\n+# Paths\n+#\n+CT_LOCAL_TARBALLS_DIR=\"\"\n+CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_INSTALL_DIR=\"${CT_PREFIX_DIR}\"\n+CT_RM_RF_PREFIX_DIR=y\n+CT_REMOVE_DOCS=y\n+CT_INSTALL_DIR_RO=y\n+CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n+# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n+\n+#\n+# Downloading\n+#\n+# CT_FORBID_DOWNLOAD is not set\n+# CT_FORCE_DOWNLOAD is not set\n+CT_CONNECT_TIMEOUT=10\n+# CT_ONLY_DOWNLOAD is not set\n+# CT_USE_MIRROR is not set\n+\n+#\n+# Extracting\n+#\n+# CT_FORCE_EXTRACT is not set\n+CT_OVERIDE_CONFIG_GUESS_SUB=y\n+# CT_ONLY_EXTRACT is not set\n+CT_PATCH_BUNDLED=y\n+# CT_PATCH_LOCAL is not set\n+# CT_PATCH_BUNDLED_LOCAL is not set\n+# CT_PATCH_LOCAL_BUNDLED is not set\n+# CT_PATCH_BUNDLED_FALLBACK_LOCAL is not set\n+# CT_PATCH_LOCAL_FALLBACK_BUNDLED is not set\n+# CT_PATCH_NONE is not set\n+CT_PATCH_ORDER=\"bundled\"\n+\n+#\n+# Build behavior\n+#\n+CT_PARALLEL_JOBS=0\n+CT_LOAD=\"\"\n+CT_USE_PIPES=y\n+CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n+CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n+# CT_CONFIG_SHELL_SH is not set\n+# CT_CONFIG_SHELL_ASH is not set\n+CT_CONFIG_SHELL_BASH=y\n+# CT_CONFIG_SHELL_CUSTOM is not set\n+CT_CONFIG_SHELL=\"${bash}\"\n+\n+#\n+# Logging\n+#\n+# CT_LOG_ERROR is not set\n+# CT_LOG_WARN is not set\n+CT_LOG_INFO=y\n+# CT_LOG_EXTRA is not set\n+# CT_LOG_ALL is not set\n+# CT_LOG_DEBUG is not set\n+CT_LOG_LEVEL_MAX=\"INFO\"\n+# CT_LOG_SEE_TOOLS_WARN is not set\n+CT_LOG_PROGRESS_BAR=y\n+CT_LOG_TO_FILE=y\n+CT_LOG_FILE_COMPRESS=y\n+\n+#\n+# Target options\n+#\n+CT_ARCH=\"arm\"\n+CT_ARCH_SUPPORTS_BOTH_MMU=y\n+CT_ARCH_SUPPORTS_BOTH_ENDIAN=y\n+CT_ARCH_SUPPORTS_32=y\n+CT_ARCH_SUPPORTS_64=y\n+CT_ARCH_SUPPORTS_WITH_ARCH=y\n+CT_ARCH_SUPPORTS_WITH_CPU=y\n+CT_ARCH_SUPPORTS_WITH_TUNE=y\n+CT_ARCH_DEFAULT_HAS_MMU=y\n+CT_ARCH_DEFAULT_LE=y\n+CT_ARCH_DEFAULT_32=y\n+CT_ARCH_ARCH=\"\"\n+CT_ARCH_CPU=\"\"\n+CT_ARCH_TUNE=\"\"\n+# CT_ARCH_BE is not set\n+CT_ARCH_LE=y\n+# CT_ARCH_32 is not set\n+CT_ARCH_64=y\n+CT_ARCH_BITNESS=64\n+CT_TARGET_CFLAGS=\"\"\n+CT_TARGET_LDFLAGS=\"\"\n+# CT_ARCH_alpha is not set\n+CT_ARCH_arm=y\n+# CT_ARCH_avr is not set\n+# CT_ARCH_m68k is not set\n+# CT_ARCH_mips is not set\n+# CT_ARCH_nios2 is not set\n+# CT_ARCH_powerpc is not set\n+# CT_ARCH_s390 is not set\n+# CT_ARCH_sh is not set\n+# CT_ARCH_sparc is not set\n+# CT_ARCH_x86 is not set\n+# CT_ARCH_xtensa is not set\n+CT_ARCH_alpha_AVAILABLE=y\n+CT_ARCH_arm_AVAILABLE=y\n+CT_ARCH_avr_AVAILABLE=y\n+CT_ARCH_m68k_AVAILABLE=y\n+CT_ARCH_microblaze_AVAILABLE=y\n+CT_ARCH_mips_AVAILABLE=y\n+CT_ARCH_nios2_AVAILABLE=y\n+CT_ARCH_powerpc_AVAILABLE=y\n+CT_ARCH_s390_AVAILABLE=y\n+CT_ARCH_sh_AVAILABLE=y\n+CT_ARCH_sparc_AVAILABLE=y\n+CT_ARCH_x86_AVAILABLE=y\n+CT_ARCH_xtensa_AVAILABLE=y\n+CT_ARCH_SUFFIX=\"\"\n+\n+#\n+# Generic target options\n+#\n+# CT_MULTILIB is not set\n+CT_ARCH_USE_MMU=y\n+CT_ARCH_ENDIAN=\"little\"\n+\n+#\n+# Target optimisations\n+#\n+CT_ARCH_EXCLUSIVE_WITH_CPU=y\n+CT_ARCH_FLOAT=\"\"\n+\n+#\n+# arm other options\n+#\n+CT_ARCH_ARM_MODE=\"arm\"\n+CT_ARCH_ARM_MODE_ARM=y\n+# CT_ARCH_ARM_MODE_THUMB is not set\n+# CT_ARCH_ARM_INTERWORKING is not set\n+CT_ARCH_ARM_EABI_FORCE=y\n+CT_ARCH_ARM_EABI=y\n+\n+#\n+# Toolchain options\n+#\n+\n+#\n+# General toolchain options\n+#\n+CT_FORCE_SYSROOT=y\n+CT_USE_SYSROOT=y\n+CT_SYSROOT_NAME=\"sysroot\"\n+CT_SYSROOT_DIR_PREFIX=\"\"\n+CT_WANTS_STATIC_LINK=y\n+# CT_STATIC_TOOLCHAIN is not set\n+CT_TOOLCHAIN_PKGVERSION=\"\"\n+CT_TOOLCHAIN_BUGURL=\"\"\n+\n+#\n+# Tuple completion and aliasing\n+#\n+CT_TARGET_VENDOR=\"unknown\"\n+CT_TARGET_ALIAS_SED_EXPR=\"\"\n+CT_TARGET_ALIAS=\"\"\n+\n+#\n+# Toolchain type\n+#\n+CT_CROSS=y\n+# CT_CANADIAN is not set\n+CT_TOOLCHAIN_TYPE=\"cross\"\n+\n+#\n+# Build system\n+#\n+CT_BUILD=\"\"\n+CT_BUILD_PREFIX=\"\"\n+CT_BUILD_SUFFIX=\"\"\n+\n+#\n+# Misc options\n+#\n+# CT_TOOLCHAIN_ENABLE_NLS is not set\n+\n+#\n+# Operating System\n+#\n+CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n+CT_KERNEL=\"linux\"\n+CT_KERNEL_VERSION=\"4.2.6\"\n+# CT_KERNEL_bare_metal is not set\n+CT_KERNEL_linux=y\n+CT_KERNEL_bare_metal_AVAILABLE=y\n+CT_KERNEL_linux_AVAILABLE=y\n+# CT_KERNEL_V_4_3 is not set\n+CT_KERNEL_V_4_2=y\n+# CT_KERNEL_V_4_1 is not set\n+# CT_KERNEL_V_3_18 is not set\n+# CT_KERNEL_V_3_14 is not set\n+# CT_KERNEL_V_3_12 is not set\n+# CT_KERNEL_V_3_10 is not set\n+# CT_KERNEL_V_3_4 is not set\n+# CT_KERNEL_V_3_2 is not set\n+# CT_KERNEL_V_2_6_32 is not set\n+# CT_KERNEL_LINUX_CUSTOM is not set\n+CT_KERNEL_windows_AVAILABLE=y\n+\n+#\n+# Common kernel options\n+#\n+CT_SHARED_LIBS=y\n+\n+#\n+# linux other options\n+#\n+CT_KERNEL_LINUX_VERBOSITY_0=y\n+# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n+# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n+CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n+CT_KERNEL_LINUX_INSTALL_CHECK=y\n+\n+#\n+# Binary utilities\n+#\n+CT_ARCH_BINFMT_ELF=y\n+CT_BINUTILS=\"binutils\"\n+CT_BINUTILS_binutils=y\n+\n+#\n+# GNU binutils\n+#\n+# CT_CC_BINUTILS_SHOW_LINARO is not set\n+CT_BINUTILS_V_2_25_1=y\n+# CT_BINUTILS_V_2_25 is not set\n+# CT_BINUTILS_V_2_24 is not set\n+# CT_BINUTILS_V_2_23_2 is not set\n+# CT_BINUTILS_V_2_23_1 is not set\n+# CT_BINUTILS_V_2_22 is not set\n+# CT_BINUTILS_V_2_21_53 is not set\n+# CT_BINUTILS_V_2_21_1a is not set\n+# CT_BINUTILS_V_2_20_1a is not set\n+# CT_BINUTILS_V_2_19_1a is not set\n+# CT_BINUTILS_V_2_18a is not set\n+CT_BINUTILS_VERSION=\"2.25.1\"\n+CT_BINUTILS_2_25_1_or_later=y\n+CT_BINUTILS_2_25_or_later=y\n+CT_BINUTILS_2_24_or_later=y\n+CT_BINUTILS_2_23_or_later=y\n+CT_BINUTILS_2_22_or_later=y\n+CT_BINUTILS_2_21_or_later=y\n+CT_BINUTILS_2_20_or_later=y\n+CT_BINUTILS_2_19_or_later=y\n+CT_BINUTILS_2_18_or_later=y\n+CT_BINUTILS_HAS_HASH_STYLE=y\n+CT_BINUTILS_HAS_GOLD=y\n+CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n+CT_BINUTILS_GOLD_SUPPORT=y\n+CT_BINUTILS_HAS_PLUGINS=y\n+CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n+CT_BINUTILS_FORCE_LD_BFD=y\n+CT_BINUTILS_LINKER_LD=y\n+# CT_BINUTILS_LINKER_LD_GOLD is not set\n+# CT_BINUTILS_LINKER_GOLD_LD is not set\n+CT_BINUTILS_LINKERS_LIST=\"ld\"\n+CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n+# CT_BINUTILS_PLUGINS is not set\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n+# CT_BINUTILS_FOR_TARGET is not set\n+\n+#\n+# binutils other options\n+#\n+\n+#\n+# C-library\n+#\n+CT_LIBC=\"glibc\"\n+CT_LIBC_VERSION=\"2.17\"\n+CT_LIBC_glibc=y\n+# CT_LIBC_musl is not set\n+# CT_LIBC_uClibc is not set\n+CT_LIBC_avr_libc_AVAILABLE=y\n+CT_LIBC_glibc_AVAILABLE=y\n+CT_THREADS=\"nptl\"\n+# CT_CC_GLIBC_SHOW_LINARO is not set\n+# CT_LIBC_GLIBC_V_2_22 is not set\n+# CT_LIBC_GLIBC_V_2_21 is not set\n+# CT_LIBC_GLIBC_V_2_20 is not set\n+# CT_LIBC_GLIBC_V_2_19 is not set\n+# CT_LIBC_GLIBC_V_2_18 is not set\n+CT_LIBC_GLIBC_V_2_17=y\n+# CT_LIBC_GLIBC_V_2_16_0 is not set\n+# CT_LIBC_GLIBC_V_2_15 is not set\n+# CT_LIBC_GLIBC_V_2_14_1 is not set\n+# CT_LIBC_GLIBC_V_2_14 is not set\n+# CT_LIBC_GLIBC_V_2_13 is not set\n+# CT_LIBC_GLIBC_V_2_12_2 is not set\n+# CT_LIBC_GLIBC_V_2_12_1 is not set\n+# CT_LIBC_GLIBC_V_2_11_1 is not set\n+# CT_LIBC_GLIBC_V_2_11 is not set\n+# CT_LIBC_GLIBC_V_2_10_1 is not set\n+# CT_LIBC_GLIBC_V_2_9 is not set\n+# CT_LIBC_GLIBC_V_2_8 is not set\n+CT_LIBC_GLIBC_2_17_or_later=y\n+CT_LIBC_mingw_AVAILABLE=y\n+CT_LIBC_musl_AVAILABLE=y\n+CT_LIBC_newlib_AVAILABLE=y\n+CT_LIBC_none_AVAILABLE=y\n+CT_LIBC_uClibc_AVAILABLE=y\n+CT_LIBC_SUPPORT_THREADS_ANY=y\n+CT_LIBC_SUPPORT_THREADS_NATIVE=y\n+\n+#\n+# Common C library options\n+#\n+CT_THREADS_NATIVE=y\n+CT_LIBC_XLDD=y\n+\n+#\n+# glibc other options\n+#\n+# CT_LIBC_GLIBC_PORTS_EXTERNAL is not set\n+CT_LIBC_GLIBC_MAY_FORCE_PORTS=y\n+CT_LIBC_glibc_familly=y\n+CT_LIBC_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_LIBC_GLIBC_CONFIGPARMS=\"\"\n+CT_LIBC_GLIBC_EXTRA_CFLAGS=\"\"\n+CT_LIBC_EXTRA_CC_ARGS=\"\"\n+# CT_LIBC_DISABLE_VERSIONING is not set\n+CT_LIBC_OLDEST_ABI=\"\"\n+CT_LIBC_GLIBC_FORCE_UNWIND=y\n+CT_LIBC_GLIBC_USE_PORTS=y\n+CT_LIBC_ADDONS_LIST=\"\"\n+\n+#\n+# WARNING !!!                                            \n+#\n+\n+#\n+#   For glibc >= 2.8, it can happen that the tarballs    \n+#\n+\n+#\n+#   for the addons are not available for download.       \n+#\n+\n+#\n+#   If that happens, bad luck... Try a previous version  \n+#\n+\n+#\n+#   or try again later... :-(                            \n+#\n+# CT_LIBC_LOCALES is not set\n+# CT_LIBC_GLIBC_KERNEL_VERSION_NONE is not set\n+CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n+# CT_LIBC_GLIBC_KERNEL_VERSION_CHOSEN is not set\n+CT_LIBC_GLIBC_MIN_KERNEL=\"4.2.6\"\n+\n+#\n+# C compiler\n+#\n+CT_CC=\"gcc\"\n+CT_CC_CORE_PASSES_NEEDED=y\n+CT_CC_CORE_PASS_1_NEEDED=y\n+CT_CC_CORE_PASS_2_NEEDED=y\n+CT_CC_gcc=y\n+# CT_CC_GCC_SHOW_LINARO is not set\n+CT_CC_GCC_V_5_2_0=y\n+# CT_CC_GCC_V_4_9_3 is not set\n+# CT_CC_GCC_V_4_8_5 is not set\n+# CT_CC_GCC_V_4_7_4 is not set\n+# CT_CC_GCC_V_4_6_4 is not set\n+# CT_CC_GCC_V_4_5_4 is not set\n+# CT_CC_GCC_V_4_4_7 is not set\n+# CT_CC_GCC_V_4_3_6 is not set\n+# CT_CC_GCC_V_4_2_4 is not set\n+CT_CC_GCC_4_2_or_later=y\n+CT_CC_GCC_4_3_or_later=y\n+CT_CC_GCC_4_4_or_later=y\n+CT_CC_GCC_4_5_or_later=y\n+CT_CC_GCC_4_6_or_later=y\n+CT_CC_GCC_4_7_or_later=y\n+CT_CC_GCC_4_8_or_later=y\n+CT_CC_GCC_4_9_or_later=y\n+CT_CC_GCC_5=y\n+CT_CC_GCC_5_or_later=y\n+CT_CC_GCC_HAS_GRAPHITE=y\n+CT_CC_GCC_USE_GRAPHITE=y\n+CT_CC_GCC_HAS_LTO=y\n+CT_CC_GCC_USE_LTO=y\n+CT_CC_GCC_HAS_PKGVERSION_BUGURL=y\n+CT_CC_GCC_HAS_BUILD_ID=y\n+CT_CC_GCC_HAS_LNK_HASH_STYLE=y\n+CT_CC_GCC_USE_GMP_MPFR=y\n+CT_CC_GCC_USE_MPC=y\n+CT_CC_GCC_HAS_LIBQUADMATH=y\n+CT_CC_GCC_HAS_LIBSANITIZER=y\n+CT_CC_GCC_VERSION=\"5.2.0\"\n+# CT_CC_LANG_FORTRAN is not set\n+CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n+CT_CC_GCC_STATIC_LIBSTDCXX=y\n+# CT_CC_GCC_SYSTEM_ZLIB is not set\n+\n+#\n+# Optimisation features\n+#\n+\n+#\n+# Settings for libraries running on target\n+#\n+CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n+# CT_CC_GCC_LIBMUDFLAP is not set\n+# CT_CC_GCC_LIBGOMP is not set\n+# CT_CC_GCC_LIBSSP is not set\n+# CT_CC_GCC_LIBQUADMATH is not set\n+# CT_CC_GCC_LIBSANITIZER is not set\n+\n+#\n+# Misc. obscure options.\n+#\n+CT_CC_CXA_ATEXIT=y\n+# CT_CC_GCC_DISABLE_PCH is not set\n+CT_CC_GCC_SJLJ_EXCEPTIONS=m\n+CT_CC_GCC_LDBL_128=m\n+# CT_CC_GCC_BUILD_ID is not set\n+CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n+# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n+CT_CC_GCC_LNK_HASH_STYLE=\"\"\n+CT_CC_GCC_DEC_FLOAT_AUTO=y\n+# CT_CC_GCC_DEC_FLOAT_BID is not set\n+# CT_CC_GCC_DEC_FLOAT_DPD is not set\n+# CT_CC_GCC_DEC_FLOATS_NO is not set\n+CT_CC_SUPPORT_CXX=y\n+CT_CC_SUPPORT_FORTRAN=y\n+CT_CC_SUPPORT_JAVA=y\n+CT_CC_SUPPORT_ADA=y\n+CT_CC_SUPPORT_OBJC=y\n+CT_CC_SUPPORT_OBJCXX=y\n+CT_CC_SUPPORT_GOLANG=y\n+\n+#\n+# Additional supported languages:\n+#\n+CT_CC_LANG_CXX=y\n+# CT_CC_LANG_JAVA is not set\n+\n+#\n+# Debug facilities\n+#\n+# CT_DEBUG_dmalloc is not set\n+# CT_DEBUG_duma is not set\n+# CT_DEBUG_gdb is not set\n+# CT_DEBUG_ltrace is not set\n+# CT_DEBUG_strace is not set\n+\n+#\n+# Companion libraries\n+#\n+CT_COMPLIBS_NEEDED=y\n+CT_LIBICONV_NEEDED=y\n+CT_GETTEXT_NEEDED=y\n+CT_GMP_NEEDED=y\n+CT_MPFR_NEEDED=y\n+CT_ISL_NEEDED=y\n+CT_MPC_NEEDED=y\n+CT_COMPLIBS=y\n+CT_LIBICONV=y\n+CT_GETTEXT=y\n+CT_GMP=y\n+CT_MPFR=y\n+CT_ISL=y\n+CT_MPC=y\n+CT_LIBICONV_V_1_14=y\n+CT_LIBICONV_VERSION=\"1.14\"\n+CT_GETTEXT_V_0_19_6=y\n+CT_GETTEXT_VERSION=\"0.19.6\"\n+CT_GMP_V_6_0_0=y\n+# CT_GMP_V_5_1_3 is not set\n+# CT_GMP_V_5_1_1 is not set\n+# CT_GMP_V_5_0_2 is not set\n+# CT_GMP_V_5_0_1 is not set\n+# CT_GMP_V_4_3_2 is not set\n+# CT_GMP_V_4_3_1 is not set\n+# CT_GMP_V_4_3_0 is not set\n+CT_GMP_5_0_2_or_later=y\n+CT_GMP_VERSION=\"6.0.0a\"\n+CT_MPFR_V_3_1_3=y\n+# CT_MPFR_V_3_1_2 is not set\n+# CT_MPFR_V_3_1_0 is not set\n+# CT_MPFR_V_3_0_1 is not set\n+# CT_MPFR_V_3_0_0 is not set\n+# CT_MPFR_V_2_4_2 is not set\n+# CT_MPFR_V_2_4_1 is not set\n+# CT_MPFR_V_2_4_0 is not set\n+CT_MPFR_VERSION=\"3.1.3\"\n+CT_ISL_V_0_14=y\n+# CT_ISL_V_0_12_2 is not set\n+CT_ISL_V_0_14_or_later=y\n+CT_ISL_V_0_12_or_later=y\n+CT_ISL_VERSION=\"0.14\"\n+# CT_CLOOG_V_0_18_4 is not set\n+# CT_CLOOG_V_0_18_1 is not set\n+# CT_CLOOG_V_0_18_0 is not set\n+CT_MPC_V_1_0_3=y\n+# CT_MPC_V_1_0_2 is not set\n+# CT_MPC_V_1_0_1 is not set\n+# CT_MPC_V_1_0 is not set\n+# CT_MPC_V_0_9 is not set\n+# CT_MPC_V_0_8_2 is not set\n+# CT_MPC_V_0_8_1 is not set\n+# CT_MPC_V_0_7 is not set\n+CT_MPC_VERSION=\"1.0.3\"\n+\n+#\n+# Companion libraries common options\n+#\n+# CT_COMPLIBS_CHECK is not set\n+\n+#\n+# Companion tools\n+#\n+\n+#\n+# READ HELP before you say 'Y' below !!!\n+#\n+# CT_COMP_TOOLS is not set"}, {"sha": "79d6c77c41152115f176d175483453b85983c408", "filename": "src/ci/docker/dist-armv7-aarch64-linux/armv7-linux-gnueabihf.config", "status": "added", "additions": 569, "deletions": 0, "changes": 569, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Farmv7-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Farmv7-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Farmv7-linux-gnueabihf.config?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,569 @@\n+#\n+# Automatically generated file; DO NOT EDIT.\n+# Crosstool-NG Configuration\n+#\n+CT_CONFIGURE_has_make381=y\n+CT_MODULES=y\n+\n+#\n+# Paths and misc options\n+#\n+\n+#\n+# crosstool-NG behavior\n+#\n+# CT_OBSOLETE is not set\n+# CT_EXPERIMENTAL is not set\n+# CT_DEBUG_CT is not set\n+\n+#\n+# Paths\n+#\n+CT_LOCAL_TARBALLS_DIR=\"\"\n+CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_INSTALL_DIR=\"${CT_PREFIX_DIR}\"\n+CT_RM_RF_PREFIX_DIR=y\n+CT_REMOVE_DOCS=y\n+CT_INSTALL_DIR_RO=y\n+CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n+# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n+\n+#\n+# Downloading\n+#\n+# CT_FORBID_DOWNLOAD is not set\n+# CT_FORCE_DOWNLOAD is not set\n+CT_CONNECT_TIMEOUT=10\n+# CT_ONLY_DOWNLOAD is not set\n+# CT_USE_MIRROR is not set\n+\n+#\n+# Extracting\n+#\n+# CT_FORCE_EXTRACT is not set\n+CT_OVERIDE_CONFIG_GUESS_SUB=y\n+# CT_ONLY_EXTRACT is not set\n+CT_PATCH_BUNDLED=y\n+# CT_PATCH_LOCAL is not set\n+# CT_PATCH_BUNDLED_LOCAL is not set\n+# CT_PATCH_LOCAL_BUNDLED is not set\n+# CT_PATCH_BUNDLED_FALLBACK_LOCAL is not set\n+# CT_PATCH_LOCAL_FALLBACK_BUNDLED is not set\n+# CT_PATCH_NONE is not set\n+CT_PATCH_ORDER=\"bundled\"\n+\n+#\n+# Build behavior\n+#\n+CT_PARALLEL_JOBS=0\n+CT_LOAD=\"\"\n+CT_USE_PIPES=y\n+CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n+CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n+CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n+# CT_CONFIG_SHELL_SH is not set\n+# CT_CONFIG_SHELL_ASH is not set\n+CT_CONFIG_SHELL_BASH=y\n+# CT_CONFIG_SHELL_CUSTOM is not set\n+CT_CONFIG_SHELL=\"${bash}\"\n+\n+#\n+# Logging\n+#\n+# CT_LOG_ERROR is not set\n+# CT_LOG_WARN is not set\n+CT_LOG_INFO=y\n+# CT_LOG_EXTRA is not set\n+# CT_LOG_ALL is not set\n+# CT_LOG_DEBUG is not set\n+CT_LOG_LEVEL_MAX=\"INFO\"\n+# CT_LOG_SEE_TOOLS_WARN is not set\n+CT_LOG_PROGRESS_BAR=y\n+CT_LOG_TO_FILE=y\n+CT_LOG_FILE_COMPRESS=y\n+\n+#\n+# Target options\n+#\n+CT_ARCH=\"arm\"\n+CT_ARCH_SUPPORTS_BOTH_MMU=y\n+CT_ARCH_SUPPORTS_BOTH_ENDIAN=y\n+CT_ARCH_SUPPORTS_32=y\n+CT_ARCH_SUPPORTS_64=y\n+CT_ARCH_SUPPORTS_WITH_ARCH=y\n+CT_ARCH_SUPPORTS_WITH_CPU=y\n+CT_ARCH_SUPPORTS_WITH_TUNE=y\n+CT_ARCH_SUPPORTS_WITH_FLOAT=y\n+CT_ARCH_SUPPORTS_WITH_FPU=y\n+CT_ARCH_SUPPORTS_SOFTFP=y\n+CT_ARCH_DEFAULT_HAS_MMU=y\n+CT_ARCH_DEFAULT_LE=y\n+CT_ARCH_DEFAULT_32=y\n+CT_ARCH_ARCH=\"armv7-a\"\n+CT_ARCH_CPU=\"\"\n+CT_ARCH_TUNE=\"\"\n+CT_ARCH_FPU=\"vfpv3-d16\"\n+# CT_ARCH_BE is not set\n+CT_ARCH_LE=y\n+CT_ARCH_32=y\n+# CT_ARCH_64 is not set\n+CT_ARCH_BITNESS=32\n+CT_ARCH_FLOAT_HW=y\n+# CT_ARCH_FLOAT_SW is not set\n+CT_TARGET_CFLAGS=\"\"\n+CT_TARGET_LDFLAGS=\"\"\n+# CT_ARCH_alpha is not set\n+CT_ARCH_arm=y\n+# CT_ARCH_avr is not set\n+# CT_ARCH_m68k is not set\n+# CT_ARCH_mips is not set\n+# CT_ARCH_nios2 is not set\n+# CT_ARCH_powerpc is not set\n+# CT_ARCH_s390 is not set\n+# CT_ARCH_sh is not set\n+# CT_ARCH_sparc is not set\n+# CT_ARCH_x86 is not set\n+# CT_ARCH_xtensa is not set\n+CT_ARCH_alpha_AVAILABLE=y\n+CT_ARCH_arm_AVAILABLE=y\n+CT_ARCH_avr_AVAILABLE=y\n+CT_ARCH_m68k_AVAILABLE=y\n+CT_ARCH_microblaze_AVAILABLE=y\n+CT_ARCH_mips_AVAILABLE=y\n+CT_ARCH_nios2_AVAILABLE=y\n+CT_ARCH_powerpc_AVAILABLE=y\n+CT_ARCH_s390_AVAILABLE=y\n+CT_ARCH_sh_AVAILABLE=y\n+CT_ARCH_sparc_AVAILABLE=y\n+CT_ARCH_x86_AVAILABLE=y\n+CT_ARCH_xtensa_AVAILABLE=y\n+CT_ARCH_SUFFIX=\"v7\"\n+\n+#\n+# Generic target options\n+#\n+# CT_MULTILIB is not set\n+CT_ARCH_USE_MMU=y\n+CT_ARCH_ENDIAN=\"little\"\n+\n+#\n+# Target optimisations\n+#\n+CT_ARCH_EXCLUSIVE_WITH_CPU=y\n+# CT_ARCH_FLOAT_AUTO is not set\n+# CT_ARCH_FLOAT_SOFTFP is not set\n+CT_ARCH_FLOAT=\"hard\"\n+# CT_ARCH_ALPHA_EV4 is not set\n+# CT_ARCH_ALPHA_EV45 is not set\n+# CT_ARCH_ALPHA_EV5 is not set\n+# CT_ARCH_ALPHA_EV56 is not set\n+# CT_ARCH_ALPHA_EV6 is not set\n+# CT_ARCH_ALPHA_EV67 is not set\n+\n+#\n+# arm other options\n+#\n+CT_ARCH_ARM_MODE=\"thumb\"\n+# CT_ARCH_ARM_MODE_ARM is not set\n+CT_ARCH_ARM_MODE_THUMB=y\n+# CT_ARCH_ARM_INTERWORKING is not set\n+CT_ARCH_ARM_EABI_FORCE=y\n+CT_ARCH_ARM_EABI=y\n+CT_ARCH_ARM_TUPLE_USE_EABIHF=y\n+\n+#\n+# Toolchain options\n+#\n+\n+#\n+# General toolchain options\n+#\n+CT_FORCE_SYSROOT=y\n+CT_USE_SYSROOT=y\n+CT_SYSROOT_NAME=\"sysroot\"\n+CT_SYSROOT_DIR_PREFIX=\"\"\n+CT_WANTS_STATIC_LINK=y\n+# CT_STATIC_TOOLCHAIN is not set\n+CT_TOOLCHAIN_PKGVERSION=\"\"\n+CT_TOOLCHAIN_BUGURL=\"\"\n+\n+#\n+# Tuple completion and aliasing\n+#\n+CT_TARGET_VENDOR=\"unknown\"\n+CT_TARGET_ALIAS_SED_EXPR=\"\"\n+CT_TARGET_ALIAS=\"\"\n+\n+#\n+# Toolchain type\n+#\n+CT_CROSS=y\n+# CT_CANADIAN is not set\n+CT_TOOLCHAIN_TYPE=\"cross\"\n+\n+#\n+# Build system\n+#\n+CT_BUILD=\"\"\n+CT_BUILD_PREFIX=\"\"\n+CT_BUILD_SUFFIX=\"\"\n+\n+#\n+# Misc options\n+#\n+# CT_TOOLCHAIN_ENABLE_NLS is not set\n+\n+#\n+# Operating System\n+#\n+CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n+CT_KERNEL=\"linux\"\n+CT_KERNEL_VERSION=\"3.2.72\"\n+# CT_KERNEL_bare_metal is not set\n+CT_KERNEL_linux=y\n+CT_KERNEL_bare_metal_AVAILABLE=y\n+CT_KERNEL_linux_AVAILABLE=y\n+# CT_KERNEL_V_4_3 is not set\n+# CT_KERNEL_V_4_2 is not set\n+# CT_KERNEL_V_4_1 is not set\n+# CT_KERNEL_V_3_18 is not set\n+# CT_KERNEL_V_3_14 is not set\n+# CT_KERNEL_V_3_12 is not set\n+# CT_KERNEL_V_3_10 is not set\n+# CT_KERNEL_V_3_4 is not set\n+CT_KERNEL_V_3_2=y\n+# CT_KERNEL_V_2_6_32 is not set\n+# CT_KERNEL_LINUX_CUSTOM is not set\n+CT_KERNEL_windows_AVAILABLE=y\n+\n+#\n+# Common kernel options\n+#\n+CT_SHARED_LIBS=y\n+\n+#\n+# linux other options\n+#\n+CT_KERNEL_LINUX_VERBOSITY_0=y\n+# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n+# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n+CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n+CT_KERNEL_LINUX_INSTALL_CHECK=y\n+\n+#\n+# Binary utilities\n+#\n+CT_ARCH_BINFMT_ELF=y\n+CT_BINUTILS=\"binutils\"\n+CT_BINUTILS_binutils=y\n+\n+#\n+# GNU binutils\n+#\n+# CT_CC_BINUTILS_SHOW_LINARO is not set\n+CT_BINUTILS_V_2_25_1=y\n+# CT_BINUTILS_V_2_25 is not set\n+# CT_BINUTILS_V_2_24 is not set\n+# CT_BINUTILS_V_2_23_2 is not set\n+# CT_BINUTILS_V_2_23_1 is not set\n+# CT_BINUTILS_V_2_22 is not set\n+# CT_BINUTILS_V_2_21_53 is not set\n+# CT_BINUTILS_V_2_21_1a is not set\n+# CT_BINUTILS_V_2_20_1a is not set\n+# CT_BINUTILS_V_2_19_1a is not set\n+# CT_BINUTILS_V_2_18a is not set\n+CT_BINUTILS_VERSION=\"2.25.1\"\n+CT_BINUTILS_2_25_1_or_later=y\n+CT_BINUTILS_2_25_or_later=y\n+CT_BINUTILS_2_24_or_later=y\n+CT_BINUTILS_2_23_or_later=y\n+CT_BINUTILS_2_22_or_later=y\n+CT_BINUTILS_2_21_or_later=y\n+CT_BINUTILS_2_20_or_later=y\n+CT_BINUTILS_2_19_or_later=y\n+CT_BINUTILS_2_18_or_later=y\n+CT_BINUTILS_HAS_HASH_STYLE=y\n+CT_BINUTILS_HAS_GOLD=y\n+CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n+CT_BINUTILS_GOLD_SUPPORT=y\n+CT_BINUTILS_HAS_PLUGINS=y\n+CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n+CT_BINUTILS_FORCE_LD_BFD=y\n+CT_BINUTILS_LINKER_LD=y\n+# CT_BINUTILS_LINKER_LD_GOLD is not set\n+# CT_BINUTILS_LINKER_GOLD_LD is not set\n+CT_BINUTILS_LINKERS_LIST=\"ld\"\n+CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n+# CT_BINUTILS_PLUGINS is not set\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n+# CT_BINUTILS_FOR_TARGET is not set\n+\n+#\n+# binutils other options\n+#\n+\n+#\n+# C-library\n+#\n+CT_LIBC=\"glibc\"\n+CT_LIBC_VERSION=\"2.16.0\"\n+CT_LIBC_glibc=y\n+# CT_LIBC_musl is not set\n+# CT_LIBC_newlib is not set\n+# CT_LIBC_none is not set\n+# CT_LIBC_uClibc is not set\n+CT_LIBC_avr_libc_AVAILABLE=y\n+CT_LIBC_glibc_AVAILABLE=y\n+CT_THREADS=\"nptl\"\n+# CT_CC_GLIBC_SHOW_LINARO is not set\n+# CT_LIBC_GLIBC_V_2_22 is not set\n+# CT_LIBC_GLIBC_V_2_21 is not set\n+# CT_LIBC_GLIBC_V_2_20 is not set\n+# CT_LIBC_GLIBC_V_2_19 is not set\n+# CT_LIBC_GLIBC_V_2_18 is not set\n+# CT_LIBC_GLIBC_V_2_17 is not set\n+CT_LIBC_GLIBC_V_2_16_0=y\n+# CT_LIBC_GLIBC_V_2_15 is not set\n+# CT_LIBC_GLIBC_V_2_14_1 is not set\n+# CT_LIBC_GLIBC_V_2_14 is not set\n+# CT_LIBC_GLIBC_V_2_13 is not set\n+# CT_LIBC_GLIBC_V_2_12_2 is not set\n+# CT_LIBC_GLIBC_V_2_12_1 is not set\n+# CT_LIBC_GLIBC_V_2_11_1 is not set\n+# CT_LIBC_GLIBC_V_2_11 is not set\n+# CT_LIBC_GLIBC_V_2_10_1 is not set\n+# CT_LIBC_GLIBC_V_2_9 is not set\n+# CT_LIBC_GLIBC_V_2_8 is not set\n+CT_LIBC_mingw_AVAILABLE=y\n+CT_LIBC_musl_AVAILABLE=y\n+CT_LIBC_newlib_AVAILABLE=y\n+CT_LIBC_none_AVAILABLE=y\n+CT_LIBC_uClibc_AVAILABLE=y\n+CT_LIBC_SUPPORT_THREADS_ANY=y\n+CT_LIBC_SUPPORT_THREADS_NATIVE=y\n+\n+#\n+# Common C library options\n+#\n+CT_THREADS_NATIVE=y\n+CT_LIBC_XLDD=y\n+\n+#\n+# glibc other options\n+#\n+CT_LIBC_GLIBC_PORTS_EXTERNAL=y\n+CT_LIBC_GLIBC_MAY_FORCE_PORTS=y\n+CT_LIBC_glibc_familly=y\n+CT_LIBC_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_LIBC_GLIBC_CONFIGPARMS=\"\"\n+CT_LIBC_GLIBC_EXTRA_CFLAGS=\"\"\n+CT_LIBC_EXTRA_CC_ARGS=\"\"\n+# CT_LIBC_DISABLE_VERSIONING is not set\n+CT_LIBC_OLDEST_ABI=\"\"\n+CT_LIBC_GLIBC_FORCE_UNWIND=y\n+CT_LIBC_GLIBC_USE_PORTS=y\n+CT_LIBC_ADDONS_LIST=\"\"\n+\n+#\n+# WARNING !!!                                            \n+#\n+\n+#\n+#   For glibc >= 2.8, it can happen that the tarballs    \n+#\n+\n+#\n+#   for the addons are not available for download.       \n+#\n+\n+#\n+#   If that happens, bad luck... Try a previous version  \n+#\n+\n+#\n+#   or try again later... :-(                            \n+#\n+# CT_LIBC_LOCALES is not set\n+# CT_LIBC_GLIBC_KERNEL_VERSION_NONE is not set\n+CT_LIBC_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n+# CT_LIBC_GLIBC_KERNEL_VERSION_CHOSEN is not set\n+CT_LIBC_GLIBC_MIN_KERNEL=\"3.2.72\"\n+\n+#\n+# C compiler\n+#\n+CT_CC=\"gcc\"\n+CT_CC_CORE_PASSES_NEEDED=y\n+CT_CC_CORE_PASS_1_NEEDED=y\n+CT_CC_CORE_PASS_2_NEEDED=y\n+CT_CC_gcc=y\n+# CT_CC_GCC_SHOW_LINARO is not set\n+# CT_CC_GCC_V_5_2_0 is not set\n+CT_CC_GCC_V_4_9_3=y\n+# CT_CC_GCC_V_4_8_5 is not set\n+# CT_CC_GCC_V_4_7_4 is not set\n+# CT_CC_GCC_V_4_6_4 is not set\n+# CT_CC_GCC_V_4_5_4 is not set\n+# CT_CC_GCC_V_4_4_7 is not set\n+# CT_CC_GCC_V_4_3_6 is not set\n+# CT_CC_GCC_V_4_2_4 is not set\n+CT_CC_GCC_4_2_or_later=y\n+CT_CC_GCC_4_3_or_later=y\n+CT_CC_GCC_4_4_or_later=y\n+CT_CC_GCC_4_5_or_later=y\n+CT_CC_GCC_4_6_or_later=y\n+CT_CC_GCC_4_7_or_later=y\n+CT_CC_GCC_4_8_or_later=y\n+CT_CC_GCC_4_9=y\n+CT_CC_GCC_4_9_or_later=y\n+CT_CC_GCC_HAS_GRAPHITE=y\n+CT_CC_GCC_USE_GRAPHITE=y\n+CT_CC_GCC_HAS_LTO=y\n+CT_CC_GCC_USE_LTO=y\n+CT_CC_GCC_HAS_PKGVERSION_BUGURL=y\n+CT_CC_GCC_HAS_BUILD_ID=y\n+CT_CC_GCC_HAS_LNK_HASH_STYLE=y\n+CT_CC_GCC_USE_GMP_MPFR=y\n+CT_CC_GCC_USE_MPC=y\n+CT_CC_GCC_HAS_LIBQUADMATH=y\n+CT_CC_GCC_HAS_LIBSANITIZER=y\n+CT_CC_GCC_VERSION=\"4.9.3\"\n+# CT_CC_LANG_FORTRAN is not set\n+CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n+CT_CC_GCC_STATIC_LIBSTDCXX=y\n+# CT_CC_GCC_SYSTEM_ZLIB is not set\n+\n+#\n+# Optimisation features\n+#\n+\n+#\n+# Settings for libraries running on target\n+#\n+CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n+# CT_CC_GCC_LIBMUDFLAP is not set\n+# CT_CC_GCC_LIBGOMP is not set\n+# CT_CC_GCC_LIBSSP is not set\n+# CT_CC_GCC_LIBQUADMATH is not set\n+# CT_CC_GCC_LIBSANITIZER is not set\n+\n+#\n+# Misc. obscure options.\n+#\n+CT_CC_CXA_ATEXIT=y\n+# CT_CC_GCC_DISABLE_PCH is not set\n+CT_CC_GCC_SJLJ_EXCEPTIONS=m\n+CT_CC_GCC_LDBL_128=m\n+# CT_CC_GCC_BUILD_ID is not set\n+CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n+# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n+# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n+CT_CC_GCC_LNK_HASH_STYLE=\"\"\n+CT_CC_GCC_DEC_FLOAT_AUTO=y\n+# CT_CC_GCC_DEC_FLOAT_BID is not set\n+# CT_CC_GCC_DEC_FLOAT_DPD is not set\n+# CT_CC_GCC_DEC_FLOATS_NO is not set\n+CT_CC_SUPPORT_CXX=y\n+CT_CC_SUPPORT_FORTRAN=y\n+CT_CC_SUPPORT_JAVA=y\n+CT_CC_SUPPORT_ADA=y\n+CT_CC_SUPPORT_OBJC=y\n+CT_CC_SUPPORT_OBJCXX=y\n+CT_CC_SUPPORT_GOLANG=y\n+\n+#\n+# Additional supported languages:\n+#\n+CT_CC_LANG_CXX=y\n+# CT_CC_LANG_JAVA is not set\n+\n+#\n+# Debug facilities\n+#\n+# CT_DEBUG_dmalloc is not set\n+# CT_DEBUG_duma is not set\n+# CT_DEBUG_gdb is not set\n+# CT_DEBUG_ltrace is not set\n+# CT_DEBUG_strace is not set\n+\n+#\n+# Companion libraries\n+#\n+CT_COMPLIBS_NEEDED=y\n+CT_LIBICONV_NEEDED=y\n+CT_GETTEXT_NEEDED=y\n+CT_GMP_NEEDED=y\n+CT_MPFR_NEEDED=y\n+CT_ISL_NEEDED=y\n+CT_CLOOG_NEEDED=y\n+CT_MPC_NEEDED=y\n+CT_COMPLIBS=y\n+CT_LIBICONV=y\n+CT_GETTEXT=y\n+CT_GMP=y\n+CT_MPFR=y\n+CT_ISL=y\n+CT_CLOOG=y\n+CT_MPC=y\n+CT_LIBICONV_V_1_14=y\n+CT_LIBICONV_VERSION=\"1.14\"\n+CT_GETTEXT_V_0_19_6=y\n+CT_GETTEXT_VERSION=\"0.19.6\"\n+CT_GMP_V_6_0_0=y\n+# CT_GMP_V_5_1_3 is not set\n+# CT_GMP_V_5_1_1 is not set\n+# CT_GMP_V_5_0_2 is not set\n+# CT_GMP_V_5_0_1 is not set\n+# CT_GMP_V_4_3_2 is not set\n+# CT_GMP_V_4_3_1 is not set\n+# CT_GMP_V_4_3_0 is not set\n+CT_GMP_5_0_2_or_later=y\n+CT_GMP_VERSION=\"6.0.0a\"\n+CT_MPFR_V_3_1_3=y\n+# CT_MPFR_V_3_1_2 is not set\n+# CT_MPFR_V_3_1_0 is not set\n+# CT_MPFR_V_3_0_1 is not set\n+# CT_MPFR_V_3_0_0 is not set\n+# CT_MPFR_V_2_4_2 is not set\n+# CT_MPFR_V_2_4_1 is not set\n+# CT_MPFR_V_2_4_0 is not set\n+CT_MPFR_VERSION=\"3.1.3\"\n+CT_ISL_V_0_14=y\n+CT_ISL_V_0_14_or_later=y\n+CT_ISL_V_0_12_or_later=y\n+CT_ISL_VERSION=\"0.14\"\n+CT_CLOOG_V_0_18_4=y\n+# CT_CLOOG_V_0_18_1 is not set\n+# CT_CLOOG_V_0_18_0 is not set\n+CT_CLOOG_VERSION=\"0.18.4\"\n+CT_CLOOG_0_18_4_or_later=y\n+CT_CLOOG_0_18_or_later=y\n+CT_MPC_V_1_0_3=y\n+# CT_MPC_V_1_0_2 is not set\n+# CT_MPC_V_1_0_1 is not set\n+# CT_MPC_V_1_0 is not set\n+# CT_MPC_V_0_9 is not set\n+# CT_MPC_V_0_8_2 is not set\n+# CT_MPC_V_0_8_1 is not set\n+# CT_MPC_V_0_7 is not set\n+CT_MPC_VERSION=\"1.0.3\"\n+\n+#\n+# Companion libraries common options\n+#\n+# CT_COMPLIBS_CHECK is not set\n+\n+#\n+# Companion tools\n+#\n+\n+#\n+# READ HELP before you say 'Y' below !!!\n+#\n+# CT_COMP_TOOLS is not set"}, {"sha": "ebd5ef4cfc492096f8713ec0897a586348e3f641", "filename": "src/ci/docker/dist-armv7-aarch64-linux/build-toolchains.sh", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-aarch64-linux%2Fbuild-toolchains.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,45 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../armv7-linux-gnueabihf.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build\n+\n+mkdir build\n+cd build\n+cp ../aarch64-linux-gnu.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "4b6db62d3897198a8edbd30e793bca4d9017b620", "filename": "src/ci/docker/dist-freebsd/Dockerfile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-freebsd%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -35,11 +35,8 @@ ENV \\\n     CC_i686_unknown_freebsd=i686-unknown-freebsd10-gcc \\\n     CXX_i686_unknown_freebsd=i686-unknown-freebsd10-g++\n \n-ENV RUST_CONFIGURE_ARGS \\\n-        --host=x86_64-unknown-freebsd,i686-unknown-freebsd\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host x86_64-unknown-freebsd \\\n-        --target x86_64-unknown-freebsd \\\n-        --host i686-unknown-freebsd \\\n-        --target i686-unknown-freebsd\n+ENV HOSTS=x86_64-unknown-freebsd\n+ENV HOSTS=$HOSTS,i686-unknown-freebsd\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "df189c258097739b5addfacbbf3d1b7473c37935", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -24,11 +24,8 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=mips-unknown-linux-gnu,mipsel-unknown-linux-gnu\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host mips-unknown-linux-gnu \\\n-        --target mips-unknown-linux-gnu \\\n-        --host mipsel-unknown-linux-gnu \\\n-        --target mipsel-unknown-linux-gnu\n+ENV HOSTS=mips-unknown-linux-gnu\n+ENV HOSTS=$HOSTS,mipsel-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "9152965caee54730690841352aaae53e4c1d5dd5", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -24,11 +24,8 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=mips64-unknown-linux-gnuabi64,mips64el-unknown-linux-gnuabi64\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host mips64-unknown-linux-gnuabi64 \\\n-        --target mips64-unknown-linux-gnuabi64 \\\n-        --host mips64el-unknown-linux-gnuabi64 \\\n-        --target mips64el-unknown-linux-gnuabi64\n+ENV HOSTS=mips64-unknown-linux-gnuabi64\n+ENV HOSTS=$HOSTS,mips64el-unknown-linux-gnuabi64\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "d5f9e5269f13d24465c4a0192d208c73a4e11c95", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -23,12 +23,10 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=powerpc-unknown-linux-gnu\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host powerpc-unknown-linux-gnu \\\n-        --target powerpc-unknown-linux-gnu\n+ENV HOSTS=powerpc-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # FIXME(#36150) this will fail the bootstrap. Probably means something bad is\n #               happening!"}, {"sha": "3b222581bd4076300c14b92c2fd470a95fbca838", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -29,11 +29,8 @@ ENV \\\n     CC_powerpc64_unknown_linux_gnu=powerpc64-linux-gnu-gcc \\\n     CXX_powerpc64_unknown_linux_gnu=powerpc64-linux-gnu-g++\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --host=powerpc64-unknown-linux-gnu,powerpc64le-unknown-linux-gnu\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host powerpc64-unknown-linux-gnu \\\n-        --target powerpc64-unknown-linux-gnu \\\n-        --host powerpc64le-unknown-linux-gnu \\\n-        --target powerpc64le-unknown-linux-gnu\n+ENV HOSTS=powerpc64-unknown-linux-gnu\n+ENV HOSTS=$HOSTS,powerpc64le-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "7350b11a69fc0739df6bd57dac413ed363920f5d", "filename": "src/ci/docker/dist-s390x-linux-netbsd/Dockerfile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -33,11 +33,8 @@ ENV \\\n     CC_x86_64_unknown_netbsd=x86_64-unknown-netbsd-gcc \\\n     CXX_x86_64_unknown_netbsd=x86_64-unknown-netbsd-g++\n \n-ENV RUST_CONFIGURE_ARGS \\\n-        --host=x86_64-unknown-netbsd,s390x-unknown-linux-gnu\n-ENV SCRIPT \\\n-      python2.7 ../x.py dist \\\n-        --host x86_64-unknown-netbsd \\\n-        --target x86_64-unknown-netbsd \\\n-        --host s390x-unknown-linux-gnu \\\n-        --target s390x-unknown-linux-gnu\n+ENV HOSTS=x86_64-unknown-netbsd\n+ENV HOSTS=$HOSTS,s390x-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "283a4aaab56f81652936672cd0fffc65e288dbed", "filename": "src/ci/docker/dist-x86-linux/Dockerfile", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,80 @@\n+FROM centos:5\n+\n+WORKDIR /build\n+\n+RUN yum upgrade -y && yum install -y \\\n+      curl \\\n+      bzip2 \\\n+      gcc \\\n+      make \\\n+      glibc-devel \\\n+      perl \\\n+      zlib-devel \\\n+      file \\\n+      xz \\\n+      which \\\n+      pkg-config \\\n+      wget \\\n+      autoconf \\\n+      gettext\n+\n+ENV PATH=/rustroot/bin:$PATH\n+ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n+WORKDIR /tmp\n+\n+# binutils < 2.22 has a bug where the 32-bit executables it generates\n+# immediately segfault in Rust, so we need to install our own binutils.\n+#\n+# See https://github.com/rust-lang/rust/issues/20440 for more info\n+COPY shared.sh build-binutils.sh /tmp/\n+RUN ./build-binutils.sh\n+\n+# Need a newer version of gcc than centos has to compile LLVM nowadays\n+COPY build-gcc.sh /tmp/\n+RUN ./build-gcc.sh\n+\n+# We need a build of openssl which supports SNI to download artifacts from\n+# static.rust-lang.org. This'll be used to link into libcurl below (and used\n+# later as well), so build a copy of OpenSSL with dynamic libraries into our\n+# generic root.\n+COPY build-openssl.sh /tmp/\n+RUN ./build-openssl.sh\n+\n+# The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n+# some https urls we have, so install a new version of libcurl + curl which is\n+# using the openssl we just built previously.\n+#\n+# Note that we also disable a bunch of optional features of curl that we don't\n+# really need.\n+COPY build-curl.sh /tmp/\n+RUN ./build-curl.sh\n+\n+# CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n+COPY build-python.sh /tmp/\n+RUN ./build-python.sh\n+\n+# Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n+# cloning, so download and build it here.\n+COPY build-git.sh /tmp/\n+RUN ./build-git.sh\n+\n+# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n+# only has 2.6.4, so build our own\n+COPY build-cmake.sh /tmp/\n+RUN ./build-cmake.sh\n+\n+RUN curl -Lo /rustroot/dumb-init \\\n+      https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n+      chmod +x /rustroot/dumb-init\n+ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n+\n+ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n+RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n+      xz --decompress | \\\n+      tar xf - -C /usr/local/bin --strip-components=1\n+\n+ENV HOSTS=i686-unknown-linux-gnu\n+ENV HOSTS=$HOSTS,x86_64-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "80aa1f2a0161308affc245daaf2952f973643918", "filename": "src/ci/docker/dist-x86-linux/build-binutils.sh", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-binutils.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,26 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+curl https://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2 | tar xfj -\n+\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-2.25.1/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf binutils-build\n+rm -rf binutils-2.25.1"}, {"sha": "82e46455cb0f0673fef2fe6442d25aa7c4b8d976", "filename": "src/ci/docker/dist-x86-linux/build-cmake.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-cmake.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cmake.org/files/v3.6/cmake-3.6.3.tar.gz | tar xzf -\n+\n+mkdir cmake-build\n+cd cmake-build\n+hide_output ../cmake-3.6.3/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf cmake-build\n+rm -rf cmake-3.6.3"}, {"sha": "b7d22755a571bab38aa4d85629fa69cbec041c24", "filename": "src/ci/docker/dist-x86-linux/build-curl.sh", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-curl.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,43 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=7.51.0\n+\n+curl http://cool.haxx.se/download/curl-$VERSION.tar.bz2 | tar xjf -\n+\n+mkdir curl-build\n+cd curl-build\n+hide_output ../curl-$VERSION/configure \\\n+      --prefix=/rustroot \\\n+      --with-ssl=/rustroot \\\n+      --disable-sspi \\\n+      --disable-gopher \\\n+      --disable-smtp \\\n+      --disable-smb \\\n+      --disable-imap \\\n+      --disable-pop3 \\\n+      --disable-tftp \\\n+      --disable-telnet \\\n+      --disable-manual \\\n+      --disable-dict \\\n+      --disable-rtsp \\\n+      --disable-ldaps \\\n+      --disable-ldap\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf curl-build\n+rm -rf curl-$VERSION\n+yum erase -y curl"}, {"sha": "06198eb0c97fcee1a823534cc0c99e3552b323c0", "filename": "src/ci/docker/dist-x86-linux/build-gcc.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-gcc.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+curl https://ftp.gnu.org/gnu/gcc/gcc-4.7.4/gcc-4.7.4.tar.bz2 | tar xjf -\n+cd gcc-4.7.4\n+./contrib/download_prerequisites\n+mkdir ../gcc-build\n+cd ../gcc-build\n+hide_output ../gcc-4.7.4/configure \\\n+    --prefix=/rustroot \\\n+    --enable-languages=c,c++\n+hide_output make -j10\n+hide_output make install\n+ln -nsf gcc /rustroot/bin/cc\n+\n+cd ..\n+rm -rf gcc-build\n+rm -rf gcc-4.7.4\n+yum erase -y gcc binutils"}, {"sha": "92fa66b496d933648a0e49c3f83b6565246188a7", "filename": "src/ci/docker/dist-x86-linux/build-git.sh", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-git.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz | tar xzf -\n+\n+cd git-2.10.0\n+make configure\n+hide_output ./configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf git-2.10.0"}, {"sha": "64b1abf82a8277d8ebc1a10c54b40fd7be583bd4", "filename": "src/ci/docker/dist-x86-linux/build-openssl.sh", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-openssl.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,27 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=1.0.2j\n+\n+curl https://www.openssl.org/source/openssl-$VERSION.tar.gz | tar xzf -\n+\n+cd openssl-$VERSION\n+hide_output ./config --prefix=/rustroot shared -fPIC\n+hide_output make -j10\n+hide_output make install\n+cd ..\n+rm -rf openssl-$VERSION\n+\n+# Make the system cert collection available to the new install.\n+ln -nsf /etc/pki/tls/cert.pem /rustroot/ssl/"}, {"sha": "a7a450f3c8de772403b481b96c94b03d5ec2325e", "filename": "src/ci/docker/dist-x86-linux/build-python.sh", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-python.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz | \\\n+  tar xzf -\n+\n+mkdir python-build\n+cd python-build\n+\n+# Gotta do some hackery to tell python about our custom OpenSSL build, but other\n+# than that fairly normal.\n+CFLAGS='-I /rustroot/include' LDFLAGS='-L /rustroot/lib -L /rustroot/lib64' \\\n+    hide_output ../Python-2.7.12/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf python-build\n+rm -rf Python-2.7.12"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-x86-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fshared.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "84e12eb6c3e11bd82e5004063b4dd9f3d968a45a", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,41 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  lib32stdc++6\n+\n+ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n+RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n+      tar xJf - -C /usr/local/bin --strip-components=1\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+WORKDIR /tmp\n+COPY build-emscripten.sh /tmp/\n+RUN ./build-emscripten.sh\n+ENV PATH=$PATH:/tmp/emsdk_portable\n+ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.1/build_tag-e1.37.1_32/bin\n+ENV PATH=$PATH:/tmp/emsdk_portable/node/4.1.1_32bit/bin\n+ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.1\n+ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.1\n+\n+ENV RUST_CONFIGURE_ARGS --target=asmjs-unknown-emscripten\n+\n+# Run `emcc` first as it's got a prompt and doesn't actually do anything, after\n+# that's done with do the real build.\n+ENV SCRIPT emcc && \\\n+      python2.7 ../x.py test --target asmjs-unknown-emscripten\n+"}, {"sha": "88bf583007ce53f296b5a2405dac1174025d94a9", "filename": "src/ci/docker/emscripten/build-emscripten.sh", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,36 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm /tmp/build.log\n+  set -x\n+}\n+\n+curl https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n+      tar xzf -\n+source emsdk_portable/emsdk_env.sh\n+hide_output emsdk update\n+hide_output emsdk install --build=Release sdk-tag-1.37.1-32bit\n+hide_output emsdk activate --build=Release sdk-tag-1.37.1-32bit"}, {"sha": "7f95e17c7097acc4ebc93ab1b87a6eda7e2af291", "filename": "src/ci/docker/linux-tested-targets/Dockerfile", "status": "renamed", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,7 +1,7 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n+  g++-multilib \\\n   make \\\n   file \\\n   curl \\\n@@ -11,10 +11,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   xz-utils \\\n   sudo \\\n-  gdb\n+  gdb \\\n+  patch\n \n WORKDIR /build/\n-COPY build-musl.sh /build/\n+COPY musl-libunwind-patch.patch build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,9 +28,17 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n       tar xJf - -C /usr/local/bin --strip-components=1\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=x86_64-unknown-linux-musl \\\n-      --musl-root-x86_64=/musl-x86_64\n-ENV PATH=$PATH:/musl-x86_64/bin\n+      --target=x86_64-unknown-linux-musl,i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n+      --musl-root-x86_64=/musl-x86_64 \\\n+      --musl-root-i686=/musl-i686\n+\n+# FIXME should also test i686-unknown-linux-musl\n ENV SCRIPT \\\n-      python2.7 ../x.py test --target x86_64-unknown-linux-musl && \\\n-      python2.7 ../x.py dist --target x86_64-unknown-linux-musl\n+      python2.7 ../x.py test \\\n+          --target x86_64-unknown-linux-musl \\\n+          --target i586-unknown-linux-gnu \\\n+          && \\\n+      python2.7 ../x.py dist \\\n+          --target x86_64-unknown-linux-musl \\\n+          --target i686-unknown-linux-musl \\\n+          --target i586-unknown-linux-gnu", "previous_filename": "src/ci/docker/x86_64-musl/Dockerfile"}, {"sha": "2382605f9bd368a39530238f6d372a94e606c27e", "filename": "src/ci/docker/linux-tested-targets/build-musl.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,64 @@\n+#!/bin/sh\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+export CFLAGS=\"-fPIC\"\n+MUSL=musl-1.1.14\n+curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n+cd $MUSL\n+./configure --prefix=/musl-x86_64 --disable-shared\n+make -j10\n+make install\n+make clean\n+# for i686\n+CFLAGS=\"$CFLAGS -m32\" ./configure --prefix=/musl-i686 --disable-shared --target=i686\n+make -j10\n+make install\n+cd ..\n+\n+# To build MUSL we're going to need a libunwind lying around, so acquire that\n+# here and build it.\n+curl -L https://github.com/llvm-mirror/llvm/archive/release_37.tar.gz | tar xzf -\n+curl -L https://github.com/llvm-mirror/libunwind/archive/release_37.tar.gz | tar xzf -\n+\n+# Whoa what's this mysterious patch we're applying to libunwind! Why are we\n+# swapping the values of ESP/EBP in libunwind?!\n+#\n+# Discovered in #35599 it turns out that the vanilla build of libunwind is not\n+# suitable for unwinding 32-bit musl. After some investigation it ended up\n+# looking like the register values for ESP/EBP were indeed incorrect (swapped)\n+# in the source. Similar commits in libunwind (r280099 and r282589) have noticed\n+# this for other platforms, and we just need to realize it for musl linux as\n+# well.\n+#\n+# More technical info can be found at #35599\n+cd libunwind-release_37\n+patch -Np1 < /build/musl-libunwind-patch.patch\n+cd ..\n+\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_37 -DLLVM_PATH=/build/llvm-release_37 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0\n+make -j10\n+cp lib/libunwind.a /musl-x86_64/lib\n+\n+# (Note: the next cmake call doesn't fully override the previous cached one, so remove the cached\n+# configuration manually. IOW, if don't do this or call make clean we'll end up building libunwind\n+# for x86_64 again)\n+rm -rf *\n+# for i686\n+CFLAGS=\"$CFLAGS -m32 -g\" CXXFLAGS=\"$CXXFLAGS -m32 -g\" cmake ../libunwind-release_37 \\\n+          -DLLVM_PATH=/build/llvm-release_37 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0\n+make -j10\n+cp lib/libunwind.a /musl-i686/lib"}, {"sha": "99cd685b72d1718aaf6933da48fec15b21c91591", "filename": "src/ci/docker/linux-tested-targets/musl-libunwind-patch.patch", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,15 @@\n+diff --git a/include/libunwind.h b/include/libunwind.h\n+index c5b9633..1360eb2 100644\n+--- a/include/libunwind.h\n++++ b/include/libunwind.h\n+@@ -151,8 +151,8 @@ enum {\n+   UNW_X86_ECX = 1,\n+   UNW_X86_EDX = 2,\n+   UNW_X86_EBX = 3,\n+-  UNW_X86_EBP = 4,\n+-  UNW_X86_ESP = 5,\n++  UNW_X86_ESP = 4,\n++  UNW_X86_EBP = 5,\n+   UNW_X86_ESI = 6,\n+   UNW_X86_EDI = 7\n+ };"}, {"sha": "0ddab8c4160f42d5387ab76a7eb5bcfda239ded1", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -51,5 +51,6 @@ exec docker \\\n   --env DEPLOY=$DEPLOY \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --rm \\\n   rust-ci \\\n   /checkout/src/ci/run.sh"}, {"sha": "2bfbd646b75c8e050d934bd8bb06ed291ee7f9c8", "filename": "src/ci/docker/x86_64-musl/build-musl.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a52da95ced667fe8ff490f73c0b041a4f926c041/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a52da95ced667fe8ff490f73c0b041a4f926c041/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh?ref=a52da95ced667fe8ff490f73c0b041a4f926c041", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-export CFLAGS=\"-fPIC\"\n-MUSL=musl-1.1.14\n-curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n-cd $MUSL\n-./configure --prefix=/musl-x86_64 --disable-shared\n-make -j10\n-make install\n-make clean\n-cd ..\n-\n-# To build MUSL we're going to need a libunwind lying around, so acquire that\n-# here and build it.\n-curl -L https://github.com/llvm-mirror/llvm/archive/release_37.tar.gz | tar xzf -\n-curl -L https://github.com/llvm-mirror/libunwind/archive/release_37.tar.gz | tar xzf -\n-mkdir libunwind-build\n-cd libunwind-build\n-cmake ../libunwind-release_37 -DLLVM_PATH=/build/llvm-release_37 \\\n-          -DLIBUNWIND_ENABLE_SHARED=0\n-make -j10\n-cp lib/libunwind.a /musl-x86_64/lib"}, {"sha": "3a2cc47df79bf1cb5da742df04951ee221fd29b6", "filename": "src/ci/run.sh", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -22,19 +22,6 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n \n-# FIXME: we shouldn't forcibly enable debug assertions and llvm assertions when\n-#        `DEPLOY` is set because then we'll be shipping slower binaries. We\n-#        should only set these for auto branches, but we need to make sure that\n-#        if we disable this all the relevant platforms are still tested\n-#        somewhere with debug and llvm assertions.\n-RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-debug-assertions\"\n-\n-# In general we always want to run tests with LLVM assertions enabled, but not\n-# all platforms currently support that, so we have an option to disable.\n-if [ \"$NO_LLVM_ASSERTIONS\" = \"\" ]; then\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-assertions\"\n-fi\n-\n # If we're deploying artifacts then we set the release channel, otherwise if\n # we're not deploying then we want to be sure to enable all assertions becauase\n # we'll be running tests\n@@ -43,10 +30,19 @@ fi\n #        either automatically or manually.\n if [ \"$DEPLOY\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=nightly\"\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\"\n   fi\n+else\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-debug-assertions\"\n+\n+  # In general we always want to run tests with LLVM assertions enabled, but not\n+  # all platforms currently support that, so we have an option to disable.\n+  if [ \"$NO_LLVM_ASSERTIONS\" = \"\" ]; then\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-assertions\"\n+  fi\n fi\n \n # We want to enable usage of the `src/vendor` dir as much as possible, but not\n@@ -63,7 +59,7 @@ $SRC/configure $RUST_CONFIGURE_ARGS\n if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n     ncpus=$(sysctl -n hw.ncpu)\n else\n-    ncpus=$(nproc)\n+    ncpus=$(grep processor /proc/cpuinfo | wc -l)\n fi\n \n if [ ! -z \"$SCRIPT\" ]; then"}, {"sha": "11bfb0dcf85f7aa92abd30524bb1e42e18d108c6", "filename": "src/jemalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1 +1 @@\n-Subproject commit e058ca661692a8d01f8cf9d35939dfe3105ce968\n+Subproject commit 11bfb0dcf85f7aa92abd30524bb1e42e18d108c6"}, {"sha": "c5b904c8a2f0e3fac57ce8afb220ea04700a3910", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1023,8 +1023,8 @@ impl<T> Vec<T> {\n     /// Create a draining iterator that removes the specified range in the vector\n     /// and yields the removed items.\n     ///\n-    /// Note 1: The element range is removed even if the iterator is not\n-    /// consumed until the end.\n+    /// Note 1: The element range is removed even if the iterator is only\n+    /// partially consumed or not consumed at all.\n     ///\n     /// Note 2: It is unspecified how many elements are removed from the vector,\n     /// if the `Drain` value is leaked."}, {"sha": "b9421d779b590eba0d053bf264c174145f7c3784", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -107,7 +107,6 @@ fn main() {\n                      \"apple_versioning.c\",\n                      \"ashldi3.c\",\n                      \"ashrdi3.c\",\n-                     \"clear_cache.c\",\n                      \"clzdi2.c\",\n                      \"clzsi2.c\",\n                      \"cmpdi2.c\","}, {"sha": "ab5962779feebca424f0ad1d3045536cc98ad7d8", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -39,9 +39,9 @@ extern crate syntax;\n use std::fmt;\n use std::str::FromStr;\n \n-use syntax::ast;\n+use syntax::errors::DiagnosticBuilder;\n use syntax::parse;\n-use syntax::ptr::P;\n+use syntax::tokenstream::TokenStream as TokenStream_;\n \n /// The main type provided by this crate, representing an abstract stream of\n /// tokens.\n@@ -54,7 +54,7 @@ use syntax::ptr::P;\n /// time!\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n pub struct TokenStream {\n-    inner: Vec<P<ast::Item>>,\n+    inner: TokenStream_,\n }\n \n /// Error returned from `TokenStream::from_str`.\n@@ -77,17 +77,41 @@ pub struct LexError {\n #[doc(hidden)]\n pub mod __internal {\n     use std::cell::Cell;\n+    use std::rc::Rc;\n \n     use syntax::ast;\n     use syntax::ptr::P;\n-    use syntax::parse::ParseSess;\n-    use super::TokenStream;\n+    use syntax::parse::{self, token, ParseSess};\n+    use syntax::tokenstream::TokenStream as TokenStream_;\n+\n+    use super::{TokenStream, LexError};\n \n     pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n-        TokenStream { inner: vec![item] }\n+        TokenStream { inner: TokenStream_::from_tokens(vec![\n+            token::Interpolated(Rc::new(token::NtItem(item)))\n+        ])}\n+    }\n+\n+    pub fn token_stream_wrap(inner: TokenStream_) -> TokenStream {\n+        TokenStream {\n+            inner: inner\n+        }\n+    }\n+\n+    pub fn token_stream_parse_items(stream: TokenStream) -> Result<Vec<P<ast::Item>>, LexError> {\n+        with_parse_sess(move |sess| {\n+            let mut parser = parse::new_parser_from_ts(sess, stream.inner);\n+            let mut items = Vec::new();\n+\n+            while let Some(item) = try!(parser.parse_item().map_err(super::parse_to_lex_err)) {\n+                items.push(item)\n+            }\n+\n+            Ok(items)\n+        })\n     }\n \n-    pub fn token_stream_items(stream: TokenStream) -> Vec<P<ast::Item>> {\n+    pub fn token_stream_inner(stream: TokenStream) -> TokenStream_ {\n         stream.inner\n     }\n \n@@ -96,6 +120,10 @@ pub mod __internal {\n                                   trait_name: &str,\n                                   expand: fn(TokenStream) -> TokenStream,\n                                   attributes: &[&'static str]);\n+\n+        fn register_attr_proc_macro(&mut self,\n+                                    name: &str,\n+                                    expand: fn(TokenStream, TokenStream) -> TokenStream);\n     }\n \n     // Emulate scoped_thread_local!() here essentially\n@@ -125,11 +153,17 @@ pub mod __internal {\n         where F: FnOnce(&ParseSess) -> R\n     {\n         let p = CURRENT_SESS.with(|p| p.get());\n-        assert!(!p.is_null());\n+        assert!(!p.is_null(), \"proc_macro::__internal::with_parse_sess() called \\\n+                               before set_parse_sess()!\");\n         f(unsafe { &*p })\n     }\n }\n \n+fn parse_to_lex_err(mut err: DiagnosticBuilder) -> LexError {\n+    err.cancel();\n+    LexError { _inner: () }\n+}\n+\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl FromStr for TokenStream {\n     type Err = LexError;\n@@ -138,30 +172,17 @@ impl FromStr for TokenStream {\n         __internal::with_parse_sess(|sess| {\n             let src = src.to_string();\n             let name = \"<proc-macro source code>\".to_string();\n-            let mut parser = parse::new_parser_from_source_str(sess, name, src);\n-            let mut ret = TokenStream { inner: Vec::new() };\n-            loop {\n-                match parser.parse_item() {\n-                    Ok(Some(item)) => ret.inner.push(item),\n-                    Ok(None) => return Ok(ret),\n-                    Err(mut err) => {\n-                        err.cancel();\n-                        return Err(LexError { _inner: () })\n-                    }\n-                }\n-            }\n+            let tts = try!(parse::parse_tts_from_source_str(name, src, sess)\n+                .map_err(parse_to_lex_err));\n+\n+            Ok(__internal::token_stream_wrap(TokenStream_::from_tts(tts)))\n         })\n     }\n }\n \n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        for item in self.inner.iter() {\n-            let item = syntax::print::pprust::item_to_string(item);\n-            try!(f.write_str(&item));\n-            try!(f.write_str(\"\\n\"));\n-        }\n-        Ok(())\n+        self.inner.fmt(f)\n     }\n }"}, {"sha": "58c677fb507fe5346be4eabac35a319ffadb2d45", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -13,6 +13,7 @@ pub use self::AnnNode::*;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::codemap::{CodeMap, Spanned};\n+use syntax::parse::ParseSess;\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, break_offset, word, space, hardbreak};\n use syntax::print::pp::{Breaks, eof};\n@@ -21,7 +22,6 @@ use syntax::print::pprust::{self as ast_pp, PrintState};\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::{self, BytePos};\n-use errors;\n \n use hir;\n use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n@@ -116,16 +116,15 @@ pub const default_columns: usize = 78;\n /// it can scan the input text for comments and literals to\n /// copy forward.\n pub fn print_crate<'a>(cm: &'a CodeMap,\n-                       span_diagnostic: &errors::Handler,\n+                       sess: &ParseSess,\n                        krate: &hir::Crate,\n                        filename: String,\n                        input: &mut Read,\n                        out: Box<Write + 'a>,\n                        ann: &'a PpAnn,\n                        is_expanded: bool)\n                        -> io::Result<()> {\n-    let mut s = State::new_from_input(cm, span_diagnostic, filename, input,\n-                                      out, ann, is_expanded);\n+    let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n@@ -137,16 +136,14 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n \n impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a CodeMap,\n-                          span_diagnostic: &errors::Handler,\n+                          sess: &ParseSess,\n                           filename: String,\n                           input: &mut Read,\n                           out: Box<Write + 'a>,\n                           ann: &'a PpAnn,\n                           is_expanded: bool)\n                           -> State<'a> {\n-        let (cmnts, lits) = comments::gather_comments_and_literals(span_diagnostic,\n-                                                                   filename,\n-                                                                   input);\n+        let (cmnts, lits) = comments::gather_comments_and_literals(sess, filename, input);\n \n         State::new(cm,\n                    out,"}, {"sha": "b0db3b75029fb16148bbfddaec9bf1fd08136d0f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -206,7 +206,7 @@ declare_lint! {\n \n declare_lint! {\n     pub EXTRA_REQUIREMENT_IN_IMPL,\n-    Warn,\n+    Deny,\n     \"detects extra requirements in impls that were erroneously allowed\"\n }\n "}, {"sha": "7d8f7fcefe6391f697bb6456ab588a78a0bba5f1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -25,6 +25,7 @@ use lint;\n use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n+use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n@@ -1259,7 +1260,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n \n         let meta_item = panictry!(parser.parse_meta_item());\n \n-        if !parser.reader.is_eof() {\n+        if parser.token != token::Eof {\n             early_error(ErrorOutputType::default(), &format!(\"invalid --cfg argument: {}\", s))\n         } else if meta_item.is_meta_item_list() {\n             let msg ="}, {"sha": "83dec4b0b77ab3967efcb6b32292ec98d05d19bb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -681,6 +681,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n             should_test: sess.opts.test,\n             ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n+\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n         let err_count = ecx.parse_sess.span_diagnostic.err_count();\n \n@@ -740,17 +741,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n          \"checking for inline asm in case the target doesn't support it\",\n          || no_asm::check_crate(sess, &krate));\n \n-    // Needs to go *after* expansion to be able to check the results of macro expansion.\n-    time(time_passes, \"complete gated feature checking\", || {\n-        sess.track_errors(|| {\n-            syntax::feature_gate::check_crate(&krate,\n-                                              &sess.parse_sess,\n-                                              &sess.features.borrow(),\n-                                              &attributes,\n-                                              sess.opts.unstable_features);\n-        })\n-    })?;\n-\n     time(sess.time_passes(),\n          \"early lint checks\",\n          || lint::check_ast_crate(sess, &krate));\n@@ -768,6 +758,17 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         Ok(())\n     })?;\n \n+    // Needs to go *after* expansion to be able to check the results of macro expansion.\n+    time(time_passes, \"complete gated feature checking\", || {\n+        sess.track_errors(|| {\n+            syntax::feature_gate::check_crate(&krate,\n+                                              &sess.parse_sess,\n+                                              &sess.features.borrow(),\n+                                              &attributes,\n+                                              sess.opts.unstable_features);\n+        })\n+    })?;\n+\n     // Lower ast -> hir.\n     let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n         let hir_crate = lower_crate(sess, &krate, &mut resolver);"}, {"sha": "48eb6f68564f07bb35f761ec3efe4c87618ff3dd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -82,6 +82,7 @@ use rustc::util::common::time;\n \n use serialize::json::ToJson;\n \n+use std::any::Any;\n use std::cmp::max;\n use std::cmp::Ordering::Equal;\n use std::default::Default;\n@@ -1018,15 +1019,34 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n     }\n }\n \n+/// Runs `f` in a suitable thread for running `rustc`; returns a\n+/// `Result` with either the return value of `f` or -- if a panic\n+/// occurs -- the panic value.\n+pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<Any + Send>>\n+    where F: FnOnce() -> R + Send + 'static,\n+          R: Send + 'static,\n+{\n+    // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n+    const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n+\n+    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+\n+    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n+    // then *don't* set it explicitly.\n+    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n+        cfg = cfg.stack_size(STACK_SIZE);\n+    }\n+\n+    let thread = cfg.spawn(f);\n+    thread.unwrap().join()\n+}\n+\n /// Run a procedure which will detect panics in the compiler and print nicer\n /// error messages rather than just failing the test.\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n-    // Temporarily have stack size set to 16MB to deal with nom-using crates failing\n-    const STACK_SIZE: usize = 16 * 1024 * 1024; // 16MB\n-\n     struct Sink(Arc<Mutex<Vec<u8>>>);\n     impl Write for Sink {\n         fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n@@ -1040,20 +1060,12 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n     let data = Arc::new(Mutex::new(Vec::new()));\n     let err = Sink(data.clone());\n \n-    let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n-\n-    // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-    // then *don't* set it explicitly.\n-    if env::var_os(\"RUST_MIN_STACK\").is_none() {\n-        cfg = cfg.stack_size(STACK_SIZE);\n-    }\n-\n-    let thread = cfg.spawn(move || {\n-         io::set_panic(Some(box err));\n-         f()\n-     });\n+    let result = in_rustc_thread(move || {\n+        io::set_panic(Some(box err));\n+        f()\n+    });\n \n-     if let Err(value) = thread.unwrap().join() {\n+    if let Err(value) = result {\n         // Thread panicked without emitting a fatal diagnostic\n         if !value.is::<errors::FatalError>() {\n             let emitter ="}, {"sha": "3c8a529bdaee875b980094ca3cacb6a9b6074123", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -838,7 +838,7 @@ pub fn print_after_parsing(sess: &Session,\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n                 pprust::print_crate(sess.codemap(),\n-                                    sess.diagnostic(),\n+                                    &sess.parse_sess,\n                                     krate,\n                                     src_name.to_string(),\n                                     &mut rdr,\n@@ -896,7 +896,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.codemap(),\n-                                        sess.diagnostic(),\n+                                        &sess.parse_sess,\n                                         krate,\n                                         src_name.to_string(),\n                                         &mut rdr,\n@@ -920,7 +920,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust_hir::print_crate(sess.codemap(),\n-                                            sess.diagnostic(),\n+                                            &sess.parse_sess,\n                                             krate,\n                                             src_name.to_string(),\n                                             &mut rdr,\n@@ -945,7 +945,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                     let sess = annotation.sess();\n                     let ast_map = annotation.ast_map().expect(\"--unpretty missing HIR map\");\n                     let mut pp_state = pprust_hir::State::new_from_input(sess.codemap(),\n-                                                                         sess.diagnostic(),\n+                                                                         &sess.parse_sess,\n                                                                          src_name.to_string(),\n                                                                          &mut rdr,\n                                                                          box out,"}, {"sha": "161331b1728bcd0deb0973b3a52ff1d45e6faec1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -578,6 +578,7 @@ impl<'a> CrateLoader<'a> {\n         use proc_macro::__internal::Registry;\n         use rustc_back::dynamic_lib::DynamicLibrary;\n         use syntax_ext::deriving::custom::CustomDerive;\n+        use syntax_ext::proc_macro_impl::AttrProcMacro;\n \n         let path = match dylib {\n             Some(dylib) => dylib,\n@@ -613,6 +614,15 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 self.0.push((Symbol::intern(trait_name), Rc::new(derive)));\n             }\n+\n+            fn register_attr_proc_macro(&mut self,\n+                                        name: &str,\n+                                        expand: fn(TokenStream, TokenStream) -> TokenStream) {\n+                let expand = SyntaxExtension::AttrProcMacro(\n+                    Box::new(AttrProcMacro { inner: expand })\n+                );\n+                self.0.push((Symbol::intern(name), Rc::new(expand)));\n+            }\n         }\n \n         let mut my_registrar = MyRegistrar(Vec::new());"}, {"sha": "f6107bc1359153188aad49a5ccd1cc7225860910", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -29,7 +29,7 @@ use rustc_back::PanicStrategy;\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::parse::new_parser_from_source_str;\n+use syntax::parse::filemap_to_tts;\n use syntax::symbol::Symbol;\n use syntax_pos::{mk_sp, Span};\n use rustc::hir::svh::Svh;\n@@ -399,19 +399,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let (name, def) = data.get_macro(id.index);\n         let source_name = format!(\"<{} macros>\", name);\n \n-        // NB: Don't use parse_tts_from_source_str because it parses with quote_depth > 0.\n-        let mut parser = new_parser_from_source_str(&sess.parse_sess, source_name, def.body);\n-\n-        let lo = parser.span.lo;\n-        let body = match parser.parse_all_token_trees() {\n-            Ok(body) => body,\n-            Err(mut err) => {\n-                err.emit();\n-                sess.abort_if_errors();\n-                unreachable!();\n-            }\n-        };\n-        let local_span = mk_sp(lo, parser.prev_span.hi);\n+        let filemap = sess.parse_sess.codemap().new_filemap(source_name, None, def.body);\n+        let local_span = mk_sp(filemap.start_pos, filemap.end_pos);\n+        let body = filemap_to_tts(&sess.parse_sess, filemap);\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index);"}, {"sha": "5e9856878865abd05cddcbaa2b2b65db0ad3e4f7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -143,7 +143,7 @@ impl<'a> Resolver<'a> {\n                 let is_prelude = attr::contains_name(&item.attrs, \"prelude_import\");\n \n                 match view_path.node {\n-                    ViewPathSimple(binding, ref full_path) => {\n+                    ViewPathSimple(mut binding, ref full_path) => {\n                         let mut source = full_path.segments.last().unwrap().identifier;\n                         let source_name = source.name;\n                         if source_name == \"mod\" || source_name == \"self\" {\n@@ -157,6 +157,9 @@ impl<'a> Resolver<'a> {\n                                 ModuleKind::Block(..) => unreachable!(),\n                             };\n                             source.name = crate_name;\n+                            if binding.name == \"$crate\" {\n+                                binding.name = crate_name;\n+                            }\n \n                             self.session.struct_span_warn(item.span, \"`$crate` may not be imported\")\n                                 .note(\"`use $crate;` was erroneously allowed and \\"}, {"sha": "971b91ea313f37011efd99752058aa72db000768", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -61,12 +61,13 @@ use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::DiagnosticBuilder;\n \n use std::cell::{Cell, RefCell};\n+use std::cmp;\n use std::fmt;\n use std::mem::replace;\n use std::rc::Rc;\n@@ -1123,6 +1124,12 @@ pub struct Resolver<'a> {\n \n     // Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Name, Span>,\n+\n+    // If `#![feature(proc_macro)]` is set\n+    proc_macro_enabled: bool,\n+\n+    // A set of procedural macros imported by `#[macro_use]` that have already been warned about\n+    warned_proc_macros: FxHashSet<Name>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1227,6 +1234,8 @@ impl<'a> Resolver<'a> {\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n \n+        let features = session.features.borrow();\n+\n         Resolver {\n             session: session,\n \n@@ -1284,7 +1293,9 @@ impl<'a> Resolver<'a> {\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             }),\n-            use_extern_macros: session.features.borrow().use_extern_macros,\n+\n+            // `#![feature(proc_macro)]` implies `#[feature(extern_macros)]`\n+            use_extern_macros: features.use_extern_macros || features.proc_macro,\n \n             exported_macros: Vec::new(),\n             crate_loader: crate_loader,\n@@ -1296,6 +1307,8 @@ impl<'a> Resolver<'a> {\n             invocations: invocations,\n             name_already_seen: FxHashMap(),\n             whitelisted_legacy_custom_derives: Vec::new(),\n+            proc_macro_enabled: features.proc_macro,\n+            warned_proc_macros: FxHashSet(),\n         }\n     }\n \n@@ -1525,6 +1538,8 @@ impl<'a> Resolver<'a> {\n \n         debug!(\"(resolving item) resolving {}\", name);\n \n+        self.check_proc_macro_attrs(&item.attrs);\n+\n         match item.node {\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n@@ -1554,6 +1569,8 @@ impl<'a> Resolver<'a> {\n                         walk_list!(this, visit_ty_param_bound, bounds);\n \n                         for trait_item in trait_items {\n+                            this.check_proc_macro_attrs(&trait_item.attrs);\n+\n                             match trait_item.node {\n                                 TraitItemKind::Const(_, ref default) => {\n                                     // Only impose the restrictions of\n@@ -1738,6 +1755,7 @@ impl<'a> Resolver<'a> {\n                 this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n                     this.with_current_self_type(self_type, |this| {\n                         for impl_item in impl_items {\n+                            this.check_proc_macro_attrs(&impl_item.attrs);\n                             this.resolve_visibility(&impl_item.vis);\n                             match impl_item.node {\n                                 ImplItemKind::Const(..) => {\n@@ -3184,6 +3202,31 @@ impl<'a> Resolver<'a> {\n         let msg = \"`self` no longer imports values\".to_string();\n         self.session.add_lint(lint::builtin::LEGACY_IMPORTS, id, span, msg);\n     }\n+\n+    fn check_proc_macro_attrs(&mut self, attrs: &[ast::Attribute]) {\n+        if self.proc_macro_enabled { return; }\n+\n+        for attr in attrs {\n+            let maybe_binding = self.builtin_macros.get(&attr.name()).cloned().or_else(|| {\n+                let ident = Ident::with_empty_ctxt(attr.name());\n+                self.resolve_lexical_macro_path_segment(ident, MacroNS, None).ok()\n+            });\n+\n+            if let Some(binding) = maybe_binding {\n+                if let SyntaxExtension::AttrProcMacro(..) = *binding.get_macro(self) {\n+                    attr::mark_known(attr);\n+\n+                    let msg = \"attribute procedural macros are experimental\";\n+                    let feature = \"proc_macro\";\n+\n+                    feature_err(&self.session.parse_sess, feature,\n+                                attr.span, GateIssue::Language, msg)\n+                        .span_note(binding.span, \"procedural macro imported here\")\n+                        .emit();\n+                }\n+            }\n+        }\n+    }\n }\n \n fn is_struct_like(def: Def) -> bool {\n@@ -3224,7 +3267,7 @@ fn show_candidates(session: &mut DiagnosticBuilder,\n                    better: bool) {\n     // don't show more than MAX_CANDIDATES results, so\n     // we're consistent with the trait suggestions\n-    const MAX_CANDIDATES: usize = 5;\n+    const MAX_CANDIDATES: usize = 4;\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -3237,21 +3280,21 @@ fn show_candidates(session: &mut DiagnosticBuilder,\n         1 => \" is found in another module, you can import it\",\n         _ => \"s are found in other modules, you can import them\",\n     };\n-    session.help(&format!(\"possible {}candidate{} into scope:\", better, msg_diff));\n-\n-    let count = path_strings.len() as isize - MAX_CANDIDATES as isize + 1;\n-    for (idx, path_string) in path_strings.iter().enumerate() {\n-        if idx == MAX_CANDIDATES - 1 && count > 1 {\n-            session.help(\n-                &format!(\"  and {} other candidates\", count).to_string(),\n-            );\n-            break;\n-        } else {\n-            session.help(\n-                &format!(\"  `use {};`\", path_string).to_string(),\n-            );\n-        }\n-    }\n+\n+    let end = cmp::min(MAX_CANDIDATES, path_strings.len());\n+    session.help(&format!(\"possible {}candidate{} into scope:{}{}\",\n+                          better,\n+                          msg_diff,\n+                          &path_strings[0..end].iter().map(|candidate| {\n+                              format!(\"\\n  `use {};`\", candidate)\n+                          }).collect::<String>(),\n+                          if path_strings.len() > MAX_CANDIDATES {\n+                              format!(\"\\nand {} other candidates\",\n+                                      path_strings.len() - MAX_CANDIDATES)\n+                          } else {\n+                              \"\".to_owned()\n+                          }\n+                          ));\n }\n \n /// A somewhat inefficient routine to obtain the name of a module."}, {"sha": "9b7d6f33a7f3b45e90eb0ea16e33ecd0bb0d6f32", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -27,7 +27,7 @@ use syntax::ext::base::{NormalTT, Resolver as SyntaxResolver, SyntaxExtension};\n use syntax::ext::expand::{Expansion, mark_tts};\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n+use syntax::feature_gate::{emit_feature_err, GateIssue, is_builtin_attr};\n use syntax::fold::{self, Folder};\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n@@ -183,6 +183,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 },\n                 None => {}\n             }\n+\n+            if self.proc_macro_enabled && !is_builtin_attr(&attrs[i]) {\n+                return Some(attrs.remove(i));\n+            }\n         }\n         None\n     }\n@@ -373,6 +377,10 @@ impl<'a> Resolver<'a> {\n             let resolution = self.resolve_lexical_macro_path_segment(ident, MacroNS, Some(span));\n             let (legacy_resolution, resolution) = match (legacy_resolution, resolution) {\n                 (Some(legacy_resolution), Ok(resolution)) => (legacy_resolution, resolution),\n+                (Some(MacroBinding::Modern(binding)), Err(_)) => {\n+                    self.err_if_macro_use_proc_macro(ident.name, span, binding);\n+                    continue\n+                },\n                 _ => continue,\n             };\n             let (legacy_span, participle) = match legacy_resolution {\n@@ -469,4 +477,37 @@ impl<'a> Resolver<'a> {\n             self.exported_macros.push(def);\n         }\n     }\n+\n+    /// Error if `ext` is a Macros 1.1 procedural macro being imported by `#[macro_use]`\n+    fn err_if_macro_use_proc_macro(&mut self, name: Name, use_span: Span,\n+                                   binding: &NameBinding<'a>) {\n+        use self::SyntaxExtension::*;\n+\n+        let krate = binding.def().def_id().krate;\n+\n+        // Plugin-based syntax extensions are exempt from this check\n+        if krate == BUILTIN_MACROS_CRATE { return; }\n+\n+        let ext = binding.get_macro(self);\n+\n+        match *ext {\n+            // If `ext` is a procedural macro, check if we've already warned about it\n+            AttrProcMacro(_) | ProcMacro(_) => if !self.warned_proc_macros.insert(name) { return; },\n+            _ => return,\n+        }\n+\n+        let warn_msg = match *ext {\n+            AttrProcMacro(_) => \"attribute procedural macros cannot be \\\n+                                 imported with `#[macro_use]`\",\n+            ProcMacro(_) => \"procedural macros cannot be imported with `#[macro_use]`\",\n+            _ => return,\n+        };\n+\n+        let crate_name = self.session.cstore.crate_name(krate);\n+\n+        self.session.struct_span_err(use_span, warn_msg)\n+            .help(&format!(\"instead, import the procedural macro like any other item: \\\n+                             `use {}::{};`\", crate_name, name))\n+            .emit();\n+    }\n }"}, {"sha": "89525b27ed36af7d5f50d4e1b1b6c152a3fd7c2b", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -17,9 +17,9 @@ use std::env;\n use std::path::Path;\n \n use syntax::ast;\n-use syntax::parse::lexer::{self, Reader, StringReader};\n+use syntax::parse::filemap_to_tts;\n+use syntax::parse::lexer::{self, StringReader};\n use syntax::parse::token::{self, Token};\n-use syntax::parse::parser::Parser;\n use syntax::symbol::keywords;\n use syntax::tokenstream::TokenTree;\n use syntax_pos::*;\n@@ -85,14 +85,13 @@ impl<'a> SpanUtils<'a> {\n         let filemap = self.sess\n                           .codemap()\n                           .new_filemap(String::from(\"<anon-dxr>\"), None, self.snippet(span));\n-        let s = self.sess;\n-        lexer::StringReader::new(s.diagnostic(), filemap)\n+        lexer::StringReader::new(&self.sess.parse_sess, filemap)\n     }\n \n     fn span_to_tts(&self, span: Span) -> Vec<TokenTree> {\n-        let srdr = self.retokenise_span(span);\n-        let mut p = Parser::new(&self.sess.parse_sess, Box::new(srdr), None, false);\n-        p.parse_all_token_trees().expect(\"Couldn't re-parse span\")\n+        let filename = String::from(\"<anon-dxr>\");\n+        let filemap = self.sess.codemap().new_filemap(filename, None, self.snippet(span));\n+        filemap_to_tts(&self.sess.parse_sess, filemap)\n     }\n \n     // Re-parses a path and returns the span for the last identifier in the path"}, {"sha": "b3a2d66a07c112ef779128a1c5321e691a50e236", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -667,7 +667,9 @@ pub fn run_passes(sess: &Session,\n \n     // Sanity check\n     assert!(trans.modules.len() == sess.opts.cg.codegen_units ||\n-            sess.opts.debugging_opts.incremental.is_some());\n+            sess.opts.debugging_opts.incremental.is_some() ||\n+            !sess.opts.output_types.should_trans() ||\n+            sess.opts.debugging_opts.no_trans);\n \n     let tm = create_target_machine(sess);\n \n@@ -756,7 +758,7 @@ pub fn run_passes(sess: &Session,\n     //       the compiler decides the number of codegen units (and will\n     //       potentially create hundreds of them).\n     let num_workers = work_items.len() - 1;\n-    if num_workers == 1 {\n+    if num_workers <= 1 {\n         run_work_singlethreaded(sess, &trans.exported_symbols, work_items);\n     } else {\n         run_work_multithreaded(sess, work_items, num_workers);"}, {"sha": "d006dccbccc58ef7bdea42d0866b0d9819014530", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1145,6 +1145,23 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n     let no_builtins = attr::contains_name(&krate.attrs, \"no_builtins\");\n \n+    // Skip crate items and just output metadata in -Z no-trans mode.\n+    if tcx.sess.opts.debugging_opts.no_trans ||\n+       !tcx.sess.opts.output_types.should_trans() {\n+        let empty_exported_symbols = ExportedSymbols::empty();\n+        let linker_info = LinkerInfo::new(&shared_ccx, &empty_exported_symbols);\n+        return CrateTranslation {\n+            modules: vec![],\n+            metadata_module: metadata_module,\n+            link: link_meta,\n+            metadata: metadata,\n+            exported_symbols: empty_exported_symbols,\n+            no_builtins: no_builtins,\n+            linker_info: linker_info,\n+            windows_subsystem: None,\n+        };\n+    }\n+\n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n     let (codegen_units, symbol_map) = collect_and_partition_translation_items(&shared_ccx);\n@@ -1181,22 +1198,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     assert_module_sources::assert_module_sources(tcx, &modules);\n \n-    // Skip crate items and just output metadata in -Z no-trans mode.\n-    if tcx.sess.opts.debugging_opts.no_trans ||\n-       tcx.sess.opts.output_types.contains_key(&config::OutputType::Metadata) {\n-        let linker_info = LinkerInfo::new(&shared_ccx, &ExportedSymbols::empty());\n-        return CrateTranslation {\n-            modules: modules,\n-            metadata_module: metadata_module,\n-            link: link_meta,\n-            metadata: metadata,\n-            exported_symbols: ExportedSymbols::empty(),\n-            no_builtins: no_builtins,\n-            linker_info: linker_info,\n-            windows_subsystem: None,\n-        };\n-    }\n-\n     // Instantiate translation items without filling out definitions yet...\n     for ccx in crate_context_list.iter_need_trans() {\n         let cgu = ccx.codegen_unit();"}, {"sha": "7890ae20ec26cf603475dd0d395591123279b2c5", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -102,6 +102,7 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n         match item.node {\n             hir::ItemEnum(..) |\n             hir::ItemStruct(..) |\n+            hir::ItemTrait(..) |\n             hir::ItemUnion(..) => {\n                 let type_def_id = self.tcx.map.local_def_id(item.id);\n                 self.check_for_overlapping_inherent_impls(type_def_id);"}, {"sha": "d403ac43435319b9e47ffe3a0e3afb68dd66fa67", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1675,7 +1675,6 @@ fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     for ab in ast_bounds {\n         if let &hir::TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = ab  {\n             if unbound.is_none() {\n-                assert!(ptr.bound_lifetimes.is_empty());\n                 unbound = Some(ptr.trait_ref.clone());\n             } else {\n                 span_err!(tcx.sess, span, E0203,"}, {"sha": "0629e93e7ef5d1f222dea269492fef4d150ad7e7", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -27,7 +27,7 @@ use std::io;\n use std::io::prelude::*;\n \n use syntax::codemap::CodeMap;\n-use syntax::parse::lexer::{self, Reader, TokenAndSpan};\n+use syntax::parse::lexer::{self, TokenAndSpan};\n use syntax::parse::token;\n use syntax::parse;\n use syntax_pos::Span;\n@@ -42,8 +42,7 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>\n     let mut out = Vec::new();\n     write_header(class, id, &mut out).unwrap();\n \n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess.span_diagnostic, fm),\n-                                         sess.codemap());\n+    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());\n     if let Err(_) = classifier.write_source(&mut out) {\n         return format!(\"<pre>{}</pre>\", src);\n     }\n@@ -63,8 +62,7 @@ pub fn render_inner_with_highlighting(src: &str) -> io::Result<String> {\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), None, src.to_string());\n \n     let mut out = Vec::new();\n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess.span_diagnostic, fm),\n-                                         sess.codemap());\n+    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());\n     classifier.write_source(&mut out)?;\n \n     Ok(String::from_utf8_lossy(&out).into_owned())\n@@ -185,10 +183,10 @@ impl<'a> Classifier<'a> {\n                 Ok(tas) => tas,\n                 Err(_) => {\n                     self.lexer.emit_fatal_errors();\n-                    self.lexer.span_diagnostic.struct_warn(\"Backing out of syntax highlighting\")\n-                                              .note(\"You probably did not intend to render this \\\n-                                                     as a rust code-block\")\n-                                              .emit();\n+                    self.lexer.sess.span_diagnostic\n+                        .struct_warn(\"Backing out of syntax highlighting\")\n+                        .note(\"You probably did not intend to render this as a rust code-block\")\n+                        .emit();\n                     return Err(io::Error::new(io::ErrorKind::Other, \"\"));\n                 }\n             };"}, {"sha": "1f224cac9e91f98c43ded86d2055ff3fd179cac8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -29,7 +29,7 @@ use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n-use rustc_driver::{driver, Compilation};\n+use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n@@ -429,19 +429,26 @@ impl Collector {\n                 should_panic: testing::ShouldPanic::No,\n             },\n             testfn: testing::DynTestFn(box move |()| {\n-                runtest(&test,\n-                        &cratename,\n-                        cfgs,\n-                        libs,\n-                        externs,\n-                        should_panic,\n-                        no_run,\n-                        as_test_harness,\n-                        compile_fail,\n-                        error_codes,\n-                        &opts,\n-                        maybe_sysroot);\n-            })\n+                match {\n+                    rustc_driver::in_rustc_thread(move || {\n+                        runtest(&test,\n+                                &cratename,\n+                                cfgs,\n+                                libs,\n+                                externs,\n+                                should_panic,\n+                                no_run,\n+                                as_test_harness,\n+                                compile_fail,\n+                                error_codes,\n+                                &opts,\n+                                maybe_sysroot)\n+                    })\n+                } {\n+                    Ok(()) => (),\n+                    Err(err) => panic::resume_unwind(err),\n+                }\n+            }),\n         });\n     }\n "}, {"sha": "aec3d901ece602aa197d01658e9566db1d5ee00d", "filename": "src/libstd/net/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftest.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)] // not used on emscripten\n+#![allow(warnings)] // not used on emscripten\n \n use env;\n use net::{SocketAddr, SocketAddrV4, SocketAddrV6, Ipv4Addr, Ipv6Addr, ToSocketAddrs};"}, {"sha": "5f83d077a13682897b570234ca23ae77b10520c1", "filename": "src/libstd/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -172,6 +172,7 @@ mod tests {\n \n     macro_rules! test_checked_next_power_of_two {\n         ($test_name:ident, $T:ident) => (\n+            #[cfg_attr(target_os = \"emscripten\", ignore)] // FIXME(#39119)\n             fn $test_name() {\n                 #![test]\n                 assert_eq!((0 as $T).checked_next_power_of_two(), Some(1));"}, {"sha": "07a9b4bed99202f8f65973d0bc3fe771ee3b94cb", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -491,9 +491,12 @@ pub fn panicking() -> bool {\n /// Puts the current thread to sleep for the specified amount of time.\n ///\n /// The thread may sleep longer than the duration specified due to scheduling\n-/// specifics or platform-dependent functionality. Note that on unix platforms\n-/// this function will not return early due to a signal being received or a\n-/// spurious wakeup.\n+/// specifics or platform-dependent functionality.\n+///\n+/// # Platform behavior\n+///\n+/// On Unix platforms this function will not return early due to a\n+/// signal being received or a spurious wakeup.\n ///\n /// # Examples\n ///"}, {"sha": "edf74e1fe19f155d0a19075f42d50f4fb45ef801", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -615,9 +615,7 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree])\n         -> parser::Parser<'a> {\n-        let mut parser = parse::tts_to_parser(self.parse_sess, tts.to_vec());\n-        parser.allow_interpolated_tts = false; // FIXME(jseyfried) `quote!` can't handle these yet\n-        parser\n+        parse::tts_to_parser(self.parse_sess, tts.to_vec())\n     }\n     pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }"}, {"sha": "d748eec73e850b2798c35f67157d871bf9063c5f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -21,7 +21,7 @@ use ext::base::*;\n use feature_gate::{self, Features};\n use fold;\n use fold::*;\n-use parse::{ParseSess, DirectoryOwnership, PResult, lexer};\n+use parse::{ParseSess, DirectoryOwnership, PResult, filemap_to_tts};\n use parse::parser::Parser;\n use parse::token;\n use print::pprust;\n@@ -364,7 +364,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.expect_from_annotatables(items)\n             }\n             SyntaxExtension::AttrProcMacro(ref mac) => {\n-                let attr_toks = TokenStream::from_tts(tts_for_attr(&attr, &self.cx.parse_sess));\n+                let attr_toks = TokenStream::from_tts(tts_for_attr_args(&attr,\n+                                                                        &self.cx.parse_sess));\n+\n                 let item_toks = TokenStream::from_tts(tts_for_item(&item, &self.cx.parse_sess));\n \n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n@@ -640,17 +642,35 @@ fn tts_for_item(item: &Annotatable, parse_sess: &ParseSess) -> Vec<TokenTree> {\n     string_to_tts(text, parse_sess)\n }\n \n-fn tts_for_attr(attr: &ast::Attribute, parse_sess: &ParseSess) -> Vec<TokenTree> {\n-    string_to_tts(pprust::attr_to_string(attr), parse_sess)\n+fn tts_for_attr_args(attr: &ast::Attribute, parse_sess: &ParseSess) -> Vec<TokenTree> {\n+    use ast::MetaItemKind::*;\n+    use print::pp::Breaks;\n+    use print::pprust::PrintState;\n+\n+    let token_string = match attr.value.node {\n+        // For `#[foo]`, an empty token\n+        Word => return vec![],\n+        // For `#[foo(bar, baz)]`, returns `(bar, baz)`\n+        List(ref items) => pprust::to_string(|s| {\n+            s.popen()?;\n+            s.commasep(Breaks::Consistent,\n+                       &items[..],\n+                       |s, i| s.print_meta_list_item(&i))?;\n+            s.pclose()\n+        }),\n+        // For `#[foo = \"bar\"]`, returns `= \"bar\"`\n+        NameValue(ref lit) => pprust::to_string(|s| {\n+            s.word_space(\"=\")?;\n+            s.print_literal(lit)\n+        }),\n+    };\n+\n+    string_to_tts(token_string, parse_sess)\n }\n \n fn string_to_tts(text: String, parse_sess: &ParseSess) -> Vec<TokenTree> {\n-    let filemap = parse_sess.codemap()\n-                            .new_filemap(String::from(\"<macro expansion>\"), None, text);\n-\n-    let lexer = lexer::StringReader::new(&parse_sess.span_diagnostic, filemap);\n-    let mut parser = Parser::new(parse_sess, Box::new(lexer), None, false);\n-    panictry!(parser.parse_all_token_trees())\n+    let filename = String::from(\"<macro expansion>\");\n+    filemap_to_tts(parse_sess, parse_sess.codemap().new_filemap(filename, None, text))\n }\n \n impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {"}, {"sha": "089c35c694a78e3eb9e9c79f0268a80d27a59dc2", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -82,7 +82,6 @@ use ast::Ident;\n use syntax_pos::{self, BytePos, mk_sp, Span};\n use codemap::Spanned;\n use errors::FatalError;\n-use parse::lexer::*; //resolve bug?\n use parse::{Directory, ParseSess};\n use parse::parser::{PathStyle, Parser};\n use parse::token::{DocComment, MatchNt, SubstNt};\n@@ -407,9 +406,9 @@ fn inner_parse_loop(cur_eis: &mut SmallVector<Box<MatcherPos>>,\n     Success(())\n }\n \n-pub fn parse(sess: &ParseSess, rdr: TtReader, ms: &[TokenTree], directory: Option<Directory>)\n+pub fn parse(sess: &ParseSess, tts: Vec<TokenTree>, ms: &[TokenTree], directory: Option<Directory>)\n              -> NamedParseResult {\n-    let mut parser = Parser::new(sess, Box::new(rdr), directory, true);\n+    let mut parser = Parser::new(sess, tts, directory, true);\n     let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(), parser.span.lo));\n     let mut next_eis = Vec::new(); // or proceed normally\n \n@@ -481,23 +480,8 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n     match name {\n         \"tt\" => {\n             p.quote_depth += 1; //but in theory, non-quoted tts might be useful\n-            let mut tt = panictry!(p.parse_token_tree());\n+            let tt = panictry!(p.parse_token_tree());\n             p.quote_depth -= 1;\n-            while let TokenTree::Token(sp, token::Interpolated(nt)) = tt {\n-                if let token::NtTT(..) = *nt {\n-                    match Rc::try_unwrap(nt) {\n-                        Ok(token::NtTT(sub_tt)) => tt = sub_tt,\n-                        Ok(_) => unreachable!(),\n-                        Err(nt_rc) => match *nt_rc {\n-                            token::NtTT(ref sub_tt) => tt = sub_tt.clone(),\n-                            _ => unreachable!(),\n-                        },\n-                    }\n-                } else {\n-                    tt = TokenTree::Token(sp, token::Interpolated(nt.clone()));\n-                    break\n-                }\n-            }\n             return token::NtTT(tt);\n         }\n         _ => {}\n@@ -527,7 +511,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"ident\" => match p.token {\n             token::Ident(sn) => {\n                 p.bump();\n-                token::NtIdent(Spanned::<Ident>{node: sn, span: p.span})\n+                token::NtIdent(Spanned::<Ident>{node: sn, span: p.prev_span})\n             }\n             _ => {\n                 let token_str = pprust::token_to_string(&p.token);"}, {"sha": "f6a25d4aceed7a7923b1e249cbeed92f87c7e7b6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -16,8 +16,8 @@ use ext::expand::{Expansion, ExpansionKind};\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::{parse, parse_failure_msg};\n+use ext::tt::transcribe::transcribe;\n use parse::{Directory, ParseSess};\n-use parse::lexer::new_tt_reader;\n use parse::parser::Parser;\n use parse::token::{self, NtTT, Token};\n use parse::token::Token::*;\n@@ -113,13 +113,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                     _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n-                let trncbr =\n-                    new_tt_reader(&cx.parse_sess.span_diagnostic, Some(named_matches), rhs);\n+                let tts = transcribe(&cx.parse_sess.span_diagnostic, Some(named_matches), rhs);\n                 let directory = Directory {\n                     path: cx.current_expansion.module.directory.clone(),\n                     ownership: cx.current_expansion.directory_ownership,\n                 };\n-                let mut p = Parser::new(cx.parse_sess(), Box::new(trncbr), Some(directory), false);\n+                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), false);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n                     .map(|id| (*id.name.as_str()).to_owned());\n \n@@ -187,10 +186,8 @@ pub fn compile(sess: &ParseSess, def: &ast::MacroDef) -> SyntaxExtension {\n         })),\n     ];\n \n-    // Parse the macro_rules! invocation (`none` is for no interpolations):\n-    let arg_reader = new_tt_reader(&sess.span_diagnostic, None, def.body.clone());\n-\n-    let argument_map = match parse(sess, arg_reader, &argument_gram, None) {\n+    // Parse the macro_rules! invocation\n+    let argument_map = match parse(sess, def.body.clone(), &argument_gram, None) {\n         Success(m) => m,\n         Failure(sp, tok) => {\n             let s = parse_failure_msg(tok);"}, {"sha": "38becbe7b1d30a31a5ba0869f065adfd1fcad786", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 36, "deletions": 62, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,10 +10,9 @@\n use self::LockstepIterSize::*;\n \n use ast::Ident;\n-use errors::{Handler, DiagnosticBuilder};\n+use errors::Handler;\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use parse::token::{self, MatchNt, SubstNt, Token, NtIdent};\n-use parse::lexer::TokenAndSpan;\n+use parse::token::{self, MatchNt, SubstNt, Token, NtIdent, NtTT};\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{self, TokenTree};\n use util::small_vector::SmallVector;\n@@ -32,29 +31,24 @@ struct TtFrame {\n }\n \n #[derive(Clone)]\n-pub struct TtReader<'a> {\n-    pub sp_diag: &'a Handler,\n+struct TtReader<'a> {\n+    sp_diag: &'a Handler,\n     /// the unzipped tree:\n     stack: SmallVector<TtFrame>,\n     /* for MBE-style macro transcription */\n     interpolations: HashMap<Ident, Rc<NamedMatch>>,\n \n     repeat_idx: Vec<usize>,\n     repeat_len: Vec<usize>,\n-    /* cached: */\n-    pub cur_tok: Token,\n-    pub cur_span: Span,\n-    /// Transform doc comments. Only useful in macro invocations\n-    pub fatal_errs: Vec<DiagnosticBuilder<'a>>,\n }\n \n /// This can do Macro-By-Example transcription. On the other hand, if\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n-pub fn new_tt_reader(sp_diag: &Handler,\n-                     interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n-                     src: Vec<tokenstream::TokenTree>)\n-                     -> TtReader {\n+pub fn transcribe(sp_diag: &Handler,\n+                  interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n+                  src: Vec<tokenstream::TokenTree>)\n+                  -> Vec<TokenTree> {\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n         stack: SmallVector::one(TtFrame {\n@@ -73,13 +67,15 @@ pub fn new_tt_reader(sp_diag: &Handler,\n         },\n         repeat_idx: Vec::new(),\n         repeat_len: Vec::new(),\n-        /* dummy values, never read: */\n-        cur_tok: token::Eof,\n-        cur_span: DUMMY_SP,\n-        fatal_errs: Vec::new(),\n     };\n-    tt_next_token(&mut r); /* get cur_tok and cur_span set up */\n-    r\n+\n+    let mut tts = Vec::new();\n+    let mut prev_span = DUMMY_SP;\n+    while let Some(tt) = tt_next_token(&mut r, prev_span) {\n+        prev_span = tt.span();\n+        tts.push(tt);\n+    }\n+    tts\n }\n \n fn lookup_cur_matched_by_matched(r: &TtReader, start: Rc<NamedMatch>) -> Rc<NamedMatch> {\n@@ -153,38 +149,24 @@ fn lockstep_iter_size(t: &TokenTree, r: &TtReader) -> LockstepIterSize {\n \n /// Return the next token from the TtReader.\n /// EFFECT: advances the reader's token field\n-pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n-    // FIXME(pcwalton): Bad copy?\n-    let ret_val = TokenAndSpan {\n-        tok: r.cur_tok.clone(),\n-        sp: r.cur_span.clone(),\n-    };\n+fn tt_next_token(r: &mut TtReader, prev_span: Span) -> Option<TokenTree> {\n     loop {\n-        let should_pop = match r.stack.last() {\n-            None => {\n-                assert_eq!(ret_val.tok, token::Eof);\n-                return ret_val;\n-            }\n-            Some(frame) => {\n-                if frame.idx < frame.forest.len() {\n-                    break;\n-                }\n-                !frame.dotdotdoted ||\n-                    *r.repeat_idx.last().unwrap() == *r.repeat_len.last().unwrap() - 1\n+        let should_pop = if let Some(frame) = r.stack.last() {\n+            if frame.idx < frame.forest.len() {\n+                break;\n             }\n+            !frame.dotdotdoted || *r.repeat_idx.last().unwrap() == *r.repeat_len.last().unwrap() - 1\n+        } else {\n+            return None;\n         };\n \n         /* done with this set; pop or repeat? */\n         if should_pop {\n             let prev = r.stack.pop().unwrap();\n-            match r.stack.last_mut() {\n-                None => {\n-                    r.cur_tok = token::Eof;\n-                    return ret_val;\n-                }\n-                Some(frame) => {\n-                    frame.idx += 1;\n-                }\n+            if let Some(frame) = r.stack.last_mut() {\n+                frame.idx += 1;\n+            } else {\n+                return None;\n             }\n             if prev.dotdotdoted {\n                 r.repeat_idx.pop();\n@@ -194,8 +176,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n             *r.repeat_idx.last_mut().unwrap() += 1;\n             r.stack.last_mut().unwrap().idx = 0;\n             if let Some(tk) = r.stack.last().unwrap().sep.clone() {\n-                r.cur_tok = tk; // repeat same span, I guess\n-                return ret_val;\n+                return Some(TokenTree::Token(prev_span, tk)); // repeat same span, I guess\n             }\n         }\n     }\n@@ -231,7 +212,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             }\n \n                             r.stack.last_mut().unwrap().idx += 1;\n-                            return tt_next_token(r);\n+                            return tt_next_token(r, prev_span);\n                         }\n                         r.repeat_len.push(len);\n                         r.repeat_idx.push(0);\n@@ -249,9 +230,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 r.stack.last_mut().unwrap().idx += 1;\n                 match lookup_cur_matched(r, ident) {\n                     None => {\n-                        r.cur_span = sp;\n-                        r.cur_tok = SubstNt(ident);\n-                        return ret_val;\n+                        return Some(TokenTree::Token(sp, SubstNt(ident)));\n                         // this can't be 0 length, just like TokenTree::Delimited\n                     }\n                     Some(cur_matched) => if let MatchedNonterminal(ref nt) = *cur_matched {\n@@ -260,15 +239,12 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n                             NtIdent(ref sn) => {\n-                                r.cur_span = sn.span;\n-                                r.cur_tok = token::Ident(sn.node);\n-                                return ret_val;\n+                                return Some(TokenTree::Token(sn.span, token::Ident(sn.node)));\n                             }\n+                            NtTT(ref tt) => return Some(tt.clone()),\n                             _ => {\n-                                // FIXME(pcwalton): Bad copy.\n-                                r.cur_span = sp;\n-                                r.cur_tok = token::Interpolated(nt.clone());\n-                                return ret_val;\n+                                // FIXME(pcwalton): Bad copy\n+                                return Some(TokenTree::Token(sp, token::Interpolated(nt.clone())));\n                             }\n                         }\n                     } else {\n@@ -289,11 +265,9 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 });\n                 // if this could be 0-length, we'd need to potentially recur here\n             }\n-            TokenTree::Token(sp, tok) => {\n-                r.cur_span = sp;\n-                r.cur_tok = tok;\n+            tt @ TokenTree::Token(..) => {\n                 r.stack.last_mut().unwrap().idx += 1;\n-                return ret_val;\n+                return Some(tt);\n             }\n         }\n     }"}, {"sha": "c25020caf857e7f8d24bf9a316850fdd2ba21df7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -30,7 +30,7 @@ use ast::{self, NodeId, PatKind};\n use attr;\n use codemap::{CodeMap, Spanned};\n use syntax_pos::Span;\n-use errors::{DiagnosticBuilder, Handler};\n+use errors::{DiagnosticBuilder, Handler, FatalError};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n use symbol::Symbol;\n@@ -319,6 +319,9 @@ declare_features! (\n     // The `unadjusted` ABI. Perma unstable.\n     (active, abi_unadjusted, \"1.16.0\", None),\n \n+    // Macros 1.1\n+    (active, proc_macro, \"1.16.0\", Some(35900)),\n+\n     // Allows attributes on struct literal fields.\n     (active, struct_field_attributes, \"1.16.0\", Some(38814)),\n \n@@ -375,8 +378,6 @@ declare_features! (\n     // Allows `..` in tuple (struct) patterns\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n     (accepted, item_like_imports, \"1.14.0\", Some(35120)),\n-    // Macros 1.1\n-    (accepted, proc_macro, \"1.15.0\", Some(35900)),\n );\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -444,6 +445,10 @@ pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, Att\n     BUILTIN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n }\n \n+pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.check_name(builtin_name))\n+}\n+\n // Attributes that have a special meaning to rustc or rustdoc\n pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n@@ -737,6 +742,16 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               is currently unstable\",\n                                              cfg_fn!(windows_subsystem))),\n \n+    (\"proc_macro_attribute\", Normal, Gated(Stability::Unstable,\n+                                           \"proc_macro\",\n+                                           \"attribute proc macros are currently unstable\",\n+                                           cfg_fn!(proc_macro))),\n+\n+    (\"rustc_derive_registrar\", Normal, Gated(Stability::Unstable,\n+                                             \"rustc_derive_registrar\",\n+                                             \"used internally by rustc\",\n+                                             cfg_fn!(rustc_attrs))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),\n@@ -879,9 +894,10 @@ fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n         issue\n     } else {\n         // search in Accepted or Removed features\n-        ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES.iter())\n-            .find(|t| t.0 == feature)\n-            .unwrap().2\n+        match ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).find(|t| t.0 == feature) {\n+            Some(&(_, _, issue)) => issue,\n+            None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n+        }\n     }\n }\n \n@@ -1382,6 +1398,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {\n     let mut features = Features::new();\n \n+    let mut feature_checker = MutexFeatureChecker::default();\n+\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n@@ -1405,6 +1423,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n                     if let Some(&(_, _, _, setter)) = ACTIVE_FEATURES.iter()\n                         .find(|& &(n, _, _, _)| name == n) {\n                         *(setter(&mut features)) = true;\n+                        feature_checker.collect(&features, mi.span);\n                     }\n                     else if let Some(&(_, _, _)) = REMOVED_FEATURES.iter()\n                         .find(|& &(n, _, _)| name == n) {\n@@ -1421,9 +1440,45 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n         }\n     }\n \n+    feature_checker.check(span_handler);\n+\n     features\n }\n \n+// A collector for mutually-exclusive features and their flag spans\n+#[derive(Default)]\n+struct MutexFeatureChecker {\n+    proc_macro: Option<Span>,\n+    custom_attribute: Option<Span>,\n+}\n+\n+impl MutexFeatureChecker {\n+    // If this method turns out to be a hotspot due to branching,\n+    // the branching can be eliminated by modifying `setter!()` to set these spans\n+    // only for the features that need to be checked for mutual exclusion.\n+    fn collect(&mut self, features: &Features, span: Span) {\n+        if features.proc_macro {\n+            // If self.proc_macro is None, set to Some(span)\n+            self.proc_macro = self.proc_macro.or(Some(span));\n+        }\n+\n+        if features.custom_attribute {\n+            self.custom_attribute = self.custom_attribute.or(Some(span));\n+        }\n+    }\n+\n+    fn check(self, handler: &Handler) {\n+        if let (Some(pm_span), Some(ca_span)) = (self.proc_macro, self.custom_attribute) {\n+            handler.struct_span_err(pm_span, \"Cannot use `#![feature(proc_macro)]` and \\\n+                                              `#![feature(custom_attribute)] at the same time\")\n+                .span_note(ca_span, \"`#![feature(custom_attribute)]` declared here\")\n+                .emit();\n+\n+            panic!(FatalError);\n+        }\n+    }\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,"}, {"sha": "c97b8ddf91972ac27e636e2a09e72fb0a2bf9048", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -13,11 +13,8 @@ pub use self::CommentStyle::*;\n use ast;\n use codemap::CodeMap;\n use syntax_pos::{BytePos, CharPos, Pos};\n-use errors;\n-use parse::lexer::is_block_doc_comment;\n-use parse::lexer::{StringReader, TokenAndSpan};\n-use parse::lexer::{is_pattern_whitespace, Reader};\n-use parse::lexer;\n+use parse::lexer::{is_block_doc_comment, is_pattern_whitespace};\n+use parse::lexer::{self, ParseSess, StringReader, TokenAndSpan};\n use print::pprust;\n use str::char_at;\n \n@@ -346,16 +343,14 @@ pub struct Literal {\n \n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n-pub fn gather_comments_and_literals(span_diagnostic: &errors::Handler,\n-                                    path: String,\n-                                    srdr: &mut Read)\n+pub fn gather_comments_and_literals(sess: &ParseSess, path: String, srdr: &mut Read)\n                                     -> (Vec<Comment>, Vec<Literal>) {\n     let mut src = Vec::new();\n     srdr.read_to_end(&mut src).unwrap();\n     let src = String::from_utf8(src).unwrap();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, None, src);\n-    let mut rdr = lexer::StringReader::new_raw(span_diagnostic, filemap);\n+    let mut rdr = lexer::StringReader::new_raw(sess, filemap);\n \n     let mut comments: Vec<Comment> = Vec::new();\n     let mut literals: Vec<Literal> = Vec::new();"}, {"sha": "6bc15115b09d3efca57ab6b55100e9c450132996", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 88, "deletions": 128, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,9 +11,8 @@\n use ast::{self, Ident};\n use syntax_pos::{self, BytePos, CharPos, Pos, Span};\n use codemap::CodeMap;\n-use errors::{FatalError, Handler, DiagnosticBuilder};\n-use ext::tt::transcribe::tt_next_token;\n-use parse::token;\n+use errors::{FatalError, DiagnosticBuilder};\n+use parse::{token, ParseSess};\n use str::char_at;\n use symbol::{Symbol, keywords};\n use std_unicode::property::Pattern_White_Space;\n@@ -23,52 +22,10 @@ use std::char;\n use std::mem::replace;\n use std::rc::Rc;\n \n-pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n-\n pub mod comments;\n+mod tokentrees;\n mod unicode_chars;\n \n-pub trait Reader {\n-    fn is_eof(&self) -> bool;\n-    fn try_next_token(&mut self) -> Result<TokenAndSpan, ()>;\n-    fn next_token(&mut self) -> TokenAndSpan where Self: Sized {\n-        let res = self.try_next_token();\n-        self.unwrap_or_abort(res)\n-    }\n-    /// Report a fatal error with the current span.\n-    fn fatal(&self, &str) -> FatalError;\n-    /// Report a non-fatal error with the current span.\n-    fn err(&self, &str);\n-    fn emit_fatal_errors(&mut self);\n-    fn unwrap_or_abort(&mut self, res: Result<TokenAndSpan, ()>) -> TokenAndSpan {\n-        match res {\n-            Ok(tok) => tok,\n-            Err(_) => {\n-                self.emit_fatal_errors();\n-                panic!(FatalError);\n-            }\n-        }\n-    }\n-    fn peek(&self) -> TokenAndSpan;\n-    /// Get a token the parser cares about.\n-    fn try_real_token(&mut self) -> Result<TokenAndSpan, ()> {\n-        let mut t = self.try_next_token()?;\n-        loop {\n-            match t.tok {\n-                token::Whitespace | token::Comment | token::Shebang(_) => {\n-                    t = self.try_next_token()?;\n-                }\n-                _ => break,\n-            }\n-        }\n-        Ok(t)\n-    }\n-    fn real_token(&mut self) -> TokenAndSpan {\n-        let res = self.try_real_token();\n-        self.unwrap_or_abort(res)\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct TokenAndSpan {\n     pub tok: token::Token,\n@@ -82,7 +39,7 @@ impl Default for TokenAndSpan {\n }\n \n pub struct StringReader<'a> {\n-    pub span_diagnostic: &'a Handler,\n+    pub sess: &'a ParseSess,\n     /// The absolute offset within the codemap of the next character to read\n     pub next_pos: BytePos,\n     /// The absolute offset within the codemap of the current character\n@@ -105,9 +62,44 @@ pub struct StringReader<'a> {\n     // cache a direct reference to the source text, so that we don't have to\n     // retrieve it via `self.filemap.src.as_ref().unwrap()` all the time.\n     source_text: Rc<String>,\n+    /// Stack of open delimiters and their spans. Used for error message.\n+    token: token::Token,\n+    span: Span,\n+    open_braces: Vec<(token::DelimToken, Span)>,\n }\n \n-impl<'a> Reader for StringReader<'a> {\n+impl<'a> StringReader<'a> {\n+    fn next_token(&mut self) -> TokenAndSpan where Self: Sized {\n+        let res = self.try_next_token();\n+        self.unwrap_or_abort(res)\n+    }\n+    fn unwrap_or_abort(&mut self, res: Result<TokenAndSpan, ()>) -> TokenAndSpan {\n+        match res {\n+            Ok(tok) => tok,\n+            Err(_) => {\n+                self.emit_fatal_errors();\n+                panic!(FatalError);\n+            }\n+        }\n+    }\n+    fn try_real_token(&mut self) -> Result<TokenAndSpan, ()> {\n+        let mut t = self.try_next_token()?;\n+        loop {\n+            match t.tok {\n+                token::Whitespace | token::Comment | token::Shebang(_) => {\n+                    t = self.try_next_token()?;\n+                }\n+                _ => break,\n+            }\n+        }\n+        self.token = t.tok.clone();\n+        self.span = t.sp;\n+        Ok(t)\n+    }\n+    pub fn real_token(&mut self) -> TokenAndSpan {\n+        let res = self.try_real_token();\n+        self.unwrap_or_abort(res)\n+    }\n     fn is_eof(&self) -> bool {\n         if self.ch.is_none() {\n             return true;\n@@ -119,7 +111,7 @@ impl<'a> Reader for StringReader<'a> {\n         }\n     }\n     /// Return the next token. EFFECT: advances the string_reader.\n-    fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n+    pub fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n         assert!(self.fatal_errs.is_empty());\n         let ret_val = TokenAndSpan {\n             tok: replace(&mut self.peek_tok, token::Underscore),\n@@ -131,16 +123,13 @@ impl<'a> Reader for StringReader<'a> {\n     fn fatal(&self, m: &str) -> FatalError {\n         self.fatal_span(self.peek_span, m)\n     }\n-    fn err(&self, m: &str) {\n-        self.err_span(self.peek_span, m)\n-    }\n-    fn emit_fatal_errors(&mut self) {\n+    pub fn emit_fatal_errors(&mut self) {\n         for err in &mut self.fatal_errs {\n             err.emit();\n         }\n         self.fatal_errs.clear();\n     }\n-    fn peek(&self) -> TokenAndSpan {\n+    pub fn peek(&self) -> TokenAndSpan {\n         // FIXME(pcwalton): Bad copy!\n         TokenAndSpan {\n             tok: self.peek_tok.clone(),\n@@ -149,59 +138,24 @@ impl<'a> Reader for StringReader<'a> {\n     }\n }\n \n-impl<'a> Reader for TtReader<'a> {\n-    fn is_eof(&self) -> bool {\n-        self.peek().tok == token::Eof\n-    }\n-    fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n-        assert!(self.fatal_errs.is_empty());\n-        let r = tt_next_token(self);\n-        debug!(\"TtReader: r={:?}\", r);\n-        Ok(r)\n-    }\n-    fn fatal(&self, m: &str) -> FatalError {\n-        self.sp_diag.span_fatal(self.cur_span, m)\n-    }\n-    fn err(&self, m: &str) {\n-        self.sp_diag.span_err(self.cur_span, m);\n-    }\n-    fn emit_fatal_errors(&mut self) {\n-        for err in &mut self.fatal_errs {\n-            err.emit();\n-        }\n-        self.fatal_errs.clear();\n-    }\n-    fn peek(&self) -> TokenAndSpan {\n-        TokenAndSpan {\n-            tok: self.cur_tok.clone(),\n-            sp: self.cur_span,\n-        }\n-    }\n-}\n-\n impl<'a> StringReader<'a> {\n     /// For comments.rs, which hackily pokes into next_pos and ch\n-    pub fn new_raw<'b>(span_diagnostic: &'b Handler,\n-                       filemap: Rc<syntax_pos::FileMap>)\n-                       -> StringReader<'b> {\n-        let mut sr = StringReader::new_raw_internal(span_diagnostic, filemap);\n+    pub fn new_raw<'b>(sess: &'a ParseSess, filemap: Rc<syntax_pos::FileMap>) -> Self {\n+        let mut sr = StringReader::new_raw_internal(sess, filemap);\n         sr.bump();\n         sr\n     }\n \n-    fn new_raw_internal<'b>(span_diagnostic: &'b Handler,\n-                            filemap: Rc<syntax_pos::FileMap>)\n-                            -> StringReader<'b> {\n+    fn new_raw_internal(sess: &'a ParseSess, filemap: Rc<syntax_pos::FileMap>) -> Self {\n         if filemap.src.is_none() {\n-            span_diagnostic.bug(&format!(\"Cannot lex filemap \\\n-                                          without source: {}\",\n-                                         filemap.name)[..]);\n+            sess.span_diagnostic.bug(&format!(\"Cannot lex filemap without source: {}\",\n+                                              filemap.name));\n         }\n \n         let source_text = (*filemap.src.as_ref().unwrap()).clone();\n \n         StringReader {\n-            span_diagnostic: span_diagnostic,\n+            sess: sess,\n             next_pos: filemap.start_pos,\n             pos: filemap.start_pos,\n             col: CharPos(0),\n@@ -214,13 +168,14 @@ impl<'a> StringReader<'a> {\n             peek_span: syntax_pos::DUMMY_SP,\n             source_text: source_text,\n             fatal_errs: Vec::new(),\n+            token: token::Eof,\n+            span: syntax_pos::DUMMY_SP,\n+            open_braces: Vec::new(),\n         }\n     }\n \n-    pub fn new<'b>(span_diagnostic: &'b Handler,\n-                   filemap: Rc<syntax_pos::FileMap>)\n-                   -> StringReader<'b> {\n-        let mut sr = StringReader::new_raw(span_diagnostic, filemap);\n+    pub fn new(sess: &'a ParseSess, filemap: Rc<syntax_pos::FileMap>) -> Self {\n+        let mut sr = StringReader::new_raw(sess, filemap);\n         if let Err(_) = sr.advance_token() {\n             sr.emit_fatal_errors();\n             panic!(FatalError);\n@@ -234,12 +189,12 @@ impl<'a> StringReader<'a> {\n \n     /// Report a fatal lexical error with a given span.\n     pub fn fatal_span(&self, sp: Span, m: &str) -> FatalError {\n-        self.span_diagnostic.span_fatal(sp, m)\n+        self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n \n     /// Report a lexical error with a given span.\n     pub fn err_span(&self, sp: Span, m: &str) {\n-        self.span_diagnostic.span_err(sp, m)\n+        self.sess.span_diagnostic.span_err(sp, m)\n     }\n \n \n@@ -274,7 +229,7 @@ impl<'a> StringReader<'a> {\n         for c in c.escape_default() {\n             m.push(c)\n         }\n-        self.span_diagnostic.struct_span_fatal(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n+        self.sess.span_diagnostic.struct_span_fatal(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n@@ -298,7 +253,7 @@ impl<'a> StringReader<'a> {\n         for c in c.escape_default() {\n             m.push(c)\n         }\n-        self.span_diagnostic.struct_span_err(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n+        self.sess.span_diagnostic.struct_span_err(syntax_pos::mk_sp(from_pos, to_pos), &m[..])\n     }\n \n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending the\n@@ -503,9 +458,8 @@ impl<'a> StringReader<'a> {\n     fn scan_comment(&mut self) -> Option<TokenAndSpan> {\n         if let Some(c) = self.ch {\n             if c.is_whitespace() {\n-                self.span_diagnostic.span_err(syntax_pos::mk_sp(self.pos, self.pos),\n-                                              \"called consume_any_line_comment, but there \\\n-                                               was whitespace\");\n+                let msg = \"called consume_any_line_comment, but there was whitespace\";\n+                self.sess.span_diagnostic.span_err(syntax_pos::mk_sp(self.pos, self.pos), msg);\n             }\n         }\n \n@@ -875,7 +829,7 @@ impl<'a> StringReader<'a> {\n                                     self.scan_unicode_escape(delim) && !ascii_only\n                                 } else {\n                                     let span = syntax_pos::mk_sp(start, self.pos);\n-                                    self.span_diagnostic\n+                                    self.sess.span_diagnostic\n                                         .struct_span_err(span, \"incorrect unicode escape sequence\")\n                                         .span_help(span,\n                                                    \"format of unicode escape sequences is \\\n@@ -1701,35 +1655,41 @@ fn ident_continue(c: Option<char>) -> bool {\n mod tests {\n     use super::*;\n \n-    use ast::Ident;\n+    use ast::{Ident, CrateConfig};\n     use symbol::Symbol;\n     use syntax_pos::{BytePos, Span, NO_EXPANSION};\n     use codemap::CodeMap;\n     use errors;\n+    use feature_gate::UnstableFeatures;\n     use parse::token;\n+    use std::cell::RefCell;\n     use std::io;\n     use std::rc::Rc;\n \n-    fn mk_sh(cm: Rc<CodeMap>) -> errors::Handler {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n-                                                Some(cm));\n-        errors::Handler::with_emitter(true, false, Box::new(emitter))\n+    fn mk_sess(cm: Rc<CodeMap>) -> ParseSess {\n+        let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()), Some(cm.clone()));\n+        ParseSess {\n+            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n+            unstable_features: UnstableFeatures::from_environment(),\n+            config: CrateConfig::new(),\n+            included_mod_stack: RefCell::new(Vec::new()),\n+            code_map: cm,\n+        }\n     }\n \n     // open a string reader for the given string\n     fn setup<'a>(cm: &CodeMap,\n-                 span_handler: &'a errors::Handler,\n+                 sess: &'a ParseSess,\n                  teststr: String)\n                  -> StringReader<'a> {\n         let fm = cm.new_filemap(\"zebra.rs\".to_string(), None, teststr);\n-        StringReader::new(span_handler, fm)\n+        StringReader::new(sess, fm)\n     }\n \n     #[test]\n     fn t1() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         let mut string_reader = setup(&cm,\n                                       &sh,\n                                       \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\"\n@@ -1781,71 +1741,71 @@ mod tests {\n     #[test]\n     fn doublecolonparsing() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         check_tokenization(setup(&cm, &sh, \"a b\".to_string()),\n                            vec![mk_ident(\"a\"), token::Whitespace, mk_ident(\"b\")]);\n     }\n \n     #[test]\n     fn dcparsing_2() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         check_tokenization(setup(&cm, &sh, \"a::b\".to_string()),\n                            vec![mk_ident(\"a\"), token::ModSep, mk_ident(\"b\")]);\n     }\n \n     #[test]\n     fn dcparsing_3() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         check_tokenization(setup(&cm, &sh, \"a ::b\".to_string()),\n                            vec![mk_ident(\"a\"), token::Whitespace, token::ModSep, mk_ident(\"b\")]);\n     }\n \n     #[test]\n     fn dcparsing_4() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         check_tokenization(setup(&cm, &sh, \"a:: b\".to_string()),\n                            vec![mk_ident(\"a\"), token::ModSep, token::Whitespace, mk_ident(\"b\")]);\n     }\n \n     #[test]\n     fn character_a() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         assert_eq!(setup(&cm, &sh, \"'a'\".to_string()).next_token().tok,\n                    token::Literal(token::Char(Symbol::intern(\"a\")), None));\n     }\n \n     #[test]\n     fn character_space() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         assert_eq!(setup(&cm, &sh, \"' '\".to_string()).next_token().tok,\n                    token::Literal(token::Char(Symbol::intern(\" \")), None));\n     }\n \n     #[test]\n     fn character_escaped() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         assert_eq!(setup(&cm, &sh, \"'\\\\n'\".to_string()).next_token().tok,\n                    token::Literal(token::Char(Symbol::intern(\"\\\\n\")), None));\n     }\n \n     #[test]\n     fn lifetime_name() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         assert_eq!(setup(&cm, &sh, \"'abc\".to_string()).next_token().tok,\n                    token::Lifetime(Ident::from_str(\"'abc\")));\n     }\n \n     #[test]\n     fn raw_string() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         assert_eq!(setup(&cm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string())\n                        .next_token()\n                        .tok,\n@@ -1855,7 +1815,7 @@ mod tests {\n     #[test]\n     fn literal_suffixes() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         macro_rules! test {\n             ($input: expr, $tok_type: ident, $tok_contents: expr) => {{\n                 assert_eq!(setup(&cm, &sh, format!(\"{}suffix\", $input)).next_token().tok,\n@@ -1899,7 +1859,7 @@ mod tests {\n     #[test]\n     fn nested_block_comments() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         let mut lexer = setup(&cm, &sh, \"/* /* */ */'a'\".to_string());\n         match lexer.next_token().tok {\n             token::Comment => {}\n@@ -1912,7 +1872,7 @@ mod tests {\n     #[test]\n     fn crlf_comments() {\n         let cm = Rc::new(CodeMap::new());\n-        let sh = mk_sh(cm.clone());\n+        let sh = mk_sess(cm.clone());\n         let mut lexer = setup(&cm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());\n         let comment = lexer.next_token();\n         assert_eq!(comment.tok, token::Comment);"}, {"sha": "7b6f00e0e8265c7415394698c3480609c55dd562", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use print::pprust::token_to_string;\n+use parse::lexer::StringReader;\n+use parse::{token, PResult};\n+use syntax_pos::Span;\n+use tokenstream::{Delimited, TokenTree};\n+\n+use std::rc::Rc;\n+\n+impl<'a> StringReader<'a> {\n+    // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.\n+    pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {\n+        let mut tts = Vec::new();\n+        while self.token != token::Eof {\n+            tts.push(self.parse_token_tree()?);\n+        }\n+        Ok(tts)\n+    }\n+\n+    // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.\n+    fn parse_token_trees_until_close_delim(&mut self) -> Vec<TokenTree> {\n+        let mut tts = vec![];\n+        loop {\n+            if let token::CloseDelim(..) = self.token {\n+                return tts;\n+            }\n+            match self.parse_token_tree() {\n+                Ok(tt) => tts.push(tt),\n+                Err(mut e) => {\n+                    e.emit();\n+                    return tts;\n+                }\n+            }\n+        }\n+    }\n+\n+    fn parse_token_tree(&mut self) -> PResult<'a, TokenTree> {\n+        match self.token {\n+            token::Eof => {\n+                let msg = \"this file contains an un-closed delimiter\";\n+                let mut err = self.sess.span_diagnostic.struct_span_err(self.span, msg);\n+                for &(_, sp) in &self.open_braces {\n+                    err.span_help(sp, \"did you mean to close this delimiter?\");\n+                }\n+                Err(err)\n+            },\n+            token::OpenDelim(delim) => {\n+                // The span for beginning of the delimited section\n+                let pre_span = self.span;\n+\n+                // Parse the open delimiter.\n+                self.open_braces.push((delim, self.span));\n+                let open_span = self.span;\n+                self.real_token();\n+\n+                // Parse the token trees within the delimiters.\n+                // We stop at any delimiter so we can try to recover if the user\n+                // uses an incorrect delimiter.\n+                let tts = self.parse_token_trees_until_close_delim();\n+\n+                let close_span = self.span;\n+                // Expand to cover the entire delimited token tree\n+                let span = Span { hi: close_span.hi, ..pre_span };\n+\n+                match self.token {\n+                    // Correct delimiter.\n+                    token::CloseDelim(d) if d == delim => {\n+                        self.open_braces.pop().unwrap();\n+\n+                        // Parse the close delimiter.\n+                        self.real_token();\n+                    }\n+                    // Incorrect delimiter.\n+                    token::CloseDelim(other) => {\n+                        let token_str = token_to_string(&self.token);\n+                        let msg = format!(\"incorrect close delimiter: `{}`\", token_str);\n+                        let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n+                        // This is a conservative error: only report the last unclosed delimiter.\n+                        // The previous unclosed delimiters could actually be closed! The parser\n+                        // just hasn't gotten to them yet.\n+                        if let Some(&(_, sp)) = self.open_braces.last() {\n+                            err.span_note(sp, \"unclosed delimiter\");\n+                        };\n+                        err.emit();\n+\n+                        self.open_braces.pop().unwrap();\n+\n+                        // If the incorrect delimiter matches an earlier opening\n+                        // delimiter, then don't consume it (it can be used to\n+                        // close the earlier one). Otherwise, consume it.\n+                        // E.g., we try to recover from:\n+                        // fn foo() {\n+                        //     bar(baz(\n+                        // }  // Incorrect delimiter but matches the earlier `{`\n+                        if !self.open_braces.iter().any(|&(b, _)| b == other) {\n+                            self.real_token();\n+                        }\n+                    }\n+                    token::Eof => {\n+                        // Silently recover, the EOF token will be seen again\n+                        // and an error emitted then. Thus we don't pop from\n+                        // self.open_braces here.\n+                    },\n+                    _ => {}\n+                }\n+\n+                Ok(TokenTree::Delimited(span, Rc::new(Delimited {\n+                    delim: delim,\n+                    open_span: open_span,\n+                    tts: tts,\n+                    close_span: close_span,\n+                })))\n+            },\n+            token::CloseDelim(_) => {\n+                // An unexpected closing delimiter (i.e., there is no\n+                // matching opening delimiter).\n+                let token_str = token_to_string(&self.token);\n+                let msg = format!(\"unexpected close delimiter: `{}`\", token_str);\n+                let err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n+                Err(err)\n+            },\n+            _ => {\n+                let tt = TokenTree::Token(self.span, self.token.clone());\n+                self.real_token();\n+                Ok(tt)\n+            }\n+        }\n+    }\n+}"}, {"sha": "6da3e5de75cdc98bc6e7c697b08787ec78daef92", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -243,10 +243,8 @@ pub fn check_for_substitution<'a>(reader: &StringReader<'a>,\n                 err.span_help(span, &msg);\n             },\n             None => {\n-                reader\n-                .span_diagnostic\n-                .span_bug_no_panic(span,\n-                                   &format!(\"substitution character not found for '{}'\", ch));\n+                let msg = format!(\"substitution character not found for '{}'\", ch);\n+                reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n             }\n         }\n     });"}, {"sha": "08f5df4515ba64dd141efa60a936c05348f6bf72", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -45,7 +45,7 @@ pub mod obsolete;\n \n /// Info about a parsing session.\n pub struct ParseSess {\n-    pub span_diagnostic: Handler, // better be the same as the one in the reader!\n+    pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     /// Used to determine and report recursive mod inclusions\n@@ -219,19 +219,15 @@ fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n }\n \n /// Given a filemap, produce a sequence of token-trees\n-pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n-    -> Vec<tokenstream::TokenTree> {\n-    // it appears to me that the cfg doesn't matter here... indeed,\n-    // parsing tt's probably shouldn't require a parser at all.\n-    let srdr = lexer::StringReader::new(&sess.span_diagnostic, filemap);\n-    let mut p1 = Parser::new(sess, Box::new(srdr), None, false);\n-    panictry!(p1.parse_all_token_trees())\n+pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>) -> Vec<tokenstream::TokenTree> {\n+    let mut srdr = lexer::StringReader::new(sess, filemap);\n+    srdr.real_token();\n+    panictry!(srdr.parse_all_token_trees())\n }\n \n /// Given tts and the ParseSess, produce a parser\n pub fn tts_to_parser<'a>(sess: &'a ParseSess, tts: Vec<tokenstream::TokenTree>) -> Parser<'a> {\n-    let trdr = lexer::new_tt_reader(&sess.span_diagnostic, None, tts);\n-    let mut p = Parser::new(sess, Box::new(trdr), None, false);\n+    let mut p = Parser::new(sess, tts, None, false);\n     p.check_unknown_macro_variable();\n     p\n }"}, {"sha": "5dd772041e27106af1efa87d65172d1ce1aff007", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 47, "deletions": 159, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -46,7 +46,7 @@ use ext::tt::macro_parser;\n use parse;\n use parse::classify;\n use parse::common::SeqSep;\n-use parse::lexer::{Reader, TokenAndSpan};\n+use parse::lexer::TokenAndSpan;\n use parse::obsolete::ObsoleteSyntax;\n use parse::token::{self, MatchNt, SubstNt};\n use parse::{new_sub_parser_from_file, ParseSess, Directory, DirectoryOwnership};\n@@ -156,22 +156,6 @@ enum PrevTokenKind {\n     Other,\n }\n \n-// Simple circular buffer used for keeping few next tokens.\n-#[derive(Default)]\n-struct LookaheadBuffer {\n-    buffer: [TokenAndSpan; LOOKAHEAD_BUFFER_CAPACITY],\n-    start: usize,\n-    end: usize,\n-}\n-\n-const LOOKAHEAD_BUFFER_CAPACITY: usize = 8;\n-\n-impl LookaheadBuffer {\n-    fn len(&self) -> usize {\n-        (LOOKAHEAD_BUFFER_CAPACITY + self.end - self.start) % LOOKAHEAD_BUFFER_CAPACITY\n-    }\n-}\n-\n /* ident is handled by common.rs */\n \n pub struct Parser<'a> {\n@@ -184,27 +168,21 @@ pub struct Parser<'a> {\n     pub prev_span: Span,\n     /// the previous token kind\n     prev_token_kind: PrevTokenKind,\n-    lookahead_buffer: LookaheadBuffer,\n-    pub tokens_consumed: usize,\n     pub restrictions: Restrictions,\n     pub quote_depth: usize, // not (yet) related to the quasiquoter\n     parsing_token_tree: bool,\n-    pub reader: Box<Reader+'a>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n     pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n     pub directory: Directory,\n-    /// Stack of open delimiters and their spans. Used for error message.\n-    pub open_braces: Vec<(token::DelimToken, Span)>,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n     pub root_module_name: Option<String>,\n     pub expected_tokens: Vec<TokenType>,\n     pub tts: Vec<(TokenTree, usize)>,\n     pub desugar_doc_comments: bool,\n-    pub allow_interpolated_tts: bool,\n }\n \n #[derive(PartialEq, Eq, Clone)]\n@@ -270,30 +248,31 @@ impl From<P<Expr>> for LhsExpr {\n \n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n-               rdr: Box<Reader+'a>,\n+               tokens: Vec<TokenTree>,\n                directory: Option<Directory>,\n                desugar_doc_comments: bool)\n                -> Self {\n+        let tt = TokenTree::Delimited(syntax_pos::DUMMY_SP, Rc::new(Delimited {\n+            delim: token::NoDelim,\n+            open_span: syntax_pos::DUMMY_SP,\n+            tts: tokens,\n+            close_span: syntax_pos::DUMMY_SP,\n+        }));\n         let mut parser = Parser {\n-            reader: rdr,\n             sess: sess,\n             token: token::Underscore,\n             span: syntax_pos::DUMMY_SP,\n             prev_span: syntax_pos::DUMMY_SP,\n             prev_token_kind: PrevTokenKind::Other,\n-            lookahead_buffer: Default::default(),\n-            tokens_consumed: 0,\n             restrictions: Restrictions::empty(),\n             quote_depth: 0,\n             parsing_token_tree: false,\n             obsolete_set: HashSet::new(),\n             directory: Directory { path: PathBuf::new(), ownership: DirectoryOwnership::Owned },\n-            open_braces: Vec::new(),\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n-            tts: Vec::new(),\n+            tts: if tt.len() > 0 { vec![(tt, 0)] } else { Vec::new() },\n             desugar_doc_comments: desugar_doc_comments,\n-            allow_interpolated_tts: true,\n         };\n \n         let tok = parser.next_tok();\n@@ -309,8 +288,8 @@ impl<'a> Parser<'a> {\n     }\n \n     fn next_tok(&mut self) -> TokenAndSpan {\n-        'outer: loop {\n-            let mut tok = if let Some((tts, i)) = self.tts.pop() {\n+        loop {\n+            let tok = if let Some((tts, i)) = self.tts.pop() {\n                 let tt = tts.get_tt(i);\n                 if i + 1 < tts.len() {\n                     self.tts.push((tts, i + 1));\n@@ -322,28 +301,14 @@ impl<'a> Parser<'a> {\n                     continue\n                 }\n             } else {\n-                self.reader.real_token()\n+                TokenAndSpan { tok: token::Eof, sp: self.span }\n             };\n \n-            loop {\n-                let nt = match tok.tok {\n-                    token::Interpolated(ref nt) => nt.clone(),\n-                    token::DocComment(name) if self.desugar_doc_comments => {\n-                        self.tts.push((TokenTree::Token(tok.sp, token::DocComment(name)), 0));\n-                        continue 'outer\n-                    }\n-                    _ => return tok,\n-                };\n-                match *nt {\n-                    token::NtTT(TokenTree::Token(sp, ref t)) => {\n-                        tok = TokenAndSpan { tok: t.clone(), sp: sp };\n-                    }\n-                    token::NtTT(ref tt) => {\n-                        self.tts.push((tt.clone(), 0));\n-                        continue 'outer\n-                    }\n-                    _ => return tok,\n+            match tok.tok {\n+                token::DocComment(name) if self.desugar_doc_comments => {\n+                    self.tts.push((TokenTree::Token(tok.sp, token::DocComment(name)), 0));\n                 }\n+                _ => return tok,\n             }\n         }\n     }\n@@ -892,17 +857,9 @@ impl<'a> Parser<'a> {\n             _ => PrevTokenKind::Other,\n         };\n \n-        let next = if self.lookahead_buffer.start == self.lookahead_buffer.end {\n-            self.next_tok()\n-        } else {\n-            // Avoid token copies with `replace`.\n-            let old_start = self.lookahead_buffer.start;\n-            self.lookahead_buffer.start = (old_start + 1) % LOOKAHEAD_BUFFER_CAPACITY;\n-            mem::replace(&mut self.lookahead_buffer.buffer[old_start], Default::default())\n-        };\n+        let next = self.next_tok();\n         self.span = next.sp;\n         self.token = next.tok;\n-        self.tokens_consumed += 1;\n         self.expected_tokens.clear();\n         // check after each token\n         self.check_unknown_macro_variable();\n@@ -935,18 +892,20 @@ impl<'a> Parser<'a> {\n         F: FnOnce(&token::Token) -> R,\n     {\n         if dist == 0 {\n-            f(&self.token)\n-        } else if dist < LOOKAHEAD_BUFFER_CAPACITY {\n-            while self.lookahead_buffer.len() < dist {\n-                self.lookahead_buffer.buffer[self.lookahead_buffer.end] = self.next_tok();\n-                self.lookahead_buffer.end =\n-                    (self.lookahead_buffer.end + 1) % LOOKAHEAD_BUFFER_CAPACITY;\n-            }\n-            let index = (self.lookahead_buffer.start + dist - 1) % LOOKAHEAD_BUFFER_CAPACITY;\n-            f(&self.lookahead_buffer.buffer[index].tok)\n-        } else {\n-            self.bug(\"lookahead distance is too large\");\n+            return f(&self.token);\n+        }\n+        let mut tok = token::Eof;\n+        if let Some(&(ref tts, mut i)) = self.tts.last() {\n+            i += dist - 1;\n+            if i < tts.len() {\n+                tok = match tts.get_tt(i) {\n+                    TokenTree::Token(_, tok) => tok,\n+                    TokenTree::Delimited(_, delimited) => token::OpenDelim(delimited.delim),\n+                    TokenTree::Sequence(..) => token::Dollar,\n+                };\n+            }\n         }\n+        f(&tok)\n     }\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(self.span, m)\n@@ -1277,10 +1236,17 @@ impl<'a> Parser<'a> {\n                           \"at least one type parameter bound \\\n                           must be specified\");\n         }\n-        if let TyKind::Path(None, ref path) = lhs.node {\n+\n+        let mut lhs = lhs.unwrap();\n+        if let TyKind::Paren(ty) = lhs.node {\n+            // We have to accept the first bound in parens for backward compatibility.\n+            // Example: `(Bound) + Bound + Bound`\n+            lhs = ty.unwrap();\n+        }\n+        if let TyKind::Path(None, path) = lhs.node {\n             let poly_trait_ref = PolyTraitRef {\n                 bound_lifetimes: Vec::new(),\n-                trait_ref: TraitRef { path: path.clone(), ref_id: lhs.id },\n+                trait_ref: TraitRef { path: path, ref_id: lhs.id },\n                 span: lhs.span,\n             };\n             let poly_trait_ref = TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None);\n@@ -2743,116 +2709,38 @@ impl<'a> Parser<'a> {\n         // whether something will be a nonterminal or a seq\n         // yet.\n         match self.token {\n-            token::Eof => {\n-                let mut err: DiagnosticBuilder<'a> =\n-                    self.diagnostic().struct_span_err(self.span,\n-                                                      \"this file contains an un-closed delimiter\");\n-                for &(_, sp) in &self.open_braces {\n-                    err.span_help(sp, \"did you mean to close this delimiter?\");\n-                }\n-\n-                Err(err)\n-            },\n             token::OpenDelim(delim) => {\n-                if self.tts.last().map(|&(_, i)| i == 1).unwrap_or(false) {\n+                if self.quote_depth == 0 && self.tts.last().map(|&(_, i)| i == 1).unwrap_or(false) {\n                     let tt = self.tts.pop().unwrap().0;\n                     self.bump();\n-                    return Ok(if self.allow_interpolated_tts {\n-                        // avoid needlessly reparsing token trees in recursive macro expansions\n-                        TokenTree::Token(tt.span(), token::Interpolated(Rc::new(token::NtTT(tt))))\n-                    } else {\n-                        tt\n-                    });\n+                    return Ok(tt);\n                 }\n \n                 let parsing_token_tree = ::std::mem::replace(&mut self.parsing_token_tree, true);\n-                // The span for beginning of the delimited section\n-                let pre_span = self.span;\n-\n-                // Parse the open delimiter.\n-                self.open_braces.push((delim, self.span));\n                 let open_span = self.span;\n                 self.bump();\n-\n-                // Parse the token trees within the delimiters.\n-                // We stop at any delimiter so we can try to recover if the user\n-                // uses an incorrect delimiter.\n                 let tts = self.parse_seq_to_before_tokens(&[&token::CloseDelim(token::Brace),\n                                                             &token::CloseDelim(token::Paren),\n                                                             &token::CloseDelim(token::Bracket)],\n                                                           SeqSep::none(),\n                                                           |p| p.parse_token_tree(),\n                                                           |mut e| e.emit());\n+                self.parsing_token_tree = parsing_token_tree;\n \n                 let close_span = self.span;\n-                // Expand to cover the entire delimited token tree\n-                let span = Span { hi: close_span.hi, ..pre_span };\n-\n-                match self.token {\n-                    // Correct delimiter.\n-                    token::CloseDelim(d) if d == delim => {\n-                        self.open_braces.pop().unwrap();\n-\n-                        // Parse the close delimiter.\n-                        self.bump();\n-                    }\n-                    // Incorrect delimiter.\n-                    token::CloseDelim(other) => {\n-                        let token_str = self.this_token_to_string();\n-                        let mut err = self.diagnostic().struct_span_err(self.span,\n-                            &format!(\"incorrect close delimiter: `{}`\", token_str));\n-                        // This is a conservative error: only report the last unclosed delimiter.\n-                        // The previous unclosed delimiters could actually be closed! The parser\n-                        // just hasn't gotten to them yet.\n-                        if let Some(&(_, sp)) = self.open_braces.last() {\n-                            err.span_note(sp, \"unclosed delimiter\");\n-                        };\n-                        err.emit();\n-\n-                        self.open_braces.pop().unwrap();\n-\n-                        // If the incorrect delimiter matches an earlier opening\n-                        // delimiter, then don't consume it (it can be used to\n-                        // close the earlier one). Otherwise, consume it.\n-                        // E.g., we try to recover from:\n-                        // fn foo() {\n-                        //     bar(baz(\n-                        // }  // Incorrect delimiter but matches the earlier `{`\n-                        if !self.open_braces.iter().any(|&(b, _)| b == other) {\n-                            self.bump();\n-                        }\n-                    }\n-                    token::Eof => {\n-                        // Silently recover, the EOF token will be seen again\n-                        // and an error emitted then. Thus we don't pop from\n-                        // self.open_braces here.\n-                    },\n-                    _ => {}\n-                }\n+                self.bump();\n \n-                self.parsing_token_tree = parsing_token_tree;\n+                let span = Span { lo: open_span.lo, ..close_span };\n                 Ok(TokenTree::Delimited(span, Rc::new(Delimited {\n                     delim: delim,\n                     open_span: open_span,\n                     tts: tts,\n                     close_span: close_span,\n                 })))\n             },\n-            token::CloseDelim(_) => {\n-                // An unexpected closing delimiter (i.e., there is no\n-                // matching opening delimiter).\n-                let token_str = self.this_token_to_string();\n-                let err = self.diagnostic().struct_span_err(self.span,\n-                    &format!(\"unexpected close delimiter: `{}`\", token_str));\n-                Err(err)\n-            },\n-            /* we ought to allow different depths of unquotation */\n-            token::Dollar | token::SubstNt(..) if self.quote_depth > 0 => {\n-                self.parse_unquoted()\n-            }\n-            _ => {\n-                Ok(TokenTree::Token(self.span, self.bump_and_get()))\n-            }\n+            token::CloseDelim(_) | token::Eof => unreachable!(),\n+            token::Dollar | token::SubstNt(..) if self.quote_depth > 0 => self.parse_unquoted(),\n+            _ => Ok(TokenTree::Token(self.span, self.bump_and_get())),\n         }\n     }\n "}, {"sha": "061e871fe52295a4230a43928ce07b2c2ff336a5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -18,10 +18,9 @@ use util::parser::AssocOp;\n use attr;\n use codemap::{self, CodeMap};\n use syntax_pos::{self, BytePos};\n-use errors;\n use parse::token::{self, BinOpToken, Token};\n use parse::lexer::comments;\n-use parse;\n+use parse::{self, ParseSess};\n use print::pp::{self, break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{Breaks, eof};\n use print::pp::Breaks::{Consistent, Inconsistent};\n@@ -101,20 +100,15 @@ pub const DEFAULT_COLUMNS: usize = 78;\n /// it can scan the input text for comments and literals to\n /// copy forward.\n pub fn print_crate<'a>(cm: &'a CodeMap,\n-                       span_diagnostic: &errors::Handler,\n+                       sess: &ParseSess,\n                        krate: &ast::Crate,\n                        filename: String,\n                        input: &mut Read,\n                        out: Box<Write+'a>,\n                        ann: &'a PpAnn,\n                        is_expanded: bool) -> io::Result<()> {\n-    let mut s = State::new_from_input(cm,\n-                                      span_diagnostic,\n-                                      filename,\n-                                      input,\n-                                      out,\n-                                      ann,\n-                                      is_expanded);\n+    let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n+\n     if is_expanded && !std_inject::injected_crate_name(krate).is_none() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n@@ -140,16 +134,13 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n \n impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a CodeMap,\n-                          span_diagnostic: &errors::Handler,\n+                          sess: &ParseSess,\n                           filename: String,\n                           input: &mut Read,\n                           out: Box<Write+'a>,\n                           ann: &'a PpAnn,\n                           is_expanded: bool) -> State<'a> {\n-        let (cmnts, lits) = comments::gather_comments_and_literals(\n-            span_diagnostic,\n-            filename,\n-            input);\n+        let (cmnts, lits) = comments::gather_comments_and_literals(sess, filename, input);\n \n         State::new(\n             cm,"}, {"sha": "ab5dc8181e05bbc71ff07ff148d6a1d83b42a120", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -30,7 +30,6 @@ use codemap::{Spanned, combine_spans};\n use ext::base;\n use ext::tt::macro_parser;\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use parse::lexer;\n use parse::{self, Directory};\n use parse::token::{self, Token, Lit, Nonterminal};\n use print::pprust;\n@@ -139,7 +138,10 @@ impl TokenTree {\n                 if let Nonterminal::NtTT(..) = **nt { 1 } else { 0 }\n             },\n             TokenTree::Token(_, token::MatchNt(..)) => 3,\n-            TokenTree::Delimited(_, ref delimed) => delimed.tts.len() + 2,\n+            TokenTree::Delimited(_, ref delimed) => match delimed.delim {\n+                token::NoDelim => delimed.tts.len(),\n+                _ => delimed.tts.len() + 2,\n+            },\n             TokenTree::Sequence(_, ref seq) => seq.tts.len(),\n             TokenTree::Token(..) => 0,\n         }\n@@ -181,6 +183,9 @@ impl TokenTree {\n                     close_span: sp,\n                 }))\n             }\n+            (&TokenTree::Delimited(_, ref delimed), _) if delimed.delim == token::NoDelim => {\n+                delimed.tts[index].clone()\n+            }\n             (&TokenTree::Delimited(_, ref delimed), _) => {\n                 if index == 0 {\n                     return delimed.open_tt();\n@@ -215,14 +220,12 @@ impl TokenTree {\n                  mtch: &[TokenTree],\n                  tts: &[TokenTree])\n                  -> macro_parser::NamedParseResult {\n-        let diag = &cx.parse_sess().span_diagnostic;\n         // `None` is because we're not interpolating\n-        let arg_rdr = lexer::new_tt_reader(diag, None, tts.iter().cloned().collect());\n         let directory = Directory {\n             path: cx.current_expansion.module.directory.clone(),\n             ownership: cx.current_expansion.directory_ownership,\n         };\n-        macro_parser::parse(cx.parse_sess(), arg_rdr, mtch, Some(directory))\n+        macro_parser::parse(cx.parse_sess(), tts.iter().cloned().collect(), mtch, Some(directory))\n     }\n \n     /// Check if this TokenTree is equal to the other, regardless of span information."}, {"sha": "2ce6fc03f7731a5d85f230b4c167d6cacc01fa6a", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -77,8 +77,9 @@ impl MultiItemModifier for CustomDerive {\n             let inner = self.inner;\n             panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))\n         });\n-        let new_items = match res {\n-            Ok(stream) => __internal::token_stream_items(stream),\n+\n+        let stream = match res {\n+            Ok(stream) => stream,\n             Err(e) => {\n                 let msg = \"custom derive attribute panicked\";\n                 let mut err = ecx.struct_span_fatal(span, msg);\n@@ -94,6 +95,18 @@ impl MultiItemModifier for CustomDerive {\n             }\n         };\n \n+        let new_items = __internal::set_parse_sess(&ecx.parse_sess, || {\n+            match __internal::token_stream_parse_items(stream) {\n+                Ok(new_items) => new_items,\n+                Err(_) => {\n+                    // FIXME: handle this better\n+                    let msg = \"custom derive produced unparseable tokens\";\n+                    ecx.struct_span_fatal(span, msg).emit();\n+                    panic!(FatalError);\n+                }\n+            }\n+        });\n+\n         let mut res = vec![Annotatable::Item(item)];\n         // Reassign spans of all expanded items to the input `item`\n         // for better errors here."}, {"sha": "ebec23d0901a0409ea705cf3db7cbe7fa1275204", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -47,6 +47,8 @@ pub mod proc_macro_registrar;\n // for custom_derive\n pub mod deriving;\n \n+pub mod proc_macro_impl;\n+\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, MultiModifier, NamedSyntaxExtension};"}, {"sha": "b454628acb1c09bf95b0dabcd04ed18411daf1f8", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::panic;\n+\n+use errors::FatalError;\n+\n+use syntax::codemap::Span;\n+use syntax::ext::base::*;\n+use syntax::tokenstream::TokenStream;\n+use syntax::ext::base;\n+\n+use proc_macro::TokenStream as TsShim;\n+use proc_macro::__internal;\n+\n+pub struct AttrProcMacro {\n+    pub inner: fn(TsShim, TsShim) -> TsShim,\n+}\n+\n+impl base::AttrProcMacro for AttrProcMacro {\n+    fn expand<'cx>(&self,\n+                   ecx: &'cx mut ExtCtxt,\n+                   span: Span,\n+                   annotation: TokenStream,\n+                   annotated: TokenStream)\n+                   -> TokenStream {\n+        let annotation = __internal::token_stream_wrap(annotation);\n+        let annotated = __internal::token_stream_wrap(annotated);\n+\n+        let res = __internal::set_parse_sess(&ecx.parse_sess, || {\n+            panic::catch_unwind(panic::AssertUnwindSafe(|| (self.inner)(annotation, annotated)))\n+        });\n+\n+        match res {\n+            Ok(stream) => __internal::token_stream_inner(stream),\n+            Err(e) => {\n+                let msg = \"custom attribute panicked\";\n+                let mut err = ecx.struct_span_fatal(span, msg);\n+                if let Some(s) = e.downcast_ref::<String>() {\n+                    err.help(&format!(\"message: {}\", s));\n+                }\n+                if let Some(s) = e.downcast_ref::<&'static str>() {\n+                    err.help(&format!(\"message: {}\", s));\n+                }\n+\n+                err.emit();\n+                panic!(FatalError);\n+            }\n+        }\n+    }\n+}"}, {"sha": "c8af16e9242f05c8277578b04576d11c13d08b04", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 135, "deletions": 69, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,18 +11,20 @@\n use std::mem;\n \n use errors;\n+\n use syntax::ast::{self, Ident, NodeId};\n use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n-use syntax::parse::ParseSess;\n use syntax::fold::Folder;\n+use syntax::parse::ParseSess;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n use syntax::visit::{self, Visitor};\n \n+use syntax_pos::{Span, DUMMY_SP};\n+\n use deriving;\n \n struct CustomDerive {\n@@ -32,8 +34,14 @@ struct CustomDerive {\n     attrs: Vec<ast::Name>,\n }\n \n-struct CollectCustomDerives<'a> {\n+struct AttrProcMacro {\n+    function_name: Ident,\n+    span: Span,\n+}\n+\n+struct CollectProcMacros<'a> {\n     derives: Vec<CustomDerive>,\n+    attr_macros: Vec<AttrProcMacro>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n     is_proc_macro_crate: bool,\n@@ -50,16 +58,17 @@ pub fn modify(sess: &ParseSess,\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n \n-    let derives = {\n-        let mut collect = CollectCustomDerives {\n+    let (derives, attr_macros) = {\n+        let mut collect = CollectProcMacros {\n             derives: Vec::new(),\n+            attr_macros: Vec::new(),\n             in_root: true,\n             handler: handler,\n             is_proc_macro_crate: is_proc_macro_crate,\n             is_test_crate: is_test_crate,\n         };\n         visit::walk_crate(&mut collect, &krate);\n-        collect.derives\n+        (collect.derives, collect.attr_macros)\n     };\n \n     if !is_proc_macro_crate {\n@@ -74,7 +83,7 @@ pub fn modify(sess: &ParseSess,\n         return krate;\n     }\n \n-    krate.module.items.push(mk_registrar(&mut cx, &derives));\n+    krate.module.items.push(mk_registrar(&mut cx, &derives, &attr_macros));\n \n     if krate.exported_macros.len() > 0 {\n         handler.err(\"cannot export macro_rules! macros from a `proc-macro` \\\n@@ -84,69 +93,19 @@ pub fn modify(sess: &ParseSess,\n     return krate\n }\n \n-impl<'a> CollectCustomDerives<'a> {\n+impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n         if self.is_proc_macro_crate &&\n            self.in_root &&\n            *vis == ast::Visibility::Public {\n             self.handler.span_err(sp,\n                                   \"`proc-macro` crate types cannot \\\n                                    export any items other than functions \\\n-                                   tagged with `#[proc_macro_derive]` \\\n-                                   currently\");\n+                                   tagged with `#[proc_macro_derive]` currently\");\n         }\n     }\n-}\n-\n-impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n-    fn visit_item(&mut self, item: &'a ast::Item) {\n-        let mut attrs = item.attrs.iter().filter(|a| a.check_name(\"proc_macro_derive\"));\n-\n-        // First up, make sure we're checking a bare function. If we're not then\n-        // we're just not interested in this item.\n-        //\n-        // If we find one, try to locate a `#[proc_macro_derive]` attribute on\n-        // it.\n-        match item.node {\n-            ast::ItemKind::Fn(..) => {}\n-            _ => {\n-                // Check for invalid use of proc_macro_derive\n-                if let Some(attr) = attrs.next() {\n-                    self.handler.span_err(attr.span(),\n-                                          \"the `#[proc_macro_derive]` \\\n-                                          attribute may only be used \\\n-                                          on bare functions\");\n-                    return;\n-                }\n-                self.check_not_pub_in_root(&item.vis, item.span);\n-                return visit::walk_item(self, item)\n-            }\n-        }\n-\n-        let attr = match attrs.next() {\n-            Some(attr) => attr,\n-            None => {\n-                self.check_not_pub_in_root(&item.vis, item.span);\n-                return visit::walk_item(self, item)\n-            }\n-        };\n-\n-        if let Some(a) = attrs.next() {\n-            self.handler.span_err(a.span(), \"multiple `#[proc_macro_derive]` \\\n-                                             attributes found\");\n-        }\n-\n-        if self.is_test_crate {\n-            return;\n-        }\n-\n-        if !self.is_proc_macro_crate {\n-            self.handler.span_err(attr.span(),\n-                                  \"the `#[proc_macro_derive]` attribute is \\\n-                                   only usable with crates of the `proc-macro` \\\n-                                   crate type\");\n-        }\n \n+    fn collect_custom_derive(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n         // Once we've located the `#[proc_macro_derive]` attribute, verify\n         // that it's of the form `#[proc_macro_derive(Foo)]` or\n         // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n@@ -232,6 +191,101 @@ impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n             };\n             self.handler.span_err(item.span, msg);\n         }\n+    }\n+\n+    fn collect_attr_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n+        if let Some(_) = attr.meta_item_list() {\n+            self.handler.span_err(attr.span, \"`#[proc_macro_attribute]` attribute\n+                cannot contain any meta items\");\n+            return;\n+        }\n+\n+        if self.in_root && item.vis == ast::Visibility::Public {\n+            self.attr_macros.push(AttrProcMacro {\n+                span: item.span,\n+                function_name: item.ident,\n+            });\n+        } else {\n+            let msg = if !self.in_root {\n+                \"functions tagged with `#[proc_macro_attribute]` must \\\n+                 currently reside in the root of the crate\"\n+            } else {\n+                \"functions tagged with `#[proc_macro_attribute]` must be `pub`\"\n+            };\n+            self.handler.span_err(item.span, msg);\n+        }\n+    }\n+}\n+\n+impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n+    fn visit_item(&mut self, item: &'a ast::Item) {\n+        // First up, make sure we're checking a bare function. If we're not then\n+        // we're just not interested in this item.\n+        //\n+        // If we find one, try to locate a `#[proc_macro_derive]` attribute on\n+        // it.\n+        let is_fn = match item.node {\n+            ast::ItemKind::Fn(..) => true,\n+            _ => false,\n+        };\n+\n+        let mut found_attr: Option<&'a ast::Attribute> = None;\n+\n+        for attr in &item.attrs {\n+            if attr.check_name(\"proc_macro_derive\") || attr.check_name(\"proc_macro_attribute\") {\n+                if let Some(prev_attr) = found_attr {\n+                    let msg = if attr.name() == prev_attr.name() {\n+                        format!(\"Only one `#[{}]` attribute is allowed on any given function\",\n+                                attr.name())\n+                    } else {\n+                        format!(\"`#[{}]` and `#[{}]` attributes cannot both be applied \\\n+                                to the same function\", attr.name(), prev_attr.name())\n+                    };\n+\n+                    self.handler.struct_span_err(attr.span(), &msg)\n+                        .span_note(prev_attr.span(), \"Previous attribute here\")\n+                        .emit();\n+\n+                    return;\n+                }\n+\n+                found_attr = Some(attr);\n+            }\n+        }\n+\n+        let attr = match found_attr {\n+            None => {\n+                self.check_not_pub_in_root(&item.vis, item.span);\n+                return visit::walk_item(self, item);\n+            },\n+            Some(attr) => attr,\n+        };\n+\n+        if !is_fn {\n+            let msg = format!(\"the `#[{}]` attribute may only be used on bare functions\",\n+                              attr.name());\n+\n+            self.handler.span_err(attr.span(), &msg);\n+            return;\n+        }\n+\n+        if self.is_test_crate {\n+            return;\n+        }\n+\n+        if !self.is_proc_macro_crate {\n+            let msg = format!(\"the `#[{}]` attribute is only usable with crates of the \\\n+                              `proc-macro` crate type\", attr.name());\n+\n+            self.handler.span_err(attr.span(), &msg);\n+            return;\n+        }\n+\n+        if attr.check_name(\"proc_macro_derive\") {\n+            self.collect_custom_derive(item, attr);\n+        } else if attr.check_name(\"proc_macro_attribute\") {\n+            self.collect_attr_proc_macro(item, attr);\n+        };\n \n         visit::walk_item(self, item);\n     }\n@@ -265,7 +319,8 @@ impl<'a> Visitor<'a> for CollectCustomDerives<'a> {\n //          }\n //      }\n fn mk_registrar(cx: &mut ExtCtxt,\n-                custom_derives: &[CustomDerive]) -> P<ast::Item> {\n+                custom_derives: &[CustomDerive],\n+                custom_attrs: &[AttrProcMacro]) -> P<ast::Item> {\n     let eid = cx.codemap().record_expansion(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n@@ -286,25 +341,36 @@ fn mk_registrar(cx: &mut ExtCtxt,\n     let registry = Ident::from_str(\"Registry\");\n     let registrar = Ident::from_str(\"registrar\");\n     let register_custom_derive = Ident::from_str(\"register_custom_derive\");\n-    let stmts = custom_derives.iter().map(|cd| {\n+    let register_attr_proc_macro = Ident::from_str(\"register_attr_proc_macro\");\n+\n+    let mut stmts = custom_derives.iter().map(|cd| {\n         let path = cx.path_global(cd.span, vec![cd.function_name]);\n         let trait_name = cx.expr_str(cd.span, cd.trait_name);\n         let attrs = cx.expr_vec_slice(\n             span,\n             cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n         );\n-        (path, trait_name, attrs)\n-    }).map(|(path, trait_name, attrs)| {\n         let registrar = cx.expr_ident(span, registrar);\n         let ufcs_path = cx.path(span, vec![proc_macro, __internal, registry,\n                                            register_custom_derive]);\n-        cx.expr_call(span,\n-                     cx.expr_path(ufcs_path),\n-                     vec![registrar, trait_name, cx.expr_path(path), attrs])\n-    }).map(|expr| {\n-        cx.stmt_expr(expr)\n+\n+        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n+                                  vec![registrar, trait_name, cx.expr_path(path), attrs]))\n+\n     }).collect::<Vec<_>>();\n \n+    stmts.extend(custom_attrs.iter().map(|ca| {\n+        let name = cx.expr_str(ca.span, ca.function_name.name);\n+        let path = cx.path_global(ca.span, vec![ca.function_name]);\n+        let registrar = cx.expr_ident(ca.span, registrar);\n+\n+        let ufcs_path = cx.path(span,\n+                                vec![proc_macro, __internal, registry, register_attr_proc_macro]);\n+\n+        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n+                                  vec![registrar, name, cx.expr_path(path)]))\n+    }));\n+\n     let path = cx.path(span, vec![proc_macro, __internal, registry]);\n     let registrar_path = cx.ty_path(path);\n     let arg_ty = cx.ty_rptr(span, registrar_path, None, ast::Mutability::Mutable);"}, {"sha": "1cbde9b1a7c77c137f7b00fd8979f6d55c5a10e5", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -53,6 +53,7 @@\n // ignore-shave\n // ignore-wasm32\n // ignore-wasm64\n+// ignore-emscripten\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "db0c19e96f8211a2996bb6df3e21b8e21b52e0db", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr_proc_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn attr_proc_macro(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "a5359946c09c2626557ba7fbb023b39f9c7db5e2", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -16,8 +16,7 @@ extern crate derive_bad;\n #[derive(\n     A\n )]\n-//~^^ ERROR: custom derive attribute panicked\n-//~| HELP: called `Result::unwrap()` on an `Err` value: LexError\n+//~^^ ERROR: custom derive produced unparseable tokens\n struct A;\n \n fn main() {}"}, {"sha": "7e32800e0f9b8a915e597c5936e905f4dd0882f5", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-proc_macro.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr_proc_macro.rs\n+// gate-test-proc_macro\n+#![feature(use_extern_macros)]\n+\n+extern crate attr_proc_macro;\n+use attr_proc_macro::attr_proc_macro;\n+\n+#[attr_proc_macro]\n+//~^ ERROR: attribute procedural macros are experimental\n+struct Foo;\n+\n+fn main() {\n+    let _ = Foo;\n+}\n\\ No newline at end of file"}, {"sha": "76253487b51fc294f5abd7468e9a4d2a4a9f1a10", "filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-attr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-attr.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr_proc_macro.rs\n+#![feature(proc_macro)]\n+\n+#[macro_use] extern crate attr_proc_macro;\n+\n+#[attr_proc_macro]\n+//~^ ERROR: attribute procedural macros cannot be imported with `#[macro_use]`\n+struct Foo;\n+\n+fn main() {\n+    let _ = Foo;\n+}"}, {"sha": "288cab71ff49c24faf9fefeeaaca5aa150ba5e68", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-custom-attr-mutex.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-custom-attr-mutex.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr_proc_macro.rs\n+\n+#![feature(proc_macro, custom_attribute)]\n+//~^ ERROR Cannot use `#![feature(proc_macro)]` and `#![feature(custom_attribute)] at the same time\n+\n+extern crate attr_proc_macro;\n+use attr_proc_macro::attr_proc_macro;\n+\n+#[attr_proc_macro]\n+fn foo() {}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "cb931329051f981e48c313ef2d389b7cc999e334", "filename": "src/test/compile-fail/asm-bad-clobber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -12,6 +12,7 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "7ba5beac213407e0d189dbaa46df5b34a0329c41", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm)]\n "}, {"sha": "bafbf625e3517530b535f32f465e70dc1e243e37", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -12,6 +12,7 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "161c0b977ff0ce871cc3dcef9d19671311d4afa3", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm)]\n "}, {"sha": "cb8fb19a7c7f0d915f50cdbd35c4328f1f47d112", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm)]\n "}, {"sha": "42bff4c633aa953f933816d029e90a7bc7b32ab4", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-s390x\n+// ignore-emscripten\n \n #![feature(asm)]\n "}, {"sha": "df1a6d52f57391611b147262a06b43773d10970a", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -12,6 +12,7 @@\n // ignore-stage1\n // compile-flags: -C codegen-units=2\n // error-pattern: build without -C codegen-units for more exact errors\n+// ignore-emscripten\n \n #![feature(asm)]\n "}, {"sha": "59b47c2408d7dc19fcdefc721365b317777fe4e7", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n #![feature(asm)]\n \n fn main() {"}, {"sha": "a8a55afa41a0e2f7e4b1b798c75ea9de615f8f85", "filename": "src/test/compile-fail/auxiliary/import_crate_var.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fimport_crate_var.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,5 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub fn f() {}\n+\n #[macro_export]\n-macro_rules! m { () => { use $crate; } }\n+macro_rules! m { () => {\n+    use $crate;\n+    import_crate_var::f();\n+} }"}, {"sha": "853507cbc6d8a6df47def9fc52a6e4a2564e2f4a", "filename": "src/test/compile-fail/cdylib-deps-must-be-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcdylib-deps-must-be-static.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,6 +11,7 @@\n // error-pattern: dependency `cdylib_dep` not found in rlib format\n // aux-build:cdylib-dep.rs\n // ignore-musl\n+// ignore-emscripten\n \n #![crate_type = \"cdylib\"]\n "}, {"sha": "08e8605e91773feab8d2be6b1a8918fe30620787", "filename": "src/test/compile-fail/coherence-overlapping-inherent-impl-trait.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-inherent-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-inherent-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-inherent-impl-trait.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+#![deny(overlapping_inherent_impls)]\n+\n+trait C {}\n+impl C { fn f() {} } //~ ERROR duplicate definitions with name `f`\n+//~^ WARN: this was previously accepted\n+impl C { fn f() {} }\n+fn main() { }"}, {"sha": "d093364497a9234988d65ecd2d10857ae74fc988", "filename": "src/test/compile-fail/const-fn-stability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -16,7 +16,9 @@ const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n \n trait Foo {\n     const fn foo() -> u32; //~ ERROR const fn is unstable\n+                           //~| ERROR trait fns cannot be declared const\n     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+                                //~| ERROR trait fns cannot be declared const\n }\n \n impl Foo {\n@@ -25,6 +27,7 @@ impl Foo {\n \n impl Foo for u32 {\n     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+                                //~| ERROR trait fns cannot be declared const\n }\n \n static FOO: usize = foo();"}, {"sha": "d9664fda2b339afebe9fda9ef4e82f9d6416d699", "filename": "src/test/compile-fail/feature-gate-dropck-ugeh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -28,6 +28,7 @@ struct Foo<T> { data: Vec<T> }\n impl<T> Drop for Foo<T> {\n     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n     //~^ ERROR unsafe_destructor_blind_to_params has been replaced\n+    //~^^ WARN: use of deprecated attribute\n     fn drop(&mut self) { }\n }\n "}, {"sha": "9815db6550d66cc99751050870bde7dc91efc7b9", "filename": "src/test/compile-fail/feature-gate-no-debug.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-no-debug.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(deprecated)]\n+\n #[no_debug] //~ ERROR the `#[no_debug]` attribute is\n fn main() {}"}, {"sha": "e58ba2c88917fbb16f2b135e72c2f78a0a1f43de", "filename": "src/test/compile-fail/import-crate-var.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-crate-var.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,11 +11,13 @@\n // aux-build:import_crate_var.rs\n // error-pattern: `$crate` may not be imported\n // error-pattern: `use $crate;` was erroneously allowed and will become a hard error\n+// error-pattern: compilation successful\n \n #![feature(rustc_attrs)]\n \n #[macro_use] extern crate import_crate_var;\n-m!();\n \n #[rustc_error]\n-fn main() {}\n+fn main() {\n+    m!();\n+}"}, {"sha": "f57f3477a8a86fe1d195877b367df7594e4cf291", "filename": "src/test/compile-fail/issue-18937.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18937.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,8 +10,6 @@\n \n // Regression test for #18937.\n \n-#![deny(extra_requirement_in_impl)]\n-\n use std::fmt;\n \n #[derive(Debug)]"}, {"sha": "bcc2c10653f9c06bd44d487db1d12ffbb33ae6e0", "filename": "src/test/compile-fail/macro-expanded-include/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-include%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-include%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-include%2Ftest.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n #![feature(asm, rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "1fd60b15a72ac266d99fa5112189de962c17b791", "filename": "src/test/compile-fail/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags:-C panic=abort -C prefer-dynamic\n // ignore-musl - no dylibs here\n+// ignore-emscripten\n // error-pattern:`panic_unwind` is not compiled with this crate's panic strategy\n \n // This is a test where the local crate, compiled with `panic=abort`, links to"}, {"sha": "965e4e0e2eabeb13e41302266846c3263c89ceb5", "filename": "src/test/compile-fail/two-allocators-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ftwo-allocators-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fcompile-fail%2Ftwo-allocators-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftwo-allocators-3.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,6 +11,7 @@\n // aux-build:allocator1.rs\n // error-pattern: cannot link together two allocators\n // ignore-musl no dylibs on musl yet\n+// ignore-emscripten\n \n // We're linking std dynamically (via -C prefer-dynamic for this test) which\n // has an allocator and then we're also linking in a new allocator (allocator1)"}, {"sha": "cbdffb4a2554ed5e903ead9fda646788334b4403", "filename": "src/test/parse-fail/bounds-obj-parens.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fparse-fail%2Fbounds-obj-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fparse-fail%2Fbounds-obj-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-obj-parens.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+type A = Box<(Fn(D::Error) -> E) + 'static + Send + Sync>; // OK\n+\n+FAIL //~ ERROR"}, {"sha": "e3c17af82aab403d2eda1ce51af24d796447e050", "filename": "src/test/parse-fail/issue-33569.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-33569.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -13,6 +13,6 @@\n macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n         $(x)(y) //~ ERROR expected `*` or `+`\n-                //~^ ERROR no rules expected the token `y`\n+                //~^ ERROR no rules expected the token `)`\n     }\n }"}, {"sha": "d28d75d81a2fb7ca5f35d42d60afdc0d49e0a792", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-args.rs\n+\n+#![allow(warnings)]\n+#![feature(proc_macro)]\n+\n+extern crate attr_args;\n+use attr_args::attr_with_args;\n+\n+#[attr_with_args(text = \"Hello, world!\")]\n+fn foo() {}\n+\n+fn main() {\n+    assert_eq!(foo(), \"Hello, world!\");\n+}"}, {"sha": "6e1eb395a0a1923f6a215cbaf6400060a8462dd6", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-args.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-args.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn attr_with_args(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let args = args.to_string();\n+\n+    assert_eq!(args, r#\"( text = \"Hello, world!\" )\"#);\n+\n+    let input = input.to_string();\n+\n+    assert_eq!(input, \"fn foo (  ) {  }\");\n+\n+    r#\"\n+        fn foo() -> &'static str { \"Hello, world!\" }\n+    \"#.parse().unwrap()\n+}"}, {"sha": "4624891c1a32d3279ed5b4e4b7bf22c731f0d6c1", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-atob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -19,6 +19,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(AToB)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert_eq!(input, \"#[derive(Copy, Clone)]\\nstruct A;\\n\");\n+    assert_eq!(input, \"#[derive(Copy, Clone)]\\nstruct A;\");\n     \"struct B;\".parse().unwrap()\n }"}, {"sha": "550ffe9400db88a3707bdfe3b52f3452869c7b4c", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-ctod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -19,6 +19,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(CToD)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert_eq!(input, \"struct C;\\n\");\n+    assert_eq!(input, \"struct C;\");\n     \"struct D;\".parse().unwrap()\n }"}, {"sha": "cf96f52823f0f0fcb3b2bdbd2ff5923468c66069", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-same-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -18,12 +18,12 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(AToB)]\n pub fn derive1(input: TokenStream) -> TokenStream {\n     println!(\"input1: {:?}\", input.to_string());\n-    assert_eq!(input.to_string(), \"struct A;\\n\");\n+    assert_eq!(input.to_string(), \"struct A;\");\n     \"#[derive(BToC)] struct B;\".parse().unwrap()\n }\n \n #[proc_macro_derive(BToC)]\n pub fn derive2(input: TokenStream) -> TokenStream {\n-    assert_eq!(input.to_string(), \"struct B;\\n\");\n+    assert_eq!(input.to_string(), \"struct B;\");\n     \"struct C;\".parse().unwrap()\n }"}, {"sha": "90c20444842f480a0fe647498dba81a40f0d041a", "filename": "src/test/run-pass-valgrind/down-with-thread-dtors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdown-with-thread-dtors.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// ignore-emscripten\n \n thread_local!(static FOO: Foo = Foo);\n thread_local!(static BAR: Bar = Bar(1));"}, {"sha": "b72d2659967c4a6f718d3ca5b7b20506e727bbd6", "filename": "src/test/run-pass-valgrind/exit-flushes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -11,6 +11,7 @@\n // no-prefer-dynamic\n // ignore-macos this needs valgrind 3.11 or higher; see\n // https://github.com/rust-lang/rust/pull/30365#issuecomment-165763679\n+// ignore-emscripten\n \n use std::env;\n use std::process::{exit, Command};"}, {"sha": "88e54d30172bc59a1c4669ff0ae66701eb65e16b", "filename": "src/test/run-pass/auxiliary/debuginfo-lto-aux.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdebuginfo-lto-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdebuginfo-lto-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fdebuginfo-lto-aux.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -g --crate-type=rlib\n+\n+pub struct StructWithLifetime<'a>(&'a i32);\n+pub fn mk_struct_with_lt<'a>(x: &'a i32) -> StructWithLifetime<'a> {\n+    StructWithLifetime(x)\n+}\n+\n+pub struct RegularStruct(u32);\n+pub fn mk_regular_struct(x: u32) -> RegularStruct {\n+    RegularStruct(x)\n+}\n+\n+pub fn take_fn(f: fn(i32) -> i32, x: i32) -> i32 {\n+    f(x)\n+}\n+\n+pub fn with_closure(x: i32) -> i32 {\n+    let closure = |i| { x + i };\n+\n+    closure(1) + closure(2)\n+}\n+\n+pub fn generic_fn<T>(x: T) -> (T, u32) {\n+    (x, 1)\n+}\n+\n+pub fn user_of_generic_fn(x: f32) -> (f32, u32) {\n+    generic_fn(x)\n+}"}, {"sha": "6f48978a0000d6a712365e8b1a80c320946ff30a", "filename": "src/test/run-pass/auxiliary/sepcomp_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsepcomp_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsepcomp_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fsepcomp_lib.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -C codegen-units=3 --crate-type=rlib,dylib\n+// compile-flags: -C codegen-units=3 --crate-type=rlib,dylib -g\n \n pub mod a {\n     pub fn one() -> usize {"}, {"sha": "c29cfafe438ca86dc3047b5d4a33b54deb5b2539", "filename": "src/test/run-pass/debuginfo-lto.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fdebuginfo-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fdebuginfo-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdebuginfo-lto.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test case makes sure that we don't run into LLVM's dreaded\n+// \"possible ODR violation\" assertion when compiling with LTO + Debuginfo.\n+// It covers cases that have traditionally been prone to cause this error.\n+// If new cases emerge, add them to this file.\n+\n+// aux-build:debuginfo-lto-aux.rs\n+// compile-flags: -C lto -g\n+// no-prefer-dynamic\n+\n+extern crate debuginfo_lto_aux;\n+\n+fn some_fn(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+fn main() {\n+    let i = 0;\n+    let _ = debuginfo_lto_aux::mk_struct_with_lt(&i);\n+    let _ = debuginfo_lto_aux::mk_regular_struct(1);\n+    let _ = debuginfo_lto_aux::take_fn(some_fn, 1);\n+    let _ = debuginfo_lto_aux::with_closure(22);\n+    let _ = debuginfo_lto_aux::generic_fn(0f32);\n+}"}, {"sha": "222f32754fb6b9415f7aeb808dcf5113b0c33fa3", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -20,6 +20,8 @@\n // Ignore 32 bit targets:\n // ignore-x86, ignore-arm\n \n+// ignore-emscripten\n+\n #![feature(i128_type)]\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]"}, {"sha": "3eb1c95050267b59344c7ddef26a2c53499a6162", "filename": "src/test/run-pass/i128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,6 +10,9 @@\n \n // ignore-stage0\n // ignore-stage1\n+\n+// ignore-emscripten\n+\n #![feature(i128_type, test)]\n \n extern crate test;"}, {"sha": "08cc993ce4fb2f44076a0562852b8b57fdb8a7a9", "filename": "src/test/run-pass/issue-21634.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21634.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(cfg_target_feature)]\n \n-\n+#[cfg(any(not(target_arch = \"x86\"), target_feature = \"sse2\"))]\n fn main() {\n     if let Ok(x) = \"3.1415\".parse::<f64>() {\n         assert_eq!(false, x <= 0.0);\n@@ -21,3 +22,6 @@ fn main() {\n         assert_eq!(8.1415, { x += 5.0; x });\n     }\n }\n+\n+#[cfg(all(target_arch = \"x86\", not(target_feature = \"sse2\")))]\n+fn main() {}"}, {"sha": "9c1c999d090ef21d99a7e38b7c8092893a7890de", "filename": "src/test/run-pass/issue-38942.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-38942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-38942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38942.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See https://github.com/rust-lang/rust/issues/38942\n+\n+#[repr(u64)]\n+pub enum NSEventType {\n+    NSEventTypePressure,\n+}\n+\n+pub const A: u64 = NSEventType::NSEventTypePressure as u64;\n+\n+fn banana() -> u64 {\n+    A\n+}\n+\n+fn main() {\n+    println!(\"banana! {}\", banana());\n+}"}, {"sha": "c3a58844547d69b292463ee217dec197fa4f6a14", "filename": "src/test/run-pass/issue-39089.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-39089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fissue-39089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39089.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<T: ?for<'a> Sized>() {}\n+\n+fn main() {}"}, {"sha": "f3e52fbd32f3e92d0ff2d1fcedf59ec9f9c75879", "filename": "src/test/run-pass/sepcomp-lib-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -12,7 +12,7 @@\n // separately compiled.\n \n // aux-build:sepcomp_lib.rs\n-// compile-flags: -C lto\n+// compile-flags: -C lto -g\n // no-prefer-dynamic\n // ignore-android FIXME #18800\n "}, {"sha": "8d88c17af79b3f1c7abc5040b326ec35b4488d33", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,9 +10,20 @@\n \n #![feature(cfg_target_feature)]\n \n-pub fn main() {\n+use std::env;\n+\n+fn main() {\n+    match env::var(\"TARGET\") {\n+        Ok(s) => {\n+            // Skip this tests on i586-unknown-linux-gnu where sse2 is disabled\n+            if s.contains(\"i586\") {\n+                return\n+            }\n+        }\n+        Err(_) => return,\n+    }\n     if cfg!(any(target_arch = \"x86\", target_arch = \"x86_64\")) {\n         assert!(cfg!(target_feature = \"sse2\"),\n-            \"SSE2 was not detected as available on an x86 platform\");\n+                \"SSE2 was not detected as available on an x86 platform\");\n     }\n }"}, {"sha": "448bb7de7727fc467aa98de8c8135cccc5474606", "filename": "src/test/run-pass/stdio-is-blocking.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstdio-is-blocking.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n use std::env;\n use std::io::prelude::*;\n use std::process::Command;"}, {"sha": "d9826373cceb00803a2525ca120793b4da747e6e", "filename": "src/test/run-pass/try-wait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-wait.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten\n+\n #![feature(process_try_wait)]\n \n use std::env;"}, {"sha": "139d42e3a3524b39bb7b3cac5e4c91c77014cc5d", "filename": "src/test/run-pass/u128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -10,6 +10,9 @@\n \n // ignore-stage0\n // ignore-stage1\n+\n+// ignore-emscripten\n+\n #![feature(i128_type, test)]\n \n extern crate test;"}, {"sha": "021b571fe793cd77c84ca3f1a302db1655883077", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait\n+error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n   --> $DIR/proj-outlives-region.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -9,11 +9,6 @@ error[E0276]: impl has stricter requirements than trait\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n-note: lint level defined here\n-  --> $DIR/proj-outlives-region.rs:12:9\n-   |\n-12 | #![deny(extra_requirement_in_impl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4df337c525743f778e21582776fe22c1f9c2194e", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -1,4 +1,4 @@\n-error[E0276]: impl has stricter requirements than trait\n+error[E0276]: impl has stricter requirements than trait, #[deny(extra_requirement_in_impl)] on by default\n   --> $DIR/region-unrelated.rs:22:5\n    |\n 17 |     fn foo() where T: 'a;\n@@ -9,11 +9,6 @@ error[E0276]: impl has stricter requirements than trait\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n-note: lint level defined here\n-  --> $DIR/region-unrelated.rs:12:9\n-   |\n-12 | #![deny(extra_requirement_in_impl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d541aa599a48b2bdbbf24c1b8336c707c52ab246", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0425]: cannot find value `A` in module `namespaced_enums`\n    |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use namespaced_enums::Foo::A;`\n+             `use namespaced_enums::Foo::A;`\n \n error[E0425]: cannot find function `B` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:18:13\n@@ -14,7 +14,7 @@ error[E0425]: cannot find function `B` in module `namespaced_enums`\n    |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use namespaced_enums::Foo::B;`\n+             `use namespaced_enums::Foo::B;`\n \n error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:21:13\n@@ -23,7 +23,7 @@ error[E0422]: cannot find struct, variant or union type `C` in module `namespace\n    |             ^^^^^^^^^^^^^^^^^^^ not found in `namespaced_enums`\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use namespaced_enums::Foo::C;`\n+             `use namespaced_enums::Foo::C;`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "69c48cc1f3241b9bbd0658c0119eabdb0410014a", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,9 +5,9 @@ error[E0574]: expected struct, variant or union type, found enum `Result`\n    |         ^^^^^^ not a struct, variant or union type\n    |\n    = help: possible better candidates are found in other modules, you can import them into scope:\n-   = help:   `use std::fmt::Result;`\n-   = help:   `use std::io::Result;`\n-   = help:   `use std::thread::Result;`\n+             `use std::fmt::Result;`\n+             `use std::io::Result;`\n+             `use std::thread::Result;`\n \n error: aborting due to previous error\n "}, {"sha": "ea6841e600972e78c4f376da98d3b388f4cc56fb", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0422]: cannot find struct, variant or union type `E` in this scope\n    |     ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use SomeEnum::E;`\n+             `use SomeEnum::E;`\n \n error: aborting due to previous error\n "}, {"sha": "f38491d5362587200e7b7df5eca3ca0640604b79", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,9 +5,9 @@ error[E0405]: cannot find trait `Mul` in this scope\n    |      ^^^ not found in this scope\n    |\n    = help: possible candidates are found in other modules, you can import them into scope:\n-   = help:   `use mul1::Mul;`\n-   = help:   `use mul2::Mul;`\n-   = help:   `use std::ops::Mul;`\n+             `use mul1::Mul;`\n+             `use mul2::Mul;`\n+             `use std::ops::Mul;`\n \n error[E0412]: cannot find type `Mul` in this scope\n   --> $DIR/issue-21221-1.rs:72:16\n@@ -16,11 +16,11 @@ error[E0412]: cannot find type `Mul` in this scope\n    |                ^^^ not found in this scope\n    |\n    = help: possible candidates are found in other modules, you can import them into scope:\n-   = help:   `use mul1::Mul;`\n-   = help:   `use mul2::Mul;`\n-   = help:   `use mul3::Mul;`\n-   = help:   `use mul4::Mul;`\n-   = help:   and 2 other candidates\n+             `use mul1::Mul;`\n+             `use mul2::Mul;`\n+             `use mul3::Mul;`\n+             `use mul4::Mul;`\n+           and 2 other candidates\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:83:6\n@@ -35,7 +35,7 @@ error[E0405]: cannot find trait `Div` in this scope\n    |      ^^^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use std::ops::Div;`\n+             `use std::ops::Div;`\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "14dac7de4b2e13af1aa4796bdcc75fa3830b189c", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0405]: cannot find trait `T` in this scope\n    |      ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use foo::bar::T;`\n+             `use foo::bar::T;`\n \n error: main function not found\n "}, {"sha": "e1e00571e5d4a1bb5d110828db316c98df5c828f", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0405]: cannot find trait `OuterTrait` in this scope\n    |      ^^^^^^^^^^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use issue_21221_3::outer::OuterTrait;`\n+             `use issue_21221_3::outer::OuterTrait;`\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "569315a59cf34c8d9d1a8e89f3840bd633f5d307", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0405]: cannot find trait `T` in this scope\n    |      ^ not found in this scope\n    |\n    = help: possible candidate is found in another module, you can import it into scope:\n-   = help:   `use issue_21221_4::T;`\n+             `use issue_21221_4::T;`\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "a7dd494d75b0df694304d8f1b2f3279e588a7f58", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0404]: expected trait, found type alias `Foo`\n    |      ^^^ type aliases cannot be used for traits\n    |\n    = help: possible better candidate is found in another module, you can import it into scope:\n-   = help:   `use issue_3907::Foo;`\n+             `use issue_3907::Foo;`\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "9dab2f77898153eea02c08e92d5ca9bc2089b71a", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -5,7 +5,7 @@ error[E0404]: expected trait, found type parameter `Add`\n    |                     ^^^ not a trait\n    |\n    = help: possible better candidate is found in another module, you can import it into scope:\n-   = help:   `use std::ops::Add;`\n+             `use std::ops::Add;`\n \n error: main function not found\n "}, {"sha": "43d02479fb17de8442e823b401c537707c5a2966", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -319,6 +319,10 @@ pub fn run_tests(config: &Config) {\n     // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n     // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n     env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");\n+\n+    // Let tests know which target they're running as\n+    env::set_var(\"TARGET\", &config.target);\n+\n     let res = test::run_tests_console(&opts, tests.into_iter().collect());\n     match res {\n         Ok(true) => {}"}, {"sha": "4202356bd97a0aa7c8a6685058be0426fe261e08", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -12,39 +12,44 @@ use std::env;\n use common::Config;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n-const OS_TABLE: &'static [(&'static str, &'static str)] = &[(\"android\", \"android\"),\n-                                                            (\"bitrig\", \"bitrig\"),\n-                                                            (\"darwin\", \"macos\"),\n-                                                            (\"dragonfly\", \"dragonfly\"),\n-                                                            (\"freebsd\", \"freebsd\"),\n-                                                            (\"haiku\", \"haiku\"),\n-                                                            (\"ios\", \"ios\"),\n-                                                            (\"linux\", \"linux\"),\n-                                                            (\"mingw32\", \"windows\"),\n-                                                            (\"netbsd\", \"netbsd\"),\n-                                                            (\"openbsd\", \"openbsd\"),\n-                                                            (\"win32\", \"windows\"),\n-                                                            (\"windows\", \"windows\"),\n-                                                            (\"solaris\", \"solaris\"),\n-                                                            (\"emscripten\", \"emscripten\")];\n+const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n+    (\"android\", \"android\"),\n+    (\"bitrig\", \"bitrig\"),\n+    (\"darwin\", \"macos\"),\n+    (\"dragonfly\", \"dragonfly\"),\n+    (\"freebsd\", \"freebsd\"),\n+    (\"haiku\", \"haiku\"),\n+    (\"ios\", \"ios\"),\n+    (\"linux\", \"linux\"),\n+    (\"mingw32\", \"windows\"),\n+    (\"netbsd\", \"netbsd\"),\n+    (\"openbsd\", \"openbsd\"),\n+    (\"win32\", \"windows\"),\n+    (\"windows\", \"windows\"),\n+    (\"solaris\", \"solaris\"),\n+    (\"emscripten\", \"emscripten\"),\n+];\n \n-const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[(\"aarch64\", \"aarch64\"),\n-                                                              (\"amd64\", \"x86_64\"),\n-                                                              (\"arm\", \"arm\"),\n-                                                              (\"arm64\", \"aarch64\"),\n-                                                              (\"hexagon\", \"hexagon\"),\n-                                                              (\"i386\", \"x86\"),\n-                                                              (\"i686\", \"x86\"),\n-                                                              (\"mips\", \"mips\"),\n-                                                              (\"msp430\", \"msp430\"),\n-                                                              (\"powerpc\", \"powerpc\"),\n-                                                              (\"powerpc64\", \"powerpc64\"),\n-                                                              (\"s390x\", \"s390x\"),\n-                                                              (\"sparc\", \"sparc\"),\n-                                                              (\"x86_64\", \"x86_64\"),\n-                                                              (\"xcore\", \"xcore\"),\n-                                                              (\"asmjs\", \"asmjs\"),\n-                                                              (\"wasm32\", \"wasm32\")];\n+const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n+    (\"aarch64\", \"aarch64\"),\n+    (\"amd64\", \"x86_64\"),\n+    (\"arm\", \"arm\"),\n+    (\"arm64\", \"aarch64\"),\n+    (\"hexagon\", \"hexagon\"),\n+    (\"i386\", \"x86\"),\n+    (\"i586\", \"x86\"),\n+    (\"i686\", \"x86\"),\n+    (\"mips\", \"mips\"),\n+    (\"msp430\", \"msp430\"),\n+    (\"powerpc\", \"powerpc\"),\n+    (\"powerpc64\", \"powerpc64\"),\n+    (\"s390x\", \"s390x\"),\n+    (\"sparc\", \"sparc\"),\n+    (\"x86_64\", \"x86_64\"),\n+    (\"xcore\", \"xcore\"),\n+    (\"asmjs\", \"asmjs\"),\n+    (\"wasm32\", \"wasm32\"),\n+];\n \n pub fn get_os(triple: &str) -> &'static str {\n     for &(triple_os, os) in OS_TABLE {"}, {"sha": "9e365456a6c0dbda0322f38d523ef9020f5ab814", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedb49cbc9977fee56bb51a20980b380aca53659/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=aedb49cbc9977fee56bb51a20980b380aca53659", "patch": "@@ -172,7 +172,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         \"use_extern_macros\", \"staged_api\", \"const_indexing\",\n         \"unboxed_closures\", \"stmt_expr_attributes\",\n         \"cfg_target_thread_local\", \"unwind_attributes\",\n-        \"inclusive_range_syntax\"\n+        \"inclusive_range_syntax\", \"proc_macro\"\n     ];\n \n     // Only check the number of lang features."}]}