{"sha": "1639f2d2899310038635be2c307b60adf2bde125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzlmMmQyODk5MzEwMDM4NjM1YmUyYzMwN2I2MGFkZjJiZGUxMjU=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2016-03-31T02:09:09Z"}, "committer": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2016-03-31T03:02:36Z"}, "message": "Fix the variances of HashMap and HashSet iterators", "tree": {"sha": "54b449746e84c2de2be541a08c5c1a17342020df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b449746e84c2de2be541a08c5c1a17342020df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1639f2d2899310038635be2c307b60adf2bde125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1639f2d2899310038635be2c307b60adf2bde125", "html_url": "https://github.com/rust-lang/rust/commit/1639f2d2899310038635be2c307b60adf2bde125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1639f2d2899310038635be2c307b60adf2bde125/comments", "author": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285a40a90691d1f3129bebcead8c6f83363d7c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/285a40a90691d1f3129bebcead8c6f83363d7c83", "html_url": "https://github.com/rust-lang/rust/commit/285a40a90691d1f3129bebcead8c6f83363d7c83"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "77ce27476fd9956406e735cfdcf878a0b50494a1", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1639f2d2899310038635be2c307b60adf2bde125/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639f2d2899310038635be2c307b60adf2bde125/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1639f2d2899310038635be2c307b60adf2bde125", "patch": "@@ -15,7 +15,7 @@ use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};\n use hash::{Hash, SipHasher, BuildHasher};\n-use iter::{self, Map, FromIterator};\n+use iter::FromIterator;\n use mem::{self, replace};\n use ops::{Deref, Index};\n use rand::{self, Rng};\n@@ -836,8 +836,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n-        fn first<A, B>((a, _): (A, B)) -> A { a }\n-        Keys { inner: self.iter().map(first) }\n+        Keys { inner: self.iter() }\n     }\n \n     /// An iterator visiting all values in arbitrary order.\n@@ -859,8 +858,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n-        fn second<A, B>((_, b): (A, B)) -> B { b }\n-        Values { inner: self.iter().map(second) }\n+        Values { inner: self.iter() }\n     }\n \n     /// An iterator visiting all key-value pairs in arbitrary order.\n@@ -992,9 +990,8 @@ impl<K, V, S> HashMap<K, V, S>\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<K, V> {\n-        fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n         Drain {\n-            inner: self.table.drain().map(last_two),\n+            inner: self.table.drain(),\n         }\n     }\n \n@@ -1224,13 +1221,13 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n /// HashMap move iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n-    inner: iter::Map<table::IntoIter<K, V>, fn((SafeHash, K, V)) -> (K, V)>\n+    inner: table::IntoIter<K, V>\n }\n \n /// HashMap keys iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n-    inner: Map<Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n+    inner: Iter<'a, K, V>\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n@@ -1246,7 +1243,7 @@ impl<'a, K, V> Clone for Keys<'a, K, V> {\n /// HashMap values iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n-    inner: Map<Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n+    inner: Iter<'a, K, V>\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n@@ -1262,7 +1259,7 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n /// HashMap drain iterator.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n-    inner: iter::Map<table::Drain<'a, K, V>, fn((SafeHash, K, V)) -> (K, V)>\n+    inner: table::Drain<'a, K, V>\n }\n \n enum InternalEntry<K, V, M> {\n@@ -1397,9 +1394,8 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S>\n     /// let vec: Vec<(&str, isize)> = map.into_iter().collect();\n     /// ```\n     fn into_iter(self) -> IntoIter<K, V> {\n-        fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n         IntoIter {\n-            inner: self.table.into_iter().map(last_two)\n+            inner: self.table.into_iter()\n         }\n     }\n }\n@@ -1432,7 +1428,7 @@ impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (K, V);\n \n-    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n+    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next().map(|(_, k, v)| (k, v)) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1444,7 +1440,7 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n \n-    #[inline] fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n+    #[inline] fn next(&mut self) -> Option<(&'a K)> { self.inner.next().map(|(k, _)| k) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1456,7 +1452,7 @@ impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n \n-    #[inline] fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n+    #[inline] fn next(&mut self) -> Option<(&'a V)> { self.inner.next().map(|(_, v)| v) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1468,7 +1464,7 @@ impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n \n-    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n+    #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next().map(|(_, k, v)| (k, v)) }\n     #[inline] fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7e79aef300be5e61df1659e7bed6d59767412814", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1639f2d2899310038635be2c307b60adf2bde125/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639f2d2899310038635be2c307b60adf2bde125/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=1639f2d2899310038635be2c307b60adf2bde125", "patch": "@@ -11,7 +11,7 @@\n use borrow::Borrow;\n use fmt;\n use hash::{Hash, BuildHasher};\n-use iter::{Map, Chain, FromIterator};\n+use iter::{Chain, FromIterator};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n \n use super::Recover;\n@@ -414,8 +414,7 @@ impl<T, S> HashSet<T, S>\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A { a }\n-        Drain { iter: self.map.drain().map(first) }\n+        Drain { iter: self.map.drain() }\n     }\n \n     /// Clears the set, removing all values.\n@@ -809,13 +808,13 @@ pub struct Iter<'a, K: 'a> {\n /// HashSet move iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n-    iter: Map<map::IntoIter<K, ()>, fn((K, ())) -> K>\n+    iter: map::IntoIter<K, ()>\n }\n \n /// HashSet drain iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n-    iter: Map<map::Drain<'a, K, ()>, fn((K, ())) -> K>,\n+    iter: map::Drain<'a, K, ()>,\n }\n \n /// Intersection iterator\n@@ -889,8 +888,7 @@ impl<T, S> IntoIterator for HashSet<T, S>\n     /// }\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A { a }\n-        IntoIter { iter: self.map.into_iter().map(first) }\n+        IntoIter { iter: self.map.into_iter() }\n     }\n }\n \n@@ -914,7 +912,7 @@ impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n impl<K> Iterator for IntoIter<K> {\n     type Item = K;\n \n-    fn next(&mut self) -> Option<K> { self.iter.next() }\n+    fn next(&mut self) -> Option<K> { self.iter.next().map(|(k, _)| k) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -926,7 +924,7 @@ impl<K> ExactSizeIterator for IntoIter<K> {\n impl<'a, K> Iterator for Drain<'a, K> {\n     type Item = K;\n \n-    fn next(&mut self) -> Option<K> { self.iter.next() }\n+    fn next(&mut self) -> Option<K> { self.iter.next().map(|(k, _)| k) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}