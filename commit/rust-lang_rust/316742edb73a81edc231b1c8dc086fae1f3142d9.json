{"sha": "316742edb73a81edc231b1c8dc086fae1f3142d9", "node_id": "C_kwDOAAsO6NoAKDMxNjc0MmVkYjczYTgxZWRjMjMxYjFjOGRjMDg2ZmFlMWYzMTQyZDk", "commit": {"author": {"name": "Michal Nazarewicz", "email": "mina86@mina86.com", "date": "2023-01-22T14:46:53Z"}, "committer": {"name": "Michal Nazarewicz", "email": "mina86@mina86.com", "date": "2023-01-24T02:04:05Z"}, "message": "io: soften \u2018at most one write attempt\u2019 requirement in io::Write::write\n\nAt the moment, documentation of std::io::Write::write indicates that\ncall to it \u2018represents at most one attempt to write to any wrapped\nobject\u2019.  It seems that such wording was put there to contrast it\nwith pre-1.0 interface which attempted to write all the data (it has\nsince been changed in [RFC 517]).\n\nHowever, the requirement puts unnecessary constraints and may complicate\nadaptors which perform non-trivial transformations on the data.  For\nexample, they may maintain an internal buffer which needs to be written\nout before the write method accepts more data.  It might be natural to\ncode the method such that it flushes the buffer and then grabs another\nchunk of user data.  With the current wording in the documentation, the\nadaptor would be forced to return Ok(0).\n\nThis commit softens the wording such that implementations can choose\ncode structure which makes most sense for their particular use case.\n\nWhile at it, elaborate on the meaning of `Ok(0)` return pointing out\nthat the write_all methods interprets it as an error.\n\n[RFC 517]: https://rust-lang.github.io/rfcs/0517-io-os-reform.html", "tree": {"sha": "b11bb3578cabc1e96386751326aeec441a068535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11bb3578cabc1e96386751326aeec441a068535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/316742edb73a81edc231b1c8dc086fae1f3142d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/316742edb73a81edc231b1c8dc086fae1f3142d9", "html_url": "https://github.com/rust-lang/rust/commit/316742edb73a81edc231b1c8dc086fae1f3142d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/316742edb73a81edc231b1c8dc086fae1f3142d9/comments", "author": {"login": "mina86", "id": 32383, "node_id": "MDQ6VXNlcjMyMzgz", "avatar_url": "https://avatars.githubusercontent.com/u/32383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mina86", "html_url": "https://github.com/mina86", "followers_url": "https://api.github.com/users/mina86/followers", "following_url": "https://api.github.com/users/mina86/following{/other_user}", "gists_url": "https://api.github.com/users/mina86/gists{/gist_id}", "starred_url": "https://api.github.com/users/mina86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mina86/subscriptions", "organizations_url": "https://api.github.com/users/mina86/orgs", "repos_url": "https://api.github.com/users/mina86/repos", "events_url": "https://api.github.com/users/mina86/events{/privacy}", "received_events_url": "https://api.github.com/users/mina86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mina86", "id": 32383, "node_id": "MDQ6VXNlcjMyMzgz", "avatar_url": "https://avatars.githubusercontent.com/u/32383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mina86", "html_url": "https://github.com/mina86", "followers_url": "https://api.github.com/users/mina86/followers", "following_url": "https://api.github.com/users/mina86/following{/other_user}", "gists_url": "https://api.github.com/users/mina86/gists{/gist_id}", "starred_url": "https://api.github.com/users/mina86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mina86/subscriptions", "organizations_url": "https://api.github.com/users/mina86/orgs", "repos_url": "https://api.github.com/users/mina86/repos", "events_url": "https://api.github.com/users/mina86/events{/privacy}", "received_events_url": "https://api.github.com/users/mina86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7", "html_url": "https://github.com/rust-lang/rust/commit/c8e6a9e8b6251bbc8276cb78cabe1998deecbed7"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "aa34d4be1924276c086610669a8eb9fa00df781c", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/316742edb73a81edc231b1c8dc086fae1f3142d9/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316742edb73a81edc231b1c8dc086fae1f3142d9/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=316742edb73a81edc231b1c8dc086fae1f3142d9", "patch": "@@ -1385,17 +1385,18 @@ pub trait Write {\n     ///\n     /// This function will attempt to write the entire contents of `buf`, but\n     /// the entire write might not succeed, or the write may also generate an\n-    /// error. A call to `write` represents *at most one* attempt to write to\n+    /// error. Typically, a call to `write` represents one attempt to write to\n     /// any wrapped object.\n     ///\n     /// Calls to `write` are not guaranteed to block waiting for data to be\n     /// written, and a write which would otherwise block can be indicated through\n     /// an [`Err`] variant.\n     ///\n-    /// If the return value is [`Ok(n)`] then it must be guaranteed that\n-    /// `n <= buf.len()`. A return value of `0` typically means that the\n-    /// underlying object is no longer able to accept bytes and will likely not\n-    /// be able to in the future as well, or that the buffer provided is empty.\n+    /// If the return value is [`Ok(n)`] then it must be guaranteed that `n <=\n+    /// buf.len()`. Unless `input` is empty, this function shouldn\u2019t return `0`\n+    /// since caller may interpret that as an error (the default implementation\n+    /// of [`Write::write_all`] does exactly that).  To indicate lack of space\n+    /// function should return [`ErrorKind::StorageFull`] error instead.\n     ///\n     /// # Errors\n     ///"}]}