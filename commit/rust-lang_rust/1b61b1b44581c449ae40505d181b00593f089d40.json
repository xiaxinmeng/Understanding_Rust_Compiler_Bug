{"sha": "1b61b1b44581c449ae40505d181b00593f089d40", "node_id": "C_kwDOAAsO6NoAKDFiNjFiMWI0NDU4MWM0NDlhZTQwNTA1ZDE4MWIwMDU5M2YwODlkNDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T04:44:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T04:44:51Z"}, "message": "Auto merge of #90299 - matthiaskrgr:rollup-n77ntld, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #90181 (fix(rustc_typeck): report function argument errors on matching type)\n - #90241 (Make thiscall abi on unsupported platforms a hard error)\n - #90294 (Update books)\n - #90295 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4b965d44849509c4c120f51231a469150bc2e03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b965d44849509c4c120f51231a469150bc2e03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b61b1b44581c449ae40505d181b00593f089d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b61b1b44581c449ae40505d181b00593f089d40", "html_url": "https://github.com/rust-lang/rust/commit/1b61b1b44581c449ae40505d181b00593f089d40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b61b1b44581c449ae40505d181b00593f089d40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17e13b549f5f83cd9ffca9a540090754eb95115c", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e13b549f5f83cd9ffca9a540090754eb95115c", "html_url": "https://github.com/rust-lang/rust/commit/17e13b549f5f83cd9ffca9a540090754eb95115c"}, {"sha": "897b5dfeee5152671cedd5471a58944e20d0af25", "url": "https://api.github.com/repos/rust-lang/rust/commits/897b5dfeee5152671cedd5471a58944e20d0af25", "html_url": "https://github.com/rust-lang/rust/commit/897b5dfeee5152671cedd5471a58944e20d0af25"}], "stats": {"total": 478, "additions": 288, "deletions": 190}, "files": [{"sha": "bf19f5e0ae32ff88b9eff8cd8f04a337825d8a28", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -276,7 +276,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.58.0\"\n+version = \"0.59.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\","}, {"sha": "537a190211e553bb85a0ce2953266eb78b50ef3c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1522,6 +1522,7 @@ impl Target {\n             AmdGpuKernel => self.arch == \"amdgcn\",\n             AvrInterrupt | AvrNonBlockingInterrupt => self.arch == \"avr\",\n             Wasm => [\"wasm32\", \"wasm64\"].contains(&&self.arch[..]),\n+            Thiscall { .. } => self.arch == \"x86\",\n             // On windows these fall-back to platform native calling convention (C) when the\n             // architecture is not supported.\n             //\n@@ -1552,15 +1553,13 @@ impl Target {\n             // > convention is used.\n             //\n             // -- https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n-            Stdcall { .. } | Fastcall | Thiscall { .. } | Vectorcall if self.is_like_windows => {\n-                true\n-            }\n+            Stdcall { .. } | Fastcall | Vectorcall if self.is_like_windows => true,\n             // Outside of Windows we want to only support these calling conventions for the\n             // architectures for which these calling conventions are actually well defined.\n-            Stdcall { .. } | Fastcall | Thiscall { .. } if self.arch == \"x86\" => true,\n+            Stdcall { .. } | Fastcall if self.arch == \"x86\" => true,\n             Vectorcall if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => true,\n             // Return a `None` for other cases so that we know to emit a future compat lint.\n-            Stdcall { .. } | Fastcall | Thiscall { .. } | Vectorcall => return None,\n+            Stdcall { .. } | Fastcall | Vectorcall => return None,\n         })\n     }\n "}, {"sha": "5d17693dc0820dd9336aa803167cee7243e42089", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1492,6 +1492,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n+            ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => {\n+                self.get_parent_trait_ref(&parent_code)\n+            }\n             _ => None,\n         }\n     }"}, {"sha": "2689e2134fc6b5e0ded2dd2e01f732375f0e4424", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1422,6 +1422,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         while let Some(code) = next_code {\n             debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n             match code {\n+                ObligationCauseCode::FunctionArgumentObligation { parent_code, .. } => {\n+                    next_code = Some(parent_code.as_ref());\n+                }\n                 ObligationCauseCode::DerivedObligation(derived_obligation)\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n                 | ObligationCauseCode::ImplDerivedObligation(derived_obligation) => {"}, {"sha": "b3e18dab363692e303e13e4977355579d1967c68", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 83, "deletions": 65, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -370,45 +370,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //    `ExpectHasType(expected_ty)`, or the `formal_ty` otherwise.\n                 let coerce_ty = expected.only_has_type(self).unwrap_or(formal_ty);\n \n+                final_arg_types.push((i, checked_ty, coerce_ty));\n+\n                 // Cause selection errors caused by resolving a single argument to point at the\n                 // argument and not the call. This is otherwise redundant with the `demand_coerce`\n                 // call immediately after, but it lets us customize the span pointed to in the\n                 // fulfillment error to be more accurate.\n                 let _ = self.resolve_vars_with_obligations_and_mutate_fulfillment(\n                     coerce_ty,\n                     |errors| {\n-                        // This is not coming from a macro or a `derive`.\n-                        if sp.desugaring_kind().is_none()\n-                        && !arg.span.from_expansion()\n-                        // Do not change the spans of `async fn`s.\n-                        && !matches!(\n-                            expr.kind,\n-                            hir::ExprKind::Call(\n-                                hir::Expr {\n-                                    kind: hir::ExprKind::Path(hir::QPath::LangItem(_, _)),\n-                                    ..\n-                                },\n-                                _\n-                            )\n-                        ) {\n-                            for error in errors {\n-                                error.obligation.cause.make_mut().span = arg.span;\n-                                let code = error.obligation.cause.code.clone();\n-                                error.obligation.cause.make_mut().code =\n-                                    ObligationCauseCode::FunctionArgumentObligation {\n-                                        arg_hir_id: arg.hir_id,\n-                                        call_hir_id: expr.hir_id,\n-                                        parent_code: Lrc::new(code),\n-                                    };\n-                            }\n-                        }\n+                        self.point_at_type_arg_instead_of_call_if_possible(errors, expr);\n+                        self.point_at_arg_instead_of_call_if_possible(\n+                            errors,\n+                            &final_arg_types,\n+                            expr,\n+                            sp,\n+                            args,\n+                        );\n                     },\n                 );\n \n                 // We're processing function arguments so we definitely want to use\n                 // two-phase borrows.\n                 self.demand_coerce(&arg, checked_ty, coerce_ty, None, AllowTwoPhase::Yes);\n-                final_arg_types.push((i, checked_ty, coerce_ty));\n \n                 // 3. Relate the expected type and the formal one,\n                 //    if the expected type was used for the coercion.\n@@ -973,45 +957,79 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 continue;\n             }\n \n-            if let ty::PredicateKind::Trait(predicate) =\n-                error.obligation.predicate.kind().skip_binder()\n-            {\n-                // Collect the argument position for all arguments that could have caused this\n-                // `FulfillmentError`.\n-                let mut referenced_in = final_arg_types\n-                    .iter()\n-                    .map(|&(i, checked_ty, _)| (i, checked_ty))\n-                    .chain(final_arg_types.iter().map(|&(i, _, coerced_ty)| (i, coerced_ty)))\n-                    .flat_map(|(i, ty)| {\n-                        let ty = self.resolve_vars_if_possible(ty);\n-                        // We walk the argument type because the argument's type could have\n-                        // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                        if ty.walk(self.tcx).any(|arg| arg == predicate.self_ty().into()) {\n-                            Some(i)\n-                        } else {\n-                            None\n-                        }\n-                    })\n-                    .collect::<Vec<usize>>();\n-\n-                // Both checked and coerced types could have matched, thus we need to remove\n-                // duplicates.\n-\n-                // We sort primitive type usize here and can use unstable sort\n-                referenced_in.sort_unstable();\n-                referenced_in.dedup();\n-\n-                if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n-                    // We make sure that only *one* argument matches the obligation failure\n-                    // and we assign the obligation's span to its expression's.\n-                    error.obligation.cause.make_mut().span = args[ref_in].span;\n-                    let code = error.obligation.cause.code.clone();\n-                    error.obligation.cause.make_mut().code =\n-                        ObligationCauseCode::FunctionArgumentObligation {\n-                            arg_hir_id: args[ref_in].hir_id,\n-                            call_hir_id: expr.hir_id,\n-                            parent_code: Lrc::new(code),\n-                        };\n+            // Peel derived obligation, because it's the type that originally\n+            // started this inference chain that matters, not the one we wound\n+            // up with at the end.\n+            fn unpeel_to_top(\n+                mut code: Lrc<ObligationCauseCode<'_>>,\n+            ) -> Lrc<ObligationCauseCode<'_>> {\n+                let mut result_code = code.clone();\n+                loop {\n+                    let parent = match &*code {\n+                        ObligationCauseCode::BuiltinDerivedObligation(c)\n+                        | ObligationCauseCode::ImplDerivedObligation(c)\n+                        | ObligationCauseCode::DerivedObligation(c) => c.parent_code.clone(),\n+                        _ => break,\n+                    };\n+                    result_code = std::mem::replace(&mut code, parent);\n+                }\n+                result_code\n+            }\n+            let self_: ty::subst::GenericArg<'_> = match &*unpeel_to_top(Lrc::new(error.obligation.cause.code.clone())) {\n+                ObligationCauseCode::BuiltinDerivedObligation(code) |\n+                ObligationCauseCode::ImplDerivedObligation(code) |\n+                ObligationCauseCode::DerivedObligation(code) => {\n+                    code.parent_trait_ref.self_ty().skip_binder().into()\n+                }\n+                _ if let ty::PredicateKind::Trait(predicate) =\n+                    error.obligation.predicate.kind().skip_binder() => {\n+                        predicate.self_ty().into()\n+                    }\n+                _ =>  continue,\n+            };\n+            let self_ = self.resolve_vars_if_possible(self_);\n+\n+            // Collect the argument position for all arguments that could have caused this\n+            // `FulfillmentError`.\n+            let mut referenced_in = final_arg_types\n+                .iter()\n+                .map(|&(i, checked_ty, _)| (i, checked_ty))\n+                .chain(final_arg_types.iter().map(|&(i, _, coerced_ty)| (i, coerced_ty)))\n+                .flat_map(|(i, ty)| {\n+                    let ty = self.resolve_vars_if_possible(ty);\n+                    // We walk the argument type because the argument's type could have\n+                    // been `Option<T>`, but the `FulfillmentError` references `T`.\n+                    if ty.walk(self.tcx).any(|arg| arg == self_) { Some(i) } else { None }\n+                })\n+                .collect::<Vec<usize>>();\n+\n+            // Both checked and coerced types could have matched, thus we need to remove\n+            // duplicates.\n+\n+            // We sort primitive type usize here and can use unstable sort\n+            referenced_in.sort_unstable();\n+            referenced_in.dedup();\n+\n+            if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n+                // Do not point at the inside of a macro.\n+                // That would often result in poor error messages.\n+                if args[ref_in].span.from_expansion() {\n+                    return;\n+                }\n+                // We make sure that only *one* argument matches the obligation failure\n+                // and we assign the obligation's span to its expression's.\n+                error.obligation.cause.make_mut().span = args[ref_in].span;\n+                let code = error.obligation.cause.code.clone();\n+                error.obligation.cause.make_mut().code =\n+                    ObligationCauseCode::FunctionArgumentObligation {\n+                        arg_hir_id: args[ref_in].hir_id,\n+                        call_hir_id: expr.hir_id,\n+                        parent_code: Lrc::new(code),\n+                    };\n+            } else if error.obligation.cause.make_mut().span == call_sp {\n+                // Make function calls point at the callee, not the whole thing.\n+                if let hir::ExprKind::Call(callee, _) = expr.kind {\n+                    error.obligation.cause.make_mut().span = callee.span;\n                 }\n             }\n         }"}, {"sha": "fd9299792852c9a368cb236748781852f75cdac6", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1 +1 @@\n-Subproject commit eb1282ec444db94055fa9531b6f3f803e86bb382\n+Subproject commit fd9299792852c9a368cb236748781852f75cdac6"}, {"sha": "51739471276b1776dea27cf562b974ef07e24685", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1 +1 @@\n-Subproject commit 270fccd339e5972d9c900e788f197e81a0bcd956\n+Subproject commit 51739471276b1776dea27cf562b974ef07e24685"}, {"sha": "358e6a61d5f4f0496d0a81e70cdcd25d05307342", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1 +1 @@\n-Subproject commit 2d66852a27c5d0ec50ae021820d1de22caa2b1bd\n+Subproject commit 358e6a61d5f4f0496d0a81e70cdcd25d05307342"}, {"sha": "27f1ff5e440ef78828b68ab882b98e1b10d9af32", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1 +1 @@\n-Subproject commit 9a60624fcad0140826c44389571dc622917cd632\n+Subproject commit 27f1ff5e440ef78828b68ab882b98e1b10d9af32"}, {"sha": "a948947dbdb610df2e36d4d6193f6fc70f03d107", "filename": "src/test/ui/abi/unsupported.aarch64.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -40,25 +40,22 @@ error[E0570]: `\"x86-interrupt\"` is not a supported ABI for the current target\n LL | extern \"x86-interrupt\" fn x86() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of calling convention not supported on this target\n+error[E0570]: `\"thiscall\"` is not a supported ABI for the current target\n   --> $DIR/unsupported.rs:43:1\n    |\n-LL | extern \"stdcall\" fn stdcall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+LL | extern \"thiscall\" fn thiscall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of calling convention not supported on this target\n-  --> $DIR/unsupported.rs:50:1\n+  --> $DIR/unsupported.rs:47:1\n    |\n-LL | extern \"thiscall\" fn thiscall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | extern \"stdcall\" fn stdcall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n \n-error: aborting due to 7 previous errors; 2 warnings emitted\n+error: aborting due to 8 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0570`."}, {"sha": "297354c28289569d064fd1e0f42fd81e4b522aab", "filename": "src/test/ui/abi/unsupported.arm.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -34,25 +34,22 @@ error[E0570]: `\"x86-interrupt\"` is not a supported ABI for the current target\n LL | extern \"x86-interrupt\" fn x86() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of calling convention not supported on this target\n+error[E0570]: `\"thiscall\"` is not a supported ABI for the current target\n   --> $DIR/unsupported.rs:43:1\n    |\n-LL | extern \"stdcall\" fn stdcall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+LL | extern \"thiscall\" fn thiscall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of calling convention not supported on this target\n-  --> $DIR/unsupported.rs:50:1\n+  --> $DIR/unsupported.rs:47:1\n    |\n-LL | extern \"thiscall\" fn thiscall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | extern \"stdcall\" fn stdcall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 7 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0570`."}, {"sha": "6427a5695c0297c032f5d2601da51e91654b60cc", "filename": "src/test/ui/abi/unsupported.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -40,14 +40,11 @@ extern \"avr-interrupt\" fn avr() {}\n extern \"x86-interrupt\" fn x86() {}\n //[aarch64]~^ ERROR is not a supported ABI\n //[arm]~^^ ERROR is not a supported ABI\n-extern \"stdcall\" fn stdcall() {}\n-//[x64]~^ WARN use of calling convention not supported\n-//[x64]~^^ WARN this was previously accepted\n-//[aarch64]~^^^ WARN use of calling convention not supported\n-//[aarch64]~^^^^ WARN this was previously accepted\n-//[arm]~^^^^^ WARN use of calling convention not supported\n-//[arm]~^^^^^^ WARN this was previously accepted\n extern \"thiscall\" fn thiscall() {}\n+//[x64]~^ ERROR is not a supported ABI\n+//[aarch64]~^^ ERROR is not a supported ABI\n+//[arm]~^^^ ERROR is not a supported ABI\n+extern \"stdcall\" fn stdcall() {}\n //[x64]~^ WARN use of calling convention not supported\n //[x64]~^^ WARN this was previously accepted\n //[aarch64]~^^^ WARN use of calling convention not supported"}, {"sha": "49b88cd3fac939c559b2bfda5d4ad4fba8024aa3", "filename": "src/test/ui/abi/unsupported.x64.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -34,25 +34,22 @@ error[E0570]: `\"avr-interrupt\"` is not a supported ABI for the current target\n LL | extern \"avr-interrupt\" fn avr() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of calling convention not supported on this target\n+error[E0570]: `\"thiscall\"` is not a supported ABI for the current target\n   --> $DIR/unsupported.rs:43:1\n    |\n-LL | extern \"stdcall\" fn stdcall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+LL | extern \"thiscall\" fn thiscall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of calling convention not supported on this target\n-  --> $DIR/unsupported.rs:50:1\n+  --> $DIR/unsupported.rs:47:1\n    |\n-LL | extern \"thiscall\" fn thiscall() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | extern \"stdcall\" fn stdcall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 7 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0570`."}, {"sha": "c993e1d27202d5a53ac33f843623d48b8bd24852", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -28,11 +28,13 @@ pub fn f1_int_uint() {\n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR `u32: Foo` is not satisfied\n+    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n     //~^ ERROR `u32: Foo` is not satisfied\n+    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "b3bb58f78142af7f159280f0f9e3bdb29e37dc92", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -10,12 +10,10 @@ LL |     f1(2i32, 4u32);\n    |               ~~~\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:29:14\n+  --> $DIR/associated-types-path-2.rs:29:5\n    |\n LL |     f1(2u32, 4u32);\n-   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n    |\n note: required by a bound in `f1`\n   --> $DIR/associated-types-path-2.rs:13:14\n@@ -24,10 +22,16 @@ LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:34:14\n+  --> $DIR/associated-types-path-2.rs:29:14\n+   |\n+LL |     f1(2u32, 4u32);\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:35:8\n    |\n LL |     f1(2u32, 4i32);\n-   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -37,8 +41,14 @@ note: required by a bound in `f1`\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:35:14\n+   |\n+LL |     f1(2u32, 4i32);\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n+\n error[E0308]: mismatched types\n-  --> $DIR/associated-types-path-2.rs:39:18\n+  --> $DIR/associated-types-path-2.rs:41:18\n    |\n LL |     let _: i32 = f2(2i32);\n    |            ---   ^^^^^^^^ expected `i32`, found `u32`\n@@ -50,7 +60,7 @@ help: you can convert a `u32` to an `i32` and panic if the converted value doesn\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                          ++++++++++++++++++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "baaab7fee679dcdfed20ed7419e2adb25dd4e27c", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:49:5\n+  --> $DIR/async-fn-nonsend.rs:49:17\n    |\n LL |     assert_send(local_dropped_before_await());\n-   |     ^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n@@ -22,10 +22,10 @@ LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:51:5\n+  --> $DIR/async-fn-nonsend.rs:51:17\n    |\n LL |     assert_send(non_send_temporary_in_match());\n-   |     ^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n@@ -45,10 +45,10 @@ LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:53:5\n+  --> $DIR/async-fn-nonsend.rs:53:17\n    |\n LL |     assert_send(non_sync_with_method_call());\n-   |     ^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n    = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await"}, {"sha": "12e4bfc3d48b66b05fb91b238270a5e4dd429b81", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:21:5\n+  --> $DIR/issue-64130-1-sync.rs:21:13\n    |\n LL |     is_sync(bar());\n-   |     ^^^^^^^ future returned by `bar` is not `Sync`\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n    |\n    = help: within `impl Future`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await"}, {"sha": "9c94b8da8929ab48b764fbd8ec11aa6a31158e94", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-2-send.rs:21:5\n+  --> $DIR/issue-64130-2-send.rs:21:13\n    |\n LL |     is_send(bar());\n-   |     ^^^^^^^ future returned by `bar` is not `Send`\n+   |             ^^^^^ future returned by `bar` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await"}, {"sha": "3dd1239e23dbeefff5a5b81af8346c02ed6b690e", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future`\n-  --> $DIR/issue-64130-3-other.rs:24:5\n+  --> $DIR/issue-64130-3-other.rs:24:12\n    |\n LL | async fn bar() {\n    |                - within this `impl Future`\n ...\n LL |     is_qux(bar());\n-   |     ^^^^^^ within `impl Future`, the trait `Qux` is not implemented for `Foo`\n+   |            ^^^^^ within `impl Future`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:18:5"}, {"sha": "7125c62dbaf9ad2da33782abe04979925f8fe542", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-non-send-future-diags.rs:21:5\n+  --> $DIR/issue-64130-non-send-future-diags.rs:21:13\n    |\n LL |     is_send(foo());\n-   |     ^^^^^^^ future returned by `foo` is not `Send`\n+   |             ^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await"}, {"sha": "ac254346c08a63841c9420354dcac1399e482732", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-71137.rs:20:3\n+  --> $DIR/issue-71137.rs:20:14\n    |\n LL |   fake_spawn(wrong_mutex());\n-   |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n+   |              ^^^^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await"}, {"sha": "ee32a1a9e4fbb4a17b22ada678d38262a0058e53", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-67893.rs:9:5\n+  --> $DIR/issue-67893.rs:9:7\n    |\n LL |     g(issue_67893::run())\n-   |     ^ generator is not `Send`\n+   |       ^^^^^^^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: required by a bound in `g`"}, {"sha": "b63ea106d90262ae8a0a09e7d970d40bf9db994f", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `PhantomPinned` cannot be unpinned\n-  --> $DIR/pin-needed-to-poll-2.rs:43:9\n+  --> $DIR/pin-needed-to-poll-2.rs:43:18\n    |\n LL |         Pin::new(&mut self.sleep).poll(cx)\n-   |         ^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |         -------- ^^^^^^^^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required because it appears within the type `Sleep`"}, {"sha": "4202cbae7eb29a46750827dd0247db2add4554c1", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `(): _Contains<&C>` is not satisfied\n-  --> $DIR/issue-85848.rs:24:5\n+  --> $DIR/issue-85848.rs:24:29\n    |\n LL |     writes_to_specific_path(&cap);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `_Contains<&C>` is not implemented for `()`\n+   |     ----------------------- ^^^^ the trait `_Contains<&C>` is not implemented for `()`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n   --> $DIR/issue-85848.rs:21:12\n@@ -21,10 +23,12 @@ LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n    |                               ^^^^^^^^^^^^^ required by this bound in `writes_to_specific_path`\n \n error: unconstrained generic constant\n-  --> $DIR/issue-85848.rs:24:5\n+  --> $DIR/issue-85848.rs:24:29\n    |\n LL |     writes_to_specific_path(&cap);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ----------------------- ^^^^\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { contains::<T, U>() }]:`\n note: required because of the requirements on the impl of `Contains<(), true>` for `&C`"}, {"sha": "80f099ce3c80210324aa02e897c43382779c0182", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -37,8 +37,8 @@ trait Ty<'a> {\n fn main() {\n     let v = Unit2.m(\n         //~^ ERROR type mismatch\n-        //~| ERROR type mismatch\n         L {\n+        //~^ ERROR type mismatch\n             f : |x| { drop(x); Unit4 }\n         });\n }"}, {"sha": "4c5c59c22099ae2abbfec71ff4d2900719a22e9e", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -10,10 +10,16 @@ LL |     let v = Unit2.m(\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n-  --> $DIR/issue-62203-hrtb-ice.rs:38:19\n+  --> $DIR/issue-62203-hrtb-ice.rs:40:9\n    |\n-LL |     let v = Unit2.m(\n-   |                   ^ expected struct `Unit4`, found struct `Unit3`\n+LL |       let v = Unit2.m(\n+   |                     - required by a bound introduced by this call\n+LL |\n+LL | /         L {\n+LL | |\n+LL | |             f : |x| { drop(x); Unit4 }\n+LL | |         });\n+   | |_________^ expected struct `Unit4`, found struct `Unit3`\n    |\n note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16"}, {"sha": "8c53b4105bb8b838bedc96bcce33eed565c5d1bf", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,11 +1,13 @@\n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:13:5\n+  --> $DIR/auto-trait-leak2.rs:13:10\n    |\n LL | fn before() -> impl Fn(i32) {\n    |                ------------ within this `impl Fn<(i32,)>`\n ...\n LL |     send(before());\n-   |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n+   |     ---- ^^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n@@ -17,10 +19,12 @@ LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`\n \n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:16:5\n+  --> $DIR/auto-trait-leak2.rs:16:10\n    |\n LL |     send(after());\n-   |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n+   |     ---- ^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n ...\n LL | fn after() -> impl Fn(i32) {\n    |               ------------ within this `impl Fn<(i32,)>`"}, {"sha": "a3171187e69e58d236a68abd471f9512f073bccf", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -7,6 +7,7 @@ const fn not_fn_items() {\n     //~^ ERROR expected a `FnOnce<()>` closure\n     const_eval_select((), 42, 0xDEADBEEF);\n     //~^ ERROR expected a `FnOnce<()>` closure\n+    //~| ERROR expected a `FnOnce<()>` closure\n }\n \n const fn foo(n: i32) -> i32 {"}, {"sha": "5e1ab584d80cf2f9fa75b3bbc8af88489d3b315c", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n-  --> $DIR/const-eval-select-bad.rs:6:34\n+  --> $DIR/const-eval-select-bad.rs:6:27\n    |\n LL |     const_eval_select((), || {}, || {});\n-   |     -----------------            ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -15,10 +15,10 @@ LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n-  --> $DIR/const-eval-select-bad.rs:8:31\n+  --> $DIR/const-eval-select-bad.rs:8:27\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n-   |     -----------------         ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |     -----------------     ^^ expected an `FnOnce<()>` closure, found `{integer}`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -30,8 +30,24 @@ note: required by a bound in `const_eval_select`\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n+error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n+  --> $DIR/const-eval-select-bad.rs:8:31\n+   |\n+LL |     const_eval_select((), 42, 0xDEADBEEF);\n+   |     -----------------         ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `FnOnce<()>` is not implemented for `{integer}`\n+   = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `const_eval_select`\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     G: FnOnce<ARG, Output = RET> + ~const Drop,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n+\n error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n-  --> $DIR/const-eval-select-bad.rs:27:5\n+  --> $DIR/const-eval-select-bad.rs:28:5\n    |\n LL |     const_eval_select((1,), foo, bar);\n    |     ^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`\n@@ -43,13 +59,13 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Drop,\n    |                    ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/const-eval-select-bad.rs:32:37\n+  --> $DIR/const-eval-select-bad.rs:33:32\n    |\n LL | const fn foo(n: i32) -> i32 {\n    | --------------------------- found signature of `fn(i32) -> _`\n ...\n LL |     const_eval_select((true,), foo, baz);\n-   |     -----------------               ^^^ expected signature of `fn(bool) -> _`\n+   |     -----------------          ^^^ expected signature of `fn(bool) -> _`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -59,7 +75,7 @@ note: required by a bound in `const_eval_select`\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0271, E0277, E0631.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "11c23e5b659b7af06385f33dd0f0bd4ab1c9cf00", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `Rc<Foo>` cannot be shared between threads safely\n-  --> $DIR/issue-40827.rs:14:5\n+  --> $DIR/issue-40827.rs:14:7\n    |\n LL |     f(Foo(Arc::new(Bar::B(None))));\n-   |     ^ `Rc<Foo>` cannot be shared between threads safely\n+   |     - ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<Foo>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Bar`, the trait `Sync` is not implemented for `Rc<Foo>`\n note: required because it appears within the type `Bar`\n@@ -23,10 +25,12 @@ LL | fn f<T: Send>(_: T) {}\n    |         ^^^^ required by this bound in `f`\n \n error[E0277]: `Rc<Foo>` cannot be sent between threads safely\n-  --> $DIR/issue-40827.rs:14:5\n+  --> $DIR/issue-40827.rs:14:7\n    |\n LL |     f(Foo(Arc::new(Bar::B(None))));\n-   |     ^ `Rc<Foo>` cannot be sent between threads safely\n+   |     - ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<Foo>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Bar`, the trait `Send` is not implemented for `Rc<Foo>`\n note: required because it appears within the type `Bar`"}, {"sha": "9e1f4e1fe4ea9b12496a64fc6193d2769bf10e55", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n-  --> $DIR/mutable-enum-indirect.rs:17:5\n+  --> $DIR/mutable-enum-indirect.rs:17:9\n    |\n LL |     bar(&x);\n-   |     ^^^ `NoSync` cannot be shared between threads safely\n+   |     --- ^^ `NoSync` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `&Foo`, the trait `Sync` is not implemented for `NoSync`\n note: required because it appears within the type `Foo`"}, {"sha": "b5a14b551dc2d799b7200c39cbf6408000b45678", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `NoSend` cannot be sent between threads safely\n-  --> $DIR/no_send-enum.rs:16:5\n+  --> $DIR/no_send-enum.rs:16:9\n    |\n LL |     bar(x);\n-   |     ^^^ `NoSend` cannot be sent between threads safely\n+   |     --- ^ `NoSend` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `NoSend`\n note: required because it appears within the type `Foo`"}, {"sha": "5b453e0da3bbdff1452cb73cbc7b29cd24bbf3af", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n-  --> $DIR/no_share-enum.rs:14:5\n+  --> $DIR/no_share-enum.rs:14:9\n    |\n LL |     bar(x);\n-   |     ^^^ `NoSync` cannot be shared between threads safely\n+   |     --- ^ `NoSync` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Foo`, the trait `Sync` is not implemented for `NoSync`\n note: required because it appears within the type `Foo`"}, {"sha": "efe46d7e81d3de1ea8759a1acd7aead7f7c1948f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -51,9 +51,6 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |"}, {"sha": "efe46d7e81d3de1ea8759a1acd7aead7f7c1948f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -51,9 +51,6 @@ LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n error[E0277]: the trait bound `NonTrivialDrop: A` is not satisfied\n   --> $DIR/const-drop-fail.rs:49:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `A` is not implemented for `NonTrivialDrop`\n    |"}, {"sha": "0d9ecc32e08cdd6c75b47cf425955da9ffed7ddc", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `&str: From<String>` is not satisfied\n-  --> $DIR/into-str.rs:4:5\n+  --> $DIR/into-str.rs:4:9\n    |\n LL |     foo(String::new());\n-   |     ^^^ the trait `From<String>` is not implemented for `&str`\n+   |     --- ^^^^^^^^^^^^^ the trait `From<String>` is not implemented for `&str`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`"}, {"sha": "d1e8affd065f9356e9179a7053bb1670fbb9dfcc", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -5,7 +5,7 @@ LL | #[derive(Clone)]\n    |          ----- in this derive macro expansion\n LL | struct FooHolster {\n LL |     the_foos: Vec<Foo>,\n-   |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n note: required by `clone`"}, {"sha": "1cf73fcdebd0b9985a05dd07f3dfab5bff602d5a", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -49,7 +49,7 @@ LL |     is_send((8, TestType));\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Send` is not implemented for `dummy1c::TestType`\n+   = help: within `({integer}, dummy1c::TestType)`, the trait `Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n@@ -86,7 +86,7 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Send` is not implemented for `dummy3::TestType`\n+   = help: within `Outer2<dummy3::TestType>`, the trait `Send` is not implemented for `dummy3::TestType`\n note: required because it appears within the type `Outer2<dummy3::TestType>`\n   --> $DIR/negated-auto-traits-error.rs:12:8\n    |"}, {"sha": "4a49d6e4ab8fd7aaac23229cdcfea5e659138662", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1,11 +1,13 @@\n error[E0277]: `Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leakage2.rs:17:5\n+  --> $DIR/auto-trait-leakage2.rs:17:13\n    |\n LL |     type Foo = impl std::fmt::Debug;\n    |                -------------------- within this `impl Debug`\n ...\n LL |     is_send(m::foo());\n-   |     ^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n+   |     ------- ^^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `impl Debug`, the trait `Send` is not implemented for `Rc<u32>`\n    = note: required because it appears within the type `impl Debug`"}, {"sha": "1954ee6f1e7ceabfd8a6f9993f23cc176f733a0f", "filename": "src/test/ui/typeck/issue-90101.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.rs?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -0,0 +1,8 @@\n+use std::path::{Path, PathBuf};\n+\n+fn func(path: impl Into<PathBuf>, code: impl Into<String>) {}\n+\n+fn main() {\n+    func(Path::new(\"hello\").to_path_buf().to_string_lossy(), \"world\")\n+    //~^ ERROR [E0277]\n+}"}, {"sha": "998b636887f230183a49e48ede6db36883a1276e", "filename": "src/test/ui/typeck/issue-90101.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: the trait bound `PathBuf: From<Cow<'_, str>>` is not satisfied\n+  --> $DIR/issue-90101.rs:6:10\n+   |\n+LL |     func(Path::new(\"hello\").to_path_buf().to_string_lossy(), \"world\")\n+   |     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<Cow<'_, str>>` is not implemented for `PathBuf`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the following implementations were found:\n+             <PathBuf as From<&T>>\n+             <PathBuf as From<Box<Path>>>\n+             <PathBuf as From<Cow<'a, Path>>>\n+             <PathBuf as From<OsString>>\n+             <PathBuf as From<String>>\n+   = note: required because of the requirements on the impl of `Into<PathBuf>` for `Cow<'_, str>`\n+note: required by a bound in `func`\n+  --> $DIR/issue-90101.rs:3:20\n+   |\n+LL | fn func(path: impl Into<PathBuf>, code: impl Into<String>) {}\n+   |                    ^^^^^^^^^^^^^ required by this bound in `func`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "154e504996bc4001d441b668cebd388fd3e03f48", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -29,10 +29,12 @@ LL | fn test<T: Sync>(s: T) {}\n    |            ^^^^ required by this bound in `test`\n \n error[E0277]: `UnsafeCell<NoSync>` cannot be shared between threads safely\n-  --> $DIR/typeck-unsafe-always-share.rs:27:5\n+  --> $DIR/typeck-unsafe-always-share.rs:27:10\n    |\n LL |     test(ms);\n-   |     ^^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n+   |     ---- ^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `MySync<NoSync>`, the trait `Sync` is not implemented for `UnsafeCell<NoSync>`\n note: required because it appears within the type `MySync<NoSync>`"}, {"sha": "6960255d98797492815899c0bebc915e1feedd59", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b61b1b44581c449ae40505d181b00593f089d40/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -16,7 +16,7 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Sized` is not implemented for `[u8]`\n+   = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n note: required because it appears within the type `A<[u8]>`\n   --> $DIR/unsized-exprs.rs:3:8\n    |"}, {"sha": "6c1bc24b8b49d4bc965f67d7037906dc199c72b7", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1b61b1b44581c449ae40505d181b00593f089d40", "patch": "@@ -1 +1 @@\n-Subproject commit 7fbbf4e8f23e3c24b8afff541dcb17e53eb5ff88\n+Subproject commit 6c1bc24b8b49d4bc965f67d7037906dc199c72b7"}]}