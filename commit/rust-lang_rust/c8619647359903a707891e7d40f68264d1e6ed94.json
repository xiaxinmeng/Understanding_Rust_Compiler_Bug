{"sha": "c8619647359903a707891e7d40f68264d1e6ed94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjE5NjQ3MzU5OTAzYTcwNzg5MWU3ZDQwZjY4MjY0ZDFlNmVkOTQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-21T21:19:59Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T21:50:52Z"}, "message": "Note that trait aliases cannot be recursive", "tree": {"sha": "eb97ff3b00f28ba5296a5f5d66fab91c89d5db3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb97ff3b00f28ba5296a5f5d66fab91c89d5db3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8619647359903a707891e7d40f68264d1e6ed94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8619647359903a707891e7d40f68264d1e6ed94", "html_url": "https://github.com/rust-lang/rust/commit/c8619647359903a707891e7d40f68264d1e6ed94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8619647359903a707891e7d40f68264d1e6ed94/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf360dc2729780084de0035aeb7047288a3b5f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf360dc2729780084de0035aeb7047288a3b5f9d", "html_url": "https://github.com/rust-lang/rust/commit/bf360dc2729780084de0035aeb7047288a3b5f9d"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "88ab7597eac1a9c2ab2ae572eb3321d16ba9d77e", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8619647359903a707891e7d40f68264d1e6ed94/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8619647359903a707891e7d40f68264d1e6ed94/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=c8619647359903a707891e7d40f68264d1e6ed94", "patch": "@@ -178,6 +178,10 @@ impl Key for (DefId, Option<Ident>) {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0)\n     }\n+    #[inline(always)]\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(self.0)\n+    }\n }\n \n impl Key for (DefId, LocalDefId, Ident) {"}, {"sha": "63a8f0624759c842908ba800ef81f871849cd6fc", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8619647359903a707891e7d40f68264d1e6ed94/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8619647359903a707891e7d40f68264d1e6ed94/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=c8619647359903a707891e7d40f68264d1e6ed94", "patch": "@@ -600,16 +600,23 @@ pub(crate) fn report_cycle<'a>(\n         ));\n     }\n \n-    if !stack.is_empty()\n-        && stack.iter().all(|entry| {\n-            entry.query.def_kind.map_or(false, |def_kind| {\n-                matches!(def_kind, SimpleDefKind::TyAlias | SimpleDefKind::TraitAlias)\n-            })\n+    if stack.iter().all(|entry| {\n+        entry.query.def_kind.map_or(false, |def_kind| {\n+            matches!(def_kind, SimpleDefKind::TyAlias | SimpleDefKind::TraitAlias)\n         })\n-    {\n-        err.note(\"type aliases cannot be recursive\");\n-        err.help(\"consider using a struct, enum, or union instead to break the cycle\");\n-        err.help(\"see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\");\n+    }) {\n+        if stack.iter().all(|entry| {\n+            entry\n+                .query\n+                .def_kind\n+                .map_or(false, |def_kind| matches!(def_kind, SimpleDefKind::TyAlias))\n+        }) {\n+            err.note(\"type aliases cannot be recursive\");\n+            err.help(\"consider using a struct, enum, or union instead to break the cycle\");\n+            err.help(\"see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\");\n+        } else {\n+            err.note(\"trait aliases cannot be recursive\");\n+        }\n     }\n \n     if let Some((span, query)) = usage {"}, {"sha": "5ecaedb3cb2cd6cc46d09c132b6d9cb3a6d45f7d", "filename": "src/test/ui/infinite/infinite-trait-alias-recursion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8619647359903a707891e7d40f68264d1e6ed94/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8619647359903a707891e7d40f68264d1e6ed94/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr?ref=c8619647359903a707891e7d40f68264d1e6ed94", "patch": "@@ -30,6 +30,7 @@ note: ...which requires computing the super traits of `T3`...\n LL | trait T3 = T1 + T3;\n    |            ^^\n    = note: ...which again requires computing the super predicates of `T1`, completing the cycle\n+   = note: trait aliases cannot be recursive\n note: cycle used when collecting item types in top-level module\n   --> $DIR/infinite-trait-alias-recursion.rs:3:1\n    |"}]}