{"sha": "3509f9d5ae927781f190dda5e623d30ce34e87e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDlmOWQ1YWU5Mjc3ODFmMTkwZGRhNWU2MjNkMzBjZTM0ZTg3ZTA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T17:28:38Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T17:28:38Z"}, "message": "str: Implement Container for ~str, @str and Mutable for ~str\n\n~str and @str need separate implementations for use in generic\nfunctions, where it will not automatically use the impl on &str.", "tree": {"sha": "0632e391d99266f841fd3c75856eee5b787d2054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0632e391d99266f841fd3c75856eee5b787d2054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3509f9d5ae927781f190dda5e623d30ce34e87e0", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3509f9d5ae927781f190dda5e623d30ce34e87e0", "html_url": "https://github.com/rust-lang/rust/commit/3509f9d5ae927781f190dda5e623d30ce34e87e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3509f9d5ae927781f190dda5e623d30ce34e87e0/comments", "author": null, "committer": null, "parents": [{"sha": "e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "html_url": "https://github.com/rust-lang/rust/commit/e3142c5d3e0a69bff0e3d5506f617c5433a9a750"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "597bc72c960ac6051a8a1e20680244aef765240e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3509f9d5ae927781f190dda5e623d30ce34e87e0/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3509f9d5ae927781f190dda5e623d30ce34e87e0/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3509f9d5ae927781f190dda5e623d30ce34e87e0", "patch": "@@ -22,7 +22,7 @@ use cast;\n use char;\n use char::Char;\n use clone::Clone;\n-use container::Container;\n+use container::{Container, Mutable};\n use iter::Times;\n use iterator::{Iterator, IteratorUtil, FilterIterator, AdditiveIterator, MapIterator};\n use libc;\n@@ -1211,6 +1211,31 @@ impl<'self> Container for &'self str {\n     }\n }\n \n+impl Container for ~str {\n+    #[inline]\n+    fn len(&self) -> uint { self.as_slice().len() }\n+    #[inline]\n+    fn is_empty(&self) -> bool { self.len() == 0 }\n+}\n+\n+impl Container for @str {\n+    #[inline]\n+    fn len(&self) -> uint { self.as_slice().len() }\n+    #[inline]\n+    fn is_empty(&self) -> bool { self.len() == 0 }\n+}\n+\n+impl Mutable for ~str {\n+    /// Remove all content, make the string empty\n+    #[inline]\n+    fn clear(&mut self) {\n+        unsafe {\n+            raw::set_len(self, 0)\n+        }\n+    }\n+}\n+\n+\n #[allow(missing_doc)]\n pub trait StrSlice<'self> {\n     fn contains<'a>(&self, needle: &'a str) -> bool;\n@@ -2495,6 +2520,18 @@ mod tests {\n         assert_eq!(~\"\u534e\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", data);\n     }\n \n+    #[test]\n+    fn test_clear() {\n+        let mut empty = ~\"\";\n+        empty.clear();\n+        assert_eq!(\"\", empty.as_slice());\n+        let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        data.clear();\n+        assert_eq!(\"\", data.as_slice());\n+        data.push_char('\u534e');\n+        assert_eq!(\"\u534e\", data.as_slice());\n+    }\n+\n     #[test]\n     fn test_split_within() {\n         fn t(s: &str, i: uint, u: &[~str]) {\n@@ -3487,4 +3524,17 @@ mod tests {\n         t::<@str>();\n         t::<~str>();\n     }\n+\n+    #[test]\n+    fn test_str_container() {\n+        fn sum_len<S: Container>(v: &[S]) -> uint {\n+            v.iter().transform(|x| x.len()).sum()\n+        }\n+\n+        let s = ~\"01234\";\n+        assert_eq!(5, sum_len([\"012\", \"\", \"34\"]));\n+        assert_eq!(5, sum_len([@\"01\", @\"2\", @\"34\", @\"\"]));\n+        assert_eq!(5, sum_len([~\"01\", ~\"2\", ~\"34\", ~\"\"]));\n+        assert_eq!(5, sum_len([s.as_slice()]));\n+    }\n }"}]}