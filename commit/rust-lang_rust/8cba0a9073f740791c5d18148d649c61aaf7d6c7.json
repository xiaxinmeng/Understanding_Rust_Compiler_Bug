{"sha": "8cba0a9073f740791c5d18148d649c61aaf7d6c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYmEwYTkwNzNmNzQwNzkxYzVkMTgxNDhkNjQ5YzYxYWFmN2Q2Yzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:57:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T18:57:41Z"}, "message": "Rollup merge of #66183 - Centril:empty-vis-trait-decl, r=petrochenkov\n\n*Syntactically* permit visibilities on trait items & enum variants\n\nFixes #65041\n\nSuppose we have `$vis trait_item` or `$vis enum_variant` and `$vis` is a `:vis` macro fragment. Before this PR, this would fail to parse. This is now instead allowed as per language team consensus in https://github.com/rust-lang/rust/issues/65041#issuecomment-538105286. (See added tests for elaboration.)\n\nMoreover, we now also permit visibility modifiers on trait items & enum variants *syntactically* but reject them with semantic checks (in `ast_validation`):\n\n```rust\n#[cfg(FALSE)]\ntrait Foo { pub fn bar(); } // OK\n\n#[cfg(FALSE)]\nenum E { pub U } // OK\n```", "tree": {"sha": "1906720783e10429ac031f9dab006757720840eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1906720783e10429ac031f9dab006757720840eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cba0a9073f740791c5d18148d649c61aaf7d6c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2C+lCRBK7hj4Ov3rIwAAdHIIAJ8da0KXLbL1FjSE4r4Qly/6\nLtaaSgGlN6gH47FLyQXLykq207MANWXStLjfmFgxogP0AaFfIKd831NgFbxacY4a\nLEUlyGVd4Z17gsSuYcDmwEXJ0h0v0exazRLjxaI1dANvtfe043i5q8kyoEpMAJCl\n9hjaC/EHwDWXcVR4zYLC1kHeE2+Ha6ar+PSdCUmrYwdzIMxB3fY3Pd9Aj/+F9nfZ\nWKcujRrD6bhETbmRkwpDDMHX25ruqVXVIh2C7L6Oeb/IVKWbtqI7TdesRiCP9XhN\nr5ERRE7QmbpjGjfoDoA+L+DwnfZ8S7QNtTfapwb4oR07IBom7WcAIvrPWWVdT+E=\n=9e29\n-----END PGP SIGNATURE-----\n", "payload": "tree 1906720783e10429ac031f9dab006757720840eb\nparent 083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5\nparent 9a88364525a4660dbd6f6a371b3b25199f5bbe4a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574449061 +0100\ncommitter GitHub <noreply@github.com> 1574449061 +0100\n\nRollup merge of #66183 - Centril:empty-vis-trait-decl, r=petrochenkov\n\n*Syntactically* permit visibilities on trait items & enum variants\n\nFixes #65041\n\nSuppose we have `$vis trait_item` or `$vis enum_variant` and `$vis` is a `:vis` macro fragment. Before this PR, this would fail to parse. This is now instead allowed as per language team consensus in https://github.com/rust-lang/rust/issues/65041#issuecomment-538105286. (See added tests for elaboration.)\n\nMoreover, we now also permit visibility modifiers on trait items & enum variants *syntactically* but reject them with semantic checks (in `ast_validation`):\n\n```rust\n#[cfg(FALSE)]\ntrait Foo { pub fn bar(); } // OK\n\n#[cfg(FALSE)]\nenum E { pub U } // OK\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cba0a9073f740791c5d18148d649c61aaf7d6c7", "html_url": "https://github.com/rust-lang/rust/commit/8cba0a9073f740791c5d18148d649c61aaf7d6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cba0a9073f740791c5d18148d649c61aaf7d6c7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "html_url": "https://github.com/rust-lang/rust/commit/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5"}, {"sha": "9a88364525a4660dbd6f6a371b3b25199f5bbe4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a88364525a4660dbd6f6a371b3b25199f5bbe4a", "html_url": "https://github.com/rust-lang/rust/commit/9a88364525a4660dbd6f6a371b3b25199f5bbe4a"}], "stats": {"total": 293, "additions": 184, "deletions": 109}, "files": [{"sha": "eab35a86c69e45b8dd4ed13ce463e17f071bdd68", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1189,26 +1189,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Recovers from `pub` keyword in places where it seems _reasonable_ but isn't valid.\n-    pub(super) fn eat_bad_pub(&mut self) {\n-        // When `unclosed_delims` is populated, it means that the code being parsed is already\n-        // quite malformed, which might mean that, for example, a pub struct definition could be\n-        // parsed as being a trait item, which is invalid and this error would trigger\n-        // unconditionally, resulting in misleading diagnostics. Because of this, we only attempt\n-        // this nice to have recovery for code that is otherwise well formed.\n-        if self.token.is_keyword(kw::Pub) && self.unclosed_delims.is_empty() {\n-            match self.parse_visibility(false) {\n-                Ok(vis) => {\n-                    self.diagnostic()\n-                        .struct_span_err(vis.span, \"unnecessary visibility qualifier\")\n-                        .span_label(vis.span, \"`pub` not permitted here\")\n-                        .emit();\n-                }\n-                Err(mut err) => err.emit(),\n-            }\n-        }\n-    }\n-\n     /// Eats tokens until we can be relatively sure we reached the end of the\n     /// statement. This is something of a best-effort heuristic.\n     ///"}, {"sha": "13645e7144a9bfc72ad8f9c2858d0b9cdc7376c3", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,4 +1,4 @@\n-use super::{Parser, PathStyle};\n+use super::{Parser, PathStyle, FollowedByType};\n use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n@@ -87,7 +87,7 @@ impl<'a> Parser<'a> {\n \n         let lo = self.token.span;\n \n-        let vis = self.parse_visibility(false)?;\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n \n         if self.eat_keyword(kw::Use) {\n             // USE ITEM\n@@ -696,7 +696,7 @@ impl<'a> Parser<'a> {\n         mut attrs: Vec<Attribute>,\n     ) -> PResult<'a, ImplItem> {\n         let lo = self.token.span;\n-        let vis = self.parse_visibility(false)?;\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             let (name, ty, generics) = self.parse_type_alias()?;\n@@ -883,7 +883,7 @@ impl<'a> Parser<'a> {\n         mut attrs: Vec<Attribute>,\n     ) -> PResult<'a, TraitItem> {\n         let lo = self.token.span;\n-        self.eat_bad_pub();\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_trait_item_assoc_ty()?\n         } else if self.is_const_item() {\n@@ -899,6 +899,7 @@ impl<'a> Parser<'a> {\n             id: DUMMY_NODE_ID,\n             ident: name,\n             attrs,\n+            vis,\n             generics,\n             kind,\n             span: lo.to(self.prev_span),\n@@ -1129,7 +1130,7 @@ impl<'a> Parser<'a> {\n \n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let visibility = self.parse_visibility(false)?;\n+        let visibility = self.parse_visibility(FollowedByType::No)?;\n \n         // FOREIGN STATIC ITEM\n         // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n@@ -1339,7 +1340,7 @@ impl<'a> Parser<'a> {\n             let variant_attrs = self.parse_outer_attributes()?;\n             let vlo = self.token.span;\n \n-            self.eat_bad_pub();\n+            let vis = self.parse_visibility(FollowedByType::No)?;\n             let ident = self.parse_ident()?;\n \n             let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n@@ -1366,6 +1367,7 @@ impl<'a> Parser<'a> {\n \n             let vr = ast::Variant {\n                 ident,\n+                vis,\n                 id: DUMMY_NODE_ID,\n                 attrs: variant_attrs,\n                 data: struct_def,\n@@ -1519,7 +1521,7 @@ impl<'a> Parser<'a> {\n         self.parse_paren_comma_seq(|p| {\n             let attrs = p.parse_outer_attributes()?;\n             let lo = p.token.span;\n-            let vis = p.parse_visibility(true)?;\n+            let vis = p.parse_visibility(FollowedByType::Yes)?;\n             let ty = p.parse_ty()?;\n             Ok(StructField {\n                 span: lo.to(ty.span),\n@@ -1537,7 +1539,7 @@ impl<'a> Parser<'a> {\n     fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let vis = self.parse_visibility(false)?;\n+        let vis = self.parse_visibility(FollowedByType::No)?;\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n "}, {"sha": "d810117662c655c0c60287f479957efd69e67181", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -348,6 +348,8 @@ impl SeqSep {\n     }\n }\n \n+pub enum FollowedByType { Yes, No }\n+\n impl<'a> Parser<'a> {\n     pub fn new(\n         sess: &'a ParseSess,\n@@ -1120,7 +1122,7 @@ impl<'a> Parser<'a> {\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses isn't valid,\n     /// so emit a proper diagnostic.\n-    pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n+    pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);\n \n         self.expected_tokens.push(TokenType::Keyword(kw::Crate));\n@@ -1175,7 +1177,9 @@ impl<'a> Parser<'a> {\n                     id: ast::DUMMY_NODE_ID,\n                 };\n                 return Ok(respan(lo.to(self.prev_span), vis));\n-            } else if !can_take_tuple { // Provide this diagnostic if this is not a tuple struct.\n+            } else if let FollowedByType::No = fbt {\n+                // Provide this diagnostic if a type cannot follow;\n+                // in particular, if this is not a tuple struct.\n                 self.recover_incorrect_vis_restriction()?;\n                 // Emit diagnostic, but continue with public visibility.\n             }"}, {"sha": "e189b7175f91dc3eca52de8dfb84c7b9fe2f970d", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -529,6 +529,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(ref def, _) => {\n                 for variant in &def.variants {\n+                    self.invalid_visibility(&variant.vis, None);\n                     for field in variant.data.fields() {\n                         self.invalid_visibility(&field.vis, None);\n                     }\n@@ -751,6 +752,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n         visit::walk_impl_item(self, ii);\n     }\n+\n+    fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n+        self.invalid_visibility(&ti.vis, None);\n+        visit::walk_trait_item(self, ti);\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {"}, {"sha": "142430769411fd82d6c73407464e4cc2efe1a731", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -982,12 +982,12 @@ pub struct Arm {\n /// Access of a named (e.g., `obj.foo`) or unnamed (e.g., `obj.0`) struct field.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Field {\n+    pub attrs: ThinVec<Attribute>,\n+    pub id: NodeId,\n+    pub span: Span,\n     pub ident: Ident,\n     pub expr: P<Expr>,\n-    pub span: Span,\n     pub is_shorthand: bool,\n-    pub attrs: ThinVec<Attribute>,\n-    pub id: NodeId,\n     pub is_placeholder: bool,\n }\n \n@@ -1567,12 +1567,14 @@ pub struct FnSig {\n /// signature) or provided (meaning it has a default implementation).\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItem {\n+    pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n     pub ident: Ident,\n-    pub attrs: Vec<Attribute>,\n+\n     pub generics: Generics,\n     pub kind: TraitItemKind,\n-    pub span: Span,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,\n }\n@@ -1588,14 +1590,15 @@ pub enum TraitItemKind {\n /// Represents anything within an `impl` block.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItem {\n+    pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n-    pub ident: Ident,\n+    pub span: Span,\n     pub vis: Visibility,\n+    pub ident: Ident,\n+\n     pub defaultness: Defaultness,\n-    pub attrs: Vec<Attribute>,\n     pub generics: Generics,\n     pub kind: ImplItemKind,\n-    pub span: Span,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,\n }\n@@ -2174,22 +2177,24 @@ pub struct GlobalAsm {\n pub struct EnumDef {\n     pub variants: Vec<Variant>,\n }\n-\n /// Enum variant.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Variant {\n-    /// Name of the variant.\n-    pub ident: Ident,\n     /// Attributes of the variant.\n     pub attrs: Vec<Attribute>,\n     /// Id of the variant (not the constructor, see `VariantData::ctor_id()`).\n     pub id: NodeId,\n+    /// Span\n+    pub span: Span,\n+    /// The visibility of the variant. Syntactically accepted but not semantically.\n+    pub vis: Visibility,\n+    /// Name of the variant.\n+    pub ident: Ident,\n+\n     /// Fields and constructor id of the variant.\n     pub data: VariantData,\n     /// Explicit discriminant, e.g., `Foo = 1`.\n     pub disr_expr: Option<AnonConst>,\n-    /// Span\n-    pub span: Span,\n     /// Is a macro placeholder\n     pub is_placeholder: bool,\n }\n@@ -2368,12 +2373,13 @@ impl VisibilityKind {\n /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct StructField {\n+    pub attrs: Vec<Attribute>,\n+    pub id: NodeId,\n     pub span: Span,\n-    pub ident: Option<Ident>,\n     pub vis: Visibility,\n-    pub id: NodeId,\n+    pub ident: Option<Ident>,\n+\n     pub ty: P<Ty>,\n-    pub attrs: Vec<Attribute>,\n     pub is_placeholder: bool,\n }\n \n@@ -2417,12 +2423,13 @@ impl VariantData {\n /// The name might be a dummy name in case of anonymous items.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n-    pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n-    pub kind: ItemKind,\n-    pub vis: Visibility,\n     pub span: Span,\n+    pub vis: Visibility,\n+    pub ident: Ident,\n+\n+    pub kind: ItemKind,\n \n     /// Original tokens this item was parsed from. This isn't necessarily\n     /// available for all items, although over time more and more items should\n@@ -2579,12 +2586,13 @@ impl ItemKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignItem {\n-    pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub kind: ForeignItemKind,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n+    pub ident: Ident,\n+\n+    pub kind: ForeignItemKind,\n }\n \n /// An item within an `extern` block."}, {"sha": "a7bd587ac9bfb108ed9cf885f6b69be280340c78", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -472,16 +472,17 @@ pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis:\n     items.flat_map_in_place(|item| vis.flat_map_foreign_item(item));\n }\n \n-pub fn noop_flat_map_variant<T: MutVisitor>(mut variant: Variant, vis: &mut T)\n+pub fn noop_flat_map_variant<T: MutVisitor>(mut variant: Variant, visitor: &mut T)\n     -> SmallVec<[Variant; 1]>\n {\n-    let Variant { ident, attrs, id, data, disr_expr, span, is_placeholder: _ } = &mut variant;\n-    vis.visit_ident(ident);\n-    visit_attrs(attrs, vis);\n-    vis.visit_id(id);\n-    vis.visit_variant_data(data);\n-    visit_opt(disr_expr, |disr_expr| vis.visit_anon_const(disr_expr));\n-    vis.visit_span(span);\n+    let Variant { ident, vis, attrs, id, data, disr_expr, span, is_placeholder: _ } = &mut variant;\n+    visitor.visit_ident(ident);\n+    visitor.visit_vis(vis);\n+    visit_attrs(attrs, visitor);\n+    visitor.visit_id(id);\n+    visitor.visit_variant_data(data);\n+    visit_opt(disr_expr, |disr_expr| visitor.visit_anon_const(disr_expr));\n+    visitor.visit_span(span);\n     smallvec![variant]\n }\n \n@@ -916,32 +917,33 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     }\n }\n \n-pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n+pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, visitor: &mut T)\n     -> SmallVec<[TraitItem; 1]>\n {\n-    let TraitItem { id, ident, attrs, generics, kind, span, tokens: _ } = &mut item;\n-    vis.visit_id(id);\n-    vis.visit_ident(ident);\n-    visit_attrs(attrs, vis);\n-    vis.visit_generics(generics);\n+    let TraitItem { id, ident, vis, attrs, generics, kind, span, tokens: _ } = &mut item;\n+    visitor.visit_id(id);\n+    visitor.visit_ident(ident);\n+    visitor.visit_vis(vis);\n+    visit_attrs(attrs, visitor);\n+    visitor.visit_generics(generics);\n     match kind {\n         TraitItemKind::Const(ty, default) => {\n-            vis.visit_ty(ty);\n-            visit_opt(default, |default| vis.visit_expr(default));\n+            visitor.visit_ty(ty);\n+            visit_opt(default, |default| visitor.visit_expr(default));\n         }\n         TraitItemKind::Method(sig, body) => {\n-            visit_fn_sig(sig, vis);\n-            visit_opt(body, |body| vis.visit_block(body));\n+            visit_fn_sig(sig, visitor);\n+            visit_opt(body, |body| visitor.visit_block(body));\n         }\n         TraitItemKind::Type(bounds, default) => {\n-            visit_bounds(bounds, vis);\n-            visit_opt(default, |default| vis.visit_ty(default));\n+            visit_bounds(bounds, visitor);\n+            visit_opt(default, |default| visitor.visit_ty(default));\n         }\n         TraitItemKind::Macro(mac) => {\n-            vis.visit_mac(mac);\n+            visitor.visit_mac(mac);\n         }\n     }\n-    vis.visit_span(span);\n+    visitor.visit_span(span);\n \n     smallvec![item]\n }"}, {"sha": "d7725acb5d45077deb8dd47be58eb9260c2e9388", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -50,6 +50,7 @@ fn test_variant_to_string() {\n \n         let var = ast::Variant {\n             ident,\n+            vis: source_map::respan(syntax_pos::DUMMY_SP, ast::VisibilityKind::Inherited),\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),"}, {"sha": "f7b06c55a3a2eb9ee7851a11f91466075196ba0c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -310,6 +310,7 @@ pub fn walk_variant<'a, V: Visitor<'a>>(visitor: &mut V, variant: &'a Variant)\n     where V: Visitor<'a>,\n {\n     visitor.visit_ident(variant.ident);\n+    visitor.visit_vis(&variant.vis);\n     visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.attrs);\n@@ -581,6 +582,7 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n }\n \n pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a TraitItem) {\n+    visitor.visit_vis(&trait_item.vis);\n     visitor.visit_ident(trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     visitor.visit_generics(&trait_item.generics);"}, {"sha": "7fe37f377a8d01493855d40fbfde084523fa7ab0", "filename": "src/libsyntax_expand/build.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbuild.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -582,12 +582,13 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn variant(&self, span: Span, ident: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n+        let vis_span = span.shrink_to_lo();\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             ast::StructField {\n                 span: ty.span,\n                 ty,\n                 ident: None,\n-                vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: respan(vis_span, ast::VisibilityKind::Inherited),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n                 is_placeholder: false,\n@@ -606,6 +607,7 @@ impl<'a> ExtCtxt<'a> {\n             disr_expr: None,\n             id: ast::DUMMY_NODE_ID,\n             ident,\n+            vis: respan(vis_span, ast::VisibilityKind::Inherited),\n             span,\n             is_placeholder: false,\n         }"}, {"sha": "bf7960f90660a86aa4b12f5c15d2eeca4bb8b49c", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -77,7 +77,7 @@ use TokenTreeOrTokenTreeSlice::*;\n use crate::mbe::{self, TokenTree};\n \n use rustc_parse::Directory;\n-use rustc_parse::parser::{Parser, PathStyle};\n+use rustc_parse::parser::{Parser, PathStyle, FollowedByType};\n use syntax::ast::{Ident, Name};\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n@@ -933,7 +933,7 @@ fn parse_nt_inner<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> PResult<'a,\n         }\n         sym::path => token::NtPath(p.parse_path(PathStyle::Type)?),\n         sym::meta => token::NtMeta(p.parse_attr_item()?),\n-        sym::vis => token::NtVis(p.parse_visibility(true)?),\n+        sym::vis => token::NtVis(p.parse_visibility(FollowedByType::Yes)?),\n         sym::lifetime => if p.check_lifetime() {\n             token::NtLifetime(p.expect_lifetime().ident)\n         } else {"}, {"sha": "36a097000767bb8d6ccb840723504ed2d63c6865", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -53,7 +53,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n             tokens: None,\n         })]),\n         AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::TraitItem {\n-            id, span, ident, attrs, generics,\n+            id, span, ident, vis, attrs, generics,\n             kind: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         }]),\n@@ -150,6 +150,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n                 id,\n                 ident,\n                 span,\n+                vis,\n                 is_placeholder: true,\n             }\n         ])"}, {"sha": "b299fc558410de26a99969b83d90e9f82f0aeac4", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"attrs\":[],\"id\":0,\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"span\":{\"lo\":0,\"hi\":0},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0}}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0}}"}, {"sha": "9f5f6333602f5889f6a3765edd10cb1a8914f0ed", "filename": "src/test/ui/issues/issue-28433.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28433.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,14 +1,15 @@\n-error: unnecessary visibility qualifier\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/issue-28433.rs:2:5\n    |\n LL |     pub Duck,\n-   |     ^^^ `pub` not permitted here\n+   |     ^^^ `pub` not permitted here because it's implied\n \n-error: unnecessary visibility qualifier\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/issue-28433.rs:5:5\n    |\n LL |     pub(crate) Dove\n-   |     ^^^^^^^^^^ `pub` not permitted here\n+   |     ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0449`."}, {"sha": "7d3fc83786e9d40619f520459f4842f50917fddd", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -4,7 +4,7 @@ trait T {\n     fn qux() -> Option<usize> {\n         let _ = if true {\n         });\n-//~^ ERROR expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n+//~^ ERROR expected one of `async`\n //~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n //~| ERROR expected identifier, found `;`\n         Some(4)"}, {"sha": "e0b15130c337d5401a23fcc95847b2b0207d3472", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -4,7 +4,7 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n+error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `;`\n   --> $DIR/issue-60075.rs:6:11\n    |\n LL |     fn qux() -> Option<usize> {"}, {"sha": "70256a59231fb799b0fa6bd87146a9029875caad", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `...`\n+error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `...`\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 7 possible tokens\n+   |           ^^^ expected one of 9 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "ef89e31d8429da4d0ac2cdcf5f6f24507be47f16", "filename": "src/test/ui/parser/issue-65041-empty-vis-matcher-in-enum.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-enum.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+\n+// Here we check that a `:vis` macro matcher subsititued for the empty visibility\n+// (`VisibilityKind::Inherited`) is accepted when used before an enum variant.\n+\n+fn main() {}\n+\n+macro_rules! mac_variant {\n+    ($vis:vis MARKER) => {\n+        enum Enum {\n+            $vis Unit,\n+\n+            $vis Tuple(u8, u16),\n+\n+            $vis Struct { f: u8 },\n+        }\n+    }\n+}\n+\n+mac_variant!(MARKER);\n+\n+// We also accept visibilities on variants syntactically but not semantically.\n+#[cfg(FALSE)]\n+enum E {\n+    pub U,\n+    pub(crate) T(u8),\n+    pub(super) T { f: String }\n+}"}, {"sha": "b08767b210b0609c981dfbc8dffb0aaadad99c26", "filename": "src/test/ui/parser/issue-65041-empty-vis-matcher-in-trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65041-empty-vis-matcher-in-trait.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+\n+// Here we check that a `:vis` macro matcher subsititued for the empty visibility\n+// (`VisibilityKind::Inherited`) is accepted when used before an item in a trait.\n+\n+fn main() {}\n+\n+macro_rules! mac_in_trait {\n+    ($vis:vis MARKER) => {\n+        $vis fn beta() {}\n+\n+        $vis const GAMMA: u8;\n+\n+        $vis type Delta;\n+    }\n+}\n+\n+trait Alpha {\n+    mac_in_trait!(MARKER);\n+}\n+\n+// We also accept visibilities on items in traits syntactically but not semantically.\n+#[cfg(FALSE)]\n+trait Foo {\n+    pub fn bar();\n+    pub(crate) type baz;\n+    pub(super) const QUUX: u8;\n+}"}, {"sha": "5021886bf9881bef35bac787c2d09bc3e491cd0a", "filename": "src/test/ui/parser/macro/trait-non-item-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,6 +1,6 @@\n macro_rules! bah {\n     ($a:expr) => ($a)\n-    //~^ ERROR expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found `2`\n+    //~^ ERROR expected one of `async`\n }\n \n trait bar {"}, {"sha": "0a433ab278e43b327de3daff1732efdabc31a856", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found `2`\n+error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `2`\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n+   |                   ^^ expected one of 8 possible tokens\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "9f3d78d584d44d535216247499299fe5db934901", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,7 +1,9 @@\n trait T {\n+//~^ ERROR `main` function not found in crate `missing_close_brace_in_trait`\n     fn foo(&self);\n \n-pub(crate) struct Bar<T>(); //~ ERROR expected one of\n+pub(crate) struct Bar<T>();\n+//~^ ERROR expected one of\n \n impl T for Bar<usize> {\n fn foo(&self) {}"}, {"sha": "cbaf9315e8540847a06d98b33fe2a4384938314e", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,25 +1,30 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/missing-close-brace-in-trait.rs:10:66\n+  --> $DIR/missing-close-brace-in-trait.rs:12:66\n    |\n LL | trait T {\n    |         - un-closed delimiter\n ...\n LL | fn main() {}\n    |                                                                  ^\n \n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found keyword `pub`\n-  --> $DIR/missing-close-brace-in-trait.rs:4:1\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found keyword `struct`\n+  --> $DIR/missing-close-brace-in-trait.rs:5:12\n    |\n-LL | trait T {\n-   |         - unclosed delimiter\n-LL |     fn foo(&self);\n-   |                   -\n-   |                   |\n-   |                   expected one of 7 possible tokens\n-   |                   help: `}` may belong here\n-LL | \n LL | pub(crate) struct Bar<T>();\n-   | ^^^ unexpected token\n+   |            ^^^^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n+\n+error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n+  --> $DIR/missing-close-brace-in-trait.rs:1:1\n+   |\n+LL | / trait T {\n+LL | |\n+LL | |     fn foo(&self);\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |_________________________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-trait.rs`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "efd09a0364ee025c2c391d49371cbbfd633453dd", "filename": "src/test/ui/parser/trait-pub-assoc-const.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-const.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,8 +1,9 @@\n-error: unnecessary visibility qualifier\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/trait-pub-assoc-const.rs:2:5\n    |\n LL |     pub const Foo: u32;\n-   |     ^^^ `pub` not permitted here\n+   |     ^^^ `pub` not permitted here because it's implied\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0449`."}, {"sha": "e76373f5c5f8f78b7f3094a2acac841c651a2a5e", "filename": "src/test/ui/parser/trait-pub-assoc-ty.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-assoc-ty.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,8 +1,9 @@\n-error: unnecessary visibility qualifier\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/trait-pub-assoc-ty.rs:2:5\n    |\n LL |     pub type Foo;\n-   |     ^^^ `pub` not permitted here\n+   |     ^^^ `pub` not permitted here because it's implied\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0449`."}, {"sha": "0e3fe027cb5f822745605b5d01a804391edf040b", "filename": "src/test/ui/parser/trait-pub-method.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cba0a9073f740791c5d18148d649c61aaf7d6c7/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-pub-method.stderr?ref=8cba0a9073f740791c5d18148d649c61aaf7d6c7", "patch": "@@ -1,8 +1,9 @@\n-error: unnecessary visibility qualifier\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/trait-pub-method.rs:2:5\n    |\n LL |     pub fn foo();\n-   |     ^^^ `pub` not permitted here\n+   |     ^^^ `pub` not permitted here because it's implied\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0449`."}]}