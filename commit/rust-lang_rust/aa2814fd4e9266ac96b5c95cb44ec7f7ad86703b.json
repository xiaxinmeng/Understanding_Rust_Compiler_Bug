{"sha": "aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMjgxNGZkNGU5MjY2YWM5NmI1Yzk1Y2I0NGVjN2Y3YWQ4NjcwM2I=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-27T04:46:22Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-27T04:48:49Z"}, "message": "Implement Slice for String and str\n\nCloses #17502", "tree": {"sha": "8631e7e4dc92d47b99cb169b1fb84dae3672c7f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8631e7e4dc92d47b99cb169b1fb84dae3672c7f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "html_url": "https://github.com/rust-lang/rust/commit/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d64b4103d688f38c2e9e2daf966d50beeb383f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64b4103d688f38c2e9e2daf966d50beeb383f1e", "html_url": "https://github.com/rust-lang/rust/commit/d64b4103d688f38c2e9e2daf966d50beeb383f1e"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "1a88f3af22b9e183f7565b3f6fc47f5d23e5caee", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "patch": "@@ -18,6 +18,7 @@ use core::default::Default;\n use core::fmt;\n use core::mem;\n use core::ptr;\n+use core::ops;\n // FIXME: ICE's abound if you import the `Slice` type while importing `Slice` trait\n use core::raw::Slice as RawSlice;\n \n@@ -926,6 +927,28 @@ impl<S: Str> Add<S, String> for String {\n     }\n }\n \n+impl ops::Slice<uint, str> for String {\n+    #[inline]\n+    fn as_slice_<'a>(&'a self) -> &'a str {\n+        self.as_slice()\n+    }\n+\n+    #[inline]\n+    fn slice_from_<'a>(&'a self, from: &uint) -> &'a str {\n+        self[][*from..]\n+    }\n+\n+    #[inline]\n+    fn slice_to_<'a>(&'a self, to: &uint) -> &'a str {\n+        self[][..*to]\n+    }\n+\n+    #[inline]\n+    fn slice_<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+        self[][*from..*to]\n+    }\n+}\n+\n /// Unsafe operations\n #[unstable = \"waiting on raw module conventions\"]\n pub mod raw {\n@@ -1290,6 +1313,15 @@ mod tests {\n     #[test] #[should_fail] fn insert_bad1() { \"\".to_string().insert(1, 't'); }\n     #[test] #[should_fail] fn insert_bad2() { \"\u1ec7\".to_string().insert(1, 't'); }\n \n+    #[test]\n+    fn test_slicing() {\n+        let s = \"foobar\".to_string();\n+        assert_eq!(\"foobar\", s[]);\n+        assert_eq!(\"foo\", s[..3]);\n+        assert_eq!(\"bar\", s[3..]);\n+        assert_eq!(\"oob\", s[1..4]);\n+    }\n+\n     #[bench]\n     fn bench_with_capacity(b: &mut Bencher) {\n         b.iter(|| {"}, {"sha": "343b8e0b64b0faefb46506f990a84427932dae70", "filename": "src/libcore/str.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=aa2814fd4e9266ac96b5c95cb44ec7f7ad86703b", "patch": "@@ -1123,6 +1123,7 @@ pub mod traits {\n     use collections::Collection;\n     use iter::Iterator;\n     use option::{Option, Some};\n+    use ops;\n     use str::{Str, StrSlice, eq_slice};\n \n     impl<'a> Ord for &'a str {\n@@ -1162,6 +1163,28 @@ pub mod traits {\n         #[inline]\n         fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n     }\n+\n+    impl ops::Slice<uint, str> for str {\n+        #[inline]\n+        fn as_slice_<'a>(&'a self) -> &'a str {\n+            self\n+        }\n+\n+        #[inline]\n+        fn slice_from_<'a>(&'a self, from: &uint) -> &'a str {\n+            self.slice_from(*from)\n+        }\n+\n+        #[inline]\n+        fn slice_to_<'a>(&'a self, to: &uint) -> &'a str {\n+            self.slice_to(*to)\n+        }\n+\n+        #[inline]\n+        fn slice_<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+            self.slice(*from, *to)\n+        }\n+    }\n }\n \n /// Any string that can be represented as a slice"}]}