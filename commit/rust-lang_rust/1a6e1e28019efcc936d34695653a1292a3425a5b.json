{"sha": "1a6e1e28019efcc936d34695653a1292a3425a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmUxZTI4MDE5ZWZjYzkzNmQzNDY5NTY1M2ExMjkyYTM0MjVhNWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-01-10T20:18:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-24T02:56:41Z"}, "message": "libcore: Correct behaviour of range_step for uint, tests for range* functions.\n\nSplits the range_step function into the two directions (up, low -> high,\nand down, high -> low) for the uint types, since there is no way to have\n`step < 0` for a backwards range.", "tree": {"sha": "59f04a2c9037e40a66e5082967776162d8c85142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f04a2c9037e40a66e5082967776162d8c85142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6e1e28019efcc936d34695653a1292a3425a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6e1e28019efcc936d34695653a1292a3425a5b", "html_url": "https://github.com/rust-lang/rust/commit/1a6e1e28019efcc936d34695653a1292a3425a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6e1e28019efcc936d34695653a1292a3425a5b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e3c82d63f75d697c3e803b639ce2f90b1721b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e3c82d63f75d697c3e803b639ce2f90b1721b1", "html_url": "https://github.com/rust-lang/rust/commit/83e3c82d63f75d697c3e803b639ce2f90b1721b1"}], "stats": {"total": 139, "additions": 124, "deletions": 15}, "files": [{"sha": "c44a814e53b07885a35c90e0ed06f10738939416", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1a6e1e28019efcc936d34695653a1292a3425a5b/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6e1e28019efcc936d34695653a1292a3425a5b/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=1a6e1e28019efcc936d34695653a1292a3425a5b", "patch": "@@ -373,3 +373,45 @@ fn test_times_negative() {\n     use iter::Times;\n     for (-10).times { log(error, ~\"nope!\"); }\n }\n+\n+#[test]\n+pub fn test_ranges() {\n+    let mut l = ~[];\n+\n+    for range(0,3) |i| {\n+        l.push(i);\n+    }\n+    for range_rev(13,10) |i| {\n+        l.push(i);\n+    }\n+    for range_step(20,26,2) |i| {\n+        l.push(i);\n+    }\n+    for range_step(36,30,-2) |i| {\n+        l.push(i);\n+    }\n+    assert l == ~[0,1,2,\n+                  13,12,11,\n+                  20,22,24,\n+                  36,34,32];\n+\n+    // None of the `fail`s should execute.\n+    for range(10,0) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_rev(0,10) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_step(10,0,1) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_step(0,10,-1) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_range_step_zero_step() {\n+    for range_step(0,10,0) |_i| {}\n+}"}, {"sha": "31fbe7fd52042fb98114eea497da28d8252bf1ec", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 82, "deletions": 15, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1a6e1e28019efcc936d34695653a1292a3425a5b/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6e1e28019efcc936d34695653a1292a3425a5b/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=1a6e1e28019efcc936d34695653a1292a3425a5b", "patch": "@@ -69,34 +69,53 @@ pub pure fn is_nonpositive(x: T) -> bool { x <= 0 as T }\n pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n \n #[inline(always)]\n-/// Iterate over the range [`start`,`start`+`step`..`stop`)\n-pub pure fn range_step(start: T, stop: T, step: T, it: fn(T) -> bool) {\n+/**\n+ * Iterate over the range [`start`,`start`+`step`..`stop`)\n+ *\n+ * Note that `uint` requires separate `range_step` functions for each\n+ * direction.\n+ *\n+ */\n+pub pure fn range_step_up(start: T, stop: T, step: T, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        fail ~\"range_step called with step == 0\";\n-    } else if step > 0 { // ascending\n-        while i < stop {\n-            if !it(i) { break }\n-            i += step;\n-        }\n-    } else { // descending\n-        while i > stop {\n-            if !it(i) { break }\n-            i += step;\n-        }\n+        fail ~\"range_step_up called with step == 0\";\n+    }\n+    while i < stop {\n+        if !it(i) { break }\n+        i += step;\n+    }\n+}\n+\n+#[inline(always)]\n+/**\n+ * Iterate over the range [`start`,`start`-`step`..`stop`)\n+ *\n+ * Note that `uint` requires separate `range_step` functions for each\n+ * direction.\n+ *\n+ */\n+pub pure fn range_step_down(start: T, stop: T, step: T, it: fn(T) -> bool) {\n+    let mut i = start;\n+    if step == 0 {\n+        fail ~\"range_step_down called with step == 0\";\n+    }\n+    while i > stop {\n+        if !it(i) { break }\n+        i -= step;\n     }\n }\n \n #[inline(always)]\n /// Iterate over the range [`lo`..`hi`)\n pub pure fn range(lo: T, hi: T, it: fn(T) -> bool) {\n-    range_step(lo, hi, 1 as T, it);\n+    range_step_up(lo, hi, 1 as T, it);\n }\n \n #[inline(always)]\n /// Iterate over the range [`hi`..`lo`)\n pub pure fn range_rev(hi: T, lo: T, it: fn(T) -> bool) {\n-    range_step(hi, lo, -1 as T, it);\n+    range_step_down(hi, lo, 1 as T, it);\n }\n \n /// Computes the bitwise complement\n@@ -351,3 +370,51 @@ pub fn test_times() {\n     for ten.times { accum += 1; }\n     assert (accum == 10);\n }\n+use io;\n+#[test]\n+pub fn test_ranges() {\n+    let mut l = ~[];\n+\n+    for range(0,3) |i| {\n+        l.push(i);\n+    }\n+    for range_rev(13,10) |i| {\n+        l.push(i);\n+    }\n+    for range_step_up(20,26,2) |i| {\n+        l.push(i);\n+    }\n+    for range_step_down(36,30,2) |i| {\n+        l.push(i);\n+    }\n+\n+    assert l == ~[0,1,2,\n+                  13,12,11,\n+                  20,22,24,\n+                  36,34,32];\n+\n+    // None of the `fail`s should execute.\n+    for range(0,0) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_rev(0,0) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_step_up(10,0,1) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+    for range_step_down(0,10,1) |_i| {\n+        fail ~\"unreachable\";\n+    }\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_range_step_up_zero_step() {\n+    for range_step_up(0,10,0) |_i| {}\n+}\n+#[test]\n+#[should_fail]\n+fn test_range_step_down_zero_step() {\n+    for range_step_down(0,10,0) |_i| {}\n+}"}]}