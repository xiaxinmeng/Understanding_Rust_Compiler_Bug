{"sha": "81516fe8ca6fb30cba2127685d3870fee31d81ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNTE2ZmU4Y2E2ZmIzMGNiYTIxMjc2ODVkMzg3MGZlZTMxZDgxZWE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-22T04:48:39Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-01-22T04:48:39Z"}, "message": "Merge pull request #745 from markstory/checkstyle-output\n\nRFC implementation of checkstyle output", "tree": {"sha": "a7763821b43a1227480cb87120c35f155efc8d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7763821b43a1227480cb87120c35f155efc8d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81516fe8ca6fb30cba2127685d3870fee31d81ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81516fe8ca6fb30cba2127685d3870fee31d81ea", "html_url": "https://github.com/rust-lang/rust/commit/81516fe8ca6fb30cba2127685d3870fee31d81ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81516fe8ca6fb30cba2127685d3870fee31d81ea/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c63ed08cedacb40221d6d0dead0041186828a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c63ed08cedacb40221d6d0dead0041186828a01", "html_url": "https://github.com/rust-lang/rust/commit/6c63ed08cedacb40221d6d0dead0041186828a01"}, {"sha": "e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e5621307ee8d6c5b720e426a50f6f56b9216f8", "html_url": "https://github.com/rust-lang/rust/commit/e9e5621307ee8d6c5b720e426a50f6f56b9216f8"}], "stats": {"total": 198, "additions": 178, "deletions": 20}, "files": [{"sha": "a8a19d96bc775af9028d1057355b0a917f2ce703", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -90,7 +90,7 @@ fn execute() -> i32 {\n     opts.optopt(\"\",\n                 \"write-mode\",\n                 \"mode to write in (not usable when piping from stdin)\",\n-                \"[replace|overwrite|display|diff|coverage]\");\n+                \"[replace|overwrite|display|diff|coverage|checkstyle]\");\n     opts.optflag(\"\", \"skip-children\", \"don't reformat child modules\");\n \n     opts.optflag(\"\","}, {"sha": "02e214864fad31cb52efe1a4edf28ecfa2da8027", "filename": "src/checkstyle.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -0,0 +1,82 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+use rustfmt_diff::{Mismatch, DiffLine};\n+use std::io::{self, Write, Read};\n+use config::WriteMode;\n+\n+\n+pub fn output_header<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n+    where T: Write\n+{\n+    if mode == WriteMode::Checkstyle {\n+        let mut xml_heading = String::new();\n+        xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n+        xml_heading.push_str(\"\\n\");\n+        xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n+        try!(write!(out, \"{}\", xml_heading));\n+    }\n+    Ok(())\n+}\n+\n+pub fn output_footer<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n+    where T: Write\n+{\n+    if mode == WriteMode::Checkstyle {\n+        let mut xml_tail = String::new();\n+        xml_tail.push_str(\"</checkstyle>\");\n+        try!(write!(out, \"{}\", xml_tail));\n+    }\n+    Ok(())\n+}\n+\n+pub fn output_checkstyle_file<T>(mut writer: T,\n+                                 filename: &str,\n+                                 diff: Vec<Mismatch>)\n+                                 -> Result<(), io::Error>\n+    where T: Write\n+{\n+    try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n+    for mismatch in diff {\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Expected(ref str) => {\n+                    let message = xml_escape_str(&str);\n+                    try!(write!(writer,\n+                                \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be \\\n+                                 `{}`\\\" />\",\n+                                mismatch.line_number,\n+                                message));\n+                }\n+                _ => {\n+                    // Do nothing with context and expected.\n+                }\n+            }\n+        }\n+    }\n+    try!(write!(writer, \"</file>\"));\n+    Ok(())\n+}\n+\n+// Convert special characters into XML entities.\n+// This is needed for checkstyle output.\n+fn xml_escape_str(string: &str) -> String {\n+    let mut out = String::new();\n+    for c in string.chars() {\n+        match c {\n+            '<' => out.push_str(\"&lt;\"),\n+            '>' => out.push_str(\"&gt;\"),\n+            '\"' => out.push_str(\"&quot;\"),\n+            '\\'' => out.push_str(\"&apos;\"),\n+            '&' => out.push_str(\"&amp;\"),\n+            _ => out.push(c),\n+        }\n+    }\n+    out\n+}"}, {"sha": "5b6a5e05cf59578005b77d0576120fa3f3945de5", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -136,6 +136,8 @@ configuration_option_enum! { WriteMode:\n     Coverage,\n     // Unfancy stdout\n     Plain,\n+    // Output a checkstyle XML file.\n+    Checkstyle,\n }\n \n // This trait and the following impl blocks are there so that we an use"}, {"sha": "61ad573f7027cc53f149f00ae9c868de6b4b922d", "filename": "src/filemap.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -18,7 +18,8 @@ use std::fs::{self, File};\n use std::io::{self, Write, Read, stdout, BufWriter};\n \n use config::{NewlineStyle, Config, WriteMode};\n-use rustfmt_diff::{make_diff, print_diff};\n+use rustfmt_diff::{make_diff, print_diff, Mismatch};\n+use checkstyle::{output_header, output_footer, output_checkstyle_file};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = HashMap<String, StringBuffer>;\n@@ -30,17 +31,23 @@ pub fn append_newlines(file_map: &mut FileMap) {\n     }\n }\n \n-pub fn write_all_files(file_map: &FileMap,\n-                       mode: WriteMode,\n-                       config: &Config)\n-                       -> Result<(), io::Error> {\n+pub fn write_all_files<T>(file_map: &FileMap,\n+                          mut out: T,\n+                          mode: WriteMode,\n+                          config: &Config)\n+                          -> Result<(), io::Error>\n+    where T: Write\n+{\n+    output_header(&mut out, mode).ok();\n     for filename in file_map.keys() {\n-        try!(write_file(&file_map[filename], filename, mode, config));\n+        try!(write_file(&file_map[filename], filename, &mut out, mode, config));\n     }\n+    output_footer(&mut out, mode).ok();\n \n     Ok(())\n }\n \n+\n // Prints all newlines either as `\\n` or as `\\r\\n`.\n pub fn write_system_newlines<T>(writer: T,\n                                 text: &StringBuffer,\n@@ -77,11 +84,14 @@ pub fn write_system_newlines<T>(writer: T,\n     }\n }\n \n-pub fn write_file(text: &StringBuffer,\n-                  filename: &str,\n-                  mode: WriteMode,\n-                  config: &Config)\n-                  -> Result<Option<String>, io::Error> {\n+pub fn write_file<T>(text: &StringBuffer,\n+                     filename: &str,\n+                     out: &mut T,\n+                     mode: WriteMode,\n+                     config: &Config)\n+                     -> Result<Option<String>, io::Error>\n+    where T: Write\n+{\n \n     fn source_and_formatted_text(text: &StringBuffer,\n                                  filename: &str,\n@@ -96,6 +106,14 @@ pub fn write_file(text: &StringBuffer,\n         Ok((ori_text, fmt_text))\n     }\n \n+    fn create_diff(filename: &str,\n+                   text: &StringBuffer,\n+                   config: &Config)\n+                   -> Result<Vec<Mismatch>, io::Error> {\n+        let (ori, fmt) = try!(source_and_formatted_text(text, filename, config));\n+        Ok(make_diff(&ori, &fmt, 3))\n+    }\n+\n     match mode {\n         WriteMode::Replace => {\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n@@ -142,6 +160,10 @@ pub fn write_file(text: &StringBuffer,\n         WriteMode::Default => {\n             unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n         }\n+        WriteMode::Checkstyle => {\n+            let diff = try!(create_diff(filename, text, config));\n+            try!(output_checkstyle_file(out, filename, diff));\n+        }\n     }\n \n     Ok(None)"}, {"sha": "ad9322ab649b9e06637c45f5ec32a3ac56931c9b", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -30,6 +30,7 @@ use syntax::codemap::{mk_sp, Span};\n use syntax::diagnostic::{EmitterWriter, Handler};\n use syntax::parse::{self, ParseSess};\n \n+use std::io::stdout;\n use std::ops::{Add, Sub};\n use std::path::Path;\n use std::collections::HashMap;\n@@ -45,6 +46,7 @@ mod utils;\n pub mod config;\n pub mod filemap;\n mod visitor;\n+mod checkstyle;\n mod items;\n mod missed_spans;\n mod lists;\n@@ -427,8 +429,8 @@ pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n     let mut result = format(file, config, mode);\n \n     print!(\"{}\", fmt_lines(&mut result, config));\n-\n-    let write_result = filemap::write_all_files(&result, mode, config);\n+    let out = stdout();\n+    let write_result = filemap::write_all_files(&result, out, mode, config);\n \n     if let Err(msg) = write_result {\n         println!(\"Error writing files: {}\", msg);\n@@ -441,7 +443,8 @@ pub fn run_from_stdin(input: String, write_mode: WriteMode, config: &Config) {\n     let mut result = format_string(input, config, mode);\n     fmt_lines(&mut result, config);\n \n-    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", mode, config);\n+    let mut out = stdout();\n+    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, mode, config);\n \n     if let Err(msg) = write_result {\n         panic!(\"Error writing to stdout: {}\", msg);"}, {"sha": "84dbf2e1abc1a867842f001ad4715ff070f5c704", "filename": "tests/system.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -19,7 +19,7 @@ use std::io::{self, Read, BufRead, BufReader};\n use std::path::Path;\n \n use rustfmt::*;\n-use rustfmt::filemap::write_system_newlines;\n+use rustfmt::filemap::{write_system_newlines, FileMap};\n use rustfmt::config::{Config, ReportTactic, WriteMode};\n use rustfmt::rustfmt_diff::*;\n \n@@ -63,6 +63,42 @@ fn coverage_tests() {\n     assert!(fails == 0, \"{} tests failed\", fails);\n }\n \n+#[test]\n+fn checkstyle_test() {\n+    let filename = \"tests/source/fn-single-line.rs\";\n+    let expected_filename = \"tests/writemode/checkstyle.xml\";\n+    assert_output(filename, expected_filename, WriteMode::Checkstyle);\n+}\n+\n+\n+// Helper function for comparing the results of rustfmt\n+// to a known output file generated by one of the write modes.\n+fn assert_output(source: &str, expected_filename: &str, write_mode: WriteMode) {\n+    let config = read_config(&source);\n+    let file_map = run_rustfmt(source.to_string(), write_mode);\n+\n+    // Populate output by writing to a vec.\n+    let mut out = vec![];\n+    let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n+    let output = String::from_utf8(out).unwrap();\n+\n+    let mut expected_file = fs::File::open(&expected_filename)\n+                                .ok()\n+                                .expect(\"Couldn't open target.\");\n+    let mut expected_text = String::new();\n+    expected_file.read_to_string(&mut expected_text)\n+                 .ok()\n+                 .expect(\"Failed reading target.\");\n+\n+    let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+    if compare.len() > 0 {\n+        let mut failures = HashMap::new();\n+        failures.insert(source.to_string(), compare);\n+        print_mismatches(failures);\n+        assert!(false, \"Text does not match expected output\");\n+    }\n+}\n+\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[test]\n@@ -145,9 +181,7 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n-pub fn idempotent_check(filename: String,\n-                        write_mode: WriteMode)\n-                        -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n+fn read_config(filename: &str) -> Config {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n \n@@ -159,8 +193,21 @@ pub fn idempotent_check(filename: String,\n \n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n+    config\n+}\n+\n+// Simulate run()\n+fn run_rustfmt(filename: String, write_mode: WriteMode) -> FileMap {\n+    let config = read_config(&filename);\n+    format(Path::new(&filename), &config, write_mode)\n+}\n \n-    let mut file_map = format(Path::new(&filename), &config, write_mode);\n+pub fn idempotent_check(filename: String,\n+                        write_mode: WriteMode)\n+                        -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n+    let sig_comments = read_significant_comments(&filename);\n+    let config = read_config(&filename);\n+    let mut file_map = run_rustfmt(filename, write_mode);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     let mut write_result = HashMap::new();"}, {"sha": "f655cfb3b6b50c9c5b3bd2409c48b0b16d900091", "filename": "tests/writemode/checkstyle.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81516fe8ca6fb30cba2127685d3870fee31d81ea/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/81516fe8ca6fb30cba2127685d3870fee31d81ea/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=81516fe8ca6fb30cba2127685d3870fee31d81ea", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be ``\" /></file></checkstyle>"}]}