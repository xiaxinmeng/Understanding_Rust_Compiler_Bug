{"sha": "5379fc1b2804b647946b4a5d485db6c9579e4f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzlmYzFiMjgwNGI2NDc5NDZiNGE1ZDQ4NWRiNmM5NTc5ZTRmNTU=", "commit": {"author": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2018-05-27T21:59:07Z"}, "committer": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2018-05-27T21:59:07Z"}, "message": "better parsing of condition in while loop for mutability\n\nallow condition to be a block: by calling visit_expr of the visitor directly on the condition instead of walk_expr on the whole expression, we bypass the match to ExprWhile that calls visit_expr on the condition and visit_block on the body. This allow to re-enable visit_block in the visitor, as it won't be called on the while body\nallow condition to use static variables: maintain a list of static variables used, and if they are mutable", "tree": {"sha": "0c0df1cf4e819a092b36e0ee05ccf95976e3696c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0df1cf4e819a092b36e0ee05ccf95976e3696c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5379fc1b2804b647946b4a5d485db6c9579e4f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5379fc1b2804b647946b4a5d485db6c9579e4f55", "html_url": "https://github.com/rust-lang/rust/commit/5379fc1b2804b647946b4a5d485db6c9579e4f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5379fc1b2804b647946b4a5d485db6c9579e4f55/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc008aa14c59a0b0cb0a1e60fe836f83019a722a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc008aa14c59a0b0cb0a1e60fe836f83019a722a", "html_url": "https://github.com/rust-lang/rust/commit/fc008aa14c59a0b0cb0a1e60fe836f83019a722a"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "c8f1d3edaeb37294cca75ed41082d8cfa384e52a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5379fc1b2804b647946b4a5d485db6c9579e4f55/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5379fc1b2804b647946b4a5d485db6c9579e4f55/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5379fc1b2804b647946b4a5d485db6c9579e4f55", "patch": "@@ -2154,9 +2154,10 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n     let mut mut_var_visitor = VarCollectorVisitor {\n         cx,\n         ids: HashMap::new(),\n+        def_ids: HashMap::new(),\n         skip: false,\n     };\n-    walk_expr(&mut mut_var_visitor, expr);\n+    mut_var_visitor.visit_expr(cond);\n     if mut_var_visitor.skip {\n         return;\n     }\n@@ -2172,7 +2173,7 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n     if delegate.skip {\n         return;\n     }\n-    if !delegate.used_mutably.iter().any(|(_, v)| *v) {\n+    if !(delegate.used_mutably.iter().any(|(_, v)| *v) || mut_var_visitor.def_ids.iter().any(|(_, v)| *v)) {\n         span_lint(\n             cx,\n             WHILE_IMMUTABLE_CONDITION,\n@@ -2189,6 +2190,7 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n struct VarCollectorVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     ids: HashMap<NodeId, bool>,\n+    def_ids: HashMap<def_id::DefId, bool>,\n     skip: bool,\n }\n \n@@ -2203,6 +2205,9 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n                     Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n                         self.ids.insert(node_id, false);\n                     },\n+                    Def::Static(def_id, mutable) => {\n+                        self.def_ids.insert(def_id, mutable);\n+                    },\n                     _ => {},\n                 }\n             }\n@@ -2221,8 +2226,6 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_block(&mut self, _b: &'tcx Block) {}\n-\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }"}, {"sha": "6ecd40b99b1c130a210cee35af153cf34ee9fe7a", "filename": "tests/run-pass/issues_loop_mut_cond.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5379fc1b2804b647946b4a5d485db6c9579e4f55/tests%2Frun-pass%2Fissues_loop_mut_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5379fc1b2804b647946b4a5d485db6c9579e4f55/tests%2Frun-pass%2Fissues_loop_mut_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissues_loop_mut_cond.rs?ref=5379fc1b2804b647946b4a5d485db6c9579e4f55", "patch": "@@ -0,0 +1,28 @@\n+#![allow(dead_code)]\n+\n+/// Issue: https://github.com/rust-lang-nursery/rust-clippy/issues/2596\n+pub fn loop_on_block_condition(u: &mut isize) {\n+    while { *u < 0 } {\n+        *u += 1;\n+    }\n+}\n+\n+/// https://github.com/rust-lang-nursery/rust-clippy/issues/2584\n+fn loop_with_unsafe_condition(ptr: *const u8) {\n+    let mut len = 0;\n+    while unsafe { *ptr.offset(len) } != 0 {\n+        len += 1;\n+    }\n+}\n+\n+/// https://github.com/rust-lang-nursery/rust-clippy/issues/2710\n+static mut RUNNING: bool = true;\n+fn loop_on_static_condition() {\n+    unsafe {\n+        while RUNNING {\n+            RUNNING = false;\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}