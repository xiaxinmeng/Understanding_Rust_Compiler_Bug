{"sha": "f379c97913df637e1203d0fe2b3598b7ac9d1a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzljOTc5MTNkZjYzN2UxMjAzZDBmZTJiMzU5OGI3YWM5ZDFhMTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T15:19:46Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-27T15:19:46Z"}, "message": "Don't allow globals or immutable locals to be passed by mut alias\n\nCloses #747", "tree": {"sha": "f6057add63602bee41a326c3afa3cb19aef9ea9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6057add63602bee41a326c3afa3cb19aef9ea9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f379c97913df637e1203d0fe2b3598b7ac9d1a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f379c97913df637e1203d0fe2b3598b7ac9d1a17", "html_url": "https://github.com/rust-lang/rust/commit/f379c97913df637e1203d0fe2b3598b7ac9d1a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f379c97913df637e1203d0fe2b3598b7ac9d1a17/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e1d8b745bf73887390ed21ca58ae5688cbe208", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e1d8b745bf73887390ed21ca58ae5688cbe208", "html_url": "https://github.com/rust-lang/rust/commit/06e1d8b745bf73887390ed21ca58ae5688cbe208"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "a7b4d25c40704c7673b2365a86e7a69edb13bdc2", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=f379c97913df637e1203d0fe2b3598b7ac9d1a17", "patch": "@@ -41,14 +41,12 @@ type ctx = {tcx: ty::ctxt, local_map: std::map::hashmap[node_id, local_info]};\n fn check_crate(tcx: ty::ctxt, crate: &@ast::crate) {\n     // Stores information about object fields and function\n     // arguments that's otherwise not easily available.\n-    let cx =\n-        @{tcx: tcx, local_map: std::map::new_int_hash()};\n-    let v =\n-        @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n-          visit_item: bind visit_item(cx, _, _, _),\n-          visit_expr: bind visit_expr(cx, _, _, _),\n-          visit_decl: bind visit_decl(cx, _, _, _)\n-             with *visit::default_visitor[scope]()};\n+    let cx = @{tcx: tcx, local_map: std::map::new_int_hash()};\n+    let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n+              visit_item: bind visit_item(cx, _, _, _),\n+              visit_expr: bind visit_expr(cx, _, _, _),\n+              visit_decl: bind visit_decl(cx, _, _, _)\n+              with *visit::default_visitor[scope]()};\n     visit::visit_crate(*crate, @~[], visit::mk_vt(v));\n     tcx.sess.abort_if_errors();\n }\n@@ -158,12 +156,29 @@ fn check_call(cx: &ctx, f: &@ast::expr, args: &(@ast::expr)[], sc: &scope) ->\n             let arg = args.(i);\n             let root = expr_root(cx, arg, false);\n             if arg_t.mode == ty::mo_alias(true) {\n-                alt path_def_id(cx, arg) {\n-                  some(did) { mut_roots += ~[{arg: i, node: did.node}]; }\n+                alt path_def(cx, arg) {\n+                  some(def) {\n+                    let dnum = ast::def_id_of_def(def).node;\n+                    if def_is_local(def, true) {\n+                        if is_immutable_alias(cx, sc, dnum) {\n+                            cx.tcx.sess.span_err\n+                                (arg.span, \"passing an immutable alias \\\n+                                            by mutable alias\");\n+                        } else if is_immutable_objfield(cx, dnum) {\n+                            cx.tcx.sess.span_err\n+                                (arg.span, \"passing an immutable object \\\n+                                            field by mutable alias\");\n+                        }\n+                    } else {\n+                        cx.tcx.sess.span_err\n+                            (arg.span,\n+                             \"passing a static item by mutable alias\");\n+                    }\n+                    mut_roots += ~[{arg: i, node: dnum}];\n+                  }\n                   _ {\n                     if !mut_field(root.ds) {\n-                        let m =\n-                            \"passing a temporary value or \\\n+                        let m = \"passing a temporary value or \\\n                                  immutable field by mutable alias\";\n                         cx.tcx.sess.span_err(arg.span, m);\n                     }\n@@ -391,13 +406,13 @@ fn check_lval(cx: &@ctx, dest: &@ast::expr, sc: &scope, v: &vt[scope]) {\n     alt dest.node {\n       ast::expr_path(p) {\n         let dnum = ast::def_id_of_def(cx.tcx.def_map.get(dest.id)).node;\n-        if is_immutable_alias(cx, sc, dnum) {\n+        if is_immutable_alias(*cx, sc, dnum) {\n             cx.tcx.sess.span_err(dest.span, \"assigning to immutable alias\");\n-        } else if (is_immutable_objfield(cx, dnum)) {\n+        } else if (is_immutable_objfield(*cx, dnum)) {\n             cx.tcx.sess.span_err(dest.span,\n                                  \"assigning to immutable obj field\");\n         }\n-        for r: restrict  in *sc {\n+        for r: restrict in *sc {\n             if ivec::member(dnum, r.root_vars) {\n                 r.ok = overwritten(dest.span, p);\n             }\n@@ -452,7 +467,7 @@ fn check_assign(cx: &@ctx, dest: &@ast::expr, src: &@ast::expr, sc: &scope,\n }\n \n \n-fn is_immutable_alias(cx: &@ctx, sc: &scope, dnum: node_id) -> bool {\n+fn is_immutable_alias(cx: &ctx, sc: &scope, dnum: node_id) -> bool {\n     alt cx.local_map.find(dnum) {\n       some(arg(ast::alias(false))) { ret true; }\n       _ { }\n@@ -463,7 +478,7 @@ fn is_immutable_alias(cx: &@ctx, sc: &scope, dnum: node_id) -> bool {\n     ret false;\n }\n \n-fn is_immutable_objfield(cx: &@ctx, dnum: node_id) -> bool {\n+fn is_immutable_objfield(cx: &ctx, dnum: node_id) -> bool {\n     ret cx.local_map.find(dnum) == some(objfield(ast::imm));\n }\n \n@@ -614,6 +629,13 @@ fn inner_mut(ds: &@deref[]) -> option::t[ty::t] {\n     ret none;\n }\n \n+fn path_def(cx: &ctx, ex: &@ast::expr) -> option::t[ast::def] {\n+    ret alt ex.node {\n+      ast::expr_path(_) { some(cx.tcx.def_map.get(ex.id)) }\n+      _ { none }\n+    }\n+}\n+\n fn path_def_id(cx: &ctx, ex: &@ast::expr) -> option::t[ast::def_id] {\n     alt ex.node {\n       ast::expr_path(_) {"}, {"sha": "f1d73635f1b86d5024dea2ab78a9074710508aa6", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=f379c97913df637e1203d0fe2b3598b7ac9d1a17", "patch": "@@ -1,11 +1,11 @@\n // Unsafe pointer utility functions.\n \n native \"rust-intrinsic\" mod rusti {\n-    fn addr_of[T](val: &mutable T) -> *mutable T;\n+    fn addr_of[T](val: &T) -> *mutable T;\n     fn ptr_offset[T](ptr: *T, count: uint) -> *T;\n }\n \n-fn addr_of[T](val: &mutable T) -> *mutable T { ret rusti::addr_of(val); }\n+fn addr_of[T](val: &T) -> *mutable T { ret rusti::addr_of(val); }\n fn offset[T](ptr: *T, count: uint) -> *T {\n     ret rusti::ptr_offset(ptr, count);\n }"}, {"sha": "a780427861cfdb4e7d781befeb2ed609436a5f6c", "filename": "src/lib/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=f379c97913df637e1203d0fe2b3598b7ac9d1a17", "patch": "@@ -88,7 +88,7 @@ tag test_result { tr_ok; tr_failed; tr_ignored; }\n // In cases where test functions and closures it is not ok to just dump them\n // into a task and run them, so this transformation gives the caller a chance\n // to create the test task.\n-type test_to_task = fn(&fn() ) -> task ;\n+type test_to_task = fn(&fn()) -> task ;\n \n // A simple console test runner\n fn run_tests_console(opts: &test_opts, tests: &test_desc[]) -> bool {\n@@ -298,7 +298,7 @@ native \"rust\" mod rustrt {\n // But, at least currently, functions can't be used as spawn arguments so\n // we've got to treat our test functions as unsafe pointers.  This function\n // only works with functions that don't contain closures.\n-fn default_test_to_task(f: &fn() ) -> task {\n+fn default_test_to_task(f: &fn()) -> task {\n     fn run_task(fptr: *mutable fn() ) {\n         // If this task fails we don't want that failure to propagate to the\n         // test runner or else we couldn't keep running tests"}, {"sha": "c902e39a0de57890a532a9c673f8574adc787ba9", "filename": "src/lib/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f379c97913df637e1203d0fe2b3598b7ac9d1a17/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=f379c97913df637e1203d0fe2b3598b7ac9d1a17", "patch": "@@ -190,7 +190,7 @@ fn grow_init_fn[T](v: &mutable array[T], n: uint, init_fn: fn() -> T ) {\n     while i > 0u { i -= 1u; v += [init_fn()]; }\n }\n \n-fn grow_init_fn_set[T](v: &array[T], index: uint, init_fn: fn() -> T ,\n+fn grow_init_fn_set[T](v: &mutable array[T], index: uint, init_fn: fn() -> T,\n                        val: &T) {\n     let length = vec::len(v);\n     if index >= length { grow_init_fn(v, index - length + 1u, init_fn); }"}]}