{"sha": "364ac9b9468e1930f39e0dddc454b2eb7d68f360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NGFjOWI5NDY4ZTE5MzBmMzllMGRkZGM0NTRiMmViN2Q2OGYzNjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-24T11:03:28Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-24T11:03:28Z"}, "message": "Merge #1434\n\n1434: Introduce cargo-watch.check-command option for Code extension r=matklad a=alekseysidorov\n\nBy this option you can replace `check` command in `cargo watch` by the something else like `clippy`.\n\nCo-authored-by: Aleksei Sidorov <aleksei.sidorov@xdev.re>\nCo-authored-by: Aleksey Sidorov <alekseysidorov@users.noreply.github.com>", "tree": {"sha": "3e509c7b96be33f8b5d1fcb0ebd601e15aaf057f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e509c7b96be33f8b5d1fcb0ebd601e15aaf057f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364ac9b9468e1930f39e0dddc454b2eb7d68f360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364ac9b9468e1930f39e0dddc454b2eb7d68f360", "html_url": "https://github.com/rust-lang/rust/commit/364ac9b9468e1930f39e0dddc454b2eb7d68f360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364ac9b9468e1930f39e0dddc454b2eb7d68f360/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f6340022c1ce9bfa716b4b61800cdc8c51260a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6340022c1ce9bfa716b4b61800cdc8c51260a93", "html_url": "https://github.com/rust-lang/rust/commit/f6340022c1ce9bfa716b4b61800cdc8c51260a93"}, {"sha": "28e9e8d4cfdf2a334cde6db7d10e7acb8f5fe8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e9e8d4cfdf2a334cde6db7d10e7acb8f5fe8b1", "html_url": "https://github.com/rust-lang/rust/commit/28e9e8d4cfdf2a334cde6db7d10e7acb8f5fe8b1"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "ac2ba82e3eff1898595f91f82c85f1e37fefe65c", "filename": "editors/code/package.json", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=364ac9b9468e1930f39e0dddc454b2eb7d68f360", "patch": "@@ -201,11 +201,16 @@\n                     ],\n                     \"description\": \"Whether to run `cargo watch` on startup\"\n                 },\n-                \"rust-analyzer.cargo-watch.check-arguments\": {\n+                \"rust-analyzer.cargo-watch.arguments\": {\n                     \"type\": \"string\",\n-                    \"description\": \"`cargo-watch` check arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n+                    \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n                     \"default\": \"\"\n                 },\n+                \"rust-analyzer.cargo-watch.command\": {\n+                    \"type\": \"string\",\n+                    \"description\": \"`cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\",\n+                    \"default\": \"check\"\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\","}, {"sha": "13adf4c10bd76b11ebdb70474772af6787eb5cda", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=364ac9b9468e1930f39e0dddc454b2eb7d68f360", "patch": "@@ -43,7 +43,9 @@ export class CargoWatchProvider implements vscode.Disposable {\n         this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n             'rustc'\n         );\n-        this.statusDisplay = new StatusDisplay();\n+        this.statusDisplay = new StatusDisplay(\n+            Server.config.cargoWatchOptions.command\n+        );\n         this.outputChannel = vscode.window.createOutputChannel(\n             'Cargo Watch Trace'\n         );\n@@ -57,10 +59,12 @@ export class CargoWatchProvider implements vscode.Disposable {\n             return;\n         }\n \n-        let args = 'check --all-targets --message-format json';\n-        if (Server.config.cargoWatchOptions.checkArguments.length > 0) {\n+        let args =\n+            Server.config.cargoWatchOptions.command +\n+            ' --all-targets --message-format json';\n+        if (Server.config.cargoWatchOptions.command.length > 0) {\n             // Excape the double quote string:\n-            args += ' ' + Server.config.cargoWatchOptions.checkArguments;\n+            args += ' ' + Server.config.cargoWatchOptions.arguments;\n         }\n         // Windows handles arguments differently than the unix-likes, so we need to wrap the args in double quotes\n         if (process.platform === 'win32') {"}, {"sha": "6c1f9041bad336fc642beb76a24e4505b05888f0", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=364ac9b9468e1930f39e0dddc454b2eb7d68f360", "patch": "@@ -7,13 +7,15 @@ export class StatusDisplay implements vscode.Disposable {\n \n     private i = 0;\n     private statusBarItem: vscode.StatusBarItem;\n+    private command: string;\n     private timer?: NodeJS.Timeout;\n \n-    constructor() {\n+    constructor(command: string) {\n         this.statusBarItem = vscode.window.createStatusBarItem(\n             vscode.StatusBarAlignment.Left,\n             10\n         );\n+        this.command = command;\n         this.statusBarItem.hide();\n     }\n \n@@ -24,11 +26,13 @@ export class StatusDisplay implements vscode.Disposable {\n             this.timer ||\n             setInterval(() => {\n                 if (this.packageName) {\n-                    this.statusBarItem!.text = `cargo check [${\n+                    this.statusBarItem!.text = `cargo ${this.command} [${\n                         this.packageName\n                     }] ${this.frame()}`;\n                 } else {\n-                    this.statusBarItem!.text = `cargo check ${this.frame()}`;\n+                    this.statusBarItem!.text = `cargo ${\n+                        this.command\n+                    } ${this.frame()}`;\n                 }\n             }, 300);\n "}, {"sha": "10e98d75342bef1eca5dd607bb987e3a24f48ec7", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/364ac9b9468e1930f39e0dddc454b2eb7d68f360/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=364ac9b9468e1930f39e0dddc454b2eb7d68f360", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n \n+import { strict } from 'assert';\n import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -9,7 +10,8 @@ export type CargoWatchTraceOptions = 'off' | 'error' | 'verbose';\n \n export interface CargoWatchOptions {\n     enableOnStartup: CargoWatchStartupOptions;\n-    checkArguments: string;\n+    arguments: string;\n+    command: string;\n     trace: CargoWatchTraceOptions;\n }\n \n@@ -23,7 +25,8 @@ export class Config {\n     public cargoWatchOptions: CargoWatchOptions = {\n         enableOnStartup: 'ask',\n         trace: 'off',\n-        checkArguments: ''\n+        arguments: '',\n+        command: ''\n     };\n \n     private prevEnhancedTyping: null | boolean = null;\n@@ -104,12 +107,20 @@ export class Config {\n             );\n         }\n \n-        if (config.has('cargo-watch.check-arguments')) {\n-            this.cargoWatchOptions.checkArguments = config.get<string>(\n-                'cargo-watch.check-arguments',\n+        if (config.has('cargo-watch.arguments')) {\n+            this.cargoWatchOptions.arguments = config.get<string>(\n+                'cargo-watch.arguments',\n                 ''\n             );\n         }\n+\n+        if (config.has('cargo-watch.command')) {\n+            this.cargoWatchOptions.command = config.get<string>(\n+                'cargo-watch.command',\n+                ''\n+            );\n+        }\n+\n         if (config.has('lruCapacity')) {\n             this.lruCapacity = config.get('lruCapacity') as number;\n         }"}]}