{"sha": "f87177b1c5df80d98e8f9c4645ecfc68edbae931", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzE3N2IxYzVkZjgwZDk4ZThmOWM0NjQ1ZWNmYzY4ZWRiYWU5MzE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-15T21:24:51Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-18T19:01:37Z"}, "message": "Replace bool with new `FallbackMode` enum", "tree": {"sha": "ea9f35134d1f8b0fb9efad29c360560c8753ad24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9f35134d1f8b0fb9efad29c360560c8753ad24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87177b1c5df80d98e8f9c4645ecfc68edbae931", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3S6pEACgkQtAh+UQ6Y\nsWQcEg/+KH3PuSCoXzo+zHs4NWcraxV7gV8HeaC8LRZK+0rsVllYWKusrdgsmjf+\nS+5CEwFdYvFm/2urR+4sT9Du+NzDlsmptlBa//XWxMotus3LSWM4xhP/B5Wfdx/I\nrrRsEfw5QuPgw3/Xd262T8G92nn2s7/J8b8JNmhD/q1CxR178mq6y+O89N8ErjW3\ncAFUQSYKMJ71yl3c5bwuQsxmMzYMUuCOutrPftAzqlIq9FB7wl1qS2rOtY5jmUVB\nM1W0Rd3Xe2FKyOom+aoWGoj02eCbzLVieLOew+Nf0g51JLOV9BSeDAYxb5Biowb7\n45q+I0ciR4Uzs+XrbMrCqA1lhefoDQ3+Ky5alnKx86eP6PMb2LA3zBinPLjTDhoQ\n49XQxwSV/uOpEYEbO0zyRhi9blRslL1ZRlWxZU7c9UvDoohSYARKJmBQ4gfsnUMm\nh0p6EbMGCuyZ+jzM9wy5OynVtG9TD2LVAeC6QFForIlHu63ba4lPXuEVotofek/3\nDml0nzaq0yoWit50rjAjfLFV3ga/LCLKHAuys+MP03fCxE9hOHF7gUdHFlO2Q9HC\nHGJov2/GkPHMmTGfBhiryWTELzuS14RLXYaeSp2tprSXxpKezXgTDQJIqVRyCUh1\naqGDqeQHsxj0MP3spa0pb8t+l6Nz/ixq03KGthgjKrS479jQM8Y=\n=B+72\n-----END PGP SIGNATURE-----", "payload": "tree ea9f35134d1f8b0fb9efad29c360560c8753ad24\nparent 61c75bdb11e782ee50ff1e4de6d29fd5ff4f0e31\nauthor Aaron Hill <aa1ronham@gmail.com> 1573853091 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574103697 -0500\n\nReplace bool with new `FallbackMode` enum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87177b1c5df80d98e8f9c4645ecfc68edbae931", "html_url": "https://github.com/rust-lang/rust/commit/f87177b1c5df80d98e8f9c4645ecfc68edbae931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87177b1c5df80d98e8f9c4645ecfc68edbae931/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c75bdb11e782ee50ff1e4de6d29fd5ff4f0e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c75bdb11e782ee50ff1e4de6d29fd5ff4f0e31", "html_url": "https://github.com/rust-lang/rust/commit/61c75bdb11e782ee50ff1e4de6d29fd5ff4f0e31"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "9b197c1ecb14076ff8c38d2a5bf5d20e19ced3ba", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f87177b1c5df80d98e8f9c4645ecfc68edbae931/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87177b1c5df80d98e8f9c4645ecfc68edbae931/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=f87177b1c5df80d98e8f9c4645ecfc68edbae931", "patch": "@@ -25,7 +25,7 @@ pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n #[derive(Copy, Clone, Debug)]\n pub struct OpaqueTypeDecl<'tcx> {\n \n-    /// The opaque type (`ty::Opaque`) for this declaration\n+    /// The opaque type (`ty::Opaque`) for this declaration.\n     pub opaque_type: Ty<'tcx>,\n \n     /// The substitutions that we apply to the opaque type that this"}, {"sha": "50c1a74fe911b80bc067836e453baddb70d1f8cf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f87177b1c5df80d98e8f9c4645ecfc68edbae931/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87177b1c5df80d98e8f9c4645ecfc68edbae931/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f87177b1c5df80d98e8f9c4645ecfc68edbae931", "patch": "@@ -232,7 +232,7 @@ pub struct Inherited<'a, 'tcx> {\n     opaque_types: RefCell<DefIdMap<OpaqueTypeDecl<'tcx>>>,\n \n     /// A map from inference variables created from opaque\n-    /// type instantiations (ty::Infer) to the actual opaque\n+    /// type instantiations (`ty::Infer`) to the actual opaque\n     /// type (`ty::Opaque`). Used during fallback to map unconstrained\n     /// opaque type inference variables to their corresponding\n     /// opaque type.\n@@ -950,7 +950,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         // better error messages.\n         // The first time, we do *not* replace opaque types.\n         for ty in &fcx.unsolved_variables() {\n-            fallback_has_occurred |= fcx.fallback_if_possible(ty, false /* opaque_fallback */);\n+            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::NoOpaque);\n         }\n         // We now see if we can make progress. This might\n         // cause us to unify inference variables for opaque types,\n@@ -968,7 +968,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         // ```\n         //\n         // we want to unify the opaque inference variable in `bad_produce`\n-        // with the diverging fallback for `panic!` (e.g. `()` or `!`),\n+        // with the diverging fallback for `panic!` (e.g. `()` or `!`).\n         // This will produce a nice error message about conflicting concrete\n         // types for `MyType`.\n         //\n@@ -981,10 +981,10 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         // unconstrained opaque type variables, in addition to performing\n         // other kinds of fallback.\n         for ty in &fcx.unsolved_variables() {\n-            fallback_has_occurred |= fcx.fallback_if_possible(ty, true /* opaque_fallback */);\n+            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::All);\n         }\n \n-        // See if we can make any more progress\n+        // See if we can make any more progress.\n         fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n@@ -2544,6 +2544,16 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n+/// Controls how we perform fallback for unconstrained\n+/// type variables.\n+enum FallbackMode {\n+    /// Do not fallback type variables to opaque types.\n+    NoOpaque,\n+    /// Perform all possible kinds of fallback, including\n+    /// turning type variables to opaque types.\n+    All,\n+}\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn new(\n         inh: &'a Inherited<'a, 'tcx>,\n@@ -3125,7 +3135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to Error.\n     // The return value indicates whether fallback has occurred.\n-    fn fallback_if_possible(&self, ty: Ty<'tcx>, opaque_fallback: bool) -> bool {\n+    fn fallback_if_possible(&self, ty: Ty<'tcx>, mode: FallbackMode) -> bool {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -3170,7 +3180,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // instantiating `Option<Foo>` will be completely unconstrained.\n                 // We treat this as a non-defining use by making the inference\n                 // variable fall back to the opaque type itself.\n-                if opaque_fallback {\n+                if let FallbackMode::All = mode {\n                     if let Some(opaque_ty) = self.opaque_types_vars.borrow().get(ty) {\n                         debug!(\"fallback_if_possible: falling back opaque type var {:?} to {:?}\",\n                                ty, opaque_ty);"}]}