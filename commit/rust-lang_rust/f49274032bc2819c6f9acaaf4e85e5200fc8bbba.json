{"sha": "f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OTI3NDAzMmJjMjgxOWM2ZjlhY2FhZjRlODVlNTIwMGZjOGJiYmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-23T17:29:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:50Z"}, "message": "rustc_metadata: rename index::Index to table::Table.", "tree": {"sha": "97bd3ca552f9690491e033234670941ebb485649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97bd3ca552f9690491e033234670941ebb485649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "html_url": "https://github.com/rust-lang/rust/commit/f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b3c392187003236aafe10e153816c13f7b896d", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b3c392187003236aafe10e153816c13f7b896d", "html_url": "https://github.com/rust-lang/rust/commit/83b3c392187003236aafe10e153816c13f7b896d"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "684dfd69d2db7acb185c83a54d2a3383b5ce3c22", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n-        self.root.entries_index.lookup(self.blob.raw_bytes(), item_id)\n+        self.root.entries_table.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n     fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {"}, {"sha": "abfee8eaa3cd7870a2fba43207bb741fb9bcc10b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "patch": "@@ -1,5 +1,5 @@\n-use crate::index::Index;\n use crate::schema::*;\n+use crate::table::Table;\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -47,7 +47,7 @@ struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,\n \n-    entries_index: Index<'tcx>,\n+    entries_table: Table<'tcx>,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -325,7 +325,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n         let entry = op(self, data);\n         let entry = self.lazy(entry);\n-        self.entries_index.record(id, entry);\n+        self.entries_table.record(id, entry);\n     }\n \n     fn encode_info_for_items(&mut self) {\n@@ -477,8 +477,8 @@ impl<'tcx> EncodeContext<'tcx> {\n \n \n         i = self.position();\n-        let entries_index = self.entries_index.write_index(&mut self.opaque);\n-        let entries_index_bytes = self.position() - i;\n+        let entries_table = self.entries_table.encode(&mut self.opaque);\n+        let entries_table_bytes = self.position() - i;\n \n         // Encode the proc macro data\n         i = self.position();\n@@ -537,7 +537,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             impls,\n             exported_symbols,\n             interpret_alloc_index,\n-            entries_index,\n+            entries_table,\n         });\n \n         let total_bytes = self.position();\n@@ -562,7 +562,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             println!(\" proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n-            println!(\"   entries index bytes: {}\", entries_index_bytes);\n+            println!(\"   entries table bytes: {}\", entries_table_bytes);\n             println!(\"            zero bytes: {}\", zero_bytes);\n             println!(\"           total bytes: {}\", total_bytes);\n         }\n@@ -1916,7 +1916,7 @@ crate fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n         let mut ecx = EncodeContext {\n             opaque: encoder,\n             tcx,\n-            entries_index: Index::new(tcx.hir().definitions().def_index_count()),\n+            entries_table: Table::new(tcx.hir().definitions().def_index_count()),\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),"}, {"sha": "291ee23ff7262d73917adb7dffcf3714888d8cec", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "patch": "@@ -26,15 +26,15 @@ extern crate rustc_data_structures;\n \n pub mod error_codes;\n \n-mod index;\n mod encoder;\n mod decoder;\n+mod dependency_format;\n mod cstore_impl;\n-mod schema;\n-mod native_libs;\n-mod link_args;\n mod foreign_modules;\n-mod dependency_format;\n+mod link_args;\n+mod native_libs;\n+mod schema;\n+mod table;\n \n pub mod creader;\n pub mod cstore;"}, {"sha": "52bbebb17f26acdc8dc816d85ba97f570ecaa68e", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "patch": "@@ -1,4 +1,4 @@\n-use crate::index;\n+use crate::table::Table;\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -186,7 +186,7 @@ crate struct CrateRoot<'tcx> {\n     pub exported_symbols: Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]>,\n     pub interpret_alloc_index: Lazy<[u32]>,\n \n-    pub entries_index: Lazy<[index::Index<'tcx>]>,\n+    pub entries_table: Lazy<[Table<'tcx>]>,\n \n     /// The DefIndex's of any proc macros delcared by\n     /// this crate"}, {"sha": "c53d69907044fae6b225ca7ed1d21e2e4616a2c1", "filename": "src/librustc_metadata/table.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49274032bc2819c6f9acaaf4e85e5200fc8bbba/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "patch": "@@ -76,14 +76,14 @@ impl FixedSizeEncoding for u32 {\n /// `0`. Whenever an index is visited, we fill in the\n /// appropriate spot by calling `record_position`. We should never\n /// visit the same index twice.\n-crate struct Index<'tcx> {\n+crate struct Table<'tcx> {\n     positions: Vec<u8>,\n     _marker: PhantomData<&'tcx ()>,\n }\n \n-impl Index<'tcx> {\n+impl Table<'tcx> {\n     crate fn new(max_index: usize) -> Self {\n-        Index {\n+        Table {\n             positions: vec![0; max_index * 4],\n             _marker: PhantomData,\n         }\n@@ -108,7 +108,7 @@ impl Index<'tcx> {\n         position.write_to_bytes_at(positions, array_index)\n     }\n \n-    crate fn write_index(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n+    crate fn encode(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.positions);\n         Lazy::from_position_and_meta(\n@@ -118,18 +118,18 @@ impl Index<'tcx> {\n     }\n }\n \n-impl Lazy<[Index<'tcx>]> {\n+impl Lazy<[Table<'tcx>]> {\n     /// Given the metadata, extract out the offset of a particular\n     /// DefIndex (if any).\n     #[inline(never)]\n     crate fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n-        debug!(\"Index::lookup: index={:?} len={:?}\",\n+        debug!(\"Table::lookup: index={:?} len={:?}\",\n                def_index,\n                self.meta);\n \n         let bytes = &bytes[self.position.get()..][..self.meta * 4];\n         let position = u32::read_from_bytes_at(bytes, def_index.index());\n-        debug!(\"Index::lookup: position={:?}\", position);\n+        debug!(\"Table::lookup: position={:?}\", position);\n         NonZeroUsize::new(position as usize).map(Lazy::from_position)\n     }\n }", "previous_filename": "src/librustc_metadata/index.rs"}]}