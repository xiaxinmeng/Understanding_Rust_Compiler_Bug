{"sha": "ca450e345f57f277c1cb0406b8366280c8d41f48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDUwZTM0NWY1N2YyNzdjMWNiMDQwNmI4MzY2MjgwYzhkNDFmNDg=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-25T01:19:16Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:57Z"}, "message": "Move trans_enum_variant to trans::adt.\n\nAs a result, trans_enum_variant no longer cares what kind of enum it's\ndealing with, so the \"degen\" parameter goes away in a bunch of places.", "tree": {"sha": "bce52aa3b99f5a5b093a18539ddfe1cb855b0ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce52aa3b99f5a5b093a18539ddfe1cb855b0ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca450e345f57f277c1cb0406b8366280c8d41f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca450e345f57f277c1cb0406b8366280c8d41f48", "html_url": "https://github.com/rust-lang/rust/commit/ca450e345f57f277c1cb0406b8366280c8d41f48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca450e345f57f277c1cb0406b8366280c8d41f48/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb6baba2cbcd885b53709bdd907e7053867a71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb6baba2cbcd885b53709bdd907e7053867a71e", "html_url": "https://github.com/rust-lang/rust/commit/6bb6baba2cbcd885b53709bdd907e7053867a71e"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "26d2e02cb9631d25bfe08b5dc6195dd492ab1a6d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ca450e345f57f277c1cb0406b8366280c8d41f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca450e345f57f277c1cb0406b8366280c8d41f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ca450e345f57f277c1cb0406b8366280c8d41f48", "patch": "@@ -39,6 +39,7 @@ use middle::astencode;\n use middle::borrowck::RootInfo;\n use middle::resolve;\n use middle::trans::_match;\n+use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::callee;\n@@ -1861,7 +1862,6 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n                           variant: ast::variant,\n                           args: &[ast::variant_arg],\n                           disr: int,\n-                          is_degen: bool,\n                           param_substs: Option<@param_substs>,\n                           llfndecl: ValueRef) {\n     let _icx = ccx.insn_ctxt(\"trans_enum_variant\");\n@@ -1890,21 +1890,15 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n     let arg_tys = ty::ty_fn_args(node_id_type(bcx, variant.node.id));\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);\n \n-    // Cast the enum to a type we can GEP into.\n-    let llblobptr = if is_degen {\n-        fcx.llretptr\n-    } else {\n-        let llenumptr =\n-            PointerCast(bcx, fcx.llretptr, T_opaque_enum_ptr(ccx));\n-        let lldiscrimptr = GEPi(bcx, llenumptr, [0u, 0u]);\n-        Store(bcx, C_int(ccx, disr), lldiscrimptr);\n-        GEPi(bcx, llenumptr, [0u, 1u])\n-    };\n-    let t_id = local_def(enum_id);\n-    let v_id = local_def(variant.node.id);\n+    // XXX is there a better way to reconstruct the ty::t?\n+    let enum_ty = ty::subst_tps(ccx.tcx, ty_param_substs, None,\n+                                ty::node_id_to_type(ccx.tcx, enum_id));\n+    let repr = adt::represent_type(ccx, enum_ty);\n+\n+    adt::trans_set_discr(bcx, &repr, fcx.llretptr, disr);\n     for vec::eachi(args) |i, va| {\n-        let lldestptr = GEP_enum(bcx, llblobptr, t_id, v_id,\n-                                 /*bad*/copy ty_param_substs, i);\n+        let lldestptr = adt::trans_GEP(bcx, &repr, fcx.llretptr, disr, i);\n+\n         // If this argument to this function is a enum, it'll have come in to\n         // this function as an opaque blob due to the way that type_of()\n         // works. So we have to cast to the destination's view of the type.\n@@ -2014,7 +2008,7 @@ pub fn trans_struct_dtor(ccx: @CrateContext,\n }\n \n pub fn trans_enum_def(ccx: @CrateContext, enum_definition: ast::enum_def,\n-                      id: ast::node_id, degen: bool,\n+                      id: ast::node_id,\n                       path: @ast_map::path, vi: @~[ty::VariantInfo],\n                       i: &mut uint) {\n     for vec::each(enum_definition.variants) |variant| {\n@@ -2025,7 +2019,7 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: ast::enum_def,\n             ast::tuple_variant_kind(ref args) if args.len() > 0 => {\n                 let llfn = get_item_val(ccx, variant.node.id);\n                 trans_enum_variant(ccx, id, *variant, /*bad*/copy *args,\n-                                   disr_val, degen, None, llfn);\n+                                   disr_val, None, llfn);\n             }\n             ast::tuple_variant_kind(_) => {\n                 // Nothing to do.\n@@ -2038,7 +2032,6 @@ pub fn trans_enum_def(ccx: @CrateContext, enum_definition: ast::enum_def,\n                 trans_enum_def(ccx,\n                                *enum_definition,\n                                id,\n-                               degen,\n                                path,\n                                vi,\n                                &mut *i);\n@@ -2089,11 +2082,10 @@ pub fn trans_item(ccx: @CrateContext, item: ast::item) {\n       }\n       ast::item_enum(ref enum_definition, ref generics) => {\n         if !generics.is_type_parameterized() {\n-            let degen = (*enum_definition).variants.len() == 1u;\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n             trans_enum_def(ccx, (*enum_definition), item.id,\n-                           degen, path, vi, &mut i);\n+                           path, vi, &mut i);\n         }\n       }\n       ast::item_const(_, expr) => consts::trans_const(ccx, expr, item.id),"}, {"sha": "ffc5d132c9fd8d9e024914b7c2753fbfccf74576", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca450e345f57f277c1cb0406b8366280c8d41f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca450e345f57f277c1cb0406b8366280c8d41f48/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=ca450e345f57f277c1cb0406b8366280c8d41f48", "patch": "@@ -196,8 +196,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         match (*v).node.kind {\n             ast::tuple_variant_kind(ref args) => {\n                 trans_enum_variant(ccx, enum_item.id, *v, /*bad*/copy *args,\n-                                   this_tv.disr_val, tvs.len() == 1u,\n-                                   psubsts, d);\n+                                   this_tv.disr_val, psubsts, d);\n             }\n             ast::struct_variant_kind(_) =>\n                 ccx.tcx.sess.bug(~\"can't monomorphize struct variants\"),"}]}