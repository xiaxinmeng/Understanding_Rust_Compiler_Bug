{"sha": "f56a2651055e61a4bf60ac23948d7d4026d26004", "node_id": "C_kwDOAAsO6NoAKGY1NmEyNjUxMDU1ZTYxYTRiZjYwYWMyMzk0OGQ3ZDQwMjZkMjYwMDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T20:04:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T20:04:33Z"}, "message": "Rollup merge of #110089 - petrosagg:mpsc-ub, r=m-ou-se\n\nsync::mpsc: synchronize receiver disconnect with initialization\n\nReceiver disconnection relies on the incorrect assumption that `head.index != tail.index` implies that the channel is initialized (i.e `head.block` and `tail.block` point to allocated blocks). However, it can happen that `head.index != tail.index` and `head.block == null` at the same time which leads to a segfault when a channel is dropped in that state.\n\nThis can happen because initialization is performed in two steps. First, the tail block is allocated and the `tail.block` is set. If that is successful `head.block` is set to the same pointer. Importantly, initialization is skipped if `tail.block` is not null.\n\nTherefore we can have the following situation:\n\n1. Thread A starts to send the first value of the channel, observes that `tail.block` is null and begins initialization. It sets `tail.block` to point to a newly allocated block and then gets preempted. `head.block` is still null at this point.\n2. Thread B starts to send the second value of the channel, observes that `tail.block` *is not* null and proceeds with writing its value in the allocated tail block and sets `tail.index` to 1.\n3. Thread B drops the receiver of the channel which observes that `head.index != tail.index` (0 and 1 respectively), therefore there must be messages to drop. It starts traversing the linked list from `head.block` which is still a null pointer, leading to a segfault.\n\nThis PR fixes this problem by waiting for initialization to complete when `head.index != tail.index` and the `head.block` is still null. A similar check exists in `start_recv` for similar reasons.\n\nFixes #110001", "tree": {"sha": "9367fd60128ef49d6326e066f80b0b505c7dff03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9367fd60128ef49d6326e066f80b0b505c7dff03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f56a2651055e61a4bf60ac23948d7d4026d26004", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNw7RCRBK7hj4Ov3rIwAAM14IAEHt8pLeio3K72Fr9aeP6mlr\nUhh+wyQwvBVbU5coeJtIr0UkLLmodar1MlsM7zvMSfaTuFWOhCjWwas0GsmineX6\nR0gOWq4M1bE0DLgXyxU85tWOuaP9DLB3aNBznD8OZ2AXgAUADIWfK7dsvTF7xwqX\n/qSnbbFf+v5FM6C6hiM3AEDlyN34M3T1e9j0QpwelRsuKdzf2FJHAY5t5DwPGDqB\nbRhQ/3Vq96mjxoCOCBa5bmYDWEgsSs8V2c2cMquNDNYKGntYRdundS0WG2FUjdUo\nsyZUh5G6OQpdwp7/UENyhN3zg9VcpciKnac7Zj8ImgZYaCHm26YIR7Yvmaa2OaQ=\n=3dy9\n-----END PGP SIGNATURE-----\n", "payload": "tree 9367fd60128ef49d6326e066f80b0b505c7dff03\nparent d40c827e9a48e8e612ac5d0887243915700fc7d0\nparent f0d487dce529d46ffe7925e9f8f0435781e49422\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681329873 +0200\ncommitter GitHub <noreply@github.com> 1681329873 +0200\n\nRollup merge of #110089 - petrosagg:mpsc-ub, r=m-ou-se\n\nsync::mpsc: synchronize receiver disconnect with initialization\n\nReceiver disconnection relies on the incorrect assumption that `head.index != tail.index` implies that the channel is initialized (i.e `head.block` and `tail.block` point to allocated blocks). However, it can happen that `head.index != tail.index` and `head.block == null` at the same time which leads to a segfault when a channel is dropped in that state.\n\nThis can happen because initialization is performed in two steps. First, the tail block is allocated and the `tail.block` is set. If that is successful `head.block` is set to the same pointer. Importantly, initialization is skipped if `tail.block` is not null.\n\nTherefore we can have the following situation:\n\n1. Thread A starts to send the first value of the channel, observes that `tail.block` is null and begins initialization. It sets `tail.block` to point to a newly allocated block and then gets preempted. `head.block` is still null at this point.\n2. Thread B starts to send the second value of the channel, observes that `tail.block` *is not* null and proceeds with writing its value in the allocated tail block and sets `tail.index` to 1.\n3. Thread B drops the receiver of the channel which observes that `head.index != tail.index` (0 and 1 respectively), therefore there must be messages to drop. It starts traversing the linked list from `head.block` which is still a null pointer, leading to a segfault.\n\nThis PR fixes this problem by waiting for initialization to complete when `head.index != tail.index` and the `head.block` is still null. A similar check exists in `start_recv` for similar reasons.\n\nFixes #110001\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f56a2651055e61a4bf60ac23948d7d4026d26004", "html_url": "https://github.com/rust-lang/rust/commit/f56a2651055e61a4bf60ac23948d7d4026d26004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f56a2651055e61a4bf60ac23948d7d4026d26004/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40c827e9a48e8e612ac5d0887243915700fc7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40c827e9a48e8e612ac5d0887243915700fc7d0", "html_url": "https://github.com/rust-lang/rust/commit/d40c827e9a48e8e612ac5d0887243915700fc7d0"}, {"sha": "f0d487dce529d46ffe7925e9f8f0435781e49422", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d487dce529d46ffe7925e9f8f0435781e49422", "html_url": "https://github.com/rust-lang/rust/commit/f0d487dce529d46ffe7925e9f8f0435781e49422"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "406a331a309614c35cde21ec6384bb0c0d1fda38", "filename": "library/std/src/sync/mpmc/list.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f56a2651055e61a4bf60ac23948d7d4026d26004/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56a2651055e61a4bf60ac23948d7d4026d26004/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs?ref=f56a2651055e61a4bf60ac23948d7d4026d26004", "patch": "@@ -549,6 +549,18 @@ impl<T> Channel<T> {\n         let mut head = self.head.index.load(Ordering::Acquire);\n         let mut block = self.head.block.load(Ordering::Acquire);\n \n+        // If we're going to be dropping messages we need to synchronize with initialization\n+        if head >> SHIFT != tail >> SHIFT {\n+            // The block can be null here only if a sender is in the process of initializing the\n+            // channel while another sender managed to send a message by inserting it into the\n+            // semi-initialized channel and advanced the tail.\n+            // In that case, just wait until it gets initialized.\n+            while block.is_null() {\n+                backoff.spin_heavy();\n+                block = self.head.block.load(Ordering::Acquire);\n+            }\n+        }\n+\n         unsafe {\n             // Drop all messages between head and tail and deallocate the heap-allocated blocks.\n             while head >> SHIFT != tail >> SHIFT {"}]}