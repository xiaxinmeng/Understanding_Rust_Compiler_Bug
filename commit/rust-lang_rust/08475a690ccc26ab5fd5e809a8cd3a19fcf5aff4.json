{"sha": "08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDc1YTY5MGNjYzI2YWI1ZmQ1ZTgwOWE4Y2QzYTE5ZmNmNWFmZjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T23:26:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T23:26:22Z"}, "message": "Simplify string optimizations", "tree": {"sha": "81a7395c814dc97ada0e1065896c73e3b1bb2cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a7395c814dc97ada0e1065896c73e3b1bb2cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "html_url": "https://github.com/rust-lang/rust/commit/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7974c6b1a0b2d07c5a337c89a70a51e01f629778", "url": "https://api.github.com/repos/rust-lang/rust/commits/7974c6b1a0b2d07c5a337c89a70a51e01f629778", "html_url": "https://github.com/rust-lang/rust/commit/7974c6b1a0b2d07c5a337c89a70a51e01f629778"}], "stats": {"total": 201, "additions": 46, "deletions": 155}, "files": [{"sha": "abf69dce742524aad6835e9d8a74172e574e27b5", "filename": "src/smol_str.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsmol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsmol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsmol_str.rs?ref=08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "patch": "@@ -1,6 +1,7 @@\n use std::{sync::Arc};\n \n const INLINE_CAP: usize = 22;\n+const WS_TAG: u8 = (INLINE_CAP + 1) as u8;\n \n #[derive(Clone, Debug)]\n pub(crate) enum SmolStr {\n@@ -17,18 +18,34 @@ impl SmolStr {\n         if len <= INLINE_CAP {\n             let mut buf = [0; INLINE_CAP];\n             buf[..len].copy_from_slice(text.as_bytes());\n-            SmolStr::Inline { len: len as u8, buf }\n-        } else {\n-            SmolStr::Heap(\n-                text.to_string().into_boxed_str().into()\n-            )\n+            return SmolStr::Inline { len: len as u8, buf };\n         }\n+\n+        let newlines = text.bytes().take_while(|&b| b == b'\\n').count();\n+        let spaces = text[newlines..].bytes().take_while(|&b| b == b' ').count();\n+        if newlines + spaces == len && newlines <= N_NEWLINES && spaces <= N_SPACES {\n+            let mut buf = [0; INLINE_CAP];\n+            buf[0] = newlines as u8;\n+            buf[1] = spaces as u8;\n+            return SmolStr::Inline { len: WS_TAG, buf };\n+        }\n+\n+        SmolStr::Heap(\n+            text.to_string().into_boxed_str().into()\n+        )\n     }\n \n     pub fn as_str(&self) -> &str {\n         match self {\n             SmolStr::Heap(data) => &*data,\n             SmolStr::Inline { len, buf } => {\n+                if *len == WS_TAG {\n+                    let newlines = buf[0] as usize;\n+                    let spaces = buf[1] as usize;\n+                    assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n+                    return &WS[N_NEWLINES - newlines..N_NEWLINES + spaces]\n+                }\n+\n                 let len = *len as usize;\n                 let buf = &buf[..len];\n                 unsafe { ::std::str::from_utf8_unchecked(buf) }\n@@ -37,6 +54,12 @@ impl SmolStr {\n     }\n }\n \n+const N_NEWLINES: usize = 32;\n+const N_SPACES: usize = 128;\n+const WS: &str =\n+    \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n                                                                                                                                \";\n+\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "84f90c5935f4bd1cb30ece44be962a3a35403227", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "patch": "@@ -504,93 +504,5 @@ impl SyntaxKind {\n         };\n         Some(tok)\n     }\n-\n-    pub(crate) fn static_text(self) -> Option<&'static str> {\n-        let tok = match self {\n-            SEMI => \";\",\n-            COMMA => \",\",\n-            L_PAREN => \"(\",\n-            R_PAREN => \")\",\n-            L_CURLY => \"{\",\n-            R_CURLY => \"}\",\n-            L_BRACK => \"[\",\n-            R_BRACK => \"]\",\n-            L_ANGLE => \"<\",\n-            R_ANGLE => \">\",\n-            AT => \"@\",\n-            POUND => \"#\",\n-            TILDE => \"~\",\n-            QUESTION => \"?\",\n-            DOLLAR => \"$\",\n-            AMP => \"&\",\n-            PIPE => \"|\",\n-            PLUS => \"+\",\n-            STAR => \"*\",\n-            SLASH => \"/\",\n-            CARET => \"^\",\n-            PERCENT => \"%\",\n-            DOT => \".\",\n-            DOTDOT => \"..\",\n-            DOTDOTDOT => \"...\",\n-            DOTDOTEQ => \"..=\",\n-            COLON => \":\",\n-            COLONCOLON => \"::\",\n-            EQ => \"=\",\n-            EQEQ => \"==\",\n-            FAT_ARROW => \"=>\",\n-            EXCL => \"!\",\n-            NEQ => \"!=\",\n-            MINUS => \"-\",\n-            THIN_ARROW => \"->\",\n-            LTEQ => \"<=\",\n-            GTEQ => \">=\",\n-            PLUSEQ => \"+=\",\n-            MINUSEQ => \"-=\",\n-            AMPAMP => \"&&\",\n-            PIPEPIPE => \"||\",\n-            SHL => \"<<\",\n-            SHR => \">>\",\n-            SHLEQ => \"<<=\",\n-            SHREQ => \">>=\",\n-\n-            USE_KW => \"use\",\n-            FN_KW => \"fn\",\n-            STRUCT_KW => \"struct\",\n-            ENUM_KW => \"enum\",\n-            TRAIT_KW => \"trait\",\n-            IMPL_KW => \"impl\",\n-            TRUE_KW => \"true\",\n-            FALSE_KW => \"false\",\n-            AS_KW => \"as\",\n-            EXTERN_KW => \"extern\",\n-            CRATE_KW => \"crate\",\n-            MOD_KW => \"mod\",\n-            PUB_KW => \"pub\",\n-            SELF_KW => \"self\",\n-            SUPER_KW => \"super\",\n-            IN_KW => \"in\",\n-            WHERE_KW => \"where\",\n-            FOR_KW => \"for\",\n-            LOOP_KW => \"loop\",\n-            WHILE_KW => \"while\",\n-            IF_KW => \"if\",\n-            ELSE_KW => \"else\",\n-            MATCH_KW => \"match\",\n-            CONST_KW => \"const\",\n-            STATIC_KW => \"static\",\n-            MUT_KW => \"mut\",\n-            UNSAFE_KW => \"unsafe\",\n-            TYPE_KW => \"type\",\n-            REF_KW => \"ref\",\n-            LET_KW => \"let\",\n-            MOVE_KW => \"move\",\n-            RETURN_KW => \"return\",\n-            AUTO_KW => \"auto\",\n-            DEFAULT_KW => \"default\",\n-            UNION_KW => \"union\",\n-            _ => return None,\n-        };\n-        Some(tok)\n-    }\n }\n "}, {"sha": "90618721adf01ad821be2e09d44ca61ecaa9d056", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "patch": "@@ -64,19 +64,6 @@ impl SyntaxKind {\n         let tok = match c {\n {%- for t in single_byte_tokens %}\n             '{{t.0}}' => {{t.1}},\n-{%- endfor %}\n-            _ => return None,\n-        };\n-        Some(tok)\n-    }\n-\n-    pub(crate) fn static_text(self) -> Option<&'static str> {\n-        let tok = match self {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-            {{t.1}} => \"{{t.0}}\",\n-{%- endfor %}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-            {{kw | upper}}_KW => \"{{kw}}\",\n {%- endfor %}\n             _ => return None,\n         };"}, {"sha": "2d19c252bdef39b3cb60ab277104dca5e0bbac38", "filename": "src/yellow/green.rs", "status": "modified", "additions": 18, "deletions": 49, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "patch": "@@ -1,8 +1,7 @@\n use std::sync::Arc;\n use {\n+    SyntaxKind, TextUnit,\n     smol_str::SmolStr,\n-    SyntaxKind::{self, *},\n-    TextUnit,\n };\n \n #[derive(Clone, Debug)]\n@@ -91,67 +90,37 @@ impl GreenBranch {\n }\n \n #[derive(Clone, Debug)]\n-pub(crate) enum GreenLeaf {\n-    Whitespace {\n-        newlines: u8,\n-        spaces: u8,\n-    },\n-    Token {\n-        kind: SyntaxKind,\n-        text: Option<SmolStr>,\n-    },\n+pub(crate) struct GreenLeaf {\n+    kind: SyntaxKind,\n+    text: SmolStr,\n }\n \n impl GreenLeaf {\n     fn new(kind: SyntaxKind, text: &str) -> Self {\n-        if kind == WHITESPACE {\n-            let newlines = text.bytes().take_while(|&b| b == b'\\n').count();\n-            let spaces = text[newlines..].bytes().take_while(|&b| b == b' ').count();\n-            if newlines + spaces == text.len() && newlines <= N_NEWLINES && spaces <= N_SPACES {\n-                return GreenLeaf::Whitespace {\n-                    newlines: newlines as u8,\n-                    spaces: spaces as u8,\n-                };\n-            }\n-        }\n-        let text = match SyntaxKind::static_text(kind) {\n-            Some(t) => {\n-                debug_assert_eq!(t, text);\n-                None\n-            }\n-            None => Some(SmolStr::new(text)),\n-        };\n-        GreenLeaf::Token { kind, text }\n+        let text = SmolStr::new(text);\n+        GreenLeaf { kind, text }\n     }\n \n     pub(crate) fn kind(&self) -> SyntaxKind {\n-        match self {\n-            GreenLeaf::Whitespace { .. } => WHITESPACE,\n-            GreenLeaf::Token { kind, .. } => *kind,\n-        }\n+        self.kind\n     }\n \n     pub(crate) fn text(&self) -> &str {\n-        match self {\n-            &GreenLeaf::Whitespace { newlines, spaces } => {\n-                let newlines = newlines as usize;\n-                let spaces = spaces as usize;\n-                assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n-                &WS[N_NEWLINES - newlines..N_NEWLINES + spaces]\n-            }\n-            GreenLeaf::Token { kind, text } => match text {\n-                None => kind.static_text().unwrap(),\n-                Some(t) => t.as_str(),\n-            },\n-        }\n+        self.text.as_str()\n     }\n \n     pub(crate) fn text_len(&self) -> TextUnit {\n         TextUnit::of_str(self.text())\n     }\n }\n \n-const N_NEWLINES: usize = 16;\n-const N_SPACES: usize = 64;\n-const WS: &str =\n-    \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n                                                                \";\n+\n+#[test]\n+fn test_sizes() {\n+    use std::mem::size_of;\n+\n+    println!(\"GreenNode = {}\", size_of::<GreenNode>());\n+    println!(\"GreenLeaf = {}\", size_of::<GreenLeaf>());\n+    println!(\"SyntaxKind = {}\", size_of::<SyntaxKind>());\n+    println!(\"SmolStr = {}\", size_of::<SmolStr>());\n+}"}]}