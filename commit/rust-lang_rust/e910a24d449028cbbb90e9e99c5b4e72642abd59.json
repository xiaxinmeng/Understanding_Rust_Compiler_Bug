{"sha": "e910a24d449028cbbb90e9e99c5b4e72642abd59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTBhMjRkNDQ5MDI4Y2JiYjkwZTllOTljNWI0ZTcyNjQyYWJkNTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-08T17:22:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-08T17:22:15Z"}, "message": "Merge pull request #1093 from bjorn3/use_new_module_interface\n\nUse the new cranelift-module interface", "tree": {"sha": "67e1c6ca4240e14c84d29c53269a81ca1ef5fa34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e1c6ca4240e14c84d29c53269a81ca1ef5fa34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e910a24d449028cbbb90e9e99c5b4e72642abd59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJff0rHCRBK7hj4Ov3rIwAAdHIIAD7oJhf+bwHKPhEsemE+FyyC\n1vz9R3ZZxfiaLFj3L0mRjA2VVBWLrmM6QCNghwMpqLf3IS4Tc7WqFAi8enE6Ulmx\nSbuys0rBYvaomVbX0G4vsioMb8WlKpngwP5SUHCrOWapiMX2eSBXZ/FwjcPvmbVI\nvfozHKFL5G62j3r4u5OPP0hzTWBVLGmIoqNLg6Wte/I/p6M8WaqOWOY3bciQSZpy\nJoSVQ8yXURwdaVFNWigmuSxUB/L/+Pvh2ECrN7kUBAWTXM5aNowVOYlOCk3tBvlx\nzimm/c181uLmXHbC+nnSGKrITM4dlEwcJrf1dE5NcLVJnyteJ5skZub3MkWXOKA=\n=yGy2\n-----END PGP SIGNATURE-----\n", "payload": "tree 67e1c6ca4240e14c84d29c53269a81ca1ef5fa34\nparent 1cd63dc9b22fa748b9e3b14f0666874e595a4924\nparent 0a5968dfd215a61445c30e0e586a387b938faa67\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1602177735 +0200\ncommitter GitHub <noreply@github.com> 1602177735 +0200\n\nMerge pull request #1093 from bjorn3/use_new_module_interface\n\nUse the new cranelift-module interface"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e910a24d449028cbbb90e9e99c5b4e72642abd59", "html_url": "https://github.com/rust-lang/rust/commit/e910a24d449028cbbb90e9e99c5b4e72642abd59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e910a24d449028cbbb90e9e99c5b4e72642abd59/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd63dc9b22fa748b9e3b14f0666874e595a4924", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd63dc9b22fa748b9e3b14f0666874e595a4924", "html_url": "https://github.com/rust-lang/rust/commit/1cd63dc9b22fa748b9e3b14f0666874e595a4924"}, {"sha": "0a5968dfd215a61445c30e0e586a387b938faa67", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5968dfd215a61445c30e0e586a387b938faa67", "html_url": "https://github.com/rust-lang/rust/commit/0a5968dfd215a61445c30e0e586a387b938faa67"}], "stats": {"total": 473, "additions": 220, "deletions": 253}, "files": [{"sha": "e15ceaf95ebcd201d6195f3af1361fcc346a0cba", "filename": "Cargo.lock", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -43,16 +43,16 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -69,27 +69,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -99,8 +99,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -111,8 +111,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -121,26 +121,29 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n  \"cranelift-module\",\n+ \"log\",\n  \"object\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-simplejit\"\n-version = \"0.66.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#1fabb051b0436a38f794ca395601dcdcc31d3c18\"\n+version = \"0.67.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#88d975d396defb47da85665054a98a16708ef6df\"\n dependencies = [\n  \"cranelift-codegen\",\n+ \"cranelift-entity\",\n  \"cranelift-module\",\n  \"cranelift-native\",\n  \"errno\",\n  \"libc\",\n+ \"log\",\n  \"region\",\n  \"target-lexicon\",\n  \"winapi\",\n@@ -184,9 +187,9 @@ checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n \n [[package]]\n name = \"gimli\"\n-version = \"0.21.0\"\n+version = \"0.22.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bcc8e0c9bce37868955864dbecd2b1ab2bdf967e6f28066d65aaac620444b65c\"\n+checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n dependencies = [\n  \"indexmap\",\n ]\n@@ -284,9 +287,9 @@ dependencies = [\n \n [[package]]\n name = \"regalloc\"\n-version = \"0.0.30\"\n+version = \"0.0.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2041c2d34f6ff346d6f428974f03d8bf12679b0c816bb640dc5eb1d48848d8d1\"\n+checksum = \"571f7f397d61c4755285cd37853fe8e03271c243424a907415909379659381c5\"\n dependencies = [\n  \"log\",\n  \"rustc-hash\","}, {"sha": "1c8e350d24297cb3519865ea8343d3179956832a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -15,7 +15,7 @@ cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\", bran\n cranelift-simplejit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", optional = true }\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n target-lexicon = \"0.11.0\"\n-gimli = { version = \"0.21.0\", default-features = false, features = [\"write\"]}\n+gimli = { version = \"0.22.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.21.1\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }"}, {"sha": "7bb00c8d46a4c6c296d04c05f68ca81d5f2e15bb", "filename": "src/abi/comments.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -10,14 +10,14 @@ use cranelift_codegen::entity::EntityRef;\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n-pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     fx.add_global_comment(format!(\n         \"kind  loc.idx   param    pass mode                            ty\"\n     ));\n }\n \n pub(super) fn add_arg_comment<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     kind: &str,\n     local: Option<mir::Local>,\n     local_field: Option<usize>,\n@@ -54,15 +54,15 @@ pub(super) fn add_arg_comment<'tcx>(\n     ));\n }\n \n-pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     fx.add_global_comment(String::new());\n     fx.add_global_comment(format!(\n         \"kind  local ty                              size align (abi,pref)\"\n     ));\n }\n \n pub(super) fn add_local_place_comments<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     place: CPlace<'tcx>,\n     local: Local,\n ) {"}, {"sha": "801691228431770e98453154e9d80a110a793653", "filename": "src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -238,7 +238,7 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n /// Instance must be monomorphized\n pub(crate) fn import_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    module: &mut Module<impl Backend>,\n+    module: &mut impl Module,\n     inst: Instance<'tcx>,\n ) -> FuncId {\n     let (name, sig) = get_function_name_and_sig(tcx, module.isa().triple(), inst, true);\n@@ -247,7 +247,7 @@ pub(crate) fn import_function<'tcx>(\n         .unwrap()\n }\n \n-impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n     /// Instance must be monomorphized\n     pub(crate) fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n         let func_id = import_function(self.tcx, &mut self.cx.module, inst);\n@@ -329,7 +329,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n \n /// Make a [`CPlace`] capable of holding value of the specified type.\n fn make_local_place<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     local: Local,\n     layout: TyAndLayout<'tcx>,\n     is_ssa: bool,\n@@ -351,7 +351,7 @@ fn make_local_place<'tcx>(\n }\n \n pub(crate) fn codegen_fn_prelude<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     start_block: Block,\n ) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n@@ -488,7 +488,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n }\n \n pub(crate) fn codegen_terminator_call<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     span: Span,\n     current_block: Block,\n     func: &Operand<'tcx>,\n@@ -701,7 +701,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n }\n \n pub(crate) fn codegen_drop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     span: Span,\n     drop_place: CPlace<'tcx>,\n ) {"}, {"sha": "8e3682c86c5fb678cb87f089835c23b3c13342d4", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -122,7 +122,7 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n \n /// Get a set of values to be passed as function arguments.\n pub(super) fn adjust_arg_for_abi<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     arg: CValue<'tcx>,\n ) -> EmptySinglePair<Value> {\n     match get_pass_mode(fx.tcx, arg.layout()) {\n@@ -142,7 +142,7 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n /// Create a [`CValue`] containing the value of a function parameter adding clif function parameters\n /// as necessary.\n pub(super) fn cvalue_for_param<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     start_block: Block,\n     #[cfg_attr(not(debug_assertions), allow(unused_variables))] local: Option<mir::Local>,\n     #[cfg_attr(not(debug_assertions), allow(unused_variables))] local_field: Option<usize>,"}, {"sha": "f6d40c880d094f8b644e7b4cb8c57975825298a5", "filename": "src/abi/returning.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -3,7 +3,7 @@\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n-fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyAndLayout<'tcx> {\n+fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Module>) -> TyAndLayout<'tcx> {\n     fx.layout_of(fx.monomorphize(&fx.mir.local_decls[RETURN_PLACE].ty))\n }\n \n@@ -22,7 +22,7 @@ pub(crate) fn can_return_to_ssa_var<'tcx>(\n /// Return a place where the return value of the current function can be written to. If necessary\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_block: Block,\n ) -> CPlace<'tcx> {\n@@ -66,11 +66,11 @@ pub(super) fn codegen_return_param<'tcx>(\n \n /// Invokes the closure with if necessary a value representing the return pointer. When the closure\n /// returns the call return value(s) if any are written to the correct place.\n-pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n-    fx: &mut FunctionCx<'_, 'tcx, B>,\n+pub(super) fn codegen_with_call_return_arg<'tcx, M: Module, T>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n     fn_sig: FnSig<'tcx>,\n     ret_place: Option<CPlace<'tcx>>,\n-    f: impl FnOnce(&mut FunctionCx<'_, 'tcx, B>, Option<Value>) -> (Inst, T),\n+    f: impl FnOnce(&mut FunctionCx<'_, 'tcx, M>, Option<Value>) -> (Inst, T),\n ) -> (Inst, T) {\n     let ret_layout = fx.layout_of(fn_sig.output());\n \n@@ -110,7 +110,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n }\n \n /// Codegen a return instruction with the right return value(s) if any.\n-pub(crate) fn codegen_return(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn codegen_return(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     match get_pass_mode(fx.tcx, return_layout(fx)) {\n         PassMode::NoPass | PassMode::ByRef { size: Some(_) } => {\n             fx.bcx.ins().return_(&[]);"}, {"sha": "0735ad6f83299a1a6eb2721455351475d3b03820", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n     tcx: TyCtxt<'_>,\n-    module: &mut Module<impl Backend + 'static>,\n+    module: &mut impl Module,\n     unwind_context: &mut UnwindContext<'_>,\n ) -> bool {\n     let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n@@ -27,7 +27,7 @@ pub(crate) fn codegen(\n }\n \n fn codegen_inner(\n-    module: &mut Module<impl Backend + 'static>,\n+    module: &mut impl Module,\n     unwind_context: &mut UnwindContext<'_>,\n     kind: AllocatorKind,\n ) {"}, {"sha": "fd25b19a583aa3fae04c74b21a0e1b80cd222920", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -11,7 +11,7 @@ pub(crate) enum SsaKind {\n     Ssa,\n }\n \n-pub(crate) fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> IndexVec<Local, SsaKind> {\n+pub(crate) fn analyze(fx: &FunctionCx<'_, '_, impl Module>) -> IndexVec<Local, SsaKind> {\n     let mut flag_map = fx\n         .mir\n         .local_decls"}, {"sha": "11b5946b6aa402a4a120dea06405f1627b0f270e", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -11,7 +11,7 @@ pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t =\n     libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock(\n-    module: &mut Module<impl Backend>,\n+    module: &mut impl Module,\n     bcx: &mut FunctionBuilder<'_>,\n     use_jit: bool,\n ) {\n@@ -24,13 +24,13 @@ pub(crate) fn init_global_lock(\n \n     let mut data_ctx = DataContext::new();\n     data_ctx.define_zeroinit(1024); // 1024 bytes should be big enough on all platforms.\n+    data_ctx.set_align(16);\n     let atomic_mutex = module\n         .declare_data(\n             \"__cg_clif_global_atomic_mutex\",\n             Linkage::Export,\n             true,\n             false,\n-            Some(16),\n         )\n         .unwrap();\n     module.define_data(atomic_mutex, &data_ctx).unwrap();\n@@ -67,7 +67,7 @@ pub(crate) fn init_global_lock(\n }\n \n pub(crate) fn init_global_lock_constructor(\n-    module: &mut Module<impl Backend>,\n+    module: &mut impl Module,\n     constructor_name: &str,\n ) -> FuncId {\n     let sig = Signature::new(CallConv::SystemV);\n@@ -101,7 +101,7 @@ pub(crate) fn init_global_lock_constructor(\n     init_func_id\n }\n \n-pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     let atomic_mutex = fx\n         .cx\n         .module\n@@ -110,7 +110,6 @@ pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n             Linkage::Import,\n             true,\n             false,\n-            None,\n         )\n         .unwrap();\n \n@@ -144,7 +143,7 @@ pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     fx.bcx.ins().call(pthread_mutex_lock, &[atomic_mutex]);\n }\n \n-pub(crate) fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     let atomic_mutex = fx\n         .cx\n         .module\n@@ -153,7 +152,6 @@ pub(crate) fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n             Linkage::Import,\n             true,\n             false,\n-            None,\n         )\n         .unwrap();\n "}, {"sha": "c0df85f681c92738f2213fb504a80f1c7a678415", "filename": "src/backend.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -5,12 +5,12 @@ use std::convert::{TryFrom, TryInto};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::Session;\n \n-use cranelift_module::{FuncId, Module};\n+use cranelift_module::FuncId;\n \n use object::write::*;\n use object::{RelocationEncoding, RelocationKind, SectionKind, SymbolFlags};\n \n-use cranelift_object::{ObjectBackend, ObjectBuilder, ObjectProduct};\n+use cranelift_object::{ObjectBuilder, ObjectModule, ObjectProduct};\n \n use gimli::SectionId;\n \n@@ -71,16 +71,18 @@ impl WriteDebugInfo for ObjectProduct {\n \n         let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n         // FIXME use SHT_X86_64_UNWIND for .eh_frame\n-        let section_id = self.object.add_section(segment, name.clone(), if id == SectionId::EhFrame {\n-            SectionKind::ReadOnlyData\n-        } else {\n-            SectionKind::Debug\n-        });\n-        self.object.section_mut(section_id).set_data(data, if id == SectionId::EhFrame {\n-            8\n-        } else {\n-            1\n-        });\n+        let section_id = self.object.add_section(\n+            segment,\n+            name.clone(),\n+            if id == SectionId::EhFrame {\n+                SectionKind::ReadOnlyData\n+            } else {\n+                SectionKind::Debug\n+            },\n+        );\n+        self.object\n+            .section_mut(section_id)\n+            .set_data(data, if id == SectionId::EhFrame { 8 } else { 1 });\n         let symbol_id = self.object.section_symbol(section_id);\n         (section_id, symbol_id)\n     }\n@@ -153,16 +155,6 @@ impl AddConstructor for ObjectProduct {\n     }\n }\n \n-pub(crate) trait Emit {\n-    fn emit(self) -> Vec<u8>;\n-}\n-\n-impl Emit for ObjectProduct {\n-    fn emit(self) -> Vec<u8> {\n-        self.object.write().unwrap()\n-    }\n-}\n-\n pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n     let triple = crate::build_isa(sess, true).triple().clone();\n \n@@ -193,10 +185,7 @@ pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object\n     metadata_object.write().unwrap()\n }\n \n-pub(crate) type Backend =\n-    impl cranelift_module::Backend<Product: AddConstructor + Emit + WriteDebugInfo>;\n-\n-pub(crate) fn make_module(sess: &Session, name: String) -> Module<Backend> {\n+pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n     let mut builder = ObjectBuilder::new(\n         crate::build_isa(sess, true),\n         name + \".o\",\n@@ -206,8 +195,6 @@ pub(crate) fn make_module(sess: &Session, name: String) -> Module<Backend> {\n     if std::env::var(\"CG_CLIF_FUNCTION_SECTIONS\").is_ok() {\n         builder.per_function_section(true);\n     }\n-    let module: Module<ObjectBackend> = Module::new(\n-        builder,\n-    );\n+    let module = ObjectModule::new(builder);\n     module\n }"}, {"sha": "9f558bc7520c27e72fa2bbbf72fc35b1fcfee616", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -5,8 +5,8 @@ use rustc_middle::ty::adjustment::PointerCast;\n \n use crate::prelude::*;\n \n-pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'tcx, B>,\n+pub(crate) fn trans_fn<'tcx>(\n+    cx: &mut crate::CodegenCx<'tcx, impl Module>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n ) {\n@@ -183,7 +183,7 @@ pub(crate) fn verify_func(\n     });\n }\n \n-fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     crate::constant::check_constants(fx);\n \n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n@@ -417,7 +417,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n }\n \n fn trans_stmt<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     #[allow(unused_variables)] cur_block: Block,\n     stmt: &Statement<'tcx>,\n ) {\n@@ -543,7 +543,7 @@ fn trans_stmt<'tcx>(\n                     let to_ty = fx.monomorphize(to_ty);\n \n                     fn is_fat_ptr<'tcx>(\n-                        fx: &FunctionCx<'_, 'tcx, impl Backend>,\n+                        fx: &FunctionCx<'_, 'tcx, impl Module>,\n                         ty: Ty<'tcx>,\n                     ) -> bool {\n                         ty.builtin_deref(true)\n@@ -873,7 +873,7 @@ fn trans_stmt<'tcx>(\n }\n \n fn codegen_array_len<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     place: CPlace<'tcx>,\n ) -> Value {\n     match *place.layout().ty.kind() {\n@@ -893,7 +893,7 @@ fn codegen_array_len<'tcx>(\n }\n \n pub(crate) fn trans_place<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     place: Place<'tcx>,\n ) -> CPlace<'tcx> {\n     let mut cplace = fx.get_local_place(place.local);\n@@ -965,7 +965,7 @@ pub(crate) fn trans_place<'tcx>(\n }\n \n pub(crate) fn trans_operand<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     operand: &Operand<'tcx>,\n ) -> CValue<'tcx> {\n     match operand {\n@@ -978,7 +978,7 @@ pub(crate) fn trans_operand<'tcx>(\n }\n \n pub(crate) fn codegen_panic<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     msg_str: &str,\n     span: Span,\n ) {\n@@ -995,7 +995,7 @@ pub(crate) fn codegen_panic<'tcx>(\n }\n \n pub(crate) fn codegen_panic_inner<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     lang_item: rustc_hir::LangItem,\n     args: &[Value],\n     span: Span,"}, {"sha": "122a36b5bf741d25c38e0116889307f350b5f856", "filename": "src/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -3,7 +3,7 @@\n use crate::prelude::*;\n \n pub(crate) fn clif_intcast(\n-    fx: &mut FunctionCx<'_, '_, impl Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     val: Value,\n     to: Type,\n     signed: bool,\n@@ -51,7 +51,7 @@ pub(crate) fn clif_intcast(\n }\n \n pub(crate) fn clif_int_or_float_cast(\n-    fx: &mut FunctionCx<'_, '_, impl Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     from: Value,\n     from_signed: bool,\n     to_ty: Type,"}, {"sha": "e998403dea6bbea475d96f2e17f8baf2540c1936", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -3,7 +3,7 @@\n use crate::prelude::*;\n \n pub(crate) fn maybe_codegen<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     checked: bool,\n     lhs: CValue<'tcx>,"}, {"sha": "0f22f900ca7ae789055b35fa5846e8046ccb53ed", "filename": "src/common.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -131,7 +131,7 @@ pub(crate) fn has_ptr_meta<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n pub(crate) fn codegen_icmp_imm(\n-    fx: &mut FunctionCx<'_, '_, impl Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     intcc: IntCC,\n     lhs: Value,\n     rhs: i128,\n@@ -287,8 +287,8 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n     }\n }\n \n-pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n-    pub(crate) cx: &'clif mut crate::CodegenCx<'tcx, B>,\n+pub(crate) struct FunctionCx<'clif, 'tcx, M: Module> {\n+    pub(crate) cx: &'clif mut crate::CodegenCx<'tcx, M>,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) pointer_type: Type, // Cached from module\n \n@@ -314,7 +314,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> LayoutOf for FunctionCx<'_, 'tcx, M> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n \n@@ -332,31 +332,31 @@ impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> layout::HasTyCtxt<'tcx> for FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> layout::HasTyCtxt<'tcx> for FunctionCx<'_, 'tcx, M> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> rustc_target::abi::HasDataLayout for FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> rustc_target::abi::HasDataLayout for FunctionCx<'_, 'tcx, M> {\n     fn data_layout(&self) -> &rustc_target::abi::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> layout::HasParamEnv<'tcx> for FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> layout::HasParamEnv<'tcx> for FunctionCx<'_, 'tcx, M> {\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         ParamEnv::reveal_all()\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> HasTargetSpec for FunctionCx<'_, 'tcx, M> {\n     fn target_spec(&self) -> &Target {\n         &self.tcx.sess.target.target\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n+impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n     pub(crate) fn monomorphize<T>(&self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx> + Copy,\n@@ -430,7 +430,6 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n                 Linkage::Local,\n                 false,\n                 false,\n-                None,\n             )\n             .unwrap();\n "}, {"sha": "d6d38a4b3ad00fe4e91bddfe636a8e84bc33105d", "filename": "src/constant.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n };\n use rustc_middle::ty::{Const, ConstKind};\n-use rustc_target::abi::Align;\n \n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n@@ -29,15 +28,15 @@ enum TodoItem {\n }\n \n impl ConstantCx {\n-    pub(crate) fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut Module<impl Backend>) {\n+    pub(crate) fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut impl Module) {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n         //println!(\"done {:?}\", self.done);\n         self.done.clear();\n     }\n }\n \n-pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n+pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     for constant in &fx.mir.required_consts {\n         let const_ = fx.monomorphize(&constant.literal);\n         match const_.val {\n@@ -77,7 +76,7 @@ pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n }\n \n pub(crate) fn codegen_tls_ref<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n@@ -90,7 +89,7 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n }\n \n fn codegen_static_ref<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CPlace<'tcx> {\n@@ -108,7 +107,7 @@ fn codegen_static_ref<'tcx>(\n }\n \n pub(crate) fn trans_constant<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n     let const_ = fx.monomorphize(&constant.literal);\n@@ -156,7 +155,7 @@ pub(crate) fn trans_constant<'tcx>(\n }\n \n pub(crate) fn trans_const_value<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     const_val: ConstValue<'tcx>,\n     ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n@@ -199,7 +198,6 @@ pub(crate) fn trans_const_value<'tcx>(\n                             let data_id = data_id_for_alloc_id(\n                                 &mut fx.cx.module,\n                                 ptr.alloc_id,\n-                                alloc.align,\n                                 alloc.mutability,\n                             );\n                             let local_data_id =\n@@ -254,12 +252,12 @@ pub(crate) fn trans_const_value<'tcx>(\n }\n \n fn pointer_for_allocation<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n     fx.cx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(&mut fx.cx.module, alloc_id, alloc.align, alloc.mutability);\n+    let data_id = data_id_for_alloc_id(&mut fx.cx.module, alloc_id, alloc.mutability);\n \n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n@@ -268,10 +266,9 @@ fn pointer_for_allocation<'tcx>(\n     crate::pointer::Pointer::new(global_ptr)\n }\n \n-fn data_id_for_alloc_id<B: Backend>(\n-    module: &mut Module<B>,\n+fn data_id_for_alloc_id(\n+    module: &mut impl Module,\n     alloc_id: AllocId,\n-    align: Align,\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n     module\n@@ -280,14 +277,13 @@ fn data_id_for_alloc_id<B: Backend>(\n             Linkage::Local,\n             mutability == rustc_hir::Mutability::Mut,\n             false,\n-            Some(align.bytes() as u8),\n         )\n         .unwrap()\n }\n \n fn data_id_for_static(\n     tcx: TyCtxt<'_>,\n-    module: &mut Module<impl Backend>,\n+    module: &mut impl Module,\n     def_id: DefId,\n     definition: bool,\n ) -> DataId {\n@@ -327,7 +323,6 @@ fn data_id_for_static(\n             linkage,\n             is_mutable,\n             attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n-            Some(align.try_into().unwrap()),\n         )\n         .unwrap();\n \n@@ -342,15 +337,10 @@ fn data_id_for_static(\n \n         let ref_name = format!(\"_rust_extern_with_linkage_{}\", symbol_name);\n         let ref_data_id = module\n-            .declare_data(\n-                &ref_name,\n-                Linkage::Local,\n-                true,\n-                false,\n-                Some(align.try_into().unwrap()),\n-            )\n+            .declare_data(&ref_name, Linkage::Local, true, false)\n             .unwrap();\n         let mut data_ctx = DataContext::new();\n+        data_ctx.set_align(align);\n         let data = module.declare_data_in_data(data_id, &mut data_ctx);\n         data_ctx.define(\n             std::iter::repeat(0)\n@@ -370,7 +360,7 @@ fn data_id_for_static(\n     }\n }\n \n-fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mut ConstantCx) {\n+fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut impl Module, cx: &mut ConstantCx) {\n     while let Some(todo_item) = cx.todo.pop() {\n         let (data_id, alloc, section_name) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n@@ -379,7 +369,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align, alloc.mutability);\n+                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.mutability);\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -403,6 +393,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n         }\n \n         let mut data_ctx = DataContext::new();\n+        data_ctx.set_align(alloc.align.bytes());\n \n         if let Some(section_name) = section_name {\n             // FIXME set correct segment for Mach-O files\n@@ -436,7 +427,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n                     cx.todo.push(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc, target_alloc.align, target_alloc.mutability)\n+                    data_id_for_alloc_id(module, reloc, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx\n@@ -469,7 +460,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n }\n \n pub(crate) fn mir_operand_get_const_val<'tcx>(\n-    fx: &FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &FunctionCx<'_, 'tcx, impl Module>,\n     operand: &Operand<'tcx>,\n ) -> Option<&'tcx Const<'tcx>> {\n     match operand {"}, {"sha": "3ad52c2e873de972ec0553eee0c6bd1bc24a1cc0", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -76,15 +76,15 @@ impl WriterRelocate {\n     #[cfg(feature = \"jit\")]\n     pub(super) fn relocate_for_jit(\n         mut self,\n-        jit_module: &mut cranelift_module::Module<cranelift_simplejit::SimpleJITBackend>,\n+        jit_product: &cranelift_simplejit::SimpleJITProduct,\n     ) -> Vec<u8> {\n         use std::convert::TryInto;\n \n         for reloc in self.relocs.drain(..) {\n             match reloc.name {\n                 super::DebugRelocName::Section(_) => unreachable!(),\n                 super::DebugRelocName::Symbol(sym) => {\n-                    let addr = jit_module.get_finalized_function(\n+                    let addr = jit_product.lookup_func(\n                         cranelift_module::FuncId::from_u32(sym.try_into().unwrap()),\n                     );\n                     let val = (addr as u64 as i64 + reloc.addend) as u64;"}, {"sha": "f33aa6683a7268c4376fe9d7d28f9c887bdceac5", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -336,6 +336,8 @@ impl<'tcx> DebugContext<'tcx> {\n                 | ArgumentPurpose::CalleeSaved => continue,\n                 ArgumentPurpose::VMContext\n                 | ArgumentPurpose::SignatureId\n+                | ArgumentPurpose::CallerTLS\n+                | ArgumentPurpose::CalleeTLS\n                 | ArgumentPurpose::StackLimit => unreachable!(),\n             };\n             let name = format!(\"{}{}\", base_name, i);"}, {"sha": "f08dfb60769498507cea70724376e3246b38965d", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> UnwindContext<'tcx> {\n     #[cfg(feature = \"jit\")]\n     pub(crate) unsafe fn register_jit(\n         self,\n-        jit_module: &mut Module<cranelift_simplejit::SimpleJITBackend>,\n+        jit_product: &cranelift_simplejit::SimpleJITProduct,\n     ) -> Option<UnwindRegistry> {\n         let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(\n             self.tcx,\n@@ -89,7 +89,7 @@ impl<'tcx> UnwindContext<'tcx> {\n             return None;\n         }\n \n-        let mut eh_frame = eh_frame.0.relocate_for_jit(jit_module);\n+        let mut eh_frame = eh_frame.0.relocate_for_jit(jit_product);\n \n         // GCC expects a terminating \"empty\" length, so write a 0 length at the end of the table.\n         eh_frame.extend(&[0, 0, 0, 0]);"}, {"sha": "d15bc36ad05ef211a09b71c73da79c7164daaee7", "filename": "src/discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -7,7 +7,7 @@ use rustc_target::abi::{Int, TagEncoding, Variants};\n use crate::prelude::*;\n \n pub(crate) fn codegen_set_discriminant<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     place: CPlace<'tcx>,\n     variant_index: VariantIdx,\n ) {\n@@ -57,7 +57,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n }\n \n pub(crate) fn codegen_get_discriminant<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     value: CValue<'tcx>,\n     dest_layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {"}, {"sha": "2b3d1b7885d18407521976ce5941d22caa6d74f1", "filename": "src/driver/aot.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -12,11 +12,13 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{DebugInfo, OutputType};\n \n+use cranelift_object::{ObjectModule, ObjectProduct};\n+\n use crate::prelude::*;\n \n-use crate::backend::{AddConstructor, Emit, WriteDebugInfo};\n+use crate::backend::AddConstructor;\n \n-fn new_module(tcx: TyCtxt<'_>, name: String) -> Module<crate::backend::Backend> {\n+fn new_module(tcx: TyCtxt<'_>, name: String) -> ObjectModule {\n     let module = crate::backend::make_module(tcx.sess, name);\n     assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n     module\n@@ -30,19 +32,15 @@ impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n     }\n }\n \n-fn emit_module<B: Backend>(\n+fn emit_module(\n     tcx: TyCtxt<'_>,\n     name: String,\n     kind: ModuleKind,\n-    mut module: Module<B>,\n+    module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n     unwind_context: UnwindContext<'_>,\n-    map_product: impl FnOnce(B::Product) -> B::Product,\n-) -> ModuleCodegenResult\n-where\n-    B::Product: AddConstructor + Emit + WriteDebugInfo,\n-{\n-    module.finalize_definitions();\n+    map_product: impl FnOnce(ObjectProduct) -> ObjectProduct,\n+) -> ModuleCodegenResult {\n     let mut product = module.finish();\n \n     if let Some(mut debug) = debug {\n@@ -56,7 +54,7 @@ where\n     let tmp_file = tcx\n         .output_filenames(LOCAL_CRATE)\n         .temp_path(OutputType::Object, Some(&name));\n-    let obj = product.emit();\n+    let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess\n             .fatal(&format!(\"error writing object file: {}\", err));"}, {"sha": "611a70eae2bb02702e5ee469272f96285f0e0aaa", "filename": "src/driver/jit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -9,7 +9,7 @@ use rustc_codegen_ssa::CrateInfo;\n use crate::prelude::*;\n \n pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n-    use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n+    use cranelift_simplejit::{SimpleJITModule, SimpleJITBuilder};\n \n     #[cfg(unix)]\n     unsafe {\n@@ -36,7 +36,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         cranelift_module::default_libcall_names(),\n     );\n     jit_builder.symbols(imported_symbols);\n-    let mut jit_module: Module<SimpleJITBackend> = Module::new(jit_builder);\n+    let mut jit_module = SimpleJITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n     let sig = Signature {\n@@ -79,13 +79,13 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n-    jit_module.finalize_definitions();\n+    let jit_product = jit_module.finish();\n \n-    let _unwind_register_guard = unsafe { unwind_context.register_jit(&mut jit_module) };\n+    let _unwind_register_guard = unsafe { unwind_context.register_jit(&jit_product) };\n \n     tcx.sess.abort_if_errors();\n \n-    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+    let finalized_main: *const u8 = jit_product.lookup_func(main_func_id);\n \n     println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n \n@@ -105,7 +105,6 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let ret = f(args.len() as c_int, argv.as_ptr());\n \n-    jit_module.finish();\n     std::process::exit(ret);\n }\n "}, {"sha": "c32c4792519701ee1dfd23caa31f5445e1b5ffd3", "filename": "src/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn codegen_crate(\n }\n \n fn codegen_mono_items<'tcx>(\n-    cx: &mut crate::CodegenCx<'tcx, impl Backend + 'static>,\n+    cx: &mut crate::CodegenCx<'tcx, impl Module>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n@@ -68,8 +68,8 @@ fn codegen_mono_items<'tcx>(\n     }\n }\n \n-fn trans_mono_item<'tcx, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'tcx, B>,\n+fn trans_mono_item<'tcx, M: Module>(\n+    cx: &mut crate::CodegenCx<'tcx, M>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {"}, {"sha": "aa2edb2dfd4f7231ddfe99a0370742a64a3654c1", "filename": "src/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::InlineAsmOperand;\n use rustc_target::asm::*;\n \n pub(crate) fn codegen_inline_asm<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     _span: Span,\n     template: &[InlineAsmTemplatePiece],\n     operands: &[InlineAsmOperand<'tcx>],\n@@ -203,7 +203,7 @@ fn generate_asm_wrapper(\n }\n \n fn call_inline_asm<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     asm_name: &str,\n     slot_size: Size,\n     inputs: Vec<(InlineAsmReg, Size, Value)>,"}, {"sha": "c1a1cdbe4eb7daac6f6c538cbf2aace8762f68bd", "filename": "src/intrinsics/cpuid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fcpuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fcpuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fcpuid.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -6,7 +6,7 @@ use crate::prelude::*;\n ///\n /// This emulates an intel cpu with sse and sse2 support, but which doesn't support anything else.\n pub(crate) fn codegen_cpuid_call<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     leaf: Value,\n     _subleaf: Value,\n ) -> (Value, Value, Value, Value) {"}, {"sha": "18d86f0c5f959f31805fac9712d9ab5b627b1ff3", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -6,7 +6,7 @@ use crate::prelude::*;\n use rustc_middle::ty::subst::SubstsRef;\n \n pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     intrinsic: &str,\n     substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],"}, {"sha": "9a3e4c7b56e9c24629ad2388cecb313450d8a3ac", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -204,12 +204,12 @@ pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx\n     }\n }\n \n-fn simd_for_each_lane<'tcx, B: Backend>(\n-    fx: &mut FunctionCx<'_, 'tcx, B>,\n+fn simd_for_each_lane<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n     val: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n     f: impl Fn(\n-        &mut FunctionCx<'_, 'tcx, B>,\n+        &mut FunctionCx<'_, 'tcx, M>,\n         TyAndLayout<'tcx>,\n         TyAndLayout<'tcx>,\n         Value,\n@@ -231,13 +231,13 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n     }\n }\n \n-fn simd_pair_for_each_lane<'tcx, B: Backend>(\n-    fx: &mut FunctionCx<'_, 'tcx, B>,\n+fn simd_pair_for_each_lane<'tcx, M: Module>(\n+    fx: &mut FunctionCx<'_, 'tcx, M>,\n     x: CValue<'tcx>,\n     y: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n     f: impl Fn(\n-        &mut FunctionCx<'_, 'tcx, B>,\n+        &mut FunctionCx<'_, 'tcx, M>,\n         TyAndLayout<'tcx>,\n         TyAndLayout<'tcx>,\n         Value,\n@@ -263,7 +263,7 @@ fn simd_pair_for_each_lane<'tcx, B: Backend>(\n }\n \n fn bool_to_zero_or_max_uint<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,\n     val: Value,\n ) -> CValue<'tcx> {\n@@ -395,7 +395,7 @@ macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n }\n \n pub(crate) fn codegen_intrinsic_call<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,"}, {"sha": "e9d3cc8d256929d4bbd20fc6bcacb001b847f32a", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -4,7 +4,7 @@ use super::*;\n use crate::prelude::*;\n \n pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,"}, {"sha": "c10eeb7bf88492c444009737389d862e2e9bd90e", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -108,9 +108,7 @@ mod prelude {\n     pub(crate) use cranelift_codegen::isa::{self, CallConv};\n     pub(crate) use cranelift_codegen::Context;\n     pub(crate) use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n-    pub(crate) use cranelift_module::{\n-        self, Backend, DataContext, DataId, FuncId, Linkage, Module,\n-    };\n+    pub(crate) use cranelift_module::{self, DataContext, DataId, FuncId, Linkage, Module};\n \n     pub(crate) use crate::abi::*;\n     pub(crate) use crate::base::{trans_operand, trans_place};\n@@ -131,9 +129,9 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n     }\n }\n \n-struct CodegenCx<'tcx, B: Backend + 'static> {\n+struct CodegenCx<'tcx, M: Module> {\n     tcx: TyCtxt<'tcx>,\n-    module: Module<B>,\n+    module: M,\n     global_asm: String,\n     constants_cx: ConstantCx,\n     cached_context: Context,\n@@ -142,8 +140,8 @@ struct CodegenCx<'tcx, B: Backend + 'static> {\n     unwind_context: UnwindContext<'tcx>,\n }\n \n-impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n-    fn new(tcx: TyCtxt<'tcx>, module: Module<B>, debug_info: bool) -> Self {\n+impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n+    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool) -> Self {\n         let unwind_context = UnwindContext::new(tcx, module.isa());\n         let debug_context = if debug_info {\n             Some(DebugContext::new(tcx, module.isa()))\n@@ -162,14 +160,7 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n         }\n     }\n \n-    fn finalize(\n-        mut self,\n-    ) -> (\n-        Module<B>,\n-        String,\n-        Option<DebugContext<'tcx>>,\n-        UnwindContext<'tcx>,\n-    ) {\n+    fn finalize(mut self) -> (M, String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n         self.constants_cx.finalize(self.tcx, &mut self.module);\n         (\n             self.module,\n@@ -352,8 +343,6 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n     Box::new(CraneliftCodegenBackend {\n-        config: BackendConfig {\n-            use_jit: false,\n-        }\n+        config: BackendConfig { use_jit: false },\n     })\n }"}, {"sha": "db34d89fe2be717c5ce9ef1a2965ee10753aa5c9", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -7,7 +7,7 @@ use crate::prelude::*;\n /// users main function.\n pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n-    module: &mut Module<impl Backend + 'static>,\n+    module: &mut impl Module,\n     unwind_context: &mut UnwindContext<'_>,\n     use_jit: bool,\n ) {\n@@ -38,7 +38,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n-        m: &mut Module<impl Backend + 'static>,\n+        m: &mut impl Module,\n         unwind_context: &mut UnwindContext<'_>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,"}, {"sha": "b37826d71f4e04091152c2298c36bfb1d94bc494", "filename": "src/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn bin_op_to_intcc(bin_op: BinOp, signed: bool) -> Option<IntCC> {\n }\n \n fn codegen_compare_bin_op<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     signed: bool,\n     lhs: Value,\n@@ -54,7 +54,7 @@ fn codegen_compare_bin_op<'tcx>(\n }\n \n pub(crate) fn codegen_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -103,7 +103,7 @@ pub(crate) fn codegen_binop<'tcx>(\n }\n \n pub(crate) fn trans_bool_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -124,7 +124,7 @@ pub(crate) fn trans_bool_binop<'tcx>(\n }\n \n pub(crate) fn trans_int_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -197,7 +197,7 @@ pub(crate) fn trans_int_binop<'tcx>(\n }\n \n pub(crate) fn trans_checked_int_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -358,7 +358,7 @@ pub(crate) fn trans_checked_int_binop<'tcx>(\n }\n \n pub(crate) fn trans_float_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -403,7 +403,7 @@ pub(crate) fn trans_float_binop<'tcx>(\n }\n \n pub(crate) fn trans_ptr_binop<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,"}, {"sha": "b2036d7bcd452e5918f4432348368c7271e83898", "filename": "src/pointer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -37,7 +37,7 @@ impl Pointer {\n     }\n \n     pub(crate) fn const_addr<'a, 'tcx>(\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         addr: i64,\n     ) -> Self {\n         let addr = fx.bcx.ins().iconst(fx.pointer_type, addr);\n@@ -59,7 +59,7 @@ impl Pointer {\n         (self.base, self.offset)\n     }\n \n-    pub(crate) fn get_addr<'a, 'tcx>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n+    pub(crate) fn get_addr<'a, 'tcx>(self, fx: &mut FunctionCx<'a, 'tcx, impl Module>) -> Value {\n         match self.base {\n             PointerBase::Addr(base_addr) => {\n                 let offset: i64 = self.offset.into();\n@@ -83,15 +83,15 @@ impl Pointer {\n \n     pub(crate) fn offset<'a, 'tcx>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         extra_offset: Offset32,\n     ) -> Self {\n         self.offset_i64(fx, extra_offset.into())\n     }\n \n     pub(crate) fn offset_i64<'a, 'tcx>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         extra_offset: i64,\n     ) -> Self {\n         if let Some(new_offset) = self.offset.try_add_i64(extra_offset) {\n@@ -128,7 +128,7 @@ impl Pointer {\n \n     pub(crate) fn offset_value<'a, 'tcx>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         extra_offset: Value,\n     ) -> Self {\n         match self.base {\n@@ -161,7 +161,7 @@ impl Pointer {\n \n     pub(crate) fn load<'a, 'tcx>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         ty: Type,\n         flags: MemFlags,\n     ) -> Value {\n@@ -182,7 +182,7 @@ impl Pointer {\n \n     pub(crate) fn store<'a, 'tcx>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'a, 'tcx, impl Module>,\n         value: Value,\n         flags: MemFlags,\n     ) {"}, {"sha": "e99bec45a5efed5e7ddb88b7b63d78d4ae62d43d", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -186,7 +186,7 @@ impl FuncWriter for &'_ CommentWriter {\n }\n \n #[cfg(debug_assertions)]\n-impl<B: Backend + 'static> FunctionCx<'_, '_, B> {\n+impl<M: Module> FunctionCx<'_, '_, M> {\n     pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.add_global_comment(comment);\n     }\n@@ -264,7 +264,7 @@ pub(crate) fn write_clif_file<'tcx>(\n     }\n }\n \n-impl<B: Backend + 'static> fmt::Debug for FunctionCx<'_, '_, B> {\n+impl<M: Module> fmt::Debug for FunctionCx<'_, '_, M> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         writeln!(f, \"{:?}\", self.instance.substs)?;\n         writeln!(f, \"{:?}\", self.local_map)?;"}, {"sha": "007b64656053c25344523ea0718cf6118b4f6814", "filename": "src/trap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -2,7 +2,7 @@\n \n use crate::prelude::*;\n \n-fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: &str) {\n+fn codegen_print(fx: &mut FunctionCx<'_, '_, impl Module>, msg: &str) {\n     let puts = fx\n         .cx\n         .module\n@@ -30,7 +30,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n \n /// Trap code: user1\n pub(crate) fn trap_abort(\n-    fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     msg: impl AsRef<str>,\n ) {\n     codegen_print(fx, msg.as_ref());\n@@ -42,7 +42,7 @@ pub(crate) fn trap_abort(\n ///\n /// Trap code: user65535\n pub(crate) fn trap_unreachable(\n-    fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     msg: impl AsRef<str>,\n ) {\n     codegen_print(fx, msg.as_ref());\n@@ -53,7 +53,7 @@ pub(crate) fn trap_unreachable(\n ///\n /// Trap code: user65535\n pub(crate) fn trap_unreachable_ret_value<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     dest_layout: TyAndLayout<'tcx>,\n     msg: impl AsRef<str>,\n ) -> CValue<'tcx> {\n@@ -69,7 +69,7 @@ pub(crate) fn trap_unreachable_ret_value<'tcx>(\n ///\n /// Trap code: user65535\n pub(crate) fn trap_unimplemented(\n-    fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>,\n+    fx: &mut FunctionCx<'_, '_, impl Module>,\n     msg: impl AsRef<str>,\n ) {\n     codegen_print(fx, msg.as_ref());\n@@ -81,7 +81,7 @@ pub(crate) fn trap_unimplemented(\n ///\n /// Trap code: user65535\n pub(crate) fn trap_unimplemented_ret_value<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     dest_layout: TyAndLayout<'tcx>,\n     msg: impl AsRef<str>,\n ) -> CValue<'tcx> {"}, {"sha": "c77ff5d56ba626859e85d806f1c184ee3e41d712", "filename": "src/unsize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -13,7 +13,7 @@ use crate::prelude::*;\n /// in an upcast, where the new vtable for an object will be derived\n /// from the old one.\n pub(crate) fn unsized_info<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     source: Ty<'tcx>,\n     target: Ty<'tcx>,\n     old_info: Option<Value>,\n@@ -45,7 +45,7 @@ pub(crate) fn unsized_info<'tcx>(\n \n /// Coerce `src` to `dst_ty`. `src_ty` must be a thin pointer.\n fn unsize_thin_ptr<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     src: Value,\n     src_layout: TyAndLayout<'tcx>,\n     dst_layout: TyAndLayout<'tcx>,\n@@ -89,7 +89,7 @@ fn unsize_thin_ptr<'tcx>(\n /// Coerce `src`, which is a reference to a value of type `src_ty`,\n /// to a value of type `dst_ty` and store the result in `dst`\n pub(crate) fn coerce_unsized_into<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     src: CValue<'tcx>,\n     dst: CPlace<'tcx>,\n ) {\n@@ -142,7 +142,7 @@ pub(crate) fn coerce_unsized_into<'tcx>(\n // Adapted from https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/librustc_codegen_ssa/glue.rs\n \n pub(crate) fn size_and_align_of_dst<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,\n     info: Value,\n ) -> (Value, Value) {"}, {"sha": "5d513cb3ea022b8d2d74ab88da7c6b3ed8009f3d", "filename": "src/value_and_place.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -6,7 +6,7 @@ use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::immediates::Offset32;\n \n fn codegen_field<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     base: Pointer,\n     extra: Option<Value>,\n     layout: TyAndLayout<'tcx>,\n@@ -108,7 +108,7 @@ impl<'tcx> CValue<'tcx> {\n     // FIXME remove\n     pub(crate) fn force_stack(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     ) -> (Pointer, Option<Value>) {\n         let layout = self.1;\n         match self.0 {\n@@ -129,7 +129,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value with layout.abi of scalar\n-    pub(crate) fn load_scalar(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n+    pub(crate) fn load_scalar(self, fx: &mut FunctionCx<'_, 'tcx, impl Module>) -> Value {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n@@ -155,7 +155,7 @@ impl<'tcx> CValue<'tcx> {\n     /// Load a value pair with layout.abi of scalar pair\n     pub(crate) fn load_scalar_pair(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     ) -> (Value, Value) {\n         let layout = self.1;\n         match self.0 {\n@@ -183,7 +183,7 @@ impl<'tcx> CValue<'tcx> {\n \n     pub(crate) fn value_field(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         field: mir::Field,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n@@ -221,15 +221,15 @@ impl<'tcx> CValue<'tcx> {\n \n     pub(crate) fn unsize_value(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         dest: CPlace<'tcx>,\n     ) {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n \n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         layout: TyAndLayout<'tcx>,\n         const_val: u128,\n     ) -> CValue<'tcx> {\n@@ -325,7 +325,7 @@ impl<'tcx> CPlace<'tcx> {\n     }\n \n     pub(crate) fn new_stack_slot(\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n         assert!(!layout.is_unsized());\n@@ -345,7 +345,7 @@ impl<'tcx> CPlace<'tcx> {\n     }\n \n     pub(crate) fn new_var(\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         local: Local,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n@@ -359,7 +359,7 @@ impl<'tcx> CPlace<'tcx> {\n     }\n \n     pub(crate) fn new_var_pair(\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         local: Local,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n@@ -395,7 +395,7 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n+    pub(crate) fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Module>) -> CValue<'tcx> {\n         let layout = self.layout();\n         match self.inner {\n             CPlaceInner::Var(_local, var) => {\n@@ -448,11 +448,11 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn write_cvalue(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         from: CValue<'tcx>,\n     ) {\n         fn assert_assignable<'tcx>(\n-            fx: &FunctionCx<'_, 'tcx, impl Backend>,\n+            fx: &FunctionCx<'_, 'tcx, impl Module>,\n             from_ty: Ty<'tcx>,\n             to_ty: Ty<'tcx>,\n         ) {\n@@ -514,20 +514,20 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn write_cvalue_transmute(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         from: CValue<'tcx>,\n     ) {\n         self.write_cvalue_maybe_transmute(fx, from, \"write_cvalue_transmute\");\n     }\n \n     fn write_cvalue_maybe_transmute(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         from: CValue<'tcx>,\n         #[cfg_attr(not(debug_assertions), allow(unused_variables))] method: &'static str,\n     ) {\n         fn transmute_value<'tcx>(\n-            fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+            fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n             var: Variable,\n             data: Value,\n             dst_ty: Type,\n@@ -667,7 +667,7 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn place_field(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n@@ -715,7 +715,7 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn place_index(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         index: Value,\n     ) -> CPlace<'tcx> {\n         let (elem_layout, ptr) = match self.layout().ty.kind() {\n@@ -732,7 +732,7 @@ impl<'tcx> CPlace<'tcx> {\n         CPlace::for_ptr(ptr.offset_value(fx, offset), elem_layout)\n     }\n \n-    pub(crate) fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CPlace<'tcx> {\n+    pub(crate) fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Module>) -> CPlace<'tcx> {\n         let inner_layout = fx.layout_of(self.layout().ty.builtin_deref(true).unwrap().ty);\n         if has_ptr_meta(fx.tcx, inner_layout.ty) {\n             let (addr, extra) = self.to_cvalue(fx).load_scalar_pair(fx);\n@@ -747,7 +747,7 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn place_ref(\n         self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         layout: TyAndLayout<'tcx>,\n     ) -> CValue<'tcx> {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n@@ -764,7 +764,7 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub(crate) fn downcast_variant(\n         self,\n-        fx: &FunctionCx<'_, 'tcx, impl Backend>,\n+        fx: &FunctionCx<'_, 'tcx, impl Module>,\n         variant: VariantIdx,\n     ) -> Self {\n         assert!(!self.layout().is_unsized());"}, {"sha": "bb3cf8b3f3a3ad555ad33b7ceb6527d48a09148a", "filename": "src/vtable.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e910a24d449028cbbb90e9e99c5b4e72642abd59/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=e910a24d449028cbbb90e9e99c5b4e72642abd59", "patch": "@@ -15,7 +15,7 @@ fn vtable_memflags() -> MemFlags {\n     flags\n }\n \n-pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Module>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -25,7 +25,7 @@ pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable:\n     )\n }\n \n-pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Module>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -35,7 +35,7 @@ pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Val\n     )\n }\n \n-pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n+pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Module>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n@@ -46,7 +46,7 @@ pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable\n }\n \n pub(crate) fn get_ptr_and_method_ref<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     arg: CValue<'tcx>,\n     idx: usize,\n ) -> (Value, Value) {\n@@ -68,7 +68,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n }\n \n pub(crate) fn get_vtable<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n@@ -85,7 +85,7 @@ pub(crate) fn get_vtable<'tcx>(\n }\n \n fn build_vtable<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> DataId {\n@@ -137,6 +137,16 @@ fn build_vtable<'tcx>(\n         }\n     }\n \n+    data_ctx.set_align(\n+        fx.tcx\n+            .data_layout\n+            .pointer_align\n+            .pref\n+            .bytes()\n+            .try_into()\n+            .unwrap(),\n+    );\n+\n     let data_id = fx\n         .cx\n         .module\n@@ -153,15 +163,6 @@ fn build_vtable<'tcx>(\n             Linkage::Local,\n             false,\n             false,\n-            Some(\n-                fx.tcx\n-                    .data_layout\n-                    .pointer_align\n-                    .pref\n-                    .bytes()\n-                    .try_into()\n-                    .unwrap(),\n-            ),\n         )\n         .unwrap();\n "}]}