{"sha": "190f37afab27a890291a11d9dda2658e676c47bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MGYzN2FmYWIyN2E4OTAyOTFhMTFkOWRkYTI2NThlNjc2YzQ3YmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-15T00:45:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T00:45:55Z"}, "message": "Merge #9600\n\n9600: fix: Single-line and nested blocks in the `unwrap_block` assist r=Veykril a=patrick-gu\n\nFixes #8411\r\n\r\nRework the system for stripping whitespace and braces in the unwrap_block assist to allow correct unwrapping of blocks such as:\r\n```rust\r\n{ $0 0 }\r\n```\r\ninto\r\n```rust\r\n0\r\n```\r\n\r\nand nested blocks, such as:\r\n```rust\r\n$0{\r\n    {\r\n        3\r\n    }\r\n}\r\n```\r\ninto\r\n```rust\r\n{\r\n    3\r\n}\r\n```\r\n\r\nThis is done by creating the `update_expr_string_with_pat` function (along with `update_expr_string` and `update_expr_string_without_newline`), which strips whitespace and braces in a way that ensures that only whitespace and a maximum of one brace are removed from the start and end of the expression string.\r\n\r\nI have also created several tests to ensure that this functionality works correctly.\n\nCo-authored-by: patrick-gu <55641350+patrick-gu@users.noreply.github.com>", "tree": {"sha": "7fbb93cd09ee97192121a1f27060b5172507d144", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fbb93cd09ee97192121a1f27060b5172507d144"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190f37afab27a890291a11d9dda2658e676c47bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg74VDCRBK7hj4Ov3rIwAAqa8IABSAsyWp1KHrxAJln1jGkq5m\nrWNmSJAVBFgVrJy8B9TKbmu/0nW/JoPvxpQMGnmZy4HiyoQqTBaz91ttZ6UDc5Td\n9hc2dhpdP5LR2w8u8+qJu8cRlGOBCvPC8jgn8Bfw01DBgpIA7AZJblPayWJ/c3xl\nfoQAZSuqsNU/AjgzLSL+yVProkF9bHb08IZTgRnTft0iSbYcfBXIWoaK0EpIEs2L\nRjVIuDiXJzYBY11TISZlsiw95yVhzbkqdwgtANiwmuI+I9u4O1hfSFAdfEnHix9b\nQZcc+ZCMMwRF4yFMYiWlpEH6wzm3alnlp0gFe0JGUnf8jSVMdGnRogqyVEibJnQ=\n=WfWi\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fbb93cd09ee97192121a1f27060b5172507d144\nparent 95d85336dfd307ebb4f1e1aee83860167720edd7\nparent 6c591a9275050569b9cadb08371465262ee914bb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626309955 +0000\ncommitter GitHub <noreply@github.com> 1626309955 +0000\n\nMerge #9600\n\n9600: fix: Single-line and nested blocks in the `unwrap_block` assist r=Veykril a=patrick-gu\n\nFixes #8411\r\n\r\nRework the system for stripping whitespace and braces in the unwrap_block assist to allow correct unwrapping of blocks such as:\r\n```rust\r\n{ $0 0 }\r\n```\r\ninto\r\n```rust\r\n0\r\n```\r\n\r\nand nested blocks, such as:\r\n```rust\r\n$0{\r\n    {\r\n        3\r\n    }\r\n}\r\n```\r\ninto\r\n```rust\r\n{\r\n    3\r\n}\r\n```\r\n\r\nThis is done by creating the `update_expr_string_with_pat` function (along with `update_expr_string` and `update_expr_string_without_newline`), which strips whitespace and braces in a way that ensures that only whitespace and a maximum of one brace are removed from the start and end of the expression string.\r\n\r\nI have also created several tests to ensure that this functionality works correctly.\n\nCo-authored-by: patrick-gu <55641350+patrick-gu@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190f37afab27a890291a11d9dda2658e676c47bd", "html_url": "https://github.com/rust-lang/rust/commit/190f37afab27a890291a11d9dda2658e676c47bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190f37afab27a890291a11d9dda2658e676c47bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d85336dfd307ebb4f1e1aee83860167720edd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d85336dfd307ebb4f1e1aee83860167720edd7", "html_url": "https://github.com/rust-lang/rust/commit/95d85336dfd307ebb4f1e1aee83860167720edd7"}, {"sha": "6c591a9275050569b9cadb08371465262ee914bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c591a9275050569b9cadb08371465262ee914bb", "html_url": "https://github.com/rust-lang/rust/commit/6c591a9275050569b9cadb08371465262ee914bb"}], "stats": {"total": 128, "additions": 112, "deletions": 16}, "files": [{"sha": "cd6084f6b306a54f5073904207ac2c173ac3098f", "filename": "crates/ide_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 112, "deletions": 16, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/190f37afab27a890291a11d9dda2658e676c47bd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190f37afab27a890291a11d9dda2658e676c47bd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=190f37afab27a890291a11d9dda2658e676c47bd", "patch": "@@ -39,10 +39,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     if matches!(parent.kind(), SyntaxKind::BLOCK_EXPR | SyntaxKind::EXPR_STMT) {\n         return acc.add(assist_id, assist_label, target, |builder| {\n-            builder.replace(\n-                block.syntax().text_range(),\n-                update_expr_string(block.to_string(), &[' ', '{', '\\n']),\n-            );\n+            builder.replace(block.syntax().text_range(), update_expr_string(block.to_string()));\n         });\n     }\n \n@@ -72,7 +69,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                         edit.delete(range_to_del_else_if);\n                         edit.replace(\n                             target,\n-                            update_expr_string(then_branch.to_string(), &[' ', '{']),\n+                            update_expr_string_without_newline(then_branch.to_string()),\n                         );\n                     });\n                 }\n@@ -84,7 +81,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     );\n \n                     edit.delete(range_to_del);\n-                    edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n+                    edit.replace(target, update_expr_string_without_newline(block.to_string()));\n                 });\n             }\n         }\n@@ -93,20 +90,31 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let unwrapped = unwrap_trivial_block(block);\n     acc.add(assist_id, assist_label, target, |builder| {\n-        builder.replace(\n-            parent.syntax().text_range(),\n-            update_expr_string(unwrapped.to_string(), &[' ', '{', '\\n']),\n-        );\n+        builder.replace(parent.syntax().text_range(), update_expr_string(unwrapped.to_string()));\n     })\n }\n \n-fn update_expr_string(expr_str: String, trim_start_pat: &[char]) -> String {\n-    let expr_string = expr_str.trim_start_matches(trim_start_pat);\n-    let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n-    expr_string_lines.pop(); // Delete last line\n+fn update_expr_string(expr_string: String) -> String {\n+    update_expr_string_with_pat(expr_string, &[' ', '\\n'])\n+}\n+\n+fn update_expr_string_without_newline(expr_string: String) -> String {\n+    update_expr_string_with_pat(expr_string, &[' '])\n+}\n+\n+fn update_expr_string_with_pat(expr_str: String, whitespace_pat: &[char]) -> String {\n+    // Remove leading whitespace, index [1..] to remove the leading '{',\n+    // then continue to remove leading whitespace.\n+    let expr_str =\n+        expr_str.trim_start_matches(whitespace_pat)[1..].trim_start_matches(whitespace_pat);\n \n-    expr_string_lines\n-        .into_iter()\n+    // Remove trailing whitespace, index [..expr_str.len() - 1] to remove the trailing '}',\n+    // then continue to remove trailing whitespace.\n+    let expr_str = expr_str.trim_end_matches(whitespace_pat);\n+    let expr_str = expr_str[..expr_str.len() - 1].trim_end_matches(whitespace_pat);\n+\n+    expr_str\n+        .lines()\n         .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n         .collect::<Vec<String>>()\n         .join(\"\\n\")\n@@ -576,6 +584,94 @@ fn main() {\n         }\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 0 }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_nested_block() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    $0{\n+        {\n+            3\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    {\n+        3\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 { println!(\"foo\"); } }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    { println!(\"foo\"); }\n+}\n+\"#,\n+        );\n+\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 { 0 } }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    { 0 }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    if true {$0 /* foo */ foo() } else { bar() /* bar */}\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    /* foo */ foo()\n+}\n \"#,\n         );\n     }"}]}