{"sha": "31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODkyZTIwNWU3YjAzZWEzZGMzYTdkMzFmNWU1ZjJmMjVkZWUwNTg=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-23T15:52:14Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-23T15:52:14Z"}, "message": "let invalid_regex point to the right place for raw strings", "tree": {"sha": "f5c66b7053b361f6f86ce0a5fd07ab1a0a16aa17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c66b7053b361f6f86ce0a5fd07ab1a0a16aa17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "html_url": "https://github.com/rust-lang/rust/commit/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7f76db9af907a0217bc5803f2327c51de4c278", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7f76db9af907a0217bc5803f2327c51de4c278", "html_url": "https://github.com/rust-lang/rust/commit/8e7f76db9af907a0217bc5803f2327c51de4c278"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "bbb70e0cdea6bb0be95a1966bea7c48f8ce137e6", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "patch": "@@ -7,7 +7,7 @@ use rustc_const_eval::ConstContext;\n use rustc::ty::subst::Substs;\n use std::collections::HashSet;\n use std::error::Error;\n-use syntax::ast::{LitKind, NodeId};\n+use syntax::ast::{LitKind, NodeId, StrStyle};\n use syntax::codemap::{BytePos, Span};\n use syntax::symbol::InternedString;\n use utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n@@ -199,8 +199,9 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: boo\n     let builder = regex_syntax::ExprBuilder::new().unicode(utf8);\n \n     if let ExprLit(ref lit) = expr.node {\n-        if let LitKind::Str(ref r, _) = lit.node {\n+        if let LitKind::Str(ref r, style) = lit.node {\n             let r = &r.as_str();\n+            let offset = if let StrStyle::Raw(n) = style { 1 + n } else { 0 };\n             match builder.parse(r) {\n                 Ok(r) => if let Some(repl) = is_trivial_regex(&r) {\n                     span_help_and_lint(\n@@ -215,7 +216,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: boo\n                     span_lint(\n                         cx,\n                         INVALID_REGEX,\n-                        str_span(expr.span, r, e.position()),\n+                        str_span(expr.span, r, e.position() + offset),\n                         &format!(\"regex syntax error: {}\", e.description()),\n                     );\n                 },"}, {"sha": "37c98027fcc001b07338e6ae437316d1c4cb7d5c", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "patch": "@@ -44,6 +44,9 @@ fn syntax_error() {\n         OPENING_PAREN,\n         r\"[a-z]+\\.(com|org|net)\",\n     ]);\n+\n+    let raw_string_error = Regex::new(r\"[...\\/...]\");\n+    let raw_string_error = Regex::new(r#\"[...\\/...]\"#);\n }\n \n fn trivial_regex() {"}, {"sha": "58c6e47afb7900ad1e07b4b45beba319167a1c8b", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31892e205e7b03ea3dc3a7d31f5e5f2f25dee058/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=31892e205e7b03ea3dc3a7d31f5e5f2f25dee058", "patch": "@@ -60,94 +60,106 @@ error: regex syntax error on position 0: unclosed parenthesis\n 44 |         OPENING_PAREN,\n    |         ^^^^^^^^^^^^^\n \n+error: regex syntax error: unrecognized escape sequence\n+  --> $DIR/regex.rs:48:45\n+   |\n+48 |     let raw_string_error = Regex::new(r\"[...//...]\");\n+   |                                             ^\n+\n+error: regex syntax error: unrecognized escape sequence\n+  --> $DIR/regex.rs:49:46\n+   |\n+49 |     let raw_string_error = Regex::new(r#\"[...//...]\"#);\n+   |                                              ^\n+\n error: trivial regex\n-  --> $DIR/regex.rs:50:33\n+  --> $DIR/regex.rs:53:33\n    |\n-50 |     let trivial_eq = Regex::new(\"^foobar$\");\n+53 |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n    = note: `-D trivial-regex` implied by `-D warnings`\n    = help: consider using consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:52:48\n+  --> $DIR/regex.rs:55:48\n    |\n-52 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+55 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:54:42\n+  --> $DIR/regex.rs:57:42\n    |\n-54 |     let trivial_starts_with = Regex::new(\"^foobar\");\n+57 |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:56:40\n+  --> $DIR/regex.rs:59:40\n    |\n-56 |     let trivial_ends_with = Regex::new(\"foobar$\");\n+59 |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:58:39\n+  --> $DIR/regex.rs:61:39\n    |\n-58 |     let trivial_contains = Regex::new(\"foobar\");\n+61 |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:60:39\n+  --> $DIR/regex.rs:63:39\n    |\n-60 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+63 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:62:40\n+  --> $DIR/regex.rs:65:40\n    |\n-62 |     let trivial_backslash = Regex::new(\"a/.b\");\n+65 |     let trivial_backslash = Regex::new(\"a/.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:65:36\n+  --> $DIR/regex.rs:68:36\n    |\n-65 |     let trivial_empty = Regex::new(\"\");\n+68 |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: consider using the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:67:36\n+  --> $DIR/regex.rs:70:36\n    |\n-67 |     let trivial_empty = Regex::new(\"^\");\n+70 |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: consider using the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:69:36\n+  --> $DIR/regex.rs:72:36\n    |\n-69 |     let trivial_empty = Regex::new(\"^$\");\n+72 |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using consider using `str::is_empty`\n \n error: trivial regex\n-  --> $DIR/regex.rs:71:44\n+  --> $DIR/regex.rs:74:44\n    |\n-71 |     let binary_trivial_empty = BRegex::new(\"^$\");\n+74 |     let binary_trivial_empty = BRegex::new(\"^$\");\n    |                                            ^^^^\n    |\n    = help: consider using consider using `str::is_empty`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 23 previous errors\n "}]}