{"sha": "df81ca37645835d41ae67d9f8e682244f40d53e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODFjYTM3NjQ1ODM1ZDQxYWU2N2Q5ZjhlNjgyMjQ0ZjQwZDUzZTc=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-06T17:08:33Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-09T18:04:58Z"}, "message": "document deny by default lints", "tree": {"sha": "efb49ec97cda80ed410a3dbef8d48442440e8d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb49ec97cda80ed410a3dbef8d48442440e8d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df81ca37645835d41ae67d9f8e682244f40d53e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df81ca37645835d41ae67d9f8e682244f40d53e7", "html_url": "https://github.com/rust-lang/rust/commit/df81ca37645835d41ae67d9f8e682244f40d53e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df81ca37645835d41ae67d9f8e682244f40d53e7/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b3a3d1216fd68b483c88b603ec6c742e51c054", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b3a3d1216fd68b483c88b603ec6c742e51c054", "html_url": "https://github.com/rust-lang/rust/commit/50b3a3d1216fd68b483c88b603ec6c742e51c054"}], "stats": {"total": 249, "additions": 237, "deletions": 12}, "files": [{"sha": "a361c117b10c9ba5e92979f85a88e613ce1302e5", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 237, "deletions": 12, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/df81ca37645835d41ae67d9f8e682244f40d53e7/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/df81ca37645835d41ae67d9f8e682244f40d53e7/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=df81ca37645835d41ae67d9f8e682244f40d53e7", "patch": "@@ -2,15 +2,240 @@\n \n These lints are all set to the 'deny' level by default.\n \n-                          exceeding-bitshifts  deny     shift exceeds the type's number of bits\n-                   invalid-type-param-default  deny     type parameter default erroneously allowed in invalid location\n-                legacy-constructor-visibility  deny     detects use of struct constructors that would be invisible with new visibility rules\n-                   legacy-directory-ownership  deny     non-inline, non-`#[path]` modules (e.g. `mod foo;`) were erroneously allowed in some files not named `mod.rs`\n-                               legacy-imports  deny     detects names that resolve to ambiguous glob imports with RFC 1560\n-                   missing-fragment-specifier  deny     detects missing fragment specifiers in unused `macro_rules!` patterns\n-                           mutable-transmutes  deny     mutating transmuted &mut T from &T may cause undefined behavior\n-                        no-mangle-const-items  deny     const items will not have their symbols exported\n-    parenthesized-params-in-types-and-modules  deny     detects parenthesized generic parameters in type and module names\n-              pub-use-of-private-extern-crate  deny     detect public re-exports of private extern crates\n-                          safe-extern-statics  deny     safe access to extern statics was erroneously allowed\n-                          unknown-crate-types  deny     unknown crate type found in #[crate_type] directive\n\\ No newline at end of file\n+## exceeding-bitshifts\n+\n+This lint detects that a shift exceeds the type's number of bits. Some\n+example code that triggers this lint:\n+\n+```rust\n+1_i32 << 32;\n+```\n+\n+This will produce:\n+\n+```text\n+error: bitshift exceeds the type's number of bits\n+ --> src/main.rs:2:5\n+  |\n+2 |     1_i32 << 32;\n+  |     ^^^^^^^^^^^\n+  |\n+```\n+\n+## invalid-type-param-default\n+\n+This lint detects type parameter default erroneously allowed in invalid location. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo<T=i32>(t: T) {}\n+```\n+\n+This will produce:\n+\n+```text\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+ --> src/main.rs:4:8\n+  |\n+4 | fn foo<T=i32>(t: T) {}\n+  |        ^\n+  |\n+  = note: #[deny(invalid_type_param_default)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+```\n+\n+## legacy-constructor-visibility\n+\n+[RFC 1506](https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md) modified some\n+visibility rules, and changed the visibility of struct constructors. Some\n+example code that triggers this lint:\n+\n+```rust\n+mod m {\n+    pub struct S(u8);\n+    \n+    fn f() {\n+        // this is trying to use S from the 'use' line, but becuase the `u8` is\n+        // not pub, it is private\n+        ::S;\n+    }\n+}\n+\n+use m::S;\n+```\n+\n+This will produce:\n+\n+```text\n+error: private struct constructors are not usable through re-exports in outer modules\n+ --> src/main.rs:5:9\n+  |\n+5 |         ::S;\n+  |         ^^^\n+  |\n+  = note: #[deny(legacy_constructor_visibility)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n+```\n+\n+\n+## legacy-directory-ownership\n+\n+The legacy_directory_ownership warning is issued when\n+\n+* There is a non-inline module with a #[path] attribute (e.g. #[path = \"foo.rs\"] mod bar;),\n+* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n+* The module's file contains a non-inline child module without a #[path] attribute.\n+\n+The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n+it into its own directory if appropriate.\n+\n+## legacy-imports\n+\n+This lint detects names that resolve to ambiguous glob imports. Some example\n+code that triggers this lint:\n+\n+```rust\n+pub struct Foo;\n+\n+mod bar {\n+    struct Foo;\n+\n+    mod baz {\n+        use *;\n+        use bar::*;\n+        fn f(_: Foo) {}\n+    }\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: `Foo` is ambiguous\n+ --> src/main.rs:9:17\n+  |\n+7 |         use *;\n+  |             - `Foo` could refer to the name imported here\n+8 |         use bar::*;\n+  |             ------ `Foo` could also refer to the name imported here\n+9 |         fn f(_: Foo) {}\n+  |                 ^^^\n+  |\n+  = note: #[deny(legacy_imports)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+```\n+\n+\n+## missing-fragment-specifier\n+\n+The missing_fragment_specifier warning is issued when an unused pattern in a\n+`macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\n+followed by a fragment specifier (e.g. `:expr`).\n+\n+This warning can always be fixed by removing the unused pattern in the\n+`macro_rules!` macro definition.\n+\n+## mutable-transmutes\n+\n+This lint catches transmuting from `&T` to `&mut T` becuase it is undefined\n+behavior. Some example code that triggers this lint:\n+\n+```rust\n+unsafe {\n+    let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: mutating transmuted &mut T from &T may cause undefined behavior, consider instead using an UnsafeCell\n+ --> src/main.rs:3:17\n+  |\n+3 |         let y = std::mem::transmute::<&i32, &mut i32>(&5);\n+  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+\n+## no-mangle-const-items\n+\n+This lint detects any `const` items with the `#[no_mangle]` attribute.\n+Constants do not have their symbols exported, and therefore, this probably\n+means you meant to use a `static`, not a `const. Some example code that\n+triggers this lint:\n+\n+```rust\n+#[no_mangle]\n+const FOO: i32 = 5;\n+```\n+\n+This will produce:\n+\n+```text\n+error: const items should never be #[no_mangle]\n+ --> src/main.rs:3:1\n+  |\n+3 | const FOO: i32 = 5;\n+  | -----^^^^^^^^^^^^^^\n+  | |\n+  | help: try a static value: `pub static`\n+  |\n+```\n+\n+## parenthesized-params-in-types-and-modules\n+\n+This lint detects incorrect parentheses. Some example code that triggers this\n+lint:\n+\n+```rust\n+let x = 5 as usize();\n+```\n+\n+This will produce:\n+\n+```text\n+error: parenthesized parameters may only be used with a trait\n+ --> src/main.rs:2:21\n+  |\n+2 |   let x = 5 as usize();\n+  |                     ^^\n+  |\n+  = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+```\n+\n+To fix it, remove the `()`s.\n+\n+## pub-use-of-private-extern-crate\n+\n+This lint detects a specific situation of re-exporting a private `extern crate`;\n+\n+## safe-extern-statics\n+\n+In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n+to be accessed in safe code. This lint now catches and denies this kind of code.\n+\n+## unknown-crate-types\n+\n+This lint detects an unknown crate type found in a `#[crate_type]` directive. Some\n+example code that triggers this lint:\n+\n+```rust\n+#![crate_type=\"lol\"]\n+```\n+\n+This will produce:\n+\n+```text\n+error: invalid `crate_type` value\n+ --> src/lib.rs:1:1\n+  |\n+1 | #![crate_type=\"lol\"]\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n\\ No newline at end of file"}]}