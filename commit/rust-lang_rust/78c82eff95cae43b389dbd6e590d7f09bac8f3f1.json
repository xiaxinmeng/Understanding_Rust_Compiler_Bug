{"sha": "78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YzgyZWZmOTVjYWU0M2IzODlkYmQ2ZTU5MGQ3ZjA5YmFjOGYzZjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T21:43:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T21:43:14Z"}, "message": "Merge #4330\n\n4330: Drop dead code and a dependency! r=matklad a=Veetaha\n\n:tada: \n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "9fbbf7d947336ec947b9e20f42df620511111d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fbbf7d947336ec947b9e20f42df620511111d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesd3yCRBK7hj4Ov3rIwAAdHIIADTYXKo4Z66AAi6CUctRQDoz\nZky9barFBJeelEXSj/PaAhSa2D7GoAnbCWeNNjy7reppTh2AoQ4k7nUCEfAje7ys\nfuoSwwfx5fGHu7BCsp9H+GqKKngeXL+5xJEZiu5Pv/hoxxAH5/hiX99NSGdHd6ZC\nFxKv2+/zYRWcXRbc7Ks/jgIzOJmhEBj0G92DVV7EPDHGuwflorWmqKd0aiiTj9Oa\nNAf571Z/V3sSwNyOyG/RK8X0Eol+RScA88N9C6Zblgj7BwWxoiUFSi0Ixu0+SIy7\nTqfCPb8VB9tTchJ5k4EffXgOprjxqAradJLRbImOUZbjOVzONgJgITcUCaCcXCs=\n=MerU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fbbf7d947336ec947b9e20f42df620511111d3d\nparent 7e941fe8ec7b196314aa05bf9411cdce978ffa24\nparent 5eac2d4c55fec5f96d84d20cc033c2a8e938f53e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588714994 +0000\ncommitter GitHub <noreply@github.com> 1588714994 +0000\n\nMerge #4330\n\n4330: Drop dead code and a dependency! r=matklad a=Veetaha\n\n:tada: \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "html_url": "https://github.com/rust-lang/rust/commit/78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e941fe8ec7b196314aa05bf9411cdce978ffa24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e941fe8ec7b196314aa05bf9411cdce978ffa24", "html_url": "https://github.com/rust-lang/rust/commit/7e941fe8ec7b196314aa05bf9411cdce978ffa24"}, {"sha": "5eac2d4c55fec5f96d84d20cc033c2a8e938f53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eac2d4c55fec5f96d84d20cc033c2a8e938f53e", "html_url": "https://github.com/rust-lang/rust/commit/5eac2d4c55fec5f96d84d20cc033c2a8e938f53e"}], "stats": {"total": 135, "additions": 0, "deletions": 135}, "files": [{"sha": "71c627a2a063910ad12855b17475ea1935030d7d", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "patch": "@@ -1066,11 +1066,6 @@\n             \"integrity\": \"sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=\",\n             \"dev\": true\n         },\n-        \"jsonc-parser\": {\n-            \"version\": \"2.2.1\",\n-            \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.2.1.tgz\",\n-            \"integrity\": \"sha512-o6/yDBYccGvTz1+QFevz6l6OBZ2+fMVu2JZ9CIhzsYRX4mjaK5IyX9eldUdCmga16zlgQxyrj5pt9kzuj2C02w==\"\n-        },\n         \"leven\": {\n             \"version\": \"3.1.0\",\n             \"resolved\": \"https://registry.npmjs.org/leven/-/leven-3.1.0.tgz\","}, {"sha": "eeb3d3513fe6ab0daad1de9e70fb7be7aa427eff", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/78c82eff95cae43b389dbd6e590d7f09bac8f3f1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=78c82eff95cae43b389dbd6e590d7f09bac8f3f1", "patch": "@@ -33,7 +33,6 @@\n         \"fix\": \" tsfmt -r       && eslint -c .eslintrc.js --ext ts ./src --fix\"\n     },\n     \"dependencies\": {\n-        \"jsonc-parser\": \"^2.2.1\",\n         \"node-fetch\": \"^2.6.0\",\n         \"vscode-languageclient\": \"7.0.0-next.1\"\n     },"}, {"sha": "5b9327b28a4a77c75015373f851c17fecbc22594", "filename": "editors/code/src/color_theme.ts", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7e941fe8ec7b196314aa05bf9411cdce978ffa24/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7e941fe8ec7b196314aa05bf9411cdce978ffa24/editors%2Fcode%2Fsrc%2Fcolor_theme.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcolor_theme.ts?ref=7e941fe8ec7b196314aa05bf9411cdce978ffa24", "patch": "@@ -1,129 +0,0 @@\n-import * as fs from 'fs';\n-import * as jsonc from 'jsonc-parser';\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-\n-export interface TextMateRuleSettings {\n-    foreground?: string;\n-    background?: string;\n-    fontStyle?: string;\n-}\n-\n-export class ColorTheme {\n-    private rules: Map<string, TextMateRuleSettings> = new Map();\n-\n-    static load(): ColorTheme {\n-        // Find out current color theme\n-        const themeName = vscode.workspace\n-            .getConfiguration('workbench')\n-            .get('colorTheme');\n-\n-        if (typeof themeName !== 'string') {\n-            // console.warn('workbench.colorTheme is', themeName)\n-            return new ColorTheme();\n-        }\n-        return loadThemeNamed(themeName);\n-    }\n-\n-    static fromRules(rules: TextMateRule[]): ColorTheme {\n-        const res = new ColorTheme();\n-        for (const rule of rules) {\n-            const scopes = typeof rule.scope === 'undefined'\n-                ? []\n-                : typeof rule.scope === 'string'\n-                    ? [rule.scope]\n-                    : rule.scope;\n-\n-            for (const scope of scopes) {\n-                res.rules.set(scope, rule.settings);\n-            }\n-        }\n-        return res;\n-    }\n-\n-    lookup(scopes: string[]): TextMateRuleSettings {\n-        let res: TextMateRuleSettings = {};\n-        for (const scope of scopes) {\n-            this.rules.forEach((value, key) => {\n-                if (scope.startsWith(key)) {\n-                    res = mergeRuleSettings(res, value);\n-                }\n-            });\n-        }\n-        return res;\n-    }\n-\n-    mergeFrom(other: ColorTheme) {\n-        other.rules.forEach((value, key) => {\n-            const merged = mergeRuleSettings(this.rules.get(key), value);\n-            this.rules.set(key, merged);\n-        });\n-    }\n-}\n-\n-function loadThemeNamed(themeName: string): ColorTheme {\n-    function isTheme(extension: vscode.Extension<unknown>): boolean {\n-        return (\n-            extension.extensionKind === vscode.ExtensionKind.UI &&\n-            extension.packageJSON.contributes &&\n-            extension.packageJSON.contributes.themes\n-        );\n-    }\n-\n-    const themePaths: string[] = vscode.extensions.all\n-        .filter(isTheme)\n-        .flatMap(\n-            ext => ext.packageJSON.contributes.themes\n-                .filter((it: any) => (it.id || it.label) === themeName)\n-                .map((it: any) => path.join(ext.extensionPath, it.path))\n-        );\n-\n-    const res = new ColorTheme();\n-    for (const themePath of themePaths) {\n-        res.mergeFrom(loadThemeFile(themePath));\n-    }\n-\n-    const globalCustomizations: any = vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations');\n-    res.mergeFrom(ColorTheme.fromRules(globalCustomizations?.textMateRules ?? []));\n-\n-    const themeCustomizations: any = vscode.workspace.getConfiguration('editor.tokenColorCustomizations').get(`[${themeName}]`);\n-    res.mergeFrom(ColorTheme.fromRules(themeCustomizations?.textMateRules ?? []));\n-\n-\n-    return res;\n-}\n-\n-function loadThemeFile(themePath: string): ColorTheme {\n-    let text;\n-    try {\n-        text = fs.readFileSync(themePath, 'utf8');\n-    } catch {\n-        return new ColorTheme();\n-    }\n-    const obj = jsonc.parse(text);\n-    const tokenColors: TextMateRule[] = obj?.tokenColors ?? [];\n-    const res = ColorTheme.fromRules(tokenColors);\n-\n-    for (const include of obj?.include ?? []) {\n-        const includePath = path.join(path.dirname(themePath), include);\n-        res.mergeFrom(loadThemeFile(includePath));\n-    }\n-\n-    return res;\n-}\n-\n-interface TextMateRule {\n-    scope: string | string[];\n-    settings: TextMateRuleSettings;\n-}\n-\n-function mergeRuleSettings(\n-    defaultSetting: TextMateRuleSettings | undefined,\n-    override: TextMateRuleSettings,\n-): TextMateRuleSettings {\n-    return {\n-        foreground: override.foreground ?? defaultSetting?.foreground,\n-        background: override.background ?? defaultSetting?.background,\n-        fontStyle: override.fontStyle ?? defaultSetting?.fontStyle,\n-    };\n-}"}]}