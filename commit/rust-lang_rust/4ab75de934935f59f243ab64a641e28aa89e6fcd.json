{"sha": "4ab75de934935f59f243ab64a641e28aa89e6fcd", "node_id": "C_kwDOAAsO6NoAKDRhYjc1ZGU5MzQ5MzVmNTlmMjQzYWI2NGE2NDFlMjhhYTg5ZTZmY2Q", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-30T23:47:10Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-02T13:18:12Z"}, "message": "Improve diagnostic for missing space in range pattern", "tree": {"sha": "fe7cc1e8e0c9235e7452a46165c5b4b14713cc2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7cc1e8e0c9235e7452a46165c5b4b14713cc2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab75de934935f59f243ab64a641e28aa89e6fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab75de934935f59f243ab64a641e28aa89e6fcd", "html_url": "https://github.com/rust-lang/rust/commit/4ab75de934935f59f243ab64a641e28aa89e6fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab75de934935f59f243ab64a641e28aa89e6fcd/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9985cf172e7cb8ab5c58ce2818752c3572754fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "html_url": "https://github.com/rust-lang/rust/commit/a9985cf172e7cb8ab5c58ce2818752c3572754fc"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "4c45ccf6674d0a8a5001f172c2b57ec137005262", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -203,8 +203,9 @@ parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n     .suggestion_remove_eq = use `..=` instead\n     .note = inclusive ranges end with a single equals sign (`..=`)\n \n-parse_inclusive_range_match_arrow = unexpected `=>` after open range\n-    .suggestion_add_space = add a space between the pattern and `=>`\n+parse_inclusive_range_match_arrow = unexpected `>` after inclusive range\n+    .label = this is parsed as an inclusive range `..=`\n+    .suggestion = add a space between the pattern and `=>`\n \n parse_inclusive_range_no_end = inclusive range with no end\n     .suggestion_open_range = use `..` instead"}, {"sha": "dcda518f47c4da094c65d1eada16d9755101272e", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -668,13 +668,10 @@ pub(crate) struct InclusiveRangeExtraEquals {\n #[diag(parse_inclusive_range_match_arrow)]\n pub(crate) struct InclusiveRangeMatchArrow {\n     #[primary_span]\n+    pub arrow: Span,\n+    #[label]\n     pub span: Span,\n-    #[suggestion(\n-        suggestion_add_space,\n-        style = \"verbose\",\n-        code = \" \",\n-        applicability = \"machine-applicable\"\n-    )]\n+    #[suggestion(style = \"verbose\", code = \" \", applicability = \"machine-applicable\")]\n     pub after_pat: Span,\n }\n "}, {"sha": "3d42a9dcbbea1916b3c6d3e66e408d2fc1eff1e9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -2717,6 +2717,14 @@ impl<'a> Parser<'a> {\n                     );\n                     err.emit();\n                     this.bump();\n+                } else if matches!(\n+                    (&this.prev_token.kind, &this.token.kind),\n+                    (token::DotDotEq, token::Gt)\n+                ) {\n+                    // `error_inclusive_range_match_arrow` handles cases like `0..=> {}`,\n+                    // so we supress the error here\n+                    err.delay_as_bug();\n+                    this.bump();\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "4a2bd3fc5307dc9c86c87e94f8dff2e78f9cfec9", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -744,7 +744,7 @@ impl<'a> Parser<'a> {\n             }\n             token::Gt if no_space => {\n                 let after_pat = span.with_hi(span.hi() - rustc_span::BytePos(1)).shrink_to_hi();\n-                self.sess.emit_err(InclusiveRangeMatchArrow { span, after_pat });\n+                self.sess.emit_err(InclusiveRangeMatchArrow { span, arrow: tok.span, after_pat });\n             }\n             _ => {\n                 self.sess.emit_err(InclusiveRangeNoEnd { span });"}, {"sha": "30173b1b4be031eb2642eab7234bb7b65e439548", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let x = 42;\n     match x {\n         0..=73 => {},\n-        74..=> {},   //~ ERROR unexpected `=>` after open range\n-                     //~^ ERROR expected one of `=>`, `if`, or `|`, found `>`\n+        74..=> {},\n+        //~^ ERROR unexpected `>` after inclusive range\n+        //~| NOTE this is parsed as an inclusive range `..=`\n     }\n }"}, {"sha": "cb7f998df7a5b1471191ee7c46381b2662caf061", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab75de934935f59f243ab64a641e28aa89e6fcd/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ab75de934935f59f243ab64a641e28aa89e6fcd/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr?ref=4ab75de934935f59f243ab64a641e28aa89e6fcd", "patch": "@@ -1,19 +1,15 @@\n-error: unexpected `=>` after open range\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:11\n+error: unexpected `>` after inclusive range\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n    |\n LL |         74..=> {},\n-   |           ^^^\n+   |           ---^\n+   |           |\n+   |           this is parsed as an inclusive range `..=`\n    |\n help: add a space between the pattern and `=>`\n    |\n LL |         74.. => {},\n    |             +\n \n-error: expected one of `=>`, `if`, or `|`, found `>`\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n-   |\n-LL |         74..=> {},\n-   |              ^ expected one of `=>`, `if`, or `|`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}