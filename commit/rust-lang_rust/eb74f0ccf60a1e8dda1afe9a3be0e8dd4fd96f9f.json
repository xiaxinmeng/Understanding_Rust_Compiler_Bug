{"sha": "eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzRmMGNjZjYwYTFlOGRkYTFhZmU5YTNiZTBlOGRkNGZkOTZmOWY=", "commit": {"author": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-07-20T01:02:38Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-20T01:04:33Z"}, "message": "Added a new method to extra::future (unwrap) + a test", "tree": {"sha": "1c80a4d22820b1630617b076c212ddde942d83f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c80a4d22820b1630617b076c212ddde942d83f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f", "html_url": "https://github.com/rust-lang/rust/commit/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f/comments", "author": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddd8c156c650347267e4b02938f8efb207cb2150", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd8c156c650347267e4b02938f8efb207cb2150", "html_url": "https://github.com/rust-lang/rust/commit/ddd8c156c650347267e4b02938f8efb207cb2150"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "d8f21b460138e941e3ce2863b5a6c9cabcb53347", "filename": "src/libextra/future.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=eb74f0ccf60a1e8dda1afe9a3be0e8dd4fd96f9f", "patch": "@@ -60,6 +60,19 @@ impl<A:Clone> Future<A> {\n     }\n }\n \n+impl<A> Future<A> {\n+    /// Gets the value from this future, forcing evaluation.\n+    pub fn unwrap(self) -> A {\n+        let mut this = self;\n+        this.get_ref();\n+        let state = replace(&mut this.state, Evaluating);\n+        match state {\n+            Forced(v) => v,\n+            _ => fail!( \"Logic error.\" ),\n+        }\n+    }\n+}\n+\n impl<A> Future<A> {\n     pub fn get_ref<'a>(&'a mut self) -> &'a A {\n         /*!\n@@ -179,6 +192,12 @@ mod test {\n         assert_eq!(f.get(), ~\"fail\");\n     }\n \n+    #[test]\n+    fn test_interface_unwrap() {\n+        let mut f = from_value(~\"fail\");\n+        assert_eq!(f.unwrap(), ~\"fail\");\n+    }\n+\n     #[test]\n     fn test_get_ref_method() {\n         let mut f = from_value(22);"}]}