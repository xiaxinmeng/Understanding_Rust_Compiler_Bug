{"sha": "f79c4afd3a5c408bd9253311b224773702a912df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OWM0YWZkM2E1YzQwOGJkOTI1MzMxMWIyMjQ3NzM3MDJhOTEyZGY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-10-27T05:43:38Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-10-27T05:43:38Z"}, "message": "Fix invalid paths", "tree": {"sha": "a5df1314d650494c4ebd900115c592fd5c4ebb34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5df1314d650494c4ebd900115c592fd5c4ebb34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79c4afd3a5c408bd9253311b224773702a912df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c4afd3a5c408bd9253311b224773702a912df", "html_url": "https://github.com/rust-lang/rust/commit/f79c4afd3a5c408bd9253311b224773702a912df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79c4afd3a5c408bd9253311b224773702a912df/comments", "author": null, "committer": null, "parents": [{"sha": "66d56fefc5b7ce22d2db65ee9dc1a5f9f6bf2f09", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d56fefc5b7ce22d2db65ee9dc1a5f9f6bf2f09", "html_url": "https://github.com/rust-lang/rust/commit/66d56fefc5b7ce22d2db65ee9dc1a5f9f6bf2f09"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "c75efc6e99f899c73ed3c3d56c43ef00f47ef127", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f79c4afd3a5c408bd9253311b224773702a912df", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::paths;\n use crate::utils::{\n-    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_path, span_lint_and_help,\n+    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_def_path, match_path, span_lint_and_help,\n     span_lint_and_note, span_lint_and_then,\n };\n use if_chain::if_chain;\n@@ -193,10 +193,9 @@ fn check_hash_peq<'tcx>(\n     hash_is_automatically_derived: bool,\n ) {\n     if_chain! {\n-        if match_path(&trait_ref.path, &paths::HASH);\n         if let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait();\n-        if let Some(def_id) = &trait_ref.trait_def_id();\n-        if !def_id.is_local();\n+        if let Some(def_id) = trait_ref.trait_def_id();\n+        if match_def_path(cx, def_id, &paths::HASH);\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {\n@@ -352,7 +351,8 @@ fn check_unsafe_derive_deserialize<'tcx>(\n     }\n \n     if_chain! {\n-        if match_path(&trait_ref.path, &paths::SERDE_DESERIALIZE);\n+        if let Some(trait_def_id) = trait_ref.trait_def_id();\n+        if match_def_path(cx, trait_def_id, &paths::SERDE_DESERIALIZE);\n         if let ty::Adt(def, _) = ty.kind();\n         if let Some(local_def_id) = def.did.as_local();\n         let adt_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_def_id);"}, {"sha": "c1c08597ee67004700cc2aef27b2e0c8e4ba39f7", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=f79c4afd3a5c408bd9253311b224773702a912df", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::{match_qpath, paths, span_lint_and_then, sugg};\n+use crate::utils::{match_def_path, paths, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc_ast::util::parser::AssocOp;\n use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -76,7 +77,8 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n \n             // right hand side matches either f32::EPSILON or f64::EPSILON\n             if let ExprKind::Path(ref epsilon_path) = rhs.kind;\n-            if match_qpath(epsilon_path, &paths::F32_EPSILON) || match_qpath(epsilon_path, &paths::F64_EPSILON);\n+            if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n+            if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n \n             // values of the substractions on the left hand side are of the type float\n             let t_val_l = cx.typeck_results().expr_ty(val_l);"}, {"sha": "d5a0e0d1f2943c8b47cfda208b20b02ea0c1fc3f", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79c4afd3a5c408bd9253311b224773702a912df/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f79c4afd3a5c408bd9253311b224773702a912df", "patch": "@@ -32,10 +32,10 @@ pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n-pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n+pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n-pub const F32_EPSILON: [&str; 2] = [\"f32\", \"EPSILON\"];\n-pub const F64_EPSILON: [&str; 2] = [\"f64\", \"EPSILON\"];\n+pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n+pub const F64_EPSILON: [&str; 4] = [\"core\", \"f64\", \"<impl f64>\", \"EPSILON\"];\n pub const FILE: [&str; 3] = [\"std\", \"fs\", \"File\"];\n pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n@@ -47,7 +47,7 @@ pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n-pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n+pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n@@ -58,7 +58,7 @@ pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"Into\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n-pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n+pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc_session\", \"lint\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -86,8 +86,8 @@ pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n-pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n-pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n+pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n+pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n@@ -107,7 +107,7 @@ pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n-pub const SERDE_DESERIALIZE: [&str; 2] = [\"_serde\", \"Deserialize\"];\n+pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];"}]}