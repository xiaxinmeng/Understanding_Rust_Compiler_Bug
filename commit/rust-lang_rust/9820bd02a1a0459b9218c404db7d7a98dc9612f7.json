{"sha": "9820bd02a1a0459b9218c404db7d7a98dc9612f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MjBiZDAyYTFhMDQ1OWI5MjE4YzQwNGRiN2Q3YTk4ZGM5NjEyZjc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-01T15:15:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-01T15:15:51Z"}, "message": "Rollup merge of #37059 - jfirebaugh:unused-RangeExpression, r=alexcrichton\n\nRemove TypeOrigin::RangeExpression\n\nThis variant became unused in #30884.", "tree": {"sha": "b96d751d26be1e9a8b4852f5fd5260cdefecb268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b96d751d26be1e9a8b4852f5fd5260cdefecb268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9820bd02a1a0459b9218c404db7d7a98dc9612f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9820bd02a1a0459b9218c404db7d7a98dc9612f7", "html_url": "https://github.com/rust-lang/rust/commit/9820bd02a1a0459b9218c404db7d7a98dc9612f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9820bd02a1a0459b9218c404db7d7a98dc9612f7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d3d26c2e1cc48038cb3137e80b5ef3402c1846", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d3d26c2e1cc48038cb3137e80b5ef3402c1846", "html_url": "https://github.com/rust-lang/rust/commit/79d3d26c2e1cc48038cb3137e80b5ef3402c1846"}, {"sha": "16a979c106caddf665f74122d807086129e93bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a979c106caddf665f74122d807086129e93bed", "html_url": "https://github.com/rust-lang/rust/commit/16a979c106caddf665f74122d807086129e93bed"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "4c097965bb06abe05852e93f437bbdf7f0a5a1a1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9820bd02a1a0459b9218c404db7d7a98dc9612f7/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9820bd02a1a0459b9218c404db7d7a98dc9612f7/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9820bd02a1a0459b9218c404db7d7a98dc9612f7", "patch": "@@ -199,9 +199,6 @@ pub enum TypeOrigin {\n     // Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse(Span),\n \n-    // Computing common supertype in a range expression\n-    RangeExpression(Span),\n-\n     // `where a == b`\n     EquatePredicate(Span),\n \n@@ -231,7 +228,6 @@ impl TypeOrigin {\n             },\n             &TypeOrigin::IfExpression(_) => \"if and else have incompatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n-            &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality predicate not satisfied\",\n             &TypeOrigin::MainFunctionType(_) => \"main function has wrong type\",\n             &TypeOrigin::StartFunctionType(_) => \"start function has wrong type\",\n@@ -251,7 +247,6 @@ impl TypeOrigin {\n             &TypeOrigin::MatchExpressionArm(..) => \"match arms have compatible types\",\n             &TypeOrigin::IfExpression(_) => \"if and else have compatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if missing an else returns ()\",\n-            &TypeOrigin::RangeExpression(_) => \"start and end of range have compatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality where clause is satisfied\",\n             &TypeOrigin::MainFunctionType(_) => \"`main` function has the correct type\",\n             &TypeOrigin::StartFunctionType(_) => \"`start` function has the correct type\",\n@@ -1755,7 +1750,6 @@ impl TypeOrigin {\n             TypeOrigin::MatchExpressionArm(match_span, ..) => match_span,\n             TypeOrigin::IfExpression(span) => span,\n             TypeOrigin::IfExpressionWithNoElse(span) => span,\n-            TypeOrigin::RangeExpression(span) => span,\n             TypeOrigin::EquatePredicate(span) => span,\n             TypeOrigin::MainFunctionType(span) => span,\n             TypeOrigin::StartFunctionType(span) => span,"}]}