{"sha": "afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "node_id": "C_kwDOAAsO6NoAKGFmZGJkNmNjZTI0N2QwNTdlMWU0MDE0ZDIwYjc5YmIyYTJkNGJmYWM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-02T16:57:23Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-02T18:29:02Z"}, "message": "fix: infer lhs first on ordinary assignment expressions", "tree": {"sha": "b23fe03f271c5fc3e04776809b4e9c71bd654089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23fe03f271c5fc3e04776809b4e9c71bd654089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLAjm4ACgkQ4laYqTBY\nYXEGXg/+OkPD1UlPYey3hnmfskm75HPDNWchw1Ee2xlfeag9zlNyI/0dhbhaulJ/\n68PoVi4iH7AErVqIcF1Nml+m+DZbJYAtuMWMRJpC5C+DT3V++cIVKIuGxiDqyho1\nHbgvq85cEnQbIGlxXA7SWORB9FGxp8QWy1AaaJ5wJ0HAO8Wu8eQ1JtMOL+oTd2Rs\nnDe1ovAyJdoTtY7l7vydRuRJW/+3N6xyRTRuqL3A1j5NmcxicEXN21OqJ9fieLqJ\nS0b9i85vR/fFiGMgjX/94mFthCd9TPM6TvBP4RSvVYBJzvns0S3N3ZvUB/7hHDw1\nbkAkxx9p3WgH8W7ulRhdE9EbwolFp7XCRLhkklPm4BMdclUpg0+LP1CyNFcYiMtP\nssLkPkOENHLoAqmArDFLcC+Ih4MDfO1VPqQNztT43eDkzsC8+h26tD/FffmgSuHb\nvwCbycwQ7a8LBQDtGTdNM1N3xdkJ/2j1BpXLlGfcV4Q+K8BnJ1fflk9fkmSH92s4\n2RUh8e+UFd+9wlQLTsoNUBc3BXRD6vbQWCnut1AoXKtiQC3vm2UaEHZDQ6uQg8C1\nCHrfRF68d6vRq68hCCfW1CFBcqYnvfzrEJcp2zMU6ReNnkOP/eKT/QLFH2Hx7V7f\nWbVNPcmvIurqDaoFY9JIg0NXZS+g1HwDKlmdm6mg51R7HlWD+Uw=\n=W2wK\n-----END PGP SIGNATURE-----", "payload": "tree b23fe03f271c5fc3e04776809b4e9c71bd654089\nparent d101439c77c6842e41e04f1438eb1d93095dea52\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1656781043 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1656786542 +0900\n\nfix: infer lhs first on ordinary assignment expressions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "html_url": "https://github.com/rust-lang/rust/commit/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d101439c77c6842e41e04f1438eb1d93095dea52", "url": "https://api.github.com/repos/rust-lang/rust/commits/d101439c77c6842e41e04f1438eb1d93095dea52", "html_url": "https://github.com/rust-lang/rust/commit/d101439c77c6842e41e04f1438eb1d93095dea52"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "08abf8a461b25698e0218a4d012a41f26d26f822", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "patch": "@@ -593,8 +593,28 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::BinaryOp { lhs, rhs, op } => match op {\n                 Some(BinaryOp::Assignment { op: None }) => {\n-                    let rhs_ty = self.infer_expr(*rhs, &Expectation::none());\n-                    self.infer_assignee_expr(*lhs, &rhs_ty);\n+                    let lhs = *lhs;\n+                    let is_ordinary = match &self.body[lhs] {\n+                        Expr::Array(_)\n+                        | Expr::RecordLit { .. }\n+                        | Expr::Tuple { .. }\n+                        | Expr::Underscore => false,\n+                        Expr::Call { callee, .. } => !matches!(&self.body[*callee], Expr::Path(_)),\n+                        _ => true,\n+                    };\n+\n+                    // In ordinary (non-destructuring) assignments, the type of\n+                    // `lhs` must be inferred first so that the ADT fields\n+                    // instantiations in RHS can be coerced to it. Note that this\n+                    // cannot happen in destructuring assignments because of how\n+                    // they are desugared.\n+                    if is_ordinary {\n+                        let lhs_ty = self.infer_expr(lhs, &Expectation::none());\n+                        self.infer_expr_coerce(*rhs, &Expectation::has_type(lhs_ty));\n+                    } else {\n+                        let rhs_ty = self.infer_expr(*rhs, &Expectation::none());\n+                        self.infer_assignee_expr(lhs, &rhs_ty);\n+                    }\n                     self.result.standard_types.unit.clone()\n                 }\n                 Some(BinaryOp::LogicOp(_)) => {"}, {"sha": "bf59fadc2c33693e75de79a0fe016f2896a6cf18", "filename": "crates/hir-ty/src/tests/coercion.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdbd6cce247d057e1e4014d20b79bb2a2d4bfac/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=afdbd6cce247d057e1e4014d20b79bb2a2d4bfac", "patch": "@@ -709,3 +709,47 @@ fn test() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn assign_coerce_struct_fields() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: coerce_unsized\n+struct S;\n+trait Tr {}\n+impl Tr for S {}\n+struct V<T> { t: T }\n+\n+fn main() {\n+    let a: V<&dyn Tr>;\n+    a = V { t: &S };\n+\n+    let mut a: V<&dyn Tr> = V { t: &S };\n+    a = V { t: &S };\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn destructuring_assign_coerce_struct_fields() {\n+    check(\n+        r#\"\n+//- minicore: coerce_unsized\n+struct S;\n+trait Tr {}\n+impl Tr for S {}\n+struct V<T> { t: T }\n+\n+fn main() {\n+    let a: V<&dyn Tr>;\n+    (a,) = V { t: &S };\n+  //^^^^expected V<&S>, got (V<&dyn Tr>,)\n+\n+    let mut a: V<&dyn Tr> = V { t: &S };\n+    (a,) = V { t: &S };\n+  //^^^^expected V<&S>, got (V<&dyn Tr>,)\n+}\n+        \"#,\n+    );\n+}"}]}