{"sha": "b719a6cc07772f4c50fe34865e7dc82c4df11dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTlhNmNjMDc3NzJmNGM1MGZlMzQ4NjVlN2RjODJjNGRmMTFkZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-17T17:34:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-17T17:34:01Z"}, "message": "simplify", "tree": {"sha": "8b869d25241514887461df5d4c2a04a78ae4a12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b869d25241514887461df5d4c2a04a78ae4a12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b719a6cc07772f4c50fe34865e7dc82c4df11dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b719a6cc07772f4c50fe34865e7dc82c4df11dfb", "html_url": "https://github.com/rust-lang/rust/commit/b719a6cc07772f4c50fe34865e7dc82c4df11dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b719a6cc07772f4c50fe34865e7dc82c4df11dfb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7187fc5c2aab7c5578d4820fc3d959b8174cf845", "url": "https://api.github.com/repos/rust-lang/rust/commits/7187fc5c2aab7c5578d4820fc3d959b8174cf845", "html_url": "https://github.com/rust-lang/rust/commit/7187fc5c2aab7c5578d4820fc3d959b8174cf845"}], "stats": {"total": 72, "additions": 33, "deletions": 39}, "files": [{"sha": "1e1344456a3df0df2e86f479e6d806b1fdd4db4e", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b719a6cc07772f4c50fe34865e7dc82c4df11dfb/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b719a6cc07772f4c50fe34865e7dc82c4df11dfb/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=b719a6cc07772f4c50fe34865e7dc82c4df11dfb", "patch": "@@ -121,6 +121,39 @@ impl Vfs {\n         None\n     }\n \n+    pub fn add_file_overlay(&mut self, path: &Path, text: String) -> Option<VfsFile> {\n+        let (root, rel_path, file) = self.find_root(path)?;\n+        if let Some(file) = file {\n+            self.do_change_file(file, text, true);\n+            Some(file)\n+        } else {\n+            self.do_add_file(root, rel_path, text, true)\n+        }\n+    }\n+\n+    pub fn change_file_overlay(&mut self, path: &Path, new_text: String) {\n+        if let Some((_root, _path, file)) = self.find_root(path) {\n+            let file = file.expect(\"can't change a file which wasn't added\");\n+            self.do_change_file(file, new_text, true);\n+        }\n+    }\n+\n+    pub fn remove_file_overlay(&mut self, path: &Path) -> Option<VfsFile> {\n+        let (root, rel_path, file) = self.find_root(path)?;\n+        let file = file.expect(\"can't remove a file which wasn't added\");\n+        let full_path = rel_path.to_path(&self.roots.path(root));\n+        if let Ok(text) = fs::read_to_string(&full_path) {\n+            self.do_change_file(file, text, true);\n+        } else {\n+            self.do_remove_file(root, rel_path, file, true);\n+        }\n+        Some(file)\n+    }\n+\n+    pub fn commit_changes(&mut self) -> Vec<VfsChange> {\n+        mem::replace(&mut self.pending_changes, Vec::new())\n+    }\n+\n     pub fn task_receiver(&self) -> &Receiver<io::TaskResult> {\n         self.worker.receiver()\n     }\n@@ -202,45 +235,6 @@ impl Vfs {\n         self.pending_changes.push(VfsChange::RemoveFile { root, path, file });\n     }\n \n-    pub fn add_file_overlay(&mut self, path: &Path, text: String) -> Option<VfsFile> {\n-        if let Some((root, rel_path, file)) = self.find_root(path) {\n-            if let Some(file) = file {\n-                self.do_change_file(file, text, true);\n-                Some(file)\n-            } else {\n-                self.do_add_file(root, rel_path, text, true)\n-            }\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn change_file_overlay(&mut self, path: &Path, new_text: String) {\n-        if let Some((_root, _path, file)) = self.find_root(path) {\n-            let file = file.expect(\"can't change a file which wasn't added\");\n-            self.do_change_file(file, new_text, true);\n-        }\n-    }\n-\n-    pub fn remove_file_overlay(&mut self, path: &Path) -> Option<VfsFile> {\n-        if let Some((root, path, file)) = self.find_root(path) {\n-            let file = file.expect(\"can't remove a file which wasn't added\");\n-            let full_path = path.to_path(&self.roots.path(root));\n-            if let Ok(text) = fs::read_to_string(&full_path) {\n-                self.do_change_file(file, text, true);\n-            } else {\n-                self.do_remove_file(root, path, file, true);\n-            }\n-            Some(file)\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn commit_changes(&mut self) -> Vec<VfsChange> {\n-        mem::replace(&mut self.pending_changes, Vec::new())\n-    }\n-\n     fn add_file(\n         &mut self,\n         root: VfsRoot,"}]}