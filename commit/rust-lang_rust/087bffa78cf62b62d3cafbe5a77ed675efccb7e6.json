{"sha": "087bffa78cf62b62d3cafbe5a77ed675efccb7e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2JmZmE3OGNmNjJiNjJkM2NhZmJlNWE3N2VkNjc1ZWZjY2I3ZTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-04T12:36:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-04T12:36:43Z"}, "message": "Remove RangeInclusive::sum", "tree": {"sha": "a72bf7e762c700cb46f59de937e6d9e829ade893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72bf7e762c700cb46f59de937e6d9e829ade893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087bffa78cf62b62d3cafbe5a77ed675efccb7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087bffa78cf62b62d3cafbe5a77ed675efccb7e6", "html_url": "https://github.com/rust-lang/rust/commit/087bffa78cf62b62d3cafbe5a77ed675efccb7e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087bffa78cf62b62d3cafbe5a77ed675efccb7e6/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e6b1034be69b68f6a972d15b183badb4cfe888", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e6b1034be69b68f6a972d15b183badb4cfe888", "html_url": "https://github.com/rust-lang/rust/commit/29e6b1034be69b68f6a972d15b183badb4cfe888"}], "stats": {"total": 19, "additions": 1, "deletions": 18}, "files": [{"sha": "4aec70a86e08f83a4245ce8c36088d95a3501d17", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/087bffa78cf62b62d3cafbe5a77ed675efccb7e6/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087bffa78cf62b62d3cafbe5a77ed675efccb7e6/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=087bffa78cf62b62d3cafbe5a77ed675efccb7e6", "patch": "@@ -13,7 +13,7 @@ use mem;\n use ops::{self, Add, Sub};\n use usize;\n \n-use super::{FusedIterator, TrustedLen, Sum};\n+use super::{FusedIterator, TrustedLen};\n \n /// Objects that can be stepped over in both directions.\n ///\n@@ -177,20 +177,6 @@ step_impl_signed!([i64: u64]);\n step_impl_no_between!(u64 i64);\n step_impl_no_between!(u128 i128);\n \n-macro_rules! range_inc_iter_impl {\n-    ($($t:ty)*) => ($(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Iterator for ops::RangeInclusive<$t> {\n-            #[inline]\n-            fn sum<S>(self) -> S where S: Sum<$t> {\n-                let a = self.start;\n-                let b = self.end;\n-                S::sum(super::once((a + b) * (1 + b - a) / 2))\n-            }\n-        }\n-    )*)\n-}\n-\n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -274,9 +260,6 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n }\n \n-// These macros generate specialisations for `Iterator` methods for efficiency purposes.\n-range_inc_iter_impl!(usize u8 u16 u32 u64 isize i8 i16 i32 i64);\n-\n // These macros generate `ExactSizeIterator` impls for various range types.\n // Range<{u,i}64> and RangeInclusive<{u,i}{32,64,size}> are excluded\n // because they cannot guarantee having a length <= usize::MAX, which is"}]}