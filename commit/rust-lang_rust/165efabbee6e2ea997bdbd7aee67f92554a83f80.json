{"sha": "165efabbee6e2ea997bdbd7aee67f92554a83f80", "node_id": "C_kwDOAAsO6NoAKDE2NWVmYWJiZWU2ZTJlYTk5N2JkYmQ3YWVlNjdmOTI1NTRhODNmODA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T19:36:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T19:36:43Z"}, "message": "review comments", "tree": {"sha": "f197efa29e9984d8a2d211b4b28187ebc7d1eed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f197efa29e9984d8a2d211b4b28187ebc7d1eed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165efabbee6e2ea997bdbd7aee67f92554a83f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165efabbee6e2ea997bdbd7aee67f92554a83f80", "html_url": "https://github.com/rust-lang/rust/commit/165efabbee6e2ea997bdbd7aee67f92554a83f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165efabbee6e2ea997bdbd7aee67f92554a83f80/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "html_url": "https://github.com/rust-lang/rust/commit/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4"}], "stats": {"total": 194, "additions": 96, "deletions": 98}, "files": [{"sha": "c9d83746d5454debb5f9e21fb847cc1a3cd863bb", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -34,7 +34,6 @@ infer_source_kind_subdiag_let = {$kind ->\n         [const] the value of the constant\n     } `{$arg_name}` is specified\n     [underscore] , where the placeholders `_` are specified\n-    [anon] , where the placeholder `Type` is specified\n     *[empty] {\"\"}\n }\n "}, {"sha": "858ca6deedcb2852687a691f6fbd3e6bc4ed6d88", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -77,11 +77,9 @@ impl InferenceDiagnosticsData {\n         !(self.name == \"_\" && matches!(self.kind, UnderspecifiedArgKind::Type { .. }))\n     }\n \n-    fn where_x_is_kind(&self, in_type: Ty<'_>, is_collect: bool) -> &'static str {\n-        if is_collect {\n-            \"empty\"\n-        } else if in_type.is_ty_infer() {\n-            \"anon\"\n+    fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n+        if in_type.is_ty_infer() {\n+            \"\"\n         } else if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n             // in the type.\n@@ -185,14 +183,20 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n     printer\n }\n \n-fn ty_to_string<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n+fn ty_to_string<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>, def_id: Option<DefId>) -> String {\n     let printer = fmt_printer(infcx, Namespace::TypeNS);\n     let ty = infcx.resolve_vars_if_possible(ty);\n-    match ty.kind() {\n+    match (ty.kind(), def_id) {\n         // We don't want the regular output for `fn`s because it includes its path in\n         // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n-        ty::FnDef(..) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n-        _ if ty.is_ty_infer() => \"Type\".to_string(),\n+        (ty::FnDef(..), _) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n+        (_, Some(def_id))\n+            if ty.is_ty_infer()\n+                && infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id) =>\n+        {\n+            \"Vec<_>\".to_string()\n+        }\n+        _ if ty.is_ty_infer() => \"/* Type */\".to_string(),\n         // FIXME: The same thing for closures, but this only works when the closure\n         // does not capture anything.\n         //\n@@ -216,15 +220,15 @@ fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n         .map(|args| {\n             args.tuple_fields()\n                 .iter()\n-                .map(|arg| ty_to_string(infcx, arg))\n+                .map(|arg| ty_to_string(infcx, arg, None))\n                 .collect::<Vec<_>>()\n                 .join(\", \")\n         })\n         .unwrap_or_default();\n     let ret = if fn_sig.output().skip_binder().is_unit() {\n         String::new()\n     } else {\n-        format!(\" -> {}\", ty_to_string(infcx, fn_sig.output().skip_binder()))\n+        format!(\" -> {}\", ty_to_string(infcx, fn_sig.output().skip_binder(), None))\n     };\n     format!(\"fn({}){}\", args, ret)\n }\n@@ -410,32 +414,28 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         let mut infer_subdiags = Vec::new();\n         let mut multi_suggestions = Vec::new();\n         match kind {\n-            InferSourceKind::LetBinding { insert_span, pattern_name, ty, is_collect } => {\n+            InferSourceKind::LetBinding { insert_span, pattern_name, ty, def_id } => {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: pattern_name.map(|name| name.to_string()).unwrap_or_else(String::new),\n-                    x_kind: arg_data.where_x_is_kind(ty, is_collect),\n+                    x_kind: arg_data.where_x_is_kind(ty),\n                     prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: if pattern_name.is_some() { \"with_pattern\" } else { \"other\" },\n-                    type_name: if is_collect {\n-                        \"Vec<_>\".to_string()\n-                    } else {\n-                        ty_to_string(self, ty)\n-                    },\n+                    type_name: ty_to_string(self, ty, def_id),\n                 });\n             }\n             InferSourceKind::ClosureArg { insert_span, ty } => {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: String::new(),\n-                    x_kind: arg_data.where_x_is_kind(ty, false),\n+                    x_kind: arg_data.where_x_is_kind(ty),\n                     prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: \"closure\",\n-                    type_name: ty_to_string(self, ty),\n+                    type_name: ty_to_string(self, ty, None),\n                 });\n             }\n             InferSourceKind::GenericArg {\n@@ -534,7 +534,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 ));\n             }\n             InferSourceKind::ClosureReturn { ty, data, should_wrap_expr } => {\n-                let ty_info = ty_to_string(self, ty);\n+                let ty_info = ty_to_string(self, ty, None);\n                 multi_suggestions.push(SourceKindMultiSuggestion::new_closure_return(\n                     ty_info,\n                     data,\n@@ -622,7 +622,7 @@ enum InferSourceKind<'tcx> {\n         insert_span: Span,\n         pattern_name: Option<Ident>,\n         ty: Ty<'tcx>,\n-        is_collect: bool,\n+        def_id: Option<DefId>,\n     },\n     ClosureArg {\n         insert_span: Span,\n@@ -677,7 +677,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n                 if ty.is_closure() {\n                     (\"closure\", closure_as_fn_str(infcx, ty))\n                 } else if !ty.is_ty_infer() {\n-                    (\"normal\", ty_to_string(infcx, ty))\n+                    (\"normal\", ty_to_string(infcx, ty, None))\n                 } else {\n                     (\"other\", String::new())\n                 }\n@@ -807,14 +807,13 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n-        if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id, ..}, .. }) = self.infer_source\n-            && self.infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id)\n-            && let InferSourceKind::LetBinding { ref ty, ref mut is_collect, ..} = new_source.kind\n+        if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id: did, ..}, .. }) = self.infer_source\n+            && let InferSourceKind::LetBinding { ref ty, ref mut def_id, ..} = new_source.kind\n             && ty.is_ty_infer()\n         {\n             // Customize the output so we talk about `let x: Vec<_> = iter.collect();` instead of\n             // `let x: _ = iter.collect();`, as this is a very common case.\n-            *is_collect = true;\n+            *def_id = Some(did);\n         }\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n@@ -1113,7 +1112,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                                 insert_span: local.pat.span.shrink_to_hi(),\n                                 pattern_name: local.pat.simple_ident(),\n                                 ty,\n-                                is_collect: false,\n+                                def_id: None,\n                             },\n                         })\n                     }"}, {"sha": "c2a509a196344b910131329e9e49d6de0971d92b", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let [_, _] = a.into();\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type, where the placeholder `Type` is specified\n+help: consider giving this pattern a type\n    |\n-LL |     let [_, _]: Type = a.into();\n-   |               ++++++\n+LL |     let [_, _]: /* Type */ = a.into();\n+   |               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7a04ed7381e66d198123edeacbee33379f1eb7dc", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     with_closure(|x: u32, y| {});\n    |                           ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |     with_closure(|x: u32, y: Type| {});\n-   |                            ++++++\n+LL |     with_closure(|x: u32, y: /* Type */| {});\n+   |                            ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "9ba24c7a886958ab32b9d2ddfae01774d4438ea0", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -10,10 +10,10 @@ error[E0282]: type annotations needed\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |                              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |     [(); &(&'static: loop { |x: Type| {}; }) as *const _ as usize]\n-   |                               ++++++\n+LL |     [(); &(&'static: loop { |x: /* Type */| {}; }) as *const _ as usize]\n+   |                               ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7491fdc8a693e413a79937c04443cdad93df9995", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let _ = foo([0; 1]);\n    |         ^\n    |\n-help: consider giving this pattern a type, where the placeholder `Type` is specified\n+help: consider giving this pattern a type\n    |\n-LL |     let _: Type = foo([0; 1]);\n-   |          ++++++\n+LL |     let _: /* Type */ = foo([0; 1]);\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7592418fdfd62f412eeef998debec2ea78919c30", "filename": "src/test/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -18,10 +18,10 @@ error[E0282]: type annotations needed\n LL |         |_| true\n    |          ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |_: Type| true\n-   |           ++++++\n+LL |         |_: /* Type */| true\n+   |           ++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8eda71ec09bd3bf1410fb293eb00232808ea7508", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -30,10 +30,10 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |     |x: Type| String::from(\"x\".as_ref());\n-   |       ++++++\n+LL |     |x: /* Type */| String::from(\"x\".as_ref());\n+   |       ++++++++++++\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26"}, {"sha": "5e0589eed435d0240aefb3f4eddf4f34506f326e", "filename": "src/test/ui/issues/issue-18159.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let x;\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let x: Type;\n-   |          ++++++\n+LL |     let x: /* Type */;\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c75038b6169c0a227995a7c9de27ff581ca6d42a", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -6,10 +6,10 @@ LL |     let x = panic!();\n LL |     x.clone();\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let x: Type = panic!();\n-   |          ++++++\n+LL |     let x: /* Type */ = panic!();\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0e73a51faed9ac8bf07d4e299f465ab11f114fa3", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -17,10 +17,10 @@ error[E0282]: type annotations needed\n LL |         1 => |c| c + 1,\n    |               ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         1 => |c: Type| c + 1,\n-   |                ++++++\n+LL |         1 => |c: /* Type */| c + 1,\n+   |                ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe2631f9474205a617c9398f0cfb5709aa8875f4", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,43 +4,43 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: Type| s.len()\n-   |           ++++++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:15:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: Type| s.len()\n-   |           ++++++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:23:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: Type| s.len()\n-   |           ++++++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:30:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: Type| s.len()\n-   |           ++++++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e3b501b2fd558c42ad720ba709aac0abf2d327d1", "filename": "src/test/ui/match/match-unresolved-one-arm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let x = match () {\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let x: Type = match () {\n-   |          ++++++\n+LL |     let x: /* Type */ = match () {\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "da369d33397fc0c5df6f2b6739a727b920d9e86c", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -7,10 +7,10 @@ LL |     let x;\n LL |         (..) => {}\n    |         ---- type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let x: Type;\n-   |          ++++++\n+LL |     let x: /* Type */;\n+   |          ++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-bad-type.rs:10:9"}, {"sha": "beba7def96f5236034d546819979f3e0f4b7eb17", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -191,10 +191,10 @@ error[E0282]: type annotations needed\n LL |     let x @ ..;\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type, where the placeholder `Type` is specified\n+help: consider giving this pattern a type\n    |\n-LL |     let x @ ..: Type;\n-   |               ++++++\n+LL |     let x @ ..: /* Type */;\n+   |               ++++++++++++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "42b43f825d10c28711b7f3f450da977f855124fe", "filename": "src/test/ui/resolve/issue-85348.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -19,10 +19,10 @@ error[E0282]: type annotations needed\n LL |         let mut N;\n    |             ^^^^^\n    |\n-help: consider giving `N` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `N` an explicit type\n    |\n-LL |         let mut N: Type;\n-   |                  ++++++\n+LL |         let mut N: /* Type */;\n+   |                  ++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f6efbe40bc23457047427cfc5a90cb9af723d3f6", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -7,10 +7,10 @@ LL |\n LL |     x.0;\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let mut x: Type = Default::default();\n-   |              ++++++\n+LL |     let mut x: /* Type */ = Default::default();\n+   |              ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/method-and-field-eager-resolution.rs:11:9\n@@ -21,10 +21,10 @@ LL |\n LL |     x[0];\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n+help: consider giving `x` an explicit type\n    |\n-LL |     let mut x: Type = Default::default();\n-   |              ++++++\n+LL |     let mut x: /* Type */ = Default::default();\n+   |              ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9cc15f14a991d5516050b277133921024cfbd0cd", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -4,21 +4,21 @@ error[E0282]: type annotations needed\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |x: Type| x.len()\n-   |           ++++++\n+LL |         |x: /* Type */| x.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n    |\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |         |x: Type| x.len()\n-   |           ++++++\n+LL |         |x: /* Type */| x.len()\n+   |           ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5e29aabf374b03d7609c70f75b12fd2dd40322c", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -10,10 +10,10 @@ error[E0282]: type annotations needed\n LL |     let x = |_| {};\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |     let x = |_: Type| {};\n-   |               ++++++\n+LL |     let x = |_: /* Type */| {};\n+   |               ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/unknown_type_for_closure.rs:10:14"}, {"sha": "1aed1dbe4babd21662ce83308a7bcdc0f1e66983", "filename": "src/test/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165efabbee6e2ea997bdbd7aee67f92554a83f80/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=165efabbee6e2ea997bdbd7aee67f92554a83f80", "patch": "@@ -28,10 +28,10 @@ error[E0282]: type annotations needed\n LL |     let _ = |a, b: _| -> _ { 0 };\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n+help: consider giving this closure parameter an explicit type\n    |\n-LL |     let _ = |a: Type, b: _| -> _ { 0 };\n-   |               ++++++\n+LL |     let _ = |a: /* Type */, b: _| -> _ { 0 };\n+   |               ++++++++++++\n \n error: aborting due to 5 previous errors\n "}]}