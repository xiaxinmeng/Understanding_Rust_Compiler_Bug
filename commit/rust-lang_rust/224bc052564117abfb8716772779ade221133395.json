{"sha": "224bc052564117abfb8716772779ade221133395", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNGJjMDUyNTY0MTE3YWJmYjg3MTY3NzI3NzlhZGUyMjExMzMzOTU=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-26T20:05:39Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-26T20:30:36Z"}, "message": "Fix allow_internal_unstable with rustc_const_unstable", "tree": {"sha": "76999eb5dc5de178bac4a2f8dfad137b5b8e8bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76999eb5dc5de178bac4a2f8dfad137b5b8e8bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/224bc052564117abfb8716772779ade221133395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/224bc052564117abfb8716772779ade221133395", "html_url": "https://github.com/rust-lang/rust/commit/224bc052564117abfb8716772779ade221133395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/224bc052564117abfb8716772779ade221133395/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50fc24d8a172a853b5dfe40702d6550e3b8562ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/50fc24d8a172a853b5dfe40702d6550e3b8562ba", "html_url": "https://github.com/rust-lang/rust/commit/50fc24d8a172a853b5dfe40702d6550e3b8562ba"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "80257260f01837cc002d77a3f121658fb589193f", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/224bc052564117abfb8716772779ade221133395/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224bc052564117abfb8716772779ade221133395/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=224bc052564117abfb8716772779ade221133395", "patch": "@@ -548,9 +548,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 if is_lang_panic_fn(self.tcx, def_id) {\n                     self.check_op(ops::Panic);\n                 } else if let Some(feature) = is_unstable_const_fn(self.tcx, def_id) {\n-                    // Exempt unstable const fns inside of macros with\n+                    // Exempt unstable const fns inside of macros or functions with\n                     // `#[allow_internal_unstable]`.\n-                    if !self.span.allows_unstable(feature) {\n+                    use crate::transform::qualify_min_const_fn::feature_allowed;\n+                    if !self.span.allows_unstable(feature)\n+                        && !feature_allowed(self.tcx, self.def_id, feature)\n+                    {\n                         self.check_op(ops::FnCallUnstable(def_id, feature));\n                     }\n                 } else {"}, {"sha": "6f252ad4ed535fdd9171ed50141d5b123fddebe0", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/224bc052564117abfb8716772779ade221133395/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224bc052564117abfb8716772779ade221133395/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=224bc052564117abfb8716772779ade221133395", "patch": "@@ -315,7 +315,7 @@ fn check_place(\n }\n \n /// Returns `true` if the given feature gate is allowed within the function with the given `DefId`.\n-fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+pub fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n     // All features require that the corresponding gate be enabled,\n     // even if the function has `#[allow_internal_unstable(the_gate)]`.\n     if !tcx.features().enabled(feature_gate) {\n@@ -377,8 +377,16 @@ fn check_terminator(\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n-            if let ty::FnDef(def_id, _) = fn_ty.kind {\n-                if !crate::const_eval::is_min_const_fn(tcx, def_id) {\n+            if let ty::FnDef(fn_def_id, _) = fn_ty.kind {\n+                // Allow unstable const if we opt in by using #[allow_internal_unstable]\n+                // on function or macro declaration.\n+                if !crate::const_eval::is_min_const_fn(tcx, fn_def_id)\n+                    && !crate::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n+                        .map(|feature| {\n+                            span.allows_unstable(feature) || feature_allowed(tcx, def_id, feature)\n+                        })\n+                        .unwrap_or(false)\n+                {\n                     return Err((\n                         span,\n                         format!(\n@@ -390,10 +398,10 @@ fn check_terminator(\n                     ));\n                 }\n \n-                check_operand(tcx, func, span, def_id, body)?;\n+                check_operand(tcx, func, span, fn_def_id, body)?;\n \n                 for arg in args {\n-                    check_operand(tcx, arg, span, def_id, body)?;\n+                    check_operand(tcx, arg, span, fn_def_id, body)?;\n                 }\n                 Ok(())\n             } else {"}]}