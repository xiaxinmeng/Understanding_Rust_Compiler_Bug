{"sha": "3c0fb7f36d872184b67884838b967d0b57dbf3a2", "node_id": "C_kwDOAAsO6NoAKDNjMGZiN2YzNmQ4NzIxODRiNjc4ODQ4MzhiOTY3ZDBiNTdkYmYzYTI", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-12T01:00:07Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-17T17:34:19Z"}, "message": "Add manifest docs fallback.", "tree": {"sha": "a50ec452ef5a513ad241c91834117572fad77562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50ec452ef5a513ad241c91834117572fad77562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0fb7f36d872184b67884838b967d0b57dbf3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0fb7f36d872184b67884838b967d0b57dbf3a2", "html_url": "https://github.com/rust-lang/rust/commit/3c0fb7f36d872184b67884838b967d0b57dbf3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0fb7f36d872184b67884838b967d0b57dbf3a2/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34c0797528172ede89480e3033f7a5e71ea4735", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34c0797528172ede89480e3033f7a5e71ea4735", "html_url": "https://github.com/rust-lang/rust/commit/a34c0797528172ede89480e3033f7a5e71ea4735"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "d3bce6b3e8df55a2e68b292ef6020c44c369b02b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3c0fb7f36d872184b67884838b967d0b57dbf3a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0fb7f36d872184b67884838b967d0b57dbf3a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=3c0fb7f36d872184b67884838b967d0b57dbf3a2", "patch": "@@ -155,17 +155,19 @@ static TARGETS: &[&str] = &[\n     \"x86_64-unknown-hermit\",\n ];\n \n-static DOCS_TARGETS: &[&str] = &[\n-    \"aarch64-unknown-linux-gnu\",\n-    \"i686-apple-darwin\",\n-    \"i686-pc-windows-gnu\",\n-    \"i686-pc-windows-msvc\",\n-    \"i686-unknown-linux-gnu\",\n-    \"x86_64-apple-darwin\",\n-    \"x86_64-pc-windows-gnu\",\n-    \"x86_64-pc-windows-msvc\",\n-    \"x86_64-unknown-linux-gnu\",\n-    \"x86_64-unknown-linux-musl\",\n+/// This allows the manifest to contain rust-docs for hosts that don't build\n+/// docs.\n+///\n+/// Tuples of `(host_partial, host_instead)`. If the host does not have the\n+/// rust-docs component available, then if the host name contains\n+/// `host_partial`, it will use the docs from `host_instead` instead.\n+///\n+/// The order here matters, more specific entries should be first.\n+static DOCS_FALLBACK: &[(&str, &str)] = &[\n+    (\"-apple-\", \"x86_64-apple-darwin\"),\n+    (\"aarch64\", \"aarch64-unknown-linux-gnu\"),\n+    (\"arm-\", \"aarch64-unknown-linux-gnu\"),\n+    (\"\", \"x86_64-unknown-linux-gnu\"),\n ];\n \n static MSI_INSTALLERS: &[&str] = &[\n@@ -301,23 +303,27 @@ impl Builder {\n     }\n \n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n-        let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n-        package(\"rustc\", HOSTS);\n-        package(\"rustc-dev\", HOSTS);\n-        package(\"reproducible-artifacts\", HOSTS);\n-        package(\"rustc-docs\", HOSTS);\n-        package(\"cargo\", HOSTS);\n-        package(\"rust-mingw\", MINGW);\n-        package(\"rust-std\", TARGETS);\n-        package(\"rust-docs\", DOCS_TARGETS);\n-        package(\"rust-src\", &[\"*\"]);\n-        package(\"rls-preview\", HOSTS);\n-        package(\"rust-analyzer-preview\", HOSTS);\n-        package(\"clippy-preview\", HOSTS);\n-        package(\"miri-preview\", HOSTS);\n-        package(\"rustfmt-preview\", HOSTS);\n-        package(\"rust-analysis\", TARGETS);\n-        package(\"llvm-tools-preview\", TARGETS);\n+        macro_rules! package {\n+            ($name:expr, $targets:expr) => {\n+                self.package($name, &mut manifest.pkg, $targets, &[])\n+            };\n+        }\n+        package!(\"rustc\", HOSTS);\n+        package!(\"rustc-dev\", HOSTS);\n+        package!(\"reproducible-artifacts\", HOSTS);\n+        package!(\"rustc-docs\", HOSTS);\n+        package!(\"cargo\", HOSTS);\n+        package!(\"rust-mingw\", MINGW);\n+        package!(\"rust-std\", TARGETS);\n+        self.package(\"rust-docs\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n+        package!(\"rust-src\", &[\"*\"]);\n+        package!(\"rls-preview\", HOSTS);\n+        package!(\"rust-analyzer-preview\", HOSTS);\n+        package!(\"clippy-preview\", HOSTS);\n+        package!(\"miri-preview\", HOSTS);\n+        package!(\"rustfmt-preview\", HOSTS);\n+        package!(\"rust-analysis\", TARGETS);\n+        package!(\"llvm-tools-preview\", TARGETS);\n     }\n \n     fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n@@ -500,7 +506,13 @@ impl Builder {\n             .extend(pkgs.iter().map(|s| (*s).to_owned()));\n     }\n \n-    fn package(&mut self, pkgname: &str, dst: &mut BTreeMap<String, Package>, targets: &[&str]) {\n+    fn package(\n+        &mut self,\n+        pkgname: &str,\n+        dst: &mut BTreeMap<String, Package>,\n+        targets: &[&str],\n+        fallback: &[(&str, &str)],\n+    ) {\n         let version_info = self\n             .versions\n             .version(&PkgType::from_component(pkgname))\n@@ -512,16 +524,29 @@ impl Builder {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n+        macro_rules! tarball_name {\n+            ($target_name:expr) => {\n+                self.versions.tarball_name(&PkgType::from_component(pkgname), $target_name).unwrap()\n+            };\n+        }\n+        let mut target_from_compressed_tar = |target_name| {\n+            let target = Target::from_compressed_tar(self, &tarball_name!(target_name));\n+            if target.available {\n+                return target;\n+            }\n+            for (substr, fallback_target) in fallback {\n+                if target_name.contains(substr) {\n+                    return Target::from_compressed_tar(self, &tarball_name!(fallback_target));\n+                }\n+            }\n+            Target::unavailable()\n+        };\n+\n         let targets = targets\n             .iter()\n             .map(|name| {\n                 let target = if is_present {\n-                    let filename = self\n-                        .versions\n-                        .tarball_name(&PkgType::from_component(pkgname), name)\n-                        .unwrap();\n-\n-                    Target::from_compressed_tar(self, &filename)\n+                    target_from_compressed_tar(name)\n                 } else {\n                     // If the component is not present for this build add it anyway but mark it as\n                     // unavailable -- this way rustup won't allow upgrades without --force"}, {"sha": "95c2297de264b7d76cb868b88f631b99fe4823a4", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c0fb7f36d872184b67884838b967d0b57dbf3a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0fb7f36d872184b67884838b967d0b57dbf3a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=3c0fb7f36d872184b67884838b967d0b57dbf3a2", "patch": "@@ -169,7 +169,7 @@ impl Versions {\n     }\n \n     pub(crate) fn archive_name(\n-        &mut self,\n+        &self,\n         package: &PkgType,\n         target: &str,\n         extension: &str,\n@@ -189,11 +189,7 @@ impl Versions {\n         }\n     }\n \n-    pub(crate) fn tarball_name(\n-        &mut self,\n-        package: &PkgType,\n-        target: &str,\n-    ) -> Result<String, Error> {\n+    pub(crate) fn tarball_name(&self, package: &PkgType, target: &str) -> Result<String, Error> {\n         self.archive_name(package, target, \"tar.gz\")\n     }\n "}]}