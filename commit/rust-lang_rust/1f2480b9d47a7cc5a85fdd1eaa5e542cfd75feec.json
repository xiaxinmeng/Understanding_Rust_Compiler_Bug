{"sha": "1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjQ4MGI5ZDQ3YTdjYzVhODVmZGQxZWFhNWU1NDJjZmQ3NWZlZWM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-15T18:10:25Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-15T18:10:25Z"}, "message": "Document IPv4-mapped and IPv4-compatible addresses.", "tree": {"sha": "18048c0e52d676a45af4e3d3a5a90b8442e09ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18048c0e52d676a45af4e3d3a5a90b8442e09ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "html_url": "https://github.com/rust-lang/rust/commit/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8381389ee10e3c0505ccb5bac05382de1b9f99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8381389ee10e3c0505ccb5bac05382de1b9f99d", "html_url": "https://github.com/rust-lang/rust/commit/c8381389ee10e3c0505ccb5bac05382de1b9f99d"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "2dfdf37a4b400143ed912203e3acd4c3e06c9331", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "patch": "@@ -84,13 +84,59 @@ pub struct Ipv4Addr {\n /// IPv6 addresses are defined as 128-bit integers in [IETF RFC 4291].\n /// They are usually represented as eight 16-bit segments.\n ///\n-/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n-///\n /// The size of an `Ipv6Addr` struct may vary depending on the target operating\n /// system.\n ///\n /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n ///\n+/// # Embedding IPv4 Addresses\n+///\n+/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n+///\n+/// To assist in the transition from IPv4 to IPv6 two types of IPv6 addresses that embed an IPv4 address were defined:\n+/// IPv4-compatible and IPv4-mapped addresses. Of these IPv4-compatible addresses have been officially deprecated.\n+///\n+/// Both types of addresses are not assigned any special meaning by this implementation,\n+/// other than what the relevant standards prescribe. This means that an address like `::ffff:127.0.0.1`,\n+/// while representing an IPv4 loopback address, is not itself an IPv6 loopback address; only `::1` is.\n+/// To handle these so called \"IPv4-in-IPv6\" addresses, they have to first be converted to their canonical IPv4 address.\n+///\n+/// ### IPv4-Compatible IPv6 Addresses\n+///\n+/// IPv4-compatible IPv6 addresses are defined in [IETF RFC 4291 Section 2.5.5.1], and have been officially deprecated.\n+/// The RFC describes the format of an \"IPv4-Compatible IPv6 address\" as follows:\n+///\n+/// ```text\n+/// |                80 bits               | 16 |      32 bits        |\n+/// +--------------------------------------+--------------------------+\n+/// |0000..............................0000|0000|    IPv4 address     |\n+/// +--------------------------------------+----+---------------------+\n+/// ```\n+/// So `::a.b.c.d` would be an IPv4-compatible IPv6 address representing the IPv4 address `a.b.c.d`.\n+///\n+/// To convert from an IPv4 address to an IPv4-compatible IPv6 address, use [`Ipv4Addr::to_ipv6_compatible`].\n+/// Use [`Ipv6Addr::to_ipv4`] to convert an IPv4-compatible IPv6 address to the canonical IPv4 address.\n+///\n+/// [IETF RFC 4291 Section 2.5.5.1]: https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.1\n+///\n+/// ### IPv4-Mapped IPv6 Addresses\n+///\n+/// IPv4-mapped IPv6 addresses are defined in [IETF RFC 4291 Section 2.5.5.2].\n+/// The RFC describes the format of an \"IPv4-Mapped IPv6 address\" as follows:\n+///\n+/// ```text\n+/// |                80 bits               | 16 |      32 bits        |\n+/// +--------------------------------------+--------------------------+\n+/// |0000..............................0000|FFFF|    IPv4 address     |\n+/// +--------------------------------------+----+---------------------+\n+/// ```\n+/// So `::ffff:a.b.c.d` would be an IPv4-mapped IPv6 address representing the IPv4 address `a.b.c.d`.\n+///\n+/// To convert from an IPv4 address to an IPv4-mapped IPv6 address, use [`Ipv4Addr::to_ipv6_mapped`].\n+/// Use [`Ipv6Addr::to_ipv4`] to convert an IPv4-mapped IPv6 address to the canonical IPv4 address.\n+///\n+/// [IETF RFC 4291 Section 2.5.5.2]: https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.2\n+///\n /// # Textual representation\n ///\n /// `Ipv6Addr` provides a [`FromStr`] implementation. There are many ways to represent\n@@ -758,13 +804,14 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-compatible [`IPv6` address].\n+    /// Converts this address to an [IPv4-compatible] [`IPv6` address].\n     ///\n     /// `a.b.c.d` becomes `::a.b.c.d`\n     ///\n-    /// This isn't typically the method you want; these addresses don't typically\n-    /// function on modern systems. Use `to_ipv6_mapped` instead.\n+    /// Note that IPv4-compatible addresses have been officially deprecated.\n+    /// If you don't explicitly need an IPv4-compatible address for legacy reasons, consider using `to_ipv6_mapped` instead.\n     ///\n+    /// [IPv4-compatible]: Ipv6Addr#ipv4-compatible-ipv6-addresses\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n@@ -787,10 +834,11 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-mapped [`IPv6` address].\n+    /// Converts this address to an [IPv4-mapped] [`IPv6` address].\n     ///\n     /// `a.b.c.d` becomes `::ffff:a.b.c.d`\n     ///\n+    /// [IPv4-mapped]: Ipv6Addr#ipv4-mapped-ipv6-addresses\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n@@ -1193,11 +1241,13 @@ impl Ipv6Addr {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n     }\n \n-    /// Returns [`true`] if this is a loopback address (::1).\n+    /// Returns [`true`] if this is the [loopback address] (`::1`),\n+    /// as defined in [IETF RFC 4291 section 2.5.3].\n     ///\n-    /// This property is defined in [IETF RFC 4291].\n+    /// Contrary to IPv4, in IPv6 there is only one loopback address.\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [loopback address]: Ipv6Addr::LOCALHOST\n+    /// [IETF RFC 4291 section 2.5.3]: https://tools.ietf.org/html/rfc4291#section-2.5.3\n     ///\n     /// # Examples\n     ///\n@@ -1509,13 +1559,14 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n-    /// Converts this address to an [`IPv4` address] if it's an \"IPv4-mapped IPv6 address\"\n-    /// defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n+    /// Converts this address to an [`IPv4` address] if it's an [IPv4-mapped] address,\n+    /// as defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n     ///\n     /// `::ffff:a.b.c.d` becomes `a.b.c.d`.\n     /// All addresses *not* starting with `::ffff` will return `None`.\n     ///\n     /// [`IPv4` address]: Ipv4Addr\n+    /// [IPv4-mapped]: Ipv6Addr\n     /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n     ///\n     /// # Examples\n@@ -1542,12 +1593,19 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Converts this address to an [`IPv4` address]. Returns [`None`] if this address is\n-    /// neither IPv4-compatible or IPv4-mapped.\n+    /// Converts this address to an [`IPv4` address] if it is either\n+    /// an [IPv4-compatible] address as defined in [IETF RFC 4291 section 2.5.5.1],\n+    /// or an [IPv4-mapped] address as defined in [IETF RFC 4291 section 2.5.5.2],\n+    /// otherwise returns [`None`].\n     ///\n     /// `::a.b.c.d` and `::ffff:a.b.c.d` become `a.b.c.d`\n+    /// All addresses *not* starting with either all zeroes or `::ffff` will return `None`.\n     ///\n-    /// [`IPv4` address]: Ipv4Addr\n+    /// [IPv4 address]: Ipv4Addr\n+    /// [IPv4-compatible]: Ipv6Addr#ipv4-compatible-ipv6-addresses\n+    /// [IPv4-mapped]: Ipv6Addr#ipv4-mapped-ipv6-addresses\n+    /// [IETF RFC 4291 section 2.5.5.1]: https://tools.ietf.org/html/rfc4291#section-2.5.5.1\n+    /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n     ///\n     /// # Examples\n     ///"}]}