{"sha": "6bc35f77cec4947dd9cb38e34dc6354745645d82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzM1Zjc3Y2VjNDk0N2RkOWNiMzhlMzRkYzYzNTQ3NDU2NDVkODI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-07T08:38:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-05-07T08:38:13Z"}, "message": "Fix allocator api and temporarily disable validation_op", "tree": {"sha": "a105f9c526ba24f01833b0969c5db153d401bd66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a105f9c526ba24f01833b0969c5db153d401bd66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc35f77cec4947dd9cb38e34dc6354745645d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc35f77cec4947dd9cb38e34dc6354745645d82", "html_url": "https://github.com/rust-lang/rust/commit/6bc35f77cec4947dd9cb38e34dc6354745645d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc35f77cec4947dd9cb38e34dc6354745645d82/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a", "html_url": "https://github.com/rust-lang/rust/commit/3d8c7a8dba7cab5d2d222cc08eaac648d6529b6a"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "c862238e889c16543d167041c1b7efe824b5cc09", "filename": "miri/fn_call.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6bc35f77cec4947dd9cb38e34dc6354745645d82/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc35f77cec4947dd9cb38e34dc6354745645d82/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=6bc35f77cec4947dd9cb38e34dc6354745645d82", "patch": "@@ -627,7 +627,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n         match &path[..] {\n             // Allocators are magic.  They have no MIR, even when the rest of libstd does.\n-            \"alloc::heap::::__rust_alloc\" => {\n+            \"alloc::alloc::::__rust_alloc\" => {\n                 let size = self.value_to_primval(args[0])?.to_u64()?;\n                 let align = self.value_to_primval(args[1])?.to_u64()?;\n                 if size == 0 {\n@@ -641,7 +641,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                                                Some(MemoryKind::Rust.into()))?;\n                 self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n             }\n-            \"alloc::heap::::__rust_alloc_zeroed\" => {\n+            \"alloc::alloc::::__rust_alloc_zeroed\" => {\n                 let size = self.value_to_primval(args[0])?.to_u64()?;\n                 let align = self.value_to_primval(args[1])?.to_u64()?;\n                 if size == 0 {\n@@ -656,7 +656,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 self.memory.write_repeat(ptr.into(), 0, size)?;\n                 self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n             }\n-            \"alloc::heap::::__rust_dealloc\" => {\n+            \"alloc::alloc::::__rust_dealloc\" => {\n                 let ptr = self.into_ptr(args[0].value)?.to_ptr()?;\n                 let old_size = self.value_to_primval(args[1])?.to_u64()?;\n                 let align = self.value_to_primval(args[2])?.to_u64()?;\n@@ -672,27 +672,23 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     MemoryKind::Rust.into(),\n                 )?;\n             }\n-            \"alloc::heap::::__rust_realloc\" => {\n+            \"alloc::alloc::::__rust_realloc\" => {\n                 let ptr = self.into_ptr(args[0].value)?.to_ptr()?;\n                 let old_size = self.value_to_primval(args[1])?.to_u64()?;\n-                let old_align = self.value_to_primval(args[2])?.to_u64()?;\n+                let align = self.value_to_primval(args[2])?.to_u64()?;\n                 let new_size = self.value_to_primval(args[3])?.to_u64()?;\n-                let new_align = self.value_to_primval(args[4])?.to_u64()?;\n                 if old_size == 0 || new_size == 0 {\n                     return err!(HeapAllocZeroBytes);\n                 }\n-                if !old_align.is_power_of_two() {\n-                    return err!(HeapAllocNonPowerOfTwoAlignment(old_align));\n-                }\n-                if !new_align.is_power_of_two() {\n-                    return err!(HeapAllocNonPowerOfTwoAlignment(new_align));\n+                if !align.is_power_of_two() {\n+                    return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n                 let new_ptr = self.memory.reallocate(\n                     ptr,\n                     old_size,\n-                    Align::from_bytes(old_align, old_align).unwrap(),\n+                    Align::from_bytes(align, align).unwrap(),\n                     new_size,\n-                    Align::from_bytes(new_align, new_align).unwrap(),\n+                    Align::from_bytes(align, align).unwrap(),\n                     MemoryKind::Rust.into(),\n                 )?;\n                 self.write_primval(dest, PrimVal::Ptr(new_ptr), dest_ty)?;"}, {"sha": "ca479e765ce5a27d2d8634d5a689629f9c12ff42", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc35f77cec4947dd9cb38e34dc6354745645d82/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc35f77cec4947dd9cb38e34dc6354745645d82/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=6bc35f77cec4947dd9cb38e34dc6354745645d82", "patch": "@@ -448,6 +448,8 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         op: ::rustc::mir::ValidationOp,\n         operand: &::rustc::mir::ValidationOperand<'tcx, ::rustc::mir::Place<'tcx>>,\n     ) -> EvalResult<'tcx> {\n-        ecx.validation_op(op, operand)\n+        // FIXME: prevent this from ICEing\n+        //ecx.validation_op(op, operand)\n+        Ok(())\n     }\n }"}]}