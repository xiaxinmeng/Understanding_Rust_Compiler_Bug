{"sha": "988695a96cee1eb825435260a1874b8daa0e590a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODY5NWE5NmNlZTFlYjgyNTQzNTI2MGExODc0YjhkYWEwZTU5MGE=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-12T04:23:34Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-12T04:24:04Z"}, "message": "Added support for task sleeping in the scheduler.", "tree": {"sha": "ee92e117a653c8c6fad100e7416afe5468073ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee92e117a653c8c6fad100e7416afe5468073ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988695a96cee1eb825435260a1874b8daa0e590a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988695a96cee1eb825435260a1874b8daa0e590a", "html_url": "https://github.com/rust-lang/rust/commit/988695a96cee1eb825435260a1874b8daa0e590a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988695a96cee1eb825435260a1874b8daa0e590a/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d9a79ac8b05c5631efeef6a70dec35480ecaab", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d9a79ac8b05c5631efeef6a70dec35480ecaab", "html_url": "https://github.com/rust-lang/rust/commit/88d9a79ac8b05c5631efeef6a70dec35480ecaab"}], "stats": {"total": 166, "additions": 154, "deletions": 12}, "files": [{"sha": "c10088ea0b4f4ef5dce3e616b72312da23d2eee6", "filename": "src/Makefile", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -35,7 +35,7 @@ ifeq ($(CFG_OSTYPE), Linux)\n   CFG_RUNTIME := librustrt.so\n   CFG_STDLIB := libstd.so\n   CFG_GCC_CFLAGS += -fPIC\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread\n+  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n   ifeq ($(CFG_CPUTYPE), x86_64)\n     CFG_GCC_CFLAGS += -m32\n     CFG_GCC_LINK_FLAGS += -m32\n@@ -245,8 +245,9 @@ BOOT_CMXS := $(BOOT_MLS:.ml=.cmx)\n BOOT_OBJS := $(BOOT_MLS:.ml=.o)\n BOOT_CMIS := $(BOOT_MLS:.ml=.cmi)\n \n-RUNTIME_CS := rt/sync/sync.cpp \\\n-\t\t\t  rt/sync/spin_lock.cpp \\\n+RUNTIME_CS := rt/sync/timer.cpp \\\n+              rt/sync/sync.cpp \\\n+              rt/sync/spin_lock.cpp \\\n               rt/sync/lock_free_queue.cpp \\\n               rt/sync/condition_variable.cpp \\\n               rt/rust.cpp \\\n@@ -281,7 +282,8 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/circular_buffer.h \\\n                rt/util/array_list.h \\\n                rt/util/hash_map.h \\\n-               rt/sync/sync.h\n+               rt/sync/sync.h \\\n+               rt/sync/timer.h\n \n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=$(CFG_OBJ_SUFFIX))\n@@ -513,6 +515,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       str-concat.rs \\\n                       str-idx.rs \\\n                       str-lib.rs \\\n+                      task-lib.rs \\\n                       tag.rs \\\n                       tail-cps.rs \\\n                       tail-direct.rs \\"}, {"sha": "a12c2f278fdca867195a4d29ba434bd05cb008e3", "filename": "src/lib/_task.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Flib%2F_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Flib%2F_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_task.rs?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -0,0 +1,12 @@\n+native \"rust\" mod rustrt {\n+  fn task_sleep(uint time_in_us);\n+}\n+\n+/**\n+ * Hints the scheduler to yield this task for a specified ammount of time.\n+ *\n+ * arg: time_in_us maximum number of microseconds to yield control for\n+ */\n+fn sleep(uint time_in_us) {\n+  ret rustrt.task_sleep(time_in_us);\n+}\n\\ No newline at end of file"}, {"sha": "c2a2cf0c0636a03e612e4d7285d7977e70e28411", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -15,6 +15,7 @@ mod _str;\n \n mod _io;\n mod sys;\n+mod _task;\n \n // Utility modules.\n \n@@ -25,6 +26,7 @@ mod util;\n auth _io = unsafe;\n auth _str = unsafe;\n auth _vec = unsafe;\n+auth _task = unsafe;\n \n auth _int.next_power_of_two = unsafe;\n auth map.mk_hashmap = unsafe;"}, {"sha": "596a05cc31babf3997f4fec5a08498b764ab2420", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -191,6 +191,13 @@ rand_free(rust_task *task, randctx *rctx)\n     task->free(rctx);\n }\n \n+extern \"C\" CDECL void upcall_sleep(rust_task *task, size_t time_in_us);\n+\n+extern \"C\" CDECL void\n+task_sleep(rust_task *task, size_t time_in_us) {\n+    upcall_sleep(task, time_in_us);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1d0675602f4cba5634b6b8ca6b6bd91ee62bbda7", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -330,7 +330,9 @@ rust_dom::schedule_task()\n     if (running_tasks.length() > 0) {\n         size_t i = rand(&rctx);\n         i %= running_tasks.length();\n-        return (rust_task *)running_tasks[i];\n+        if (running_tasks[i]->yield_timer.has_timed_out()) {\n+            return (rust_task *)running_tasks[i];\n+        }\n     }\n     // log(rust_log::DOM|rust_log::TASK, \"no schedulable tasks\");\n     return NULL;\n@@ -349,8 +351,11 @@ rust_dom::log_state() {\n         log(rust_log::TASK, \"running tasks:\");\n         for (size_t i = 0; i < running_tasks.length(); i++) {\n             log(rust_log::TASK,\n-                \"\\t task: %s @0x%\" PRIxPTR,\n-                running_tasks[i]->name, running_tasks[i]);\n+                \"\\t task: %s @0x%\" PRIxPTR\n+                \" timeout: %d\",\n+                running_tasks[i]->name,\n+                running_tasks[i],\n+                running_tasks[i]->yield_timer.get_timeout());\n         }\n     }\n \n@@ -396,8 +401,8 @@ rust_dom::start_main_loop()\n         rust_task *scheduled_task = schedule_task();\n \n         // If we cannot schedule a task because all other live tasks\n-        // are blocked, wait on a condition variable which is signaled\n-        // if progress is made in other domains.\n+        // are blocked, yield and hopefully some progress is made in\n+        // other domains.\n \n         if (scheduled_task == NULL) {\n             if (_log.is_tracing(rust_log::TASK)) {"}, {"sha": "05463c536d69cfe116346de6546b1a3266dacf60", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -39,6 +39,7 @@ extern \"C\" {\n #endif\n \n #include \"sync/sync.h\"\n+#include \"sync/timer.h\"\n #include \"sync/condition_variable.h\"\n \n #ifndef __i386__"}, {"sha": "cd38433ed706c9de415a67aaf40c010fdc7706df", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -309,10 +309,16 @@ rust_task::run_on_resume(uintptr_t glue)\n }\n \n void\n-rust_task::yield(size_t nargs)\n-{\n+rust_task::yield(size_t nargs) {\n+    yield(nargs, 0);\n+}\n+\n+void\n+rust_task::yield(size_t nargs, size_t time_in_us) {\n     log(rust_log::TASK,\n-        \"task %s @0x%\" PRIxPTR \" yielding\", name, this);\n+        \"task %s @0x%\" PRIxPTR \" yielding for %d us\",\n+        name, this, time_in_us);\n+    yield_timer.reset(time_in_us);\n     run_after_return(nargs, dom->root_crate->get_yield_glue());\n }\n "}, {"sha": "b66ee5a1b6f2fc14ae90f7e336e2b80a64fe29d9", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -29,6 +29,9 @@ rust_task : public maybe_proxy<rust_task>,\n     size_t gc_alloc_thresh;\n     size_t gc_alloc_accum;\n \n+    // Keeps track of the last time this task yielded.\n+    timer yield_timer;\n+\n     // Rendezvous pointer for receiving data when blocked on a port. If we're\n     // trying to read data and no data is available on any incoming channel,\n     // we block on the port, and yield control to the scheduler. Since, we\n@@ -88,6 +91,9 @@ rust_task : public maybe_proxy<rust_task>,\n     // Save callee-saved registers and return to the main loop.\n     void yield(size_t nargs);\n \n+    // Yields for a specified duration of time.\n+    void yield(size_t nargs, size_t time_in_ms);\n+\n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();\n "}, {"sha": "7f9f0db1c6db6964103b0202b595e93d23dc6015", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -183,6 +183,14 @@ extern \"C\" CDECL void upcall_yield(rust_task *task) {\n     task->yield(1);\n }\n \n+extern \"C\" CDECL void upcall_sleep(rust_task *task, size_t time_in_us) {\n+    LOG_UPCALL_ENTRY(task);\n+    task->log(rust_log::UPCALL | rust_log::TASK, \"elapsed %d\",\n+              task->yield_timer.get_elapsed_time());\n+    task->log(rust_log::UPCALL | rust_log::TASK, \"sleep %d us\", time_in_us);\n+    task->yield(2, time_in_us);\n+}\n+\n extern \"C\" CDECL void\n upcall_join(rust_task *task, maybe_proxy<rust_task> *target) {\n     LOG_UPCALL_ENTRY(task);"}, {"sha": "e45dd63331410feb3a1bc3af8d8c5c2e22c8ac47", "filename": "src/rt/sync/timer.cpp", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Fsync%2Ftimer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Fsync%2Ftimer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.cpp?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -0,0 +1,61 @@\n+#include \"../globals.h\"\n+#include \"timer.h\"\n+\n+#if defined(__APPLE__)\n+#include <mach/mach_time.h>\n+#endif\n+\n+timer::timer() {\n+    reset(0);\n+#if __WIN32__\n+    uint64_t ticks_per_second;\n+    QueryPerformanceFrequency((LARGE_INTEGER *)&ticks_per_second);\n+    _ticks_per_us = ticks_per_second / 1000000;\n+#endif\n+}\n+\n+void\n+timer::reset(uint64_t timeout) {\n+    _start = get_time();\n+    _timeout = timeout;\n+}\n+\n+uint64_t\n+timer::get_elapsed_time() {\n+    return get_time() - _start;\n+}\n+\n+int64_t\n+timer::get_timeout() {\n+    return _timeout - get_elapsed_time();\n+}\n+\n+bool\n+timer::has_timed_out() {\n+    return get_timeout() <= 0;\n+}\n+\n+uint64_t\n+timer::get_time() {\n+#ifdef __APPLE__\n+    uint64_t time = mach_absolute_time();\n+    mach_timebase_info_data_t info = {0, 0};\n+    if (info.denom == 0) {\n+        mach_timebase_info(&info);\n+    }\n+    uint64_t time_nano = time * (info.numer / info.denom);\n+    return time_nano / 1000;\n+#elif __WIN32__\n+    uint64_t ticks;\n+    QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n+    return ticks / _ticks_per_us;\n+#else\n+    timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    return (ts.tv_sec * 1000000000LL + ts.tv_nsec) / 1000;\n+#endif\n+}\n+\n+timer::~timer() {\n+    // Nop.\n+}"}, {"sha": "509fd22cc0e8518881f9919b4e0191c0731673e5", "filename": "src/rt/sync/timer.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Fsync%2Ftimer.h", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Frt%2Fsync%2Ftimer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.h?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -0,0 +1,25 @@\n+/*\n+ *  Utility class to measure time in a platform independent way.\n+ */\n+\n+#ifndef TIMER_H\n+#define TIMER_H\n+\n+class timer {\n+private:\n+    uint64_t _start;\n+    uint64_t _timeout;\n+    uint64_t get_time();\n+#if __WIN32__\n+    uint64_t _ticks_per_us;\n+#endif\n+public:\n+    timer();\n+    void reset(uint64_t timeout);\n+    uint64_t get_elapsed_time();\n+    int64_t get_timeout();\n+    bool has_timed_out();\n+    virtual ~timer();\n+};\n+\n+#endif /* TIMER_H */"}, {"sha": "18499f4e5d03e645a54afe1df3a29bd71537b372", "filename": "src/test/run-pass/task-lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/988695a96cee1eb825435260a1874b8daa0e590a/src%2Ftest%2Frun-pass%2Ftask-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988695a96cee1eb825435260a1874b8daa0e590a/src%2Ftest%2Frun-pass%2Ftask-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-lib.rs?ref=988695a96cee1eb825435260a1874b8daa0e590a", "patch": "@@ -0,0 +1,6 @@\n+use std;\n+import std._task;\n+\n+fn main() {\n+  _task.sleep(1000000u);\n+}\n\\ No newline at end of file"}]}