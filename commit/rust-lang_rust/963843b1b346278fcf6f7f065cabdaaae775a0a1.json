{"sha": "963843b1b346278fcf6f7f065cabdaaae775a0a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Mzg0M2IxYjM0NjI3OGZjZjZmN2YwNjVjYWJkYWFhZTc3NWEwYTE=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-02-01T03:46:16Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-02-14T19:18:43Z"}, "message": "Conversions between CStr/OsStr/Path and boxes.", "tree": {"sha": "5479442c7fb7a6e7d1c484340246dda7004113dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5479442c7fb7a6e7d1c484340246dda7004113dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963843b1b346278fcf6f7f065cabdaaae775a0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963843b1b346278fcf6f7f065cabdaaae775a0a1", "html_url": "https://github.com/rust-lang/rust/commit/963843b1b346278fcf6f7f065cabdaaae775a0a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963843b1b346278fcf6f7f065cabdaaae775a0a1/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2425b227742bb9214d60429d1325816e0b93e152", "url": "https://api.github.com/repos/rust-lang/rust/commits/2425b227742bb9214d60429d1325816e0b93e152", "html_url": "https://github.com/rust-lang/rust/commit/2425b227742bb9214d60429d1325816e0b93e152"}], "stats": {"total": 193, "additions": 192, "deletions": 1}, "files": [{"sha": "d0fce7061286880bd0b0c7006ec1b350d73d6510", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -315,6 +315,14 @@ impl<T> Default for Box<[T]> {\n     }\n }\n \n+#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n+impl Default for Box<str> {\n+    fn default() -> Box<str> {\n+        let default: Box<[u8]> = Default::default();\n+        unsafe { mem::transmute(default) }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for Box<T> {\n     /// Returns a new box with a `clone()` of this box's contents."}, {"sha": "dc3855367ae271604b1d13935ca5cab8dc092b55", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -303,6 +303,12 @@ impl CString {\n         &self.inner\n     }\n \n+    /// Converts this `CString` into a boxed `CStr`.\n+    #[unstable(feature = \"into_boxed_c_str\", issue = \"0\")]\n+    pub fn into_boxed_c_str(self) -> Box<CStr> {\n+        unsafe { mem::transmute(self.into_inner()) }\n+    }\n+\n     // Bypass \"move out of struct which implements `Drop` trait\" restriction.\n     fn into_inner(self) -> Box<[u8]> {\n         unsafe {\n@@ -380,6 +386,22 @@ impl Borrow<CStr> for CString {\n     fn borrow(&self) -> &CStr { self }\n }\n \n+#[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n+impl<'a> From<&'a CStr> for Box<CStr> {\n+    fn from(s: &'a CStr) -> Box<CStr> {\n+        let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n+        unsafe { mem::transmute(boxed) }\n+    }\n+}\n+\n+#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n+impl Default for Box<CStr> {\n+    fn default() -> Box<CStr> {\n+        let boxed: Box<[u8]> = Box::from([0]);\n+        unsafe { mem::transmute(boxed) }\n+    }\n+}\n+\n impl NulError {\n     /// Returns the position of the nul byte in the slice that was provided to\n     /// `CString::new`.\n@@ -686,7 +708,7 @@ impl ToOwned for CStr {\n     type Owned = CString;\n \n     fn to_owned(&self) -> CString {\n-        CString { inner: self.to_bytes_with_nul().to_vec().into_boxed_slice() }\n+        CString { inner: self.to_bytes_with_nul().into() }\n     }\n }\n \n@@ -847,4 +869,22 @@ mod tests {\n         let cstr = CStr::from_bytes_with_nul(data);\n         assert!(cstr.is_err());\n     }\n+\n+    #[test]\n+    fn into_boxed() {\n+        let orig: &[u8] = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(orig).unwrap();\n+        let cstring = cstr.to_owned();\n+        let box1: Box<CStr> = Box::from(cstr);\n+        let box2 = cstring.into_boxed_c_str();\n+        assert_eq!(cstr, &*box1);\n+        assert_eq!(box1, box2);\n+        assert_eq!(&*box2, cstr);\n+    }\n+\n+    #[test]\n+    fn boxed_default() {\n+        let boxed = <Box<CStr>>::default();\n+        assert_eq!(boxed.to_bytes_with_nul(), &[0]);\n+    }\n }"}, {"sha": "7b8bf42e0a74a5d3f1d485f8553c8a8ef1e34fe4", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -204,6 +204,12 @@ impl OsString {\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n+\n+    /// Converts this `OsString` into a boxed `OsStr`.\n+    #[unstable(feature = \"into_boxed_os_str\", issue = \"0\")]\n+    pub fn into_boxed_os_str(self) -> Box<OsStr> {\n+        unsafe { mem::transmute(self.inner.into_box()) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -445,6 +451,20 @@ impl OsStr {\n     }\n }\n \n+#[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n+impl<'a> From<&'a OsStr> for Box<OsStr> {\n+    fn from(s: &'a OsStr) -> Box<OsStr> {\n+        unsafe { mem::transmute(s.inner.into_box()) }\n+    }\n+}\n+\n+#[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n+impl Default for Box<OsStr> {\n+    fn default() -> Box<OsStr> {\n+        unsafe { mem::transmute(Slice::empty_box()) }\n+    }\n+}\n+\n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl<'a> Default for &'a OsStr {\n     /// Creates an empty `OsStr`.\n@@ -741,4 +761,22 @@ mod tests {\n         let os_str: &OsStr = Default::default();\n         assert_eq!(\"\", os_str);\n     }\n+\n+    #[test]\n+    fn into_boxed() {\n+        let orig = \"Hello, world!\";\n+        let os_str = OsStr::new(orig);\n+        let os_string = os_str.to_owned();\n+        let box1: Box<OsStr> = Box::from(os_str);\n+        let box2 = os_string.into_boxed_os_str();\n+        assert_eq!(os_str, &*box1);\n+        assert_eq!(box1, box2);\n+        assert_eq!(&*box2, os_str);\n+    }\n+\n+    #[test]\n+    fn boxed_default() {\n+        let boxed = <Box<OsStr>>::default();\n+        assert!(boxed.is_empty());\n+    }\n }"}, {"sha": "245a6d945b5a320c330adbc6391f8a5cb4f54ba3", "filename": "src/libstd/path.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -1194,6 +1194,28 @@ impl PathBuf {\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n     }\n+\n+    /// Converts this `PathBuf` into a boxed `Path`.\n+    #[unstable(feature = \"into_boxed_path\", issue = \"0\")]\n+    pub fn into_boxed_path(self) -> Box<Path> {\n+        unsafe { mem::transmute(self.inner.into_boxed_os_str()) }\n+    }\n+}\n+\n+#[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n+impl<'a> From<&'a Path> for Box<Path> {\n+    fn from(path: &'a Path) -> Box<Path> {\n+        let boxed: Box<OsStr> = path.inner.into();\n+        unsafe { mem::transmute(boxed) }\n+    }\n+}\n+\n+#[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n+impl Default for Box<Path> {\n+    fn default() -> Box<Path> {\n+        let boxed: Box<OsStr> = Default::default();\n+        unsafe { mem::transmute(boxed) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3676,4 +3698,22 @@ mod tests {\n         let actual = format!(\"{:?}\", iter);\n         assert_eq!(expected, actual);\n     }\n+\n+    #[test]\n+    fn into_boxed() {\n+        let orig: &str = \"some/sort/of/path\";\n+        let path = Path::new(orig);\n+        let path_buf = path.to_owned();\n+        let box1: Box<Path> = Box::from(path);\n+        let box2 = path_buf.into_boxed_path();\n+        assert_eq!(path, &*box1);\n+        assert_eq!(box1, box2);\n+        assert_eq!(&*box2, path);\n+    }\n+\n+    #[test]\n+    fn boxed_default() {\n+        let boxed = <Box<Path>>::default();\n+        assert!(boxed.as_os_str().is_empty());\n+    }\n }"}, {"sha": "0f967863899cb071f3565e39b3ece9e4fa0290ac", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -94,6 +94,11 @@ impl Buf {\n     pub fn push_slice(&mut self, s: &Slice) {\n         self.inner.extend_from_slice(&s.inner)\n     }\n+\n+    #[inline]\n+    pub fn into_box(self) -> Box<Slice> {\n+        unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n+    }\n }\n \n impl Slice {\n@@ -116,4 +121,15 @@ impl Slice {\n     pub fn to_owned(&self) -> Buf {\n         Buf { inner: self.inner.to_vec() }\n     }\n+\n+    #[inline]\n+    pub fn into_box(&self) -> Box<Slice> {\n+        let boxed: Box<[u8]> = self.inner.into();\n+        unsafe { mem::transmute(boxed) }\n+    }\n+\n+    pub fn empty_box() -> Box<Slice> {\n+        let boxed: Box<[u8]> = Default::default();\n+        unsafe { mem::transmute(boxed) }\n+    }\n }"}, {"sha": "938bcfc6d162e958903a34d65db4078d4de0e352", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -94,6 +94,11 @@ impl Buf {\n     pub fn push_slice(&mut self, s: &Slice) {\n         self.inner.extend_from_slice(&s.inner)\n     }\n+\n+    #[inline]\n+    pub fn into_box(self) -> Box<Slice> {\n+        unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n+    }\n }\n \n impl Slice {\n@@ -116,4 +121,15 @@ impl Slice {\n     pub fn to_owned(&self) -> Buf {\n         Buf { inner: self.inner.to_vec() }\n     }\n+\n+    #[inline]\n+    pub fn into_box(&self) -> Box<Slice> {\n+        let boxed: Box<[u8]> = self.inner.into();\n+        unsafe { mem::transmute(boxed) }\n+    }\n+\n+    pub fn empty_box() -> Box<Slice> {\n+        let boxed: Box<[u8]> = Default::default();\n+        unsafe { mem::transmute(boxed) }\n+    }\n }"}, {"sha": "04e45dcf549631df7a0ce6436c3cd0c574ebb5ca", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -88,6 +88,11 @@ impl Buf {\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n+\n+    #[inline]\n+    pub fn into_box(self) -> Box<Slice> {\n+        unsafe { mem::transmute(self.inner.into_box()) }\n+    }\n }\n \n impl Slice {\n@@ -108,4 +113,13 @@ impl Slice {\n         buf.push_wtf8(&self.inner);\n         Buf { inner: buf }\n     }\n+\n+    #[inline]\n+    pub fn into_box(&self) -> Box<Slice> {\n+        unsafe { mem::transmute(self.inner.into_box()) }\n+    }\n+\n+    pub fn empty_box() -> Box<Slice> {\n+        unsafe { mem::transmute(Wtf8::empty_box()) }\n+    }\n }"}, {"sha": "1d61181a4ee0f96db5f8a4a063410a837f61176f", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963843b1b346278fcf6f7f065cabdaaae775a0a1/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=963843b1b346278fcf6f7f065cabdaaae775a0a1", "patch": "@@ -340,6 +340,12 @@ impl Wtf8Buf {\n             }\n         }\n     }\n+\n+    /// Converts this `Wtf8Buf` into a boxed `Wtf8`.\n+    #[inline]\n+    pub fn into_box(self) -> Box<Wtf8> {\n+        unsafe { mem::transmute(self.bytes.into_boxed_slice()) }\n+    }\n }\n \n /// Create a new WTF-8 string from an iterator of code points.\n@@ -583,6 +589,19 @@ impl Wtf8 {\n             _ => None\n         }\n     }\n+\n+    /// Boxes this `Wtf8`.\n+    #[inline]\n+    pub fn into_box(&self) -> Box<Wtf8> {\n+        let boxed: Box<[u8]> = self.bytes.into();\n+        unsafe { mem::transmute(boxed) }\n+    }\n+\n+    /// Creates a boxed, empty `Wtf8`.\n+    pub fn empty_box() -> Box<Wtf8> {\n+        let boxed: Box<[u8]> = Default::default();\n+        unsafe { mem::transmute(boxed) }\n+    }\n }\n \n "}]}