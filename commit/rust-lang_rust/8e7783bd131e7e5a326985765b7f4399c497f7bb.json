{"sha": "8e7783bd131e7e5a326985765b7f4399c497f7bb", "node_id": "C_kwDOAAsO6NoAKDhlNzc4M2JkMTMxZTdlNWEzMjY5ODU3NjViN2Y0Mzk5YzQ5N2Y3YmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T19:46:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-05T19:47:19Z"}, "message": "Fix opaque_hidden_inferred_bound lint ICE", "tree": {"sha": "ea71e9d92f50561c94fc9afad4325b73d74f9d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea71e9d92f50561c94fc9afad4325b73d74f9d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7783bd131e7e5a326985765b7f4399c497f7bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7783bd131e7e5a326985765b7f4399c497f7bb", "html_url": "https://github.com/rust-lang/rust/commit/8e7783bd131e7e5a326985765b7f4399c497f7bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7783bd131e7e5a326985765b7f4399c497f7bb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ac6a26bcf5be1ac841e7fe969bd992b3461f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ac6a26bcf5be1ac841e7fe969bd992b3461f9d", "html_url": "https://github.com/rust-lang/rust/commit/24ac6a26bcf5be1ac841e7fe969bd992b3461f9d"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "7e28f22c0ba8b532d0a7e468c56a31446b9d7d0f", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e7783bd131e7e5a326985765b7f4399c497f7bb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8e7783bd131e7e5a326985765b7f4399c497f7bb/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=8e7783bd131e7e5a326985765b7f4399c497f7bb", "patch": "@@ -436,4 +436,5 @@ lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not\n \n lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its associated type bounds\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n-    .suggestion = add this bound\n+\n+lint_opaque_hidden_inferred_bound_sugg = add this bound"}, {"sha": "4ff3b2e2c4a768ca191d2fa09e4cc13016627e8e", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8e7783bd131e7e5a326985765b7f4399c497f7bb/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7783bd131e7e5a326985765b7f4399c497f7bb/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=8e7783bd131e7e5a326985765b7f4399c497f7bb", "patch": "@@ -1,7 +1,10 @@\n+use rustc_errors::DecorateLint;\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_macros::LintDiagnostic;\n-use rustc_middle::ty::{self, fold::BottomUpFolder, Ty, TypeFoldable};\n+use rustc_macros::{LintDiagnostic, Subdiagnostic};\n+use rustc_middle::ty::{\n+    self, fold::BottomUpFolder, print::TraitPredPrintModifiersAndPath, Ty, TypeFoldable,\n+};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -117,23 +120,29 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     )) {\n                         // If it's a trait bound and an opaque that doesn't satisfy it,\n                         // then we can emit a suggestion to add the bound.\n-                        let (suggestion, suggest_span) =\n+                        let sugg =\n                             match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n-                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => (\n-                                    format!(\" + {}\", trait_pred.print_modifiers_and_trait_path()),\n-                                    Some(cx.tcx.def_span(def_id).shrink_to_hi()),\n-                                ),\n-                                _ => (String::new(), None),\n+                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => Some(AddBound {\n+                                    suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),\n+                                    trait_ref: trait_pred.print_modifiers_and_trait_path(),\n+                                }),\n+                                _ => None,\n                             };\n-                        cx.emit_spanned_lint(\n+                        let lint = OpaqueHiddenInferredBoundLint {\n+                            ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n+                            proj_ty: proj_term,\n+                            assoc_pred_span,\n+                        };\n+                        cx.struct_span_lint(\n                             OPAQUE_HIDDEN_INFERRED_BOUND,\n                             pred_span,\n-                            OpaqueHiddenInferredBoundLint {\n-                                ty: cx.tcx.mk_opaque(def_id, ty::InternalSubsts::identity_for_item(cx.tcx, def_id)),\n-                                proj_ty: proj_term,\n-                                assoc_pred_span,\n-                                suggestion,\n-                                suggest_span,\n+                            lint.msg(),\n+                            |diag| {\n+                                lint.decorate_lint(diag);\n+                                if let Some(sugg) = sugg {\n+                                    diag.subdiagnostic(sugg);\n+                                }\n+                                diag\n                             },\n                         );\n                     }\n@@ -150,7 +159,17 @@ struct OpaqueHiddenInferredBoundLint<'tcx> {\n     proj_ty: Ty<'tcx>,\n     #[label(lint::specifically)]\n     assoc_pred_span: Span,\n-    #[suggestion_verbose(applicability = \"machine-applicable\", code = \"{suggestion}\")]\n-    suggest_span: Option<Span>,\n-    suggestion: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion_verbose(\n+    lint::opaque_hidden_inferred_bound_sugg,\n+    applicability = \"machine-applicable\",\n+    code = \" + {trait_ref}\"\n+)]\n+struct AddBound<'tcx> {\n+    #[primary_span]\n+    suggest_span: Span,\n+    #[skip_arg]\n+    trait_ref: TraitPredPrintModifiersAndPath<'tcx>,\n }"}, {"sha": "5bcc8950adafbf5d38c668421bee899bddea2015", "filename": "src/test/ui/lint/issue-102705.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e7783bd131e7e5a326985765b7f4399c497f7bb/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7783bd131e7e5a326985765b7f4399c497f7bb/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-102705.rs?ref=8e7783bd131e7e5a326985765b7f4399c497f7bb", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![allow(opaque_hidden_inferred_bound)]\n+#![allow(dead_code)]\n+\n+trait Duh {}\n+\n+impl Duh for i32 {}\n+\n+trait Trait {\n+    type Assoc: Duh;\n+}\n+\n+impl<R: Duh, F: FnMut() -> R> Trait for F {\n+    type Assoc = R;\n+}\n+\n+fn foo() -> impl Trait<Assoc = impl Send> {\n+    || 42\n+}\n+\n+fn main() {}"}]}