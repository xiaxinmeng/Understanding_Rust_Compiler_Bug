{"sha": "b1b456c64254e82c4edf065c9cc526bf8e734d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjQ1NmM2NDI1NGU4MmM0ZWRmMDY1YzljYzUyNmJmOGU3MzRkNjg=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:07:23Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T18:07:23Z"}, "message": "hir_ty: check field visibility while iterating through autoderef candidates", "tree": {"sha": "9a6f46fa0e7f882b5caba4012fb987b745a52315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6f46fa0e7f882b5caba4012fb987b745a52315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b456c64254e82c4edf065c9cc526bf8e734d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b456c64254e82c4edf065c9cc526bf8e734d68", "html_url": "https://github.com/rust-lang/rust/commit/b1b456c64254e82c4edf065c9cc526bf8e734d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b456c64254e82c4edf065c9cc526bf8e734d68/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30980396afa713a7b877c7962c5b45329230cdc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/30980396afa713a7b877c7962c5b45329230cdc5", "html_url": "https://github.com/rust-lang/rust/commit/30980396afa713a7b877c7962c5b45329230cdc5"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "9bf9f87e4bf7f78b462791627ff8ea174d21c55f", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b1b456c64254e82c4edf065c9cc526bf8e734d68/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b456c64254e82c4edf065c9cc526bf8e734d68/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b1b456c64254e82c4edf065c9cc526bf8e734d68", "patch": "@@ -442,27 +442,49 @@ impl<'a> InferenceContext<'a> {\n                     },\n                 )\n                 .find_map(|derefed_ty| {\n+                    let def_db = self.db.upcast();\n+                    let module = self.resolver.module();\n+                    let is_visible = |field_id: &FieldId| {\n+                        module\n+                            .map(|mod_id| {\n+                                self.db.field_visibilities(field_id.parent)[field_id.local_id]\n+                                    .is_visible_from(def_db, mod_id)\n+                            })\n+                            .unwrap_or(true)\n+                    };\n                     match canonicalized.decanonicalize_ty(derefed_ty.value).interned(&Interner) {\n                         TyKind::Tuple(_, substs) => {\n                             name.as_tuple_index().and_then(|idx| substs.0.get(idx).cloned())\n                         }\n                         TyKind::Adt(AdtId(hir_def::AdtId::StructId(s)), parameters) => {\n-                            self.db.struct_data(*s).variant_data.field(name).map(|local_id| {\n-                                let field = FieldId { parent: (*s).into(), local_id };\n-                                self.write_field_resolution(tgt_expr, field);\n-                                self.db.field_types((*s).into())[field.local_id]\n-                                    .clone()\n-                                    .subst(&parameters)\n-                            })\n+                            let local_id = self.db.struct_data(*s).variant_data.field(name)?;\n+                            let field = FieldId { parent: (*s).into(), local_id };\n+                            let is_visible_in_ctx = is_visible(&field);\n+                            self.write_field_resolution(tgt_expr, field);\n+                            if is_visible_in_ctx {\n+                                Some(\n+                                    self.db.field_types((*s).into())[field.local_id]\n+                                        .clone()\n+                                        .subst(&parameters),\n+                                )\n+                            } else {\n+                                None\n+                            }\n                         }\n                         TyKind::Adt(AdtId(hir_def::AdtId::UnionId(u)), parameters) => {\n-                            self.db.union_data(*u).variant_data.field(name).map(|local_id| {\n-                                let field = FieldId { parent: (*u).into(), local_id };\n-                                self.write_field_resolution(tgt_expr, field);\n-                                self.db.field_types((*u).into())[field.local_id]\n-                                    .clone()\n-                                    .subst(&parameters)\n-                            })\n+                            let local_id = self.db.union_data(*u).variant_data.field(name)?;\n+                            let field = FieldId { parent: (*u).into(), local_id };\n+                            let is_visible_in_ctx = is_visible(&field);\n+                            self.write_field_resolution(tgt_expr, field);\n+                            if is_visible_in_ctx {\n+                                Some(\n+                                    self.db.field_types((*u).into())[field.local_id]\n+                                        .clone()\n+                                        .subst(&parameters),\n+                                )\n+                            } else {\n+                                None\n+                            }\n                         }\n                         _ => None,\n                     }"}]}