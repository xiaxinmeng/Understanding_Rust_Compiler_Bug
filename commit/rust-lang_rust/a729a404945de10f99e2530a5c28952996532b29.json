{"sha": "a729a404945de10f99e2530a5c28952996532b29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MjlhNDA0OTQ1ZGUxMGY5OWUyNTMwYTVjMjg5NTI5OTY1MzJiMjk=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-20T11:46:02Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-20T11:46:02Z"}, "message": "Use assume to inform the optimiser about refcount invariants\n\nThe reference count can never be 0, unless we're about to drop the data\ncompletely. Using the `assume` intrinsic allows us to inform LLVM about\nthat invariant, meaning it can avoid unnecessary drops.", "tree": {"sha": "a4bd2a7171deb6edf5bab96ecc4c3896c5ed2a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4bd2a7171deb6edf5bab96ecc4c3896c5ed2a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a729a404945de10f99e2530a5c28952996532b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a729a404945de10f99e2530a5c28952996532b29", "html_url": "https://github.com/rust-lang/rust/commit/a729a404945de10f99e2530a5c28952996532b29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a729a404945de10f99e2530a5c28952996532b29/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b61ffb3f55c996eceded6c91281911b671d978", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b61ffb3f55c996eceded6c91281911b671d978", "html_url": "https://github.com/rust-lang/rust/commit/65b61ffb3f55c996eceded6c91281911b671d978"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "0f2a11cc1dbac555ec8d255c2b1d583f942ee34c", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a729a404945de10f99e2530a5c28952996532b29/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a729a404945de10f99e2530a5c28952996532b29/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a729a404945de10f99e2530a5c28952996532b29", "patch": "@@ -160,6 +160,7 @@ use core::option::Option::{Some, None};\n use core::ptr::{self, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n+use core::intrinsics::assume;\n \n use heap::deallocate;\n \n@@ -905,10 +906,20 @@ trait RcBoxPtr<T> {\n     fn strong(&self) -> uint { self.inner().strong.get() }\n \n     #[inline]\n-    fn inc_strong(&self) { self.inner().strong.set(self.strong() + 1); }\n+    fn inc_strong(&self) {\n+        let strong = self.strong();\n+        // The reference count is always at least one unless we're about to drop the type\n+        unsafe { assume(strong > 0); }\n+        self.inner().strong.set(strong + 1);\n+    }\n \n     #[inline]\n-    fn dec_strong(&self) { self.inner().strong.set(self.strong() - 1); }\n+    fn dec_strong(&self) {\n+        let strong = self.strong();\n+        // The reference count is always at least one unless we're about to drop the type\n+        unsafe { assume(strong > 0); }\n+        self.inner().strong.set(strong - 1);\n+    }\n \n     #[inline]\n     fn weak(&self) -> uint { self.inner().weak.get() }"}]}