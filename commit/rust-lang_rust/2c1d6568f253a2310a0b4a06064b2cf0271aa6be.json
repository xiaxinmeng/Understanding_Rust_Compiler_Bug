{"sha": "2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWQ2NTY4ZjI1M2EyMzEwYTBiNGEwNjA2NGIyY2YwMjcxYWE2YmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-29T06:28:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-30T01:51:29Z"}, "message": "Fix a bug with statics inside blocks in generic fns\n\nWhenever a generic function was encountered, only the top-level items were\nrecursed upon, even though the function could contain items inside blocks or\nnested inside of other expressions. This fixes the existing code from traversing\njust the top level items to using a Visitor to deeply recurse and find any items\nwhich need to be translated.\n\nThis was uncovered when building code with --lib, because the encode_symbol\nfunction would panic once it found that an item hadn't been translated.\n\nCloses #8134", "tree": {"sha": "1ba72b18a36dc2ae65268bd4abb6642c7726e110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ba72b18a36dc2ae65268bd4abb6642c7726e110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "html_url": "https://github.com/rust-lang/rust/commit/2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d04009c160b7a88b03f42c633220457bd72a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d04009c160b7a88b03f42c633220457bd72a09", "html_url": "https://github.com/rust-lang/rust/commit/89d04009c160b7a88b03f42c633220457bd72a09"}], "stats": {"total": 95, "additions": 85, "deletions": 10}, "files": [{"sha": "1dc30d2221da897d53b4afb9882eba90515c12a1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "patch": "@@ -87,6 +87,7 @@ use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::{ast, ast_util, codemap, ast_map};\n use syntax::abi::{X86, X86_64, Arm, Mips};\n+use syntax::visit::Visitor;\n \n pub use middle::trans::context::task_llcx;\n \n@@ -2162,6 +2163,14 @@ pub fn trans_enum_def(ccx: @mut CrateContext, enum_definition: &ast::enum_def,\n     }\n }\n \n+pub struct TransItemVisitor;\n+\n+impl Visitor<@mut CrateContext> for TransItemVisitor {\n+    fn visit_item(&mut self, i: @ast::item, ccx: @mut CrateContext) {\n+        trans_item(ccx, i);\n+    }\n+}\n+\n pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n     let _icx = push_ctxt(\"trans_item\");\n     let path = match ccx.tcx.items.get_copy(&item.id) {\n@@ -2193,15 +2202,10 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n                      item.id,\n                      item.attrs);\n         } else {\n-            for stmt in body.stmts.iter() {\n-                match stmt.node {\n-                  ast::stmt_decl(@codemap::spanned { node: ast::decl_item(i),\n-                                                 _ }, _) => {\n-                    trans_item(ccx, i);\n-                  }\n-                  _ => ()\n-                }\n-            }\n+            // Be sure to travel more than just one layer deep to catch nested\n+            // items in blocks and such.\n+            let mut v = TransItemVisitor;\n+            v.visit_block(body, ccx);\n         }\n       }\n       ast::item_impl(ref generics, _, _, ref ms) => {"}, {"sha": "fb4dd8a74fb61cd9e89a158f8b89e450beefbae6", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "patch": "@@ -37,6 +37,7 @@ use std::vec;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n+use syntax::visit;\n \n /**\n The main \"translation\" pass for methods.  Generates code\n@@ -56,7 +57,15 @@ pub fn trans_impl(ccx: @mut CrateContext,\n     debug!(\"trans_impl(path=%s, name=%s, id=%?)\",\n            path.repr(tcx), name.repr(tcx), id);\n \n-    if !generics.ty_params.is_empty() { return; }\n+    // Both here and below with generic methods, be sure to recurse and look for\n+    // items that we need to translate.\n+    if !generics.ty_params.is_empty() {\n+        let mut v = TransItemVisitor;\n+        for method in methods.iter() {\n+            visit::walk_method_helper(&mut v, *method, ccx);\n+        }\n+        return;\n+    }\n     let sub_path = vec::append_one(path, path_name(name));\n     for method in methods.iter() {\n         if method.generics.ty_params.len() == 0u {\n@@ -69,6 +78,9 @@ pub fn trans_impl(ccx: @mut CrateContext,\n                          *method,\n                          None,\n                          llfn);\n+        } else {\n+            let mut v = TransItemVisitor;\n+            visit::walk_method_helper(&mut v, *method, ccx);\n         }\n     }\n }"}, {"sha": "e9dde0d14a39910f3769eaa4dd8e363b65deb03a", "filename": "src/test/auxiliary/nested_item.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// original problem\n+fn foo<T>() -> int {\n+    {\n+        static foo: int = 2;\n+        foo\n+    }\n+}\n+\n+// issue 8134\n+struct Foo;\n+impl<T> Foo {\n+    pub fn foo(&self) {\n+        static X: uint = 1;\n+    }\n+}\n+\n+// issue 8134\n+pub struct Parser<T>;\n+impl<T: std::iterator::Iterator<char>> Parser<T> {\n+    fn in_doctype(&mut self) {\n+        static DOCTYPEPattern: [char, ..6] = ['O', 'C', 'T', 'Y', 'P', 'E'];\n+    }\n+}\n+\n+struct Bar;\n+impl<T> Foo {\n+    pub fn bar(&self) {\n+        static X: uint = 1;\n+    }\n+}"}, {"sha": "5ce05fea568b34ad5c2b64cfeddd9f8e7a9e4e76", "filename": "src/test/run-pass/nested_item_main.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Ftest%2Frun-pass%2Fnested_item_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d6568f253a2310a0b4a06064b2cf0271aa6be/src%2Ftest%2Frun-pass%2Fnested_item_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested_item_main.rs?ref=2c1d6568f253a2310a0b4a06064b2cf0271aa6be", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:nested_item.rs\n+// xfail-fast\n+\n+extern mod nested_item;\n+\n+pub fn main() {\n+    assert_eq!(2, nested_item::foo::<()>());\n+    assert_eq!(2, nested_item::foo::<int>());\n+}"}]}