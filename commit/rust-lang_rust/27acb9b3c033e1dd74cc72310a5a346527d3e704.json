{"sha": "27acb9b3c033e1dd74cc72310a5a346527d3e704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWNiOWIzYzAzM2UxZGQ3NGNjNzIzMTBhNWEzNDY1MjdkM2U3MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-15T13:14:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-15T13:14:08Z"}, "message": "Auto merge of #50769 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #49767 (Rewrite docs for `std::ptr`)\n - #50399 (save-analysis: handle aliasing imports a bit more nicely)\n - #50594 (Update the man page with additional --print options)\n - #50613 (Migrate the toolstate update bot to rust-highfive)\n - #50632 (Add minification process)\n - #50685 (ci: Add Dockerfile for dist-sparc64-linux)\n - #50691 (rustdoc: Add support for pub(restricted))\n - #50712 (Improve eager type resolution error message)\n - #50720 (Add \u201cExamples\u201d section header in f32/f64 doc comments.)\n - #50733 (Hyperlink DOI against preferred resolver)\n - #50745 (Uncapitalize \"You\")\n\nFailed merges:", "tree": {"sha": "ddf5bbc6873463bafb8b60f2f70d9ea71dc6cf91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf5bbc6873463bafb8b60f2f70d9ea71dc6cf91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27acb9b3c033e1dd74cc72310a5a346527d3e704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27acb9b3c033e1dd74cc72310a5a346527d3e704", "html_url": "https://github.com/rust-lang/rust/commit/27acb9b3c033e1dd74cc72310a5a346527d3e704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27acb9b3c033e1dd74cc72310a5a346527d3e704/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca0da59850d4a9eef17c0e6c3795397102d88a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca0da59850d4a9eef17c0e6c3795397102d88a3", "html_url": "https://github.com/rust-lang/rust/commit/eca0da59850d4a9eef17c0e6c3795397102d88a3"}, {"sha": "4066d2235db486a1403138a37831dc54518965d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4066d2235db486a1403138a37831dc54518965d4", "html_url": "https://github.com/rust-lang/rust/commit/4066d2235db486a1403138a37831dc54518965d4"}], "stats": {"total": 1264, "additions": 980, "deletions": 284}, "files": [{"sha": "9e62b895ed21eaa17a717a2c7508b75af055b57d", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -197,7 +197,7 @@ env:\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"j96XxTVOSUf4s4r4htIxn/fvIa5DWbMgLqWl7r8z2QfgUwscmkMXAwXuFNc7s7bGTpV/+CgDiMFFM6BAFLGKutytIF6oA02s9b+usQYnM0th7YQ2AIgm9GtMTJCJp4AoyfFmh8F2faUICBZlfVLUJ34udHEe35vOklix+0k4WDo=\"\n     # TOOLSTATE_REPO_ACCESS_TOKEN=...\n-    - secure: \"cFh8thThqEJLC98XKI5pfqflUzOlxsYPRW20AWRaYOOgYHPTiGWypTXiPbGSKaeAXTZoOA+DpQtEmefc0U6lt9dHc7a/MIaK6isFurjlnKYiLOeTruzyu1z7PWCeZ/jKXsU2RK/88DBtlNwfMdaMIeuKj14IVfpepPPL71ETbuk=\"\n+    - secure: \"ESfcXqv4N2VMhqi2iIyw6da9VrsA78I4iR1asouCaq4hzTTrkB4WNRrfURy6xg72gQ4nMhtRJbB0/2jmc9Cu1+g2CzXtyiL223aJ5CKrXdcvbitopQSDfp07dMWm+UED+hNFEanpErKAeU/6FM3A+J+60PMk8MCF1h9tqNRISJw=\"\n \n before_install:\n   # We'll use the AWS cli to download/upload cached docker layers, so install"}, {"sha": "b1e2e1545cf85042f1950274249303a2763f5846", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -6,7 +6,7 @@ environment:\n     secure: 7Y+JiquYedOAgnUU26uL0DPzrxmTtR+qIwG6rNKSuWDffqU3vVZxbGXim9QpTO80\n   SCCACHE_DIGEST: f808afabb4a4eb1d7112bcb3fa6be03b61e93412890c88e177c667eb37f46353d7ec294e559b16f9f4b5e894f2185fe7670a0df15fd064889ecbd80f0c34166c\n   TOOLSTATE_REPO_ACCESS_TOKEN:\n-    secure: PTZiSxJMVUZ0VnMR5i13E4OagbXfglj7pcskDQiKufVrDm13mLoI0vDJAEM35+bY\n+    secure: gKGlVktr7iuqCoYSxHxDE9ltLOKU0nYDEuQxvWbNxUIW7ri5ppn8L06jQzN0GGzN\n \n   # By default schannel checks revocation of certificates unlike some other SSL\n   # backends, but we've historically had problems on CI where a revocation"}, {"sha": "ce9fc63230d7cde2e59a38e38d92ec185806149e", "filename": "src/Cargo.lock", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -79,15 +79,15 @@ dependencies = [\n \n [[package]]\n name = \"assert_cli\"\n-version = \"0.5.6\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"difference 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"skeptic 0.13.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -183,6 +183,11 @@ dependencies = [\n name = \"build_helper\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"bytecount\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.2.2\"\n@@ -570,6 +575,11 @@ name = \"diff\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"difference\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n@@ -1188,6 +1198,14 @@ name = \"memoffset\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"minifier\"\n+version = \"0.0.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"miniz-sys\"\n version = \"0.1.10\"\n@@ -1550,7 +1568,7 @@ dependencies = [\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1689,6 +1707,15 @@ dependencies = [\n  \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rls-data\"\n+version = \"0.16.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rls-rustc\"\n version = \"0.2.2\"\n@@ -2140,7 +2167,7 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2260,6 +2287,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2290,7 +2318,7 @@ dependencies = [\n name = \"rustfmt-nightly\"\n version = \"0.6.1\"\n dependencies = [\n- \"assert_cli 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"assert_cli 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2417,6 +2445,21 @@ name = \"siphasher\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"skeptic\"\n+version = \"0.13.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bytecount 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"smallvec\"\n version = \"0.6.0\"\n@@ -2988,14 +3031,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35c7a5669cb64f085739387e1308b74e6d44022464b7f1b63bbd4ceb6379ec31\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n-\"checksum assert_cli 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c8ca6beaa44a3520407b28a4a779a19b1364fcadcb2f258c41a7baf3102ced0\"\n+\"checksum assert_cli 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72342c21057a3cb5f7c2d849bf7999a83795434dd36d74fa8c24680581bd1930\"\n \"checksum atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af80143d6f7608d746df1520709e5d141c96f240b0e62b0aa41bdfb53374d9d4\"\n \"checksum backtrace 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ebbe525f66f42d207968308ee86bc2dd60aa5fab535b22e616323a173d097d8e\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n+\"checksum bytecount 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882585cd7ec84e902472df34a5e01891202db3bf62614e1f0afe459c1afcf744\"\n \"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\n \"checksum cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ebd6272a2ca4fd39dbabbd6611eb03df45c2259b3b80b39a9ff8fbdcf42a4b3\"\n \"checksum cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ebb87d1116151416c0cf66a0e3fb6430cccd120fd6300794b4dfaa050ac40ba\"\n@@ -3020,6 +3064,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n \"checksum derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceed73957c449214f8440eec8ad7fa282b67dc9eacbb24a3085b15d60397a17a\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n+\"checksum difference 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3304d19798a8e067e48d8e69b2c37f0b5e9b4e462504ad9e27e9f3fce02bba8\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n@@ -3083,6 +3128,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mdbook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b5a8d7e341ceee5db3882a06078d42661ddcfa2b3687319cc5da76ec4e782f\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n+\"checksum minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26f3e36a4db1981b16567e4abfd6ddc3641bc9b950bdc868701f656bf9b74bdd\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9224c91f82b3c47cf53dcf78dfaa20d6888fbcc5d272d5f2fcdf8a697f3c987d\"\n \"checksum nibble_vec 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8d77f3db4bce033f4d04db08079b2ef1c3d02b44e86f25d08886fafa7756ffa\"\n@@ -3132,6 +3178,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-analysis 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a41488cf5dc99d6ce383319d2978756567b70d4ed0539eb0d9ce07763e732e46\"\n \"checksum rls-blacklist 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4a9cc2545ccb7e05b355bfe047b8039a6ec12270d5f3c996b766b340a50f7d2\"\n \"checksum rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bea04462e94b5512a78499837eecb7db182ff082144cd1b4bc32ef5d43de6510\"\n+\"checksum rls-data 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dd20763e1c60ae8945384c8a8fa4ac44f8afa7b0a817511f5e8927e5d24f988\"\n \"checksum rls-rustc 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"885f66b92757420572cbb02e033d4a9558c7413ca9b7ac206f28fd58ffdb44ea\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be231e1e559c315bc60ced5ad2cc2d7a9c208ed7d4e2c126500149836fda19bb\"\n@@ -3162,6 +3209,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n+\"checksum skeptic 0.13.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4474d6da9593171bcb086890fc344a3a12783cb24e5b141f8a5d0e43561f4b6\"\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n \"checksum socket2 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff606e0486e88f5fc6cfeb3966e434fb409abbc7a3ab495238f70a1ca97f789d\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\""}, {"sha": "952c265a1390b75fa871cf06a4e1d13323db1420", "filename": "src/ci/docker/disabled/dist-sparc64-linux/Dockerfile", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fci%2Fdocker%2Fdisabled%2Fdist-sparc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fci%2Fdocker%2Fdisabled%2Fdist-sparc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-sparc64-linux%2FDockerfile?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -0,0 +1,26 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-sparc64-linux-gnu \\\n+  libssl-dev \\\n+  pkg-config\n+\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV HOSTS=sparc64-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "807e6fb7b642e2d6b789ea7ef40aaf7c07633a88", "filename": "src/ci/docker/x86_64-gnu-tools/repo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -60,7 +60,7 @@ commit_toolstate_change() {\n     OLDFLAGS=\"$-\"\n     set -eu\n \n-    git config --global user.email '34210020+rust-toolstate-update@users.noreply.github.com'\n+    git config --global user.email '7378925+rust-toolstate-update@users.noreply.github.com'\n     git config --global user.name 'Rust Toolstate Update'\n     git config --global credential.helper store\n     printf 'https://%s:x-oauth-basic@github.com\\n' \"$TOOLSTATE_REPO_ACCESS_TOKEN\" \\"}, {"sha": "8f611063dbe5d901a222b5fb45134965d0ab319e", "filename": "src/doc/man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fdoc%2Fman%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Fdoc%2Fman%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fman%2Frustc.1?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -55,7 +55,7 @@ Configure the output that \\fBrustc\\fR will produce. Each emission may also have\n an optional explicit output \\fIPATH\\fR specified for that particular emission\n kind. This path takes precedence over the \\fB-o\\fR option.\n .TP\n-\\fB\\-\\-print\\fR [crate\\-name|file\\-names|sysroot]\n+\\fB\\-\\-print\\fR [crate\\-name|\\:file\\-names|\\:sysroot|\\:cfg|\\:target\\-list|\\:target\\-cpus|\\:target\\-features|\\:relocation\\-models|\\:code\\-models|\\:tls\\-models|\\:target\\-spec\\-json|\\:native\\-static\\-libs]\n Comma separated list of compiler information to print on stdout.\n .TP\n \\fB\\-g\\fR"}, {"sha": "7d3e7af1a1884d2703efced9b9a365c04a2451e6", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 130, "deletions": 31, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -962,59 +962,122 @@ extern \"rust-intrinsic\" {\n     /// value is not necessarily valid to be used to actually access memory.\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n-    /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n-    /// and destination may *not* overlap.\n+    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n+    /// and destination must *not* overlap.\n     ///\n-    /// `copy_nonoverlapping` is semantically equivalent to C's `memcpy`.\n+    /// For regions of memory which might overlap, use [`copy`] instead.\n+    ///\n+    /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`].\n+    ///\n+    /// [`copy`]: ./fn.copy.html\n+    /// [`memcpy`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memcpy\n     ///\n     /// # Safety\n     ///\n-    /// Beyond requiring that the program must be allowed to access both regions\n-    /// of memory, it is Undefined Behavior for source and destination to\n-    /// overlap. Care must also be taken with the ownership of `src` and\n-    /// `dst`. This method semantically moves the values of `src` into `dst`.\n-    /// However it does not drop the contents of `dst`, or prevent the contents\n-    /// of `src` from being dropped or used.\n+    /// Behavior is undefined if any of the following conditions are violated:\n+    ///\n+    /// * The region of memory which begins at `src` and has a length of\n+    ///   `count * size_of::<T>()` bytes must be *both* valid and initialized.\n+    ///\n+    /// * The region of memory which begins at `dst` and has a length of\n+    ///   `count * size_of::<T>()` bytes must be valid (but may or may not be\n+    ///   initialized).\n+    ///\n+    /// * The two regions of memory must *not* overlap.\n+    ///\n+    /// * `src` must be properly aligned.\n+    ///\n+    /// * `dst` must be properly aligned.\n+    ///\n+    /// Additionally, if `T` is not [`Copy`], only the region at `src` *or* the\n+    /// region at `dst` can be used or dropped after calling\n+    /// `copy_nonoverlapping`.  `copy_nonoverlapping` creates bitwise copies of\n+    /// `T`, regardless of whether `T: Copy`, which can result in undefined\n+    /// behavior if both copies are used.\n+    ///\n+    /// [`Copy`]: ../marker/trait.Copy.html\n     ///\n     /// # Examples\n     ///\n-    /// A safe swap function:\n+    /// Manually implement [`Vec::append`]:\n     ///\n     /// ```\n-    /// use std::mem;\n     /// use std::ptr;\n     ///\n-    /// # #[allow(dead_code)]\n-    /// fn swap<T>(x: &mut T, y: &mut T) {\n+    /// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n+    /// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n+    ///     let src_len = src.len();\n+    ///     let dst_len = dst.len();\n+    ///\n+    ///     // Ensure that `dst` has enough capacity to hold all of `src`.\n+    ///     dst.reserve(src_len);\n+    ///\n     ///     unsafe {\n-    ///         // Give ourselves some scratch space to work with\n-    ///         let mut t: T = mem::uninitialized();\n+    ///         // The call to offset is always safe because `Vec` will never\n+    ///         // allocate more than `isize::MAX` bytes.\n+    ///         let dst = dst.as_mut_ptr().offset(dst_len as isize);\n+    ///         let src = src.as_ptr();\n+    ///\n+    ///         // The two regions cannot overlap becuase mutable references do\n+    ///         // not alias, and two different vectors cannot own the same\n+    ///         // memory.\n+    ///         ptr::copy_nonoverlapping(src, dst, src_len);\n+    ///     }\n     ///\n-    ///         // Perform the swap, `&mut` pointers never alias\n-    ///         ptr::copy_nonoverlapping(x, &mut t, 1);\n-    ///         ptr::copy_nonoverlapping(y, x, 1);\n-    ///         ptr::copy_nonoverlapping(&t, y, 1);\n+    ///     unsafe {\n+    ///         // Truncate `src` without dropping its contents.\n+    ///         src.set_len(0);\n     ///\n-    ///         // y and t now point to the same thing, but we need to completely forget `t`\n-    ///         // because it's no longer relevant.\n-    ///         mem::forget(t);\n+    ///         // Notify `dst` that it now holds the contents of `src`.\n+    ///         dst.set_len(dst_len + src_len);\n     ///     }\n     /// }\n+    ///\n+    /// let mut a = vec!['r'];\n+    /// let mut b = vec!['u', 's', 't'];\n+    ///\n+    /// append(&mut a, &mut b);\n+    ///\n+    /// assert_eq!(a, &['r', 'u', 's', 't']);\n+    /// assert!(b.is_empty());\n     /// ```\n+    ///\n+    /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n \n-    /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n+    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n     /// and destination may overlap.\n     ///\n-    /// `copy` is semantically equivalent to C's `memmove`.\n+    /// If the source and destination will *never* overlap,\n+    /// [`copy_nonoverlapping`] can be used instead.\n+    ///\n+    /// `copy` is semantically equivalent to C's [`memmove`].\n+    ///\n+    /// [`copy_nonoverlapping`]: ./fn.copy_nonoverlapping.html\n+    /// [`memmove`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memmove\n     ///\n     /// # Safety\n     ///\n-    /// Care must be taken with the ownership of `src` and `dst`.\n-    /// This method semantically moves the values of `src` into `dst`.\n-    /// However it does not drop the contents of `dst`, or prevent the contents of `src`\n-    /// from being dropped or used.\n+    /// Behavior is undefined if any of the following conditions are violated:\n+    ///\n+    /// * The region of memory which begins at `src` and has a length of\n+    ///   `count * size_of::<T>()` bytes must be *both* valid and initialized.\n+    ///\n+    /// * The region of memory which begins at `dst` and has a length of\n+    ///   `count * size_of::<T>()` bytes must be valid (but may or may not be\n+    ///   initialized).\n+    ///\n+    /// * `src` must be properly aligned.\n+    ///\n+    /// * `dst` must be properly aligned.\n+    ///\n+    /// Additionally, if `T` is not [`Copy`], only the region at `src` *or* the\n+    /// region at `dst` can be used or dropped after calling `copy`. `copy`\n+    /// creates bitwise copies of `T`, regardless of whether `T: Copy`, which\n+    /// can result in undefined behavior if both copies are used.\n+    ///\n+    /// [`Copy`]: ../marker/trait.Copy.html\n     ///\n     /// # Examples\n     ///\n@@ -1031,15 +1094,34 @@ extern \"rust-intrinsic\" {\n     ///     dst\n     /// }\n     /// ```\n-    ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n \n-    /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n-    /// bytes of memory starting at `dst` to `val`.\n+    /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n+    /// `val`.\n+    ///\n+    /// `write_bytes` is semantically equivalent to C's [`memset`].\n+    ///\n+    /// [`memset`]: https://www.gnu.org/software/libc/manual/html_node/Copying-Strings-and-Arrays.html#index-memset\n+    ///\n+    /// # Safety\n+    ///\n+    /// Behavior is undefined if any of the following conditions are violated:\n+    ///\n+    /// * The region of memory which begins at `dst` and has a length of\n+    ///   `count` bytes must be valid.\n+    ///\n+    /// * `dst` must be properly aligned.\n+    ///\n+    /// Additionally, the caller must ensure that writing `count` bytes to the\n+    /// given region of memory results in a valid value of `T`. Creating an\n+    /// invalid value of `T` can result in undefined behavior. An example is\n+    /// provided below.\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::ptr;\n     ///\n@@ -1050,6 +1132,23 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// assert_eq!(vec, [b'a', b'a', 0, 0]);\n     /// ```\n+    ///\n+    /// Creating an invalid value:\n+    ///\n+    /// ```no_run\n+    /// use std::{mem, ptr};\n+    ///\n+    /// let mut v = Box::new(0i32);\n+    ///\n+    /// unsafe {\n+    ///     // Leaks the previously held value by overwriting the `Box<T>` with\n+    ///     // a null pointer.\n+    ///     ptr::write_bytes(&mut v, 0, mem::size_of::<Box<i32>>());\n+    /// }\n+    ///\n+    /// // At this point, using or dropping `v` results in undefined behavior.\n+    /// // v = Box::new(0i32); // ERROR\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n "}, {"sha": "173dfc36f04c5527494cdf0ccbb78ec6e58972dc", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -587,7 +587,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n /// that information can be useful. For example, if you want to iterate\n /// backwards, a good start is to know where the end is.\n ///\n-/// When implementing an `ExactSizeIterator`, You must also implement\n+/// When implementing an `ExactSizeIterator`, you must also implement\n /// [`Iterator`]. When doing so, the implementation of [`size_hint`] *must*\n /// return the exact size of the iterator.\n ///"}, {"sha": "83dfac7a3a2ea4f09b5e25aeb4033acc751c40d9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 300, "deletions": 70, "changes": 370, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -10,7 +10,7 @@\n \n // FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n \n-//! Raw, unsafe pointers, `*const T`, and `*mut T`.\n+//! Manually manage memory through raw pointers.\n //!\n //! *[See also the pointer primitive types](../../std/primitive.pointer.html).*\n \n@@ -38,21 +38,62 @@ pub use intrinsics::write_bytes;\n \n /// Executes the destructor (if any) of the pointed-to value.\n ///\n-/// This has two use cases:\n+/// This is semantically equivalent to calling [`ptr::read`] and discarding\n+/// the result, but has the following advantages:\n ///\n /// * It is *required* to use `drop_in_place` to drop unsized types like\n ///   trait objects, because they can't be read out onto the stack and\n ///   dropped normally.\n ///\n-/// * It is friendlier to the optimizer to do this over `ptr::read` when\n+/// * It is friendlier to the optimizer to do this over [`ptr::read`] when\n ///   dropping manually allocated memory (e.g. when writing Box/Rc/Vec),\n ///   as the compiler doesn't need to prove that it's sound to elide the\n ///   copy.\n ///\n+/// [`ptr::read`]: ../ptr/fn.read.html\n+///\n /// # Safety\n ///\n-/// This has all the same safety problems as `ptr::read` with respect to\n-/// invalid pointers, types, and double drops.\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `to_drop` must point to valid memory.\n+///\n+/// * `to_drop` must be properly aligned.\n+///\n+/// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n+/// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n+/// foo` counts as a use because it will cause the the value to be dropped\n+/// again. [`write`] can be used to overwrite data without causing it to be\n+/// dropped.\n+///\n+/// [`Copy`]: ../marker/trait.Copy.html\n+/// [`write`]: ../ptr/fn.write.html\n+///\n+/// # Examples\n+///\n+/// Manually remove the last item from a vector:\n+///\n+/// ```\n+/// use std::ptr;\n+/// use std::rc::Rc;\n+///\n+/// let last = Rc::new(1);\n+/// let weak = Rc::downgrade(&last);\n+///\n+/// let mut v = vec![Rc::new(0), last];\n+///\n+/// unsafe {\n+///     // Without a call `drop_in_place`, the last item would never be dropped,\n+///     // and the memory it manages would be leaked.\n+///     ptr::drop_in_place(&mut v[1]);\n+///     v.set_len(1);\n+/// }\n+///\n+/// assert_eq!(v, &[0.into()]);\n+///\n+/// // Ensure that the last item was dropped.\n+/// assert!(weak.upgrade().is_none());\n+/// ```\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]\n@@ -93,17 +134,25 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n /// Swaps the values at two mutable locations of the same type, without\n /// deinitializing either.\n ///\n-/// The values pointed at by `x` and `y` may overlap, unlike `mem::swap` which\n-/// is otherwise equivalent. If the values do overlap, then the overlapping\n-/// region of memory from `x` will be used. This is demonstrated in the\n-/// examples section below.\n+/// But for the following two exceptions, this function is semantically\n+/// equivalent to [`mem::swap`]:\n+///\n+/// * It operates on raw pointers instead of references. When references are\n+///   available, [`mem::swap`] should be preferred.\n+///\n+/// * The two pointed-to values may overlap. If the values do overlap, then the\n+///   overlapping region of memory from `x` will be used. This is demonstrated\n+///   in the examples below.\n+///\n+/// [`mem::swap`]: ../mem/fn.swap.html\n ///\n /// # Safety\n ///\n-/// This function copies the memory through the raw pointers passed to it\n-/// as arguments.\n+/// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// Ensure that these pointers are valid before calling `swap`.\n+/// * `x` and `y` must point to valid, initialized memory.\n+///\n+/// * `x` and `y` must be properly aligned.\n ///\n /// # Examples\n ///\n@@ -239,13 +288,39 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     }\n }\n \n-/// Replaces the value at `dest` with `src`, returning the old\n-/// value, without dropping either.\n+/// Replaces the value at `dest` with `src`, returning the old value, without\n+/// dropping either.\n+///\n+/// This function is semantically equivalent to [`mem::replace`] except that it\n+/// operates on raw pointers instead of references. When references are\n+/// available, [`mem::replace`] should be preferred.\n+///\n+/// [`mem::replace`]: ../mem/fn.replace.html\n ///\n /// # Safety\n ///\n-/// This is only unsafe because it accepts a raw pointer.\n-/// Otherwise, this operation is identical to `mem::replace`.\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `dest` must point to valid, initialized memory.\n+///\n+/// * `dest` must be properly aligned.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut rust = vec!['b', 'u', 's', 't'];\n+///\n+/// // `mem::replace` would have the same effect without requiring the unsafe\n+/// // block.\n+/// let b = unsafe {\n+///     ptr::replace(&mut rust[0], 'r')\n+/// };\n+///\n+/// assert_eq!(b, 'b');\n+/// assert_eq!(rust, &['r', 'u', 's', 't']);\n+/// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n@@ -258,14 +333,23 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n ///\n /// # Safety\n ///\n-/// Beyond accepting a raw pointer, this is unsafe because it semantically\n-/// moves the value out of `src` without preventing further usage of `src`.\n-/// If `T` is not `Copy`, then care must be taken to ensure that the value at\n-/// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n-/// because it will attempt to drop the value previously at `*src`.\n+/// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// The pointer must be aligned; use `read_unaligned` if that is not the case.\n+/// * `src` must point to valid, initialized memory.\n+///\n+/// * `src` must be properly aligned. Use [`read_unaligned`] if this is not the\n+///   case.\n+///\n+/// Additionally, if `T` is not [`Copy`], only the returned value *or* the\n+/// pointed-to value can be used or dropped after calling `read`. `read` creates\n+/// a bitwise copy of `T`, regardless of whether `T: Copy`, which can result\n+/// in undefined behavior if both copies are used. Note that `*src = foo` counts\n+/// as a use because it will attempt to drop the value previously at `*src`.\n+/// [`write`] can be used to overwrite data without causing it to be dropped.\n+///\n+/// [`Copy`]: ../marker/trait.Copy.html\n+/// [`read_unaligned`]: ./fn.read_unaligned.html\n+/// [`write`]: ./fn.write.html\n ///\n /// # Examples\n ///\n@@ -279,6 +363,44 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n ///     assert_eq!(std::ptr::read(y), 12);\n /// }\n /// ```\n+///\n+/// Manually implement [`mem::swap`]:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// fn swap<T>(a: &mut T, b: &mut T) {\n+///     unsafe {\n+///         // Create a bitwise copy of the value at `a` in `tmp`.\n+///         let tmp = ptr::read(a);\n+///\n+///         // Exiting at this point (either by explicitly returning or by\n+///         // calling a function which panics) would cause the value in `tmp` to\n+///         // be dropped while the same value is still referenced by `a`. This\n+///         // could trigger undefined behavior if `T` is not `Copy`.\n+///\n+///         // Create a bitwise copy of the value at `b` in `a`.\n+///         // This is safe because mutable references cannot alias.\n+///         ptr::copy_nonoverlapping(b, a, 1);\n+///\n+///         // As above, exiting here could trigger undefined behavior because\n+///         // the same value is referenced by `a` and `b`.\n+///\n+///         // Move `tmp` into `b`.\n+///         ptr::write(b, tmp);\n+///     }\n+/// }\n+///\n+/// let mut foo = \"foo\".to_owned();\n+/// let mut bar = \"bar\".to_owned();\n+///\n+/// swap(&mut foo, &mut bar);\n+///\n+/// assert_eq!(foo, \"bar\");\n+/// assert_eq!(bar, \"foo\");\n+/// ```\n+///\n+/// [`mem::swap`]: ../mem/fn.swap.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n@@ -290,28 +412,62 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// Reads the value from `src` without moving it. This leaves the\n /// memory in `src` unchanged.\n ///\n-/// Unlike `read`, the pointer may be unaligned.\n+/// Unlike [`read`], `read_unaligned` works with unaligned pointers.\n+///\n+/// [`read`]: ./fn.read.html\n ///\n /// # Safety\n ///\n-/// Beyond accepting a raw pointer, this is unsafe because it semantically\n-/// moves the value out of `src` without preventing further usage of `src`.\n-/// If `T` is not `Copy`, then care must be taken to ensure that the value at\n-/// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n-/// because it will attempt to drop the value previously at `*src`.\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must point to valid, initialized memory.\n+///\n+/// Additionally, if `T` is not [`Copy`], only the returned value *or* the\n+/// pointed-to value can be used or dropped after calling `read_unaligned`.\n+/// `read_unaligned` creates a bitwise copy of `T`, regardless of whether `T:\n+/// Copy`, and this can result in undefined behavior if both copies are used.\n+/// Note that `*src = foo` counts as a use because it will attempt to drop the\n+/// value previously at `*src`.  [`write_unaligned`] can be used to overwrite\n+/// data without causing it to be dropped.\n+///\n+/// [`Copy`]: ../marker/trait.Copy.html\n+/// [`write_unaligned`]: ./fn.write_unaligned.html\n ///\n /// # Examples\n ///\n-/// Basic usage:\n+/// Access members of a packed struct by reference:\n ///\n /// ```\n-/// let x = 12;\n-/// let y = &x as *const i32;\n+/// use std::ptr;\n ///\n-/// unsafe {\n-///     assert_eq!(std::ptr::read_unaligned(y), 12);\n+/// #[repr(packed, C)]\n+/// #[derive(Default)]\n+/// struct Packed {\n+///     _padding: u8,\n+///     unaligned: u32,\n /// }\n+///\n+/// let x = Packed {\n+///     _padding: 0x00,\n+///     unaligned: 0x01020304,\n+/// };\n+///\n+/// let v = unsafe {\n+///     // Take a reference to a 32-bit integer which is not aligned.\n+///     let unaligned = &x.unaligned;\n+///\n+///     // Dereferencing normally will emit an unaligned load instruction,\n+///     // causing undefined behavior.\n+///     // let v = *unaligned; // ERROR\n+///\n+///     // Instead, use `read_unaligned` to read improperly aligned values.\n+///     let v = ptr::read_unaligned(unaligned);\n+///\n+///     v\n+/// };\n+///\n+/// // Accessing unaligned values directly is safe.\n+/// assert!(x.unaligned == v);\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n@@ -326,21 +482,28 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// Overwrites a memory location with the given value without reading or\n /// dropping the old value.\n ///\n-/// # Safety\n-///\n-/// This operation is marked unsafe because it accepts a raw pointer.\n-///\n-/// It does not drop the contents of `dst`. This is safe, but it could leak\n+/// `write` does not drop the contents of `dst`. This is safe, but it could leak\n /// allocations or resources, so care must be taken not to overwrite an object\n /// that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n /// location pointed to by `dst`.\n ///\n /// This is appropriate for initializing uninitialized memory, or overwriting\n-/// memory that has previously been `read` from.\n+/// memory that has previously been [`read`] from.\n+///\n+/// [`read`]: ./fn.read.html\n+///\n+/// # Safety\n ///\n-/// The pointer must be aligned; use `write_unaligned` if that is not the case.\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `dst` must point to valid memory.\n+///\n+/// * `dst` must be properly aligned. Use [`write_unaligned`] if this is not the\n+///   case.\n+///\n+/// [`write_unaligned`]: ./fn.write_unaligned.html\n ///\n /// # Examples\n ///\n@@ -356,6 +519,30 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n ///     assert_eq!(std::ptr::read(y), 12);\n /// }\n /// ```\n+///\n+/// Manually implement [`mem::swap`]:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// fn swap<T>(a: &mut T, b: &mut T) {\n+///     unsafe {\n+///         let tmp = ptr::read(a);\n+///         ptr::copy_nonoverlapping(b, a, 1);\n+///         ptr::write(b, tmp);\n+///     }\n+/// }\n+///\n+/// let mut foo = \"foo\".to_owned();\n+/// let mut bar = \"bar\".to_owned();\n+///\n+/// swap(&mut foo, &mut bar);\n+///\n+/// assert_eq!(foo, \"bar\");\n+/// assert_eq!(bar, \"foo\");\n+/// ```\n+///\n+/// [`mem::swap`]: ../mem/fn.swap.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n@@ -365,36 +552,58 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Overwrites a memory location with the given value without reading or\n /// dropping the old value.\n ///\n-/// Unlike `write`, the pointer may be unaligned.\n-///\n-/// # Safety\n+/// Unlike [`write`], the pointer may be unaligned.\n ///\n-/// This operation is marked unsafe because it accepts a raw pointer.\n-///\n-/// It does not drop the contents of `dst`. This is safe, but it could leak\n-/// allocations or resources, so care must be taken not to overwrite an object\n-/// that should be dropped.\n+/// `write_unaligned` does not drop the contents of `dst`. This is safe, but it\n+/// could leak allocations or resources, so care must be taken not to overwrite\n+/// an object that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n /// location pointed to by `dst`.\n ///\n /// This is appropriate for initializing uninitialized memory, or overwriting\n-/// memory that has previously been `read` from.\n+/// memory that has previously been read with [`read_unaligned`].\n+///\n+/// [`write`]: ./fn.write.html\n+/// [`read_unaligned`]: ./fn.read_unaligned.html\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `dst` must point to valid memory.\n ///\n /// # Examples\n ///\n-/// Basic usage:\n+/// Access fields in a packed struct:\n ///\n /// ```\n-/// let mut x = 0;\n-/// let y = &mut x as *mut i32;\n-/// let z = 12;\n+/// use std::{mem, ptr};\n+///\n+/// #[repr(packed, C)]\n+/// #[derive(Default)]\n+/// struct Packed {\n+///     _padding: u8,\n+///     unaligned: u32,\n+/// }\n+///\n+/// let v = 0x01020304;\n+/// let mut x: Packed = unsafe { mem::zeroed() };\n ///\n /// unsafe {\n-///     std::ptr::write_unaligned(y, z);\n-///     assert_eq!(std::ptr::read_unaligned(y), 12);\n+///     // Take a reference to a 32-bit integer which is not aligned.\n+///     let unaligned = &mut x.unaligned;\n+///\n+///     // Dereferencing normally will emit an unaligned store instruction,\n+///     // causing undefined behavior.\n+///     // *unaligned = v; // ERROR\n+///\n+///     // Instead, use `write_unaligned` to write improperly aligned values.\n+///     ptr::write_unaligned(unaligned, v);\n /// }\n-/// ```\n+///\n+/// // Accessing unaligned values directly is safe.\n+/// assert!(x.unaligned == v);\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n@@ -411,6 +620,11 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n+/// Memory read with `read_volatile` should almost always be written to using\n+/// [`write_volatile`].\n+///\n+/// [`write_volatile`]: ./fn.write_volatile.html\n+///\n /// # Notes\n ///\n /// Rust does not currently have a rigorously and formally defined memory model,\n@@ -427,12 +641,19 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// # Safety\n ///\n-/// Beyond accepting a raw pointer, this is unsafe because it semantically\n-/// moves the value out of `src` without preventing further usage of `src`.\n-/// If `T` is not `Copy`, then care must be taken to ensure that the value at\n-/// `src` is not used before the data is overwritten again (e.g. with `write`,\n-/// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n-/// because it will attempt to drop the value previously at `*src`.\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must point to valid, initialized memory.\n+///\n+/// * `src` must be properly aligned.\n+///\n+/// Like [`read`], `read_volatile` creates a bitwise copy of the pointed-to\n+/// object, regardless of whether `T` is [`Copy`]. Using both values can cause\n+/// undefined behavior. However, storing non-[`Copy`] data in I/O memory is\n+/// almost certainly incorrect.\n+///\n+/// [`Copy`]: ../marker/trait.Copy.html\n+/// [`read`]: ./fn.read.html\n ///\n /// # Examples\n ///\n@@ -459,6 +680,18 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n+/// Memory written with `write_volatile` should almost always be read from using\n+/// [`read_volatile`].\n+///\n+/// `write_volatile` does not drop the contents of `dst`. This is safe, but it\n+/// could leak allocations or resources, so care must be taken not to overwrite\n+/// an object that should be dropped.\n+///\n+/// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n+/// location pointed to by `dst`.\n+///\n+/// [`read_volatile`]: ./fn.read_volatile.html\n+///\n /// # Notes\n ///\n /// Rust does not currently have a rigorously and formally defined memory model,\n@@ -475,14 +708,11 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// # Safety\n ///\n-/// This operation is marked unsafe because it accepts a raw pointer.\n+/// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// It does not drop the contents of `dst`. This is safe, but it could leak\n-/// allocations or resources, so care must be taken not to overwrite an object\n-/// that should be dropped.\n+/// * `dst` must point to valid memory.\n ///\n-/// This is appropriate for initializing uninitialized memory, or overwriting\n-/// memory that has previously been `read` from.\n+/// * `dst` must be properly aligned.\n ///\n /// # Examples\n ///"}, {"sha": "7352c14490d1aaeaaf3f35551447827a80c9e97a", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -14,6 +14,7 @@ use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n use ty::{self, Ty, TyInfer, TyVar};\n use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n@@ -86,7 +87,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn need_type_info(&self, body_id: Option<hir::BodyId>, span: Span, ty: Ty<'tcx>) {\n+    pub fn need_type_info_err(&self,\n+                            body_id: Option<hir::BodyId>,\n+                            span: Span,\n+                            ty: Ty<'tcx>)\n+                            -> DiagnosticBuilder<'gcx> {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n         let name = self.extract_type_name(&ty);\n \n@@ -142,6 +147,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             err.span_label(target_span, label_message);\n         }\n \n-        err.emit();\n+        err\n     }\n }"}, {"sha": "f6ec01546c18d31ca457c75028db21b1540c994e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -1234,7 +1234,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         self.tcx.lang_items().sized_trait()\n                         .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                     {\n-                        self.need_type_info(body_id, span, self_ty);\n+                        self.need_type_info_err(body_id, span, self_ty).emit();\n                     } else {\n                         let mut err = struct_span_err!(self.tcx.sess,\n                                                         span, E0283,\n@@ -1251,7 +1251,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    self.need_type_info(body_id, span, ty);\n+                    self.need_type_info_err(body_id, span, ty).emit();\n                 }\n             }\n \n@@ -1262,9 +1262,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                     // both must be type variables, or the other would've been instantiated\n                     assert!(a.is_ty_var() && b.is_ty_var());\n-                    self.need_type_info(body_id,\n-                                        obligation.cause.span,\n-                                        a);\n+                    self.need_type_info_err(body_id,\n+                                            obligation.cause.span,\n+                                            a).emit();\n                 }\n             }\n "}, {"sha": "7b94170ef6d992f1cbc71dafeb6ed1edd65bab69", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -16,7 +16,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.15\"\n+rls-data = \"0.16\"\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "2ef294fe43089f8fe9d4cd901f807798478733d9", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 92, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -268,80 +268,6 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         }\n     }\n \n-    fn process_def_kind(\n-        &mut self,\n-        ref_id: NodeId,\n-        span: Span,\n-        sub_span: Option<Span>,\n-        def_id: DefId,\n-    ) {\n-        if self.span.filter_generated(sub_span, span) {\n-            return;\n-        }\n-\n-        let def = self.save_ctxt.get_path_def(ref_id);\n-        match def {\n-            HirDef::Mod(_) => {\n-                let span = self.span_from_span(sub_span.expect(\"No span found for mod ref\"));\n-                self.dumper.dump_ref(Ref {\n-                    kind: RefKind::Mod,\n-                    span,\n-                    ref_id: ::id_from_def_id(def_id),\n-                });\n-            }\n-            HirDef::Struct(..) |\n-            HirDef::Variant(..) |\n-            HirDef::Union(..) |\n-            HirDef::Enum(..) |\n-            HirDef::TyAlias(..) |\n-            HirDef::TyForeign(..) |\n-            HirDef::TraitAlias(..) |\n-            HirDef::Trait(_) => {\n-                let span = self.span_from_span(sub_span.expect(\"No span found for type ref\"));\n-                self.dumper.dump_ref(Ref {\n-                    kind: RefKind::Type,\n-                    span,\n-                    ref_id: ::id_from_def_id(def_id),\n-                });\n-            }\n-            HirDef::Static(..) |\n-            HirDef::Const(..) |\n-            HirDef::StructCtor(..) |\n-            HirDef::VariantCtor(..) => {\n-                let span = self.span_from_span(sub_span.expect(\"No span found for var ref\"));\n-                self.dumper.dump_ref(Ref {\n-                    kind: RefKind::Variable,\n-                    span,\n-                    ref_id: ::id_from_def_id(def_id),\n-                });\n-            }\n-            HirDef::Fn(..) => {\n-                let span = self.span_from_span(sub_span.expect(\"No span found for fn ref\"));\n-                self.dumper.dump_ref(Ref {\n-                    kind: RefKind::Function,\n-                    span,\n-                    ref_id: ::id_from_def_id(def_id),\n-                });\n-            }\n-            // With macros 2.0, we can legitimately get a ref to a macro, but\n-            // we don't handle it properly for now (FIXME).\n-            HirDef::Macro(..) => {}\n-            HirDef::Local(..) |\n-            HirDef::Upvar(..) |\n-            HirDef::SelfTy(..) |\n-            HirDef::Label(_) |\n-            HirDef::TyParam(..) |\n-            HirDef::Method(..) |\n-            HirDef::AssociatedTy(..) |\n-            HirDef::AssociatedConst(..) |\n-            HirDef::PrimTy(_) |\n-            HirDef::GlobalAsm(_) |\n-            HirDef::Err => {\n-                span_bug!(span, \"process_def_kind for unexpected item: {:?}\", def);\n-            }\n-        }\n-    }\n-\n     fn process_formals(&mut self, formals: &'l [ast::Arg], qualname: &str) {\n         for arg in formals {\n             self.visit_pat(&arg.pat);\n@@ -1348,29 +1274,17 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 };\n \n                 let sub_span = self.span.span_for_last_ident(path.span);\n-                let mod_id = match self.lookup_def_id(id) {\n-                    Some(def_id) => {\n-                        self.process_def_kind(id, path.span, sub_span, def_id);\n-                        Some(def_id)\n-                    }\n-                    None => None,\n-                };\n-\n-                // 'use' always introduces an alias, if there is not an explicit\n-                // one, there is an implicit one.\n-                let sub_span = match self.span.sub_span_after_keyword(use_tree.span,\n-                                                                      keywords::As) {\n-                    Some(sub_span) => Some(sub_span),\n-                    None => sub_span,\n-                };\n+                let alias_span = self.span.sub_span_after_keyword(use_tree.span, keywords::As);\n+                let ref_id = self.lookup_def_id(id);\n \n                 if !self.span.filter_generated(sub_span, path.span) {\n-                    let span =\n-                        self.span_from_span(sub_span.expect(\"No span found for use\"));\n+                    let span = self.span_from_span(sub_span.expect(\"No span found for use\"));\n+                    let alias_span = alias_span.map(|sp| self.span_from_span(sp));\n                     self.dumper.import(&access, Import {\n                         kind: ImportKind::Use,\n-                        ref_id: mod_id.map(|id| ::id_from_def_id(id)),\n+                        ref_id: ref_id.map(|id| ::id_from_def_id(id)),\n                         span,\n+                        alias_span,\n                         name: ident.to_string(),\n                         value: String::new(),\n                         parent,\n@@ -1407,6 +1321,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         kind: ImportKind::GlobUse,\n                         ref_id: None,\n                         span,\n+                        alias_span: None,\n                         name: \"*\".to_owned(),\n                         value: names.join(\", \"),\n                         parent,\n@@ -1500,6 +1415,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                             kind: ImportKind::ExternCrate,\n                             ref_id: None,\n                             span,\n+                            alias_span: None,\n                             name: item.ident.to_string(),\n                             value: String::new(),\n                             parent,"}, {"sha": "2d10e84be3a0a34a1a07b691f20c9c72d36dc220", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -3058,7 +3058,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                    base: &'gcx hir::Expr,\n                    field: &Spanned<ast::Name>) -> Ty<'tcx> {\n         let expr_t = self.check_expr_with_needs(base, needs);\n-        let expr_t = self.structurally_resolved_type(expr.span,\n+        let expr_t = self.structurally_resolved_type(base.span,\n                                                      expr_t);\n         let mut private_candidate = None;\n         let mut autoderef = self.autoderef(expr.span, expr_t);\n@@ -4077,7 +4077,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               } else if idx_t.references_error() {\n                   idx_t\n               } else {\n-                  let base_t = self.structurally_resolved_type(expr.span, base_t);\n+                  let base_t = self.structurally_resolved_type(base.span, base_t);\n                   match self.lookup_indexing(expr, base, base_t, idx_t, needs) {\n                       Some((index_ty, element_ty)) => {\n                           // two-phase not needed because index_ty is never mutable\n@@ -5049,7 +5049,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.need_type_info((**self).body_id, sp, ty);\n+                self.need_type_info_err((**self).body_id, sp, ty)\n+                    .note(\"type must be known at this point\")\n+                    .emit();\n             }\n             self.demand_suptype(sp, self.tcx.types.err, ty);\n             self.tcx.types.err"}, {"sha": "b0ee1154e863b37999a2f8626341a9454c6fc515", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -593,7 +593,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info(Some(self.body.id()), self.span.to_span(&self.tcx), t);\n+                .need_type_info_err(Some(self.body.id()), self.span.to_span(&self.tcx), t).emit();\n         }\n     }\n }"}, {"sha": "96a2194eeeefda76809b53d0d986462a17ca6e71", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -10,3 +10,4 @@ path = \"lib.rs\"\n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n tempdir = \"0.3\"\n+minifier = \"0.0.11\""}, {"sha": "386e6ca5c773c733bef4562c5af532a837dd9619", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -17,7 +17,7 @@ pub use self::ItemEnum::*;\n pub use self::TyParamBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n-pub use self::Visibility::*;\n+pub use self::Visibility::{Public, Inherited};\n \n use syntax;\n use rustc_target::spec::abi::Abi;\n@@ -2973,11 +2973,22 @@ impl<'tcx> Clean<Item> for ty::FieldDef {\n pub enum Visibility {\n     Public,\n     Inherited,\n+    Crate,\n+    Restricted(DefId, Path),\n }\n \n impl Clean<Option<Visibility>> for hir::Visibility {\n-    fn clean(&self, _: &DocContext) -> Option<Visibility> {\n-        Some(if *self == hir::Visibility::Public { Public } else { Inherited })\n+    fn clean(&self, cx: &DocContext) -> Option<Visibility> {\n+        Some(match *self {\n+            hir::Visibility::Public => Visibility::Public,\n+            hir::Visibility::Inherited => Visibility::Inherited,\n+            hir::Visibility::Crate => Visibility::Crate,\n+            hir::Visibility::Restricted { ref path, .. } => {\n+                let path = path.clean(cx);\n+                let did = register_def(cx, path.def);\n+                Visibility::Restricted(did, path)\n+            }\n+        })\n     }\n }\n "}, {"sha": "2db57c97dd4667b33c6fd9bcf9acbfe2c518d4de", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -927,8 +927,19 @@ impl<'a> fmt::Display for Method<'a> {\n impl<'a> fmt::Display for VisSpace<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.get() {\n-            Some(clean::Public) => write!(f, \"pub \"),\n-            Some(clean::Inherited) | None => Ok(())\n+            Some(clean::Public) => f.write_str(\"pub \"),\n+            Some(clean::Inherited) | None => Ok(()),\n+            Some(clean::Visibility::Crate) => write!(f, \"pub(crate) \"),\n+            Some(clean::Visibility::Restricted(did, ref path)) => {\n+                f.write_str(\"pub(\")?;\n+                if path.segments.len() != 1\n+                    || (path.segments[0].name != \"self\" && path.segments[0].name != \"super\")\n+                {\n+                    f.write_str(\"in \")?;\n+                }\n+                resolved_path(f, did, path, true, false)?;\n+                f.write_str(\") \")\n+            }\n         }\n     }\n }"}, {"sha": "ab3af73cf17474a699d44160ac5502782227b754", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -76,6 +76,8 @@ use html::item_type::ItemType;\n use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use html::{highlight, layout};\n \n+use minifier;\n+\n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n \n@@ -513,7 +515,8 @@ pub fn run(mut krate: clean::Crate,\n            css_file_extension: Option<PathBuf>,\n            renderinfo: RenderInfo,\n            sort_modules_alphabetically: bool,\n-           themes: Vec<PathBuf>) -> Result<(), Error> {\n+           themes: Vec<PathBuf>,\n+           enable_minification: bool) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -665,7 +668,7 @@ pub fn run(mut krate: clean::Crate,\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n     CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n \n-    write_shared(&cx, &krate, &*cache, index)?;\n+    write_shared(&cx, &krate, &*cache, index, enable_minification)?;\n \n     // And finally render the whole crate's documentation\n     cx.krate(krate)\n@@ -744,7 +747,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n fn write_shared(cx: &Context,\n                 krate: &clean::Crate,\n                 cache: &Cache,\n-                search_index: String) -> Result<(), Error> {\n+                search_index: String,\n+                enable_minification: bool) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n@@ -836,16 +840,20 @@ themePicker.onblur = handleThemeButtonsBlur;\n                        .join(\",\")).as_bytes(),\n     )?;\n \n-    write(cx.dst.join(&format!(\"main{}.js\", cx.shared.resource_suffix)),\n-                      include_bytes!(\"static/main.js\"))?;\n-    write(cx.dst.join(&format!(\"settings{}.js\", cx.shared.resource_suffix)),\n-                      include_bytes!(\"static/settings.js\"))?;\n+    write_minify(cx.dst.join(&format!(\"main{}.js\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/main.js\"),\n+                 enable_minification)?;\n+    write_minify(cx.dst.join(&format!(\"settings{}.js\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/settings.js\"),\n+                 enable_minification)?;\n \n     {\n         let mut data = format!(\"var resourcesSuffix = \\\"{}\\\";\\n\",\n-                               cx.shared.resource_suffix).into_bytes();\n-        data.extend_from_slice(include_bytes!(\"static/storage.js\"));\n-        write(cx.dst.join(&format!(\"storage{}.js\", cx.shared.resource_suffix)), &data)?;\n+                               cx.shared.resource_suffix);\n+        data.push_str(include_str!(\"static/storage.js\"));\n+        write_minify(cx.dst.join(&format!(\"storage{}.js\", cx.shared.resource_suffix)),\n+                     &data,\n+                     enable_minification)?;\n     }\n \n     if let Some(ref css) = cx.shared.css_file_extension {\n@@ -1042,6 +1050,14 @@ fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n     Ok(try_err!(fs::write(&dst, contents), &dst))\n }\n \n+fn write_minify(dst: PathBuf, contents: &str, enable_minification: bool) -> Result<(), Error> {\n+    if enable_minification {\n+        write(dst, minifier::js::minify(contents).as_bytes())\n+    } else {\n+        write(dst, contents.as_bytes())\n+    }\n+}\n+\n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree. Each component in the cleaned path will be passed as an"}, {"sha": "e0235bfc6945c38bf304ee47ee78423c1092c270", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -202,7 +202,7 @@\n                 onEach(e.getElementsByTagName('span'), function(i_e) {\n                     removeClass(i_e, 'line-highlighted');\n                 });\n-            })\n+            });\n             for (i = from; i <= to; ++i) {\n                 addClass(document.getElementById(i), 'line-highlighted');\n             }\n@@ -1972,7 +1972,7 @@\n               hasClass(next.nextElementSibling, 'docblock')))) {\n             insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n         }\n-    }\n+    };\n     onEach(document.getElementsByClassName('method'), func);\n     onEach(document.getElementsByClassName('impl'), func);\n     onEach(document.getElementsByClassName('impl-items'), function(e) {"}, {"sha": "d4244bfdba075fd2e84666489ab15b37a9a85f2a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -48,6 +48,7 @@ extern crate test as testing;\n extern crate rustc_errors as errors;\n extern crate pulldown_cmark;\n extern crate tempdir;\n+extern crate minifier;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n@@ -299,6 +300,11 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                      \"How errors and other messages are produced\",\n                      \"human|json|short\")\n         }),\n+        unstable(\"disable-minification\", |o| {\n+             o.optflag(\"\",\n+                       \"disable-minification\",\n+                       \"Disable minification applied on JS files\")\n+        }),\n     ]\n }\n \n@@ -480,6 +486,7 @@ pub fn main_args(args: &[String]) -> isize {\n     let linker = matches.opt_str(\"linker\").map(PathBuf::from);\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n+    let enable_minification = !matches.opt_present(\"disable-minification\");\n \n     let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n     let edition = match edition.parse() {\n@@ -523,7 +530,8 @@ pub fn main_args(args: &[String]) -> isize {\n                                   css_file_extension,\n                                   renderinfo,\n                                   sort_modules_alphabetically,\n-                                  themes)\n+                                  themes,\n+                                  enable_minification)\n                     .expect(\"failed to generate documentation\");\n                 0\n             }"}, {"sha": "7314d32b0206afaf21f55ca3a4cc925a0bf6bd2a", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -49,6 +49,8 @@ impl f32 {\n \n     /// Returns the largest integer less than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.99_f32;\n     /// let g = 3.0_f32;\n@@ -80,6 +82,8 @@ impl f32 {\n \n     /// Returns the smallest integer greater than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.01_f32;\n     /// let g = 4.0_f32;\n@@ -100,6 +104,8 @@ impl f32 {\n     /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f32;\n     /// let g = -3.3_f32;\n@@ -115,6 +121,8 @@ impl f32 {\n \n     /// Returns the integer part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f32;\n     /// let g = -3.7_f32;\n@@ -130,6 +138,8 @@ impl f32 {\n \n     /// Returns the fractional part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -148,6 +158,8 @@ impl f32 {\n     /// Computes the absolute value of `self`. Returns `NAN` if the\n     /// number is `NAN`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -174,6 +186,8 @@ impl f32 {\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n     /// - `NAN` if the number is `NAN`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -200,6 +214,8 @@ impl f32 {\n     /// Using `mul_add` can be more performant than an unfused multiply-add if\n     /// the target architecture has a dedicated `fma` CPU instruction.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -225,6 +241,8 @@ impl f32 {\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n@@ -248,6 +266,8 @@ impl f32 {\n     ///\n     /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n@@ -273,6 +293,8 @@ impl f32 {\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -289,6 +311,8 @@ impl f32 {\n \n     /// Raises a number to a floating point power.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -311,6 +335,8 @@ impl f32 {\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -334,6 +360,8 @@ impl f32 {\n \n     /// Returns `e^(self)`, (the exponential function).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -358,6 +386,8 @@ impl f32 {\n \n     /// Returns `2^(self)`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -376,6 +406,8 @@ impl f32 {\n \n     /// Returns the natural logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -404,6 +436,8 @@ impl f32 {\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -420,6 +454,8 @@ impl f32 {\n \n     /// Returns the base 2 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -441,6 +477,8 @@ impl f32 {\n \n     /// Returns the base 10 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -466,6 +504,8 @@ impl f32 {\n     /// * If `self <= other`: `0:0`\n     /// * Else: `self - other`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -493,6 +533,8 @@ impl f32 {\n \n     /// Takes the cubic root of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -512,6 +554,8 @@ impl f32 {\n     /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -531,6 +575,8 @@ impl f32 {\n \n     /// Computes the sine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -552,6 +598,8 @@ impl f32 {\n \n     /// Computes the cosine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -573,6 +621,8 @@ impl f32 {\n \n     /// Computes the tangent of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -591,6 +641,8 @@ impl f32 {\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -611,6 +663,8 @@ impl f32 {\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -630,6 +684,8 @@ impl f32 {\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -653,6 +709,8 @@ impl f32 {\n     /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -682,6 +740,8 @@ impl f32 {\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -703,6 +763,8 @@ impl f32 {\n     /// Returns `e^(self) - 1` in a way that is accurate even if the\n     /// number is close to zero.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -722,6 +784,8 @@ impl f32 {\n     /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n     /// the operations were performed separately.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -740,6 +804,8 @@ impl f32 {\n \n     /// Hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -761,6 +827,8 @@ impl f32 {\n \n     /// Hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -782,6 +850,8 @@ impl f32 {\n \n     /// Hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -803,6 +873,8 @@ impl f32 {\n \n     /// Inverse hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -825,6 +897,8 @@ impl f32 {\n \n     /// Inverse hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -846,6 +920,8 @@ impl f32 {\n \n     /// Inverse hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///"}, {"sha": "75edba8979f9a1993515bf2c492381e61a5d13e5", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -49,6 +49,8 @@ impl f64 {\n \n     /// Returns the largest integer less than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.99_f64;\n     /// let g = 3.0_f64;\n@@ -64,6 +66,8 @@ impl f64 {\n \n     /// Returns the smallest integer greater than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.01_f64;\n     /// let g = 4.0_f64;\n@@ -80,6 +84,8 @@ impl f64 {\n     /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f64;\n     /// let g = -3.3_f64;\n@@ -95,6 +101,8 @@ impl f64 {\n \n     /// Returns the integer part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f64;\n     /// let g = -3.7_f64;\n@@ -110,6 +118,8 @@ impl f64 {\n \n     /// Returns the fractional part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 3.5_f64;\n     /// let y = -3.5_f64;\n@@ -126,6 +136,8 @@ impl f64 {\n     /// Computes the absolute value of `self`. Returns `NAN` if the\n     /// number is `NAN`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -152,6 +164,8 @@ impl f64 {\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n     /// - `NAN` if the number is `NAN`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -178,6 +192,8 @@ impl f64 {\n     /// Using `mul_add` can be more performant than an unfused multiply-add if\n     /// the target architecture has a dedicated `fma` CPU instruction.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let m = 10.0_f64;\n     /// let x = 4.0_f64;\n@@ -201,6 +217,8 @@ impl f64 {\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n@@ -224,6 +242,8 @@ impl f64 {\n     ///\n     /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n@@ -248,6 +268,8 @@ impl f64 {\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let abs_difference = (x.powi(2) - x*x).abs();\n@@ -262,6 +284,8 @@ impl f64 {\n \n     /// Raises a number to a floating point power.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let abs_difference = (x.powf(2.0) - x*x).abs();\n@@ -278,6 +302,8 @@ impl f64 {\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let positive = 4.0_f64;\n     /// let negative = -4.0_f64;\n@@ -299,6 +325,8 @@ impl f64 {\n \n     /// Returns `e^(self)`, (the exponential function).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let one = 1.0_f64;\n     /// // e^1\n@@ -317,6 +345,8 @@ impl f64 {\n \n     /// Returns `2^(self)`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 2.0_f64;\n     ///\n@@ -333,6 +363,8 @@ impl f64 {\n \n     /// Returns the natural logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let one = 1.0_f64;\n     /// // e^1\n@@ -355,6 +387,8 @@ impl f64 {\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let five = 5.0_f64;\n     ///\n@@ -369,6 +403,8 @@ impl f64 {\n \n     /// Returns the base 2 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let two = 2.0_f64;\n     ///\n@@ -390,6 +426,8 @@ impl f64 {\n \n     /// Returns the base 10 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let ten = 10.0_f64;\n     ///\n@@ -409,6 +447,8 @@ impl f64 {\n     /// * If `self <= other`: `0:0`\n     /// * Else: `self - other`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 3.0_f64;\n     /// let y = -3.0_f64;\n@@ -434,6 +474,8 @@ impl f64 {\n \n     /// Takes the cubic root of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 8.0_f64;\n     ///\n@@ -451,6 +493,8 @@ impl f64 {\n     /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let y = 3.0_f64;\n@@ -468,6 +512,8 @@ impl f64 {\n \n     /// Computes the sine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -485,6 +531,8 @@ impl f64 {\n \n     /// Computes the cosine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -502,6 +550,8 @@ impl f64 {\n \n     /// Computes the tangent of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -520,6 +570,8 @@ impl f64 {\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -540,6 +592,8 @@ impl f64 {\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -559,6 +613,8 @@ impl f64 {\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 1.0_f64;\n     ///\n@@ -580,6 +636,8 @@ impl f64 {\n     /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -609,6 +667,8 @@ impl f64 {\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -630,6 +690,8 @@ impl f64 {\n     /// Returns `e^(self) - 1` in a way that is accurate even if the\n     /// number is close to zero.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 7.0_f64;\n     ///\n@@ -647,6 +709,8 @@ impl f64 {\n     /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n     /// the operations were performed separately.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -665,6 +729,8 @@ impl f64 {\n \n     /// Hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -686,6 +752,8 @@ impl f64 {\n \n     /// Hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -707,6 +775,8 @@ impl f64 {\n \n     /// Hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -728,6 +798,8 @@ impl f64 {\n \n     /// Inverse hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let f = x.sinh().asinh();\n@@ -748,6 +820,8 @@ impl f64 {\n \n     /// Inverse hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let f = x.cosh().acosh();\n@@ -767,6 +841,8 @@ impl f64 {\n \n     /// Inverse hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///"}, {"sha": "be031ea98c9d2ecb4b8deabc1dca001ebca1a5d1", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -13,7 +13,7 @@\n //! `[1]` Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n //! *Macros that work together: Compile-time bindings, partial expansion,\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n-//! DOI=10.1017/S0956796812000093 <http://dx.doi.org/10.1017/S0956796812000093>\n+//! DOI=10.1017/S0956796812000093 <https://doi.org/10.1017/S0956796812000093>\n \n use GLOBALS;\n use Span;"}, {"sha": "cc8f628cad44bc435f5ee46af58ab939adec8ec6", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// compile-flags: --document-private-items\n+\n+#![feature(crate_visibility_modifier)]\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n+pub struct FooPublic;\n+// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n+crate struct FooJustCrate;\n+// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n+pub(crate) struct FooPubCrate;\n+// @has 'foo/struct.FooSelf.html' '//pre' 'pub(self) struct FooSelf'\n+pub(self) struct FooSelf;\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(self) struct FooInSelf'\n+pub(in self) struct FooInSelf;\n+mod a {\n+    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(super) struct FooSuper'\n+    pub(super) struct FooSuper;\n+    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(super) struct FooInSuper'\n+    pub(in super) struct FooInSuper;\n+    // @has 'foo/a/struct.FooInA.html' '//pre' 'pub(in a) struct FooInA'\n+    pub(in a) struct FooInA;\n+    mod b {\n+        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in self::super::b) struct FooInSelfSuperB'\n+        pub(in self::super::b) struct FooInSelfSuperB;\n+        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(in super::super) struct FooInSuperSuper'\n+        pub(in super::super) struct FooInSuperSuper;\n+        // @has 'foo/a/b/struct.FooInAB.html' '//pre' 'pub(in a::b) struct FooInAB'\n+        pub(in a::b) struct FooInAB;\n+    }\n+}"}, {"sha": "e1e13e9256dcdb909adf83a5ac72f142e6d901c2", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -5,13 +5,17 @@ LL |     let x: Option<_> = None;\n    |         - consider giving `x` a type\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n    |     ^^^^^^^^^^ cannot infer type for `T`\n+   |\n+   = note: type must be known at this point\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-42234-unknown-receiver-type.rs:22:5\n    |\n LL | /     data.iter() //~ ERROR 22:5: 23:20: type annotations needed\n LL | |         .sum::<_>()\n    | |___________________^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29011abb46016624f8753feb240650666f766f62", "filename": "src/test/ui/span/method-and-field-eager-resolution.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that spans get only base in eager type resolution (structurally_resolve_type).\n+\n+fn main() {\n+    let mut x = Default::default();\n+    x.0;\n+    //~^ ERROR type annotations needed\n+    x = 1;\n+}\n+\n+fn foo() {\n+    let mut x = Default::default();\n+    x[0];\n+    //~^ ERROR type annotations needed\n+    x = 1;\n+}"}, {"sha": "21e19828a99cf4ad9855b046e1bb2a7525caaec9", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -0,0 +1,23 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/method-and-field-eager-resolution.rs:15:5\n+   |\n+LL |     let mut x = Default::default();\n+   |         ----- consider giving `x` a type\n+LL |     x.0;\n+   |     ^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/method-and-field-eager-resolution.rs:22:5\n+   |\n+LL |     let mut x = Default::default();\n+   |         ----- consider giving `x` a type\n+LL |     x[0];\n+   |     ^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "bc4503903d665589ab3bf1c0beb887bf8eb795ed", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 122, "deletions": 47, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/27acb9b3c033e1dd74cc72310a5a346527d3e704/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=27acb9b3c033e1dd74cc72310a5a346527d3e704", "patch": "@@ -12,73 +12,148 @@ const fs = require('fs');\n \n const TEST_FOLDER = 'src/test/rustdoc-js/';\n \n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n // Stupid function extractor based on indent.\n function extractFunction(content, functionName) {\n-    var x = content.split('\\n');\n-    var in_func = false;\n     var indent = 0;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (in_func === false) {\n-            var splitter = \"function \" + functionName + \"(\";\n-            if (x[i].trim().startsWith(splitter)) {\n-                in_func = true;\n-                indent = x[i].split(splitter)[0].length;\n-                lines.push(x[i]);\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].trim() === \"}\" && x[i].split(\"}\")[0].length === indent) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n \n // Stupid function extractor for array.\n function extractArrayVariable(content, arrayName) {\n-    var x = content.split('\\n');\n-    var found_var = false;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (found_var === false) {\n-            var splitter = \"var \" + arrayName + \" = [\";\n-            if (x[i].trim().startsWith(splitter)) {\n-                found_var = true;\n-                i -= 1;\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].endsWith('];')) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n \n // Stupid function extractor for variable.\n function extractVariable(content, varName) {\n-    var x = content.split('\\n');\n-    var found_var = false;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (found_var === false) {\n-            var splitter = \"var \" + varName + \" = \";\n-            if (x[i].trim().startsWith(splitter)) {\n-                found_var = true;\n-                i -= 1;\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].endsWith(';')) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';') {\n+                return content.slice(start, pos + 1);\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n@@ -101,7 +176,7 @@ function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n     for (var i = 0; i < thingsToLoad.length; ++i) {\n         var tmp = funcToCall(fileContent, thingsToLoad[i]);\n         if (tmp === null) {\n-            console.error('enable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n             process.exit(1);\n         }\n         content += tmp;"}]}