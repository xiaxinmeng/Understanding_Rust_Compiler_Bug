{"sha": "75023d61a191a0edf38e13f82bc88cddb2eb5f95", "node_id": "C_kwDOAAsO6NoAKDc1MDIzZDYxYTE5MWEwZWRmMzhlMTNmODJiYzg4Y2RkYjJlYjVmOTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-25T09:13:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-25T09:13:15Z"}, "message": "Rollup merge of #103379 - cuviper:truncate-thread-name, r=thomcc\n\nTruncate thread names on Linux and Apple targets\n\nThese targets have system limits on the thread names, 16 and 64 bytes\nrespectively, and `pthread_setname_np` returns an error if the name is\nlonger. However, we're not in a context that can propagate errors when\nwe call this, and we used to implicitly truncate on Linux with `prctl`,\nso now we manually truncate these names ahead of time.\n\nr? ``````@thomcc``````", "tree": {"sha": "c022a67d3ab3ea4c1f6994bc92c22ca26dbbd1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c022a67d3ab3ea4c1f6994bc92c22ca26dbbd1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75023d61a191a0edf38e13f82bc88cddb2eb5f95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjV6irCRBK7hj4Ov3rIwAAvT8IAId64L8u7oJddwUyK6J6oc6q\nm/2TVadIsvMOcjNp985MH3BL0hG+lX50SUNsn2LFEZVekhJ7J1OF43CbJChewMM4\ng5EM05Fl2ocY5Fk45ToYWTG8rnU3OG44gE/t2V60Ke3hqOvwdblNYytan/v51z7j\nU5PHJps1gTeL7GkYeCZA8uwjeh9i9biTUJ6cF7GbpSFYcr1IRq+iMedlaECAgtCG\nI4eDSvV76tuHYlW5RlrGQiUs5x2tQmQVZ0+kYtzCw7DbjjAZl9DoYtJ5thEbUptN\nXDvKlODhwJ8Ic2r6d8YNHVKqx88YIPvuyYmbTZePmAGXwuDFqTSPE1j4YyVywNM=\n=ZpbL\n-----END PGP SIGNATURE-----\n", "payload": "tree c022a67d3ab3ea4c1f6994bc92c22ca26dbbd1b8\nparent 8ba2a651fb16f5d0f54c961e0ae925c9bad2fafb\nparent 15cfeb33b08c91090d52685651aa9762b8f3c43f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666689195 +0530\ncommitter GitHub <noreply@github.com> 1666689195 +0530\n\nRollup merge of #103379 - cuviper:truncate-thread-name, r=thomcc\n\nTruncate thread names on Linux and Apple targets\n\nThese targets have system limits on the thread names, 16 and 64 bytes\nrespectively, and `pthread_setname_np` returns an error if the name is\nlonger. However, we're not in a context that can propagate errors when\nwe call this, and we used to implicitly truncate on Linux with `prctl`,\nso now we manually truncate these names ahead of time.\n\nr? ``````@thomcc``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75023d61a191a0edf38e13f82bc88cddb2eb5f95", "html_url": "https://github.com/rust-lang/rust/commit/75023d61a191a0edf38e13f82bc88cddb2eb5f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75023d61a191a0edf38e13f82bc88cddb2eb5f95/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba2a651fb16f5d0f54c961e0ae925c9bad2fafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba2a651fb16f5d0f54c961e0ae925c9bad2fafb", "html_url": "https://github.com/rust-lang/rust/commit/8ba2a651fb16f5d0f54c961e0ae925c9bad2fafb"}, {"sha": "15cfeb33b08c91090d52685651aa9762b8f3c43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/15cfeb33b08c91090d52685651aa9762b8f3c43f", "html_url": "https://github.com/rust-lang/rust/commit/15cfeb33b08c91090d52685651aa9762b8f3c43f"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "69cd2b500a1f0819cf0aac85f6deb0aa8db73a6d", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75023d61a191a0edf38e13f82bc88cddb2eb5f95/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75023d61a191a0edf38e13f82bc88cddb2eb5f95/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=75023d61a191a0edf38e13f82bc88cddb2eb5f95", "patch": "@@ -132,8 +132,11 @@ impl Thread {\n \n     #[cfg(target_os = \"linux\")]\n     pub fn set_name(name: &CStr) {\n+        const TASK_COMM_LEN: usize = 16;\n+\n         unsafe {\n             // Available since glibc 2.12, musl 1.1.16, and uClibc 1.0.20.\n+            let name = truncate_cstr(name, TASK_COMM_LEN);\n             libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n         }\n     }\n@@ -148,6 +151,7 @@ impl Thread {\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n+            let name = truncate_cstr(name, libc::MAXTHREADNAMESIZE);\n             libc::pthread_setname_np(name.as_ptr());\n         }\n     }\n@@ -276,6 +280,20 @@ impl Drop for Thread {\n     }\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+fn truncate_cstr(cstr: &CStr, max_with_nul: usize) -> crate::borrow::Cow<'_, CStr> {\n+    use crate::{borrow::Cow, ffi::CString};\n+\n+    if cstr.to_bytes_with_nul().len() > max_with_nul {\n+        let bytes = cstr.to_bytes()[..max_with_nul - 1].to_vec();\n+        // SAFETY: the non-nul bytes came straight from a CStr.\n+        // (CString will add the terminating nul.)\n+        Cow::Owned(unsafe { CString::from_vec_unchecked(bytes) })\n+    } else {\n+        Cow::Borrowed(cstr)\n+    }\n+}\n+\n pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     cfg_if::cfg_if! {\n         if #[cfg(any("}, {"sha": "6c9ce6fa0ddbd80b6d82c4b54158235283c7da70", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/75023d61a191a0edf38e13f82bc88cddb2eb5f95/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75023d61a191a0edf38e13f82bc88cddb2eb5f95/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=75023d61a191a0edf38e13f82bc88cddb2eb5f95", "patch": "@@ -37,6 +37,37 @@ fn test_named_thread() {\n         .unwrap();\n }\n \n+#[cfg(any(\n+    // Note: musl didn't add pthread_getname_np until 1.2.3\n+    all(target_os = \"linux\", target_env = \"gnu\"),\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+    target_os = \"watchos\"\n+))]\n+#[test]\n+fn test_named_thread_truncation() {\n+    use crate::ffi::CStr;\n+\n+    let long_name = crate::iter::once(\"test_named_thread_truncation\")\n+        .chain(crate::iter::repeat(\" yada\").take(100))\n+        .collect::<String>();\n+\n+    let result = Builder::new().name(long_name.clone()).spawn(move || {\n+        // Rust remembers the full thread name itself.\n+        assert_eq!(thread::current().name(), Some(long_name.as_str()));\n+\n+        // But the system is limited -- make sure we successfully set a truncation.\n+        let mut buf = vec![0u8; long_name.len() + 1];\n+        unsafe {\n+            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n+        }\n+        let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n+        assert!(cstr.to_bytes().len() > 0);\n+        assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n+    });\n+    result.unwrap().join().unwrap();\n+}\n+\n #[test]\n #[should_panic]\n fn test_invalid_named_thread() {"}]}