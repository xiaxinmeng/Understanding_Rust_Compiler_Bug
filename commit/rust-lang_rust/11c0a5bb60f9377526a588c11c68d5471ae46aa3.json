{"sha": "11c0a5bb60f9377526a588c11c68d5471ae46aa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzBhNWJiNjBmOTM3NzUyNmE1ODhjMTFjNjhkNTQ3MWFlNDZhYTM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T15:08:28Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T15:25:51Z"}, "message": "Highlight mutable statics as mutable", "tree": {"sha": "efee8051e90104b4c10314b9588936f235c1c120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efee8051e90104b4c10314b9588936f235c1c120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c0a5bb60f9377526a588c11c68d5471ae46aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c0a5bb60f9377526a588c11c68d5471ae46aa3", "html_url": "https://github.com/rust-lang/rust/commit/11c0a5bb60f9377526a588c11c68d5471ae46aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c0a5bb60f9377526a588c11c68d5471ae46aa3/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4578154b608fa075595103d0c933da60d55b25c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8", "html_url": "https://github.com/rust-lang/rust/commit/4578154b608fa075595103d0c933da60d55b25c8"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "3fc2eccdd7b8801260a9820b35bcf1dbd61c52b2", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -678,6 +678,10 @@ impl Static {\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.static_data(self.id).name.clone()\n     }\n+\n+    pub fn is_mut(self, db: &dyn HirDatabase) -> bool {\n+        db.static_data(self.id).mutable\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "e2130d931fdb12508870ff02a90b56256eabd502", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -251,11 +251,6 @@ impl ConstData {\n         Arc::new(ConstData::new(db, vis_default, node))\n     }\n \n-    pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<ConstData> {\n-        let node = konst.lookup(db).source(db);\n-        Arc::new(ConstData::new(db, RawVisibility::private(), node))\n-    }\n-\n     fn new<N: NameOwner + TypeAscriptionOwner + VisibilityOwner>(\n         db: &dyn DefDatabase,\n         vis_default: RawVisibility,\n@@ -270,6 +265,32 @@ impl ConstData {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StaticData {\n+    pub name: Option<Name>,\n+    pub type_ref: TypeRef,\n+    pub visibility: RawVisibility,\n+    pub mutable: bool,\n+}\n+\n+impl StaticData {\n+    pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {\n+        let node = konst.lookup(db).source(db);\n+        let ctx = LowerCtx::new(db, node.file_id);\n+\n+        let name = node.value.name().map(|n| n.as_name());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, node.value.ascribed_type());\n+        let mutable = node.value.mut_token().is_some();\n+        let visibility = RawVisibility::from_ast_with_default(\n+            db,\n+            RawVisibility::private(),\n+            node.map(|n| n.visibility()),\n+        );\n+\n+        Arc::new(StaticData { name, type_ref, visibility, mutable })\n+    }\n+}\n+\n fn collect_items_in_macros(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,"}, {"sha": "e665ab45d0330cad48dfa6e53006f7dd1c8059f4", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     adt::{EnumData, StructData},\n     attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n-    data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n+    data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n     docs::Documentation,\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n@@ -77,8 +77,8 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(ConstData::const_data_query)]\n     fn const_data(&self, konst: ConstId) -> Arc<ConstData>;\n \n-    #[salsa::invoke(ConstData::static_data_query)]\n-    fn static_data(&self, konst: StaticId) -> Arc<ConstData>;\n+    #[salsa::invoke(StaticData::static_data_query)]\n+    fn static_data(&self, konst: StaticId) -> Arc<StaticData>;\n \n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);"}, {"sha": "fb7c6cd8c14cb9445d04c9537dc25243a9eaa7f0", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -22,7 +22,7 @@ use rustc_hash::FxHashMap;\n \n use hir_def::{\n     body::Body,\n-    data::{ConstData, FunctionData},\n+    data::{ConstData, FunctionData, StaticData},\n     expr::{BindingAnnotation, ExprId, PatId},\n     lang_item::LangItemTarget,\n     path::{path, Path},\n@@ -71,7 +71,7 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n     match def {\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n         DefWithBodyId::FunctionId(f) => ctx.collect_fn(&db.function_data(f)),\n-        DefWithBodyId::StaticId(s) => ctx.collect_const(&db.static_data(s)),\n+        DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n     }\n \n     ctx.infer_body();\n@@ -485,6 +485,10 @@ impl<'a> InferenceContext<'a> {\n         self.return_ty = self.make_ty(&data.type_ref);\n     }\n \n+    fn collect_static(&mut self, data: &StaticData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)"}, {"sha": "0a881d384c6c5b234ab53c6a6d1d87c748c3bab8", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -56,7 +56,10 @@\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n         <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">push</span>(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n-    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>); }\n+    <span class=\"keyword unsafe\">unsafe</span> {\n+        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>);\n+        <span class=\"static mutable\">STATIC_MUT</span> = <span class=\"numeric_literal\">1</span>;\n+    }\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;"}, {"sha": "9c54b92a3d24d98dcd50a1985b238011af9cc51b", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -431,10 +431,16 @@ fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,\n             hir::ModuleDef::EnumVariant(_) => HighlightTag::EnumVariant,\n             hir::ModuleDef::Const(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Static(_) => HighlightTag::Static,\n             hir::ModuleDef::Trait(_) => HighlightTag::Trait,\n             hir::ModuleDef::TypeAlias(_) => HighlightTag::TypeAlias,\n             hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n+            hir::ModuleDef::Static(s) => {\n+                let mut h = Highlight::new(HighlightTag::Static);\n+                if s.is_mut(db) {\n+                    h |= HighlightModifier::Mutable;\n+                }\n+                return h;\n+            }\n         },\n         Definition::SelfType(_) => HighlightTag::SelfType,\n         Definition::TypeParam(_) => HighlightTag::TypeParam,"}, {"sha": "13894869c8bfe16c07c18649413230d4813637dd", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c0a5bb60f9377526a588c11c68d5471ae46aa3/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=11c0a5bb60f9377526a588c11c68d5471ae46aa3", "patch": "@@ -17,6 +17,8 @@ struct Foo {\n     pub y: i32,\n }\n \n+static mut STATIC_MUT: i32 = 0;\n+\n fn foo<'a, T>() -> T {\n     foo::<'a, i32>()\n }\n@@ -40,7 +42,10 @@ fn main() {\n         let x = 92;\n         vec.push(Foo { x, y: 1 });\n     }\n-    unsafe { vec.set_len(0); }\n+    unsafe {\n+        vec.set_len(0);\n+        STATIC_MUT = 1;\n+    }\n \n     let mut x = 42;\n     let y = &mut x;"}]}