{"sha": "9b88b5fe3862c45318487c37c8a48d9605590ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODhiNWZlMzg2MmM0NTMxODQ4N2MzN2M4YTQ4ZDk2MDU1OTBjZTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-05T02:07:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-05T02:07:23Z"}, "message": "rustc: Don't allow private fields to be named in constructors or destructured", "tree": {"sha": "73e17ad3188011d44ee4efefadd9cca4bca6ec51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73e17ad3188011d44ee4efefadd9cca4bca6ec51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b88b5fe3862c45318487c37c8a48d9605590ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b88b5fe3862c45318487c37c8a48d9605590ce0", "html_url": "https://github.com/rust-lang/rust/commit/9b88b5fe3862c45318487c37c8a48d9605590ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b88b5fe3862c45318487c37c8a48d9605590ce0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba673b26bc029ef234f56e177559fd0b9e48507", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba673b26bc029ef234f56e177559fd0b9e48507", "html_url": "https://github.com/rust-lang/rust/commit/fba673b26bc029ef234f56e177559fd0b9e48507"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "0a2b2fff13d9439c21a502cf0545d2302598b0a2", "filename": "src/rustc/middle/privacy.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=9b88b5fe3862c45318487c37c8a48d9605590ce0", "patch": "@@ -3,8 +3,9 @@\n \n use /*mod*/ syntax::ast;\n use /*mod*/ syntax::visit;\n-use syntax::ast::{expr_field, ident, item_class, item_impl, item_trait};\n-use syntax::ast::{local_crate, node_id, private, provided, required};\n+use syntax::ast::{expr_field, expr_struct, ident, item_class, item_impl};\n+use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n+use syntax::ast::{provided, required};\n use syntax::ast_map::{node_item, node_method};\n use ty::ty_class;\n use typeck::{method_map, method_origin, method_param, method_static};\n@@ -160,7 +161,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                             match method_map.find(expr.id) {\n                                 None => {\n                                     debug!(\"(privacy checking) checking \\\n-                                            field\");\n+                                            field access\");\n                                     check_field(expr.span, id, ident);\n                                 }\n                                 Some(entry) => {\n@@ -173,11 +174,58 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                         _ => {}\n                     }\n                 }\n+                expr_struct(_, fields, _) => {\n+                    match ty::get(ty::expr_ty(tcx, expr)).struct {\n+                        ty_class(id, _) => {\n+                            if id.crate != local_crate ||\n+                                    !privileged_items.contains(id.node) {\n+                                for fields.each |field| {\n+                                        debug!(\"(privacy checking) checking \\\n+                                                field in struct literal\");\n+                                    check_field(expr.span, id,\n+                                                field.node.ident);\n+                                }\n+                            }\n+                        }\n+                        _ => {\n+                            tcx.sess.span_bug(expr.span, ~\"struct expr \\\n+                                                           didn't have \\\n+                                                           struct type?!\");\n+                        }\n+                    }\n+                }\n                 _ => {}\n             }\n \n             visit::visit_expr(expr, method_map, visitor);\n         },\n+        visit_pat: |pattern, method_map, visitor| {\n+            match pattern.node {\n+                pat_struct(_, fields, _) => {\n+                    match ty::get(ty::pat_ty(tcx, pattern)).struct {\n+                        ty_class(id, _) => {\n+                            if id.crate != local_crate ||\n+                                    !privileged_items.contains(id.node) {\n+                                for fields.each |field| {\n+                                        debug!(\"(privacy checking) checking \\\n+                                                struct pattern\");\n+                                    check_field(pattern.span, id,\n+                                                field.ident);\n+                                }\n+                            }\n+                        }\n+                        _ => {\n+                            tcx.sess.span_bug(pattern.span,\n+                                              ~\"struct pattern didn't have \\\n+                                                struct type?!\");\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+\n+            visit::visit_pat(pattern, method_map, visitor);\n+        },\n         .. *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, method_map, visitor);"}, {"sha": "6d075cbd7adf270daa3002e07690bf898da1ae80", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=9b88b5fe3862c45318487c37c8a48d9605590ce0", "patch": "@@ -0,0 +1,10 @@\n+mod a {\n+    struct Foo {\n+        priv x: int\n+    }\n+}\n+\n+fn main() {\n+    let s = a::Foo { x: 1 };    //~ ERROR field `x` is private\n+}\n+"}, {"sha": "cc3ebc921722bb36223c6cf2ef7ab511f409550f", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b88b5fe3862c45318487c37c8a48d9605590ce0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=9b88b5fe3862c45318487c37c8a48d9605590ce0", "patch": "@@ -0,0 +1,18 @@\n+use a::Foo;\n+\n+mod a {\n+    struct Foo {\n+        priv x: int\n+    }\n+\n+    fn make() -> Foo {\n+        Foo { x: 3 }\n+    }\n+}\n+\n+fn main() {\n+    match a::make() {\n+        Foo { x: _ } => {}  //~ ERROR field `x` is private\n+    }\n+}\n+"}]}