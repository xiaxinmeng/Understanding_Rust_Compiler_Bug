{"sha": "a6224f36200c768d49b6450204fd95edaa559b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjI0ZjM2MjAwYzc2OGQ0OWI2NDUwMjA0ZmQ5NWVkYWE1NTliNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-18T19:29:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-18T19:55:04Z"}, "message": "make Parse generic", "tree": {"sha": "0825111965d154a9ad692789dd178e1176a88bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0825111965d154a9ad692789dd178e1176a88bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6224f36200c768d49b6450204fd95edaa559b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6224f36200c768d49b6450204fd95edaa559b50", "html_url": "https://github.com/rust-lang/rust/commit/a6224f36200c768d49b6450204fd95edaa559b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6224f36200c768d49b6450204fd95edaa559b50/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe72424a647a31840eb952d42905f83628a623c", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe72424a647a31840eb952d42905f83628a623c", "html_url": "https://github.com/rust-lang/rust/commit/abe72424a647a31840eb952d42905f83628a623c"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "b82d1bda08a304ae56dfcb2a27743143c6de52a1", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=a6224f36200c768d49b6450204fd95edaa559b50", "patch": "@@ -5,7 +5,7 @@ mod input;\n use std::{panic, sync::Arc};\n \n use ra_prof::profile;\n-use ra_syntax::{Parse, SourceFile, TextRange, TextUnit};\n+use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n use relative_path::RelativePathBuf;\n \n pub use crate::{\n@@ -74,7 +74,7 @@ pub trait SourceDatabase: CheckCanceled + std::fmt::Debug {\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n-    fn parse(&self, file_id: FileId) -> Parse;\n+    fn parse(&self, file_id: FileId) -> Parse<ast::SourceFile>;\n     /// Path to a file, relative to the root of its source root.\n     #[salsa::input]\n     fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n@@ -98,7 +98,7 @@ fn source_root_crates(db: &impl SourceDatabase, id: SourceRootId) -> Arc<Vec<Cra\n     Arc::new(res)\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse {\n+fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n     let _p = profile(\"parse_query\");\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)"}, {"sha": "4aa84751f42bac96fe3304be4f94f720a3c22bd8", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=a6224f36200c768d49b6450204fd95edaa559b50", "patch": "@@ -43,7 +43,7 @@ pub(crate) struct CompletionContext<'a> {\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a db::RootDatabase,\n-        original_parse: &'a Parse,\n+        original_parse: &'a Parse<ast::SourceFile>,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n@@ -83,7 +83,7 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    fn fill(&mut self, original_parse: &'a Parse, offset: TextUnit) {\n+    fn fill(&mut self, original_parse: &'a Parse<ast::SourceFile>, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion."}, {"sha": "d71c89b43125d71317eb83131d1c3341ecfdde35", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=a6224f36200c768d49b6450204fd95edaa559b50", "patch": "@@ -9,7 +9,7 @@ use ra_db::{\n     FileTextQuery, SourceRootId,\n };\n use ra_prof::{memory_usage, Bytes};\n-use ra_syntax::{AstNode, Parse, SyntaxNode, TreeArc};\n+use ra_syntax::{ast, AstNode, Parse, SyntaxNode, TreeArc};\n \n use crate::{\n     db::RootDatabase,\n@@ -79,10 +79,10 @@ impl fmt::Display for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<FileId, Parse>>,\n+        T: IntoIterator<Item = TableEntry<FileId, Parse<ast::SourceFile>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {"}, {"sha": "9b3a45319b72f2e0882589701a95adbe84d39eff", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=a6224f36200c768d49b6450204fd95edaa559b50", "patch": "@@ -169,7 +169,9 @@ impl SymbolIndex {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n-    pub(crate) fn for_files(files: impl ParallelIterator<Item = (FileId, Parse)>) -> SymbolIndex {\n+    pub(crate) fn for_files(\n+        files: impl ParallelIterator<Item = (FileId, Parse<ast::SourceFile>)>,\n+    ) -> SymbolIndex {\n         let symbols = files\n             .flat_map(|(file_id, file)| source_file_to_file_symbols(file.tree(), file_id))\n             .collect::<Vec<_>>();"}, {"sha": "2eb3fcd57a772937e92d9d0aa4aa3d7996164c20", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6224f36200c768d49b6450204fd95edaa559b50/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=a6224f36200c768d49b6450204fd95edaa559b50", "patch": "@@ -35,7 +35,7 @@ use std::{fmt::Write, sync::Arc};\n \n use ra_text_edit::AtomTextEdit;\n \n-use crate::syntax_node::GreenNode;\n+use crate::syntax_node::{GreenNode, SyntaxNodeWrapper};\n \n pub use crate::{\n     ast::{AstNode, AstToken},\n@@ -57,33 +57,41 @@ pub use rowan::{SmolStr, TextRange, TextUnit};\n ///\n /// Note that we always produce a syntax tree, even for completely invalid\n /// files.\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct Parse {\n-    tree: TreeArc<SourceFile>,\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct Parse<T: SyntaxNodeWrapper> {\n+    tree: TreeArc<T>,\n     errors: Arc<Vec<SyntaxError>>,\n }\n \n-impl Parse {\n-    pub fn tree(&self) -> &SourceFile {\n+impl<T: SyntaxNodeWrapper> Clone for Parse<T> {\n+    fn clone(&self) -> Parse<T> {\n+        Parse { tree: self.tree.clone(), errors: self.errors.clone() }\n+    }\n+}\n+\n+impl<T: SyntaxNodeWrapper> Parse<T> {\n+    fn new(tree: TreeArc<T>, errors: Vec<SyntaxError>) -> Parse<T> {\n+        Parse { tree, errors: Arc::new(errors) }\n+    }\n+\n+    pub fn tree(&self) -> &T {\n         &*self.tree\n     }\n \n     pub fn errors(&self) -> &[SyntaxError] {\n         &*self.errors\n     }\n \n-    pub fn ok(self) -> Result<TreeArc<SourceFile>, Arc<Vec<SyntaxError>>> {\n+    pub fn ok(self) -> Result<TreeArc<T>, Arc<Vec<SyntaxError>>> {\n         if self.errors.is_empty() {\n             Ok(self.tree)\n         } else {\n             Err(self.errors)\n         }\n     }\n+}\n \n-    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse {\n-        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n-    }\n-\n+impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n         let mut buf = self.tree.syntax().debug_dump();\n         for err in self.errors.iter() {\n@@ -92,7 +100,11 @@ impl Parse {\n         buf\n     }\n \n-    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse> {\n+    pub fn reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n+        self.incremental_reparse(edit).unwrap_or_else(|| self.full_reparse(edit))\n+    }\n+\n+    fn incremental_reparse(&self, edit: &AtomTextEdit) -> Option<Parse<SourceFile>> {\n         // FIXME: validation errors are not handled here\n         parsing::incremental_reparse(self.tree.syntax(), edit, self.errors.to_vec()).map(\n             |(green_node, errors, _reparsed_range)| Parse {\n@@ -102,12 +114,19 @@ impl Parse {\n         )\n     }\n \n-    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse {\n+    fn full_reparse(&self, edit: &AtomTextEdit) -> Parse<SourceFile> {\n         let text = edit.apply(self.tree.syntax().text().to_string());\n         SourceFile::parse(&text)\n     }\n }\n \n+impl Parse<SyntaxNode> {\n+    pub fn cast<T: AstNode>(self) -> Option<Parse<T>> {\n+        let node = T::cast(&self.tree)?;\n+        Some(Parse { tree: node.to_owned(), errors: self.errors })\n+    }\n+}\n+\n /// `SourceFile` represents a parse tree for a single Rust file.\n pub use crate::ast::SourceFile;\n \n@@ -121,7 +140,7 @@ impl SourceFile {\n         TreeArc::cast(root)\n     }\n \n-    pub fn parse(text: &str) -> Parse {\n+    pub fn parse(text: &str) -> Parse<SourceFile> {\n         let (green, mut errors) = parsing::parse_text(text);\n         let tree = SourceFile::new(green);\n         errors.extend(validation::validate(&tree));"}]}