{"sha": "ba99e4ce5401426e8c34a1df452cee2a86f04e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOTllNGNlNTQwMTQyNmU4YzM0YTFkZjQ1MmNlZTJhODZmMDRlMDQ=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-04-17T07:38:55Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-04-17T07:38:55Z"}, "message": "parallelisation of shootout-k-nucleotide", "tree": {"sha": "2e30d0910b5c781da6a611dd7a8a7281e5d73b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e30d0910b5c781da6a611dd7a8a7281e5d73b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba99e4ce5401426e8c34a1df452cee2a86f04e04", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba99e4ce5401426e8c34a1df452cee2a86f04e04", "html_url": "https://github.com/rust-lang/rust/commit/ba99e4ce5401426e8c34a1df452cee2a86f04e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba99e4ce5401426e8c34a1df452cee2a86f04e04/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a4ffbf625774a5ebf210d2851f47338ed91bbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4ffbf625774a5ebf210d2851f47338ed91bbfe", "html_url": "https://github.com/rust-lang/rust/commit/8a4ffbf625774a5ebf210d2851f47338ed91bbfe"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "865b3a03726715d08280998ebf6ec3b075999647", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba99e4ce5401426e8c34a1df452cee2a86f04e04/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba99e4ce5401426e8c34a1df452cee2a86f04e04/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=ba99e4ce5401426e8c34a1df452cee2a86f04e04", "patch": "@@ -11,8 +11,12 @@\n // ignore-android see #10393 #13206\n // ignore-pretty\n \n+extern crate sync;\n+\n use std::strbuf::StrBuf;\n use std::slice;\n+use sync::Arc;\n+use sync::Future;\n \n static TABLE: [u8, ..4] = [ 'A' as u8, 'C' as u8, 'G' as u8, 'T' as u8 ];\n static TABLE_SIZE: uint = 2 << 16;\n@@ -202,10 +206,9 @@ fn unpack_symbol(c: u8) -> u8 {\n     TABLE[c as uint]\n }\n \n-fn generate_frequencies(frequencies: &mut Table,\n-                        mut input: &[u8],\n-                        frame: uint) {\n-    if input.len() < frame { return; }\n+fn generate_frequencies(mut input: &[u8], frame: uint) -> Table {\n+    let mut frequencies = Table::new();\n+    if input.len() < frame { return frequencies; }\n     let mut code = Code(0);\n \n     // Pull first frame.\n@@ -220,6 +223,7 @@ fn generate_frequencies(frequencies: &mut Table,\n         frequencies.lookup(code, BumpCallback);\n         input = input.slice_from(1);\n     }\n+    frequencies\n }\n \n fn print_frequencies(frequencies: &Table, frame: uint) {\n@@ -266,20 +270,21 @@ fn main() {\n     } else {\n         get_sequence(&mut std::io::stdin(), \">THREE\")\n     };\n-\n-    let mut frequencies = Table::new();\n-    generate_frequencies(&mut frequencies, input.as_slice(), 1);\n-    print_frequencies(&frequencies, 1);\n-\n-    frequencies = Table::new();\n-    generate_frequencies(&mut frequencies, input.as_slice(), 2);\n-    print_frequencies(&frequencies, 2);\n-\n-    for occurrence in OCCURRENCES.iter() {\n-        frequencies = Table::new();\n-        generate_frequencies(&mut frequencies,\n-                             input.as_slice(),\n-                             occurrence.len());\n-        print_occurrences(&mut frequencies, *occurrence);\n+    let input = Arc::new(input);\n+\n+    let nb_freqs: Vec<(uint, Future<Table>)> = range(1u, 3).map(|i| {\n+        let input = input.clone();\n+        (i, Future::spawn(proc() generate_frequencies(input.as_slice(), i)))\n+    }).collect();\n+    let occ_freqs: Vec<Future<Table>> = OCCURRENCES.iter().map(|&occ| {\n+        let input = input.clone();\n+        Future::spawn(proc() generate_frequencies(input.as_slice(), occ.len()))\n+    }).collect();\n+\n+    for (i, freq) in nb_freqs.move_iter() {\n+        print_frequencies(&freq.unwrap(), i);\n+    }\n+    for (&occ, freq) in OCCURRENCES.iter().zip(occ_freqs.move_iter()) {\n+        print_occurrences(&mut freq.unwrap(), occ);\n     }\n }"}]}