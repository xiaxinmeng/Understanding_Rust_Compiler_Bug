{"sha": "32fa084c07375c7a596e0bfceddbef1830ae23e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZmEwODRjMDczNzVjN2E1OTZlMGJmY2VkZGJlZjE4MzBhZTIzZTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T13:45:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T13:45:09Z"}, "message": "introduce marking infrastructure for maintainable tests\n\nThis also fixes a particular edge case in name resolution.", "tree": {"sha": "367522218a1dd58880fa187419c22d37bd035324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367522218a1dd58880fa187419c22d37bd035324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32fa084c07375c7a596e0bfceddbef1830ae23e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32fa084c07375c7a596e0bfceddbef1830ae23e7", "html_url": "https://github.com/rust-lang/rust/commit/32fa084c07375c7a596e0bfceddbef1830ae23e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32fa084c07375c7a596e0bfceddbef1830ae23e7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca14c591fea40b2f803bbf5f02c1571732348fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca14c591fea40b2f803bbf5f02c1571732348fb", "html_url": "https://github.com/rust-lang/rust/commit/aca14c591fea40b2f803bbf5f02c1571732348fb"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "b8246a7d1ebad088f8112f5398c1c9a769fab1e5", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=32fa084c07375c7a596e0bfceddbef1830ae23e7", "patch": "@@ -17,6 +17,8 @@ macro_rules! ctry {\n pub mod db;\n #[cfg(test)]\n mod mock;\n+#[macro_use]\n+mod marks;\n mod query_definitions;\n mod path;\n pub mod source_binder;"}, {"sha": "05430b975cda53def585c0a1df864739f3e46081", "filename": "crates/ra_hir/src/marks.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=32fa084c07375c7a596e0bfceddbef1830ae23e7", "patch": "@@ -0,0 +1,82 @@\n+//! This module implements manually tracked test coverage, which useful for\n+//! quickly finding a test responsible for testing a particular bit of code.\n+//!\n+//! See https://matklad.github.io/2018/06/18/a-trick-for-test-maintenance.html\n+//! for details, but the TL;DR is that you write your test as\n+//!\n+//! ```no-run\n+//! #[test]\n+//! fn test_foo() {\n+//!     covers!(test_foo);\n+//! }\n+//! ```\n+//!\n+//! and in the code under test you write\n+//!\n+//! ```no-run\n+//! fn foo() {\n+//!     if some_condition() {\n+//!         tested_by!(test_foo);\n+//!     }\n+//! }\n+//! ```\n+//!\n+//! This module then checks that executing the test indeed covers the specified\n+//! function. This is useful if you come back to the `foo` function ten years\n+//! later and wonder where the test are: now you can grep for `test_foo`.\n+\n+#[macro_export]\n+macro_rules! tested_by {\n+    ($ident:ident) => {\n+        #[cfg(test)]\n+        {\n+            crate::marks::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n+        }\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! covers {\n+    ($ident:ident) => {\n+        let _checker = crate::marks::marks::MarkChecker::new(&crate::marks::marks::$ident);\n+    };\n+}\n+\n+#[cfg(test)]\n+pub(crate) mod marks {\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+    pub(crate) struct MarkChecker {\n+        mark: &'static AtomicUsize,\n+        value_on_entry: usize,\n+    }\n+\n+    impl MarkChecker {\n+        pub(crate) fn new(mark: &'static AtomicUsize) -> MarkChecker {\n+            let value_on_entry = mark.load(Ordering::SeqCst);\n+            MarkChecker {\n+                mark,\n+                value_on_entry,\n+            }\n+        }\n+    }\n+\n+    impl Drop for MarkChecker {\n+        fn drop(&mut self) {\n+            if std::thread::panicking() {\n+                return;\n+            }\n+            let value_on_exit = self.mark.load(Ordering::SeqCst);\n+            assert!(value_on_exit > self.value_on_entry, \"mark was not hit\")\n+        }\n+    }\n+\n+    macro_rules! mark {\n+        ($ident:ident) => {\n+            #[allow(bad_style)]\n+            pub(crate) static $ident: AtomicUsize = AtomicUsize::new(0);\n+        };\n+    }\n+\n+    mark!(name_res_works_for_broken_modules);\n+}"}, {"sha": "50383c6d8ce8157a562e08ce3bc5e8109f530f08", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=32fa084c07375c7a596e0bfceddbef1830ae23e7", "patch": "@@ -14,7 +14,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n use crate::{Name, AsName, HirDatabase, SourceItemId, HirFileId, Problem, SourceFileItems, ModuleSource};\n \n impl ModuleSource {\n-    pub fn from_source_item_id(\n+    pub(crate) fn from_source_item_id(\n         db: &impl HirDatabase,\n         source_item_id: SourceItemId,\n     ) -> ModuleSource {\n@@ -217,6 +217,10 @@ fn modules(root: &impl ast::ModuleItemOwner) -> impl Iterator<Item = (Name, &ast\n         })\n         .filter_map(|module| {\n             let name = module.name()?.as_name();\n+            if !module.has_semi() && module.item_list().is_none() {\n+                tested_by!(name_res_works_for_broken_modules);\n+                return None;\n+            }\n             Some((name, module))\n         })\n }"}, {"sha": "ba9fcb3d1db38e89dc6318028047d99cf16a8d78", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32fa084c07375c7a596e0bfceddbef1830ae23e7/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=32fa084c07375c7a596e0bfceddbef1830ae23e7", "patch": "@@ -136,6 +136,35 @@ fn re_exports() {\n     );\n }\n \n+#[test]\n+fn name_res_works_for_broken_modules() {\n+    covers!(name_res_works_for_broken_modules);\n+    let (item_map, module_id) = item_map(\n+        \"\n+        //- /lib.rs\n+        mod foo // no `;`, no body\n+\n+        use self::foo::Baz;\n+        <|>\n+\n+        //- /foo/mod.rs\n+        pub mod bar;\n+\n+        pub use self::bar::Baz;\n+\n+        //- /foo/bar.rs\n+        pub struct Baz;\n+    \",\n+    );\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Baz: _\n+        \",\n+    );\n+}\n+\n #[test]\n fn item_map_contains_items_from_expansions() {\n     let (item_map, module_id) = item_map("}]}