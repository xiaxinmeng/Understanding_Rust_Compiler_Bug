{"sha": "6490ed30e1025fbb85b3a2dd4849a249c072fb30", "node_id": "C_kwDOAAsO6NoAKDY0OTBlZDMwZTEwMjVmYmI4NWIzYTJkZDQ4NDlhMjQ5YzA3MmZiMzA", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-28T22:11:55Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-29T00:02:45Z"}, "message": "Improve error message for `printf`-style format strings", "tree": {"sha": "170c9b42041dce30842771537c73e268c75c86d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170c9b42041dce30842771537c73e268c75c86d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6490ed30e1025fbb85b3a2dd4849a249c072fb30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6490ed30e1025fbb85b3a2dd4849a249c072fb30", "html_url": "https://github.com/rust-lang/rust/commit/6490ed30e1025fbb85b3a2dd4849a249c072fb30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6490ed30e1025fbb85b3a2dd4849a249c072fb30/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d71ba862309d59df710078a845c8772ffb22aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d71ba862309d59df710078a845c8772ffb22aba", "html_url": "https://github.com/rust-lang/rust/commit/1d71ba862309d59df710078a845c8772ffb22aba"}], "stats": {"total": 131, "additions": 105, "deletions": 26}, "files": [{"sha": "f0056cb79766a49f4db2f34a68a81b93c5176063", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -1154,11 +1154,12 @@ pub fn expand_preparsed_format_args(\n                     // account for `\"` and account for raw strings `r#`\n                     let padding = str_style.map(|i| i + 2).unwrap_or(1);\n                     for sub in foreign::$kind::iter_subs(fmt_str, padding) {\n-                        let trn = match sub.translate() {\n-                            Some(trn) => trn,\n+                        let (trn, success) = match sub.translate() {\n+                            Ok(trn) => (trn, true),\n+                            Err(Some(msg)) => (msg, false),\n \n                             // If it has no translation, don't call it out specifically.\n-                            None => continue,\n+                            _ => continue,\n                         };\n \n                         let pos = sub.position();\n@@ -1175,9 +1176,24 @@ pub fn expand_preparsed_format_args(\n \n                         if let Some(inner_sp) = pos {\n                             let sp = fmt_sp.from_inner(inner_sp);\n-                            suggestions.push((sp, trn));\n+\n+                            if success {\n+                                suggestions.push((sp, trn));\n+                            } else {\n+                                diag.span_note(\n+                                    sp,\n+                                    &format!(\"format specifiers use curly braces, and {}\", trn),\n+                                );\n+                            }\n                         } else {\n-                            diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                            if success {\n+                                diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                            } else {\n+                                diag.note(&format!(\n+                                    \"`{}` should use curly braces, and {}\",\n+                                    sub, trn\n+                                ));\n+                            }\n                         }\n                     }\n "}, {"sha": "bfddd7073ff2c3f993f7727a80c4012d182bcc0a", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -1,4 +1,4 @@\n-pub mod printf {\n+pub(crate) mod printf {\n     use super::strcursor::StrCursor as Cur;\n     use rustc_span::InnerSpan;\n \n@@ -36,10 +36,10 @@ pub mod printf {\n         ///\n         /// This ignores cases where the substitution does not have an exact equivalent, or where\n         /// the substitution would be unnecessary.\n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.translate(),\n-                Substitution::Escape => None,\n+                Substitution::Escape => Err(None),\n             }\n         }\n     }\n@@ -68,9 +68,9 @@ pub mod printf {\n     impl Format<'_> {\n         /// Translate this directive into an equivalent Rust formatting directive.\n         ///\n-        /// Returns `None` in cases where the `printf` directive does not have an exact Rust\n+        /// Returns `Err` in cases where the `printf` directive does not have an exact Rust\n         /// equivalent, rather than guessing.\n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             use std::fmt::Write;\n \n             let (c_alt, c_zero, c_left, c_plus) = {\n@@ -84,7 +84,12 @@ pub mod printf {\n                         '0' => c_zero = true,\n                         '-' => c_left = true,\n                         '+' => c_plus = true,\n-                        _ => return None,\n+                        _ => {\n+                            return Err(Some(format!(\n+                                \"the flag `{}` is unknown or unsupported\",\n+                                c\n+                            )));\n+                        }\n                     }\n                 }\n                 (c_alt, c_zero, c_left, c_plus)\n@@ -104,7 +109,9 @@ pub mod printf {\n             let width = match self.width {\n                 Some(Num::Next) => {\n                     // NOTE: Rust doesn't support this.\n-                    return None;\n+                    return Err(Some(\n+                        \"you have to use a positional or named parameter for the width\".to_string(),\n+                    ));\n                 }\n                 w @ Some(Num::Arg(_)) => w,\n                 w @ Some(Num::Num(_)) => w,\n@@ -125,13 +132,21 @@ pub mod printf {\n                 \"p\" => (Some(self.type_), false, true),\n                 \"g\" => (Some(\"e\"), true, false),\n                 \"G\" => (Some(\"E\"), true, false),\n-                _ => return None,\n+                _ => {\n+                    return Err(Some(format!(\n+                        \"the conversion specifier `{}` is unknown or unsupported\",\n+                        self.type_\n+                    )));\n+                }\n             };\n \n             let (fill, width, precision) = match (is_int, width, precision) {\n                 (true, Some(_), Some(_)) => {\n                     // Rust can't duplicate this insanity.\n-                    return None;\n+                    return Err(Some(\n+                        \"width and precision cannot both be specified for integer conversions\"\n+                            .to_string(),\n+                    ));\n                 }\n                 (true, None, Some(p)) => (Some(\"0\"), Some(p), None),\n                 (true, w, None) => (fill, w, None),\n@@ -169,7 +184,17 @@ pub mod printf {\n             s.push('{');\n \n             if let Some(arg) = self.parameter {\n-                write!(s, \"{}\", arg.checked_sub(1)?).ok()?;\n+                match write!(\n+                    s,\n+                    \"{}\",\n+                    match arg.checked_sub(1) {\n+                        Some(a) => a,\n+                        None => return Err(None),\n+                    }\n+                ) {\n+                    Err(_) => return Err(None),\n+                    _ => {}\n+                }\n             }\n \n             if has_options {\n@@ -199,12 +224,18 @@ pub mod printf {\n                 }\n \n                 if let Some(width) = width {\n-                    width.translate(&mut s).ok()?;\n+                    match width.translate(&mut s) {\n+                        Err(_) => return Err(None),\n+                        _ => {}\n+                    }\n                 }\n \n                 if let Some(precision) = precision {\n                     s.push('.');\n-                    precision.translate(&mut s).ok()?;\n+                    match precision.translate(&mut s) {\n+                        Err(_) => return Err(None),\n+                        _ => {}\n+                    }\n                 }\n \n                 if let Some(type_) = type_ {\n@@ -213,7 +244,7 @@ pub mod printf {\n             }\n \n             s.push('}');\n-            Some(s)\n+            Ok(s)\n         }\n     }\n \n@@ -623,11 +654,11 @@ pub mod shell {\n             }\n         }\n \n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n-                Substitution::Ordinal(n, _) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Name(n, _) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Escape(_) => None,\n+                Substitution::Ordinal(n, _) => Ok(format!(\"{{{}}}\", n)),\n+                Substitution::Name(n, _) => Ok(format!(\"{{{}}}\", n)),\n+                Substitution::Escape(_) => Err(None),\n             }\n         }\n     }"}, {"sha": "1336aab7316747a8e5043e321abc07314826d268", "filename": "compiler/rustc_builtin_macros/src/format_foreign/printf/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -3,7 +3,7 @@ use super::{iter_subs, parse_next_substitution as pns, Format as F, Num as N, Su\n macro_rules! assert_eq_pnsat {\n     ($lhs:expr, $rhs:expr) => {\n         assert_eq!(\n-            pns($lhs).and_then(|(s, _)| s.translate()),\n+            pns($lhs).and_then(|(s, _)| s.translate().ok()),\n             $rhs.map(<String as From<&str>>::from)\n         )\n     };\n@@ -98,7 +98,7 @@ fn test_parse() {\n #[test]\n fn test_iter() {\n     let s = \"The %d'th word %% is: `%.*s` %!\\n\";\n-    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n         subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n         vec![Some(\"{}\"), None, Some(\"{:.*}\"), None]"}, {"sha": "f5f82732f2034c9cdc534a7859faaf418a479688", "filename": "compiler/rustc_builtin_macros/src/format_foreign/shell/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -3,7 +3,7 @@ use super::{parse_next_substitution as pns, Substitution as S};\n macro_rules! assert_eq_pnsat {\n     ($lhs:expr, $rhs:expr) => {\n         assert_eq!(\n-            pns($lhs).and_then(|(f, _)| f.translate()),\n+            pns($lhs).and_then(|(f, _)| f.translate().ok()),\n             $rhs.map(<String as From<&str>>::from)\n         )\n     };\n@@ -37,7 +37,7 @@ fn test_parse() {\n fn test_iter() {\n     use super::iter_subs;\n     let s = \"The $0'th word $$ is: `$WORD` $!\\n\";\n-    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n         subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n         vec![Some(\"{0}\"), None, Some(\"{WORD}\")]"}, {"sha": "96277d4d0d9d7861d7fd4885773d1ea8da27db0e", "filename": "src/test/ui/fmt/issue-89173.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #89173: Make sure a helpful note is issued for\n+// printf-style format strings using `*` to specify the width.\n+\n+fn main() {\n+    let num = 0x0abcde;\n+    let width = 6;\n+    print!(\"%0*x\", width, num);\n+    //~^ ERROR: multiple unused formatting arguments\n+    //~| NOTE: multiple missing formatting specifiers\n+    //~| NOTE: argument never used\n+    //~| NOTE: argument never used\n+    //~| NOTE: format specifiers use curly braces, and you have to use a positional or named parameter for the width\n+    //~| NOTE: printf formatting not supported\n+}"}, {"sha": "7b21e0a4fc8965f22278dddfb0ed80eee150c412", "filename": "src/test/ui/fmt/issue-89173.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6490ed30e1025fbb85b3a2dd4849a249c072fb30/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6490ed30e1025fbb85b3a2dd4849a249c072fb30/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr?ref=6490ed30e1025fbb85b3a2dd4849a249c072fb30", "patch": "@@ -0,0 +1,18 @@\n+error: multiple unused formatting arguments\n+  --> $DIR/issue-89173.rs:7:20\n+   |\n+LL |     print!(\"%0*x\", width, num);\n+   |            ------  ^^^^^  ^^^ argument never used\n+   |            |       |\n+   |            |       argument never used\n+   |            multiple missing formatting specifiers\n+   |\n+note: format specifiers use curly braces, and you have to use a positional or named parameter for the width\n+  --> $DIR/issue-89173.rs:7:13\n+   |\n+LL |     print!(\"%0*x\", width, num);\n+   |             ^^^^\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: aborting due to previous error\n+"}]}