{"sha": "8bb4380448f3ef5391beff1b9f64bf956c43b61f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjQzODA0NDhmM2VmNTM5MWJlZmYxYjlmNjRiZjk1NmM0M2I2MWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:43:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:43:36Z"}, "message": "Fix tests", "tree": {"sha": "d07689e1bef8702f85b898256410238a1e0bc197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07689e1bef8702f85b898256410238a1e0bc197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb4380448f3ef5391beff1b9f64bf956c43b61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb4380448f3ef5391beff1b9f64bf956c43b61f", "html_url": "https://github.com/rust-lang/rust/commit/8bb4380448f3ef5391beff1b9f64bf956c43b61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb4380448f3ef5391beff1b9f64bf956c43b61f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e88aaef5d49c8ec7b6ffe6b41457c3a028b4eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e88aaef5d49c8ec7b6ffe6b41457c3a028b4eb0", "html_url": "https://github.com/rust-lang/rust/commit/6e88aaef5d49c8ec7b6ffe6b41457c3a028b4eb0"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "7ae3d0eebfc1c8c998959216eae52d195dcaebc6", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8bb4380448f3ef5391beff1b9f64bf956c43b61f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb4380448f3ef5391beff1b9f64bf956c43b61f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=8bb4380448f3ef5391beff1b9f64bf956c43b61f", "patch": "@@ -7,15 +7,15 @@ extern crate test_utils;\n \n use std::sync::Arc;\n \n-use ra_analysis::{\n-    Analysis, AnalysisHost, CrateGraph, CrateId, FileId, FileResolver, FnDescriptor, JobHandle,\n-};\n use ra_syntax::TextRange;\n-\n use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n use test_utils::{assert_eq_dbg, extract_offset};\n \n+use ra_analysis::{\n+    Analysis, AnalysisHost, CrateGraph, CrateId, FileId, FileResolver, FnDescriptor,\n+};\n+\n #[derive(Debug)]\n struct FileMap(Vec<(FileId, RelativePathBuf)>);\n \n@@ -64,24 +64,22 @@ fn get_signature(text: &str) -> (FnDescriptor, Option<usize>) {\n     let (offset, code) = extract_offset(text);\n     let code = code.as_str();\n \n-    let (_handle, token) = JobHandle::new();\n     let snap = analysis(&[(\"/lib.rs\", code)]);\n \n-    snap.resolve_callable(FileId(1), offset, &token).unwrap()\n+    snap.resolve_callable(FileId(1), offset).unwrap().unwrap()\n }\n \n #[test]\n fn test_resolve_module() {\n     let snap = analysis(&[(\"/lib.rs\", \"mod foo;\"), (\"/foo.rs\", \"\")]);\n-    let (_handle, token) = JobHandle::new();\n-    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into(), &token);\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into()).unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n     );\n \n     let snap = analysis(&[(\"/lib.rs\", \"mod foo;\"), (\"/foo/mod.rs\", \"\")]);\n-    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into(), &token);\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into()).unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n@@ -91,7 +89,7 @@ fn test_resolve_module() {\n #[test]\n fn test_unresolved_module_diagnostic() {\n     let snap = analysis(&[(\"/lib.rs\", \"mod foo;\")]);\n-    let diagnostics = snap.diagnostics(FileId(1));\n+    let diagnostics = snap.diagnostics(FileId(1)).unwrap();\n     assert_eq_dbg(\n         r#\"[Diagnostic {\n             message: \"unresolved module\",\n@@ -108,14 +106,14 @@ fn test_unresolved_module_diagnostic() {\n #[test]\n fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n     let snap = analysis(&[(\"/lib.rs\", \"mod foo {}\")]);\n-    let diagnostics = snap.diagnostics(FileId(1));\n+    let diagnostics = snap.diagnostics(FileId(1)).unwrap();\n     assert_eq_dbg(r#\"[]\"#, &diagnostics);\n }\n \n #[test]\n fn test_resolve_parent_module() {\n     let snap = analysis(&[(\"/lib.rs\", \"mod foo;\"), (\"/foo.rs\", \"\")]);\n-    let symbols = snap.parent_module(FileId(2));\n+    let symbols = snap.parent_module(FileId(2)).unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(1), FileSymbol { name: \"foo\", node_range: [0; 8), kind: MODULE })]\"#,\n         &symbols,\n@@ -126,7 +124,7 @@ fn test_resolve_parent_module() {\n fn test_resolve_crate_root() {\n     let mut host = analysis_host(&[(\"/lib.rs\", \"mod foo;\"), (\"/foo.rs\", \"\")]);\n     let snap = host.analysis();\n-    assert!(snap.crate_for(FileId(2)).is_empty());\n+    assert!(snap.crate_for(FileId(2)).unwrap().is_empty());\n \n     let crate_graph = CrateGraph {\n         crate_roots: {\n@@ -138,7 +136,7 @@ fn test_resolve_crate_root() {\n     host.set_crate_graph(crate_graph);\n     let snap = host.analysis();\n \n-    assert_eq!(snap.crate_for(FileId(2)), vec![CrateId(1)],);\n+    assert_eq!(snap.crate_for(FileId(2)).unwrap(), vec![CrateId(1)],);\n }\n \n #[test]\n@@ -232,10 +230,9 @@ fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n     let (offset, code) = extract_offset(text);\n     let code = code.as_str();\n \n-    let (_handle, token) = JobHandle::new();\n     let snap = analysis(&[(\"/lib.rs\", code)]);\n \n-    snap.find_all_refs(FileId(1), offset, &token)\n+    snap.find_all_refs(FileId(1), offset).unwrap()\n }\n \n #[test]\n@@ -266,4 +263,4 @@ fn test_find_all_refs_for_param_inside() {\n \n     let refs = get_all_refs(code);\n     assert_eq!(refs.len(), 2);\n-}\n\\ No newline at end of file\n+}"}]}