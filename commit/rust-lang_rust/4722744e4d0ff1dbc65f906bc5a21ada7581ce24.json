{"sha": "4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjI3NDRlNGQwZmYxZGJjNjVmOTA2YmM1YTIxYWRhNzU4MWNlMjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-08T00:46:00Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:03:02Z"}, "message": "Fix some remaining tests", "tree": {"sha": "524fb4ada16d957290c03dd77b133877d0993060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524fb4ada16d957290c03dd77b133877d0993060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "html_url": "https://github.com/rust-lang/rust/commit/4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c4628a5b71af301ccf51d9b1b6ab2207b1fcca", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c4628a5b71af301ccf51d9b1b6ab2207b1fcca", "html_url": "https://github.com/rust-lang/rust/commit/03c4628a5b71af301ccf51d9b1b6ab2207b1fcca"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "4af8dd982a7fd1bc6aa6d04e4b49377eaccceee2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -92,6 +92,13 @@ struct ConvertedBinding<'tcx> {\n     span: Span,\n }\n \n+#[derive(PartialEq)]\n+enum GenericArgPosition {\n+    Datatype,\n+    Function,\n+    Method,\n+}\n+\n struct GenericArgMismatchErrorCode {\n     lifetimes: (&'static str, &'static str),\n     types: (&'static str, &'static str),\n@@ -247,8 +254,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             } else {\n                 &empty_args\n             },\n-            false, // `is_declaration`\n-            is_method_call,\n+            if is_method_call {\n+                GenericArgPosition::Method\n+            } else {\n+                GenericArgPosition::Function\n+            },\n             def.parent.is_none() && def.has_self, // `has_self`\n             seg.infer_types || suppress_mismatch, // `infer_types`\n             GenericArgMismatchErrorCode {\n@@ -259,14 +269,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     }\n \n     /// Check that the correct number of generic arguments have been provided.\n-    /// This is used both for type declarations and function calls.\n+    /// This is used both for datatypes and function calls.\n     fn check_generic_arg_count(\n         tcx: TyCtxt,\n         span: Span,\n         def: &ty::Generics,\n         args: &hir::GenericArgs,\n-        is_declaration: bool,\n-        is_method_call: bool,\n+        position: GenericArgPosition,\n         has_self: bool,\n         infer_types: bool,\n         error_codes: GenericArgMismatchErrorCode,\n@@ -276,7 +285,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         // arguments in order to validate them with respect to the generic parameters.\n         let param_counts = def.own_counts();\n         let arg_counts = args.own_counts();\n-        let infer_lifetimes = !is_declaration && arg_counts.lifetimes == 0;\n+        let infer_lifetimes = position != GenericArgPosition::Datatype && arg_counts.lifetimes == 0;\n \n         let mut defaults: ty::GenericParamCount = Default::default();\n         for param in &def.params {\n@@ -288,7 +297,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             };\n         }\n \n-        if !is_declaration && !args.bindings.is_empty() {\n+        if position != GenericArgPosition::Datatype && !args.bindings.is_empty() {\n             AstConv::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n         }\n \n@@ -299,7 +308,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                            if late bound lifetime parameters are present\";\n                 let note = \"the late bound lifetime parameter is introduced here\";\n                 let span = args.args[0].span();\n-                if !is_method_call && arg_counts.lifetimes != param_counts.lifetimes {\n+                if position == GenericArgPosition::Function\n+                    && arg_counts.lifetimes != param_counts.lifetimes {\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n                     err.emit();\n@@ -328,15 +338,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n             // differently in diagnostics, which means we have a few cases to consider here.\n-            let (bound, quantifier, suppress_error) = if required != permitted {\n+            let (bound, quantifier) = if required != permitted {\n                 if provided < required {\n-                    (required, \"at least \", false)\n+                    (required, \"at least \")\n                 } else { // provided > permitted\n-                    (permitted, \"at most \", true)\n+                    (permitted, \"at most \")\n                 }\n             } else {\n-                (required, \"\", false)\n+                (required, \"\")\n             };\n+\n             let label = if required == permitted && provided > permitted {\n                 let diff = provided - permitted;\n                 format!(\n@@ -373,7 +384,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 }.into())\n             ).span_label(span, label).emit();\n \n-            suppress_error\n+            provided > required // `suppress_error`\n         };\n \n         if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n@@ -572,8 +583,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             span,\n             &generic_params,\n             &generic_args,\n-            true, // `is_declaration`\n-            false, // `is_method_call` (irrelevant here)\n+            GenericArgPosition::Datatype,\n             has_self,\n             infer_types,\n             GenericArgMismatchErrorCode {"}, {"sha": "1ee70d9bddea0faf7efa8e729ceab9c09232d3fa", "filename": "src/test/ui/bad/bad-mid-path-type-params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -38,16 +38,16 @@ impl Trait<isize> for S2 {\n \n fn foo<'a>() {\n     let _ = S::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR too many type parameters provided\n+    //~^ ERROR wrong number of type arguments\n \n     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR wrong number of lifetime arguments\n \n     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR too many type parameters provided\n+    //~^ ERROR wrong number of type arguments\n \n     let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n-    //~^ ERROR too many lifetime parameters provided\n+    //~^ ERROR wrong number of lifetime arguments\n }\n \n fn main() {}"}, {"sha": "1fe50cfebbac364c2e75add17a3f9e36685007ae", "filename": "src/test/ui/constructor-lifetime-args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -25,12 +25,12 @@ enum E<'a, 'b> {\n fn main() {\n     S(&0, &0); // OK\n     S::<'static>(&0, &0);\n-    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n     S::<'static, 'static, 'static>(&0, &0);\n-    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n     E::V(&0); // OK\n     E::V::<'static>(&0);\n-    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n     E::V::<'static, 'static, 'static>(&0);\n-    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n }"}, {"sha": "980ada9020c4875a83bc9626f90469caf838b018", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -24,9 +24,9 @@ impl S {\n fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n-    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n     S.early::<'static, 'static, 'static>();\n-    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n     let _: &u8 = S.life_and_type::<'static>();\n     S.life_and_type::<u8>();\n     S.life_and_type::<'static, u8>();\n@@ -71,9 +71,9 @@ fn ufcs() {\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n-    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n     S::early::<'static, 'static, 'static>(S);\n-    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);"}, {"sha": "dac76fb57fd7c3a3b4592b596222fd5009d261d9", "filename": "src/test/ui/traits/trait-test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -15,8 +15,8 @@ impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10.dup::<i32>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter\n-    10.blah::<i32, i32>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters\n+    10.dup::<i32>(); //~ ERROR wrong number of type arguments: expected 0, found 1\n+    10.blah::<i32, i32>(); //~ ERROR wrong number of type arguments: expected 1, found 2\n     (box 10 as Box<bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}, {"sha": "294a0fa0340cce58b505bb878570817f966f98e4", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4722744e4d0ff1dbc65f906bc5a21ada7581ce24/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs?ref=4722744e4d0ff1dbc65f906bc5a21ada7581ce24", "patch": "@@ -22,5 +22,5 @@ impl<'a> IntoCow<'a, str> for String {\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR too few type parameters provided: expected 1 type parameter\n+    //~^ ERROR wrong number of type arguments: expected 1, found 0\n }"}]}