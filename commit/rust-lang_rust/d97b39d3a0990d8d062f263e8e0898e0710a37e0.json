{"sha": "d97b39d3a0990d8d062f263e8e0898e0710a37e0", "node_id": "C_kwDOAAsO6NoAKGQ5N2IzOWQzYTA5OTBkOGQwNjJmMjYzZThlMDg5OGUwNzEwYTM3ZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-18T04:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-18T04:44:47Z"}, "message": "Rollup merge of #110461 - WaffleLapkin:expect_, r=Nilstrieb\n\nUse `Item::expect_*` and `ImplItem::expect_*` more\n\nr? ``@Nilstrieb``", "tree": {"sha": "5dcff2d39b754bc47c53b67d5e0ea299f8e4fd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dcff2d39b754bc47c53b67d5e0ea299f8e4fd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97b39d3a0990d8d062f263e8e0898e0710a37e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPiA/CRBK7hj4Ov3rIwAAkP4IAEqW6AGLsycLNzQepU6T8Bn2\nWxVYZMYG/Obr43iithJT30tJ6K9k2BGStNroad9icf6x5bAz/rP8+r4mm+xdhV8x\nA5+J0GidWypzNyvNwbY8l6zIalyyrcy5p+vD7RcxUGe0aUDOX2H/vDdbIhI3bqH8\nlyK7unFkMSH0bpEXgvCfivDPuHRkarpOTJearWcpsBlIIzgPdhXZGMJzNhD0QqTF\njT4Nvu/D4DXCrCOfAhW33+QPTaYIUFjQoNg7AO+3cBVRQ3aq3CU9H23F49V0sa2Q\n7BZa7Q8G9TlCCq6eNE+MHvZrDHVecn4lN033NFdELVh9HNRYNTRXWxMpat7wTqU=\n=MnwO\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dcff2d39b754bc47c53b67d5e0ea299f8e4fd26\nparent d6468916c0bdd98148970c8d6e51ecc935b9f47a\nparent 880da9fca96f59e2503c2ad0343177265e788ec4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681793087 +0200\ncommitter GitHub <noreply@github.com> 1681793087 +0200\n\nRollup merge of #110461 - WaffleLapkin:expect_, r=Nilstrieb\n\nUse `Item::expect_*` and `ImplItem::expect_*` more\n\nr? ``@Nilstrieb``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97b39d3a0990d8d062f263e8e0898e0710a37e0", "html_url": "https://github.com/rust-lang/rust/commit/d97b39d3a0990d8d062f263e8e0898e0710a37e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97b39d3a0990d8d062f263e8e0898e0710a37e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6468916c0bdd98148970c8d6e51ecc935b9f47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6468916c0bdd98148970c8d6e51ecc935b9f47a", "html_url": "https://github.com/rust-lang/rust/commit/d6468916c0bdd98148970c8d6e51ecc935b9f47a"}, {"sha": "880da9fca96f59e2503c2ad0343177265e788ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/880da9fca96f59e2503c2ad0343177265e788ec4", "html_url": "https://github.com/rust-lang/rust/commit/880da9fca96f59e2503c2ad0343177265e788ec4"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "7b94f6edf7039e48e0a5f6878709417abaa2f938", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -138,12 +138,10 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             // Evaluate with the lifetimes in `params` in-scope.\n             // This is used to track which lifetimes have already been defined,\n             // and which need to be replicated when lowering an async fn.\n-            match parent_hir.node().expect_item().kind {\n-                hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n-                    lctx.is_in_trait_impl = of_trait.is_some();\n-                }\n-                _ => {}\n-            };\n+\n+            if let hir::ItemKind::Impl(impl_) = parent_hir.node().expect_item().kind {\n+                lctx.is_in_trait_impl = impl_.of_trait.is_some();\n+            }\n \n             match ctxt {\n                 AssocCtxt::Trait => hir::OwnerNode::TraitItem(lctx.lower_trait_item(item)),"}, {"sha": "fb0c087bfb47197f12b77c0b6fe15d180e0cfe9d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -3146,7 +3146,6 @@ impl<'hir> Item<'hir> {\n         (ty, gen)\n     }\n \n-    /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     /// Expect an [`ItemKind::OpaqueTy`] or panic.\n     #[track_caller]\n     pub fn expect_opaque_ty(&self) -> &OpaqueTy<'hir> {\n@@ -3168,7 +3167,6 @@ impl<'hir> Item<'hir> {\n         (data, gen)\n     }\n \n-    /// A union definition, e.g., `union Foo<A, B> {x: A, y: B}`.\n     /// Expect an [`ItemKind::Union`] or panic.\n     #[track_caller]\n     pub fn expect_union(&self) -> (&VariantData<'hir>, &'hir Generics<'hir>) {"}, {"sha": "c2dc2a0f058f33bbc6dcaa028524756ee237accc", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -74,10 +74,9 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n-    let span = match tcx.hir().expect_item(impl_did).kind {\n-        ItemKind::Impl(hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. }) => return,\n-        ItemKind::Impl(impl_) => impl_.self_ty.span,\n-        _ => bug!(\"expected Copy impl item\"),\n+    let span = match tcx.hir().expect_item(impl_did).expect_impl() {\n+        hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => return,\n+        hir::Impl { self_ty, .. } => self_ty.span,\n     };\n \n     let cause = traits::ObligationCause::misc(span, impl_did);"}, {"sha": "e410172c8c8d14bddcbb30c12350d3b77ff19d7b", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -462,10 +462,7 @@ fn foo(&self) -> Self::T { String::new() }\n         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n-                match &tcx.hir().expect_item(opaque_local_def_id).kind {\n-                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n-                }\n+                tcx.hir().expect_item(opaque_local_def_id).expect_opaque_ty()\n             } else {\n                 return false;\n             };"}, {"sha": "680465bdab6901a3a02d61127ea53b58526a90f8", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -392,12 +392,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// defining scope.\n     #[instrument(skip(self), level = \"trace\", ret)]\n     fn opaque_type_origin_unchecked(&self, def_id: LocalDefId) -> OpaqueTyOrigin {\n-        match self.tcx.hir().expect_item(def_id).kind {\n-            hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n-            ref itemkind => {\n-                bug!(\"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n-            }\n-        }\n+        self.tcx.hir().expect_item(def_id).expect_opaque_ty().origin\n     }\n }\n "}, {"sha": "e7c3cf779d3d007870443c441bf25a8c6c66aab9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97b39d3a0990d8d062f263e8e0898e0710a37e0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d97b39d3a0990d8d062f263e8e0898e0710a37e0", "patch": "@@ -1469,8 +1469,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         match impl_item.kind {\n             ty::AssocKind::Fn => {\n-                let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n-                let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n+                let (sig, body) =\n+                    self.tcx.hir().expect_impl_item(def_id.expect_local()).expect_fn();\n                 self.tables.asyncness.set_some(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                 // Can be inside `impl const Trait`, so using sig.header.constness is not reliable"}]}