{"sha": "65ed591197cdb6e17f505a0b2d8c38d730491c98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWQ1OTExOTdjZGI2ZTE3ZjUwNWEwYjJkOGMzOGQ3MzA0OTFjOTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-30T10:18:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:15Z"}, "message": "Move the resource limits to the session in preparation for attributes configuring them", "tree": {"sha": "519d29e4880d7848b884e32dfdffbb0648718db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/519d29e4880d7848b884e32dfdffbb0648718db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ed591197cdb6e17f505a0b2d8c38d730491c98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53cACgkQpp+NIls6\n19nKHQ//dzQwRkSidA+mCcPKrcBk8n/5cL7xd41HxZLTXcCkxOw1V8159s0nfCWX\nx5jQsXMJYzk1KsWxFA1jIAfQn7mzrQrdfFll4iW7p8SCWweoNQL6LDcEFCZlwUJu\nw13RnFTsogibCBZJV72wlM0tUVPoXHe+w77ZaElgJZLwMMtg/D1CmreB3Jyk2bJ4\nsf+WIf2Y95tOnQVFoaQwY5yafcu5spyvlyODbkyOJQOW6/YNz/WWy4EsGNyDfoeb\nnEHggJsa0yYrpq84CxdSoirlpVPO6Og6e0P2cXxFixVLu2HMYGIMiNGSBqh68mHV\npMBZ1TG1c1huTVCZKsuPtlj0CrzxzQd+z7tle6PrK7Mlrx/DP7e7gKTd95O7Oui6\naa+6bowriAdKbFjdRjNWq71xNLUi6q+nAMEChDdWQfXbIY02z0qRZn+vg91Lk+XW\nrZSbrFZgELV8mN0bDtksYhau9HTUoaVOQKeZqhjOjirLQQMwIZWZNCw1aQryqg4x\nmHH6ApzCtNpn3S8Xwa0jtRWbKAF2H8XKK9n6o7lelD7wqoeLwSMS7NeAbpdhW0X8\nOhNM56vP65OkU+dbv7s74k9c1iszsCDCsaaxuFPJP5ggX6zbnh7LPdqX/qpYapjL\nFriEK0Zdzo84V8ALEIHPCMxkMAK7bKK5GhJukr/Vdbged1XtUmM=\n=btzt\n-----END PGP SIGNATURE-----", "payload": "tree 519d29e4880d7848b884e32dfdffbb0648718db2\nparent 0462d092d27bf72a7c66303571d3852d596a81e9\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517307517 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494455 +0100\n\nMove the resource limits to the session in preparation for attributes configuring them\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ed591197cdb6e17f505a0b2d8c38d730491c98", "html_url": "https://github.com/rust-lang/rust/commit/65ed591197cdb6e17f505a0b2d8c38d730491c98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ed591197cdb6e17f505a0b2d8c38d730491c98/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0462d092d27bf72a7c66303571d3852d596a81e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0462d092d27bf72a7c66303571d3852d596a81e9", "html_url": "https://github.com/rust-lang/rust/commit/0462d092d27bf72a7c66303571d3852d596a81e9"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "232344a036783a9eeeb5e129f78c8f486546a8c9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -103,6 +103,13 @@ pub struct Session {\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: Cell<usize>,\n \n+    /// The maximum number of stackframes allowed in const eval\n+    pub const_eval_stack_frame_limit: Cell<usize>,\n+    /// The maximum number miri steps per constant\n+    pub const_eval_step_limit: Cell<usize>,\n+    /// The maximum number of virtual bytes per constant\n+    pub const_eval_memory_limit: Cell<u64>,\n+\n     /// The metadata::creader module may inject an allocator/panic_runtime\n     /// dependency if it didn't already find one, and this tracks what was\n     /// injected.\n@@ -1004,6 +1011,9 @@ pub fn build_session_(sopts: config::Options,\n         features: RefCell::new(None),\n         recursion_limit: Cell::new(64),\n         type_length_limit: Cell::new(1048576),\n+        const_eval_stack_frame_limit: Cell::new(100),\n+        const_eval_step_limit: Cell::new(1_000_000),\n+        const_eval_memory_limit: Cell::new(100 * 1024 * 1024), // 100 MB\n         next_node_id: Cell::new(NodeId::new(1)),\n         injected_allocator: Cell::new(None),\n         allocator_kind: Cell::new(None),"}, {"sha": "e216f5c4d8a8218c8803f93cb3680b58dac85f8a", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -24,8 +24,7 @@ pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>> {\n     debug!(\"mk_borrowck_eval_cx: {:?}\", instance);\n     let param_env = tcx.param_env(instance.def_id());\n-    let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n         instance,\n@@ -43,8 +42,7 @@ pub fn mk_eval_cx<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, EvalContext<'a, 'tcx, 'tcx, CompileTimeEvaluator>> {\n     debug!(\"mk_eval_cx: {:?}, {:?}\", instance, param_env);\n-    let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n     let mir = ecx.load_mir(instance.def)?;\n     // insert a stack frame so any queries have the correct substs\n     ecx.push_stack_frame(\n@@ -95,8 +93,7 @@ fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> (EvalResult<'tcx, (Value, Pointer, Ty<'tcx>)>, EvalContext<'a, 'mir, 'tcx, CompileTimeEvaluator>) {\n     debug!(\"eval_body: {:?}, {:?}\", cid, param_env);\n-    let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::new(tcx, param_env, limits, CompileTimeEvaluator, ());\n+    let mut ecx = EvalContext::new(tcx, param_env, CompileTimeEvaluator, ());\n     let res = (|| {\n         let mut mir = match mir {\n             Some(mir) => mir,"}, {"sha": "676f99ea6be0c19526954dcd52c100b877017c34", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -43,7 +43,7 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The maximum number of operations that may be executed.\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n-    pub(crate) steps_remaining: u64,\n+    pub(crate) steps_remaining: usize,\n }\n \n /// A stack frame.\n@@ -102,23 +102,6 @@ pub enum StackPopCleanup {\n     None,\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct ResourceLimits {\n-    pub memory_size: u64,\n-    pub step_limit: u64,\n-    pub stack_limit: usize,\n-}\n-\n-impl Default for ResourceLimits {\n-    fn default() -> Self {\n-        ResourceLimits {\n-            memory_size: 100 * 1024 * 1024, // 100 MB\n-            step_limit: 1_000_000,\n-            stack_limit: 100,\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct TyAndPacked<'tcx> {\n     pub ty: Ty<'tcx>,\n@@ -200,18 +183,17 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     pub fn new(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        limits: ResourceLimits,\n         machine: M,\n         memory_data: M::MemoryData,\n     ) -> Self {\n         EvalContext {\n             machine,\n             tcx,\n             param_env,\n-            memory: Memory::new(tcx, limits.memory_size, memory_data),\n+            memory: Memory::new(tcx, memory_data),\n             stack: Vec::new(),\n-            stack_limit: limits.stack_limit,\n-            steps_remaining: limits.step_limit,\n+            stack_limit: tcx.sess.const_eval_stack_frame_limit.get(),\n+            steps_remaining: tcx.sess.const_eval_step_limit.get(),\n         }\n     }\n \n@@ -559,7 +541,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n \n             Aggregate(ref kind, ref operands) => {\n-                self.inc_step_counter_and_check_limit(operands.len() as u64)?;\n+                self.inc_step_counter_and_check_limit(operands.len())?;\n \n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {"}, {"sha": "da8ff11e3d0a9bca728944e687426e446db18053", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -55,14 +55,14 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, max_memory: u64, data: M::MemoryData) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, data: M::MemoryData) -> Self {\n         Memory {\n             data,\n             alloc_kind: HashMap::new(),\n             alloc_map: HashMap::new(),\n             uninitialized_statics: HashMap::new(),\n             tcx,\n-            memory_size: max_memory,\n+            memory_size: tcx.sess.const_eval_memory_limit.get(),\n             memory_usage: 0,\n             cur_frame: usize::max_value(),\n         }"}, {"sha": "8e0158569a86768dbfe6c74adda391aaf5d232be", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -11,7 +11,7 @@ mod step;\n mod terminator;\n mod traits;\n \n-pub use self::eval_context::{EvalContext, Frame, ResourceLimits, StackPopCleanup,\n+pub use self::eval_context::{EvalContext, Frame, StackPopCleanup,\n                              TyAndPacked, ValTy};\n \n pub use self::place::{Place, PlaceExtra};"}, {"sha": "94fe3d1c67b8fc634aba5e2640a7292113bd8d6c", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ed591197cdb6e17f505a0b2d8c38d730491c98/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=65ed591197cdb6e17f505a0b2d8c38d730491c98", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::EvalResult;\n use super::{EvalContext, Machine};\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    pub fn inc_step_counter_and_check_limit(&mut self, n: u64) -> EvalResult<'tcx> {\n+    pub fn inc_step_counter_and_check_limit(&mut self, n: usize) -> EvalResult<'tcx> {\n         self.steps_remaining = self.steps_remaining.saturating_sub(n);\n         if self.steps_remaining > 0 {\n             Ok(())"}]}