{"sha": "5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGNkMDliNTM5ODlmMGEzYzNmY2VmYTViYTNlZTlkNDBlNjAwNjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-09T15:39:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:29Z"}, "message": "add `TypeRelation` and `Lift` impls for `Kind`", "tree": {"sha": "8e16682b3b7af8a7a7f626fd60dd6cafb29a66f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e16682b3b7af8a7a7f626fd60dd6cafb29a66f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "html_url": "https://github.com/rust-lang/rust/commit/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23837c1901ab234ee6bc806744cd47d5a652cdfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/23837c1901ab234ee6bc806744cd47d5a652cdfc", "html_url": "https://github.com/rust-lang/rust/commit/23837c1901ab234ee6bc806744cd47d5a652cdfc"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "7f48f8c431fac08ae71befb3e8fef059945a825a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "patch": "@@ -16,7 +16,7 @@\n use hir::def_id::DefId;\n use middle::const_val::ConstVal;\n use traits::Reveal;\n-use ty::subst::{UnpackedKind, Substs};\n+use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n use mir::interpret::{GlobalId, Value, PrimVal};\n@@ -142,15 +142,7 @@ pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n \n     let params = a_subst.iter().zip(b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances.map_or(ty::Invariant, |v| v[i]);\n-        match (a.unpack(), b.unpack()) {\n-            (UnpackedKind::Lifetime(a_lt), UnpackedKind::Lifetime(b_lt)) => {\n-                Ok(relation.relate_with_variance(variance, &a_lt, &b_lt)?.into())\n-            }\n-            (UnpackedKind::Type(a_ty), UnpackedKind::Type(b_ty)) => {\n-                Ok(relation.relate_with_variance(variance, &a_ty, &b_ty)?.into())\n-            }\n-            (UnpackedKind::Lifetime(_), _) | (UnpackedKind::Type(_), _) => bug!()\n-        }\n+        relation.relate_with_variance(variance, a, b)\n     });\n \n     Ok(tcx.mk_substs(params)?)\n@@ -693,6 +685,27 @@ impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for Box<T> {\n     }\n }\n \n+impl<'tcx> Relate<'tcx> for Kind<'tcx> {\n+    fn relate<'a, 'gcx, R>(\n+        relation: &mut R,\n+        a: &Kind<'tcx>,\n+        b: &Kind<'tcx>\n+    ) -> RelateResult<'tcx, Kind<'tcx>>\n+    where\n+        R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a,\n+    {\n+        match (a.unpack(), b.unpack()) {\n+            (UnpackedKind::Lifetime(a_lt), UnpackedKind::Lifetime(b_lt)) => {\n+                Ok(relation.relate(&a_lt, &b_lt)?.into())\n+            }\n+            (UnpackedKind::Type(a_ty), UnpackedKind::Type(b_ty)) => {\n+                Ok(relation.relate(&a_ty, &b_ty)?.into())\n+            }\n+            (UnpackedKind::Lifetime(_), _) | (UnpackedKind::Type(_), _) => bug!()\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Error handling\n "}, {"sha": "e70c72335aa36aa8e5983a98a36f296426c99ab3", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5ddcd09b53989f0a3c3fcefa5ba3ee9d40e60064", "patch": "@@ -11,7 +11,7 @@\n // Type substitutions.\n \n use hir::def_id::DefId;\n-use ty::{self, Slice, Region, Ty, TyCtxt};\n+use ty::{self, Lift, Slice, Region, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -113,6 +113,17 @@ impl<'tcx> fmt::Display for Kind<'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for Kind<'a> {\n+    type Lifted = Kind<'tcx>;\n+\n+    fn lift_to_tcx<'cx, 'gcx>(&self, tcx: TyCtxt<'cx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        match self.unpack() {\n+            UnpackedKind::Lifetime(a) => a.lift_to_tcx(tcx).map(|a| a.into()),\n+            UnpackedKind::Type(a) => a.lift_to_tcx(tcx).map(|a| a.into()),\n+        }\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for Kind<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match self.unpack() {"}]}