{"sha": "9eec73820c2656b25ac513d6362e75f0c4171b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZWM3MzgyMGMyNjU2YjI1YWM1MTNkNjM2MmU3NWYwYzQxNzFiM2I=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-09T09:47:13Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-30T04:55:21Z"}, "message": "Remove `after_expand` and `after_write_deps` CompileController entry points", "tree": {"sha": "bf211ef4f6019d9014c46988e5ebd2984a978913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf211ef4f6019d9014c46988e5ebd2984a978913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eec73820c2656b25ac513d6362e75f0c4171b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eec73820c2656b25ac513d6362e75f0c4171b3b", "html_url": "https://github.com/rust-lang/rust/commit/9eec73820c2656b25ac513d6362e75f0c4171b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eec73820c2656b25ac513d6362e75f0c4171b3b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "html_url": "https://github.com/rust-lang/rust/commit/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4"}], "stats": {"total": 62, "additions": 1, "deletions": 61}, "files": [{"sha": "619a1b67f277e42f853ff83c1fa09a0f038bbee7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9eec73820c2656b25ac513d6362e75f0c4171b3b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec73820c2656b25ac513d6362e75f0c4171b3b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9eec73820c2656b25ac513d6362e75f0c4171b3b", "patch": "@@ -120,30 +120,8 @@ pub fn compile_input(sess: &Session,\n             phase_2_configure_and_expand(sess, &cstore, krate, &id, addl_plugins, make_glob_map)?\n         };\n \n-        controller_entry_point!(after_expand,\n-                                sess,\n-                                CompileState::state_after_expand(input,\n-                                                                 sess,\n-                                                                 outdir,\n-                                                                 output,\n-                                                                 &cstore,\n-                                                                 &expanded_crate,\n-                                                                 &id),\n-                                Ok(()));\n-\n         write_out_deps(sess, &outputs, &id);\n \n-        controller_entry_point!(after_write_deps,\n-                                sess,\n-                                CompileState::state_after_write_deps(input,\n-                                                                     sess,\n-                                                                     outdir,\n-                                                                     output,\n-                                                                     &cstore,\n-                                                                     &expanded_crate,\n-                                                                     &id),\n-                                Ok(()));\n-\n         let arenas = ty::CtxtArenas::new();\n \n         // Construct the HIR map\n@@ -284,8 +262,6 @@ pub fn source_name(input: &Input) -> String {\n /// Expect more entry points to be added in the future.\n pub struct CompileController<'a> {\n     pub after_parse: PhaseController<'a>,\n-    pub after_expand: PhaseController<'a>,\n-    pub after_write_deps: PhaseController<'a>,\n     pub after_hir_lowering: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n@@ -297,8 +273,6 @@ impl<'a> CompileController<'a> {\n     pub fn basic() -> CompileController<'a> {\n         CompileController {\n             after_parse: PhaseController::basic(),\n-            after_expand: PhaseController::basic(),\n-            after_write_deps: PhaseController::basic(),\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n@@ -389,40 +363,6 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n         }\n     }\n \n-    fn state_after_expand(input: &'a Input,\n-                          session: &'ast Session,\n-                          out_dir: &'a Option<PathBuf>,\n-                          out_file: &'a Option<PathBuf>,\n-                          cstore: &'a CStore,\n-                          expanded_crate: &'a ast::Crate,\n-                          crate_name: &'a str)\n-                          -> CompileState<'a, 'b, 'ast, 'tcx> {\n-        CompileState {\n-            crate_name: Some(crate_name),\n-            cstore: Some(cstore),\n-            expanded_crate: Some(expanded_crate),\n-            out_file: out_file.as_ref().map(|s| &**s),\n-            ..CompileState::empty(input, session, out_dir)\n-        }\n-    }\n-\n-    fn state_after_write_deps(input: &'a Input,\n-                              session: &'ast Session,\n-                              out_dir: &'a Option<PathBuf>,\n-                              out_file: &'a Option<PathBuf>,\n-                              cstore: &'a CStore,\n-                              krate: &'a ast::Crate,\n-                              crate_name: &'a str)\n-                              -> CompileState<'a, 'b, 'ast, 'tcx> {\n-        CompileState {\n-            crate_name: Some(crate_name),\n-            cstore: Some(cstore),\n-            expanded_crate: Some(krate),\n-            out_file: out_file.as_ref().map(|s| &**s),\n-            ..CompileState::empty(input, session, out_dir)\n-        }\n-    }\n-\n     fn state_after_hir_lowering(input: &'a Input,\n                                 session: &'ast Session,\n                                 out_dir: &'a Option<PathBuf>,"}, {"sha": "c9569a63436f5f1b2e5a891d1260d1324d54704d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eec73820c2656b25ac513d6362e75f0c4171b3b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eec73820c2656b25ac513d6362e75f0c4171b3b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9eec73820c2656b25ac513d6362e75f0c4171b3b", "patch": "@@ -511,7 +511,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         }\n \n         if sess.opts.no_analysis || sess.opts.debugging_opts.ast_json {\n-            control.after_write_deps.stop = Compilation::Stop;\n+            control.after_hir_lowering.stop = Compilation::Stop;\n         }\n \n         if !sess.opts.output_types.keys().any(|&i| i == OutputType::Exe) {"}]}