{"sha": "33212bf7f527798a8cfa2bbb38781742f4ca718a", "node_id": "C_kwDOAAsO6NoAKDMzMjEyYmY3ZjUyNzc5OGE4Y2ZhMmJiYjM4NzgxNzQyZjRjYTcxOGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T22:01:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T22:30:56Z"}, "message": "Remove deferred sized checks", "tree": {"sha": "c72e070ccfc570fa2159e6fbd49c8dd72f85e1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72e070ccfc570fa2159e6fbd49c8dd72f85e1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33212bf7f527798a8cfa2bbb38781742f4ca718a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33212bf7f527798a8cfa2bbb38781742f4ca718a", "html_url": "https://github.com/rust-lang/rust/commit/33212bf7f527798a8cfa2bbb38781742f4ca718a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33212bf7f527798a8cfa2bbb38781742f4ca718a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40336865fe7d4a01139a3336639c6971647e885c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40336865fe7d4a01139a3336639c6971647e885c", "html_url": "https://github.com/rust-lang/rust/commit/40336865fe7d4a01139a3336639c6971647e885c"}], "stats": {"total": 144, "additions": 37, "deletions": 107}, "files": [{"sha": "5376e4c8c96a4ab06dfcd2815790e80f08f135e0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -561,16 +561,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We just want to check sizedness, so instead of introducing\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n-                    let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n+                    let arg_span = args.get(i).map(|a| a.span);\n+                    let span = arg_span.unwrap_or(expr.span);\n                     let input = self.replace_bound_vars_with_fresh_vars(\n                         span,\n                         infer::LateBoundRegionConversionTime::FnCall,\n                         fn_sig.input(i),\n                     );\n-                    self.require_type_is_sized_deferred(\n-                        input,\n+                    self.require_type_is_sized(\n+                        self.normalize_associated_types_in(span, input),\n                         span,\n-                        traits::SizedArgumentType(None),\n+                        traits::SizedArgumentType(arg_span),\n                     );\n                 }\n             }\n@@ -585,7 +586,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 infer::LateBoundRegionConversionTime::FnCall,\n                 fn_sig.output(),\n             );\n-            self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n+            self.require_type_is_sized(\n+                self.normalize_associated_types_in(expr.span, output),\n+                expr.span,\n+                traits::SizedReturnType,\n+            );\n         }\n \n         // We always require that the type provided as the value for"}, {"sha": "1d9d04ceec0d76fc44caa13553895848bcba437f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -442,17 +442,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn require_type_is_sized_deferred(\n-        &self,\n-        ty: Ty<'tcx>,\n-        span: Span,\n-        code: traits::ObligationCauseCode<'tcx>,\n-    ) {\n-        if !ty.references_error() {\n-            self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n-        }\n-    }\n-\n     pub fn register_bound(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "f3115fc5c023219cf73c42313b329bcbc4bbec75", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -35,11 +35,6 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n-    // Some additional `Sized` obligations badly affect type inference.\n-    // These obligations are added in a later stage of typeck.\n-    pub(super) deferred_sized_obligations:\n-        RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n-\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the\n@@ -117,7 +112,6 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             infcx,\n             fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),\n-            deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_transmute_checks: RefCell::new(Vec::new()),"}, {"sha": "dfbef544b1d28835fe0100009824f3c23581fe12", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -467,11 +467,6 @@ fn typeck_with_fallback<'tcx>(\n         fcx.resolve_rvalue_scopes(def_id.to_def_id());\n         fcx.resolve_generator_interiors(def_id.to_def_id());\n \n-        for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n-            let ty = fcx.normalize_ty(span, ty);\n-            fcx.require_type_is_sized(ty, span, code);\n-        }\n-\n         fcx.select_all_obligations_or_error();\n \n         if !fcx.infcx.is_tainted_by_errors() {"}, {"sha": "53358b183cbf527ad6d6476088aa71fc6e7ed6ec", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -9,7 +9,6 @@ where\n     use std::convert::TryFrom;\n     <[T; N.get()]>::try_from(())\n     //~^ error: the trait bound\n-    //~| error: the trait bound\n     //~| error: mismatched types\n }\n "}, {"sha": "66f1ab726922df37cef4c10b0653d4f3fe08d849", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -33,7 +33,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo` is implemented for `i32`\n "}, {"sha": "0557340f792fd21292d8fb7aae82683ce9ab4dbc", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -15,11 +15,16 @@ error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |         ^^ doesn't have a size known at compile-time\n+   |     --- ^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     foo(&*x);\n+   |         +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4addaccefc1045ec2045563331e1dd0e7fc5326", "filename": "src/test/ui/iterators/issue-28098.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n-    //~| ERROR `()` is not an iterator\n \n     for _ in false {}\n     //~^ ERROR `bool` is not an iterator\n@@ -17,7 +16,6 @@ pub fn other() {\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n-    //~| ERROR `()` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator"}, {"sha": "e7128248f93414dfd00e11be7db33bd4ef1eaaf6", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -9,7 +9,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:6:14\n+  --> $DIR/issue-28098.rs:5:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n@@ -18,7 +18,7 @@ LL |     for _ in false {}\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:9:28\n+  --> $DIR/issue-28098.rs:8:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -28,15 +28,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:2:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:18:28\n+  --> $DIR/issue-28098.rs:17:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -46,7 +38,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:22:28\n+  --> $DIR/issue-28098.rs:20:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -56,22 +48,14 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:25:14\n+  --> $DIR/issue-28098.rs:23:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:18:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "79c40f650db810daf1f9197fdcd46d4a2f05311e", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -32,11 +32,8 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "6e3601d7bf4b53463496cca851371bd0b073e8ba", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -12,7 +12,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:18\n+  --> $DIR/multiple-impls.rs:35:18\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ------------ ^^^^^^^^^^^^^ on impl for Foo\n@@ -25,7 +25,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:39:18\n+  --> $DIR/multiple-impls.rs:37:18\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ------------ ^^^^^^^^^^^^^ on impl for Bar\n@@ -37,39 +37,6 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:5\n-   |\n-LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ trait message\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:5\n-   |\n-LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Foo\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:39:5\n-   |\n-LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Bar\n-   |\n-   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b03e1f7c6a8dfbb8d76b0865b245e48301d5cb18", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -21,5 +21,4 @@ impl Index<usize> for [i32] {\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "396c062cfe2acfe26cc67ba8c1246802b16ee562", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -9,15 +9,6 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n    = help: the trait `Index<usize>` is implemented for `[i32]`\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:5\n-   |\n-LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the trait `Index<usize>` is implemented for `[i32]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d7af558eef42aa45ecd9469b3b6a71016935ba90", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33212bf7f527798a8cfa2bbb38781742f4ca718a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=33212bf7f527798a8cfa2bbb38781742f4ca718a", "patch": "@@ -2,11 +2,16 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |        ^^ doesn't have a size known at compile-time\n+   |      - ^^ doesn't have a size known at compile-time\n+   |      |\n+   |      required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     &X(&*Y)\n+   |        +\n \n error: aborting due to previous error\n "}]}