{"sha": "379dce11a958149915d1188741e03acefe1e1bd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OWRjZTExYTk1ODE0OTkxNWQxMTg4NzQxZTAzYWNlZmUxZTFiZDU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-27T00:50:20Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-29T03:34:05Z"}, "message": "core: Document core::path::GenericPath's trait methods", "tree": {"sha": "0b3b552ecabcf7c5b0c201f7a80bf400e9192ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3b552ecabcf7c5b0c201f7a80bf400e9192ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379dce11a958149915d1188741e03acefe1e1bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379dce11a958149915d1188741e03acefe1e1bd5", "html_url": "https://github.com/rust-lang/rust/commit/379dce11a958149915d1188741e03acefe1e1bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379dce11a958149915d1188741e03acefe1e1bd5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b7a0fc235cd2e0782302cd6fb83634e190b15b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7a0fc235cd2e0782302cd6fb83634e190b15b7", "html_url": "https://github.com/rust-lang/rust/commit/7b7a0fc235cd2e0782302cd6fb83634e190b15b7"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "840795533fb6dbad567cb99fcf13cdcbeb2c3039", "filename": "src/libcore/path.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/379dce11a958149915d1188741e03acefe1e1bd5/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379dce11a958149915d1188741e03acefe1e1bd5/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=379dce11a958149915d1188741e03acefe1e1bd5", "patch": "@@ -44,31 +44,71 @@ pub fn PosixPath(s: &str) -> PosixPath {\n }\n \n pub trait GenericPath {\n+    /// Converts a string to a Path\n     fn from_str(&str) -> Self;\n \n+    /// Returns the directory component of `self`, as a string\n     fn dirname(&self) -> ~str;\n+    /// Returns the file component of `self`, as a string option.\n+    /// Returns None if `self` names a directory.\n     fn filename(&self) -> Option<~str>;\n+    /// Returns the stem of the file component of `self`, as a string option.\n+    /// The stem is the slice of a filename starting at 0 and ending just before\n+    /// the last '.' in the name.\n+    /// Returns None if `self` names a directory.\n     fn filestem(&self) -> Option<~str>;\n+    /// Returns the type of the file component of `self`, as a string option.\n+    /// The file type is the slice of a filename starting just after the last\n+    /// '.' in the name and ending at the last index in the filename.\n+    /// Returns None if `self` names a directory.\n     fn filetype(&self) -> Option<~str>;\n \n+    /// Returns a new path consisting of `self` with the parent directory component replaced\n+    /// with the given string.\n     fn with_dirname(&self, (&str)) -> Self;\n+    /// Returns a new path consisting of `self` with the file component replaced\n+    /// with the given string.\n     fn with_filename(&self, (&str)) -> Self;\n+    /// Returns a new path consisting of `self` with the file stem replaced\n+    /// with the given string.\n     fn with_filestem(&self, (&str)) -> Self;\n+    /// Returns a new path consisting of `self` with the file type replaced\n+    /// with the given string.\n     fn with_filetype(&self, (&str)) -> Self;\n \n+    /// Returns the directory component of `self`, as a new path.\n+    /// If `self` has no parent, returns `self`.\n     fn dir_path(&self) -> Self;\n+    /// Returns the file component of `self`, as a new path.\n+    /// If `self` names a directory, returns the empty path.\n     fn file_path(&self) -> Self;\n \n+    /// Returns a new Path whose parent directory is `self` and whose\n+    /// file component is the given string.\n     fn push(&self, (&str)) -> Self;\n+    /// Returns a new Path consisting of the given path, made relative to `self`.\n     fn push_rel(&self, (&Self)) -> Self;\n+    /// Returns a new Path consisting of the path given by the given vector\n+    /// of strings, relative to `self`.\n     fn push_many(&self, (&[~str])) -> Self;\n+    /// Identical to `dir_path` except in the case where `self` has only one\n+    /// component. In this case, `pop` returns the empty path.\n     fn pop(&self) -> Self;\n \n+    /// The same as `push_rel`, except that the directory argument must not\n+    /// contain directory separators in any of its components.\n     fn unsafe_join(&self, (&Self)) -> Self;\n+    /// On Unix, always returns false. On Windows, returns true iff `self`'s\n+    /// file stem is one of: `con` `aux` `com1` `com2` `com3` `com4`\n+    /// `lpt1` `lpt2` `lpt3` `prn` `nul`\n     fn is_restricted(&self) -> bool;\n \n+    /// Returns a new path that names the same file as `self`, without containing\n+    /// any '.', '..', or empty components. On Windows, uppercases the drive letter\n+    /// as well.\n     fn normalize(&self) -> Self;\n \n+    /// Returns `true` if `self` is an absolute path.\n     fn is_absolute(&self) -> bool;\n }\n "}]}