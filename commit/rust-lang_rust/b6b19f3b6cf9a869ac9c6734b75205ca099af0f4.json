{"sha": "b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YjE5ZjNiNmNmOWE4NjlhYzljNjczNGI3NTIwNWNhMDk5YWYwZjQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-09-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-09-15T17:02:10Z"}, "message": "Use explicit log level in tracing instrument macro\n\nSpecify a log level in tracing instrument macro explicitly.\n\nAdditionally reduce the used log level from a default info level to a\ndebug level (all of those appear to be developer oriented logs, so there\nshould be no need to include them in release builds).", "tree": {"sha": "b58a9b180bf7050040c0265d8fc974664ded9bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58a9b180bf7050040c0265d8fc974664ded9bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "html_url": "https://github.com/rust-lang/rust/commit/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "html_url": "https://github.com/rust-lang/rust/commit/2c7bc5e33c25e29058cbafefe680da8d5e9220e9"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "d790e31105c8aa2f2ee20c82662dce9c1a473959", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Calling `universal_upper_bound` for such a region gives `fr_fn_body`,\n     /// which has no `external_name` in which case we use `'empty` as the\n     /// region to pass to `infer_opaque_definition_from_instantiation`.\n-    #[instrument(skip(self, infcx))]\n+    #[instrument(level = \"debug\", skip(self, infcx))]\n     pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "0f768b7819b5b67e35e6938626b5347e27588be3", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "patch": "@@ -30,7 +30,7 @@ pub fn provide(providers: &mut Providers) {\n /// Determine which generic parameters are used by the function/method/closure represented by\n /// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n /// indicates all parameters are used).\n-#[instrument(skip(tcx))]\n+#[instrument(level = \"debug\", skip(tcx))]\n fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     if !tcx.sess.opts.debugging_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n@@ -100,7 +100,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n /// Some parameters are considered used-by-default, such as non-generic parameters and the dummy\n /// generic parameters from closures, this function marks them as used. `leaf_is_closure` should\n /// be `true` if the item that `unused_generic_params` was invoked on is a closure.\n-#[instrument(skip(tcx, def_id, generics, unused_parameters))]\n+#[instrument(level = \"debug\", skip(tcx, def_id, generics, unused_parameters))]\n fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n@@ -158,7 +158,7 @@ fn mark_used_by_default_parameters<'tcx>(\n \n /// Search the predicates on used generic parameters for any unused generic parameters, and mark\n /// those as used.\n-#[instrument(skip(tcx, def_id))]\n+#[instrument(level = \"debug\", skip(tcx, def_id))]\n fn mark_used_by_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n@@ -196,7 +196,7 @@ fn mark_used_by_predicates<'tcx>(\n \n /// Emit errors for the function annotated by `#[rustc_polymorphize_error]`, labelling each generic\n /// parameter which was unused.\n-#[instrument(skip(tcx, generics))]\n+#[instrument(level = \"debug\", skip(tcx, generics))]\n fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n@@ -241,7 +241,7 @@ struct MarkUsedGenericParams<'a, 'tcx> {\n impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n     /// Invoke `unused_generic_params` on a body contained within the current item (e.g.\n     /// a closure, generator or constant).\n-    #[instrument(skip(self, def_id, substs))]\n+    #[instrument(level = \"debug\", skip(self, def_id, substs))]\n     fn visit_child_body(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) {\n         let unused = self.tcx.unused_generic_params(def_id);\n         debug!(?self.unused_parameters, ?unused);\n@@ -256,7 +256,7 @@ impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    #[instrument(skip(self, local))]\n+    #[instrument(level = \"debug\", skip(self, local))]\n     fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n         if local == Local::from_usize(1) {\n             let def_kind = self.tcx.def_kind(self.def_id);\n@@ -286,7 +286,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n         Some(self.tcx)\n     }\n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !ty.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n         Some(self.tcx)\n     }\n \n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -379,7 +379,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !ty.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;"}, {"sha": "f5f67fcd0a08c322d3daca93e7ac299ef55a8ed4", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "patch": "@@ -99,7 +99,7 @@ impl<K: DepKind> SerializedDepGraph<K> {\n impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<'a>>\n     for SerializedDepGraph<K>\n {\n-    #[instrument(skip(d))]\n+    #[instrument(level = \"debug\", skip(d))]\n     fn decode(d: &mut opaque::Decoder<'a>) -> Result<SerializedDepGraph<K>, String> {\n         let start_position = d.position();\n \n@@ -187,7 +187,7 @@ impl<K: DepKind> EncoderState<K> {\n         }\n     }\n \n-    #[instrument(skip(self, record_graph))]\n+    #[instrument(level = \"debug\", skip(self, record_graph))]\n     fn encode_node(\n         &mut self,\n         node: &NodeInfo<K>,"}, {"sha": "8abcdb5e89b47b697091b36183f91408adf28419", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b19f3b6cf9a869ac9c6734b75205ca099af0f4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=b6b19f3b6cf9a869ac9c6734b75205ca099af0f4", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `substs`, the substs  used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -863,7 +863,7 @@ struct Instantiator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn instantiate_opaque_types_in_map<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n         let tcx = self.infcx.tcx;\n         value.fold_with(&mut BottomUpFolder {"}]}