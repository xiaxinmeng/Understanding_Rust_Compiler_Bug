{"sha": "a105c5c2c01ea66f59bc6f3f9ade65016af56160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMDVjNWMyYzAxZWE2NmY1OWJjNmYzZjlhZGU2NTAxNmFmNTYxNjA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T11:17:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-22T05:22:18Z"}, "message": "Build libstd with `-Cbitcode-in-rlib=yes`.\n\nSo that the rlibs will work with both LTO and non-LTO builds.", "tree": {"sha": "76743c385477d36661ad06f25b821be8ae3760d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76743c385477d36661ad06f25b821be8ae3760d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a105c5c2c01ea66f59bc6f3f9ade65016af56160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a105c5c2c01ea66f59bc6f3f9ade65016af56160", "html_url": "https://github.com/rust-lang/rust/commit/a105c5c2c01ea66f59bc6f3f9ade65016af56160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a105c5c2c01ea66f59bc6f3f9ade65016af56160/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2984799881aa6f7e443d48cf1322c9dbaa193ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2984799881aa6f7e443d48cf1322c9dbaa193ff8", "html_url": "https://github.com/rust-lang/rust/commit/2984799881aa6f7e443d48cf1322c9dbaa193ff8"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "586a362b5e3febd2f63fa3bbf73cf8f7b9f42580", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=a105c5c2c01ea66f59bc6f3f9ade65016af56160", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n         let compiler = builder.compiler(0, builder.config.build);\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n-        std_cargo(builder, target, &mut cargo);\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo("}, {"sha": "06ab0a9c310af7ff40dca260489d7c911388819e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a105c5c2c01ea66f59bc6f3f9ade65016af56160", "patch": "@@ -86,7 +86,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n-        std_cargo(builder, target, &mut cargo);\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\n             \"Building stage{} std artifacts ({} -> {})\",\n@@ -164,7 +164,7 @@ fn copy_third_party_objects(\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n-pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Cargo) {\n+pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -231,6 +231,18 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Ca\n             }\n         }\n     }\n+\n+    // By default, rustc uses `-Cbitcode-in-rlib=yes`, and Cargo overrides that\n+    // with `-Cbitcode-in-rlib=no` for non-LTO builds. However, libstd must be\n+    // built with bitcode so that the produced rlibs can be used for both LTO\n+    // builds (which use bitcode) and non-LTO builds (which use object code).\n+    // So we override the override here!\n+    //\n+    // But we don't bother for the stage 0 compiler because it's never used\n+    // with LTO.\n+    if stage >= 1 {\n+        cargo.rustflag(\"-Cbitcode-in-rlib=yes\");\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "fc217a707db9434b7f14457849c91944c45c01f1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=a105c5c2c01ea66f59bc6f3f9ade65016af56160", "patch": "@@ -394,7 +394,7 @@ impl Step for Std {\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n-            compile::std_cargo(builder, target, &mut cargo);\n+            compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n             // build by the rustc step later if enabled."}, {"sha": "125563b7b60862f74391dd360bd8553d652e677f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a105c5c2c01ea66f59bc6f3f9ade65016af56160/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a105c5c2c01ea66f59bc6f3f9ade65016af56160", "patch": "@@ -1725,7 +1725,7 @@ impl Step for Crate {\n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n-                compile::std_cargo(builder, target, &mut cargo);\n+                compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n             }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });"}]}