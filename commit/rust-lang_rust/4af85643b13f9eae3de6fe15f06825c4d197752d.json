{"sha": "4af85643b13f9eae3de6fe15f06825c4d197752d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjg1NjQzYjEzZjllYWUzZGU2ZmUxNWYwNjgyNWM0ZDE5Nzc1MmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-14T08:46:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-14T08:47:55Z"}, "message": "Rename Module field children to resolutions", "tree": {"sha": "547bc108c6d4b23fdb1b93739a02e5c19b827a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/547bc108c6d4b23fdb1b93739a02e5c19b827a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af85643b13f9eae3de6fe15f06825c4d197752d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af85643b13f9eae3de6fe15f06825c4d197752d", "html_url": "https://github.com/rust-lang/rust/commit/4af85643b13f9eae3de6fe15f06825c4d197752d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af85643b13f9eae3de6fe15f06825c4d197752d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7889ef23598524f310b8bb863271299bab628a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7889ef23598524f310b8bb863271299bab628a6", "html_url": "https://github.com/rust-lang/rust/commit/b7889ef23598524f310b8bb863271299bab628a6"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "82856b7a4c7458ed8b3f324ccffd8e280b5088c4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4af85643b13f9eae3de6fe15f06825c4d197752d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af85643b13f9eae3de6fe15f06825c4d197752d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4af85643b13f9eae3de6fe15f06825c4d197752d", "patch": "@@ -798,7 +798,7 @@ pub struct ModuleS<'a> {\n     is_public: bool,\n     is_extern_crate: bool,\n \n-    children: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n+    resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n     imports: RefCell<Vec<ImportDirective>>,\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n@@ -846,7 +846,7 @@ impl<'a> ModuleS<'a> {\n             def: def,\n             is_public: is_public,\n             is_extern_crate: false,\n-            children: RefCell::new(HashMap::new()),\n+            resolutions: RefCell::new(HashMap::new()),\n             imports: RefCell::new(Vec::new()),\n             anonymous_children: RefCell::new(NodeMap()),\n             shadowed_traits: RefCell::new(Vec::new()),\n@@ -863,7 +863,7 @@ impl<'a> ModuleS<'a> {\n         let glob_count =\n             if allow_private_imports { self.glob_count.get() } else { self.pub_glob_count.get() };\n \n-        self.children.borrow().get(&(name, ns)).cloned().unwrap_or_default().result(glob_count)\n+        self.resolutions.borrow().get(&(name, ns)).cloned().unwrap_or_default().result(glob_count)\n             .and_then(|binding| {\n                 let allowed = allow_private_imports || !binding.is_import() || binding.is_public();\n                 if allowed { Success(binding) } else { Failed(None) }\n@@ -873,7 +873,7 @@ impl<'a> ModuleS<'a> {\n     // Define the name or return the existing binding if there is a collision.\n     fn try_define_child(&self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>)\n                         -> Result<(), &'a NameBinding<'a>> {\n-        let mut children = self.children.borrow_mut();\n+        let mut children = self.resolutions.borrow_mut();\n         let resolution = children.entry((name, ns)).or_insert_with(Default::default);\n \n         // FIXME #31379: We can use methods from imported traits shadowed by non-import items\n@@ -889,19 +889,19 @@ impl<'a> ModuleS<'a> {\n     }\n \n     fn increment_outstanding_references_for(&self, name: Name, ns: Namespace) {\n-        let mut children = self.children.borrow_mut();\n+        let mut children = self.resolutions.borrow_mut();\n         children.entry((name, ns)).or_insert_with(Default::default).outstanding_references += 1;\n     }\n \n     fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace) {\n-        match self.children.borrow_mut().get_mut(&(name, ns)).unwrap().outstanding_references {\n+        match self.resolutions.borrow_mut().get_mut(&(name, ns)).unwrap().outstanding_references {\n             0 => panic!(\"No more outstanding references!\"),\n             ref mut outstanding_references => { *outstanding_references -= 1; }\n         }\n     }\n \n     fn for_each_child<F: FnMut(Name, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n-        for (&(name, ns), name_resolution) in self.children.borrow().iter() {\n+        for (&(name, ns), name_resolution) in self.resolutions.borrow().iter() {\n             name_resolution.binding.map(|binding| f(name, ns, binding));\n         }\n     }"}, {"sha": "1ad9eaeba1e0a79db228967b3bbd77005cce0ec7", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af85643b13f9eae3de6fe15f06825c4d197752d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af85643b13f9eae3de6fe15f06825c4d197752d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4af85643b13f9eae3de6fe15f06825c4d197752d", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         match (&value_result, &type_result) {\n             (&Indeterminate, _) | (_, &Indeterminate) => return Indeterminate,\n             (&Failed(_), &Failed(_)) => {\n-                let children = target_module.children.borrow();\n+                let children = target_module.resolutions.borrow();\n                 let names = children.keys().map(|&(ref name, _)| name);\n                 let lev_suggestion = match find_best_match_for_name(names, &source.as_str(), None) {\n                     Some(name) => format!(\". Did you mean to use `{}`?\", name),"}]}