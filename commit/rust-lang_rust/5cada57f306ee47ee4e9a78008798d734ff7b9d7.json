{"sha": "5cada57f306ee47ee4e9a78008798d734ff7b9d7", "node_id": "C_kwDOAAsO6NoAKDVjYWRhNTdmMzA2ZWU0N2VlNGU5YTc4MDA4Nzk4ZDczNGZmN2I5ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T18:51:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-13T18:51:19Z"}, "message": "Auto merge of #8273 - SeeSpring:apply_not_unsafe_ptr_arg_deref_to_type_aliases, r=llogiq\n\nApply `not_unsafe_ptr_arg_deref` to type aliases\n\nchangelog: Apply [`not_unsafe_ptr_arg_deref`] to type aliases", "tree": {"sha": "03dc64d129e6785673f469de5b03bd5f227760ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dc64d129e6785673f469de5b03bd5f227760ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cada57f306ee47ee4e9a78008798d734ff7b9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cada57f306ee47ee4e9a78008798d734ff7b9d7", "html_url": "https://github.com/rust-lang/rust/commit/5cada57f306ee47ee4e9a78008798d734ff7b9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cada57f306ee47ee4e9a78008798d734ff7b9d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a5daa65908e59744e2bc625b14849352231c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a5daa65908e59744e2bc625b14849352231c75", "html_url": "https://github.com/rust-lang/rust/commit/97a5daa65908e59744e2bc625b14849352231c75"}, {"sha": "875b2400837390b5bcce7c649a0fdd8dbe341150", "url": "https://api.github.com/repos/rust-lang/rust/commits/875b2400837390b5bcce7c649a0fdd8dbe341150", "html_url": "https://github.com/rust-lang/rust/commit/875b2400837390b5bcce7c649a0fdd8dbe341150"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "834f6d2425e93895114bd6e29fbc4cebb11120d6", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5cada57f306ee47ee4e9a78008798d734ff7b9d7/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cada57f306ee47ee4e9a78008798d734ff7b9d7/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=5cada57f306ee47ee4e9a78008798d734ff7b9d7", "patch": "@@ -42,8 +42,7 @@ fn check_raw_ptr<'tcx>(\n     let expr = &body.value;\n     if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(def_id) {\n         let raw_ptrs = iter_input_pats(decl, body)\n-            .zip(decl.inputs.iter())\n-            .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n+            .filter_map(|arg| raw_ptr_arg(cx, arg))\n             .collect::<HirIdSet>();\n \n         if !raw_ptrs.is_empty() {\n@@ -59,8 +58,12 @@ fn check_raw_ptr<'tcx>(\n     }\n }\n \n-fn raw_ptr_arg(arg: &hir::Param<'_>, ty: &hir::Ty<'_>) -> Option<hir::HirId> {\n-    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.kind, &ty.kind) {\n+fn raw_ptr_arg(cx: &LateContext<'_>, arg: &hir::Param<'_>) -> Option<hir::HirId> {\n+    if let (&hir::PatKind::Binding(_, id, _, _), Some(&ty::RawPtr(_))) = (\n+        &arg.pat.kind,\n+        cx.maybe_typeck_results()\n+            .map(|typeck_results| typeck_results.pat_ty(arg.pat).kind()),\n+    ) {\n         Some(id)\n     } else {\n         None"}, {"sha": "5521870eaecf761af9b0f50bdbdd941d63aaa551", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cada57f306ee47ee4e9a78008798d734ff7b9d7/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cada57f306ee47ee4e9a78008798d734ff7b9d7/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=5cada57f306ee47ee4e9a78008798d734ff7b9d7", "patch": "@@ -78,6 +78,14 @@ pub fn public(p: *const u8) {\n     unsafe { std::ptr::read(p) };\n }\n \n+type Alias = *const u8;\n+\n+pub fn type_alias(p: Alias) {\n+    println!(\"{}\", unsafe { *p });\n+    println!(\"{:?}\", unsafe { p.as_ref() });\n+    unsafe { std::ptr::read(p) };\n+}\n+\n impl Bar {\n     fn private(self, p: *const u8) {\n         println!(\"{}\", unsafe { *p });"}, {"sha": "8ebd4997f4f6e836983c92a66191a793429dc3ee", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5cada57f306ee47ee4e9a78008798d734ff7b9d7/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cada57f306ee47ee4e9a78008798d734ff7b9d7/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=5cada57f306ee47ee4e9a78008798d734ff7b9d7", "patch": "@@ -69,22 +69,40 @@ LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:87:34\n+  --> $DIR/functions.rs:84:30\n+   |\n+LL |     println!(\"{}\", unsafe { *p });\n+   |                              ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:85:31\n+   |\n+LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                               ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:86:29\n+   |\n+LL |     unsafe { std::ptr::read(p) };\n+   |                             ^\n+\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:95:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:88:35\n+  --> $DIR/functions.rs:96:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function might dereference a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:89:33\n+  --> $DIR/functions.rs:97:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 16 previous errors\n "}]}