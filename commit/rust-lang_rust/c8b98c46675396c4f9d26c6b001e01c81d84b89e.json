{"sha": "c8b98c46675396c4f9d26c6b001e01c81d84b89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Yjk4YzQ2Njc1Mzk2YzRmOWQyNmM2YjAwMWUwMWM4MWQ4NGI4OWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-31T17:51:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T17:51:08Z"}, "message": "Merge #2710\n\n2710: Fix NPEs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "40582f9bb4331676a0a469b728a5e6cfe1df5300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40582f9bb4331676a0a469b728a5e6cfe1df5300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b98c46675396c4f9d26c6b001e01c81d84b89e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC4qMCRBK7hj4Ov3rIwAAdHIIAKQAqUFlyX09mrLUXsT7Axgr\netN6wWeY7XxRzEf2veAQv2q3Kl+yp+7+eSACkV4OBoaQHVL7cPy7jUR+UNgoAuU3\nbTvDRIiI+013gs/dJM4SvNia/4CbUzc7dSHTbDnSKXjDPq+DILMqXqmjpWLlqA9w\nWw5y4hlLcQg5K/JHorDTIkucs2p5ln5aezUz+OHWpfstK2ruBVYB2tjc4yG408/q\nl8gOeG1ADFCfZ2dif41n+gI4xwqmn+iGMX0ShOEXAoZRNlFho9ytF4Ua7Cuh+sK8\nskASLWJ1ANFBLMoc5/3t8LLqJYaMTPw2xk/YzxHHw0bHX4i8OxAoiQFehJjYapM=\n=HDx7\n-----END PGP SIGNATURE-----\n", "payload": "tree 40582f9bb4331676a0a469b728a5e6cfe1df5300\nparent 6d23140ba03c77b28d94e042c94155899baba9da\nparent cb41ffbbbdea66d3a0abae4d270da1224a5de91c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577814668 +0000\ncommitter GitHub <noreply@github.com> 1577814668 +0000\n\nMerge #2710\n\n2710: Fix NPEs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b98c46675396c4f9d26c6b001e01c81d84b89e", "html_url": "https://github.com/rust-lang/rust/commit/c8b98c46675396c4f9d26c6b001e01c81d84b89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b98c46675396c4f9d26c6b001e01c81d84b89e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d23140ba03c77b28d94e042c94155899baba9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d23140ba03c77b28d94e042c94155899baba9da", "html_url": "https://github.com/rust-lang/rust/commit/6d23140ba03c77b28d94e042c94155899baba9da"}, {"sha": "cb41ffbbbdea66d3a0abae4d270da1224a5de91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb41ffbbbdea66d3a0abae4d270da1224a5de91c", "html_url": "https://github.com/rust-lang/rust/commit/cb41ffbbbdea66d3a0abae4d270da1224a5de91c"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "7c58bb7e72017a50566fab43deaefb71143ede6f", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=c8b98c46675396c4f9d26c6b001e01c81d84b89e", "patch": "@@ -6,21 +6,21 @@ import { Ctx, Cmd } from '../ctx';\n export function matchingBrace(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor) {\n-            return;\n-        }\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n         const request: FindMatchingBraceParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n             offsets: editor.selections.map(s =>\n-                ctx.client.code2ProtocolConverter.asPosition(s.active),\n+                client.code2ProtocolConverter.asPosition(s.active),\n             ),\n         };\n-        const response = await ctx.client.sendRequest<lc.Position[]>(\n+        const response = await client.sendRequest<lc.Position[]>(\n             'rust-analyzer/findMatchingBrace',\n             request,\n         );\n         editor.selections = editor.selections.map((sel, idx) => {\n-            const active = ctx.client.protocol2CodeConverter.asPosition(\n+            const active = client.protocol2CodeConverter.asPosition(\n                 response[idx],\n             );\n             const anchor = sel.isEmpty ? active : sel.anchor;"}, {"sha": "6f61883cddb465ac37cb1065a0e82e5659558075", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=c8b98c46675396c4f9d26c6b001e01c81d84b89e", "patch": "@@ -6,15 +6,17 @@ import { Cmd, Ctx } from '../ctx';\n export function onEnter(ctx: Ctx): Cmd {\n     return async (event: { text: string }) => {\n         const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n         if (!editor || event.text !== '\\n') return false;\n+        if (!client) return false;\n \n         const request: lc.TextDocumentPositionParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n-            position: ctx.client.code2ProtocolConverter.asPosition(\n+            position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n         };\n-        const change = await ctx.client.sendRequest<undefined | SourceChange>(\n+        const change = await client.sendRequest<undefined | SourceChange>(\n             'rust-analyzer/onEnter',\n             request,\n         );"}, {"sha": "bf40b402185882e8fc664a91e88df243f2fa2d4a", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=c8b98c46675396c4f9d26c6b001e01c81d84b89e", "patch": "@@ -6,23 +6,24 @@ import { Ctx, Cmd } from '../ctx';\n export function parentModule(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n \n         const request: lc.TextDocumentPositionParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n-            position: ctx.client.code2ProtocolConverter.asPosition(\n+            position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n         };\n-        const response = await ctx.client.sendRequest<lc.Location[]>(\n+        const response = await client.sendRequest<lc.Location[]>(\n             'rust-analyzer/parentModule',\n             request,\n         );\n         const loc = response[0];\n         if (loc == null) return;\n \n-        const uri = ctx.client.protocol2CodeConverter.asUri(loc.uri);\n-        const range = ctx.client.protocol2CodeConverter.asRange(loc.range);\n+        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n+        const range = client.protocol2CodeConverter.asRange(loc.range);\n \n         const doc = await vscode.workspace.openTextDocument(uri);\n         const e = await vscode.window.showTextDocument(doc);"}, {"sha": "7919997ce3309907476394c719626087a5f0eda1", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=c8b98c46675396c4f9d26c6b001e01c81d84b89e", "patch": "@@ -8,18 +8,19 @@ export function run(ctx: Ctx): Cmd {\n \n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n \n         const textDocument: lc.TextDocumentIdentifier = {\n             uri: editor.document.uri.toString(),\n         };\n         const params: RunnablesParams = {\n             textDocument,\n-            position: ctx.client.code2ProtocolConverter.asPosition(\n+            position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n         };\n-        const runnables = await ctx.client.sendRequest<Runnable[]>(\n+        const runnables = await client.sendRequest<Runnable[]>(\n             'rust-analyzer/runnables',\n             params,\n         );"}, {"sha": "2ee80f910cd4e0bd27d967030f8178b2a7cacc84", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c8b98c46675396c4f9d26c6b001e01c81d84b89e/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=c8b98c46675396c4f9d26c6b001e01c81d84b89e", "patch": "@@ -76,24 +76,23 @@ class TextDocumentContentProvider\n \n     provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) return '';\n+        const client = this.ctx.client\n+        if (!editor || !client) return '';\n \n         let range: lc.Range | undefined;\n \n         // When the range based query is enabled we take the range of the selection\n         if (uri.query === 'range=true') {\n             range = editor.selection.isEmpty\n                 ? undefined\n-                : this.ctx.client.code2ProtocolConverter.asRange(\n-                    editor.selection,\n-                );\n+                : client.code2ProtocolConverter.asRange(editor.selection);\n         }\n \n         const request: SyntaxTreeParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n             range,\n         };\n-        return this.ctx.client.sendRequest<string>(\n+        return client.sendRequest<string>(\n             'rust-analyzer/syntaxTree',\n             request,\n         );"}]}