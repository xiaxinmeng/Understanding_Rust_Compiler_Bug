{"sha": "a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDBjOWIyYTQ2MDE4MzVkMWRkNDgwYjcxMWM1ZDI2ZjljOTc0MzA=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-01T10:37:51Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-01T11:18:46Z"}, "message": "lower literal patterns", "tree": {"sha": "4c63999bce9cf645eeb98e0b4b15ddf16b5f2336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c63999bce9cf645eeb98e0b4b15ddf16b5f2336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "html_url": "https://github.com/rust-lang/rust/commit/a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d0c9b2a4601835d1dd480b711c5d26f9c97430/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "html_url": "https://github.com/rust-lang/rust/commit/8cce752bcb83c86f300c9a8e830dd7d411f6bc48"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "7b809cf4faa1e64ee93ab5da61d34ee50c090b30", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a9d0c9b2a4601835d1dd480b711c5d26f9c97430/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d0c9b2a4601835d1dd480b711c5d26f9c97430/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=a9d0c9b2a4601835d1dd480b711c5d26f9c97430", "patch": "@@ -417,26 +417,7 @@ impl ExprCollector<'_> {\n                 }\n             }\n \n-            ast::Expr::Literal(e) => {\n-                let lit = match e.kind() {\n-                    LiteralKind::IntNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| BuiltinInt::from_suffix(&it));\n-\n-                        Literal::Int(Default::default(), known_name)\n-                    }\n-                    LiteralKind::FloatNumber { suffix } => {\n-                        let known_name = suffix.and_then(|it| BuiltinFloat::from_suffix(&it));\n-\n-                        Literal::Float(Default::default(), known_name)\n-                    }\n-                    LiteralKind::ByteString => Literal::ByteString(Default::default()),\n-                    LiteralKind::String => Literal::String(Default::default()),\n-                    LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n-                    LiteralKind::Bool => Literal::Bool(Default::default()),\n-                    LiteralKind::Char => Literal::Char(Default::default()),\n-                };\n-                self.alloc_expr(Expr::Literal(lit), syntax_ptr)\n-            }\n+            ast::Expr::Literal(e) => self.alloc_expr(Expr::Literal(e.kind().into()), syntax_ptr),\n             ast::Expr::IndexExpr(e) => {\n                 let base = self.collect_expr_opt(e.base());\n                 let index = self.collect_expr_opt(e.index());\n@@ -679,10 +660,19 @@ impl ExprCollector<'_> {\n                     suffix: suffix.into_iter().map(|p| self.collect_pat(p)).collect(),\n                 }\n             }\n+            ast::Pat::LiteralPat(lit) => {\n+                if let Some(ast_lit) = lit.literal() {\n+                    let expr = Expr::Literal(ast_lit.kind().into());\n+                    let expr_ptr = AstPtr::new(&ast::Expr::Literal(ast_lit));\n+                    let expr_id = self.alloc_expr(expr, expr_ptr);\n+                    Pat::Lit(expr_id)\n+                } else {\n+                    Pat::Missing\n+                }\n+            }\n \n             // FIXME: implement\n             ast::Pat::BoxPat(_) => Pat::Missing,\n-            ast::Pat::LiteralPat(_) => Pat::Missing,\n             ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n@@ -741,3 +731,25 @@ impl From<ast::BinOp> for BinaryOp {\n         }\n     }\n }\n+\n+impl From<ast::LiteralKind> for Literal {\n+    fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n+        match ast_lit_kind {\n+            LiteralKind::IntNumber { suffix } => {\n+                let known_name = suffix.and_then(|it| BuiltinInt::from_suffix(&it));\n+\n+                Literal::Int(Default::default(), known_name)\n+            }\n+            LiteralKind::FloatNumber { suffix } => {\n+                let known_name = suffix.and_then(|it| BuiltinFloat::from_suffix(&it));\n+\n+                Literal::Float(Default::default(), known_name)\n+            }\n+            LiteralKind::ByteString => Literal::ByteString(Default::default()),\n+            LiteralKind::String => Literal::String(Default::default()),\n+            LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n+            LiteralKind::Bool => Literal::Bool(Default::default()),\n+            LiteralKind::Char => Literal::Char(Default::default()),\n+        }\n+    }\n+}"}]}