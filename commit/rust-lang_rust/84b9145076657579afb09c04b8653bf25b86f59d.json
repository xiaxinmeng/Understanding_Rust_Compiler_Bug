{"sha": "84b9145076657579afb09c04b8653bf25b86f59d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjkxNDUwNzY2NTc1NzlhZmIwOWMwNGI4NjUzYmYyNWI4NmY1OWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-11T17:04:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-11T17:04:16Z"}, "message": "Rollup merge of #73182 - Aaron1011:feature/call-fn-span, r=matthewjasper\n\nTrack span of function in method calls, and use this in #[track_caller]\n\nFixes #69977\n\nWhen we parse a chain of method calls like `foo.a().b().c()`, each\n`MethodCallExpr` gets assigned a span that starts at the beginning of\nthe call chain (`foo`). While this is useful for diagnostics, it means\nthat `Location::caller` will return the same location for every call\nin a call chain.\n\nThis PR makes us separately record the span of the function name and\narguments for a method call (e.g. `b()` in `foo.a().b().c()`). This\n`Span` is passed through HIR lowering and MIR building to\n`TerminatorKind::Call`, where it is used in preference to\n`Terminator.source_info.span` when determining `Location::caller`.\n\nThis new span is also useful for diagnostics where we want to emphasize\na particular method call - for an example, see\nhttps://github.com/rust-lang/rust/pull/72389#discussion_r436035990", "tree": {"sha": "5b93246b7a58dc3e138f34b3aead2a20633adf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b93246b7a58dc3e138f34b3aead2a20633adf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b9145076657579afb09c04b8653bf25b86f59d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4mQQCRBK7hj4Ov3rIwAAdHIIAHSjqBUEoLEUrfkb3pwkOc0d\nJUKoEH/32NZI8YmSp/CCi3RgVHNRS09GyQZDSN5rXY2Of5uvnVuNtmiy5QfP3zhN\nRIWT0/F+m2oS8MPAH2Hn77+AVXpGxvsrNWdNEuoQRRXAyzVP6izR/efDjuKHNfVY\np/H9DsJ5Qy6OTZbnkLvTAAHHhiHdcXpRikPZ7q/BI9rsjHuYbAktwTRTMGOHvfvN\nu1D5sMmbSeFuCUT2KMuoawxcYnndQ1C5svk/wdzRdS/MDgu7f0mAErisEBeaC2Rs\ndVFJi12zvdcJOiUQjIq6JNh8/2yBlQ7N4mRohVyXASwTbyn2bLlC8zec1oTR8IM=\n=oRe7\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b93246b7a58dc3e138f34b3aead2a20633adf4d\nparent b34111591c6d70bb074e6812697b381048292c7b\nparent 9d36fa3d47b617930a8eb4a8a3a6c4db426cab45\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591895056 +0200\ncommitter GitHub <noreply@github.com> 1591895056 +0200\n\nRollup merge of #73182 - Aaron1011:feature/call-fn-span, r=matthewjasper\n\nTrack span of function in method calls, and use this in #[track_caller]\n\nFixes #69977\n\nWhen we parse a chain of method calls like `foo.a().b().c()`, each\n`MethodCallExpr` gets assigned a span that starts at the beginning of\nthe call chain (`foo`). While this is useful for diagnostics, it means\nthat `Location::caller` will return the same location for every call\nin a call chain.\n\nThis PR makes us separately record the span of the function name and\narguments for a method call (e.g. `b()` in `foo.a().b().c()`). This\n`Span` is passed through HIR lowering and MIR building to\n`TerminatorKind::Call`, where it is used in preference to\n`Terminator.source_info.span` when determining `Location::caller`.\n\nThis new span is also useful for diagnostics where we want to emphasize\na particular method call - for an example, see\nhttps://github.com/rust-lang/rust/pull/72389#discussion_r436035990\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b9145076657579afb09c04b8653bf25b86f59d", "html_url": "https://github.com/rust-lang/rust/commit/84b9145076657579afb09c04b8653bf25b86f59d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b9145076657579afb09c04b8653bf25b86f59d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34111591c6d70bb074e6812697b381048292c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34111591c6d70bb074e6812697b381048292c7b", "html_url": "https://github.com/rust-lang/rust/commit/b34111591c6d70bb074e6812697b381048292c7b"}, {"sha": "9d36fa3d47b617930a8eb4a8a3a6c4db426cab45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d36fa3d47b617930a8eb4a8a3a6c4db426cab45", "html_url": "https://github.com/rust-lang/rust/commit/9d36fa3d47b617930a8eb4a8a3a6c4db426cab45"}], "stats": {"total": 389, "additions": 243, "deletions": 146}, "files": [{"sha": "d3e3546cf31e49259bb32beede7b3a820cff441f", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1174,7 +1174,9 @@ pub enum ExprKind {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n-    MethodCall(PathSegment, Vec<P<Expr>>),\n+    /// This `Span` is the span of the function, without the dot and receiver\n+    /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n+    MethodCall(PathSegment, Vec<P<Expr>>, Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (e.g., `a + b`, `a * b`)."}, {"sha": "2ffef9d48c181685e5cd8e8d6aedeba251691400", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1111,11 +1111,12 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(f);\n             visit_exprs(args, vis);\n         }\n-        ExprKind::MethodCall(PathSegment { ident, id, args }, exprs) => {\n+        ExprKind::MethodCall(PathSegment { ident, id, args }, exprs, span) => {\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n             visit_opt(args, |args| vis.visit_generic_args(args));\n             visit_exprs(exprs, vis);\n+            vis.visit_span(span);\n         }\n         ExprKind::Binary(_binop, lhs, rhs) => {\n             vis.visit_expr(lhs);"}, {"sha": "d8b44a22f2c92b340ea03a3644943e5df358a2e0", "filename": "src/librustc_ast/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fparser.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -394,7 +394,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        ast::ExprKind::MethodCall(.., ref exprs) => {\n+        ast::ExprKind::MethodCall(.., ref exprs, _) => {\n             // X { y: 1 }.bar(...)\n             contains_exterior_struct_lit(&exprs[0])\n         }"}, {"sha": "ccab46703dffe796e65c01f19de9e117f78ffe3a", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -726,7 +726,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, ref arguments) => {\n+        ExprKind::MethodCall(ref segment, ref arguments, _span) => {\n             visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "b7894eb145b0a2cf5c2ec1e816a46d61ecb49482", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -39,7 +39,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let f = self.lower_expr(f);\n                     hir::ExprKind::Call(f, self.lower_exprs(args))\n                 }\n-                ExprKind::MethodCall(ref seg, ref args) => {\n+                ExprKind::MethodCall(ref seg, ref args, span) => {\n                     let hir_seg = self.arena.alloc(self.lower_path_segment(\n                         e.span,\n                         seg,\n@@ -50,7 +50,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         None,\n                     ));\n                     let args = self.lower_exprs(args);\n-                    hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n+                    hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args, span)\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                     let binop = self.lower_binop(binop);"}, {"sha": "b1abc08aa67b0a1a29b4268a45e2575f47da3289", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1818,7 +1818,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args[..]);\n             }\n-            ast::ExprKind::MethodCall(ref segment, ref args) => {\n+            ast::ExprKind::MethodCall(ref segment, ref args, _) => {\n                 self.print_expr_method_call(segment, &args[..]);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {"}, {"sha": "74d7fc16215800530c4d547ff26bdd5d6c6d4519", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -530,6 +530,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         args: &Vec<mir::Operand<'tcx>>,\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n+        fn_span: Span,\n     ) {\n         let span = terminator.source_info.span;\n         // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n@@ -634,7 +635,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         if intrinsic == Some(\"caller_location\") {\n             if let Some((_, target)) = destination.as_ref() {\n-                let location = self.get_caller_location(&mut bx, span);\n+                let location = self.get_caller_location(&mut bx, fn_span);\n \n                 if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n                     location.val.store(&mut bx, tmp);\n@@ -798,7 +799,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args.len() + 1,\n                 \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n             );\n-            let location = self.get_caller_location(&mut bx, span);\n+            let location = self.get_caller_location(&mut bx, fn_span);\n+            debug!(\n+                \"codegen_call_terminator({:?}): location={:?} (fn_span {:?})\",\n+                terminator, location, fn_span\n+            );\n+\n             let last_arg = fn_abi.args.last().unwrap();\n             self.codegen_argument(&mut bx, location, &mut llargs, last_arg);\n         }\n@@ -1016,6 +1022,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 ref destination,\n                 cleanup,\n                 from_hir_call: _,\n+                fn_span,\n             } => {\n                 self.codegen_call_terminator(\n                     helper,\n@@ -1025,6 +1032,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     args,\n                     destination,\n                     cleanup,\n+                    fn_span,\n                 );\n             }\n             mir::TerminatorKind::GeneratorDrop | mir::TerminatorKind::Yield { .. } => {"}, {"sha": "20d2ea0a215d4ac8ced615dda3f0443944b7a9dd", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -272,7 +272,7 @@ impl<'a> ExtCtxt<'a> {\n     ) -> P<ast::Expr> {\n         args.insert(0, expr);\n         let segment = ast::PathSegment::from_ident(ident.with_span_pos(span));\n-        self.expr(span, ast::ExprKind::MethodCall(segment, args))\n+        self.expr(span, ast::ExprKind::MethodCall(segment, args, span))\n     }\n     pub fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n         self.expr(b.span, ast::ExprKind::Block(b, None))"}, {"sha": "6b751456618e974a987f21c771157c9ab672b2b8", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1371,7 +1371,7 @@ pub struct Expr<'hir> {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Expr<'static>, 64);\n+rustc_data_structures::static_assert_size!(Expr<'static>, 72);\n \n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1568,12 +1568,14 @@ pub enum ExprKind<'hir> {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    /// The final `Span` represents the span of the function and arguments\n+    /// (e.g. `foo::<Bar, Baz>(a, b, c, d)` in `x.foo::<Bar, Baz>(a, b, c, d)`\n     ///\n     /// To resolve the called method to a `DefId`, call [`type_dependent_def_id`] with\n     /// the `hir_id` of the `MethodCall` node itself.\n     ///\n     /// [`type_dependent_def_id`]: ../ty/struct.TypeckTables.html#method.type_dependent_def_id\n-    MethodCall(&'hir PathSegment<'hir>, Span, &'hir [Expr<'hir>]),\n+    MethodCall(&'hir PathSegment<'hir>, Span, &'hir [Expr<'hir>], Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(&'hir [Expr<'hir>]),\n     /// A binary operation (e.g., `a + b`, `a * b`)."}, {"sha": "6bc899622a36303ade661ef72df1718b4385f97b", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1090,7 +1090,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, _, arguments) => {\n+        ExprKind::MethodCall(ref segment, _, arguments, _) => {\n             visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "bf5b7152f0ea97abb3bf1d3183a9a96c1c9f7f9c", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1308,7 +1308,7 @@ impl<'a> State<'a> {\n             hir::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(&func, args);\n             }\n-            hir::ExprKind::MethodCall(ref segment, _, ref args) => {\n+            hir::ExprKind::MethodCall(ref segment, _, ref args, _) => {\n                 self.print_expr_method_call(segment, args);\n             }\n             hir::ExprKind::Binary(op, ref lhs, ref rhs) => {\n@@ -2491,7 +2491,7 @@ fn contains_exterior_struct_lit(value: &hir::Expr<'_>) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        hir::ExprKind::MethodCall(.., ref exprs) => {\n+        hir::ExprKind::MethodCall(.., ref exprs, _) => {\n             // `X { y: 1 }.bar(...)`\n             contains_exterior_struct_lit(&exprs[0])\n         }"}, {"sha": "ceaec2ba5db05010f8a410873e9ebfc081e483da", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::MethodCall(_, call_span, exprs) = expr.kind {\n+        if let ExprKind::MethodCall(_, call_span, exprs, _) = expr.kind {\n             if call_span == self.target_span\n                 && Some(self.target)\n                     == self.infcx.in_progress_tables.and_then(|tables| {\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // 3 |     let _ = x.sum() as f64;\n             //   |               ^^^ cannot infer type for `S`\n             span\n-        } else if let Some(ExprKind::MethodCall(_, call_span, _)) =\n+        } else if let Some(ExprKind::MethodCall(_, call_span, _, _)) =\n             local_visitor.found_method_call.map(|e| &e.kind)\n         {\n             // Point at the call instead of the whole expression:"}, {"sha": "5b282c4203400bb2bec0e70a669c1c545f350845", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -24,7 +24,7 @@ declare_lint_pass!(\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIntoIter {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         // We only care about method call expressions.\n-        if let hir::ExprKind::MethodCall(call, span, args) = &expr.kind {\n+        if let hir::ExprKind::MethodCall(call, span, args, _) = &expr.kind {\n             if call.ident.name != sym::into_iter {\n                 return;\n             }"}, {"sha": "aa0dd9c83113ba16c516a1c858b925c85254638c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1899,7 +1899,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         }\n                     }\n                 }\n-            } else if let hir::ExprKind::MethodCall(_, _, ref args) = expr.kind {\n+            } else if let hir::ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n                 // Find problematic calls to `MaybeUninit::assume_init`.\n                 let def_id = cx.tables.type_dependent_def_id(expr.hir_id)?;\n                 if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {"}, {"sha": "8196b37391b21cdb044fd25df5ef32c1c48eedc5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -526,7 +526,7 @@ trait UnusedDelimLint {\n                 let (args_to_check, ctx) = match *call_or_other {\n                     Call(_, ref args) => (&args[..], UnusedDelimsCtx::FunctionArg),\n                     // first \"argument\" is self (which sometimes needs delims)\n-                    MethodCall(_, ref args) => (&args[1..], UnusedDelimsCtx::MethodArg),\n+                    MethodCall(_, ref args, _) => (&args[1..], UnusedDelimsCtx::MethodArg),\n                     // actual catch-all arm\n                     _ => {\n                         return;"}, {"sha": "126e70e8c48dad2bc1d90af033938ca865ecf535", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1131,6 +1131,9 @@ pub enum TerminatorKind<'tcx> {\n         /// `true` if this is from a call in HIR rather than from an overloaded\n         /// operator. True for overloaded function call.\n         from_hir_call: bool,\n+        /// This `Span` is the span of the function, without the dot and receiver\n+        /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n+        fn_span: Span,\n     },\n \n     /// Jump to the target if the condition has the expected value,"}, {"sha": "3f5d528d9e7c4a3219b3c315970331bfc4ab9daf", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 resume_arg: resume_arg.fold_with(folder),\n                 drop,\n             },\n-            Call { ref func, ref args, ref destination, cleanup, from_hir_call } => {\n+            Call { ref func, ref args, ref destination, cleanup, from_hir_call, fn_span } => {\n                 let dest =\n                     destination.as_ref().map(|&(ref loc, dest)| (loc.fold_with(folder), dest));\n \n@@ -52,6 +52,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     destination: dest,\n                     cleanup,\n                     from_hir_call,\n+                    fn_span,\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {"}, {"sha": "966a709c8a2ce9f6d1dd7a589b0b8dd62ecaea34", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -492,6 +492,7 @@ macro_rules! make_mir_visitor {\n                         destination,\n                         cleanup: _,\n                         from_hir_call: _,\n+                        fn_span: _\n                     } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {"}, {"sha": "18a6189507090c2ba16dc9f90e498a7b0002831d", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -142,6 +142,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.consume_operand(location, func);\n                 for arg in args {"}, {"sha": "786424e870f8edb7bfe93306f548bdff93867ab4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -699,6 +699,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 ref destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.consume_operand(loc, (func, span), flow_state);\n                 for arg in args {"}, {"sha": "6c9cb529dc2f3bdc8b817d89139b0dc8d28839de", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -467,7 +467,7 @@ impl Direction for Forward {\n                 propagate(target, exit_state);\n             }\n \n-            Call { cleanup, destination, ref func, ref args, from_hir_call: _ } => {\n+            Call { cleanup, destination, ref func, ref args, from_hir_call: _, fn_span: _ } => {\n                 if let Some(unwind) = cleanup {\n                     if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n                         propagate(unwind, exit_state);"}, {"sha": "9349f5133a55db43b2e41e46e708e6d980645c2f", "filename": "src/librustc_mir/dataflow/framework/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Ftests.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -41,6 +41,7 @@ fn mock_body() -> mir::Body<'static> {\n             destination: Some((dummy_place.clone(), mir::START_BLOCK)),\n             cleanup: None,\n             from_hir_call: false,\n+            fn_span: DUMMY_SP,\n         },\n     );\n     block(3, mir::TerminatorKind::Return);\n@@ -53,6 +54,7 @@ fn mock_body() -> mir::Body<'static> {\n             destination: Some((dummy_place.clone(), mir::START_BLOCK)),\n             cleanup: None,\n             from_hir_call: false,\n+            fn_span: DUMMY_SP,\n         },\n     );\n "}, {"sha": "4f6ccdafdda18bb713da955c16c6001d50d0340c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -401,6 +401,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 ref destination,\n                 cleanup: _,\n                 from_hir_call: _,\n+                fn_span: _,\n             } => {\n                 self.gather_operand(func);\n                 for arg in args {"}, {"sha": "ddeed92f851248709ec48d8198660d7dbcb84dda", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1,6 +1,7 @@\n use std::convert::TryFrom;\n \n use rustc_hir::lang_items::PanicLocationLangItem;\n+use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::subst::Subst;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::LayoutOf;\n@@ -14,19 +15,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first callsite in a\n     /// frame which is not `#[track_caller]`.\n     crate fn find_closest_untracked_caller_location(&self) -> Span {\n-        self.stack()\n+        let frame = self\n+            .stack()\n             .iter()\n             .rev()\n             // Find first non-`#[track_caller]` frame.\n-            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            .find(|frame| {\n+                debug!(\n+                    \"find_closest_untracked_caller_location: checking frame {:?}\",\n+                    frame.instance\n+                );\n+                !frame.instance.def.requires_caller_location(*self.tcx)\n+            })\n             // Assert that there is always such a frame.\n-            .unwrap()\n-            .current_source_info()\n-            // Assert that the frame we look at is actually executing code currently\n-            // (`current_source_info` is None when we are unwinding and the frame does\n-            // not require cleanup).\n-            .unwrap()\n-            .span\n+            .unwrap();\n+        let loc = frame.loc.unwrap();\n+        let block = &frame.body.basic_blocks()[loc.block];\n+        assert_eq!(block.statements.len(), loc.statement_index);\n+        debug!(\n+            \"find_closest_untracked_caller_location:: got terminator {:?} ({:?})\",\n+            block.terminator(),\n+            block.terminator().kind\n+        );\n+        if let TerminatorKind::Call { fn_span, .. } = block.terminator().kind {\n+            return fn_span;\n+        }\n+        unreachable!();\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}, {"sha": "cd7621ea9752b4ebc51a0d40394b060bb7a74346", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -56,6 +56,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 destination,\n                 ref cleanup,\n                 from_hir_call: _from_hir_call,\n+                fn_span: _,\n             } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;"}, {"sha": "f95fd9b9e90c562f51b31024f7795957268934f9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -460,6 +460,7 @@ impl CloneShimBuilder<'tcx> {\n                 destination: Some((dest, next)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: true,\n+                fn_span: self.span,\n             },\n             false,\n         );\n@@ -788,6 +789,7 @@ fn build_call_shim<'tcx>(\n                 None\n             },\n             from_hir_call: true,\n+            fn_span: span,\n         },\n         false,\n     );"}, {"sha": "e1311ccd3746fbb1b346c482ed1a7e9c17b01ab7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             };\n \n             match terminator.kind {\n-                TerminatorKind::Call { mut func, mut args, from_hir_call, .. } => {\n+                TerminatorKind::Call { mut func, mut args, from_hir_call, fn_span, .. } => {\n                     self.visit_operand(&mut func, loc);\n                     for arg in &mut args {\n                         self.visit_operand(arg, loc);\n@@ -925,6 +925,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             cleanup: None,\n                             destination: Some((Place::from(new_temp), new_target)),\n                             from_hir_call,\n+                            fn_span,\n                         },\n                         ..terminator\n                     };"}, {"sha": "4c8fc49099b2af109b4e5b9278f2d59df278b9e7", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -368,7 +368,14 @@ fn check_terminator(\n             Err((span, \"const fn generators are unstable\".into()))\n         }\n \n-        TerminatorKind::Call { func, args, from_hir_call: _, destination: _, cleanup: _ } => {\n+        TerminatorKind::Call {\n+            func,\n+            args,\n+            from_hir_call: _,\n+            destination: _,\n+            cleanup: _,\n+            fn_span: _,\n+        } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(def_id, _) = fn_ty.kind {\n                 if !crate::const_eval::is_min_const_fn(tcx, def_id) {"}, {"sha": "a1345452ca9793e63de8a4e905f45e26de7feb04", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -644,6 +644,7 @@ where\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),\n                     from_hir_call: true,\n+                    fn_span: self.source_info.span,\n                 },\n                 source_info: self.source_info,\n             }),\n@@ -988,6 +989,7 @@ where\n             destination: Some((unit_temp, target)),\n             cleanup: None,\n             from_hir_call: false,\n+            fn_span: self.source_info.span,\n         }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n "}, {"sha": "76096fc2299fba3b1d02b8dfe1b7a412566711cd", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 });\n                 exit_block.unit()\n             }\n-            ExprKind::Call { ty, fun, args, from_hir_call } => {\n+            ExprKind::Call { ty, fun, args, from_hir_call, fn_span } => {\n                 let intrinsic = match ty.kind {\n                     ty::FnDef(def_id, _) => {\n                         let f = ty.fn_sig(this.hir.tcx());\n@@ -206,6 +206,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     this.record_operands_moved(&args);\n \n+                    debug!(\"into_expr: fn_span={:?}\", fn_span);\n+\n                     this.cfg.terminate(\n                         block,\n                         source_info,\n@@ -222,6 +224,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 Some((destination, success))\n                             },\n                             from_hir_call,\n+                            fn_span\n                         },\n                     );\n                     success.unit()"}, {"sha": "3e7bfc7d59b9b58d416c1da4368430fb5b660dab", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -443,6 +443,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 destination: Some((eq_result, eq_block)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: false,\n+                fn_span: source_info.span\n             },\n         );\n "}, {"sha": "971a89796e281c6bd8ba70faf8630d545f21d12a", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -139,11 +139,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n     let kind = match expr.kind {\n         // Here comes the interesting stuff:\n-        hir::ExprKind::MethodCall(_, method_span, ref args) => {\n+        hir::ExprKind::MethodCall(_, method_span, ref args, fn_span) => {\n             // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n             let expr = method_callee(cx, expr, method_span, None);\n             let args = args.iter().map(|e| e.to_ref()).collect();\n-            ExprKind::Call { ty: expr.ty, fun: expr.to_ref(), args, from_hir_call: true }\n+            ExprKind::Call { ty: expr.ty, fun: expr.to_ref(), args, from_hir_call: true, fn_span }\n         }\n \n         hir::ExprKind::Call(ref fun, ref args) => {\n@@ -170,6 +170,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                     fun: method.to_ref(),\n                     args: vec![fun.to_ref(), tupled_args.to_ref()],\n                     from_hir_call: true,\n+                    fn_span: expr.span,\n                 }\n             } else {\n                 let adt_data =\n@@ -215,6 +216,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n                         from_hir_call: true,\n+                        fn_span: expr.span,\n                     }\n                 }\n             }\n@@ -1024,7 +1026,7 @@ fn overloaded_operator<'a, 'tcx>(\n     args: Vec<ExprRef<'tcx>>,\n ) -> ExprKind<'tcx> {\n     let fun = method_callee(cx, expr, expr.span, None);\n-    ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false }\n+    ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false, fn_span: expr.span }\n }\n \n fn overloaded_place<'a, 'tcx>(\n@@ -1060,7 +1062,13 @@ fn overloaded_place<'a, 'tcx>(\n         temp_lifetime,\n         ty: ref_ty,\n         span: expr.span,\n-        kind: ExprKind::Call { ty: fun.ty, fun: fun.to_ref(), args, from_hir_call: false },\n+        kind: ExprKind::Call {\n+            ty: fun.ty,\n+            fun: fun.to_ref(),\n+            args,\n+            from_hir_call: false,\n+            fn_span: expr.span,\n+        },\n     };\n \n     // construct and return a deref wrapper `*foo()`"}, {"sha": "d3ec5595365b423e1259622e4efb9a936e0bb88d", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -146,6 +146,9 @@ crate enum ExprKind<'tcx> {\n         // Whether this is from a call in HIR, rather than from an overloaded\n         // operator. True for overloaded function call.\n         from_hir_call: bool,\n+        /// This `Span` is the span of the function, without the dot and receiver\n+        /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n+        fn_span: Span,\n     },\n     Deref {\n         arg: ExprRef<'tcx>,"}, {"sha": "49a5c8801766c5521de580d6d8d170bbd52a81a2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -639,7 +639,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"?\",\n                     ExprKind::Field(_, _) => \"a field access\",\n-                    ExprKind::MethodCall(_, _) => \"a method call\",\n+                    ExprKind::MethodCall(_, _, _) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n                     ExprKind::Await(_) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n@@ -865,6 +865,7 @@ impl<'a> Parser<'a> {\n             return self.mk_await_expr(self_arg, lo);\n         }\n \n+        let fn_span_lo = self.token.span;\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n \n@@ -873,8 +874,9 @@ impl<'a> Parser<'a> {\n             let mut args = self.parse_paren_expr_seq()?;\n             args.insert(0, self_arg);\n \n+            let fn_span = fn_span_lo.to(self.prev_token.span);\n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args), AttrVec::new()))\n+            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))\n         } else {\n             // Field access `expr.f`\n             if let Some(args) = segment.args {"}, {"sha": "ff5dabd5418c9187d99bed46609d97eb8e95e983", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&f, succ)\n             }\n \n-            hir::ExprKind::MethodCall(.., ref args) => {\n+            hir::ExprKind::MethodCall(.., ref args, _) => {\n                 let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(\n                     m,"}, {"sha": "d54ec2eca8c97ed004c9ccdc9681d9c9d4f03b62", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1302,7 +1302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     return;\n                 }\n             }\n-            hir::ExprKind::MethodCall(_, span, _) => {\n+            hir::ExprKind::MethodCall(_, span, _, _) => {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n                 if let Some(def_id) = self.tables.type_dependent_def_id(expr.hir_id) {"}, {"sha": "7166fef2d13952420262c0045bb8874730e06140", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -2117,7 +2117,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(ref segment, ref arguments) => {\n+            ExprKind::MethodCall(ref segment, ref arguments, _) => {\n                 let mut arguments = arguments.iter();\n                 self.resolve_expr(arguments.next().unwrap(), Some(expr));\n                 for argument in arguments {"}, {"sha": "9b08f709f342faa95e04af1354cfbde18b61dfa5", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1404,7 +1404,9 @@ impl<'l, 'tcx> Visitor<'tcx> for DumpVisitor<'l, 'tcx> {\n                 let res = self.save_ctxt.get_path_res(hir_expr.hir_id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_res(res), *base)\n             }\n-            hir::ExprKind::MethodCall(ref seg, _, args) => self.process_method_call(ex, seg, args),\n+            hir::ExprKind::MethodCall(ref seg, _, args, _) => {\n+                self.process_method_call(ex, seg, args)\n+            }\n             hir::ExprKind::Field(ref sub_ex, _) => {\n                 self.visit_expr(&sub_ex);\n "}, {"sha": "a504b999e47fb3d4cf7e430c55659d6ffde7d346", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (method_path, method_span, method_expr) = match (hir, closure_params_len) {\n             (\n                 Some(Node::Expr(hir::Expr {\n-                    kind: hir::ExprKind::MethodCall(path, span, expr),\n+                    kind: hir::ExprKind::MethodCall(path, span, expr, _),\n                     ..\n                 })),\n                 1,\n@@ -457,7 +457,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     let mut sugg_sp = sp;\n-                    if let hir::ExprKind::MethodCall(ref segment, sp, ref args) = expr.kind {\n+                    if let hir::ExprKind::MethodCall(ref segment, sp, ref args, _) = expr.kind {\n                         let clone_trait = self.tcx.require_lang_item(CloneTraitLangItem, Some(sp));\n                         if let ([arg], Some(true), sym::clone) = (\n                             &args[..],"}, {"sha": "c6a9a37e4407fec77d835eace540fbda0f9426aa", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Call(ref callee, _) => {\n                 self.warn_if_unreachable(expr.hir_id, callee.span, \"call\")\n             }\n-            ExprKind::MethodCall(_, ref span, _) => {\n+            ExprKind::MethodCall(_, ref span, _, _) => {\n                 self.warn_if_unreachable(expr.hir_id, *span, \"call\")\n             }\n             _ => self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\"),\n@@ -262,7 +262,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::Block(ref body, _) => self.check_block_with_expected(&body, expected),\n             ExprKind::Call(ref callee, ref args) => self.check_call(expr, &callee, args, expected),\n-            ExprKind::MethodCall(ref segment, span, ref args) => {\n+            ExprKind::MethodCall(ref segment, span, ref args, _) => {\n                 self.check_method_call(expr, segment, span, args, expected, needs)\n             }\n             ExprKind::Cast(ref e, ref t) => self.check_expr_cast(e, t, expr),"}, {"sha": "bb87fb244b6e11bdb6ec873b46d9f2b15dd1f102", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -3912,7 +3912,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  sugg_unit: bool| {\n             let (span, start_span, args) = match &expr.kind {\n                 hir::ExprKind::Call(hir::Expr { span, .. }, args) => (*span, *span, &args[..]),\n-                hir::ExprKind::MethodCall(path_segment, span, args) => (\n+                hir::ExprKind::MethodCall(path_segment, span, args, _) => (\n                     *span,\n                     // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n                     path_segment"}, {"sha": "6baadb8febd3689724696c7c8d5916abcb863287", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(args);\n             }\n \n-            hir::ExprKind::MethodCall(.., ref args) => {\n+            hir::ExprKind::MethodCall(.., ref args, _) => {\n                 // callee.m(args)\n                 self.consume_exprs(args);\n             }"}, {"sha": "6da26e6cfbe410eefdc1b28d06e38e6e14950efb", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -84,9 +84,9 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             2 => {\n                 let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::MethodCall(\n-                            seg.clone(), vec![e, make_x()])));\n+                            seg.clone(), vec![e, make_x()], DUMMY_SP)));\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::MethodCall(\n-                            seg.clone(), vec![make_x(), e])));\n+                            seg.clone(), vec![make_x(), e], DUMMY_SP)));\n             },\n             3..=8 => {\n                 let op = Spanned {"}, {"sha": "3f1c8f7abe8b8c6c5979b03cb641895f855e8a7e", "filename": "src/test/ui/rfc-2091-track-caller/call-chain.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+use std::panic::Location;\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[track_caller]\n+    fn check_loc(&self, line: u32, col: u32) -> &Self {\n+        let loc = Location::caller();\n+        assert_eq!(loc.file(), file!(), \"file mismatch\");\n+        assert_eq!(loc.line(), line, \"line mismatch\");\n+        assert_eq!(loc.column(), col, \"column mismatch\");\n+        self\n+    }\n+}\n+\n+fn main() {\n+    // Tests that when `Location::caller` is used in a method chain,\n+    // it points to the start of the correct call (the first character after the dot)\n+    // instead of to the very first expression in the chain\n+    let foo = Foo;\n+    foo.\n+        check_loc(line!(), 9).check_loc(line!(), 31)\n+        .check_loc(line!(), 10);\n+}"}, {"sha": "fca9aaaff9dcea4d9d2cabb54df37e8df501c8bd", "filename": "src/tools/clippy/clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -70,7 +70,7 @@ fn match_ordering_def_path(cx: &LateContext<'_, '_>, did: DefId, orderings: &[&s\n \n fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if_chain! {\n-        if let ExprKind::MethodCall(ref method_path, _, args) = &expr.kind;\n+        if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind;\n         let method = method_path.ident.name.as_str();\n         if type_is_atomic(cx, &args[0]);\n         if method == \"load\" || method == \"store\";"}, {"sha": "f92c564543b89bd46aba72bc7646a09bc190a7e9", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -247,7 +247,7 @@ fn simplify_not(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<String> {\n                 ))\n             })\n         },\n-        ExprKind::MethodCall(path, _, args) if args.len() == 1 => {\n+        ExprKind::MethodCall(path, _, args, _) if args.len() == 1 => {\n             let type_of_receiver = cx.tables.expr_ty(&args[0]);\n             if !is_type_diagnostic_item(cx, type_of_receiver, sym!(option_type))\n                 && !is_type_diagnostic_item(cx, type_of_receiver, sym!(result_type))"}, {"sha": "531531a654d0efb1e13f56ad7a6abec5f871b0a1", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -38,10 +38,10 @@ declare_lint_pass!(ByteCount => [NAIVE_BYTECOUNT]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref count, _, ref count_args) = expr.kind;\n+            if let ExprKind::MethodCall(ref count, _, ref count_args, _) = expr.kind;\n             if count.ident.name == sym!(count);\n             if count_args.len() == 1;\n-            if let ExprKind::MethodCall(ref filter, _, ref filter_args) = count_args[0].kind;\n+            if let ExprKind::MethodCall(ref filter, _, ref filter_args, _) = count_args[0].kind;\n             if filter.ident.name == sym!(filter);\n             if filter_args.len() == 2;\n             if let ExprKind::Closure(_, _, body_id, _, _) = filter_args[1].kind;\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ByteCount {\n                         if ty::Uint(UintTy::U8) != walk_ptrs_ty(cx.tables.expr_ty(needle)).kind {\n                             return;\n                         }\n-                        let haystack = if let ExprKind::MethodCall(ref path, _, ref args) =\n+                        let haystack = if let ExprKind::MethodCall(ref path, _, ref args, _) =\n                                 filter_args[0].kind {\n                             let p = path.ident.name;\n                             if (p == sym!(iter) || p == sym!(iter_mut)) && args.len() == 1 {"}, {"sha": "1cd30ae2c6381f844c92af3f1ea4f86fbf2d1bda", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n-            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n+            if let ExprKind::MethodCall(ref method_name, _, ref args, _) = &expr.kind;\n             if args.len() == 1;\n \n             then {"}, {"sha": "1eb380a22cc6ba765ba1988e33308020bffbe691", "filename": "src/tools/clippy/clippy_lints/src/double_parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -70,7 +70,7 @@ impl EarlyLintPass for DoubleParens {\n                     }\n                 }\n             },\n-            ExprKind::MethodCall(_, ref params) => {\n+            ExprKind::MethodCall(_, ref params, _) => {\n                 if params.len() == 2 {\n                     let param = &params[1];\n                     if let ExprKind::Paren(_) = param.kind {"}, {"sha": "7171dcef968c14150ebc548734c534c97ed2b4fc", "filename": "src/tools/clippy/clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, ref left, ref right) = expr.kind;\n-            if let ExprKind::MethodCall(ref method_path, _ , ref args) = left.kind;\n+            if let ExprKind::MethodCall(ref method_path, _ , ref args, _) = left.kind;\n             if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.tables, right);\n             then {"}, {"sha": "f625058b6703cec269e01a9f2c0da9b8e4f2e9fe", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -103,7 +103,7 @@ fn check_cond<'a, 'tcx, 'b>(\n     check: &'b Expr<'b>,\n ) -> Option<(&'static str, &'b Expr<'b>, &'b Expr<'b>)> {\n     if_chain! {\n-        if let ExprKind::MethodCall(ref path, _, ref params) = check.kind;\n+        if let ExprKind::MethodCall(ref path, _, ref params, _) = check.kind;\n         if params.len() >= 2;\n         if path.ident.name == sym!(contains_key);\n         if let ExprKind::AddrOf(BorrowKind::Ref, _, ref key) = params[1].kind;\n@@ -140,7 +140,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref path, _, ref params) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref params, _) = expr.kind;\n             if params.len() == 3;\n             if path.ident.name == sym!(insert);\n             if get_item_name(self.cx, self.map) == get_item_name(self.cx, &params[0]);"}, {"sha": "a889856de274215b324197e4a20ba2cb80489dbb", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaReduction {\n         }\n \n         match expr.kind {\n-            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args) => {\n+            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n                 for arg in args {\n                     check_closure(cx, arg)\n                 }\n@@ -120,7 +120,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         );\n \n         if_chain!(\n-            if let ExprKind::MethodCall(ref path, _, ref args) = ex.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = ex.kind;\n \n             // Not the same number of arguments, there is no way the closure is the same as the function return;\n             if args.len() == decl.inputs.len();"}, {"sha": "7269e2b52c2ce953a6e74400bbf821134cb05684", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -32,11 +32,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitWrite {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // match call to unwrap\n-            if let ExprKind::MethodCall(ref unwrap_fun, _, ref unwrap_args) = expr.kind;\n+            if let ExprKind::MethodCall(ref unwrap_fun, _, ref unwrap_args, _) = expr.kind;\n             if unwrap_fun.ident.name == sym!(unwrap);\n             // match call to write_fmt\n             if !unwrap_args.is_empty();\n-            if let ExprKind::MethodCall(ref write_fun, _, write_args) =\n+            if let ExprKind::MethodCall(ref write_fun, _, write_args, _) =\n                 unwrap_args[0].kind;\n             if write_fun.ident.name == sym!(write_fmt);\n             // match calls to std::io::stdout() / std::io::stderr ()"}, {"sha": "ad4f66c52c2c85c18bbb21c1d19a965057e9aa51", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -301,7 +301,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if cx.tables.expr_ty(lhs).is_floating_point();\n         if let Some((value, _)) = constant(cx, cx.tables, rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n-        if let ExprKind::MethodCall(ref path, _, ref method_args) = lhs.kind;\n+        if let ExprKind::MethodCall(ref path, _, ref method_args, _) = lhs.kind;\n         if cx.tables.expr_ty(&method_args[0]).is_floating_point();\n         if path.ident.name.as_str() == \"exp\";\n         then {\n@@ -481,7 +481,7 @@ fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n+        if let ExprKind::MethodCall(ref path, _, args, _) = &expr.kind {\n             let recv_ty = cx.tables.expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {"}, {"sha": "4cae5ca2c4326b6d52310d3b36ea786bde4e8f8f", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -104,7 +104,7 @@ fn on_argumentv1_new<'a, 'tcx>(\n                 }\n             } else {\n                 let snip = snippet(cx, format_args.span, \"<arg>\");\n-                if let ExprKind::MethodCall(ref path, _, _) = format_args.kind {\n+                if let ExprKind::MethodCall(ref path, _, _, _) = format_args.kind {\n                     if path.ident.name == sym!(to_string) {\n                         return Some(format!(\"{}\", snip));\n                     }"}, {"sha": "991d129e8f0d612a7d7187abe0d007c5592502b3", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -556,7 +556,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                     }\n                 }\n             },\n-            hir::ExprKind::MethodCall(_, _, args) => {\n+            hir::ExprKind::MethodCall(_, _, args, _) => {\n                 let def_id = self.tables.type_dependent_def_id(expr.hir_id).unwrap();\n                 let base_type = self.cx.tcx.type_of(def_id);\n \n@@ -610,7 +610,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n             return;\n         }\n         match expr.kind {\n-            Call(_, args) | MethodCall(_, _, args) => {\n+            Call(_, args) | MethodCall(_, _, args, _) => {\n                 let mut tys = FxHashSet::default();\n                 for arg in args {\n                     let def_id = arg.hir_id.owner.to_def_id();"}, {"sha": "3629ba623ce43a64dc6176ccac1e21722fe3cbd0", "filename": "src/tools/clippy/clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // Is a method call\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n \n             // Method name is \"get\"\n             if path.ident.name == sym!(get);\n@@ -69,7 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n             ) = &get_index_arg.kind;\n \n             // LHS of subtraction is \"x.len()\"\n-            if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args) = &lhs.kind;\n+            if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args, _) = &lhs.kind;\n             if arg_lhs_path.ident.name == sym!(len);\n             if let Some(arg_lhs_struct) = lhs_args.get(0);\n "}, {"sha": "04d17c91d63c1515dd73532581ab68984c15796d", "filename": "src/tools/clippy/clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -147,7 +147,7 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n \n fn is_mutex_lock_call<'a>(cx: &LateContext<'a, '_>, expr: &'a Expr<'_>) -> Option<&'a Expr<'a>> {\n     if_chain! {\n-        if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n+        if let ExprKind::MethodCall(path, _span, args, _) = &expr.kind;\n         if path.ident.to_string() == \"lock\";\n         let ty = cx.tables.expr_ty(&args[0]);\n         if is_type_diagnostic_item(cx, ty, sym!(mutex_type));"}, {"sha": "6a1fcdd1ce445edc5a30021a2f2b70233ce9ee19", "filename": "src/tools/clippy/clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n         if_chain! { //begin checking variables\n             if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n             if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n-            if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n+            if let ExprKind::MethodCall(_, ok_span, ref result_types, _) = op.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n             if is_type_diagnostic_item(cx, cx.tables.expr_ty(&result_types[0]), sym!(result_type));"}, {"sha": "a860a9def24224725444f7535b6b10b2431cecbf", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -142,7 +142,7 @@ const HEURISTICS: [(&str, usize, Heuristic, Finiteness); 19] = [\n \n fn is_infinite(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Finiteness {\n     match expr.kind {\n-        ExprKind::MethodCall(ref method, _, ref args) => {\n+        ExprKind::MethodCall(ref method, _, ref args, _) => {\n             for &(name, len, heuristic, cap) in &HEURISTICS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return (match heuristic {\n@@ -218,7 +218,7 @@ const INFINITE_COLLECTORS: [&[&str]; 8] = [\n \n fn complete_infinite_iter(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Finiteness {\n     match expr.kind {\n-        ExprKind::MethodCall(ref method, _, ref args) => {\n+        ExprKind::MethodCall(ref method, _, ref args, _) => {\n             for &(name, len) in &COMPLETING_METHODS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return is_infinite(cx, &args[0]);"}, {"sha": "13e85fda8ffebb607bc7390db32c4bfed5274098", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -211,7 +211,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[Imp\n }\n \n fn check_cmp(cx: &LateContext<'_, '_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>, op: &str, compare_to: u32) {\n-    if let (&ExprKind::MethodCall(ref method_path, _, ref args), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n+    if let (&ExprKind::MethodCall(ref method_path, _, ref args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n         // check if we are in an is_empty() method\n         if let Some(name) = get_item_name(cx, method) {\n             if name.as_str() == \"is_empty\" {"}, {"sha": "771bc8d055825192cc044de3942c9c1ad661d6c7", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -526,7 +526,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n             let pat = &arms[0].pat.kind;\n             if let (\n                 &PatKind::TupleStruct(ref qpath, ref pat_args, _),\n-                &ExprKind::MethodCall(ref method_path, _, ref method_args),\n+                &ExprKind::MethodCall(ref method_path, _, ref method_args, _),\n             ) = (pat, &match_expr.kind)\n             {\n                 let iter_expr = &method_args[0];\n@@ -654,7 +654,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Struct(_, _, Some(ref e))\n         | ExprKind::Repeat(ref e, _)\n         | ExprKind::DropTemps(ref e) => never_loop_expr(e, main_loop_id),\n-        ExprKind::Array(ref es) | ExprKind::MethodCall(_, _, ref es) | ExprKind::Tup(ref es) => {\n+        ExprKind::Array(ref es) | ExprKind::MethodCall(_, _, ref es, _) | ExprKind::Tup(ref es) => {\n             never_loop_expr_all(&mut es.iter(), main_loop_id)\n         },\n         ExprKind::Call(ref e, ref es) => never_loop_expr_all(&mut once(&**e).chain(es.iter()), main_loop_id),\n@@ -806,7 +806,7 @@ fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'_>) -> bool {\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, _, args) = expr.kind;\n+        if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n         if method.ident.name == sym!(clone);\n         if args.len() == 1;\n         if let Some(arg) = args.get(0);\n@@ -915,7 +915,7 @@ fn build_manual_memcpy_suggestion<'a, 'tcx>(\n \n     let print_limit = |end: &Expr<'_>, offset: Offset, var: &Expr<'_>| {\n         if_chain! {\n-            if let ExprKind::MethodCall(method, _, len_args) = end.kind;\n+            if let ExprKind::MethodCall(method, _, len_args, _) = end.kind;\n             if method.ident.name == sym!(len);\n             if len_args.len() == 1;\n             if let Some(arg) = len_args.get(0);\n@@ -1190,7 +1190,7 @@ fn check_for_loop_range<'a, 'tcx>(\n \n fn is_len_call(expr: &Expr<'_>, var: Name) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(ref method, _, ref len_args) = expr.kind;\n+        if let ExprKind::MethodCall(ref method, _, ref len_args, _) = expr.kind;\n         if len_args.len() == 1;\n         if method.ident.name == sym!(len);\n         if let ExprKind::Path(QPath::Resolved(_, ref path)) = len_args[0].kind;\n@@ -1244,7 +1244,7 @@ fn lint_iter_method(cx: &LateContext<'_, '_>, args: &[Expr<'_>], arg: &Expr<'_>,\n \n fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, expr: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n-    if let ExprKind::MethodCall(ref method, _, ref args) = arg.kind {\n+    if let ExprKind::MethodCall(ref method, _, ref args, _) = arg.kind {\n         // just the receiver, no arguments\n         if args.len() == 1 {\n             let method_name = &*method.ident.as_str();\n@@ -1718,7 +1718,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // a range index op\n-            if let ExprKind::MethodCall(ref meth, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref meth, _, ref args, _) = expr.kind;\n             if (meth.ident.name == sym!(index) && match_trait_method(self.cx, expr, &paths::INDEX))\n                 || (meth.ident.name == sym!(index_mut) && match_trait_method(self.cx, expr, &paths::INDEX_MUT));\n             if !self.check(&args[1], &args[0], expr);\n@@ -1776,7 +1776,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::MethodCall(_, _, args) => {\n+            ExprKind::MethodCall(_, _, args, _) => {\n                 let def_id = self.cx.tables.type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n                     self.prefer_mutable = false;\n@@ -2369,8 +2369,8 @@ const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n \n fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, 'tcx>) {\n     if_chain! {\n-        if let ExprKind::MethodCall(ref method, _, ref args) = expr.kind;\n-        if let ExprKind::MethodCall(ref chain_method, _, _) = args[0].kind;\n+        if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n+        if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n         if chain_method.ident.name == sym!(collect) && match_trait_method(cx, &args[0], &paths::ITERATOR);\n         if let Some(ref generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n@@ -2437,7 +2437,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n \n fn shorten_span(expr: &Expr<'_>, target_fn_name: Symbol) -> Span {\n     let mut current_expr = expr;\n-    while let ExprKind::MethodCall(ref path, ref span, ref args) = current_expr.kind {\n+    while let ExprKind::MethodCall(ref path, ref span, ref args, _) = current_expr.kind {\n         if path.ident.name == target_fn_name {\n             return expr.span.with_lo(span.lo());\n         }"}, {"sha": "8f4fdc685ef38c4d15d0a5af3f53da578445c6dd", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n         }\n \n         if_chain! {\n-            if let hir::ExprKind::MethodCall(ref method, _, ref args) = e.kind;\n+            if let hir::ExprKind::MethodCall(ref method, _, ref args, _) = e.kind;\n             if args.len() == 2;\n             if method.ident.as_str() == \"map\";\n             let ty = cx.tables.expr_ty(&args[0]);\n@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MapClone {\n                                     }\n                                 }\n                             },\n-                            hir::ExprKind::MethodCall(ref method, _, ref obj) => {\n+                            hir::ExprKind::MethodCall(ref method, _, ref obj, _) => {\n                                 if ident_eq(name, &obj[0]) && method.ident.as_str() == \"clone\"\n                                     && match_trait_method(cx, closure_expr, &paths::CLONE_TRAIT) {\n "}, {"sha": "8f4b674c04f49ecde8af39f95c813239beb144a4", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -125,7 +125,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a hir::Expr<'_>)\n     }\n \n     match expr.kind {\n-        hir::ExprKind::Call(_, _) | hir::ExprKind::MethodCall(_, _, _) => {\n+        hir::ExprKind::Call(_, _) | hir::ExprKind::MethodCall(_, _, _, _) => {\n             // Calls can't be reduced any more\n             Some(expr.span)\n         },"}, {"sha": "f25a9782813bbbd36c0bdf906b6f408a24294c0f", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         }\n \n         match expr.kind {\n-            hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args) => {\n+            hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args, _) => {\n                 lint_or_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n                 lint_expect_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n \n@@ -1677,7 +1677,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n         or_has_args: bool,\n         span: Span,\n     ) {\n-        if let hir::ExprKind::MethodCall(ref path, _, ref args) = &arg.kind {\n+        if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = &arg.kind {\n             if path.ident.as_str() == \"len\" {\n                 let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n \n@@ -1751,7 +1751,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n                     );\n                 }\n             },\n-            hir::ExprKind::MethodCall(_, span, ref or_args) => check_general_case(\n+            hir::ExprKind::MethodCall(_, span, ref or_args, _) => check_general_case(\n                 cx,\n                 name,\n                 method_span,\n@@ -1782,7 +1782,7 @@ fn lint_expect_fun_call(\n         loop {\n             arg_root = match &arg_root.kind {\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, expr) => expr,\n-                hir::ExprKind::MethodCall(method_name, _, call_args) => {\n+                hir::ExprKind::MethodCall(method_name, _, call_args, _) => {\n                     if call_args.len() == 1\n                         && (method_name.ident.name == sym!(as_str) || method_name.ident.name == sym!(as_ref))\n                         && {\n@@ -2002,7 +2002,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n                     // &*x is a nop, &x.clone() is not\n                     hir::ExprKind::AddrOf(..) => return,\n                     // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n-                    hir::ExprKind::MethodCall(_, _, parent_args) if expr.hir_id == parent_args[0].hir_id => return,\n+                    hir::ExprKind::MethodCall(_, _, parent_args, _) if expr.hir_id == parent_args[0].hir_id => return,\n \n                     _ => {},\n                 },\n@@ -2478,7 +2478,7 @@ fn derefs_to_slice<'a, 'tcx>(\n         }\n     }\n \n-    if let hir::ExprKind::MethodCall(ref path, _, ref args) = expr.kind {\n+    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n         if path.ident.name == sym!(iter) && may_slice(cx, cx.tables.expr_ty(&args[0])) {\n             Some(&args[0])\n         } else {\n@@ -3182,7 +3182,7 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, call_name: &str, a\n             // allow the `as_ref` or `as_mut` if it is followed by another method call\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(cx, expr);\n-                if let hir::ExprKind::MethodCall(_, ref span, _) = parent.kind;\n+                if let hir::ExprKind::MethodCall(_, ref span, _, _) = parent.kind;\n                 if span != &expr.span;\n                 then {\n                     return;\n@@ -3310,7 +3310,7 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n             let closure_expr = remove_blocks(&closure_body.value);\n \n             match &closure_expr.kind {\n-                hir::ExprKind::MethodCall(_, _, args) => {\n+                hir::ExprKind::MethodCall(_, _, args, _) => {\n                     if_chain! {\n                         if args.len() == 1;\n                         if let hir::ExprKind::Path(qpath) = &args[0].kind;"}, {"sha": "a0947608e60776dc0db4ab3a43addc0871f72f10", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -545,7 +545,7 @@ fn is_signum(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     }\n \n     if_chain! {\n-        if let ExprKind::MethodCall(ref method_name, _, ref expressions) = expr.kind;\n+        if let ExprKind::MethodCall(ref method_name, _, ref expressions, _) = expr.kind;\n         if sym!(signum) == method_name.ident.name;\n         // Check that the receiver of the signum() is a float (expressions[0] is the receiver of\n         // the method call)\n@@ -572,7 +572,7 @@ fn is_array(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n \n fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {\n     let (arg_ty, snip) = match expr.kind {\n-        ExprKind::MethodCall(.., ref args) if args.len() == 1 => {\n+        ExprKind::MethodCall(.., ref args, _) if args.len() == 1 => {\n             if match_trait_method(cx, expr, &paths::TO_STRING) || match_trait_method(cx, expr, &paths::TO_OWNED) {\n                 (cx.tables.expr_ty_adjusted(&args[0]), snippet(cx, args[0].span, \"..\"))\n             } else {"}, {"sha": "7fcf15f8acbe828d1b385b405068d44fc6c5e57c", "filename": "src/tools/clippy/clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                     );\n                 }\n             },\n-            ExprKind::MethodCall(ref path, _, ref arguments) => {\n+            ExprKind::MethodCall(ref path, _, ref arguments, _) => {\n                 let def_id = cx.tables.type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.tables.node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);"}, {"sha": "2d4629b683f057b12fb44e7500e445314dd7cf2e", "filename": "src/tools/clippy/clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -29,7 +29,7 @@ declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OpenOptions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(ref path, _, ref arguments) = e.kind {\n+        if let ExprKind::MethodCall(ref path, _, ref arguments, _) = e.kind {\n             let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&arguments[0]));\n             if path.ident.name == sym!(open) && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n                 let mut options = Vec::new();\n@@ -57,7 +57,7 @@ enum OpenOption {\n }\n \n fn get_open_options(cx: &LateContext<'_, '_>, argument: &Expr<'_>, options: &mut Vec<(OpenOption, Argument)>) {\n-    if let ExprKind::MethodCall(ref path, _, ref arguments) = argument.kind {\n+    if let ExprKind::MethodCall(ref path, _, ref arguments, _) = argument.kind {\n         let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&arguments[0]));\n \n         // Only proceed if this is a call on some object of type std::fs::OpenOptions"}, {"sha": "fd653044a1bcb9fb6442041c6e2b4e1f39d90c21", "filename": "src/tools/clippy/clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -35,7 +35,7 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path_segment, args) = &expr.kind;\n+            if let ExprKind::MethodCall(path_segment, args, _) = &expr.kind;\n             let method_name = path_segment.ident.as_str();\n             if method_name == \"expect\" || method_name == \"unwrap\";\n             if let ExprKind::Call(caller, _) = &args[0].kind;"}, {"sha": "88ad1e0914f25f1a5763eaf02c13cfb2dc565368", "filename": "src/tools/clippy/clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -43,7 +43,7 @@ declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathBufPushOverwrite {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if path.ident.name == sym!(push);\n             if args.len() == 2;\n             if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::PATH_BUF);"}, {"sha": "7dce23dd223061f5684ecdbe6a7179ec89a5f88e", "filename": "src/tools/clippy/clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -103,7 +103,7 @@ impl EarlyLintPass for Precedence {\n         }\n \n         if let ExprKind::Unary(UnOp::Neg, ref rhs) = expr.kind {\n-            if let ExprKind::MethodCall(ref path_segment, ref args) = rhs.kind {\n+            if let ExprKind::MethodCall(ref path_segment, ref args, _) = rhs.kind {\n                 let path_segment_str = path_segment.ident.name.as_str();\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {"}, {"sha": "d23d7e59b73fc054369ab6b57a1eced54450d033", "filename": "src/tools/clippy/clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -90,7 +90,7 @@ fn expr_as_ptr_offset_call<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx Expr<'_>,\n ) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>, Method)> {\n-    if let ExprKind::MethodCall(ref path_segment, _, ref args) = expr.kind {\n+    if let ExprKind::MethodCall(ref path_segment, _, ref args, _) = expr.kind {\n         if is_expr_ty_raw_ptr(cx, &args[0]) {\n             if path_segment.ident.name == sym!(offset) {\n                 return Some((&args[0], &args[1], Method::Offset));"}, {"sha": "3591972fe082f7d0db4a12878a993059556509b8", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -50,7 +50,7 @@ impl QuestionMark {\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if_chain! {\n             if let Some((if_expr, body, else_)) = higher::if_block(&expr);\n-            if let ExprKind::MethodCall(segment, _, args) = &if_expr.kind;\n+            if let ExprKind::MethodCall(segment, _, args, _) = &if_expr.kind;\n             if segment.ident.name == sym!(is_none);\n             if Self::expression_returns_none(cx, body);\n             if let Some(subject) = args.get(0);"}, {"sha": "fcd02a196e7bf593398effda1a57d285707db808", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -129,20 +129,20 @@ declare_lint_pass!(Ranges => [\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind {\n+        if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n             let name = path.ident.as_str();\n             if name == \"zip\" && args.len() == 2 {\n                 let iter = &args[0].kind;\n                 let zip_arg = &args[1];\n                 if_chain! {\n                     // `.iter()` call\n-                    if let ExprKind::MethodCall(ref iter_path, _, ref iter_args ) = *iter;\n+                    if let ExprKind::MethodCall(ref iter_path, _, ref iter_args , _) = *iter;\n                     if iter_path.ident.name == sym!(iter);\n                     // range expression in `.zip()` call: `0..x.len()`\n                     if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(cx, zip_arg);\n                     if is_integer_const(cx, start, 0);\n                     // `.len()` call\n-                    if let ExprKind::MethodCall(ref len_path, _, ref len_args) = end.kind;\n+                    if let ExprKind::MethodCall(ref len_path, _, ref len_args, _) = end.kind;\n                     if len_path.ident.name == sym!(len) && len_args.len() == 1;\n                     // `.iter()` and `.len()` called on same `Path`\n                     if let ExprKind::Path(QPath::Resolved(_, ref iter_path)) = iter_args[0].kind;"}, {"sha": "f16b916441ae81a51142998a4590b099845cba29", "filename": "src/tools/clippy/clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -89,7 +89,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n     // check that `while_let_on_iterator` lint does not trigger\n     if_chain! {\n         if keyword == \"while\";\n-        if let ExprKind::MethodCall(method_path, _, _) = op.kind;\n+        if let ExprKind::MethodCall(method_path, _, _, _) = op.kind;\n         if method_path.ident.name == sym!(next);\n         if match_trait_method(cx, op, &paths::ITERATOR);\n         then {"}, {"sha": "44c9cc19cfb4e740f96b13fe3b12376db448d8e1", "filename": "src/tools/clippy/clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     fn search_slow_extend_filling(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if self.initialization_found;\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if let ExprKind::Path(ref qpath_subj) = args[0].kind;\n             if match_qpath(&qpath_subj, &[&*self.vec_alloc.variable_name.as_str()]);\n             if path.ident.name == sym!(extend);\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     fn search_slow_resize_filling(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if self.initialization_found;\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if let ExprKind::Path(ref qpath_subj) = args[0].kind;\n             if match_qpath(&qpath_subj, &[&*self.vec_alloc.variable_name.as_str()]);\n             if path.ident.name == sym!(resize);\n@@ -246,7 +246,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     /// Returns `true` if give expression is `repeat(0).take(...)`\n     fn is_repeat_take(&self, expr: &Expr<'_>) -> bool {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref take_path, _, ref take_args) = expr.kind;\n+            if let ExprKind::MethodCall(ref take_path, _, ref take_args, _) = expr.kind;\n             if take_path.ident.name == sym!(take);\n \n             // Check that take is applied to `repeat(0)`"}, {"sha": "d8e4bff3d702aa2c0577d8cf87899340d7fd88cc", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n         use rustc_ast::ast::LitKind;\n \n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args) = &e.kind;\n+            if let ExprKind::MethodCall(path, _, args, _) = &e.kind;\n             if path.ident.name == sym!(as_bytes);\n             if let ExprKind::Lit(lit) = &args[0].kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;"}, {"sha": "4f132c6db76fa2aa318241385085f1d0c2bb0016", "filename": "src/tools/clippy/clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -34,12 +34,12 @@ declare_lint_pass!(ToDigitIsSome => [TO_DIGIT_IS_SOME]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ToDigitIsSome {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n-            if let hir::ExprKind::MethodCall(is_some_path, _, is_some_args) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(is_some_path, _, is_some_args, _) = &expr.kind;\n             if is_some_path.ident.name.as_str() == \"is_some\";\n             if let [to_digit_expr] = &**is_some_args;\n             then {\n                 let match_result = match &to_digit_expr.kind {\n-                    hir::ExprKind::MethodCall(to_digits_path, _, to_digit_args) => {\n+                    hir::ExprKind::MethodCall(to_digits_path, _, to_digit_args, _) => {\n                         if_chain! {\n                             if let [char_arg, radix_arg] = &**to_digit_args;\n                             if to_digits_path.ident.name.as_str() == \"to_digit\";"}, {"sha": "57d5b27df574171bd6dd179ce8246ff73ae7d5e5", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -778,7 +778,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n         }\n \n         match expr.kind {\n-            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args) => {\n+            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n                 let args_to_recover = args\n                     .iter()\n                     .filter(|arg| {\n@@ -1262,14 +1262,14 @@ fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr<'_>, op: &Expr<'_>,\n     }\n \n     // don't lint for the result of methods that always return non-negative values\n-    if let ExprKind::MethodCall(ref path, _, _) = op.kind {\n+    if let ExprKind::MethodCall(ref path, _, _, _) = op.kind {\n         let mut method_name = path.ident.name.as_str();\n         let whitelisted_methods = [\"abs\", \"checked_abs\", \"rem_euclid\", \"checked_rem_euclid\"];\n \n         if_chain! {\n             if method_name == \"unwrap\";\n             if let Some(arglist) = method_chain_args(op, &[\"unwrap\"]);\n-            if let ExprKind::MethodCall(ref inner_path, _, _) = &arglist[0][0].kind;\n+            if let ExprKind::MethodCall(ref inner_path, _, _, _) = &arglist[0][0].kind;\n             then {\n                 method_name = inner_path.ident.name.as_str();\n             }"}, {"sha": "e94eebb88e4974bd10511c483ed24101051a2db5", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -95,7 +95,7 @@ fn mirrored_exprs(\n         // The two exprs are method calls.\n         // Check to see that the function is the same and the arguments are mirrored\n         // This is enough because the receiver of the method is listed in the arguments\n-        (ExprKind::MethodCall(left_segment, _, left_args), ExprKind::MethodCall(right_segment, _, right_args)) => {\n+        (ExprKind::MethodCall(left_segment, _, left_args, _), ExprKind::MethodCall(right_segment, _, right_args, _)) => {\n             left_segment.ident == right_segment.ident\n                 && left_args\n                     .iter()\n@@ -170,7 +170,7 @@ fn mirrored_exprs(\n \n fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n     if_chain! {\n-        if let ExprKind::MethodCall(name_ident, _, args) = &expr.kind;\n+        if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n@@ -180,7 +180,7 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},\n             Param { pat: Pat { kind: PatKind::Binding(_, _, right_ident, _), .. }, .. }\n         ] = &closure_body.params;\n-        if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr]) = &closure_body.value.kind;\n+        if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr], _) = &closure_body.value.kind;\n         if method_path.ident.name.to_ident_string() == \"cmp\";\n         then {\n             let (closure_body, closure_arg, reverse) = if mirrored_exprs("}, {"sha": "5f4b5fd9dd91cb2c3942e8923435188065c655a7", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n                 }\n             },\n \n-            hir::ExprKind::MethodCall(ref path, _, ref args) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(ref path, _, ref args, _) => match &*path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_method_call(cx, &args[0], expr);\n                 },\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n }\n \n fn check_method_call(cx: &LateContext<'_, '_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n-    if let hir::ExprKind::MethodCall(ref path, _, _) = call.kind {\n+    if let hir::ExprKind::MethodCall(ref path, _, _, _) = call.kind {\n         let symbol = &*path.ident.as_str();\n         let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n         let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);"}, {"sha": "a6c7b5d405cda0aacbcf56040b13554f443e7ec5", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -112,7 +112,7 @@ fn collect_unwrap_info<'a, 'tcx>(\n         return collect_unwrap_info(cx, expr, branch, !invert);\n     } else {\n         if_chain! {\n-            if let ExprKind::MethodCall(method_name, _, args) = &expr.kind;\n+            if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n             if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].kind;\n             let ty = cx.tables.expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         } else {\n             // find `unwrap[_err]()` calls:\n             if_chain! {\n-                if let ExprKind::MethodCall(ref method_name, _, ref args) = expr.kind;\n+                if let ExprKind::MethodCall(ref method_name, _, ref args, _) = expr.kind;\n                 if let ExprKind::Path(QPath::Resolved(None, ref path)) = args[0].kind;\n                 if [sym!(unwrap), sym!(unwrap_err)].contains(&method_name.ident.name);\n                 let call_to_unwrap = method_name.ident.name == sym!(unwrap);"}, {"sha": "78d249482d53d2f0e30212c440b7d27a5e40ca27", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                 }\n             },\n \n-            ExprKind::MethodCall(ref name, .., ref args) => {\n+            ExprKind::MethodCall(ref name, .., ref args, _) => {\n                 if match_trait_method(cx, e, &paths::INTO) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);"}, {"sha": "e60e2a81e070bdeb97296492bfe433117e50cc3c", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -120,7 +120,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n-        (MethodCall(lc, la), MethodCall(rc, ra)) => eq_path_seg(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n+        (MethodCall(lc, la, _), MethodCall(rc, ra, _)) => eq_path_seg(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n         (Lit(l), Lit(r)) => l.kind == r.kind,"}, {"sha": "8b58bbb5e65753e46089033998458100b72cb4c3", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -250,8 +250,8 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     self.visit_expr(arg);\n                 }\n             },\n-            ExprKind::MethodCall(ref _method_name, ref _generics, ref _args) => {\n-                println!(\"MethodCall(ref method_name, ref generics, ref args) = {};\", current);\n+            ExprKind::MethodCall(ref _method_name, ref _generics, ref _args, ref _fn_span) => {\n+                println!(\"MethodCall(ref method_name, ref generics, ref args, ref fn_span) = {};\", current);\n                 println!(\"    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment\");\n             },\n             ExprKind::Tup(ref elements) => {"}, {"sha": "473a730dad500e56a70af1b15a764111cdb9fd5e", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                             && self.eq_pat(&l.pat, &r.pat)\n                     })\n             },\n-            (&ExprKind::MethodCall(l_path, _, l_args), &ExprKind::MethodCall(r_path, _, r_args)) => {\n+            (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n                 !self.ignore_fn && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n             (&ExprKind::Repeat(ref le, ref ll_id), &ExprKind::Repeat(ref re, ref rl_id)) => {\n@@ -542,7 +542,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n                 s.hash(&mut self.s);\n             },\n-            ExprKind::MethodCall(ref path, ref _tys, args) => {\n+            ExprKind::MethodCall(ref path, ref _tys, args, ref _fn_span) => {\n                 self.hash_name(path.ident.name);\n                 self.hash_exprs(args);\n             },"}, {"sha": "649b166e98eecb2ba825ca3bc39b51f4135becaa", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -167,7 +167,7 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, indent: usize) {\n                 print_expr(cx, arg, indent + 1);\n             }\n         },\n-        hir::ExprKind::MethodCall(ref path, _, args) => {\n+        hir::ExprKind::MethodCall(ref path, _, args, _) => {\n             println!(\"{}MethodCall\", ind);\n             println!(\"{}method name: {}\", ind, path.ident.name);\n             for arg in args {"}, {"sha": "89e2bcdd7935d3e88bc76f2b96ac6eb7588fdf25", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             let fn_name = path.ident;\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n             let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n@@ -491,7 +491,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n             let stmts = &block.stmts;\n             if stmts.len() == 1 && block.expr.is_none();\n             if let StmtKind::Semi(only_expr) = &stmts[0].kind;\n-            if let ExprKind::MethodCall(ref ps, _, ref span_call_args) = &only_expr.kind;\n+            if let ExprKind::MethodCall(ref ps, _, ref span_call_args, _) = &only_expr.kind;\n             let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n             let mut sle = SpanlessEq::new(cx).ignore_fn();\n             then {"}, {"sha": "60ab19e71f5e4e15b8f9b45ae6cac3fc01f146a5", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -379,7 +379,7 @@ pub fn method_calls<'tcx>(\n \n     let mut current = expr;\n     for _ in 0..max_depth {\n-        if let ExprKind::MethodCall(path, span, args) = &current.kind {\n+        if let ExprKind::MethodCall(path, span, args, _) = &current.kind {\n             if args.iter().any(|e| e.span.from_expansion()) {\n                 break;\n             }\n@@ -406,7 +406,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n     let mut matched = Vec::with_capacity(methods.len());\n     for method_name in methods.iter().rev() {\n         // method chains are stored last -> first\n-        if let ExprKind::MethodCall(ref path, _, ref args) = current.kind {\n+        if let ExprKind::MethodCall(ref path, _, ref args, _) = current.kind {\n             if path.ident.name.as_str() == *method_name {\n                 if args.iter().any(|e| e.span.from_expansion()) {\n                     return None;\n@@ -1324,7 +1324,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool\n                 None\n             }\n         },\n-        ExprKind::MethodCall(_, _, _) => cx.tables.type_dependent_def_id(expr.hir_id),\n+        ExprKind::MethodCall(_, _, _, _) => cx.tables.type_dependent_def_id(expr.hir_id),\n         _ => None,\n     };\n "}, {"sha": "ee336ecc58d958722ba965d8b2cfded874a891ab", "filename": "src/tools/clippy/clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n         if self.abort {\n             return;\n         }\n-        if let ExprKind::MethodCall(ref seg, _, ref args) = expr.kind {\n+        if let ExprKind::MethodCall(ref seg, _, ref args, _) = expr.kind {\n             if args.len() == 1 && match_var(&args[0], self.name) {\n                 if seg.ident.name.as_str() == \"capacity\" {\n                     self.abort = true;"}, {"sha": "55758efa32e67f7e0d390f90d5e7b517a89695fe", "filename": "src/tools/clippy/clippy_lints/src/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -31,7 +31,7 @@ declare_lint_pass!(VecResizeToZero => [VEC_RESIZE_TO_ZERO]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VecResizeToZero {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let hir::ExprKind::MethodCall(path_segment, _, ref args) = expr.kind;\n+            if let hir::ExprKind::MethodCall(path_segment, _, ref args, _) = expr.kind;\n             if let Some(method_def_id) = cx.tables.type_dependent_def_id(expr.hir_id);\n             if match_def_path(cx, method_def_id, &paths::VEC_RESIZE) && args.len() == 3;\n             if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = args[1].kind;"}, {"sha": "6d420d491c50f1aac1c7d9c3f9b9069e764e161a", "filename": "src/tools/clippy/clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b9145076657579afb09c04b8653bf25b86f59d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=84b9145076657579afb09c04b8653bf25b86f59d", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VerboseFileReads {\n \n fn is_file_read_to_end<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, exprs) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, _, exprs, _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_end\";\n         if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n         let ty = cx.tables.expr_ty(&exprs[0]);\n@@ -73,7 +73,7 @@ fn is_file_read_to_end<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'t\n \n fn is_file_read_to_string<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, exprs) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, _, exprs, _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_string\";\n         if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n         let ty = cx.tables.expr_ty(&exprs[0]);"}]}