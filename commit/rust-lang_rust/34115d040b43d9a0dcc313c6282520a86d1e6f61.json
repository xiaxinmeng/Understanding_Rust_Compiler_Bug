{"sha": "34115d040b43d9a0dcc313c6282520a86d1e6f61", "node_id": "C_kwDOAAsO6NoAKDM0MTE1ZDA0MGI0M2Q5YTBkY2MzMTNjNjI4MjUyMGE4NmQxZTZmNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T23:19:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T23:19:55Z"}, "message": "Auto merge of #104215 - Manishearth:rollup-5r957ad, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #101005 (Migrate rustc_codegen_llvm to SessionDiagnostics)\n - #103307 (Add context to compiler error message)\n - #103464 (Add support for custom mir)\n - #103929 (Cleanup Apple-related code in rustc_target)\n - #104015 (Remove linuxkernel targets)\n - #104020 (Limit efiapi calling convention to supported arches)\n - #104156 (Cleanups in autoderef impl)\n - #104171 (Update books)\n - #104184 (Fix `rustdoc --version` when used with download-rustc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "13aa86008ab3c54ca9b4fc639c8ff38cf1a842a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13aa86008ab3c54ca9b4fc639c8ff38cf1a842a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34115d040b43d9a0dcc313c6282520a86d1e6f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34115d040b43d9a0dcc313c6282520a86d1e6f61", "html_url": "https://github.com/rust-lang/rust/commit/34115d040b43d9a0dcc313c6282520a86d1e6f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34115d040b43d9a0dcc313c6282520a86d1e6f61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75aab045fc476f176a58c408f6b06f0e275c6e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75aab045fc476f176a58c408f6b06f0e275c6e1", "html_url": "https://github.com/rust-lang/rust/commit/e75aab045fc476f176a58c408f6b06f0e275c6e1"}, {"sha": "70c04a2fd1738ece290631c53c59616c30febdf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c04a2fd1738ece290631c53c59616c30febdf9", "html_url": "https://github.com/rust-lang/rust/commit/70c04a2fd1738ece290631c53c59616c30febdf9"}], "stats": {"total": 2487, "additions": 1787, "deletions": 700}, "files": [{"sha": "86cae5d09b5aa3941dc8b81e9ed772530e5cd5ea", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1557,7 +1557,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n \n         let mut err = self.temporary_value_borrowed_for_too_long(proper_span);\n-        err.span_label(proper_span, \"creates a temporary which is freed while still in use\");\n+        err.span_label(proper_span, \"creates a temporary value which is freed while still in use\");\n         err.span_label(drop_span, \"temporary value is freed at the end of this statement\");\n \n         match explanation {"}, {"sha": "4a4887f19702f91149c053108308eaf0333c77d0", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -18,6 +18,7 @@ extern crate tracing;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n+use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -129,6 +130,19 @@ fn mir_borrowck<'tcx>(\n ) -> &'tcx BorrowCheckResult<'tcx> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.did.to_def_id()));\n+\n+    if input_body.borrow().should_skip() {\n+        debug!(\"Skipping borrowck because of injected body\");\n+        // Let's make up a borrowck result! Fun times!\n+        let result = BorrowCheckResult {\n+            concrete_opaque_types: VecMap::new(),\n+            closure_requirements: None,\n+            used_mut_upvars: SmallVec::new(),\n+            tainted_by_errors: None,\n+        };\n+        return tcx.arena.alloc(result);\n+    }\n+\n     let hir_owner = tcx.hir().local_def_id_to_hir_id(def.did).owner;\n \n     let infcx ="}, {"sha": "2ba012a77b0a908788f0272705f82f7c875cb1a7", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -59,7 +59,7 @@ impl DebugContext {\n \n         let producer = format!(\n             \"cg_clif (rustc {}, cranelift {})\",\n-            rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n+            rustc_interface::util::rustc_version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n         let comp_dir = tcx"}, {"sha": "a8b47633519aabc39689ab19a7138c269b11440c", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -12,6 +12,7 @@ use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType, StackProtec\n use smallvec::SmallVec;\n \n use crate::attributes;\n+use crate::errors::{MissingFeatures, SanitizerMemtagRequiresMte, TargetFeatureDisableOrEnable};\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, AllocKindFlags, Attribute, AttributeKind, AttributePlace, MemoryEffects};\n use crate::llvm_util;\n@@ -82,7 +83,7 @@ pub fn sanitize_attrs<'ll>(\n         let mte_feature =\n             features.iter().map(|s| &s[..]).rfind(|n| [\"+mte\", \"-mte\"].contains(&&n[..]));\n         if let None | Some(\"-mte\") = mte_feature {\n-            cx.tcx.sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+            cx.tcx.sess.emit_err(SanitizerMemtagRequiresMte);\n         }\n \n         attrs.push(llvm::AttributeKind::SanitizeMemTag.create_attr(cx.llcx));\n@@ -393,13 +394,14 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n             .get_attrs(instance.def_id(), sym::target_feature)\n             .next()\n             .map_or_else(|| cx.tcx.def_span(instance.def_id()), |a| a.span);\n-        let msg = format!(\n-            \"the target features {} must all be either enabled or disabled together\",\n-            f.join(\", \")\n-        );\n-        let mut err = cx.tcx.sess.struct_span_err(span, &msg);\n-        err.help(\"add the missing features in a `target_feature` attribute\");\n-        err.emit();\n+        cx.tcx\n+            .sess\n+            .create_err(TargetFeatureDisableOrEnable {\n+                features: f,\n+                span: Some(span),\n+                missing_features: Some(MissingFeatures),\n+            })\n+            .emit();\n         return;\n     }\n "}, {"sha": "5c68abeb08baf288532e48c162926b39f92fce26", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -12,6 +12,10 @@ use std::str;\n use object::read::macho::FatArch;\n \n use crate::common;\n+use crate::errors::{\n+    ArchiveBuildFailure, DlltoolFailImportLibrary, ErrorCallingDllTool, ErrorCreatingImportLibrary,\n+    ErrorWritingDEFFile, UnknownArchiveKind,\n+};\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n@@ -147,7 +151,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     fn build(mut self: Box<Self>, output: &Path) -> bool {\n         match self.build_with_llvm(output) {\n             Ok(any_members) => any_members,\n-            Err(e) => self.sess.fatal(&format!(\"failed to build archive: {}\", e)),\n+            Err(e) => self.sess.emit_fatal(ArchiveBuildFailure { error: e }),\n         }\n     }\n }\n@@ -217,7 +221,7 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             match std::fs::write(&def_file_path, def_file_content) {\n                 Ok(_) => {}\n                 Err(e) => {\n-                    sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                    sess.emit_fatal(ErrorWritingDEFFile { error: e });\n                 }\n             };\n \n@@ -239,13 +243,14 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n \n             match result {\n                 Err(e) => {\n-                    sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n+                    sess.emit_fatal(ErrorCallingDllTool { error: e });\n+                }\n+                Ok(output) if !output.status.success() => {\n+                    sess.emit_fatal(DlltoolFailImportLibrary {\n+                        stdout: String::from_utf8_lossy(&output.stdout),\n+                        stderr: String::from_utf8_lossy(&output.stderr),\n+                    })\n                 }\n-                Ok(output) if !output.status.success() => sess.fatal(&format!(\n-                    \"Dlltool could not create import library: {}\\n{}\",\n-                    String::from_utf8_lossy(&output.stdout),\n-                    String::from_utf8_lossy(&output.stderr)\n-                )),\n                 _ => {}\n             }\n         } else {\n@@ -293,11 +298,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             };\n \n             if result == crate::llvm::LLVMRustResult::Failure {\n-                sess.fatal(&format!(\n-                    \"Error creating import library for {}: {}\",\n+                sess.emit_fatal(ErrorCreatingImportLibrary {\n                     lib_name,\n-                    llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n-                ));\n+                    error: llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string()),\n+                });\n             }\n         };\n \n@@ -308,9 +312,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n impl<'a> LlvmArchiveBuilder<'a> {\n     fn build_with_llvm(&mut self, output: &Path) -> io::Result<bool> {\n         let kind = &*self.sess.target.archive_format;\n-        let kind = kind.parse::<ArchiveKind>().map_err(|_| kind).unwrap_or_else(|kind| {\n-            self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n-        });\n+        let kind = kind\n+            .parse::<ArchiveKind>()\n+            .map_err(|_| kind)\n+            .unwrap_or_else(|kind| self.sess.emit_fatal(UnknownArchiveKind { kind }));\n \n         let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();"}, {"sha": "3fa21355b7f4c9b46349591904aac80717541976", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,5 @@\n use crate::back::write::{self, save_temp_bitcode, DiagnosticHandlers};\n+use crate::errors::DynamicLinkingWithLTO;\n use crate::llvm::{self, build_string};\n use crate::{LlvmCodegenBackend, ModuleLlvm};\n use object::read::archive::ArchiveFile;\n@@ -90,13 +91,7 @@ fn prepare_lto(\n         }\n \n         if cgcx.opts.cg.prefer_dynamic && !cgcx.opts.unstable_opts.dylib_lto {\n-            diag_handler\n-                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n-                .note(\n-                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n-                               supported with LTO\",\n-                )\n-                .emit();\n+            diag_handler.emit_err(DynamicLinkingWithLTO);\n             return Err(FatalError);\n         }\n "}, {"sha": "3b504d3a7df7589fc7f13a0027584d4cb51d6638", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,6 +1,7 @@\n use crate::base;\n use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n+use crate::errors::{InvalidMinimumAlignment, LinkageConstOrMutType, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -146,7 +147,7 @@ fn set_global_alignment<'ll>(cx: &CodegenCx<'ll, '_>, gv: &'ll Value, mut align:\n         match Align::from_bits(min) {\n             Ok(min) => align = align.max(min),\n             Err(err) => {\n-                cx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n+                cx.sess().emit_err(InvalidMinimumAlignment { err });\n             }\n         }\n     }\n@@ -174,10 +175,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n         let llty2 = if let ty::RawPtr(ref mt) = ty.kind() {\n             cx.layout_of(mt.ty).llvm_type(cx)\n         } else {\n-            cx.sess().span_fatal(\n-                cx.tcx.def_span(def_id),\n-                \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\",\n-            )\n+            cx.sess().emit_fatal(LinkageConstOrMutType { span: cx.tcx.def_span(def_id) })\n         };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n@@ -193,10 +191,10 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n             let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n             real_name.push_str(sym);\n             let g2 = cx.define_global(&real_name, llty).unwrap_or_else(|| {\n-                cx.sess().span_fatal(\n-                    cx.tcx.def_span(def_id),\n-                    &format!(\"symbol `{}` is already defined\", &sym),\n-                )\n+                cx.sess().emit_fatal(SymbolAlreadyDefined {\n+                    span: cx.tcx.def_span(def_id),\n+                    symbol_name: sym,\n+                })\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n             llvm::LLVMSetInitializer(g2, g1);"}, {"sha": "eaa2ccfc835c5f2564a58d53ff9522d87e3320e7", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -3,6 +3,7 @@ use crate::back::write::to_llvm_code_model;\n use crate::callee::get_fn;\n use crate::coverageinfo;\n use crate::debuginfo;\n+use crate::errors::BranchProtectionRequiresAArch64;\n use crate::llvm;\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -26,6 +27,7 @@ use rustc_session::config::{BranchProtection, CFGuard, CFProtection};\n use rustc_session::config::{CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n+use rustc_span::source_map::Spanned;\n use rustc_target::abi::{\n     call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx,\n };\n@@ -275,7 +277,7 @@ pub unsafe fn create_module<'ll>(\n \n     if let Some(BranchProtection { bti, pac_ret }) = sess.opts.unstable_opts.branch_protection {\n         if sess.target.arch != \"aarch64\" {\n-            sess.err(\"-Zbranch-protection is only supported on aarch64\");\n+            sess.emit_err(BranchProtectionRequiresAArch64);\n         } else {\n             llvm::LLVMRustAddModuleFlag(\n                 llmod,\n@@ -951,7 +953,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'_, 'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let LayoutError::SizeOverflow(_) = err {\n-            self.sess().span_fatal(span, &err.to_string())\n+            self.sess().emit_fatal(Spanned { span, node: err })\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n         }\n@@ -969,7 +971,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'_, 'tcx> {\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-            self.sess().span_fatal(span, &err.to_string())\n+            self.sess().emit_fatal(Spanned { span, node: err })\n         } else {\n             match fn_abi_request {\n                 FnAbiRequest::OfFnPtr { sig, extra_args } => {"}, {"sha": "8a8d889a29865960e9c1337873d5ab54879b783e", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,5 +1,6 @@\n use crate::common::CodegenCx;\n use crate::coverageinfo;\n+use crate::errors::InstrumentCoverageRequiresLLVM12;\n use crate::llvm;\n \n use llvm::coverageinfo::CounterMappingRegion;\n@@ -37,7 +38,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     // LLVM 12.\n     let version = coverageinfo::mapping_version();\n     if version < 4 {\n-        tcx.sess.fatal(\"rustc option `-C instrument-coverage` requires LLVM 12 or higher.\");\n+        tcx.sess.emit_fatal(InstrumentCoverageRequiresLLVM12);\n     }\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());"}, {"sha": "0fafc214f2f5ebdc6144ff8dbd8f154d3a3b2814", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,139 @@\n+use std::borrow::Cow;\n+\n+use rustc_errors::fluent;\n+use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::Handler;\n+use rustc_errors::IntoDiagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_span::Span;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature_prefix)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeaturePrefix<'a> {\n+    pub feature: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_ctarget_feature)]\n+#[note]\n+pub(crate) struct UnknownCTargetFeature<'a> {\n+    pub feature: &'a str,\n+    #[subdiagnostic]\n+    pub rust_feature: PossibleFeature<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum PossibleFeature<'a> {\n+    #[help(possible_feature)]\n+    Some { rust_feature: &'a str },\n+    #[help(consider_filing_feature_request)]\n+    None,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_creating_import_library)]\n+pub(crate) struct ErrorCreatingImportLibrary<'a> {\n+    pub lib_name: &'a str,\n+    pub error: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_instrument_coverage_requires_llvm_12)]\n+pub(crate) struct InstrumentCoverageRequiresLLVM12;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_symbol_already_defined)]\n+pub(crate) struct SymbolAlreadyDefined<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub symbol_name: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_branch_protection_requires_aarch64)]\n+pub(crate) struct BranchProtectionRequiresAArch64;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_invalid_minimum_alignment)]\n+pub(crate) struct InvalidMinimumAlignment {\n+    pub err: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_linkage_const_or_mut_type)]\n+pub(crate) struct LinkageConstOrMutType {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_sanitizer_memtag_requires_mte)]\n+pub(crate) struct SanitizerMemtagRequiresMte;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_archive_build_failure)]\n+pub(crate) struct ArchiveBuildFailure {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_writing_def_file)]\n+pub(crate) struct ErrorWritingDEFFile {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_error_calling_dlltool)]\n+pub(crate) struct ErrorCallingDllTool {\n+    pub error: std::io::Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_dlltool_fail_import_library)]\n+pub(crate) struct DlltoolFailImportLibrary<'a> {\n+    pub stdout: Cow<'a, str>,\n+    pub stderr: Cow<'a, str>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_unknown_archive_kind)]\n+pub(crate) struct UnknownArchiveKind<'a> {\n+    pub kind: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_dynamic_linking_with_lto)]\n+#[note]\n+pub(crate) struct DynamicLinkingWithLTO;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_llvm_fail_parsing_target_machine_config_to_target_machine)]\n+pub(crate) struct FailParsingTargetMachineConfigToTargetMachine {\n+    pub error: String,\n+}\n+\n+pub(crate) struct TargetFeatureDisableOrEnable<'a> {\n+    pub features: &'a [&'a str],\n+    pub span: Option<Span>,\n+    pub missing_features: Option<MissingFeatures>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(codegen_llvm_missing_features)]\n+pub(crate) struct MissingFeatures;\n+\n+impl IntoDiagnostic<'_, ErrorGuaranteed> for TargetFeatureDisableOrEnable<'_> {\n+    fn into_diagnostic(self, sess: &'_ Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::codegen_llvm_target_feature_disable_or_enable);\n+        if let Some(span) = self.span {\n+            diag.set_span(span);\n+        };\n+        if let Some(missing_features) = self.missing_features {\n+            diag.subdiagnostic(missing_features);\n+        }\n+        diag.set_arg(\"features\", self.features.join(\", \"));\n+        diag\n+    }\n+}"}, {"sha": "246e82545c874811fa6552bc2286da98bc113476", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -12,6 +12,8 @@\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -20,6 +22,7 @@ extern crate tracing;\n \n use back::write::{create_informational_target_machine, create_target_machine};\n \n+use errors::FailParsingTargetMachineConfigToTargetMachine;\n pub use llvm_util::target_features;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n@@ -62,6 +65,7 @@ mod context;\n mod coverageinfo;\n mod debuginfo;\n mod declare;\n+mod errors;\n mod intrinsic;\n \n // The following is a work around that replaces `pub mod llvm;` and that fixes issue 53912.\n@@ -412,7 +416,7 @@ impl ModuleLlvm {\n             let tm = match (cgcx.tm_factory)(tm_factory_config) {\n                 Ok(m) => m,\n                 Err(e) => {\n-                    handler.struct_err(&e).emit();\n+                    handler.emit_err(FailParsingTargetMachineConfigToTargetMachine { error: e });\n                     return Err(FatalError);\n                 }\n             };"}, {"sha": "e1f54356228d3ea60163ec928322caf5d82fbc88", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,8 @@\n use crate::back::write::create_informational_target_machine;\n+use crate::errors::{\n+    PossibleFeature, TargetFeatureDisableOrEnable, UnknownCTargetFeature,\n+    UnknownCTargetFeaturePrefix,\n+};\n use crate::llvm;\n use libc::c_int;\n use rustc_codegen_ssa::target_features::{\n@@ -434,12 +438,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                 Some(c @ '+' | c @ '-') => c,\n                 Some(_) => {\n                     if diagnostics {\n-                        let mut diag = sess.struct_warn(&format!(\n-                            \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n-                            s\n-                        ));\n-                        diag.note(\"features must begin with a `+` to enable or `-` to disable it\");\n-                        diag.emit();\n+                        sess.emit_warning(UnknownCTargetFeaturePrefix { feature: s });\n                     }\n                     return None;\n                 }\n@@ -456,17 +455,15 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n                         None\n                     }\n                 });\n-                let mut diag = sess.struct_warn(&format!(\n-                    \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n-                    feature\n-                ));\n-                diag.note(\"it is still passed through to the codegen backend\");\n-                if let Some(rust_feature) = rust_feature {\n-                    diag.help(&format!(\"you might have meant: `{}`\", rust_feature));\n+                let unknown_feature = if let Some(rust_feature) = rust_feature {\n+                    UnknownCTargetFeature {\n+                        feature,\n+                        rust_feature: PossibleFeature::Some { rust_feature },\n+                    }\n                 } else {\n-                    diag.note(\"consider filing a feature request\");\n-                }\n-                diag.emit();\n+                    UnknownCTargetFeature { feature, rust_feature: PossibleFeature::None }\n+                };\n+                sess.emit_warning(unknown_feature);\n             }\n \n             if diagnostics {\n@@ -492,10 +489,11 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n     features.extend(feats);\n \n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n-        sess.err(&format!(\n-            \"target features {} must all be enabled or disabled together\",\n-            f.join(\", \")\n-        ));\n+        sess.emit_err(TargetFeatureDisableOrEnable {\n+            features: f,\n+            span: None,\n+            missing_features: None,\n+        });\n     }\n \n     features"}, {"sha": "76f692b2016fd5ff64d4824206b856fc12811969", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,6 +1,7 @@\n use crate::attributes;\n use crate::base;\n use crate::context::CodegenCx;\n+use crate::errors::SymbolAlreadyDefined;\n use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use rustc_codegen_ssa::traits::*;\n@@ -25,10 +26,8 @@ impl<'tcx> PreDefineMethods<'tcx> for CodegenCx<'_, 'tcx> {\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {\n-            self.sess().span_fatal(\n-                self.tcx.def_span(def_id),\n-                &format!(\"symbol `{}` is already defined\", symbol_name),\n-            )\n+            self.sess()\n+                .emit_fatal(SymbolAlreadyDefined { span: self.tcx.def_span(def_id), symbol_name })\n         });\n \n         unsafe {"}, {"sha": "e3d28a1aca20eacfc1dc08ad628a58bb06b0d1a8", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -15,10 +15,8 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n-use rustc_errors::{\n-    translation::{to_fluent_args, Translate},\n-    DiagnosticId, FatalError, Handler, Level,\n-};\n+use rustc_errors::{translation::Translate, DiagnosticId, FatalError, Handler, Level};\n+use rustc_errors::{DiagnosticMessage, Style};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n@@ -38,6 +36,7 @@ use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n use rustc_target::spec::{MergeFunctions, SanitizerSet};\n \n use std::any::Any;\n+use std::borrow::Cow;\n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n@@ -969,8 +968,11 @@ pub enum Message<B: WriteBackendMethods> {\n     CodegenAborted,\n }\n \n+type DiagnosticArgName<'source> = Cow<'source, str>;\n+\n struct Diagnostic {\n-    msg: String,\n+    msg: Vec<(DiagnosticMessage, Style)>,\n+    args: FxHashMap<DiagnosticArgName<'static>, rustc_errors::DiagnosticArgValue<'static>>,\n     code: Option<DiagnosticId>,\n     lvl: Level,\n }\n@@ -1743,15 +1745,18 @@ impl Translate for SharedEmitter {\n \n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n-        let fluent_args = to_fluent_args(diag.args());\n+        let args: FxHashMap<Cow<'_, str>, rustc_errors::DiagnosticArgValue<'_>> =\n+            diag.args().map(|(name, arg)| (name.clone(), arg.clone())).collect();\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-            msg: self.translate_messages(&diag.message, &fluent_args).to_string(),\n+            msg: diag.message.clone(),\n+            args: args.clone(),\n             code: diag.code.clone(),\n             lvl: diag.level(),\n         })));\n         for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-                msg: self.translate_messages(&child.message, &fluent_args).to_string(),\n+                msg: child.message.clone(),\n+                args: args.clone(),\n                 code: None,\n                 lvl: child.level,\n             })));\n@@ -1782,10 +1787,11 @@ impl SharedEmitterMain {\n             match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n-                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, &diag.msg);\n+                    let mut d = rustc_errors::Diagnostic::new_with_messages(diag.lvl, diag.msg);\n                     if let Some(code) = diag.code {\n                         d.code(code);\n                     }\n+                    d.replace_args(diag.args);\n                     handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {"}, {"sha": "e043368fdfe0210ae475bd7b151310538ba099cc", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -6,6 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(once_cell)]\n+#![feature(decl_macro)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n@@ -753,20 +754,41 @@ fn print_crate_info(\n }\n \n /// Prints version information\n-pub fn version(binary: &str, matches: &getopts::Matches) {\n+///\n+/// NOTE: this is a macro to support drivers built at a different time than the main `rustc_driver` crate.\n+pub macro version($binary: literal, $matches: expr) {\n+    fn unw(x: Option<&str>) -> &str {\n+        x.unwrap_or(\"unknown\")\n+    }\n+    $crate::version_at_macro_invocation(\n+        $binary,\n+        $matches,\n+        unw(option_env!(\"CFG_VERSION\")),\n+        unw(option_env!(\"CFG_VER_HASH\")),\n+        unw(option_env!(\"CFG_VER_DATE\")),\n+        unw(option_env!(\"CFG_RELEASE\")),\n+    )\n+}\n+\n+#[doc(hidden)] // use the macro instead\n+pub fn version_at_macro_invocation(\n+    binary: &str,\n+    matches: &getopts::Matches,\n+    version: &str,\n+    commit_hash: &str,\n+    commit_date: &str,\n+    release: &str,\n+) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{} {}\", binary, util::version_str().unwrap_or(\"unknown version\"));\n+    println!(\"{} {}\", binary, version);\n \n     if verbose {\n-        fn unw(x: Option<&str>) -> &str {\n-            x.unwrap_or(\"unknown\")\n-        }\n         println!(\"binary: {}\", binary);\n-        println!(\"commit-hash: {}\", unw(util::commit_hash_str()));\n-        println!(\"commit-date: {}\", unw(util::commit_date_str()));\n+        println!(\"commit-hash: {}\", commit_hash);\n+        println!(\"commit-date: {}\", commit_date);\n         println!(\"host: {}\", config::host_triple());\n-        println!(\"release: {}\", unw(util::release_str()));\n+        println!(\"release: {}\", release);\n \n         let debug_flags = matches.opt_strs(\"Z\");\n         let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n@@ -1082,7 +1104,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if matches.opt_present(\"version\") {\n-        version(\"rustc\", &matches);\n+        version!(\"rustc\", &matches);\n         return None;\n     }\n \n@@ -1227,7 +1249,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n         format!(\n             \"rustc {} running on {}\",\n-            util::version_str().unwrap_or(\"unknown_version\"),\n+            util::version_str!().unwrap_or(\"unknown_version\"),\n             config::host_triple()\n         )\n         .into(),"}, {"sha": "68a205df6c7ad05207b41617b23b8defd7dab31c", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,58 @@\n+codegen_llvm_unknown_ctarget_feature =\n+    unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = it is still passed through to the codegen backend\n+    .possible_feature = you might have meant: `{$rust_feature}`\n+    .consider_filing_feature_request = consider filing a feature request\n+\n+codegen_llvm_unknown_ctarget_feature_prefix =\n+    unknown feature specified for `-Ctarget-feature`: `{$feature}`\n+    .note = features must begin with a `+` to enable or `-` to disable it\n+\n+codegen_llvm_error_creating_import_library =\n+    Error creating import library for {$lib_name}: {$error}\n+\n+codegen_llvm_instrument_coverage_requires_llvm_12 =\n+    rustc option `-C instrument-coverage` requires LLVM 12 or higher.\n+\n+codegen_llvm_symbol_already_defined =\n+    symbol `{$symbol_name}` is already defined\n+\n+codegen_llvm_branch_protection_requires_aarch64 =\n+    -Zbranch-protection is only supported on aarch64\n+\n+codegen_llvm_invalid_minimum_alignment =\n+    invalid minimum global alignment: {$err}\n+\n+codegen_llvm_linkage_const_or_mut_type =\n+    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+\n+codegen_llvm_sanitizer_memtag_requires_mte =\n+    `-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\n+\n+codegen_llvm_archive_build_failure =\n+    failed to build archive: {$error}\n+\n+codegen_llvm_error_writing_def_file =\n+    Error writing .DEF file: {$error}\n+\n+codegen_llvm_error_calling_dlltool =\n+    Error calling dlltool: {$error}\n+\n+codegen_llvm_dlltool_fail_import_library =\n+    Dlltool could not create import library: {$stdout}\\n{$stderr}\n+\n+codegen_llvm_unknown_archive_kind =\n+    Don't know how to build archive of type: {$kind}\n+\n+codegen_llvm_target_feature_disable_or_enable =\n+    the target features {$features} must all be either enabled or disabled together\n+\n+codegen_llvm_missing_features =\n+    add the missing features in a `target_feature` attribute\n+\n+codegen_llvm_dynamic_linking_with_lto =\n+    cannot prefer dynamic linking when performing LTO\n+    .note = only 'staticlib', 'bin', and 'cdylib' outputs are supported with LTO\n+\n+codegen_llvm_fail_parsing_target_machine_config_to_target_machine =\n+    failed to parse target machine config to target machine: {$error}"}, {"sha": "e34acba105776e461e74a5fb26031baec679f729", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -42,6 +42,7 @@ fluent_messages! {\n     borrowck => \"../locales/en-US/borrowck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n     codegen_gcc => \"../locales/en-US/codegen_gcc.ftl\",\n+    codegen_llvm => \"../locales/en-US/codegen_llvm.ftl\",\n     codegen_ssa => \"../locales/en-US/codegen_ssa.ftl\",\n     compiletest => \"../locales/en-US/compiletest.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\","}, {"sha": "43101bbb9d31cf3de2fda20e7824592fa39e51c6", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -44,6 +44,15 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+impl<'source> IntoDiagnosticArg for DiagnosticArgValue<'source> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        match self {\n+            DiagnosticArgValue::Str(s) => DiagnosticArgValue::Str(Cow::Owned(s.into_owned())),\n+            DiagnosticArgValue::Number(n) => DiagnosticArgValue::Number(n),\n+        }\n+    }\n+}\n+\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {\n@@ -204,6 +213,22 @@ impl Diagnostic {\n         Diagnostic::new_with_code(level, None, message)\n     }\n \n+    #[track_caller]\n+    pub fn new_with_messages(level: Level, messages: Vec<(DiagnosticMessage, Style)>) -> Self {\n+        Diagnostic {\n+            level,\n+            message: messages,\n+            code: None,\n+            span: MultiSpan::new(),\n+            children: vec![],\n+            suggestions: Ok(vec![]),\n+            args: Default::default(),\n+            sort_span: DUMMY_SP,\n+            is_lint: false,\n+            emitted_at: DiagnosticLocation::caller(),\n+        }\n+    }\n+\n     #[track_caller]\n     pub fn new_with_code<M: Into<DiagnosticMessage>>(\n         level: Level,\n@@ -931,6 +956,13 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn replace_args(\n+        &mut self,\n+        args: FxHashMap<DiagnosticArgName<'static>, DiagnosticArgValue<'static>>,\n+    ) {\n+        self.args = args;\n+    }\n+\n     pub fn styled_message(&self) -> &[(DiagnosticMessage, Style)] {\n         &self.message\n     }"}, {"sha": "c6035705e39fa70d2022800fee8d488c82fb115b", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -107,6 +107,12 @@ impl IntoDiagnosticArg for String {\n     }\n }\n \n+impl<'a> IntoDiagnosticArg for Cow<'a, str> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self.into_owned()))\n+    }\n+}\n+\n impl<'a> IntoDiagnosticArg for &'a Path {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(Cow::Owned(self.display().to_string()))"}, {"sha": "e94e038f9283b701a2d73d2481329b772ecf4ea1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -152,6 +152,8 @@ declare_features! (\n     (active, anonymous_lifetime_in_impl_trait, \"1.63.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n+    /// Allows writing custom MIR\n+    (active, custom_mir, \"1.65.0\", None, None),\n     /// Outputs useful `assert!` messages\n     (active, generic_assert, \"1.63.0\", None, None),\n     /// Allows using the `rust-intrinsic`'s \"ABI\"."}, {"sha": "dc3a74956843eb86c36f5b7e3dff6d0d33027ade", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -810,6 +810,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_def_path, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_mir, Normal, template!(List: \"arg1, arg2, ...\"), DuplicatesOk),\n+    gated!(\n+        custom_mir, Normal, template!(List: r#\"dialect = \"...\", phase = \"...\"\"#),\n+        ErrorFollowing, \"the `#[custom_mir]` attribute is just used for the Rust test suite\",\n+    ),\n     rustc_attr!(TEST, rustc_dump_program_clauses, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_dump_env_program_clauses, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_object_lifetime_default, Normal, template!(Word), WarnFollowing),"}, {"sha": "8a70f41c8a840e0576a9e35232fa0a1511fccf84", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1708,8 +1708,7 @@ fn receiver_is_valid<'tcx>(\n         return true;\n     }\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty, span);\n+    let mut autoderef = Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty);\n \n     // The `arbitrary_self_types` feature allows raw pointer receivers like `self: *const Self`.\n     if arbitrary_self_types_enabled {"}, {"sha": "41b52a4c4a9fcb2901c2f26a1562e65faae1a7b3", "filename": "compiler/rustc_hir_typeck/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -12,18 +12,7 @@ use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn autoderef(&'a self, span: Span, base_ty: Ty<'tcx>) -> Autoderef<'a, 'tcx> {\n-        Autoderef::new(self, self.param_env, self.body_id, span, base_ty, span)\n-    }\n-\n-    /// Like `autoderef`, but provides a custom `Span` to use for calls to\n-    /// an overloaded `Deref` operator\n-    pub fn autoderef_overloaded_span(\n-        &'a self,\n-        span: Span,\n-        base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n-    ) -> Autoderef<'a, 'tcx> {\n-        Autoderef::new(self, self.param_env, self.body_id, span, base_ty, overloaded_span)\n+        Autoderef::new(self, self.param_env, self.body_id, span, base_ty)\n     }\n \n     pub fn try_overloaded_deref(\n@@ -55,11 +44,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         |InferOk { value: method, obligations: o }| {\n                             obligations.extend(o);\n                             if let ty::Ref(region, _, mutbl) = *method.sig.output().kind() {\n-                                Some(OverloadedDeref {\n-                                    region,\n-                                    mutbl,\n-                                    span: autoderef.overloaded_span(),\n-                                })\n+                                Some(OverloadedDeref { region, mutbl, span: autoderef.span() })\n                             } else {\n                                 None\n                             }"}, {"sha": "d996d6ec610bae81c64789c6f9d8d676f1c309ed", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -151,8 +151,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         // Commit the autoderefs by calling `autoderef` again, but this\n         // time writing the results into the various typeck results.\n-        let mut autoderef =\n-            self.autoderef_overloaded_span(self.span, unadjusted_self_ty, self.call_expr.span);\n+        let mut autoderef = self.autoderef(self.call_expr.span, unadjusted_self_ty);\n         let Some((ty, n)) = autoderef.nth(pick.autoderefs) else {\n             return self.tcx.ty_error_with_message(\n                 rustc_span::DUMMY_SP,"}, {"sha": "3fcd073f5979300fd1d50713b2f196c4c5c797ad", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -475,10 +475,9 @@ fn method_autoderef_steps<'tcx>(\n     let (ref infcx, goal, inference_vars) = tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &goal);\n     let ParamEnvAnd { param_env, value: self_ty } = goal;\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty, DUMMY_SP)\n-            .include_raw_pointers()\n-            .silence_errors();\n+    let mut autoderef = Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty)\n+        .include_raw_pointers()\n+        .silence_errors();\n     let mut reached_raw_pointer = false;\n     let mut steps: Vec<_> = autoderef\n         .by_ref()"}, {"sha": "eb10f3e2c107f8f943b9d17c30cd8238b5fc9d8f", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -19,7 +19,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, DUMMY_SP};\n-use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n \n@@ -2132,7 +2131,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let ty::Array(..) | ty::Slice(..) = ty.kind()\n         {\n             err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n-        } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n+        } else if self.autoderef(span, expected_ty)\n             .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n             && let (Some(span), true) = (ti.span, ti.origin_expr)\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)"}, {"sha": "542b638bbd7a40dcb5596aca193092332b93a811", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,5 @@\n #![feature(box_patterns)]\n+#![feature(decl_macro)]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(once_cell)]"}, {"sha": "2fe3fb2fa5668013978287aa75086ea0d42480ce", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -327,7 +327,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n     let mut file: Option<PathBuf> = None;\n \n     let expected_names = &[\n-        format!(\"rustc_codegen_{}-{}\", backend_name, release_str().expect(\"CFG_RELEASE\")),\n+        format!(\"rustc_codegen_{}-{}\", backend_name, env!(\"CFG_RELEASE\")),\n         format!(\"rustc_codegen_{}\", backend_name),\n     ];\n     for entry in d.filter_map(|e| e.ok()) {\n@@ -554,22 +554,12 @@ pub fn build_output_filenames(\n     }\n }\n \n-/// Returns a version string such as \"1.46.0 (04488afe3 2020-08-24)\"\n-pub fn version_str() -> Option<&'static str> {\n+/// Returns a version string such as \"1.46.0 (04488afe3 2020-08-24)\" when invoked by an in-tree tool.\n+pub macro version_str() {\n     option_env!(\"CFG_VERSION\")\n }\n \n-/// Returns a version string such as \"0.12.0-dev\".\n-pub fn release_str() -> Option<&'static str> {\n-    option_env!(\"CFG_RELEASE\")\n-}\n-\n-/// Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built.\n-pub fn commit_hash_str() -> Option<&'static str> {\n-    option_env!(\"CFG_VER_HASH\")\n-}\n-\n-/// Returns the \"commit date\" of HEAD of the Git repo from which rustc was built as a static string.\n-pub fn commit_date_str() -> Option<&'static str> {\n-    option_env!(\"CFG_VER_DATE\")\n+/// Returns the version string for `rustc` itself (which may be different from a tool version).\n+pub fn rustc_version_str() -> Option<&'static str> {\n+    version_str!()\n }"}, {"sha": "5290d5aae46cace29409d3701790972ce37b4810", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -138,6 +138,48 @@ impl MirPhase {\n             }\n         }\n     }\n+\n+    /// Parses an `MirPhase` from a pair of strings. Panics if this isn't possible for any reason.\n+    pub fn parse(dialect: String, phase: Option<String>) -> Self {\n+        match &*dialect.to_ascii_lowercase() {\n+            \"built\" => {\n+                assert!(phase.is_none(), \"Cannot specify a phase for `Built` MIR\");\n+                MirPhase::Built\n+            }\n+            \"analysis\" => Self::Analysis(AnalysisPhase::parse(phase)),\n+            \"runtime\" => Self::Runtime(RuntimePhase::parse(phase)),\n+            _ => panic!(\"Unknown MIR dialect {}\", dialect),\n+        }\n+    }\n+}\n+\n+impl AnalysisPhase {\n+    pub fn parse(phase: Option<String>) -> Self {\n+        let Some(phase) = phase else {\n+            return Self::Initial;\n+        };\n+\n+        match &*phase.to_ascii_lowercase() {\n+            \"initial\" => Self::Initial,\n+            \"post_cleanup\" | \"post-cleanup\" | \"postcleanup\" => Self::PostCleanup,\n+            _ => panic!(\"Unknown analysis phase {}\", phase),\n+        }\n+    }\n+}\n+\n+impl RuntimePhase {\n+    pub fn parse(phase: Option<String>) -> Self {\n+        let Some(phase) = phase else {\n+            return Self::Initial;\n+        };\n+\n+        match &*phase.to_ascii_lowercase() {\n+            \"initial\" => Self::Initial,\n+            \"post_cleanup\" | \"post-cleanup\" | \"postcleanup\" => Self::PostCleanup,\n+            \"optimized\" => Self::Optimized,\n+            _ => panic!(\"Unknown runtime phase {}\", phase),\n+        }\n+    }\n }\n \n impl Display for MirPhase {\n@@ -293,6 +335,13 @@ pub struct Body<'tcx> {\n     /// potentially allow things like `[u8; std::mem::size_of::<T>() * 0]` due to this.\n     pub is_polymorphic: bool,\n \n+    /// The phase at which this MIR should be \"injected\" into the compilation process.\n+    ///\n+    /// Everything that comes before this `MirPhase` should be skipped.\n+    ///\n+    /// This is only `Some` if the function that this body comes from was annotated with `rustc_custom_mir`.\n+    pub injection_phase: Option<MirPhase>,\n+\n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n@@ -339,6 +388,7 @@ impl<'tcx> Body<'tcx> {\n             span,\n             required_consts: Vec::new(),\n             is_polymorphic: false,\n+            injection_phase: None,\n             tainted_by_errors,\n         };\n         body.is_polymorphic = body.has_non_region_param();\n@@ -366,6 +416,7 @@ impl<'tcx> Body<'tcx> {\n             required_consts: Vec::new(),\n             var_debug_info: Vec::new(),\n             is_polymorphic: false,\n+            injection_phase: None,\n             tainted_by_errors: None,\n         };\n         body.is_polymorphic = body.has_non_region_param();\n@@ -508,6 +559,14 @@ impl<'tcx> Body<'tcx> {\n     pub fn generator_kind(&self) -> Option<GeneratorKind> {\n         self.generator.as_ref().map(|generator| generator.generator_kind)\n     }\n+\n+    #[inline]\n+    pub fn should_skip(&self) -> bool {\n+        let Some(injection_phase) = self.injection_phase else {\n+            return false;\n+        };\n+        injection_phase > self.phase\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "c74d6bc3774a2d19030b27fc481a6d363b85cb02", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -189,8 +189,8 @@ pub enum LayoutError<'tcx> {\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n }\n \n-impl<'a> IntoDiagnostic<'a, !> for LayoutError<'a> {\n-    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, !> {\n+impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag = handler.struct_fatal(\"\");\n \n         match self {\n@@ -1126,8 +1126,8 @@ impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     }\n }\n \n-impl<'tcx> IntoDiagnostic<'tcx, !> for FnAbiError<'tcx> {\n-    fn into_diagnostic(self, handler: &'tcx Handler) -> DiagnosticBuilder<'tcx, !> {\n+impl IntoDiagnostic<'_, !> for FnAbiError<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         handler.struct_fatal(self.to_string())\n     }\n }"}, {"sha": "68d8766c9073414e507e011887a0cfd5af63785e", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,155 @@\n+//! Provides the implementation of the `custom_mir` attribute.\n+//!\n+//! Up until MIR building, this attribute has absolutely no effect. The `mir!` macro is a normal\n+//! decl macro that expands like any other, and the code goes through parsing, name resolution and\n+//! type checking like all other code. In MIR building we finally detect whether this attribute is\n+//! present, and if so we branch off into this module, which implements the attribute by\n+//! implementing a custom lowering from THIR to MIR.\n+//!\n+//! The result of this lowering is returned \"normally\" from the `mir_built` query, with the only\n+//! notable difference being that the `injected` field in the body is set. Various components of the\n+//! MIR pipeline, like borrowck and the pass manager will then consult this field (via\n+//! `body.should_skip()`) to skip the parts of the MIR pipeline that precede the MIR phase the user\n+//! specified.\n+//!\n+//! This file defines the general framework for the custom parsing. The parsing for all the\n+//! \"top-level\" constructs can be found in the `parse` submodule, while the parsing for statements,\n+//! terminators, and everything below can be found in the `parse::instruction` submodule.\n+//!\n+\n+use rustc_ast::Attribute;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::DefId;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::{\n+    mir::*,\n+    thir::*,\n+    ty::{Ty, TyCtxt},\n+};\n+use rustc_span::Span;\n+\n+mod parse;\n+\n+pub(super) fn build_custom_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    did: DefId,\n+    thir: &Thir<'tcx>,\n+    expr: ExprId,\n+    params: &IndexVec<ParamId, Param<'tcx>>,\n+    return_ty: Ty<'tcx>,\n+    return_ty_span: Span,\n+    span: Span,\n+    attr: &Attribute,\n+) -> Body<'tcx> {\n+    let mut body = Body {\n+        basic_blocks: BasicBlocks::new(IndexVec::new()),\n+        source: MirSource::item(did),\n+        phase: MirPhase::Built,\n+        source_scopes: IndexVec::new(),\n+        generator: None,\n+        local_decls: LocalDecls::new(),\n+        user_type_annotations: IndexVec::new(),\n+        arg_count: params.len(),\n+        spread_arg: None,\n+        var_debug_info: Vec::new(),\n+        span,\n+        required_consts: Vec::new(),\n+        is_polymorphic: false,\n+        tainted_by_errors: None,\n+        injection_phase: None,\n+        pass_count: 1,\n+    };\n+\n+    body.local_decls.push(LocalDecl::new(return_ty, return_ty_span));\n+    body.basic_blocks_mut().push(BasicBlockData::new(None));\n+    body.source_scopes.push(SourceScopeData {\n+        span,\n+        parent_scope: None,\n+        inlined: None,\n+        inlined_parent_scope: None,\n+        local_data: ClearCrossCrate::Clear,\n+    });\n+    body.injection_phase = Some(parse_attribute(attr));\n+\n+    let mut pctxt = ParseCtxt {\n+        tcx,\n+        thir,\n+        source_info: SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE },\n+        body: &mut body,\n+        local_map: FxHashMap::default(),\n+        block_map: FxHashMap::default(),\n+    };\n+\n+    let res = (|| {\n+        pctxt.parse_args(&params)?;\n+        pctxt.parse_body(expr)\n+    })();\n+    if let Err(err) = res {\n+        tcx.sess.diagnostic().span_fatal(\n+            err.span,\n+            format!(\"Could not parse {}, found: {:?}\", err.expected, err.item_description),\n+        )\n+    }\n+\n+    body\n+}\n+\n+fn parse_attribute(attr: &Attribute) -> MirPhase {\n+    let meta_items = attr.meta_item_list().unwrap();\n+    let mut dialect: Option<String> = None;\n+    let mut phase: Option<String> = None;\n+\n+    for nested in meta_items {\n+        let name = nested.name_or_empty();\n+        let value = nested.value_str().unwrap().as_str().to_string();\n+        match name.as_str() {\n+            \"dialect\" => {\n+                assert!(dialect.is_none());\n+                dialect = Some(value);\n+            }\n+            \"phase\" => {\n+                assert!(phase.is_none());\n+                phase = Some(value);\n+            }\n+            other => {\n+                panic!(\"Unexpected key {}\", other);\n+            }\n+        }\n+    }\n+\n+    let Some(dialect) = dialect else {\n+        assert!(phase.is_none());\n+        return MirPhase::Built;\n+    };\n+\n+    MirPhase::parse(dialect, phase)\n+}\n+\n+struct ParseCtxt<'tcx, 'body> {\n+    tcx: TyCtxt<'tcx>,\n+    thir: &'body Thir<'tcx>,\n+    source_info: SourceInfo,\n+\n+    body: &'body mut Body<'tcx>,\n+    local_map: FxHashMap<LocalVarId, Local>,\n+    block_map: FxHashMap<LocalVarId, BasicBlock>,\n+}\n+\n+struct ParseError {\n+    span: Span,\n+    item_description: String,\n+    expected: String,\n+}\n+\n+impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n+    fn expr_error(&self, expr: ExprId, expected: &'static str) -> ParseError {\n+        let expr = &self.thir[expr];\n+        ParseError {\n+            span: expr.span,\n+            item_description: format!(\"{:?}\", expr.kind),\n+            expected: expected.to_string(),\n+        }\n+    }\n+}\n+\n+type PResult<T> = Result<T, ParseError>;"}, {"sha": "52cb0a4826d071eb75801f5b2e04c3133983aa87", "filename": "compiler/rustc_mir_build/src/build/custom/parse.rs", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,245 @@\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::{mir::*, thir::*, ty::Ty};\n+use rustc_span::Span;\n+\n+use super::{PResult, ParseCtxt, ParseError};\n+\n+mod instruction;\n+\n+/// Helper macro for parsing custom MIR.\n+///\n+/// Example usage looks something like:\n+/// ```rust,ignore (incomplete example)\n+/// parse_by_kind!(\n+///     self, // : &ParseCtxt\n+///     expr_id, // what you're matching against\n+///     \"assignment\", // the thing you're trying to parse\n+///     @call(\"mir_assign\", args) => { args[0] }, // match invocations of the `mir_assign` special function\n+///     ExprKind::Assign { lhs, .. } => { lhs }, // match thir assignment expressions\n+///     // no need for fallthrough case - reasonable error is automatically generated\n+/// )\n+/// ```\n+macro_rules! parse_by_kind {\n+    (\n+        $self:ident,\n+        $expr_id:expr,\n+        $expected:literal,\n+        $(\n+            @call($name:literal, $args:ident) => $call_expr:expr,\n+        )*\n+        $(\n+            $pat:pat => $expr:expr,\n+        )*\n+    ) => {{\n+        let expr_id = $self.preparse($expr_id);\n+        let expr = &$self.thir[expr_id];\n+        match &expr.kind {\n+            $(\n+                ExprKind::Call { ty, fun: _, args: $args, .. } if {\n+                    match ty.kind() {\n+                        ty::FnDef(did, _) => {\n+                            $self.tcx.is_diagnostic_item(rustc_span::Symbol::intern($name), *did)\n+                        }\n+                        _ => false,\n+                    }\n+                } => $call_expr,\n+            )*\n+            $(\n+                $pat => $expr,\n+            )*\n+            #[allow(unreachable_patterns)]\n+            _ => return Err($self.expr_error(expr_id, $expected))\n+        }\n+    }};\n+}\n+pub(crate) use parse_by_kind;\n+\n+impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n+    /// Expressions should only ever be matched on after preparsing them. This removes extra scopes\n+    /// we don't care about.\n+    fn preparse(&self, expr_id: ExprId) -> ExprId {\n+        let expr = &self.thir[expr_id];\n+        match expr.kind {\n+            ExprKind::Scope { value, .. } => self.preparse(value),\n+            _ => expr_id,\n+        }\n+    }\n+\n+    fn statement_as_expr(&self, stmt_id: StmtId) -> PResult<ExprId> {\n+        match &self.thir[stmt_id].kind {\n+            StmtKind::Expr { expr, .. } => Ok(*expr),\n+            kind @ StmtKind::Let { pattern, .. } => {\n+                return Err(ParseError {\n+                    span: pattern.span,\n+                    item_description: format!(\"{:?}\", kind),\n+                    expected: \"expression\".to_string(),\n+                });\n+            }\n+        }\n+    }\n+\n+    pub fn parse_args(&mut self, params: &IndexVec<ParamId, Param<'tcx>>) -> PResult<()> {\n+        for param in params.iter() {\n+            let (var, span) = {\n+                let pat = param.pat.as_ref().unwrap();\n+                match &pat.kind {\n+                    PatKind::Binding { var, .. } => (*var, pat.span),\n+                    _ => {\n+                        return Err(ParseError {\n+                            span: pat.span,\n+                            item_description: format!(\"{:?}\", pat.kind),\n+                            expected: \"local\".to_string(),\n+                        });\n+                    }\n+                }\n+            };\n+            let decl = LocalDecl::new(param.ty, span);\n+            let local = self.body.local_decls.push(decl);\n+            self.local_map.insert(var, local);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    /// Bodies are of the form:\n+    ///\n+    /// ```text\n+    /// {\n+    ///     let bb1: BasicBlock;\n+    ///     let bb2: BasicBlock;\n+    ///     {\n+    ///         let RET: _;\n+    ///         let local1;\n+    ///         let local2;\n+    ///\n+    ///         {\n+    ///             { // entry block\n+    ///                 statement1;\n+    ///                 terminator1\n+    ///             };\n+    ///\n+    ///             bb1 = {\n+    ///                 statement2;\n+    ///                 terminator2\n+    ///             };\n+    ///\n+    ///             bb2 = {\n+    ///                 statement3;\n+    ///                 terminator3\n+    ///             }\n+    ///\n+    ///             RET\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// This allows us to easily parse the basic blocks declarations, local declarations, and\n+    /// basic block definitions in order.\n+    pub fn parse_body(&mut self, expr_id: ExprId) -> PResult<()> {\n+        let body = parse_by_kind!(self, expr_id, \"whole body\",\n+            ExprKind::Block { block } => self.thir[*block].expr.unwrap(),\n+        );\n+        let (block_decls, rest) = parse_by_kind!(self, body, \"body with block decls\",\n+            ExprKind::Block { block } => {\n+                let block = &self.thir[*block];\n+                (&block.stmts, block.expr.unwrap())\n+            },\n+        );\n+        self.parse_block_decls(block_decls.iter().copied())?;\n+\n+        let (local_decls, rest) = parse_by_kind!(self, rest, \"body with local decls\",\n+            ExprKind::Block { block } => {\n+                let block = &self.thir[*block];\n+                (&block.stmts, block.expr.unwrap())\n+            },\n+        );\n+        self.parse_local_decls(local_decls.iter().copied())?;\n+\n+        let block_defs = parse_by_kind!(self, rest, \"body with block defs\",\n+            ExprKind::Block { block } => &self.thir[*block].stmts,\n+        );\n+        for (i, block_def) in block_defs.iter().enumerate() {\n+            let block = self.parse_block_def(self.statement_as_expr(*block_def)?)?;\n+            self.body.basic_blocks_mut()[BasicBlock::from_usize(i)] = block;\n+        }\n+\n+        Ok(())\n+    }\n+\n+    fn parse_block_decls(&mut self, stmts: impl Iterator<Item = StmtId>) -> PResult<()> {\n+        for stmt in stmts {\n+            let (var, _, _) = self.parse_let_statement(stmt)?;\n+            let data = BasicBlockData::new(None);\n+            let block = self.body.basic_blocks_mut().push(data);\n+            self.block_map.insert(var, block);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    fn parse_local_decls(&mut self, mut stmts: impl Iterator<Item = StmtId>) -> PResult<()> {\n+        let (ret_var, ..) = self.parse_let_statement(stmts.next().unwrap())?;\n+        self.local_map.insert(ret_var, Local::from_u32(0));\n+\n+        for stmt in stmts {\n+            let (var, ty, span) = self.parse_let_statement(stmt)?;\n+            let decl = LocalDecl::new(ty, span);\n+            let local = self.body.local_decls.push(decl);\n+            self.local_map.insert(var, local);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    fn parse_let_statement(&mut self, stmt_id: StmtId) -> PResult<(LocalVarId, Ty<'tcx>, Span)> {\n+        let pattern = match &self.thir[stmt_id].kind {\n+            StmtKind::Let { pattern, .. } => pattern,\n+            StmtKind::Expr { expr, .. } => {\n+                return Err(self.expr_error(*expr, \"let statement\"));\n+            }\n+        };\n+\n+        self.parse_var(pattern)\n+    }\n+\n+    fn parse_var(&mut self, mut pat: &Pat<'tcx>) -> PResult<(LocalVarId, Ty<'tcx>, Span)> {\n+        // Make sure we throw out any `AscribeUserType` we find\n+        loop {\n+            match &pat.kind {\n+                PatKind::Binding { var, ty, .. } => break Ok((*var, *ty, pat.span)),\n+                PatKind::AscribeUserType { subpattern, .. } => {\n+                    pat = subpattern;\n+                }\n+                _ => {\n+                    break Err(ParseError {\n+                        span: pat.span,\n+                        item_description: format!(\"{:?}\", pat.kind),\n+                        expected: \"local\".to_string(),\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    fn parse_block_def(&self, expr_id: ExprId) -> PResult<BasicBlockData<'tcx>> {\n+        let block = parse_by_kind!(self, expr_id, \"basic block\",\n+            ExprKind::Block { block } => &self.thir[*block],\n+        );\n+\n+        let mut data = BasicBlockData::new(None);\n+        for stmt_id in &*block.stmts {\n+            let stmt = self.statement_as_expr(*stmt_id)?;\n+            let statement = self.parse_statement(stmt)?;\n+            data.statements.push(Statement { source_info: self.source_info, kind: statement });\n+        }\n+\n+        let Some(trailing) = block.expr else {\n+            return Err(self.expr_error(expr_id, \"terminator\"))\n+        };\n+        let terminator = self.parse_terminator(trailing)?;\n+        data.terminator = Some(Terminator { source_info: self.source_info, kind: terminator });\n+\n+        Ok(data)\n+    }\n+}"}, {"sha": "6d6176584f5f47d3cadcc769843afea83350679d", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,72 @@\n+use rustc_middle::{mir::*, thir::*, ty};\n+\n+use super::{parse_by_kind, PResult, ParseCtxt};\n+\n+impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n+    pub fn parse_statement(&self, expr_id: ExprId) -> PResult<StatementKind<'tcx>> {\n+        parse_by_kind!(self, expr_id, \"statement\",\n+            @call(\"mir_retag\", args) => {\n+                Ok(StatementKind::Retag(RetagKind::Default, Box::new(self.parse_place(args[0])?)))\n+            },\n+            @call(\"mir_retag_raw\", args) => {\n+                Ok(StatementKind::Retag(RetagKind::Raw, Box::new(self.parse_place(args[0])?)))\n+            },\n+            ExprKind::Assign { lhs, rhs } => {\n+                let lhs = self.parse_place(*lhs)?;\n+                let rhs = self.parse_rvalue(*rhs)?;\n+                Ok(StatementKind::Assign(Box::new((lhs, rhs))))\n+            },\n+        )\n+    }\n+\n+    pub fn parse_terminator(&self, expr_id: ExprId) -> PResult<TerminatorKind<'tcx>> {\n+        parse_by_kind!(self, expr_id, \"terminator\",\n+            @call(\"mir_return\", _args) => {\n+                Ok(TerminatorKind::Return)\n+            },\n+            @call(\"mir_goto\", args) => {\n+                Ok(TerminatorKind::Goto { target: self.parse_block(args[0])? } )\n+            },\n+        )\n+    }\n+\n+    fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n+        parse_by_kind!(self, expr_id, \"rvalue\",\n+            ExprKind::Borrow { borrow_kind, arg } => Ok(\n+                Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n+            ),\n+            ExprKind::AddressOf { mutability, arg } => Ok(\n+                Rvalue::AddressOf(*mutability, self.parse_place(*arg)?)\n+            ),\n+            _ => self.parse_operand(expr_id).map(Rvalue::Use),\n+        )\n+    }\n+\n+    fn parse_operand(&self, expr_id: ExprId) -> PResult<Operand<'tcx>> {\n+        parse_by_kind!(self, expr_id, \"operand\",\n+            @call(\"mir_move\", args) => self.parse_place(args[0]).map(Operand::Move),\n+            _ => self.parse_place(expr_id).map(Operand::Copy),\n+        )\n+    }\n+\n+    fn parse_place(&self, expr_id: ExprId) -> PResult<Place<'tcx>> {\n+        parse_by_kind!(self, expr_id, \"place\",\n+            ExprKind::Deref { arg } => Ok(\n+                self.parse_place(*arg)?.project_deeper(&[PlaceElem::Deref], self.tcx)\n+            ),\n+            _ => self.parse_local(expr_id).map(Place::from),\n+        )\n+    }\n+\n+    fn parse_local(&self, expr_id: ExprId) -> PResult<Local> {\n+        parse_by_kind!(self, expr_id, \"local\",\n+            ExprKind::VarRef { id } => Ok(self.local_map[id]),\n+        )\n+    }\n+\n+    fn parse_block(&self, expr_id: ExprId) -> PResult<BasicBlock> {\n+        parse_by_kind!(self, expr_id, \"basic block\",\n+            ExprKind::VarRef { id } => Ok(self.block_map[id]),\n+        )\n+    }\n+}"}, {"sha": "437ac8d82a1a3136bd38ff9d6f51b33f42884a77", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -481,6 +481,22 @@ fn construct_fn<'tcx>(\n         (None, fn_sig.output())\n     };\n \n+    if let Some(custom_mir_attr) =\n+        tcx.hir().attrs(fn_id).iter().find(|attr| attr.name_or_empty() == sym::custom_mir)\n+    {\n+        return custom::build_custom_mir(\n+            tcx,\n+            fn_def.did.to_def_id(),\n+            thir,\n+            expr,\n+            arguments,\n+            return_ty,\n+            return_ty_span,\n+            span,\n+            custom_mir_attr,\n+        );\n+    }\n+\n     let infcx = tcx.infer_ctxt().build();\n     let mut builder = Builder::new(\n         thir,\n@@ -1033,6 +1049,7 @@ pub(crate) fn parse_float_into_scalar(\n \n mod block;\n mod cfg;\n+mod custom;\n mod expr;\n mod matches;\n mod misc;"}, {"sha": "c4639d3a513dfb7e4e13a32c741e312988abe218", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -51,11 +51,17 @@ impl<'tcx> Cx<'tcx> {\n         trace!(?expr.ty);\n \n         // Now apply adjustments, if any.\n-        for adjustment in self.typeck_results.expr_adjustments(hir_expr) {\n-            trace!(?expr, ?adjustment);\n-            let span = expr.span;\n-            expr =\n-                self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));\n+        if self.apply_adjustments {\n+            for adjustment in self.typeck_results.expr_adjustments(hir_expr) {\n+                trace!(?expr, ?adjustment);\n+                let span = expr.span;\n+                expr = self.apply_adjustment(\n+                    hir_expr,\n+                    expr,\n+                    adjustment,\n+                    adjustment_span.unwrap_or(span),\n+                );\n+            }\n         }\n \n         trace!(?expr.ty, \"after adjustments\");"}, {"sha": "b5c4b7b137d4c28a2ea2399e6bf1d8dfad156068", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -80,22 +80,31 @@ struct Cx<'tcx> {\n     /// for the receiver.\n     adjustment_span: Option<(HirId, Span)>,\n \n+    /// False to indicate that adjustments should not be applied. Only used for `custom_mir`\n+    apply_adjustments: bool,\n+\n     /// The `DefId` of the owner of this body.\n     body_owner: DefId,\n }\n \n impl<'tcx> Cx<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) -> Cx<'tcx> {\n         let typeck_results = tcx.typeck_opt_const_arg(def);\n+        let did = def.did;\n+        let hir = tcx.hir();\n         Cx {\n             tcx,\n             thir: Thir::new(),\n             param_env: tcx.param_env(def.did),\n             region_scope_tree: tcx.region_scope_tree(def.did),\n             typeck_results,\n             rvalue_scopes: &typeck_results.rvalue_scopes,\n-            body_owner: def.did.to_def_id(),\n+            body_owner: did.to_def_id(),\n             adjustment_span: None,\n+            apply_adjustments: hir\n+                .attrs(hir.local_def_id_to_hir_id(did))\n+                .iter()\n+                .all(|attr| attr.name_or_empty() != rustc_span::sym::custom_mir),\n         }\n     }\n "}, {"sha": "e783d189137749cabfc28a12872bf7ff4ad64006", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -471,6 +471,14 @@ fn unsafety_check_result<'tcx>(\n     // `mir_built` force this.\n     let body = &tcx.mir_built(def).borrow();\n \n+    if body.should_skip() {\n+        return tcx.arena.alloc(UnsafetyCheckResult {\n+            violations: Vec::new(),\n+            used_unsafe_blocks: FxHashSet::default(),\n+            unused_unsafes: Some(Vec::new()),\n+        });\n+    }\n+\n     let param_env = tcx.param_env(def.did);\n \n     let mut checker = UnsafetyChecker::new(body, def.did, tcx, param_env);"}, {"sha": "27dbc3e22c97a58ac53b09eec34d355229906ce3", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -96,45 +96,48 @@ fn run_passes_inner<'tcx>(\n     phase_change: Option<MirPhase>,\n     validate_each: bool,\n ) {\n-    let validate = validate_each & tcx.sess.opts.unstable_opts.validate_mir;\n+    let validate = validate_each & tcx.sess.opts.unstable_opts.validate_mir & !body.should_skip();\n     let overridden_passes = &tcx.sess.opts.unstable_opts.mir_enable_passes;\n     trace!(?overridden_passes);\n \n-    for pass in passes {\n-        let name = pass.name();\n-\n-        let overridden =\n-            overridden_passes.iter().rev().find(|(s, _)| s == &*name).map(|(_name, polarity)| {\n-                trace!(\n-                    pass = %name,\n-                    \"{} as requested by flag\",\n-                    if *polarity { \"Running\" } else { \"Not running\" },\n-                );\n-                *polarity\n-            });\n-        if !overridden.unwrap_or_else(|| pass.is_enabled(&tcx.sess)) {\n-            continue;\n+    if !body.should_skip() {\n+        for pass in passes {\n+            let name = pass.name();\n+\n+            let overridden = overridden_passes.iter().rev().find(|(s, _)| s == &*name).map(\n+                |(_name, polarity)| {\n+                    trace!(\n+                        pass = %name,\n+                        \"{} as requested by flag\",\n+                        if *polarity { \"Running\" } else { \"Not running\" },\n+                    );\n+                    *polarity\n+                },\n+            );\n+            if !overridden.unwrap_or_else(|| pass.is_enabled(&tcx.sess)) {\n+                continue;\n+            }\n+\n+            let dump_enabled = pass.is_mir_dump_enabled();\n+\n+            if dump_enabled {\n+                dump_mir_for_pass(tcx, body, &name, false);\n+            }\n+            if validate {\n+                validate_body(tcx, body, format!(\"before pass {}\", name));\n+            }\n+\n+            pass.run_pass(tcx, body);\n+\n+            if dump_enabled {\n+                dump_mir_for_pass(tcx, body, &name, true);\n+            }\n+            if validate {\n+                validate_body(tcx, body, format!(\"after pass {}\", name));\n+            }\n+\n+            body.pass_count += 1;\n         }\n-\n-        let dump_enabled = pass.is_mir_dump_enabled();\n-\n-        if dump_enabled {\n-            dump_mir_for_pass(tcx, body, &name, false);\n-        }\n-        if validate {\n-            validate_body(tcx, body, format!(\"before pass {}\", name));\n-        }\n-\n-        pass.run_pass(tcx, body);\n-\n-        if dump_enabled {\n-            dump_mir_for_pass(tcx, body, &name, true);\n-        }\n-        if validate {\n-            validate_body(tcx, body, format!(\"after pass {}\", name));\n-        }\n-\n-        body.pass_count += 1;\n     }\n \n     if let Some(new_phase) = phase_change {"}, {"sha": "54a61483a11a326032c4dd4ddb7351d8e31cf7b9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -584,6 +584,7 @@ symbols! {\n         custom_attribute,\n         custom_derive,\n         custom_inner_attributes,\n+        custom_mir,\n         custom_test_frameworks,\n         d,\n         d32,"}, {"sha": "0f6bbc323174cfb45dad1ffe4a388d1d323c2234", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,26 +1,25 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"arm64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n+    let arch = Arch::Arm64;\n+    let mut base = opts(\"macos\", arch);\n     base.cpu = \"apple-a14\".into();\n     base.max_atomic_width = Some(128);\n \n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n-\n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(arch);\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n \n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             mcount: \"\\u{1}mcount\".into(),\n             frame_pointer: FramePointer::NonLeaf,"}, {"sha": "b5f9eb1259dace3eaa02136daa9641416dc789aa", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,19 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_llvm_target(arch);\n-\n+    let arch = Arch::Arm64;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -30,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..opts(\"ios\", Arch::Arm64)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "0009972cf425693c9134e84e5b1cf5e786d54a06", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,17 +1,18 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"arm64-apple-ios14.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::Arm64_macabi);\n+    let arch = Arch::Arm64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a12\".into(),\n             max_atomic_width: Some(128),"}, {"sha": "3374755e2dd8b9631b622e31428739b995f434b3", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,21 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Arm64_sim);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // IPHONEOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(arch);\n-\n+    let arch = Arch::Arm64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "bb7c39ff26bdf5eede75e1cddda83cef7cbb8ff5", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,18 +1,19 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Arm64;\n     Target {\n         llvm_target: \"arm64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n-            ..opts(\"tvos\", Arch::Arm64)\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "e4af4127c2223114f98a2442942e4eac3fab40b8", "filename": "compiler/rustc_target/src/spec/aarch64_apple_watchos_sim.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_watchos_sim.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,21 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Arm64_sim);\n-\n-    // Clang automatically chooses a more specific target based on\n-    // WATCHOS_DEPLOYMENT_TARGET.\n-    // This is required for the simulator target to pick the right\n-    // MACH-O commands, so we do too.\n-    let arch = \"arm64\";\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n-\n+    let arch = Arch::Arm64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // WATCHOS_DEPLOYMENT_TARGET.\n+        // This is required for the simulator target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".into(),\n-        arch: \"aarch64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n@@ -32,7 +28,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "23c826cb1bda2922558bc2859845a16ec52c26cf", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 107, "deletions": 18, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -3,7 +3,88 @@ use std::{borrow::Cow, env};\n use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n \n-fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n+#[cfg(test)]\n+#[path = \"apple/tests.rs\"]\n+mod tests;\n+\n+use Arch::*;\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum Arch {\n+    Armv7,\n+    Armv7k,\n+    Armv7s,\n+    Arm64,\n+    Arm64_32,\n+    I386,\n+    I686,\n+    X86_64,\n+    X86_64_sim,\n+    X86_64_macabi,\n+    Arm64_macabi,\n+    Arm64_sim,\n+}\n+\n+impl Arch {\n+    pub fn target_name(self) -> &'static str {\n+        match self {\n+            Armv7 => \"armv7\",\n+            Armv7k => \"armv7k\",\n+            Armv7s => \"armv7s\",\n+            Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n+            Arm64_32 => \"arm64_32\",\n+            I386 => \"i386\",\n+            I686 => \"i686\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        }\n+    }\n+\n+    pub fn target_arch(self) -> Cow<'static, str> {\n+        Cow::Borrowed(match self {\n+            Armv7 | Armv7k | Armv7s => \"arm\",\n+            Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n+            I386 | I686 => \"x86\",\n+            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+        })\n+    }\n+\n+    fn target_abi(self) -> &'static str {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n+            X86_64_macabi | Arm64_macabi => \"macabi\",\n+            // x86_64-apple-ios is a simulator target, even though it isn't\n+            // declared that way in the target like the other ones...\n+            Arm64_sim | X86_64_sim => \"sim\",\n+        }\n+    }\n+\n+    fn target_cpu(self) -> &'static str {\n+        match self {\n+            Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n+            Armv7k => \"cortex-a8\",\n+            Armv7s => \"cortex-a9\",\n+            Arm64 => \"apple-a7\",\n+            Arm64_32 => \"apple-s4\",\n+            I386 | I686 => \"yonah\",\n+            X86_64 | X86_64_sim => \"core2\",\n+            X86_64_macabi => \"core2\",\n+            Arm64_macabi => \"apple-a12\",\n+            Arm64_sim => \"apple-a12\",\n+        }\n+    }\n+\n+    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n+        match self {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n+        }\n+    }\n+}\n+\n+fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n         \"sim\" => format!(\"{}-simulator\", os).into(),\n         \"macabi\" => \"mac-catalyst\".into(),\n@@ -19,6 +100,8 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     }\n     .into();\n \n+    let arch = arch.target_name();\n+\n     let mut args = TargetOptions::link_args(\n         LinkerFlavor::Darwin(Cc::No, Lld::No),\n         &[\"-arch\", arch, \"-platform_version\"],\n@@ -35,24 +118,29 @@ fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> Lin\n     args\n }\n \n-pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOptions {\n-    // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n+pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n+    // Static TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n     // 10.7+, but there is a standard environment variable,\n     // MACOSX_DEPLOYMENT_TARGET, which is used to signal targeting older\n     // versions of macOS. For example compiling on 10.10 with\n     // MACOSX_DEPLOYMENT_TARGET set to 10.6 will cause the linker to generate\n-    // warnings about the usage of ELF TLS.\n+    // warnings about the usage of static TLS.\n     //\n-    // Here we detect what version is being requested, defaulting to 10.7. ELF\n+    // Here we detect what version is being requested, defaulting to 10.7. Static\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = os == \"macos\" && macos_deployment_target(Arch::X86_64) >= (10, 7);\n+\n+    let abi = arch.target_abi();\n \n     TargetOptions {\n+        abi: abi.into(),\n         os: os.into(),\n+        cpu: arch.target_cpu().into(),\n+        link_env_remove: arch.link_env_remove(),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -103,23 +191,24 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n }\n \n-fn macos_default_deployment_target(arch: &str) -> (u32, u32) {\n-    if arch == \"arm64\" { (11, 0) } else { (10, 7) }\n+fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n+    // Note: Arm64_sim is not included since macOS has no simulator.\n+    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n }\n \n-fn macos_deployment_target(arch: &str) -> (u32, u32) {\n+fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n     deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n-fn macos_lld_platform_version(arch: &str) -> String {\n+fn macos_lld_platform_version(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn macos_llvm_target(arch: &str) -> String {\n+pub fn macos_llvm_target(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n-    format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n@@ -142,25 +231,25 @@ fn ios_deployment_target() -> (u32, u32) {\n     deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n-pub fn ios_llvm_target(arch: &str) -> String {\n+pub fn ios_llvm_target(arch: Arch) -> String {\n     // Modern iOS tooling extracts information about deployment target\n     // from LC_BUILD_VERSION. This load command will only be emitted when\n     // we build with a version specific `llvm_target`, with the version\n     // set high enough. Luckily one LC_BUILD_VERSION is enough, for Xcode\n     // to pick it up (since std and core are still built with the fallback\n     // of version 7.0 and hence emit the old LC_IPHONE_MIN_VERSION).\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0\", arch.target_name(), major, minor)\n }\n \n fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn ios_sim_llvm_target(arch: &str) -> String {\n+pub fn ios_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}-apple-ios{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-ios{}.{}.0-simulator\", arch.target_name(), major, minor)\n }\n \n fn tvos_deployment_target() -> (u32, u32) {\n@@ -181,7 +270,7 @@ fn watchos_lld_platform_version() -> String {\n     format!(\"{}.{}\", major, minor)\n }\n \n-pub fn watchos_sim_llvm_target(arch: &str) -> String {\n+pub fn watchos_sim_llvm_target(arch: Arch) -> String {\n     let (major, minor) = watchos_deployment_target();\n-    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch, major, minor)\n+    format!(\"{}-apple-watchos{}.{}.0-simulator\", arch.target_name(), major, minor)\n }"}, {"sha": "148031b1569768eca63e872d67ae5f0ff00906da", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=e75aab045fc476f176a58c408f6b06f0e275c6e1", "patch": "@@ -1,81 +0,0 @@\n-use crate::spec::{cvs, TargetOptions};\n-use std::borrow::Cow;\n-\n-#[cfg(test)]\n-#[path = \"apple/tests.rs\"]\n-mod tests;\n-\n-use Arch::*;\n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum Arch {\n-    Armv7,\n-    Armv7k,\n-    Armv7s,\n-    Arm64,\n-    Arm64_32,\n-    I386,\n-    #[allow(dead_code)] // Some targets don't use this enum...\n-    X86_64,\n-    X86_64_sim,\n-    X86_64_macabi,\n-    Arm64_macabi,\n-    Arm64_sim,\n-}\n-\n-fn target_arch_name(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"armv7\",\n-        Armv7k => \"armv7k\",\n-        Armv7s => \"armv7s\",\n-        Arm64 | Arm64_macabi | Arm64_sim => \"arm64\",\n-        Arm64_32 => \"arm64_32\",\n-        I386 => \"i386\",\n-        X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n-    }\n-}\n-\n-fn target_abi(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 => \"\",\n-        X86_64_macabi | Arm64_macabi => \"macabi\",\n-        // x86_64-apple-ios is a simulator target, even though it isn't\n-        // declared that way in the target like the other ones...\n-        Arm64_sim | X86_64_sim => \"sim\",\n-    }\n-}\n-\n-fn target_cpu(arch: Arch) -> &'static str {\n-    match arch {\n-        Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n-        Armv7k => \"cortex-a8\",\n-        Armv7s => \"cortex-a9\",\n-        Arm64 => \"apple-a7\",\n-        Arm64_32 => \"apple-s4\",\n-        I386 => \"yonah\",\n-        X86_64 | X86_64_sim => \"core2\",\n-        X86_64_macabi => \"core2\",\n-        Arm64_macabi => \"apple-a12\",\n-        Arm64_sim => \"apple-a12\",\n-    }\n-}\n-\n-fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n-    match arch {\n-        Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | X86_64 | X86_64_sim | Arm64_sim => {\n-            cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-        }\n-        X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-    }\n-}\n-\n-pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n-    let abi = target_abi(arch);\n-    TargetOptions {\n-        abi: abi.into(),\n-        cpu: target_cpu(arch).into(),\n-        link_env_remove: link_env_remove(arch),\n-        has_thread_local: false,\n-        ..super::apple_base::opts(os, target_arch_name(arch), abi)\n-    }\n-}"}, {"sha": "2cf2cbc7510009dec797f7137eabca3bb741bf4e", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {"}, {"sha": "3259c854791ce1849c465e03dbf691038c6b18f4", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,18 +1,21 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_llvm_target, opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let llvm_target = super::apple_base::ios_llvm_target(\"armv7\");\n-\n+    let arch = Arch::Armv7;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "45ead8d65aba9919c6dc65d742b860c308d30c82", "filename": "compiler/rustc_target/src/spec/armv7k_apple_watchos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7k_apple_watchos.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,13 +1,13 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::Armv7k);\n+    let arch = Arch::Armv7k;\n     Target {\n         llvm_target: \"armv7k-apple-watchos\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-i64:64-a:0:32-n32-S128\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n@@ -22,7 +22,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "be4bc6758443ec7ee51ea2c1fd67bde666581650", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,16 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n+    let arch = Arch::Armv7s;\n     Target {\n         llvm_target: \"armv7s-apple-ios\".into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".into(),\n-        arch: \"arm\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".into(),\n             max_atomic_width: Some(64),\n-            ..opts(\"ios\", Arch::Armv7s)\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "5819981612e84a8a322ece52007d089f333f7a7d", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,21 +1,23 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::I386);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"i386\");\n-\n+    let arch = Arch::I386;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // IPHONEOS_DEPLOYMENT_TARGET.\n+        // This is required for the target to pick the right\n+        // MACH-O commands, so we do too.\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "8b968af5eccff330a51e7aef34044de6b6b3ef82", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,28 +1,28 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    // ld64 only understand i386 and not i686\n-    let mut base = super::apple_base::opts(\"macos\", \"i386\", \"\");\n-    base.cpu = \"yonah\".into();\n+    // ld64 only understands i386 and not i686\n+    let arch = Arch::I386;\n+    let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let arch = \"i686\";\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        //\n+        // While ld64 doesn't understand i686, LLVM does.\n+        llvm_target: macos_llvm_target(Arch::I686).into(),\n         pointer_width: 32,\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .into(),\n-        arch: \"x86\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "f41533a9548fe459aa0431e94a78ca210541d4af", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=e75aab045fc476f176a58c408f6b06f0e275c6e1", "patch": "@@ -1,18 +0,0 @@\n-use crate::spec::TargetOptions;\n-use crate::spec::{FramePointer, PanicStrategy, RelocModel, RelroLevel, StackProbeType};\n-\n-pub fn opts() -> TargetOptions {\n-    TargetOptions {\n-        env: \"gnu\".into(),\n-        disable_redzone: true,\n-        panic_strategy: PanicStrategy::Abort,\n-        stack_probes: StackProbeType::X86,\n-        frame_pointer: FramePointer::Always,\n-        position_independent_executables: true,\n-        needs_plt: true,\n-        relro_level: RelroLevel::Full,\n-        relocation_model: RelocModel::Static,\n-\n-        ..Default::default()\n-    }\n-}"}, {"sha": "1bcb02ecb305356e7922f130e004b6a7e160219b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -59,7 +59,6 @@ pub mod crt_objects;\n \n mod android_base;\n mod apple_base;\n-mod apple_sdk_base;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;\n@@ -71,7 +70,6 @@ mod illumos_base;\n mod l4re_base;\n mod linux_base;\n mod linux_gnu_base;\n-mod linux_kernel_base;\n mod linux_musl_base;\n mod linux_uclibc_base;\n mod msvc_base;\n@@ -1003,7 +1001,7 @@ macro_rules! supported_targets {\n             $(\n                 #[test] // `#[test]`\n                 fn $module() {\n-                    tests_impl::test_target(super::$module::target(), $triple);\n+                    tests_impl::test_target(super::$module::target());\n                 }\n             )+\n         }\n@@ -1071,8 +1069,6 @@ supported_targets! {\n     (\"thumbv7neon-linux-androideabi\", thumbv7neon_linux_androideabi),\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n-    (\"x86_64-unknown-none-linuxkernel\", x86_64_unknown_none_linuxkernel),\n-\n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),\n     (\"armv6-unknown-freebsd\", armv6_unknown_freebsd),\n     (\"armv7-unknown-freebsd\", armv7_unknown_freebsd),\n@@ -1941,8 +1937,10 @@ impl Target {\n             | PlatformIntrinsic\n             | Unadjusted\n             | Cdecl { .. }\n-            | EfiApi\n             | RustCold => true,\n+            EfiApi => {\n+                [\"arm\", \"aarch64\", \"riscv32\", \"riscv64\", \"x86\", \"x86_64\"].contains(&&self.arch[..])\n+            }\n             X86Interrupt => [\"x86\", \"x86_64\"].contains(&&self.arch[..]),\n             Aapcs { .. } => \"arm\" == self.arch,\n             CCmseNonSecureCall => [\"arm\", \"aarch64\"].contains(&&self.arch[..]),"}, {"sha": "e0ecf8037c3e59a4086582342b9a18342ae6a67c", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,15 +2,15 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(mut target: Target, triple: &str) {\n+pub(super) fn test_target(mut target: Target) {\n     let recycled_target = Target::from_json(target.to_json()).map(|(j, _)| j);\n     target.update_to_cli();\n-    target.check_consistency(triple);\n+    target.check_consistency();\n     assert_eq!(recycled_target, Ok(target));\n }\n \n impl Target {\n-    fn check_consistency(&self, triple: &str) {\n+    fn check_consistency(&self) {\n         assert_eq!(self.is_like_osx, self.vendor == \"apple\");\n         assert_eq!(self.is_like_solaris, self.os == \"solaris\" || self.os == \"illumos\");\n         assert_eq!(self.is_like_windows, self.os == \"windows\" || self.os == \"uefi\");\n@@ -129,8 +129,7 @@ impl Target {\n         if self.dynamic_linking && !(self.is_like_wasm && self.os != \"emscripten\") {\n             assert_eq!(self.relocation_model, RelocModel::Pic);\n         }\n-        // PIEs are supported but not enabled by default with linuxkernel target.\n-        if self.position_independent_executables && !triple.ends_with(\"-linuxkernel\") {\n+        if self.position_independent_executables {\n             assert_eq!(self.relocation_model, RelocModel::Pic);\n         }\n         // The UEFI targets do not support dynamic linking but still require PIC (#101377)."}, {"sha": "c053031612ce5369575731e710bdcfd395b76116", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,29 +1,27 @@\n+use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let arch = \"x86_64\";\n-    let mut base = super::apple_base::opts(\"macos\", arch, \"\");\n-    base.cpu = \"core2\".into();\n-    base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n+    let arch = Arch::X86_64;\n+    let mut base = opts(\"macos\", arch);\n+    base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n \n-    // Clang automatically chooses a more specific target based on\n-    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n-    // correctly, we do too.\n-    let llvm_target = super::apple_base::macos_llvm_target(&arch);\n-\n     Target {\n-        llvm_target: llvm_target.into(),\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: arch.into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n     }\n }"}, {"sha": "fbd3ebd4d0431eba64044605b1d8b8a9beba7640", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,20 +1,18 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{ios_sim_llvm_target, opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::X86_64_sim);\n-    let llvm_target = super::apple_base::ios_sim_llvm_target(\"x86_64\");\n-\n+    let arch = Arch::X86_64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: ios_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"ios\", arch)\n         },\n     }\n }"}, {"sha": "0f3f8519963778d172d4ef5b164c100d71da2139", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,18 +1,19 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let llvm_target = \"x86_64-apple-ios13.0-macabi\";\n \n-    let mut base = opts(\"ios\", Arch::X86_64_macabi);\n+    let arch = Arch::X86_64_macabi;\n+    let mut base = opts(\"ios\", arch);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-target\", llvm_target]);\n \n     Target {\n         llvm_target: llvm_target.into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,"}, {"sha": "550ce0b9ce577e0584a020d92a42d186ea9d2974", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,17 +1,17 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"tvos\", Arch::X86_64_sim);\n+    let arch = Arch::X86_64_sim;\n     Target {\n         llvm_target: \"x86_64-apple-tvos\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n-            ..base\n+            ..opts(\"tvos\", arch)\n         },\n     }\n }"}, {"sha": "75ce02cba1de0623be381ab2b4b396860b69b23a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,18 +1,14 @@\n-use super::apple_sdk_base::{opts, Arch};\n+use super::apple_base::{opts, watchos_sim_llvm_target, Arch};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"watchos\", Arch::X86_64_sim);\n-\n-    let arch = \"x86_64\";\n-    let llvm_target = super::apple_base::watchos_sim_llvm_target(arch);\n-\n+    let arch = Arch::X86_64_sim;\n     Target {\n-        llvm_target: llvm_target.into(),\n+        llvm_target: watchos_sim_llvm_target(arch).into(),\n         pointer_width: 64,\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n-        arch: \"x86_64\".into(),\n+        arch: arch.target_arch(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n             stack_probes: StackProbeType::X86,\n@@ -28,7 +24,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .into(),\n-            ..base\n+            ..opts(\"watchos\", arch)\n         },\n     }\n }"}, {"sha": "ebd9636ff5102094a7df96f5f1327d842f28e64e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_linuxkernel.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75aab045fc476f176a58c408f6b06f0e275c6e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs?ref=e75aab045fc476f176a58c408f6b06f0e275c6e1", "patch": "@@ -1,28 +0,0 @@\n-// This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n-// generic Linux kernel options.\n-\n-use crate::spec::{Cc, CodeModel, LinkerFlavor, Lld, Target};\n-\n-pub fn target() -> Target {\n-    let mut base = super::linux_kernel_base::opts();\n-    base.cpu = \"x86-64\".into();\n-    base.max_atomic_width = Some(64);\n-    base.features =\n-        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\".into();\n-    base.code_model = Some(CodeModel::Kernel);\n-    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &[\"-m64\"]);\n-\n-    Target {\n-        // FIXME: Some dispute, the linux-on-clang folks think this should use\n-        // \"Linux\". We disagree because running *on* Linux is nothing like\n-        // running *as\" linux, and historically the \"os\" component as has always\n-        // been used to mean the \"on\" part.\n-        llvm_target: \"x86_64-unknown-none-elf\".into(),\n-        pointer_width: 64,\n-        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .into(),\n-        arch: \"x86_64\".into(),\n-\n-        options: base,\n-    }\n-}"}, {"sha": "46ee2f35976a7be6dedee04590aa4fd7e4325d89", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -27,7 +27,6 @@ pub struct Autoderef<'a, 'tcx> {\n     // Meta infos:\n     infcx: &'a InferCtxt<'tcx>,\n     span: Span,\n-    overloaded_span: Span,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n \n@@ -99,12 +98,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         body_id: hir::HirId,\n         span: Span,\n         base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n     ) -> Autoderef<'a, 'tcx> {\n         Autoderef {\n             infcx,\n             span,\n-            overloaded_span,\n             body_id,\n             param_env,\n             state: AutoderefSnapshot {\n@@ -193,10 +190,6 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         self.span\n     }\n \n-    pub fn overloaded_span(&self) -> Span {\n-        self.overloaded_span\n-    }\n-\n     pub fn reached_recursion_limit(&self) -> bool {\n         self.state.reached_recursion_limit\n     }"}, {"sha": "aece4ab7922851adfab1fec2fe7f40fb61374421", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -714,7 +714,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.cause.body_id,\n                     span,\n                     base_ty,\n-                    span,\n                 );\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`"}, {"sha": "cec603dcb10edc8718f677f9ef5cd7d5563a2c12", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -59,6 +59,9 @@ use crate::marker::DiscriminantKind;\n use crate::marker::Tuple;\n use crate::mem;\n \n+#[cfg(not(bootstrap))]\n+pub mod mir;\n+\n // These imports are used for simplifying intra-doc links\n #[allow(unused_imports)]\n #[cfg(all(target_has_atomic = \"8\", target_has_atomic = \"32\", target_has_atomic = \"ptr\"))]"}, {"sha": "1bacdc39148a1cef5e79673cd9379366eddf98c0", "filename": "library/core/src/intrinsics/mir.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,123 @@\n+//! Rustc internal tooling for hand-writing MIR.\n+//!\n+//! If for some reasons you are not writing rustc tests and have found yourself considering using\n+//! this feature, turn back. This is *exceptionally* unstable. There is no attempt at all to make\n+//! anything work besides those things which the rustc test suite happened to need. If you make a\n+//! typo you'll probably ICE. Really, this is not the solution to your problems. Consider instead\n+//! supporting the [stable MIR project group](https://github.com/rust-lang/project-stable-mir).\n+//!\n+//! The documentation for this module describes how to use this feature. If you are interested in\n+//! hacking on the implementation, most of that documentation lives at\n+//! `rustc_mir_building/src/build/custom/mod.rs`.\n+//!\n+//! Typical usage will look like this:\n+//!\n+//! ```rust\n+//! #![feature(core_intrinsics, custom_mir)]\n+//!\n+//! extern crate core;\n+//! use core::intrinsics::mir::*;\n+//!\n+//! #[custom_mir(dialect = \"built\")]\n+//! pub fn simple(x: i32) -> i32 {\n+//!     mir!(\n+//!         let temp1: i32;\n+//!         let temp2: _;\n+//!\n+//!         {\n+//!             temp1 = x;\n+//!             Goto(exit)\n+//!         }\n+//!\n+//!         exit = {\n+//!             temp2 = Move(temp1);\n+//!             RET = temp2;\n+//!             Return()\n+//!         }\n+//!     )\n+//! }\n+//! ```\n+//!\n+//! Hopefully most of this is fairly self-explanatory. Expanding on some notable details:\n+//!\n+//!  - The `custom_mir` attribute tells the compiler to treat the function as being custom MIR. This\n+//!    attribute only works on functions - there is no way to insert custom MIR into the middle of\n+//!    another function.\n+//!  - The `dialect` and `phase` parameters indicate which version of MIR you are inserting here.\n+//!    This will normally be the phase that corresponds to the thing you are trying to test. The\n+//!    phase can be omitted for dialects that have just one.\n+//!  - You should define your function signature like you normally would. Externally, this function\n+//!    can be called like any other function.\n+//!  - Type inference works - you don't have to spell out the type of all of your locals.\n+//!\n+//! For now, all statements and terminators are parsed from nested invocations of the special\n+//! functions provided in this module. We additionally want to (but do not yet) support more\n+//! \"normal\" Rust syntax in places where it makes sense. Also, most kinds of instructions are not\n+//! supported yet.\n+//!\n+\n+#![unstable(\n+    feature = \"custom_mir\",\n+    reason = \"MIR is an implementation detail and extremely unstable\",\n+    issue = \"none\"\n+)]\n+#![allow(unused_variables, non_snake_case, missing_debug_implementations)]\n+\n+/// Type representing basic blocks.\n+///\n+/// All terminators will have this type as a return type. It helps achieve some type safety.\n+pub struct BasicBlock;\n+\n+macro_rules! define {\n+    ($name:literal, $($sig:tt)*) => {\n+        #[rustc_diagnostic_item = $name]\n+        pub $($sig)* { panic!() }\n+    }\n+}\n+\n+define!(\"mir_return\", fn Return() -> BasicBlock);\n+define!(\"mir_goto\", fn Goto(destination: BasicBlock) -> BasicBlock);\n+define!(\"mir_retag\", fn Retag<T>(place: T));\n+define!(\"mir_retag_raw\", fn RetagRaw<T>(place: T));\n+define!(\"mir_move\", fn Move<T>(place: T) -> T);\n+\n+/// Convenience macro for generating custom MIR.\n+///\n+/// See the module documentation for syntax details. This macro is not magic - it only transforms\n+/// your MIR into something that is easier to parse in the compiler.\n+#[rustc_macro_transparency = \"transparent\"]\n+pub macro mir {\n+    (\n+        $(let $local_decl:ident $(: $local_decl_ty:ty)? ;)*\n+\n+        $entry_block:block\n+\n+        $(\n+            $block_name:ident = $block:block\n+        )*\n+    ) => {{\n+        // First, we declare all basic blocks.\n+        $(\n+            let $block_name: ::core::intrinsics::mir::BasicBlock;\n+        )*\n+\n+        {\n+            // Now all locals\n+            #[allow(non_snake_case)]\n+            let RET;\n+            $(\n+                let $local_decl $(: $local_decl_ty)? ;\n+            )*\n+\n+            {\n+                // Finally, the contents of the basic blocks\n+                $entry_block;\n+                $(\n+                    $block;\n+                )*\n+\n+                RET\n+            }\n+        }\n+    }}\n+}"}, {"sha": "f0258640e2aec4c508b421cdd87d031e34adfa9a", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1059,7 +1059,7 @@ impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n /// 8  | let x: Pin<&mut Foo> = {\n ///    |     - borrow later stored here\n /// 9  |     let x: Pin<&mut Foo> = pin!(Foo { /* \u2026 */ });\n-///    |                            ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+///    |                            ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n /// 10 |     x\n /// 11 | }; // <- Foo is dropped\n ///    | - temporary value is freed at the end of this statement"}, {"sha": "32c0ef3e11688ebff944201ee8891608eaf91939", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -15,7 +15,6 @@ cfg_if::cfg_if! {\n         target_os = \"espidf\",\n     ))] {\n         // These \"unix\" family members do not have unwinder.\n-        // Note this also matches x86_64-unknown-none-linuxkernel.\n     } else if #[cfg(any(\n         unix,\n         windows,"}, {"sha": "3f64052c048c6def93b94a2b514ee88bba918744", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1 +1 @@\n-Subproject commit aa5ee485bd6bd80d205da7c82fcdd776f92fdd51\n+Subproject commit 3f64052c048c6def93b94a2b514ee88bba918744"}, {"sha": "05532356e7a4dbea2330aabb77611f5179493bb8", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1 +1 @@\n-Subproject commit 9c73283775466d22208a0b28afcab44db4c0cc10\n+Subproject commit 05532356e7a4dbea2330aabb77611f5179493bb8"}, {"sha": "9f0cc13ffcd27c1fbe1ab766a9491e15ddcf4d19", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1 +1 @@\n-Subproject commit 4ea7c5def38ac81df33a9e48e5637a82a5ac404d\n+Subproject commit 9f0cc13ffcd27c1fbe1ab766a9491e15ddcf4d19"}, {"sha": "2b15c0abf2bada6e00553814336bc3e2d8399097", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1 +1 @@\n-Subproject commit 03491f33375c5a2a1661c7fa4be671fe95ce1249\n+Subproject commit 2b15c0abf2bada6e00553814336bc3e2d8399097"}, {"sha": "d0dc6c97a6486f68bac782fff135086eae6d77ec", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1 +1 @@\n-Subproject commit 51a37ad19a15709d0601afbac6581f5aea6a45da\n+Subproject commit d0dc6c97a6486f68bac782fff135086eae6d77ec"}, {"sha": "0315f1e3725ffe91970a3a10735202ef862549ec", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -310,7 +310,6 @@ target | std | host | notes\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n `x86_64-unknown-hermit` | \u2713 |  | HermitCore\n `x86_64-unknown-l4re-uclibc` | ? |  |\n-`x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n [`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |"}, {"sha": "789dd398be50d7298da6dd2bdbfae5e9df742142", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -326,7 +326,7 @@ impl Options {\n             crate::usage(\"rustdoc\");\n             return Err(0);\n         } else if matches.opt_present(\"version\") {\n-            rustc_driver::version(\"rustdoc\", matches);\n+            rustc_driver::version!(\"rustdoc\", matches);\n             return Err(0);\n         }\n "}, {"sha": "a60e7cb10fa515c8b4f17745808f7f8d3d575f70", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -71,7 +71,7 @@ pub(crate) fn render<T: Print, S: Print>(\n     let mut themes: Vec<String> = style_files.iter().map(|s| s.basename().unwrap()).collect();\n     themes.sort();\n \n-    let rustdoc_version = rustc_interface::util::version_str().unwrap_or(\"unknown version\");\n+    let rustdoc_version = rustc_interface::util::version_str!().unwrap_or(\"unknown version\");\n     let content = Buffer::html().to_display(t); // Note: This must happen before making the sidebar.\n     let sidebar = Buffer::html().to_display(sidebar);\n     PageLayout {"}, {"sha": "4a5ddde4081e2e26e2234023cf425c221259340b", "filename": "src/test/mir-opt/building/custom/references.immut_ref.built.after.mir", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.immut_ref.built.after.mir?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,14 @@\n+// MIR for `immut_ref` after built\n+\n+fn immut_ref(_1: &i32) -> &i32 {\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/references.rs:+0:30: +0:34\n+    let mut _2: *const i32;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = &raw const (*_1);           // scope 0 at $DIR/references.rs:+0:1: +0:34\n+        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+0:1: +0:34\n+        _0 = &(*_2);                     // scope 0 at $DIR/references.rs:+0:1: +0:34\n+        Retag(_0);                       // scope 0 at $DIR/references.rs:+0:1: +0:34\n+        return;                          // scope 0 at $DIR/references.rs:+0:1: +0:34\n+    }\n+}"}, {"sha": "ec8509f69d14ef69e04bb257bae38208f1c07f56", "filename": "src/test/mir-opt/building/custom/references.mut_ref.built.after.mir", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.mut_ref.built.after.mir?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,14 @@\n+// MIR for `mut_ref` after built\n+\n+fn mut_ref(_1: &mut i32) -> &mut i32 {\n+    let mut _0: &mut i32;                // return place in scope 0 at $DIR/references.rs:+0:32: +0:40\n+    let mut _2: *mut i32;                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = &raw mut (*_1);             // scope 0 at $DIR/references.rs:+0:1: +0:40\n+        Retag([raw] _2);                 // scope 0 at $DIR/references.rs:+0:1: +0:40\n+        _0 = &mut (*_2);                 // scope 0 at $DIR/references.rs:+0:1: +0:40\n+        Retag(_0);                       // scope 0 at $DIR/references.rs:+0:1: +0:40\n+        return;                          // scope 0 at $DIR/references.rs:+0:1: +0:40\n+    }\n+}"}, {"sha": "dee85722e8656daaffc42780c5d8ef5946dc0023", "filename": "src/test/mir-opt/building/custom/references.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Freferences.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,43 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+use core::ptr::{addr_of, addr_of_mut};\n+\n+// EMIT_MIR references.mut_ref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+pub fn mut_ref(x: &mut i32) -> &mut i32 {\n+    mir!(\n+        let t: *mut i32;\n+\n+        {\n+            t = addr_of_mut!(*x);\n+            RetagRaw(t);\n+            RET = &mut *t;\n+            Retag(RET);\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR references.immut_ref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+pub fn immut_ref(x: &i32) -> &i32 {\n+    mir!(\n+        let t: *const i32;\n+\n+        {\n+            t = addr_of!(*x);\n+            RetagRaw(t);\n+            RET = & *t;\n+            Retag(RET);\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    let mut x = 5;\n+    assert_eq!(*mut_ref(&mut x), 5);\n+    assert_eq!(*immut_ref(&x), 5);\n+}"}, {"sha": "ec6dbe1d0526b7799436afe1729994cb59411936", "filename": "src/test/mir-opt/building/custom/simple_assign.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,37 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR simple_assign.simple.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+pub fn simple(x: i32) -> i32 {\n+    mir!(\n+        let temp1: i32;\n+        let temp2: _;\n+\n+        {\n+            temp1 = x;\n+            Goto(exit)\n+        }\n+\n+        exit = {\n+            temp2 = Move(temp1);\n+            RET = temp2;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR simple_assign.simple_ref.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+pub fn simple_ref(x: &mut i32) -> &mut i32 {\n+    mir!({\n+        RET = Move(x);\n+        Return()\n+    })\n+}\n+\n+fn main() {\n+    assert_eq!(5, simple(5));\n+}"}, {"sha": "a5a2834c2e1bf14e264c968461cb41e90b65eb4e", "filename": "src/test/mir-opt/building/custom/simple_assign.simple.built.after.mir", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,18 @@\n+// MIR for `simple` after built\n+\n+fn simple(_1: i32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/simple_assign.rs:+0:26: +0:29\n+    let mut _2: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+    }\n+\n+    bb1: {\n+        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+        return;                          // scope 0 at $DIR/simple_assign.rs:+0:1: +0:29\n+    }\n+}"}, {"sha": "6c90f0130a2e65b737af298e48d15638397d6784", "filename": "src/test/mir-opt/building/custom/simple_assign.simple_ref.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple_ref.built.after.mir?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `simple_ref` after built\n+\n+fn simple_ref(_1: &mut i32) -> &mut i32 {\n+    let mut _0: &mut i32;                // return place in scope 0 at $DIR/simple_assign.rs:+0:35: +0:43\n+\n+    bb0: {\n+        _0 = move _1;                    // scope 0 at $DIR/simple_assign.rs:+0:1: +0:43\n+        return;                          // scope 0 at $DIR/simple_assign.rs:+0:1: +0:43\n+    }\n+}"}, {"sha": "4eeec09b910401ddd05ad34e618c59a3661fd60b", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n-   |                    creates a temporary which is freed while still in use\n+   |                    creates a temporary value which is freed while still in use\n LL |     x.x[0];\n    |     ------ borrow later used here\n    |"}, {"sha": "c62d5f903c8d81d4e32c8cc377f036ab50740294", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     buggy_map.insert(42, &*Box::new(1));\n    |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                            |\n-   |                            creates a temporary which is freed while still in use\n+   |                            creates a temporary value which is freed while still in use\n ...\n LL |     buggy_map.insert(43, &*tmp);\n    |     --------------------------- borrow later used here"}, {"sha": "2720b09b0fc5f384d7ff612ffa801149dac8da2c", "filename": "src/test/ui/borrowck/issue-11493.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-11493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-11493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-11493.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let y = x.as_ref().unwrap_or(&id(5));\n    |                                   ^^^^^ - temporary value is freed at the end of this statement\n    |                                   |\n-   |                                   creates a temporary which is freed while still in use\n+   |                                   creates a temporary value which is freed while still in use\n LL |     let _ = &y;\n    |             -- borrow later used here\n    |"}, {"sha": "3ae7e64d202b69496ea961c93a6f0c409c5f0c33", "filename": "src/test/ui/borrowck/issue-17545.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-17545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-17545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-17545.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -5,7 +5,7 @@ LL |   pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n    |              -- lifetime `'a` defined here\n LL | /     bar.call((\n LL | |         &id(()),\n-   | |          ^^^^^^ creates a temporary which is freed while still in use\n+   | |          ^^^^^^ creates a temporary value which is freed while still in use\n LL | |     ));\n    | |      -- temporary value is freed at the end of this statement\n    | |______|"}, {"sha": "8fc963a85664e8a88a6407c57974a016cc939cc6", "filename": "src/test/ui/borrowck/issue-36082.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.fixed?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let val: &_ = binding.0;\n     //~^ ERROR temporary value dropped while borrowed [E0716]\n     //~| NOTE temporary value is freed at the end of this statement\n-    //~| NOTE creates a temporary which is freed while still in use\n+    //~| NOTE creates a temporary value which is freed while still in use\n     //~| HELP consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //~^ borrow later used here"}, {"sha": "20f66b4d45de4af3cc1bd50b146e76b15c891642", "filename": "src/test/ui/borrowck/issue-36082.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     let val: &_ = x.borrow().0;\n     //~^ ERROR temporary value dropped while borrowed [E0716]\n     //~| NOTE temporary value is freed at the end of this statement\n-    //~| NOTE creates a temporary which is freed while still in use\n+    //~| NOTE creates a temporary value which is freed while still in use\n     //~| HELP consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //~^ borrow later used here"}, {"sha": "a6357f8182fc2aa7a15f6281a76df591089e7c8c", "filename": "src/test/ui/borrowck/issue-36082.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-36082.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let val: &_ = x.borrow().0;\n    |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement\n    |                   |\n-   |                   creates a temporary which is freed while still in use\n+   |                   creates a temporary value which is freed while still in use\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here"}, {"sha": "425cd75141cec4a06241359376d919bfbf7df6db", "filename": "src/test/ui/cleanup-rvalue-scopes-cf.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x1 = arg(&AddFlags(1));\n    |                   ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                   |\n-   |                   creates a temporary which is freed while still in use\n+   |                   creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |      -- borrow later used here\n@@ -21,7 +21,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x2 = AddFlags(1).get();\n    |              ^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |              |\n-   |              creates a temporary which is freed while still in use\n+   |              creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |          -- borrow later used here\n@@ -38,7 +38,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x3 = &*arg(&AddFlags(1));\n    |                     ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                     |\n-   |                     creates a temporary which is freed while still in use\n+   |                     creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |              -- borrow later used here\n@@ -55,7 +55,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let ref x4 = *arg(&AddFlags(1));\n    |                        ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                        |\n-   |                        creates a temporary which is freed while still in use\n+   |                        creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                  -- borrow later used here\n@@ -72,7 +72,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let &ref x5 = arg(&AddFlags(1));\n    |                        ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                        |\n-   |                        creates a temporary which is freed while still in use\n+   |                        creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                      -- borrow later used here\n@@ -89,7 +89,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x6 = AddFlags(1).get();\n    |              ^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |              |\n-   |              creates a temporary which is freed while still in use\n+   |              creates a temporary value which is freed while still in use\n ...\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                          -- borrow later used here\n@@ -106,7 +106,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let StackBox { f: x7 } = StackBox { f: AddFlags(1).get() };\n    |                                            ^^^^^^^^^^^        - temporary value is freed at the end of this statement\n    |                                            |\n-   |                                            creates a temporary which is freed while still in use\n+   |                                            creates a temporary value which is freed while still in use\n LL |\n LL |     (x1, x2, x3, x4, x5, x6, x7);\n    |                              -- borrow later used here"}, {"sha": "ed6a6ee6e0fd9298f810658e6146d86f4c2a0617", "filename": "src/test/ui/consts/const-eval/const-eval-intrinsic-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-intrinsic-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-intrinsic-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-intrinsic-promotion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let x: &'static usize =\n    |            -------------- type annotation requires that borrow lasts for `'static`\n LL |         &std::intrinsics::size_of::<i32>();\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n LL | }\n    | - temporary value is freed at the end of this statement\n "}, {"sha": "2e697b219c5a4b7e53ad465a7c68478eaf160b1e", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -10,7 +10,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:17:28\n    |\n LL |     let _: &'static u32 = &foo();\n-   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL | }\n@@ -20,7 +20,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:21:28\n    |\n LL |     let _: &'static u32 = &meh();\n-   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -31,7 +31,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn.rs:22:26\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n-   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "aa742d784e0350bcf612ed844eeb8dff0930df5c", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:8:28\n    |\n LL |     let _: &'static u32 = &foo();\n-   |            ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |     let _x: &'static u32 = &foo();\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:9:29\n    |\n LL |     let _x: &'static u32 = &foo();\n-   |             ------------    ^^^^^ creates a temporary which is freed while still in use\n+   |             ------------    ^^^^^ creates a temporary value which is freed while still in use\n    |             |\n    |             type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "2d4e7c83d3e4e8a34c44929c1f56a7786ce948d1", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_const_fn_fail.rs:17:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n-   |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ..."}, {"sha": "9ebae3a18a32f15e3d81f92725a0bb94ee3a1f6f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_const_fn_fail_deny_const_err.rs:18:27\n    |\n LL |     let x: &'static u8 = &(bar() + 1);\n-   |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ..."}, {"sha": "01fcf2ec213424c8eaf38d1ea376e3b09e442d25", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:2:29\n    |\n LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:4:30\n    |\n LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1);\n-   |            --------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:6:28\n    |\n LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) });\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -35,7 +35,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted_raw_ptr_ops.rs:8:29\n    |\n LL |     let a: &'static bool = &(main as fn() == main as fn());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "434a957f64840780855d05b058692836b41f3e70", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/transmute-const-promotion.rs:4:37\n    |\n LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n-   |            ------------             ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------             ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "42f17de200344598613ef63e0c8c2226d822a94d", "filename": "src/test/ui/consts/const-eval/union_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -7,7 +7,7 @@ LL |       let x: &'static bool = &unsafe {\n    | |            type annotation requires that borrow lasts for `'static`\n LL | |         Foo { a: &1 }.b == Foo { a: &2 }.b\n LL | |     };\n-   | |_____^ creates a temporary which is freed while still in use\n+   | |_____^ creates a temporary value which is freed while still in use\n LL |   }\n    |   - temporary value is freed at the end of this statement\n "}, {"sha": "5dd757e3f5ee1fb049958d7cb5ffa8d97212bb2d", "filename": "src/test/ui/consts/const-int-conversion.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:2:28\n    |\n LL |     let x: &'static i32 = &(5_i32.reverse_bits());\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:4:28\n    |\n LL |     let y: &'static i32 = &(i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:6:28\n    |\n LL |     let z: &'static i32 = &(i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -35,7 +35,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:8:28\n    |\n LL |     let a: &'static i32 = &(i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0])));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -46,7 +46,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:10:29\n    |\n LL |     let b: &'static [u8] = &(0x12_34_56_78_i32.to_be_bytes());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -57,7 +57,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:12:29\n    |\n LL |     let c: &'static [u8] = &(0x12_34_56_78_i32.to_le_bytes());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -68,7 +68,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-conversion.rs:14:29\n    |\n LL |     let d: &'static [u8] = &(i32::MIN.to_be().to_ne_bytes());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "7d3689e6ec7d7ac188b3fcd47a882ca40519316e", "filename": "src/test/ui/consts/const-int-overflowing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:2:36\n    |\n LL |     let x: &'static (i32, bool) = &(5_i32.overflowing_add(3));\n-   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:4:36\n    |\n LL |     let y: &'static (i32, bool) = &(5_i32.overflowing_sub(3));\n-   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-overflowing.rs:6:36\n    |\n LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3));\n-   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "039da1c31c57571ad97b3734499e3d63d45ac870", "filename": "src/test/ui/consts/const-int-rotate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:2:28\n    |\n LL |     let x: &'static i32 = &(5_i32.rotate_left(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-rotate.rs:4:28\n    |\n LL |     let y: &'static i32 = &(5_i32.rotate_right(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "fc23d9d2b2942f6bc4eb7b136314ee61bca53b43", "filename": "src/test/ui/consts/const-int-sign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:2:29\n    |\n LL |     let x: &'static bool = &(5_i32.is_negative());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-sign.rs:4:29\n    |\n LL |     let y: &'static bool = &(5_i32.is_positive());\n-   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "1342fadc4055b2bcc24d109aaf8a473c8e34ea1c", "filename": "src/test/ui/consts/const-int-wrapping.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:2:28\n    |\n LL |     let x: &'static i32 = &(5_i32.wrapping_add(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:4:28\n    |\n LL |     let y: &'static i32 = &(5_i32.wrapping_sub(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:6:28\n    |\n LL |     let z: &'static i32 = &(5_i32.wrapping_mul(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -35,7 +35,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:8:28\n    |\n LL |     let a: &'static i32 = &(5_i32.wrapping_shl(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -46,7 +46,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-int-wrapping.rs:10:28\n    |\n LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3));\n-   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "78c58b5ab092b98df4f0b0be9b901473084fdba7", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -11,7 +11,7 @@ LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              ----------^^-\n    |                              |         | |\n    |                              |         | temporary value is freed at the end of this statement\n-   |                              |         creates a temporary which is freed while still in use\n+   |                              |         creates a temporary value which is freed while still in use\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -21,7 +21,7 @@ LL | const B4: Option<&mut i32> = helper(&mut 42);\n    |                              ------------^^-\n    |                              |           | |\n    |                              |           | temporary value is freed at the end of this statement\n-   |                              |           creates a temporary which is freed while still in use\n+   |                              |           creates a temporary value which is freed while still in use\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -31,7 +31,7 @@ LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  -------------------------------^^--\n    |                                  |                              |  |\n    |                                  |                              |  temporary value is freed at the end of this statement\n-   |                                  |                              creates a temporary which is freed while still in use\n+   |                                  |                              creates a temporary value which is freed while still in use\n    |                                  using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -41,7 +41,7 @@ LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    -------------------------------^^--\n    |                                    |                              |  |\n    |                                    |                              |  temporary value is freed at the end of this statement\n-   |                                    |                              creates a temporary which is freed while still in use\n+   |                                    |                              creates a temporary value which is freed while still in use\n    |                                    using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -51,7 +51,7 @@ LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                        -------------------------------^^--\n    |                                        |                              |  |\n    |                                        |                              |  temporary value is freed at the end of this statement\n-   |                                        |                              creates a temporary which is freed while still in use\n+   |                                        |                              creates a temporary value which is freed while still in use\n    |                                        using this value as a static requires that borrow lasts for `'static`\n \n error: aborting due to 6 previous errors"}, {"sha": "dbcb0c86052ee3fdeb4536d1f2432258a8076ff5", "filename": "src/test/ui/consts/const-ptr-nonnull.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-ptr-nonnull.rs:4:37\n    |\n LL |     let x: &'static NonNull<u32> = &(NonNull::dangling());\n-   |            ---------------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ---------------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-ptr-nonnull.rs:9:37\n    |\n LL |     let x: &'static NonNull<u32> = &(non_null.cast());\n-   |            ---------------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ---------------------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "83448c3e8d8766e3ab7884055cfffcd7c17452b4", "filename": "src/test/ui/consts/const-ptr-unique.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/const-ptr-unique.rs:8:33\n    |\n LL |     let x: &'static *mut u32 = &(unique.as_ptr());\n-   |            -----------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |"}, {"sha": "db2ffb91b988b0d65c37e96d81b401ec400fc467", "filename": "src/test/ui/consts/control-flow/interior-mutability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/interior-mutability.rs:40:26\n    |\n LL |     let x: &'static _ = &X;\n-   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            ----------    ^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/interior-mutability.rs:41:26\n    |\n LL |     let y: &'static _ = &Y;\n-   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            ----------    ^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |     let z: &'static _ = &Z;\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/interior-mutability.rs:42:26\n    |\n LL |     let z: &'static _ = &Z;\n-   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            ----------    ^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "55fe55759df54005fce3412078898677a5104a70", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -5,7 +5,7 @@ LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]);\n    |                                 ------^^^^^^^^^-\n    |                                 |     |        |\n    |                                 |     |        temporary value is freed at the end of this statement\n-   |                                 |     creates a temporary which is freed while still in use\n+   |                                 |     creates a temporary value which is freed while still in use\n    |                                 using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -15,7 +15,7 @@ LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n    |                                          ---------------^^^^^^^^^-\n    |                                          |              |        |\n    |                                          |              |        temporary value is freed at the end of this statement\n-   |                                          |              creates a temporary which is freed while still in use\n+   |                                          |              creates a temporary value which is freed while still in use\n    |                                          using this value as a constant requires that borrow lasts for `'static`\n \n error: aborting due to 2 previous errors"}, {"sha": "0b8dc0ce0e903c75322bc3c0926883887392b14d", "filename": "src/test/ui/consts/min_const_fn/promotion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:11:27\n    |\n LL |     let x: &'static () = &foo1();\n-   |            -----------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:12:28\n    |\n LL |     let y: &'static i32 = &foo2(42);\n-   |            ------------    ^^^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:13:28\n    |\n LL |     let z: &'static i32 = &foo3();\n-   |            ------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -35,7 +35,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:14:34\n    |\n LL |     let a: &'static Cell<i32> = &foo4();\n-   |            ------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            ------------------    ^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -46,7 +46,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:15:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo5();\n-   |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------------    ^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |     let a: &'static Option<Cell<i32>> = &foo6();\n@@ -57,7 +57,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promotion.rs:16:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo6();\n-   |            --------------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |            --------------------------    ^^^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "b93358e8dcceaa1ef17b1ae58a4d492e1118f3e6", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -5,14 +5,14 @@ LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n    |                                        ----------^^^^^^^^^-\n    |                                        |         |        |\n    |                                        |         |        temporary value is freed at the end of this statement\n-   |                                        |         creates a temporary which is freed while still in use\n+   |                                        |         creates a temporary value which is freed while still in use\n    |                                        using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:11:18\n    |\n LL |     let x = &mut [1,2,3];\n-   |                  ^^^^^^^ creates a temporary which is freed while still in use\n+   |                  ^^^^^^^ creates a temporary value which is freed while still in use\n LL |     x\n    |     - using this value as a static requires that borrow lasts for `'static`\n LL | };\n@@ -22,7 +22,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:20:32\n    |\n LL |         let _x: &'static () = &foo();\n-   |                 -----------    ^^^^^ creates a temporary which is freed while still in use\n+   |                 -----------    ^^^^^ creates a temporary value which is freed while still in use\n    |                 |\n    |                 type annotation requires that borrow lasts for `'static`\n LL |     }\n@@ -32,7 +32,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:28:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n-   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |             |\n    |             type annotation requires that borrow lasts for `'static`\n LL | }\n@@ -42,7 +42,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:33:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n-   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |             |\n    |             type annotation requires that borrow lasts for `'static`\n LL | };\n@@ -52,7 +52,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:39:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n-   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n LL | };\n@@ -62,7 +62,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:46:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n-   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -73,7 +73,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:47:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n-   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -84,7 +84,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:50:29\n    |\n LL |     let _val: &'static _ = &(1/0);\n-   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -95,7 +95,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:51:29\n    |\n LL |     let _val: &'static _ = &(1/(1-1));\n-   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -106,7 +106,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:52:29\n    |\n LL |     let _val: &'static _ = &(1%0);\n-   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -117,7 +117,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:53:29\n    |\n LL |     let _val: &'static _ = &(1%(1-1));\n-   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -128,7 +128,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:54:29\n    |\n LL |     let _val: &'static _ = &([1,2,3][4]+1);\n-   |               ----------    ^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -139,7 +139,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:57:29\n    |\n LL |     let _val: &'static _ = &TEST_DROP;\n-   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -150,7 +150,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:59:29\n    |\n LL |     let _val: &'static _ = &&TEST_DROP;\n-   |               ----------    ^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -161,7 +161,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:59:30\n    |\n LL |     let _val: &'static _ = &&TEST_DROP;\n-   |               ----------     ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------     ^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -172,7 +172,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:62:29\n    |\n LL |     let _val: &'static _ = &(&TEST_DROP,);\n-   |               ----------    ^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -183,7 +183,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:62:31\n    |\n LL |     let _val: &'static _ = &(&TEST_DROP,);\n-   |               ----------      ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------      ^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -194,7 +194,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-not.rs:65:29\n    |\n LL |     let _val: &'static _ = &[&TEST_DROP; 1];\n-   |               ----------    ^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               ----------    ^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n ...\n@@ -207,7 +207,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let _val: &'static _ = &[&TEST_DROP; 1];\n    |               ----------      ^^^^^^^^^    - temporary value is freed at the end of this statement\n    |               |               |\n-   |               |               creates a temporary which is freed while still in use\n+   |               |               creates a temporary value which is freed while still in use\n    |               type annotation requires that borrow lasts for `'static`\n \n error: aborting due to 20 previous errors"}, {"sha": "975a235a6495b6f3a587bd2306e3086c5f7fb901", "filename": "src/test/ui/consts/promote_const_let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -19,7 +19,7 @@ LL |       let x: &'static u32 = &{\n LL | |         let y = 42;\n LL | |         y\n LL | |     };\n-   | |_____^ creates a temporary which is freed while still in use\n+   | |_____^ creates a temporary value which is freed while still in use\n LL |   }\n    |   - temporary value is freed at the end of this statement\n "}, {"sha": "4802834173fc54ee4482d877257875dede3dabc6", "filename": "src/test/ui/consts/promoted-const-drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-const-drop.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted-const-drop.rs:13:26\n    |\n LL |     let _: &'static A = &A();\n-   |            ----------    ^^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |     let _: &'static [A] = &[C];\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promoted-const-drop.rs:14:28\n    |\n LL |     let _: &'static [A] = &[C];\n-   |            ------------    ^^^ creates a temporary which is freed while still in use\n+   |            ------------    ^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "d847cf88f505fe393ed228aa99b748134a859814", "filename": "src/test/ui/consts/qualif-union.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/qualif-union.rs:28:26\n    |\n LL |     let _: &'static _ = &C1;\n-   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -13,7 +13,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/qualif-union.rs:29:26\n    |\n LL |     let _: &'static _ = &C2;\n-   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -24,7 +24,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/qualif-union.rs:30:26\n    |\n LL |     let _: &'static _ = &C3;\n-   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n ...\n@@ -35,7 +35,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/qualif-union.rs:31:26\n    |\n LL |     let _: &'static _ = &C4;\n-   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL |     let _: &'static _ = &C5;\n@@ -46,7 +46,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/qualif-union.rs:32:26\n    |\n LL |     let _: &'static _ = &C5;\n-   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            ----------    ^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "0c0d736acd0484a34b2ffac4893254fdb0cccf99", "filename": "src/test/ui/feature-gates/feature-gate-abi-efiapi.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,33 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Functions\n+extern \"efiapi\" fn f1() {} //~ ERROR efiapi ABI is experimental\n+\n+// Methods in trait defintion\n+trait Tr {\n+    extern \"efiapi\" fn f2(); //~ ERROR efiapi ABI is experimental\n+    extern \"efiapi\" fn f3() {} //~ ERROR efiapi ABI is experimental\n+}\n+\n+struct S;\n+\n+// Methods in trait impl\n+impl Tr for S {\n+    extern \"efiapi\" fn f2() {} //~ ERROR efiapi ABI is experimental\n+}\n+\n+// Methods in inherent impl\n+impl S {\n+    extern \"efiapi\" fn f4() {} //~ ERROR efiapi ABI is experimental\n+}\n+\n+// Function pointer types\n+type A = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental\n+\n+// Foreign modules\n+extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental"}, {"sha": "5b01dcc6d85952aeaa6dcffcf6206921a1d7bac7", "filename": "src/test/ui/feature-gates/feature-gate-abi-efiapi.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,66 @@\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:9:8\n+   |\n+LL | extern \"efiapi\" fn f1() {}\n+   |        ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:13:12\n+   |\n+LL |     extern \"efiapi\" fn f2();\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:14:12\n+   |\n+LL |     extern \"efiapi\" fn f3() {}\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:21:12\n+   |\n+LL |     extern \"efiapi\" fn f2() {}\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:26:12\n+   |\n+LL |     extern \"efiapi\" fn f4() {}\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:30:17\n+   |\n+LL | type A = extern \"efiapi\" fn();\n+   |                 ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-efiapi.rs:33:8\n+   |\n+LL | extern \"efiapi\" {}\n+   |        ^^^^^^^^\n+   |\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "712655f9775d6f4a41e30d3082d16d3641063d42", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,6 +1,5 @@\n // gate-test-intrinsics\n // gate-test-platform_intrinsics\n-// gate-test-abi_efiapi\n // compile-flags: --crate-type=rlib\n \n #![feature(no_core, lang_items)]\n@@ -18,7 +17,6 @@ extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n                                        //~^ ERROR intrinsic must be in\n extern \"rust-call\" fn f4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -27,10 +25,8 @@ trait Tr {\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n                                          //~^ ERROR intrinsic must be in\n     extern \"rust-call\" fn m4(_: ()); //~ ERROR rust-call ABI is subject to change\n-    extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n \n     extern \"rust-call\" fn dm4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n struct S;\n@@ -42,7 +38,6 @@ impl Tr for S {\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n                                            //~^ ERROR intrinsic must be in\n     extern \"rust-call\" fn m4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -52,17 +47,14 @@ impl S {\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n                                             //~^ ERROR intrinsic must be in\n     extern \"rust-call\" fn im4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Function pointer types\n type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n type A4 = extern \"rust-call\" fn(_: ()); //~ ERROR rust-call ABI is subject to change\n-type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n-extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change"}, {"sha": "e9791b9513f4d29e892164e55d2cfeed34e79981", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 28, "deletions": 91, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:16:8\n+  --> $DIR/feature-gate-abi.rs:15:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:18:8\n+  --> $DIR/feature-gate-abi.rs:17:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -16,33 +16,24 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:20:8\n+  --> $DIR/feature-gate-abi.rs:19:8\n    |\n LL | extern \"rust-call\" fn f4(_: ()) {}\n    |        ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:8\n-   |\n-LL | extern \"efiapi\" fn f10() {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:25:12\n+  --> $DIR/feature-gate-abi.rs:23:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:27:12\n+  --> $DIR/feature-gate-abi.rs:25:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -51,51 +42,33 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:29:12\n+  --> $DIR/feature-gate-abi.rs:27:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:12\n-   |\n-LL |     extern \"efiapi\" fn m10();\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:32:12\n+  --> $DIR/feature-gate-abi.rs:29:12\n    |\n LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:33:12\n-   |\n-LL |     extern \"efiapi\" fn dm10() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:40:12\n+  --> $DIR/feature-gate-abi.rs:36:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:42:12\n+  --> $DIR/feature-gate-abi.rs:38:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -104,33 +77,24 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:44:12\n+  --> $DIR/feature-gate-abi.rs:40:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:45:12\n-   |\n-LL |     extern \"efiapi\" fn m10() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:50:12\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:52:12\n+  --> $DIR/feature-gate-abi.rs:47:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -139,33 +103,24 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:54:12\n+  --> $DIR/feature-gate-abi.rs:49:12\n    |\n LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:12\n-   |\n-LL |     extern \"efiapi\" fn im10() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:59:18\n+  --> $DIR/feature-gate-abi.rs:53:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:60:18\n+  --> $DIR/feature-gate-abi.rs:54:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n@@ -174,33 +129,24 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:61:18\n+  --> $DIR/feature-gate-abi.rs:55:18\n    |\n LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:62:19\n-   |\n-LL | type A10 = extern \"efiapi\" fn();\n-   |                   ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:65:8\n+  --> $DIR/feature-gate-abi.rs:58:8\n    |\n LL | extern \"rust-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:66:8\n+  --> $DIR/feature-gate-abi.rs:59:8\n    |\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n@@ -209,71 +155,62 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:67:8\n+  --> $DIR/feature-gate-abi.rs:60:8\n    |\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:68:8\n-   |\n-LL | extern \"efiapi\" {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:25:32\n+  --> $DIR/feature-gate-abi.rs:23:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:27:36\n+  --> $DIR/feature-gate-abi.rs:25:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:16:33\n+  --> $DIR/feature-gate-abi.rs:15:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:18:37\n+  --> $DIR/feature-gate-abi.rs:17:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:40:37\n+  --> $DIR/feature-gate-abi.rs:36:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:42:41\n+  --> $DIR/feature-gate-abi.rs:38:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:50:38\n+  --> $DIR/feature-gate-abi.rs:45:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:52:42\n+  --> $DIR/feature-gate-abi.rs:47:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 27 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0126dde2f7d4b7e0754e6ba98aa0241db8085b75", "filename": "src/test/ui/feature-gates/feature-gate-custom_mir.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,12 @@\n+#![feature(core_intrinsics)]\n+\n+extern crate core;\n+\n+#[custom_mir(dialect = \"built\")] //~ ERROR the `#[custom_mir]` attribute is just used for the Rust test suite\n+pub fn foo(_x: i32) -> i32 {\n+    0\n+}\n+\n+fn main() {\n+    assert_eq!(2, foo(2));\n+}"}, {"sha": "3c149d30d82bd4f80aa4405a235de7fc89ffdc87", "filename": "src/test/ui/feature-gates/feature-gate-custom_mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_mir.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the `#[custom_mir]` attribute is just used for the Rust test suite\n+  --> $DIR/feature-gate-custom_mir.rs:5:1\n+   |\n+LL | #[custom_mir(dialect = \"built\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(custom_mir)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0b1f34aeb96bd52172833446ece6a7cc0c11c3b3", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n    |                        |\n-   |                        creates a temporary which is freed while still in use\n+   |                        creates a temporary value which is freed while still in use\n ...\n LL |         assert_foo(a);\n    |                    - borrow later used here\n@@ -17,7 +17,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n    |                                   |\n-   |                                   creates a temporary which is freed while still in use\n+   |                                   creates a temporary value which is freed while still in use\n ...\n LL |         assert_foo(a);\n    |                    - borrow later used here"}, {"sha": "1c9abc4e837c518aa888649f2b5b57b0265631fa", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-1.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/hrtb-implied-1.rs:31:22\n    |\n LL |     let slice = &mut ();\n-   |                      ^^ creates a temporary which is freed while still in use\n+   |                      ^^ creates a temporary value which is freed while still in use\n ...\n LL |     print_items::<WindowsMut<'_>>(windows);\n    |     -------------------------------------- argument requires that borrow lasts for `'static`"}, {"sha": "c2c7df7a333a4a3461ca29a6273be3e7bf8511ac", "filename": "src/test/ui/issues/issue-47184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n    |               --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |               |                            |\n-   |               |                            creates a temporary which is freed while still in use\n+   |               |                            creates a temporary value which is freed while still in use\n    |               type annotation requires that borrow lasts for `'static`\n \n error: aborting due to previous error"}, {"sha": "b25dbd1cb8b124eea9068fdf80ab28be1d94e615", "filename": "src/test/ui/issues/issue-52049.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fissues%2Fissue-52049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fissues%2Fissue-52049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52049.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     foo(&unpromotable(5u32));\n    |     -----^^^^^^^^^^^^^^^^^^-\n    |     |    |\n-   |     |    creates a temporary which is freed while still in use\n+   |     |    creates a temporary value which is freed while still in use\n    |     argument requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement"}, {"sha": "987b051b11106e39441633aba255207af62543ce", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let mut x = vec![1].iter();\n    |                 ^^^^^^^       - temporary value is freed at the end of this statement\n    |                 |\n-   |                 creates a temporary which is freed while still in use\n+   |                 creates a temporary value which is freed while still in use\n LL |\n LL |     x.use_mut();\n    |     ----------- borrow later used here"}, {"sha": "89781d96fab2624fbceac3df99b8e614a7b31893", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowed-temporary-error.rs:8:10\n    |\n LL |         &(v,)\n-   |          ^^^^ creates a temporary which is freed while still in use\n+   |          ^^^^ creates a temporary value which is freed while still in use\n LL |\n LL |     });\n    |       - temporary value is freed at the end of this statement"}, {"sha": "bb45575fa64c3ae6f1e50494d378029224b5b731", "filename": "src/test/ui/nll/issue-57265-return-type-wf-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57265-return-type-wf-check.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let (_, z) = foo(&\"hello\".to_string());\n    |                  -----^^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement\n    |                  |    |\n-   |                  |    creates a temporary which is freed while still in use\n+   |                  |    creates a temporary value which is freed while still in use\n    |                  argument requires that borrow lasts for `'static`\n \n error: aborting due to previous error"}, {"sha": "de6f8f80fe25248bcac3e425fcd37b9e639fa7fb", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -76,7 +76,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let _: Vec<&'static String> = vec![&String::new()];\n    |            --------------------         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |            |                            |\n-   |            |                            creates a temporary which is freed while still in use\n+   |            |                            creates a temporary value which is freed while still in use\n    |            type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -85,7 +85,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                 -------------------------          ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |                 |                                  |\n-   |                 |                                  creates a temporary which is freed while still in use\n+   |                 |                                  creates a temporary value which is freed while still in use\n    |                 type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -94,7 +94,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                  -------------------------          ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |                  |                                  |\n-   |                  |                                  creates a temporary which is freed while still in use\n+   |                  |                                  creates a temporary value which is freed while still in use\n    |                  type annotation requires that borrow lasts for `'static`\n \n error[E0597]: `x` does not live long enough"}, {"sha": "fc1be052fb79189139557a6322acc0429a465af2", "filename": "src/test/ui/pin-macro/lifetime_errors_on_promotion_misusage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fpin-macro%2Flifetime_errors_on_promotion_misusage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fpin-macro%2Flifetime_errors_on_promotion_misusage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpin-macro%2Flifetime_errors_on_promotion_misusage.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let phantom_pinned = identity(pin!(PhantomPinned));\n    |                                   ^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                                   |\n-   |                                   creates a temporary which is freed while still in use\n+   |                                   creates a temporary value which is freed while still in use\n LL |\n LL |     stuff(phantom_pinned)\n    |           -------------- borrow later used here\n@@ -18,7 +18,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     let phantom_pinned = {\n    |         -------------- borrow later stored here\n LL |         let phantom_pinned = pin!(PhantomPinned);\n-   |                              ^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |                              ^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n ...\n LL |     };\n    |     - temporary value is freed at the end of this statement"}, {"sha": "8ef7e22536bf94a4847261ad3fe6bf476fbf88de", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -5,7 +5,7 @@ LL | fn call1<'a>(x: &'a usize) {\n    |          -- lifetime `'a` defined here\n ...\n LL |     let z: &'a & usize = &(&y);\n-   |            -----------    ^^^^ creates a temporary which is freed while still in use\n+   |            -----------    ^^^^ creates a temporary value which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'a`\n ..."}, {"sha": "c32bbe0ee1fb4af53e72fa75e5e34a6bd580dd60", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -4,7 +4,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |         x = &id(3);\n    |              ^^^^^- temporary value is freed at the end of this statement\n    |              |\n-   |              creates a temporary which is freed while still in use\n+   |              creates a temporary value which is freed while still in use\n LL |         assert_eq!(*x, 3);\n    |         ----------------- borrow later used here\n    |"}, {"sha": "18abfb5c3fbecb2c589e7bde35cc77e7b7008895", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -18,7 +18,7 @@ fn f() {\n \n     v3.push(&id('x'));           // statement 6\n     //~^ ERROR temporary value dropped while borrowed\n-    //~| NOTE creates a temporary which is freed while still in use\n+    //~| NOTE creates a temporary value which is freed while still in use\n     //~| NOTE temporary value is freed at the end of this statement\n     //~| HELP consider using a `let` binding to create a longer lived value\n \n@@ -28,7 +28,7 @@ fn f() {\n \n         v4.push(&id('y'));\n         //~^ ERROR temporary value dropped while borrowed\n-        //~| NOTE creates a temporary which is freed while still in use\n+        //~| NOTE creates a temporary value which is freed while still in use\n         //~| NOTE temporary value is freed at the end of this statement\n         //~| NOTE consider using a `let` binding to create a longer lived value\n         v4.use_ref();\n@@ -39,7 +39,7 @@ fn f() {\n \n     v5.push(&id('z'));\n     //~^ ERROR temporary value dropped while borrowed\n-    //~| NOTE creates a temporary which is freed while still in use\n+    //~| NOTE creates a temporary value which is freed while still in use\n     //~| NOTE temporary value is freed at the end of this statement\n     //~| HELP consider using a `let` binding to create a longer lived value\n "}, {"sha": "2dc29a78d204d15a35b4e55818b8e29f76c8e6d3", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -16,7 +16,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     v3.push(&id('x'));           // statement 6\n    |              ^^^^^^^ - temporary value is freed at the end of this statement\n    |              |\n-   |              creates a temporary which is freed while still in use\n+   |              creates a temporary value which is freed while still in use\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |              -- borrow later used here\n@@ -33,7 +33,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |         v4.push(&id('y'));\n    |                  ^^^^^^^ - temporary value is freed at the end of this statement\n    |                  |\n-   |                  creates a temporary which is freed while still in use\n+   |                  creates a temporary value which is freed while still in use\n ...\n LL |         v4.use_ref();\n    |         ------------ borrow later used here\n@@ -46,7 +46,7 @@ error[E0716]: temporary value dropped while borrowed\n LL |     v5.push(&id('z'));\n    |              ^^^^^^^ - temporary value is freed at the end of this statement\n    |              |\n-   |              creates a temporary which is freed while still in use\n+   |              creates a temporary value which is freed while still in use\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |                                     -- borrow later used here"}, {"sha": "25e344fedfb25e1e0eea58c3a6e78341caacd55f", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-ref-into-rvalue.rs:4:11\n    |\n LL |     match Some(\"Hello\".to_string()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n ...\n LL |     }\n    |     - temporary value is freed at the end of this statement"}, {"sha": "d9cce2254dd95b802c955bb7d98fe366b7ea792f", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-15480.rs:6:10\n    |\n LL |         &id(3)\n-   |          ^^^^^ creates a temporary which is freed while still in use\n+   |          ^^^^^ creates a temporary value which is freed while still in use\n LL |     ];\n    |      - temporary value is freed at the end of this statement\n ..."}, {"sha": "81e858fa0ce017d764d458eb5566757e7eda8d01", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:12:27\n    |\n LL |         let ss: &isize = &id(1);\n-   |                           ^^^^^ creates a temporary which is freed while still in use\n+   |                           ^^^^^ creates a temporary value which is freed while still in use\n ...\n LL |     }\n    |     - temporary value is freed at the end of this statement"}, {"sha": "b70bf69d688a5960acce607161fec561b4b5b00d", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/slice-borrow.rs:6:28\n    |\n LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n-   |                            ^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |                            ^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n ...\n LL |     }\n    |     - temporary value is freed at the end of this statement"}, {"sha": "cedcb7367949f51cfc1578233826a05731b367e6", "filename": "src/test/ui/static/static-drop-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -13,7 +13,7 @@ LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                      ------^^^^^^^^-\n    |                                                      |     |       |\n    |                                                      |     |       temporary value is freed at the end of this statement\n-   |                                                      |     creates a temporary which is freed while still in use\n+   |                                                      |     creates a temporary value which is freed while still in use\n    |                                                      using this value as a static requires that borrow lasts for `'static`\n \n error[E0493]: destructor of `WithDtor` cannot be evaluated at compile-time\n@@ -31,7 +31,7 @@ LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                     ------^^^^^^^^-\n    |                                                     |     |       |\n    |                                                     |     |       temporary value is freed at the end of this statement\n-   |                                                     |     creates a temporary which is freed while still in use\n+   |                                                     |     creates a temporary value which is freed while still in use\n    |                                                     using this value as a constant requires that borrow lasts for `'static`\n \n error[E0493]: destructor of `(WithDtor, i32)` cannot be evaluated at compile-time"}, {"sha": "133d8ec2e1e519bf4d6f58cc55b7a59a369b9c92", "filename": "src/test/ui/static/static-reference-to-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -6,7 +6,7 @@ LL | fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n LL |     self_.statefn = &id(state2 as StateMachineFunc);\n    |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |     |                |\n-   |     |                creates a temporary which is freed while still in use\n+   |     |                creates a temporary value which is freed while still in use\n    |     assignment requires that borrow lasts for `'1`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -17,7 +17,7 @@ LL | fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n LL |     self_.statefn = &id(state3 as StateMachineFunc);\n    |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |     |                |\n-   |     |                creates a temporary which is freed while still in use\n+   |     |                creates a temporary value which is freed while still in use\n    |     assignment requires that borrow lasts for `'1`\n \n error[E0716]: temporary value dropped while borrowed\n@@ -28,7 +28,7 @@ LL | fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n LL |     self_.statefn = &id(finished as StateMachineFunc);\n    |     -----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |     |                |\n-   |     |                creates a temporary which is freed while still in use\n+   |     |                creates a temporary value which is freed while still in use\n    |     assignment requires that borrow lasts for `'1`\n \n error[E0515]: cannot return value referencing temporary value"}, {"sha": "1a607e3c014a3134006f59b3e899adfd4733f974", "filename": "src/test/ui/static/static-region-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-region-bound.rs:10:14\n    |\n LL |     let x = &id(3);\n-   |              ^^^^^ creates a temporary which is freed while still in use\n+   |              ^^^^^ creates a temporary value which is freed while still in use\n LL |     f(x);\n    |     ---- argument requires that borrow lasts for `'static`\n LL | }"}, {"sha": "2d29dec888e8d32f40f110e71278cd85aa231701", "filename": "src/test/ui/statics/issue-44373.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatics%2Fissue-44373.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Fstatics%2Fissue-44373.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-44373.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -2,7 +2,7 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-44373.rs:4:42\n    |\n LL |     let _val: &'static [&'static u32] = &[&FOO];\n-   |               -----------------------    ^^^^^^ creates a temporary which is freed while still in use\n+   |               -----------------------    ^^^^^^ creates a temporary value which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n LL | }"}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "b4b50d98192b1b0eca22229899409b553bc3daf0", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34115d040b43d9a0dcc313c6282520a86d1e6f61/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=34115d040b43d9a0dcc313c6282520a86d1e6f61", "patch": "@@ -1,4 +1,4 @@\n-error: target features paca, pacg must all be enabled or disabled together\n+error: the target features paca, pacg must all be either enabled or disabled together\n \n error: aborting due to previous error\n "}]}