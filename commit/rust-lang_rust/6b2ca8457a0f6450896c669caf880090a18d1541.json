{"sha": "6b2ca8457a0f6450896c669caf880090a18d1541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMmNhODQ1N2EwZjY0NTA4OTZjNjY5Y2FmODgwMDkwYTE4ZDE1NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T09:23:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T09:23:22Z"}, "message": "Auto merge of #75503 - JulianKnodt:opt_opt, r=oli-obk\n\nClean up some mir transform passes\n\nI noticed a few places where there were intermediates being created\nin MIR optimization passes, so I removed them.\n\nI also changed some `Some(..)` into just `..` and wrap `Some(..)` at the function end, doing early returns for `None`.\n\nI was generally looking for some easy optimizations in theses passes, and hopefully these should improve the runtime of these passes by a tinnnyyyyy bit.\n\nr? @oli-obk", "tree": {"sha": "e57c6a74533ce74bdbff555de0259d6290b09681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57c6a74533ce74bdbff555de0259d6290b09681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2ca8457a0f6450896c669caf880090a18d1541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2ca8457a0f6450896c669caf880090a18d1541", "html_url": "https://github.com/rust-lang/rust/commit/6b2ca8457a0f6450896c669caf880090a18d1541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2ca8457a0f6450896c669caf880090a18d1541/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43bec40138bab10c08ac916bff2f2f81b2b70669", "url": "https://api.github.com/repos/rust-lang/rust/commits/43bec40138bab10c08ac916bff2f2f81b2b70669", "html_url": "https://github.com/rust-lang/rust/commit/43bec40138bab10c08ac916bff2f2f81b2b70669"}, {"sha": "fd63bf7262d616e8fb5d3465a736434ddc81ff99", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd63bf7262d616e8fb5d3465a736434ddc81ff99", "html_url": "https://github.com/rust-lang/rust/commit/fd63bf7262d616e8fb5d3465a736434ddc81ff99"}], "stats": {"total": 165, "additions": 72, "deletions": 93}, "files": [{"sha": "324289166b9fb0c913929dadcc63863979d8d44c", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=6b2ca8457a0f6450896c669caf880090a18d1541", "patch": "@@ -86,12 +86,11 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 .skip(1)\n                 .take(arg_count)\n                 .map(|(local, _)| Place::from(local))\n-                .filter(needs_retag)\n-                .collect::<Vec<_>>();\n+                .filter(needs_retag);\n             // Emit their retags.\n             basic_blocks[START_BLOCK].statements.splice(\n                 0..0,\n-                places.into_iter().map(|place| Statement {\n+                places.map(|place| Statement {\n                     source_info,\n                     kind: StatementKind::Retag(RetagKind::FnEntry, box (place)),\n                 }),\n@@ -101,29 +100,24 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         // PART 2\n         // Retag return values of functions.  Also escape-to-raw the argument of `drop`.\n         // We collect the return destinations because we cannot mutate while iterating.\n-        let mut returns: Vec<(SourceInfo, Place<'tcx>, BasicBlock)> = Vec::new();\n-        for block_data in basic_blocks.iter_mut() {\n-            match block_data.terminator().kind {\n-                TerminatorKind::Call { ref destination, .. } => {\n-                    // Remember the return destination for later\n-                    if let Some(ref destination) = destination {\n-                        if needs_retag(&destination.0) {\n-                            returns.push((\n-                                block_data.terminator().source_info,\n-                                destination.0,\n-                                destination.1,\n-                            ));\n-                        }\n+        let returns = basic_blocks\n+            .iter_mut()\n+            .filter_map(|block_data| {\n+                match block_data.terminator().kind {\n+                    TerminatorKind::Call { destination: Some(ref destination), .. }\n+                        if needs_retag(&destination.0) =>\n+                    {\n+                        // Remember the return destination for later\n+                        Some((block_data.terminator().source_info, destination.0, destination.1))\n                     }\n-                }\n-                TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n+\n                     // `Drop` is also a call, but it doesn't return anything so we are good.\n-                }\n-                _ => {\n+                    TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => None,\n                     // Not a block ending in a Call -> ignore.\n+                    _ => None,\n                 }\n-            }\n-        }\n+            })\n+            .collect::<Vec<_>>();\n         // Now we go over the returns we collected to retag the return values.\n         for (source_info, dest_place, dest_block) in returns {\n             basic_blocks[dest_block].statements.insert("}, {"sha": "66989a902447d6076071f0936672459dc276f4e9", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=6b2ca8457a0f6450896c669caf880090a18d1541", "patch": "@@ -12,26 +12,24 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n         for bb in basic_blocks {\n             bb.expand_statements(|stmt| {\n                 // FIXME(eddyb) don't match twice on `stmt.kind` (post-NLL).\n-                if let StatementKind::Assign(box (_, ref rhs)) = stmt.kind {\n-                    if let Rvalue::Aggregate(ref kind, _) = *rhs {\n-                        // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n-                        if let AggregateKind::Array(_) = **kind {\n-                            return None;\n-                        }\n-                    } else {\n+                match stmt.kind {\n+                    // FIXME(#48193) Deaggregate arrays when it's cheaper to do so.\n+                    StatementKind::Assign(box (\n+                        _,\n+                        Rvalue::Aggregate(box AggregateKind::Array(_), _),\n+                    )) => {\n                         return None;\n                     }\n-                } else {\n-                    return None;\n+                    StatementKind::Assign(box (_, Rvalue::Aggregate(_, _))) => {}\n+                    _ => return None,\n                 }\n \n                 let stmt = stmt.replace_nop();\n                 let source_info = stmt.source_info;\n                 let (lhs, kind, operands) = match stmt.kind {\n-                    StatementKind::Assign(box (lhs, rvalue)) => match rvalue {\n-                        Rvalue::Aggregate(kind, operands) => (lhs, kind, operands),\n-                        _ => bug!(),\n-                    },\n+                    StatementKind::Assign(box (lhs, Rvalue::Aggregate(kind, operands))) => {\n+                        (lhs, kind, operands)\n+                    }\n                     _ => bug!(),\n                 };\n "}, {"sha": "84082edd1933f61ec858fe2abba005a3ede99ec9", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=6b2ca8457a0f6450896c669caf880090a18d1541", "patch": "@@ -246,12 +246,14 @@ fn get_arm_identity_info<'a, 'tcx>(\n         tmp_assigned_vars.insert(*r);\n     }\n \n-    let mut dbg_info_to_adjust = Vec::new();\n-    for (i, var_info) in debug_info.iter().enumerate() {\n-        if tmp_assigned_vars.contains(var_info.place.local) {\n-            dbg_info_to_adjust.push(i);\n-        }\n-    }\n+    let dbg_info_to_adjust: Vec<_> =\n+        debug_info\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(i, var_info)| {\n+                if tmp_assigned_vars.contains(var_info.place.local) { Some(i) } else { None }\n+            })\n+            .collect();\n \n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n@@ -461,14 +463,14 @@ fn match_get_variant_field<'tcx>(\n     stmt: &Statement<'tcx>,\n ) -> Option<(Local, Local, VarField<'tcx>, &'tcx List<PlaceElem<'tcx>>)> {\n     match &stmt.kind {\n-        StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n-            Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n-                let local_into = place_into.as_local()?;\n-                let (local_from, vf) = match_variant_field_place(*pf)?;\n-                Some((local_into, local_from, vf, pf.projection))\n-            }\n-            _ => None,\n-        },\n+        StatementKind::Assign(box (\n+            place_into,\n+            Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)),\n+        )) => {\n+            let local_into = place_into.as_local()?;\n+            let (local_from, vf) = match_variant_field_place(*pf)?;\n+            Some((local_into, local_from, vf, pf.projection))\n+        }\n         _ => None,\n     }\n }\n@@ -479,14 +481,11 @@ fn match_get_variant_field<'tcx>(\n /// ```\n fn match_set_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n     match &stmt.kind {\n-        StatementKind::Assign(box (place_from, rvalue_into)) => match rvalue_into {\n-            Rvalue::Use(Operand::Move(place_into)) => {\n-                let local_into = place_into.as_local()?;\n-                let (local_from, vf) = match_variant_field_place(*place_from)?;\n-                Some((local_into, local_from, vf))\n-            }\n-            _ => None,\n-        },\n+        StatementKind::Assign(box (place_from, Rvalue::Use(Operand::Move(place_into)))) => {\n+            let local_into = place_into.as_local()?;\n+            let (local_from, vf) = match_variant_field_place(*place_from)?;\n+            Some((local_into, local_from, vf))\n+        }\n         _ => None,\n     }\n }"}, {"sha": "4cca4d223c0cb6dd7c2f6cff5e71b762b549012b", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=6b2ca8457a0f6450896c669caf880090a18d1541", "patch": "@@ -99,26 +99,18 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n             if let TerminatorKind::SwitchInt { values, targets, .. } =\n                 &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n             {\n-                let vals = &*values;\n-                let zipped = vals.iter().zip(targets.iter());\n-\n-                let mut matched_values = Vec::with_capacity(allowed_variants.len());\n-                let mut matched_targets = Vec::with_capacity(allowed_variants.len() + 1);\n-\n-                for (val, target) in zipped {\n-                    if allowed_variants.contains(val) {\n-                        matched_values.push(*val);\n-                        matched_targets.push(*target);\n-                    } else {\n-                        trace!(\"eliminating {:?} -> {:?}\", val, target);\n-                    }\n-                }\n-\n-                // handle the \"otherwise\" branch\n-                matched_targets.push(targets.pop().unwrap());\n-\n-                *values = matched_values.into();\n-                *targets = matched_targets;\n+                // take otherwise out early\n+                let otherwise = targets.pop().unwrap();\n+                assert_eq!(targets.len(), values.len());\n+                let mut i = 0;\n+                targets.retain(|_| {\n+                    let keep = allowed_variants.contains(&values[i]);\n+                    i += 1;\n+                    keep\n+                });\n+                targets.push(otherwise);\n+\n+                values.to_mut().retain(|var| allowed_variants.contains(var));\n             } else {\n                 unreachable!()\n             }"}, {"sha": "fa362c66fb2897a02661f19e2a50486830f1021e", "filename": "src/librustc_mir/transform/unreachable_prop.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2ca8457a0f6450896c669caf880090a18d1541/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funreachable_prop.rs?ref=6b2ca8457a0f6450896c669caf880090a18d1541", "patch": "@@ -67,18 +67,13 @@ fn remove_successors<F>(\n where\n     F: Fn(BasicBlock) -> bool,\n {\n-    match *terminator_kind {\n-        TerminatorKind::Goto { target } if predicate(target) => Some(TerminatorKind::Unreachable),\n+    let terminator = match *terminator_kind {\n+        TerminatorKind::Goto { target } if predicate(target) => TerminatorKind::Unreachable,\n         TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n             let original_targets_len = targets.len();\n             let (otherwise, targets) = targets.split_last().unwrap();\n-            let retained = values\n-                .iter()\n-                .zip(targets.iter())\n-                .filter(|(_, &t)| !predicate(t))\n-                .collect::<Vec<_>>();\n-            let mut values = retained.iter().map(|&(v, _)| *v).collect::<Vec<_>>();\n-            let mut targets = retained.iter().map(|&(_, d)| *d).collect::<Vec<_>>();\n+            let (mut values, mut targets): (Vec<_>, Vec<_>) =\n+                values.iter().zip(targets.iter()).filter(|(_, &t)| !predicate(t)).unzip();\n \n             if !predicate(*otherwise) {\n                 targets.push(*otherwise);\n@@ -89,20 +84,21 @@ where\n             let retained_targets_len = targets.len();\n \n             if targets.is_empty() {\n-                Some(TerminatorKind::Unreachable)\n+                TerminatorKind::Unreachable\n             } else if targets.len() == 1 {\n-                Some(TerminatorKind::Goto { target: targets[0] })\n+                TerminatorKind::Goto { target: targets[0] }\n             } else if original_targets_len != retained_targets_len {\n-                Some(TerminatorKind::SwitchInt {\n+                TerminatorKind::SwitchInt {\n                     discr: discr.clone(),\n                     switch_ty,\n                     values: Cow::from(values),\n                     targets,\n-                })\n+                }\n             } else {\n-                None\n+                return None;\n             }\n         }\n-        _ => None,\n-    }\n+        _ => return None,\n+    };\n+    Some(terminator)\n }"}]}