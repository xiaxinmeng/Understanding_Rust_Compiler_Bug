{"sha": "1dcfd144b95dedce607c764dec6c5931f5be0ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2ZkMTQ0Yjk1ZGVkY2U2MDdjNzY0ZGVjNmM1OTMxZjViZTBjZWI=", "commit": {"author": {"name": "Dominik Winecki", "email": "dominikwinecki@gmail.com", "date": "2018-01-16T19:47:14Z"}, "committer": {"name": "Dominik Winecki", "email": "dominikwinecki@gmail.com", "date": "2018-01-16T19:47:14Z"}, "message": "Make non-found module name optional\n\nNo longer uses a magic string for missing or root module.", "tree": {"sha": "540cc0922f0217ce175c7bbf369cc5c6736832ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540cc0922f0217ce175c7bbf369cc5c6736832ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcfd144b95dedce607c764dec6c5931f5be0ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcfd144b95dedce607c764dec6c5931f5be0ceb", "html_url": "https://github.com/rust-lang/rust/commit/1dcfd144b95dedce607c764dec6c5931f5be0ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcfd144b95dedce607c764dec6c5931f5be0ceb/comments", "author": {"login": "dominikWin", "id": 10552362, "node_id": "MDQ6VXNlcjEwNTUyMzYy", "avatar_url": "https://avatars.githubusercontent.com/u/10552362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dominikWin", "html_url": "https://github.com/dominikWin", "followers_url": "https://api.github.com/users/dominikWin/followers", "following_url": "https://api.github.com/users/dominikWin/following{/other_user}", "gists_url": "https://api.github.com/users/dominikWin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dominikWin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dominikWin/subscriptions", "organizations_url": "https://api.github.com/users/dominikWin/orgs", "repos_url": "https://api.github.com/users/dominikWin/repos", "events_url": "https://api.github.com/users/dominikWin/events{/privacy}", "received_events_url": "https://api.github.com/users/dominikWin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dominikWin", "id": 10552362, "node_id": "MDQ6VXNlcjEwNTUyMzYy", "avatar_url": "https://avatars.githubusercontent.com/u/10552362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dominikWin", "html_url": "https://github.com/dominikWin", "followers_url": "https://api.github.com/users/dominikWin/followers", "following_url": "https://api.github.com/users/dominikWin/following{/other_user}", "gists_url": "https://api.github.com/users/dominikWin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dominikWin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dominikWin/subscriptions", "organizations_url": "https://api.github.com/users/dominikWin/orgs", "repos_url": "https://api.github.com/users/dominikWin/repos", "events_url": "https://api.github.com/users/dominikWin/events{/privacy}", "received_events_url": "https://api.github.com/users/dominikWin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da569fa9ddf8369a9809184d43c600dc06bd4b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da569fa9ddf8369a9809184d43c600dc06bd4b4d", "html_url": "https://github.com/rust-lang/rust/commit/da569fa9ddf8369a9809184d43c600dc06bd4b4d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "71bebc327325901486d55b166901fb5b830114db", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dcfd144b95dedce607c764dec6c5931f5be0ceb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcfd144b95dedce607c764dec6c5931f5be0ceb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1dcfd144b95dedce607c764dec6c5931f5be0ceb", "patch": "@@ -4062,7 +4062,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n-fn module_to_string(module: Module) -> String {\n+fn module_to_string(module: Module) -> Option<String> {\n     let mut names = Vec::new();\n \n     fn collect_mod(names: &mut Vec<Ident>, module: Module) {\n@@ -4080,12 +4080,12 @@ fn module_to_string(module: Module) -> String {\n     collect_mod(&mut names, module);\n \n     if names.is_empty() {\n-        return \"???\".to_string();\n+        return None;\n     }\n-    names_to_string(&names.into_iter()\n+    Some(names_to_string(&names.into_iter()\n                         .rev()\n                         .map(|n| dummy_spanned(n))\n-                        .collect::<Vec<_>>())\n+                        .collect::<Vec<_>>()))\n }\n \n fn err_path_resolution() -> PathResolution {"}, {"sha": "b03f040ba98543edf76f20ecabd9801e08e4d7c3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dcfd144b95dedce607c764dec6c5931f5be0ceb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcfd144b95dedce607c764dec6c5931f5be0ceb/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1dcfd144b95dedce607c764dec6c5931f5be0ceb", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     fn resolve_import(&mut self, directive: &'b ImportDirective<'b>) -> bool {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n                names_to_string(&directive.module_path[..]),\n-               module_to_string(self.current_module));\n+               module_to_string(self.current_module).unwrap_or(\"???\".to_string()));\n \n         self.current_module = directive.parent;\n \n@@ -773,10 +773,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         None => \"\".to_owned(),\n                     };\n                 let module_str = module_to_string(module);\n-                let msg = if &module_str == \"???\" {\n-                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n-                } else {\n+                let msg = if let Some(module_str) = module_str {\n                     format!(\"no `{}` in `{}`{}\", ident, module_str, lev_suggestion)\n+                } else {\n+                    format!(\"no `{}` in the root{}\", ident, lev_suggestion)\n                 };\n                 Some((span, msg))\n             } else {"}]}