{"sha": "dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZGY2ZmQ5ZjhmZDMwYjdmY2E0OTVhNDM0NTllNWNiNzI5OWNhZmE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T18:52:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T18:52:08Z"}, "message": "Fix some more basic clippy lints", "tree": {"sha": "bca26487fbc7b89683adc42a876a34a736fd1165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca26487fbc7b89683adc42a876a34a736fd1165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "html_url": "https://github.com/rust-lang/rust/commit/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9485d6efbaf66a90eac0d6a90faa7520ca670ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9485d6efbaf66a90eac0d6a90faa7520ca670ee6", "html_url": "https://github.com/rust-lang/rust/commit/9485d6efbaf66a90eac0d6a90faa7520ca670ee6"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "be5f063f0fca852233e39c6201dc69b6d5d78806", "filename": "crates/ide_db/src/assists.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fassists.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -52,12 +52,12 @@ impl AssistKind {\n \n         match self {\n             AssistKind::None | AssistKind::Generate => true,\n-            AssistKind::Refactor => match other {\n+            AssistKind::Refactor => matches!(\n+                other,\n                 AssistKind::RefactorExtract\n-                | AssistKind::RefactorInline\n-                | AssistKind::RefactorRewrite => true,\n-                _ => false,\n-            },\n+                    | AssistKind::RefactorInline\n+                    | AssistKind::RefactorRewrite\n+            ),\n             _ => false,\n         }\n     }"}, {"sha": "da3b9bf1e9c75f70b93e165224b51d029842622e", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -166,7 +166,7 @@ impl ActiveParameter {\n \n         let idx = active_parameter?;\n         let mut params = signature.params(sema.db);\n-        if !(idx < params.len()) {\n+        if params.len() <= idx {\n             cov_mark::hit!(too_many_arguments);\n             return None;\n         }"}, {"sha": "e9fb71fd8cd000a38f56b1bad667898aa720fdaa", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -153,7 +153,7 @@ impl NameClass {\n                                         path_segment.name_ref()\n                                     },\n                                     PathSegmentKind::Name(name_ref) => Some(name_ref),\n-                                    _ => return None,\n+                                    _ => None,\n                                 }\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n@@ -341,7 +341,7 @@ impl NameRefClass {\n                             hir::AssocItem::TypeAlias(it) => Some(*it),\n                             _ => None,\n                         })\n-                        .find(|alias| &alias.name(sema.db).to_string() == &name_ref.text())\n+                        .find(|alias| alias.name(sema.db).to_string() == name_ref.text())\n                     {\n                         return Some(NameRefClass::Definition(Definition::ModuleDef(\n                             ModuleDef::TypeAlias(ty),"}, {"sha": "80cc2ca815eed440c4086f822b3c9cfe7d5cb366", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -181,7 +181,7 @@ enum ImportGranularityGuess {\n }\n \n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n-pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n+pub fn insert_use(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     let _p = profile::span(\"insert_use\");\n     let mut mb = match cfg.granularity {\n         ImportGranularity::Crate => Some(MergeBehavior::Crate),"}, {"sha": "69fc84874c4c6c807b65b3e73413e8410527c5e6", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -162,7 +162,7 @@ fn recursive_merge(\n             }\n             Err(_)\n                 if merge == MergeBehavior::Module\n-                    && use_trees.len() > 0\n+                    && !use_trees.is_empty()\n                     && rhs_t.use_tree_list().is_some() =>\n             {\n                 return None"}, {"sha": "4c2133e65b157668a7541d933531f646a014abf9", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -3,10 +3,7 @@\n //!\n //! It can be viewed as a dual for `Change`.\n \n-use std::{\n-    collections::hash_map::Entry,\n-    iter::{self, FromIterator},\n-};\n+use std::{collections::hash_map::Entry, iter};\n \n use base_db::{AnchoredPathBuf, FileId};\n use rustc_hash::FxHashMap;\n@@ -32,7 +29,7 @@ impl SourceChange {\n \n     pub fn from_text_edit(file_id: FileId, edit: TextEdit) -> Self {\n         SourceChange {\n-            source_file_edits: FxHashMap::from_iter(iter::once((file_id, edit))),\n+            source_file_edits: iter::once((file_id, edit)).collect(),\n             ..Default::default()\n         }\n     }"}, {"sha": "370d0df0076db359286fe40012553f3d944204b8", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -26,7 +26,7 @@ impl TryEnum {\n             _ => return None,\n         };\n         TryEnum::ALL.iter().find_map(|&var| {\n-            if &enum_.name(sema.db).to_string() == var.type_name() {\n+            if enum_.name(sema.db).to_string() == var.type_name() {\n                 return Some(var);\n             }\n             None"}, {"sha": "8b03ade81f70dc0d8182438104ae394375e17ab1", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -105,14 +105,12 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n             patterns::pattern(p);\n             if variadic_param(p) {\n                 res = Variadic(true)\n+            } else if p.at(T![:]) {\n+                types::ascription(p)\n             } else {\n-                if p.at(T![:]) {\n-                    types::ascription(p)\n-                } else {\n-                    // test_err missing_fn_param_type\n-                    // fn f(x y: i32, z, t: i32) {}\n-                    p.error(\"missing type for function parameter\")\n-                }\n+                // test_err missing_fn_param_type\n+                // fn f(x y: i32, z, t: i32) {}\n+                p.error(\"missing type for function parameter\")\n             }\n         }\n         // test value_parameters_no_patterns\n@@ -131,12 +129,10 @@ fn param(p: &mut Parser, m: Marker, flavor: Flavor) -> Variadic {\n                 patterns::pattern_single(p);\n                 if variadic_param(p) {\n                     res = Variadic(true)\n+                } else if p.at(T![:]) {\n+                    types::ascription(p)\n                 } else {\n-                    if p.at(T![:]) {\n-                        types::ascription(p)\n-                    } else {\n-                        p.error(\"missing type for function parameter\")\n-                    }\n+                    p.error(\"missing type for function parameter\")\n                 }\n             } else {\n                 types::type_(p);"}, {"sha": "73d662818022fd6c12a58af59a480d39b4108edc", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=dfdf6fd9f8fd30b7fca495a43459e5cb7299cafa", "patch": "@@ -91,7 +91,7 @@ impl ast::Expr {\n                                         | ast::Effect::Const(_)\n                                 )\n                             }\n-                            ast::Expr::ClosureExpr(__) => true,\n+                            ast::Expr::ClosureExpr(_) => true,\n                             _ => false,\n                         };\n                         cb(expr);"}]}