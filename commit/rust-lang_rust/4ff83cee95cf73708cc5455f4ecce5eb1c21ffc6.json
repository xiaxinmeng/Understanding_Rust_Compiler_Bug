{"sha": "4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "node_id": "C_kwDOAAsO6NoAKDRmZjgzY2VlOTVjZjczNzA4Y2M1NDU1ZjRlY2NlNWViMWMyMWZmYzY", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-09-28T00:36:58Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-09-28T00:36:58Z"}, "message": "Deduplicate some logic", "tree": {"sha": "5e6ab4e22a66d9090f919e54537399e58443bbbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6ab4e22a66d9090f919e54537399e58443bbbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "html_url": "https://github.com/rust-lang/rust/commit/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/comments", "author": {}, "committer": {}, "parents": [{"sha": "e9224b37968f8bf56c0bbac206312ef84dad3b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9224b37968f8bf56c0bbac206312ef84dad3b74", "html_url": "https://github.com/rust-lang/rust/commit/e9224b37968f8bf56c0bbac206312ef84dad3b74"}], "stats": {"total": 104, "additions": 42, "deletions": 62}, "files": [{"sha": "0e82e4956c7c17d582329b4c3a7f313c260f9f1f", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 27, "deletions": 47, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "patch": "@@ -1521,67 +1521,47 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         use one of the `assume_init` methods to access the inner value\"\n                     ));\n                 } else if tcx.is_diagnostic_item(sym::RefCell, inner_id) {\n-                    match mutable {\n-                        Some(Mutability::Not) => {\n-                            err.span_suggestion_verbose(\n-                                expr.span.shrink_to_hi(),\n-                                format!(\n-                                    \"use `.borrow()` to borrow the `{ty}`, \\\n-                                    panicking if any outstanding mutable borrows exist.\"\n-                                ),\n-                                \".borrow()\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n+                    let (suggestion, borrow_kind, panic_if) = match mutable {\n+                        Some(Mutability::Not) => (\".borrow()\", \"borrow\", \"a mutable borrow exists\"),\n                         Some(Mutability::Mut) => {\n-                            err.span_suggestion_verbose(\n-                                expr.span.shrink_to_hi(),\n-                                format!(\n-                                    \"use `.borrow_mut()` to mutably borrow the `{ty}`, \\\n-                                    panicking if any outstanding borrows exist.\"\n-                                ),\n-                                \".borrow_mut()\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                            (\".borrow_mut()\", \"mutably borrow\", \"any borrows exist\")\n                         }\n                         None => return,\n-                    }\n+                    };\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{suggestion}` to {borrow_kind} the `{ty}`, \\\n+                            panicking if {panic_if}\"\n+                        ),\n+                        suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 } else if tcx.is_diagnostic_item(sym::Mutex, inner_id) {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_hi(),\n                         format!(\n-                            \"use `.lock()` to borrow the `{ty}`, \\\n+                            \"use `.lock().unwrap()` to borrow the `{ty}`, \\\n                             blocking the current thread until it can be acquired\"\n                         ),\n                         \".lock().unwrap()\",\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else if tcx.is_diagnostic_item(sym::RwLock, inner_id) {\n-                    match mutable {\n-                        Some(Mutability::Not) => {\n-                            err.span_suggestion_verbose(\n-                                expr.span.shrink_to_hi(),\n-                                format!(\n-                                    \"use `.read()` to borrow the `{ty}`, \\\n-                                    blocking the current thread until it can be acquired\"\n-                                ),\n-                                \".read().unwrap()\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n-                        Some(Mutability::Mut) => {\n-                            err.span_suggestion_verbose(\n-                                expr.span.shrink_to_hi(),\n-                                format!(\n-                                    \"use `.write()` to mutably borrow the `{ty}`, \\\n-                                    blocking the current thread until it can be acquired\"\n-                                ),\n-                                \".write().unwrap()\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n+                    let (suggestion, borrow_kind) = match mutable {\n+                        Some(Mutability::Not) => (\".read().unwrap()\", \"borrow\"),\n+                        Some(Mutability::Mut) => (\".write().unwrap()\", \"mutably borrow\"),\n                         None => return,\n-                    }\n+                    };\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{suggestion}` to {borrow_kind} the `{ty}`, \\\n+                            blocking the current thread until it can be acquired\"\n+                        ),\n+                        suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 } else {\n                     return;\n                 };"}, {"sha": "7af7391ca851d5148c2584869aa58e05979881fe", "filename": "src/test/ui/suggestions/inner_type.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed?ref=4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "patch": "@@ -16,25 +16,25 @@ fn main() {\n \n     other_item.borrow().method();\n     //~^ ERROR no method named `method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n+    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if a mutable borrow exists\n \n     other_item.borrow_mut().some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n+    //~| HELP .borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any borrows exist\n \n     let another_item = std::sync::Mutex::new(Struct { p: 42_u32 });\n \n     another_item.lock().unwrap().method();\n     //~^ ERROR no method named `method` found for struct `Mutex` in the current scope [E0599]\n-    //~| HELP use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP use `.lock().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n \n     let another_item = std::sync::RwLock::new(Struct { p: 42_u32 });\n \n     another_item.read().unwrap().method();\n     //~^ ERROR no method named `method` found for struct `RwLock` in the current scope [E0599]\n-    //~| HELP use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP  use `.read().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n \n     another_item.write().unwrap().some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RwLock` in the current scope [E0599]\n-    //~| HELP use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP use `.write().unwrap()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n }"}, {"sha": "4aca50716258aa746a4b50ce87a7a4ba451bc983", "filename": "src/test/ui/suggestions/inner_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs?ref=4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "patch": "@@ -16,25 +16,25 @@ fn main() {\n \n     other_item.method();\n     //~^ ERROR no method named `method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n+    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if a mutable borrow exists\n \n     other_item.some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n+    //~| HELP .borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any borrows exist\n \n     let another_item = std::sync::Mutex::new(Struct { p: 42_u32 });\n \n     another_item.method();\n     //~^ ERROR no method named `method` found for struct `Mutex` in the current scope [E0599]\n-    //~| HELP use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP use `.lock().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n \n     let another_item = std::sync::RwLock::new(Struct { p: 42_u32 });\n \n     another_item.method();\n     //~^ ERROR no method named `method` found for struct `RwLock` in the current scope [E0599]\n-    //~| HELP use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP  use `.read().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n \n     another_item.some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RwLock` in the current scope [E0599]\n-    //~| HELP use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+    //~| HELP use `.write().unwrap()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n }"}, {"sha": "5ac3d04f104142d803267d33be1ef9ec72112c08", "filename": "src/test/ui/suggestions/inner_type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr?ref=4ff83cee95cf73708cc5455f4ecce5eb1c21ffc6", "patch": "@@ -9,7 +9,7 @@ note: the method `method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn method(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n+help: use `.borrow()` to borrow the `Struct<u32>`, panicking if a mutable borrow exists\n    |\n LL |     other_item.borrow().method();\n    |               +++++++++\n@@ -25,7 +25,7 @@ note: the method `some_mutable_method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn some_mutable_method(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n+help: use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any borrows exist\n    |\n LL |     other_item.borrow_mut().some_mutable_method();\n    |               +++++++++++++\n@@ -41,7 +41,7 @@ note: the method `method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn method(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+help: use `.lock().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n    |\n LL |     another_item.lock().unwrap().method();\n    |                 ++++++++++++++++\n@@ -57,7 +57,7 @@ note: the method `method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn method(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+help: use `.read().unwrap()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n    |\n LL |     another_item.read().unwrap().method();\n    |                 ++++++++++++++++\n@@ -73,7 +73,7 @@ note: the method `some_mutable_method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn some_mutable_method(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+help: use `.write().unwrap()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n    |\n LL |     another_item.write().unwrap().some_mutable_method();\n    |                 +++++++++++++++++"}]}