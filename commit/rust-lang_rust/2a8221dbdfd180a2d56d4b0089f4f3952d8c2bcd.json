{"sha": "2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "node_id": "C_kwDOAAsO6NoAKDJhODIyMWRiZGZkMTgwYTJkNTZkNGIwMDg5ZjRmMzk1MmQ4YzJiY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-11T12:13:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-11T12:13:04Z"}, "message": "Auto merge of #111454 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nr? `@ghost`", "tree": {"sha": "b17d172e9d53a91eab56bd3d5f64db86c0c6f76d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17d172e9d53a91eab56bd3d5f64db86c0c6f76d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "html_url": "https://github.com/rust-lang/rust/commit/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1", "html_url": "https://github.com/rust-lang/rust/commit/f8d8ffa2eba53928662dc57bc3a6c5608beb26f1"}, {"sha": "b0b76a5db31c57aace6fd7c6302f02b3dd63fae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b76a5db31c57aace6fd7c6302f02b3dd63fae0", "html_url": "https://github.com/rust-lang/rust/commit/b0b76a5db31c57aace6fd7c6302f02b3dd63fae0"}], "stats": {"total": 1533, "additions": 1122, "deletions": 411}, "files": [{"sha": "e0c72d6899e988316b18f33e9188dc0dea4cc50a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -5122,9 +5122,9 @@ checksum = \"9e79c4d996edb816c91e4308506774452e55e95c3c9de07b6729e17e15a5ef81\"\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.6.2\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3e10f5f88ce8c331a388deda1e6e2bd533c73ca89cc5f539a3df02ed35c8efba\"\n+checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n dependencies = [\n  \"bstr 1.3.0\",\n  \"cargo-platform\","}, {"sha": "e2a7d484c234b34da3ba479a827a82da86f68b77", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 277, "deletions": 87, "changes": 364, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -19,26 +19,26 @@ checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.7.20\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\n+checksum = \"67fc08ce920c31afb70f013dcce1bfc3a3195de6a228474e45e1f145b36f8d04\"\n dependencies = [\n  \"memchr\",\n ]\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.70\"\n+version = \"1.0.71\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7de8ce5e0f9f8d88245311066a578d72b7af3e7088f32783804676302df237e4\"\n+checksum = \"9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8\"\n \n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n dependencies = [\n- \"hermit-abi\",\n+ \"hermit-abi 0.1.19\",\n  \"libc\",\n  \"winapi\",\n ]\n@@ -72,9 +72,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"bstr\"\n-version = \"1.1.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b45ea9b00a7b3f2988e9a65ad3917e62123c38dba709b666506207be96d1790b\"\n+checksum = \"c3d4260bcc2e8fc9df1eac4919a720effeb63a3f0952f5bf4944adfa18897f09\"\n dependencies = [\n  \"memchr\",\n  \"once_cell\",\n@@ -84,9 +84,9 @@ dependencies = [\n \n [[package]]\n name = \"camino\"\n-version = \"1.1.1\"\n+version = \"1.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"88ad0e1e3e88dd237a156ab9f571021b8a158caa0ae44b1968a241efb5144c1e\"\n+checksum = \"c530edf18f37068ac2d977409ed5cd50d53d73bc653c7647b48eb78976ac9ae2\"\n dependencies = [\n  \"serde\",\n ]\n@@ -102,9 +102,9 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.15.2\"\n+version = \"0.15.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"982a0cf6a99c350d7246035613882e376d58cebe571785abc5da4f648d53ac0a\"\n+checksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\n dependencies = [\n  \"camino\",\n  \"cargo-platform\",\n@@ -116,9 +116,9 @@ dependencies = [\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.78\"\n+version = \"1.0.79\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -166,19 +166,19 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-channel\"\n-version = \"0.5.6\"\n+version = \"0.5.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521\"\n+checksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\n dependencies = [\n  \"cfg-if\",\n  \"crossbeam-utils\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n-version = \"0.8.14\"\n+version = \"0.8.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f\"\n+checksum = \"3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -202,6 +202,27 @@ dependencies = [\n  \"termcolor\",\n ]\n \n+[[package]]\n+name = \"errno\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a\"\n+dependencies = [\n+ \"errno-dragonfly\",\n+ \"libc\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"errno-dragonfly\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"eyre\"\n version = \"0.6.8\"\n@@ -214,18 +235,18 @@ dependencies = [\n \n [[package]]\n name = \"fastrand\"\n-version = \"1.8.0\"\n+version = \"1.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499\"\n+checksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\n dependencies = [\n  \"instant\",\n ]\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.8\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -234,9 +255,9 @@ dependencies = [\n \n [[package]]\n name = \"gimli\"\n-version = \"0.27.0\"\n+version = \"0.27.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dec7af912d60cdbd3677c1af9352ebae6fb8394d165568a2234df0fa00f87793\"\n+checksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n \n [[package]]\n name = \"hermit-abi\"\n@@ -247,6 +268,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286\"\n+\n [[package]]\n name = \"humantime\"\n version = \"2.1.0\"\n@@ -268,11 +295,22 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n+[[package]]\n+name = \"io-lifetimes\"\n+version = \"1.0.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c66c74d2ae7e79a5a8f7ac924adbe38ee42a859c6539ad869eb51f0b52dc220\"\n+dependencies = [\n+ \"hermit-abi 0.3.1\",\n+ \"libc\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n [[package]]\n name = \"itoa\"\n-version = \"1.0.5\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440\"\n+checksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n \n [[package]]\n name = \"lazy_static\"\n@@ -282,9 +320,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.139\"\n+version = \"0.2.142\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n+checksum = \"6a987beff54b60ffa6d51982e1aa1146bc42f19bd26be28b0586f252fccf5317\"\n \n [[package]]\n name = \"libffi\"\n@@ -315,6 +353,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"linux-raw-sys\"\n+version = \"0.3.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ece97ea872ece730aed82664c424eb4c8291e1ff2480247ccf7409044bc6479f\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.4.9\"\n@@ -336,9 +380,9 @@ dependencies = [\n \n [[package]]\n name = \"measureme\"\n-version = \"10.1.0\"\n+version = \"10.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cbdc226fa10994e8f66a4d2f6f000148bc563a1c671b6dcd2135737018033d8a\"\n+checksum = \"1930d162935fecd56fc4e0f6729eb3483bac1264542eb4ea31570b86a434b6bc\"\n dependencies = [\n  \"log\",\n  \"memmap2\",\n@@ -395,18 +439,18 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.30.0\"\n+version = \"0.30.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"239da7f290cfa979f43f85a8efeee9a8a76d0827c356d37f9d3d7254d6b537fb\"\n+checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\n dependencies = [\n  \"memchr\",\n ]\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.16.0\"\n+version = \"1.17.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860\"\n+checksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n \n [[package]]\n name = \"owo-colors\"\n@@ -434,16 +478,16 @@ dependencies = [\n  \"cfg-if\",\n  \"instant\",\n  \"libc\",\n- \"redox_syscall\",\n+ \"redox_syscall 0.2.16\",\n  \"smallvec\",\n  \"winapi\",\n ]\n \n [[package]]\n name = \"perf-event-open-sys\"\n-version = \"1.0.1\"\n+version = \"3.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce9bedf5da2c234fdf2391ede2b90fabf585355f33100689bc364a3ea558561a\"\n+checksum = \"b29be2ba35c12c6939f6bc73187f728bba82c3c062ecdc5fa90ea739282a1f58\"\n dependencies = [\n  \"libc\",\n ]\n@@ -462,18 +506,18 @@ checksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.49\"\n+version = \"1.0.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n+checksum = \"2b63bdb0cd06f1f4dedf69b254734f9b45af66e4a031e42a7480257d9898b435\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.23\"\n+version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n+checksum = \"4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -517,11 +561,20 @@ dependencies = [\n  \"bitflags\",\n ]\n \n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\n+dependencies = [\n+ \"bitflags\",\n+]\n+\n [[package]]\n name = \"regex\"\n-version = \"1.7.0\"\n+version = \"1.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e076559ef8e241f2ae3479e36f97bd5741c0330689e217ad51ce2c76808b868a\"\n+checksum = \"af83e617f331cc6ae2da5443c602dfa5af81e517212d9d611a5b3ba1777b5370\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n@@ -536,24 +589,15 @@ checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.28\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848\"\n-\n-[[package]]\n-name = \"remove_dir_all\"\n-version = \"0.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n-dependencies = [\n- \"winapi\",\n-]\n+checksum = \"a5996294f19bd3aae0453a862ad728f60e6600695733dd5df01da90c54363a3c\"\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.21\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+checksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\n \n [[package]]\n name = \"rustc-hash\"\n@@ -588,11 +632,25 @@ dependencies = [\n  \"serde_json\",\n ]\n \n+[[package]]\n+name = \"rustix\"\n+version = \"0.37.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"acf8729d8542766f1b2cf77eb034d52f40d375bb8b615d0b147089946e16613d\"\n+dependencies = [\n+ \"bitflags\",\n+ \"errno\",\n+ \"io-lifetimes\",\n+ \"libc\",\n+ \"linux-raw-sys\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n [[package]]\n name = \"ryu\"\n-version = \"1.0.12\"\n+version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde\"\n+checksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n \n [[package]]\n name = \"scopeguard\"\n@@ -602,27 +660,27 @@ checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.16\"\n+version = \"1.0.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58bc9567378fc7690d6b2addae4e60ac2eeea07becb2c64b9f218b53865cba2a\"\n+checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.152\"\n+version = \"1.0.162\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n+checksum = \"71b2f6e1ab5c2b98c05f0f35b236b22e8df7ead6ffbf51d7808da7f8817e7ab6\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.152\"\n+version = \"1.0.162\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n+checksum = \"a2a0814352fd64b58489904a44ea8d90cb1a91dcb6b4f5ebabc32c8318e93cb6\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -631,9 +689,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.91\"\n+version = \"1.0.96\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n+checksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -657,9 +715,9 @@ checksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.107\"\n+version = \"2.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n+checksum = \"a34fcf3e8b60f57e6a14301a2e916d323af98b0ea63c599441eec8558660c822\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -668,41 +726,40 @@ dependencies = [\n \n [[package]]\n name = \"tempfile\"\n-version = \"3.3.0\"\n+version = \"3.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\n+checksum = \"b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998\"\n dependencies = [\n  \"cfg-if\",\n  \"fastrand\",\n- \"libc\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi\",\n+ \"redox_syscall 0.3.5\",\n+ \"rustix\",\n+ \"windows-sys 0.45.0\",\n ]\n \n [[package]]\n name = \"termcolor\"\n-version = \"1.1.3\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755\"\n+checksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\n dependencies = [\n  \"winapi-util\",\n ]\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.38\"\n+version = \"1.0.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0\"\n+checksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.38\"\n+version = \"1.0.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\n+checksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -711,10 +768,11 @@ dependencies = [\n \n [[package]]\n name = \"thread_local\"\n-version = \"1.1.4\"\n+version = \"1.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\n+checksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\n dependencies = [\n+ \"cfg-if\",\n  \"once_cell\",\n ]\n \n@@ -751,9 +809,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-subscriber\"\n-version = \"0.3.16\"\n+version = \"0.3.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a6176eae26dd70d0c919749377897b54a9276bd7061339665dd68777926b5a70\"\n+checksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\n dependencies = [\n  \"sharded-slab\",\n  \"thread_local\",\n@@ -762,9 +820,9 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.6.2\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3e10f5f88ce8c331a388deda1e6e2bd533c73ca89cc5f539a3df02ed35c8efba\"\n+checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n dependencies = [\n  \"bstr\",\n  \"cargo-platform\",\n@@ -784,9 +842,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.6\"\n+version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n+checksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n \n [[package]]\n name = \"valuable\"\n@@ -830,3 +888,135 @@ name = \"winapi-x86_64-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.45.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\n+dependencies = [\n+ \"windows-targets 0.42.2\",\n+]\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\n+dependencies = [\n+ \"windows-targets 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm 0.42.2\",\n+ \"windows_aarch64_msvc 0.42.2\",\n+ \"windows_i686_gnu 0.42.2\",\n+ \"windows_i686_msvc 0.42.2\",\n+ \"windows_x86_64_gnu 0.42.2\",\n+ \"windows_x86_64_gnullvm 0.42.2\",\n+ \"windows_x86_64_msvc 0.42.2\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm 0.48.0\",\n+ \"windows_aarch64_msvc 0.48.0\",\n+ \"windows_i686_gnu 0.48.0\",\n+ \"windows_i686_msvc 0.48.0\",\n+ \"windows_x86_64_gnu 0.48.0\",\n+ \"windows_x86_64_gnullvm 0.48.0\",\n+ \"windows_x86_64_msvc 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\""}, {"sha": "f6f8183680445e346b31a4b44d35feaea577b14c", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.6.2\"\n+ui_test = \"0.9\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "79b0daf9e82b8ce04ca7401b5332b6c803fb17c8", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -389,7 +389,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365).\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n-   The profile is written out to a file with the prefix `<name>`, and can be processed\n+   The profile is written out to a file inside a directory called `<name>`, and can be processed\n    using the tools in the repository https://github.com/rust-lang/measureme.\n * `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n   but reports to the program that it did actually write. This is useful when you"}, {"sha": "de6760a035969ad8a80c3e02eb1d71f8f61d6a88", "filename": "src/tools/miri/bench-cargo-miri/zip-equal/Cargo.lock", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.lock?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,7 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"zip-equal\"\n+version = \"0.1.0\""}, {"sha": "f4208de727dbce505ee0e8ef504755e2719a651b", "filename": "src/tools/miri/bench-cargo-miri/zip-equal/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2FCargo.toml?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"zip-equal\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]"}, {"sha": "ba4e9b41d1d1d093947503e6a213975039aa4c78", "filename": "src/tools/miri/bench-cargo-miri/zip-equal/src/main.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fbench-cargo-miri%2Fzip-equal%2Fsrc%2Fmain.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,22 @@\n+//! This is a pathological pattern in which opportunities to merge\n+//! adjacent identical items in the RangeMap are not properly detected\n+//! because `RangeMap::iter_mut` is never called on overlapping ranges\n+//! and thus never merges previously split ranges. This does not produce any\n+//! additional cost for access operations, but it makes the job of the Tree Borrows\n+//! GC procedure much more costly.\n+//! See https://github.com/rust-lang/miri/issues/2863\n+\n+const LENGTH: usize = (1 << 14) - 1;\n+const LONG: &[u8] = &[b'x'; LENGTH];\n+\n+fn main() {\n+    assert!(eq(LONG, LONG))\n+}\n+\n+fn eq(s1: &[u8], s2: &[u8]) -> bool {\n+    if s1.len() != s2.len() {\n+        return false;\n+    }\n+\n+    s1.iter().zip(s2).all(|(c1, c2)| *c1 == *c2)\n+}"}, {"sha": "727e46a028db0ede61fca15bbce86b897c1b6ad9", "filename": "src/tools/miri/cargo-miri/Cargo.lock", "status": "modified", "additions": 249, "deletions": 54, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -4,9 +4,9 @@ version = 3\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.68\"\n+version = \"1.0.71\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2cb2f989d18dd141ab8ae82f64d1a8cdd37e0840f73a406896cf5e99502fab61\"\n+checksum = \"9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8\"\n \n [[package]]\n name = \"bitflags\"\n@@ -16,9 +16,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"camino\"\n-version = \"1.1.1\"\n+version = \"1.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"88ad0e1e3e88dd237a156ab9f571021b8a158caa0ae44b1968a241efb5144c1e\"\n+checksum = \"c530edf18f37068ac2d977409ed5cd50d53d73bc653c7647b48eb78976ac9ae2\"\n dependencies = [\n  \"serde\",\n ]\n@@ -48,9 +48,9 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.15.2\"\n+version = \"0.15.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"982a0cf6a99c350d7246035613882e376d58cebe571785abc5da4f648d53ac0a\"\n+checksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\n dependencies = [\n  \"camino\",\n  \"cargo-platform\",\n@@ -60,6 +60,12 @@ dependencies = [\n  \"thiserror\",\n ]\n \n+[[package]]\n+name = \"cc\"\n+version = \"1.0.79\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n@@ -86,26 +92,53 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"errno\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a\"\n+dependencies = [\n+ \"errno-dragonfly\",\n+ \"libc\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"errno-dragonfly\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\n+dependencies = [\n+ \"cc\",\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"fastrand\"\n-version = \"1.8.0\"\n+version = \"1.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499\"\n+checksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\n dependencies = [\n  \"instant\",\n ]\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.8\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n+checksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"wasi\",\n ]\n \n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286\"\n+\n [[package]]\n name = \"instant\"\n version = \"0.1.12\"\n@@ -115,32 +148,49 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n+[[package]]\n+name = \"io-lifetimes\"\n+version = \"1.0.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c66c74d2ae7e79a5a8f7ac924adbe38ee42a859c6539ad869eb51f0b52dc220\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n [[package]]\n name = \"itoa\"\n-version = \"1.0.5\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440\"\n+checksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.139\"\n+version = \"0.2.142\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a987beff54b60ffa6d51982e1aa1146bc42f19bd26be28b0586f252fccf5317\"\n+\n+[[package]]\n+name = \"linux-raw-sys\"\n+version = \"0.3.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n+checksum = \"ece97ea872ece730aed82664c424eb4c8291e1ff2480247ccf7409044bc6479f\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.49\"\n+version = \"1.0.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"57a8eca9f9c4ffde41714334dee777596264c7825420f521abc92b5b5deb63a5\"\n+checksum = \"2b63bdb0cd06f1f4dedf69b254734f9b45af66e4a031e42a7480257d9898b435\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.23\"\n+version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b\"\n+checksum = \"4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -155,30 +205,30 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"redox_users\"\n-version = \"0.4.3\"\n+name = \"redox_syscall\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\n+checksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\n dependencies = [\n- \"getrandom\",\n- \"redox_syscall\",\n- \"thiserror\",\n+ \"bitflags\",\n ]\n \n [[package]]\n-name = \"remove_dir_all\"\n-version = \"0.5.3\"\n+name = \"redox_users\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n+checksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\n dependencies = [\n- \"winapi\",\n+ \"getrandom\",\n+ \"redox_syscall 0.2.16\",\n+ \"thiserror\",\n ]\n \n [[package]]\n name = \"rustc-build-sysroot\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d65b1271cdac365b71b59570ea35d945dea2dd2cc47eba3d33b4bd1e0190ac6d\"\n+checksum = \"8ed2a90dfa5232ed5ff21d53d4df655f315ab316ea06fc508f1c74bcedb1ce6c\"\n dependencies = [\n  \"anyhow\",\n  \"rustc_version\",\n@@ -206,35 +256,49 @@ dependencies = [\n  \"semver\",\n ]\n \n+[[package]]\n+name = \"rustix\"\n+version = \"0.37.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"acf8729d8542766f1b2cf77eb034d52f40d375bb8b615d0b147089946e16613d\"\n+dependencies = [\n+ \"bitflags\",\n+ \"errno\",\n+ \"io-lifetimes\",\n+ \"libc\",\n+ \"linux-raw-sys\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n [[package]]\n name = \"ryu\"\n-version = \"1.0.12\"\n+version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde\"\n+checksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.16\"\n+version = \"1.0.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58bc9567378fc7690d6b2addae4e60ac2eeea07becb2c64b9f218b53865cba2a\"\n+checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.152\"\n+version = \"1.0.162\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n+checksum = \"71b2f6e1ab5c2b98c05f0f35b236b22e8df7ead6ffbf51d7808da7f8817e7ab6\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.152\"\n+version = \"1.0.162\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n+checksum = \"a2a0814352fd64b58489904a44ea8d90cb1a91dcb6b4f5ebabc32c8318e93cb6\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -243,9 +307,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.91\"\n+version = \"1.0.96\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n+checksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -254,9 +318,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.107\"\n+version = \"2.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n+checksum = \"a34fcf3e8b60f57e6a14301a2e916d323af98b0ea63c599441eec8558660c822\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -265,32 +329,31 @@ dependencies = [\n \n [[package]]\n name = \"tempfile\"\n-version = \"3.3.0\"\n+version = \"3.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\n+checksum = \"b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998\"\n dependencies = [\n  \"cfg-if\",\n  \"fastrand\",\n- \"libc\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi\",\n+ \"redox_syscall 0.3.5\",\n+ \"rustix\",\n+ \"windows-sys 0.45.0\",\n ]\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.38\"\n+version = \"1.0.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a9cd18aa97d5c45c6603caea1da6628790b37f7a34b6ca89522331c5180fed0\"\n+checksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.38\"\n+version = \"1.0.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1fb327af4685e4d03fa8cbcf1716380da910eeb2bb8be417e7f9fd3fb164f36f\"\n+checksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -299,9 +362,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.6\"\n+version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc\"\n+checksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n \n [[package]]\n name = \"wasi\"\n@@ -330,3 +393,135 @@ name = \"winapi-x86_64-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.45.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\n+dependencies = [\n+ \"windows-targets 0.42.2\",\n+]\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\n+dependencies = [\n+ \"windows-targets 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm 0.42.2\",\n+ \"windows_aarch64_msvc 0.42.2\",\n+ \"windows_i686_gnu 0.42.2\",\n+ \"windows_i686_msvc 0.42.2\",\n+ \"windows_x86_64_gnu 0.42.2\",\n+ \"windows_x86_64_gnullvm 0.42.2\",\n+ \"windows_x86_64_msvc 0.42.2\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm 0.48.0\",\n+ \"windows_aarch64_msvc 0.48.0\",\n+ \"windows_i686_gnu 0.48.0\",\n+ \"windows_i686_msvc 0.48.0\",\n+ \"windows_x86_64_gnu 0.48.0\",\n+ \"windows_x86_64_gnullvm 0.48.0\",\n+ \"windows_x86_64_msvc 0.48.0\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.42.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.48.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\""}, {"sha": "76cc2e94927c286fdc7324262274d1a0453db468", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -45,7 +45,8 @@ function run_tests {\n     # them. Also error locations change so we don't run the failing tests.\n     # We explicitly enable debug-assertions here, they are disabled by -O but we have tests\n     # which exist to check that we panic on debug assertion failures.\n-    MIRIFLAGS=\"${MIRIFLAGS:-} -O -Zmir-opt-level=4 -Cdebug-assertions=yes\" MIRI_SKIP_UI_CHECKS=1 ./miri test -- tests/{pass,panic}\n+    #FIXME: Disabled due to <https://github.com/rust-lang/rust/issues/111422>.\n+    #MIRIFLAGS=\"${MIRIFLAGS:-} -O -Zmir-opt-level=4 -Cdebug-assertions=yes\" MIRI_SKIP_UI_CHECKS=1 ./miri test -- tests/{pass,panic}\n \n     # Also run some many-seeds tests. 64 seeds means this takes around a minute per test.\n     for FILE in tests/many-seeds/*.rs; do"}, {"sha": "25304fc19f7bcf4cdf644d3857b9e64a6ea00dbb", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1 +1 @@\n-eb62877597000ccf8bb99ab131b5977344afdfa3\n+65dfca8488d635552eb246eb8e15df646e987cff"}, {"sha": "28f9912e2838db36638b7ba8001d95c98fb72c87", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -63,7 +63,9 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n         queries: &'tcx rustc_interface::Queries<'tcx>,\n     ) -> Compilation {\n         queries.global_ctxt().unwrap().enter(|tcx| {\n-            tcx.sess.abort_if_errors();\n+            if tcx.sess.compile_status().is_err() {\n+                tcx.sess.fatal(\"miri cannot be run on programs that fail compilation\");\n+            }\n \n             init_late_loggers(tcx);\n             if !tcx.sess.crate_types().contains(&CrateType::Executable) {"}, {"sha": "29881bbcfca669c7ef7c1a213b255b38522d43e3", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -459,7 +459,7 @@ impl<'tcx> Stack {\n impl Stacks {\n     pub fn remove_unreachable_tags(&mut self, live_tags: &FxHashSet<BorTag>) {\n         if self.modified_since_last_gc {\n-            for stack in self.stacks.iter_mut_all() {\n+            for (_stack_range, stack) in self.stacks.iter_mut_all() {\n                 if stack.len() > 64 {\n                     stack.retain(live_tags);\n                 }\n@@ -511,8 +511,8 @@ impl<'tcx> Stacks {\n         ) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx> {\n         self.modified_since_last_gc = true;\n-        for (offset, stack) in self.stacks.iter_mut(range.start, range.size) {\n-            let mut dcx = dcx_builder.build(&mut self.history, offset);\n+        for (stack_range, stack) in self.stacks.iter_mut(range.start, range.size) {\n+            let mut dcx = dcx_builder.build(&mut self.history, Size::from_bytes(stack_range.start));\n             f(stack, &mut dcx, &mut self.exposed_tags)?;\n             dcx_builder = dcx.unbuild();\n         }"}, {"sha": "10873c46a6c5ddeec5eca89ff37cce4a2c6a2085", "filename": "src/tools/miri/src/borrow_tracker/tree_borrows/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 62, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Fdiagnostics.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -3,7 +3,6 @@ use std::ops::Range;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::{Span, SpanData};\n-use rustc_target::abi::Size;\n \n use crate::borrow_tracker::tree_borrows::{\n     perms::{PermTransition, Permission},\n@@ -14,18 +13,30 @@ use crate::borrow_tracker::{AccessKind, ProtectorKind};\n use crate::*;\n \n /// Complete data for an event:\n-/// - `kind` is what happened to the permissions\n-/// - `access_kind` and `access_range` describe the access that caused the event\n-/// - `offset` allows filtering only the relevant events for a given memory location\n-/// (see how we perform the filtering in `History::extract_relevant`.\n-/// - `span` is the line of code in question\n #[derive(Clone, Debug)]\n pub struct Event {\n+    /// Transformation of permissions that occured because of this event\n     pub transition: PermTransition,\n+    /// Kind of the access that triggered this event\n     pub access_kind: AccessKind,\n+    /// Relative position of the tag to the one used for the access\n     pub is_foreign: bool,\n+    /// User-visible range of the access\n     pub access_range: AllocRange,\n-    pub offset: Size,\n+    /// The transition recorded by this event only occured on a subrange of\n+    /// `access_range`: a single access on `access_range` triggers several events,\n+    /// each with their own mutually disjoint `transition_range`. No-op transitions\n+    /// should not be recorded as events, so the union of all `transition_range` is not\n+    /// necessarily the entire `access_range`.\n+    ///\n+    /// No data from any `transition_range` should ever be user-visible, because\n+    /// both the start and end of `transition_range` are entirely dependent on the\n+    /// internal representation of `RangeMap` which is supposed to be opaque.\n+    /// What will be shown in the error message is the first byte `error_offset` of\n+    /// the `TbError`, which should satisfy\n+    /// `event.transition_range.contains(error.error_offset)`.\n+    pub transition_range: Range<u64>,\n+    /// Line of code that triggered this event\n     pub span: Span,\n }\n \n@@ -35,9 +46,9 @@ pub struct Event {\n /// Available filtering methods include `History::forget` and `History::extract_relevant`.\n #[derive(Clone, Debug)]\n pub struct History {\n-    pub tag: BorTag,\n-    pub created: (Span, Permission),\n-    pub events: Vec<Event>,\n+    tag: BorTag,\n+    created: (Span, Permission),\n+    events: Vec<Event>,\n }\n \n /// History formatted for use by `src/diagnostics.rs`.\n@@ -60,12 +71,7 @@ impl HistoryData {\n     // Format events from `new_history` into those recorded by `self`.\n     //\n     // NOTE: also converts `Span` to `SpanData`.\n-    pub fn extend(\n-        &mut self,\n-        new_history: History,\n-        tag_name: &'static str,\n-        show_initial_state: bool,\n-    ) {\n+    fn extend(&mut self, new_history: History, tag_name: &'static str, show_initial_state: bool) {\n         let History { tag, created, events } = new_history;\n         let this = format!(\"the {tag_name} tag {tag:?}\");\n         let msg_initial_state = format!(\", in the initial state {}\", created.1);\n@@ -75,9 +81,16 @@ impl HistoryData {\n         );\n \n         self.events.push((Some(created.0.data()), msg_creation));\n-        for &Event { transition, access_kind, is_foreign, access_range, span, offset: _ } in &events\n+        for &Event {\n+            transition,\n+            access_kind,\n+            is_foreign,\n+            access_range,\n+            span,\n+            transition_range: _,\n+        } in &events\n         {\n-            // NOTE: `offset` is explicitly absent from the error message, it has no significance\n+            // NOTE: `transition_range` is explicitly absent from the error message, it has no significance\n             // to the user. The meaningful one is `access_range`.\n             self.events.push((Some(span.data()), format!(\"{this} then transitioned {transition} due to a {rel} {access_kind} at offsets {access_range:?}\", rel = if is_foreign { \"foreign\" } else { \"child\" })));\n             self.events.push((None, format!(\"this corresponds to {}\", transition.summary())));\n@@ -197,53 +210,28 @@ impl History {\n         History { events: Vec::new(), created: self.created, tag: self.tag }\n     }\n \n-    /// Reconstruct the history relevant to `error_offset` knowing that\n-    /// its permission followed `complete_transition`.\n-    ///\n-    /// Here's how we do this:\n-    /// - we know `full := complete_transition` the transition of the permission from\n-    /// its initialization to the state just before the error was caused,\n-    /// we want to find a chain of events that produces `full`\n-    /// - we decompose `full` into `pre o post` where\n-    /// `pre` is the best applicable transition from recorded events\n-    /// - we select the event that caused `pre` and iterate\n-    /// to find the chain of events that produces `full := post`\n-    ///\n-    /// To find the \"best applicable transition\" for full:\n-    /// - eliminate events that cannot be applied because their offset is too big\n-    /// - eliminate events that cannot be applied because their starting point is wrong\n-    /// - select the one that happened closest to the range of interest\n-    fn extract_relevant(&self, complete_transition: PermTransition, error_offset: Size) -> Self {\n-        let mut selected_events: Vec<Event> = Vec::new();\n-        let mut full = complete_transition;\n-        while !full.is_noop() {\n-            let (pre, post) = self\n+    /// Reconstruct the history relevant to `error_offset` by filtering\n+    /// only events whose range contains the offset we are interested in.\n+    fn extract_relevant(&self, error_offset: u64) -> Self {\n+        History {\n+            events: self\n                 .events\n                 .iter()\n-                .filter(|e| e.offset <= error_offset)\n-                .filter_map(|pre_canditate| {\n-                    full.apply_start(pre_canditate.transition)\n-                        .map(|post_canditate| (pre_canditate, post_canditate))\n-                })\n-                .max_by_key(|(pre_canditate, _post_candidate)| pre_canditate.offset)\n-                .unwrap();\n-            // If this occurs we will loop infinitely !\n-            // Make sure to only put non-noop transitions in `History`.\n-            assert!(!pre.transition.is_noop());\n-            full = post;\n-            selected_events.push(pre.clone());\n+                .filter(|e| e.transition_range.contains(&error_offset))\n+                .cloned()\n+                .collect::<Vec<_>>(),\n+            created: self.created,\n+            tag: self.tag,\n         }\n-\n-        History { events: selected_events, created: self.created, tag: self.tag }\n     }\n }\n \n /// Failures that can occur during the execution of Tree Borrows procedures.\n pub(super) struct TbError<'node> {\n     /// What failure occurred.\n     pub error_kind: TransitionError,\n-    /// The byte at which the conflict occured.\n-    pub error_offset: Size,\n+    /// The offset (into the allocation) at which the conflict occurred.\n+    pub error_offset: u64,\n     /// The tag on which the error was triggered.\n     /// On protector violations, this is the tag that was protected.\n     /// On accesses rejected due to insufficient permissions, this is the\n@@ -261,12 +249,11 @@ impl TbError<'_> {\n     /// Produce a UB error.\n     pub fn build<'tcx>(self) -> InterpError<'tcx> {\n         use TransitionError::*;\n-        let started_as = self.conflicting_info.history.created.1;\n         let kind = self.access_kind;\n         let accessed = self.accessed_info;\n         let conflicting = self.conflicting_info;\n         let accessed_is_conflicting = accessed.tag == conflicting.tag;\n-        let (pre_error, title, details, conflicting_tag_name) = match self.error_kind {\n+        let (title, details, conflicting_tag_name) = match self.error_kind {\n             ChildAccessForbidden(perm) => {\n                 let conflicting_tag_name =\n                     if accessed_is_conflicting { \"accessed\" } else { \"conflicting\" };\n@@ -280,7 +267,7 @@ impl TbError<'_> {\n                 details.push(format!(\n                     \"the {conflicting_tag_name} tag {conflicting} has state {perm} which forbids child {kind}es\"\n                 ));\n-                (perm, title, details, conflicting_tag_name)\n+                (title, details, conflicting_tag_name)\n             }\n             ProtectedTransition(transition) => {\n                 let conflicting_tag_name = \"protected\";\n@@ -297,7 +284,7 @@ impl TbError<'_> {\n                         loss = transition.summary(),\n                     ),\n                 ];\n-                (transition.started(), title, details, conflicting_tag_name)\n+                (title, details, conflicting_tag_name)\n             }\n             ProtectedDealloc => {\n                 let conflicting_tag_name = \"strongly protected\";\n@@ -308,16 +295,15 @@ impl TbError<'_> {\n                     ),\n                     format!(\"the {conflicting_tag_name} tag {conflicting} disallows deallocations\"),\n                 ];\n-                (started_as, title, details, conflicting_tag_name)\n+                (title, details, conflicting_tag_name)\n             }\n         };\n-        let pre_transition = PermTransition::from(started_as, pre_error).unwrap();\n         let mut history = HistoryData::default();\n         if !accessed_is_conflicting {\n             history.extend(self.accessed_info.history.forget(), \"accessed\", false);\n         }\n         history.extend(\n-            self.conflicting_info.history.extract_relevant(pre_transition, self.error_offset),\n+            self.conflicting_info.history.extract_relevant(self.error_offset),\n             conflicting_tag_name,\n             true,\n         );"}, {"sha": "52947aa0f9fe2baca934ed10d5ae2aae4ba4b9c5", "filename": "src/tools/miri/src/borrow_tracker/tree_borrows/tree.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Ftree.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -311,7 +311,7 @@ impl<'tcx> Tree {\n         parent_tag: BorTag,\n         new_tag: BorTag,\n         default_initial_perm: Permission,\n-        range: AllocRange,\n+        reborrow_range: AllocRange,\n         span: Span,\n     ) -> InterpResult<'tcx> {\n         assert!(!self.tag_mapping.contains_key(&new_tag));\n@@ -332,7 +332,8 @@ impl<'tcx> Tree {\n         self.nodes.get_mut(parent_idx).unwrap().children.push(idx);\n         // Initialize perms\n         let perm = LocationState::new(default_initial_perm).with_access();\n-        for (_range, perms) in self.rperms.iter_mut(range.start, range.size) {\n+        for (_perms_range, perms) in self.rperms.iter_mut(reborrow_range.start, reborrow_range.size)\n+        {\n             perms.insert(idx, perm);\n         }\n         Ok(())\n@@ -344,12 +345,12 @@ impl<'tcx> Tree {\n     pub fn dealloc(\n         &mut self,\n         tag: BorTag,\n-        range: AllocRange,\n+        access_range: AllocRange,\n         global: &GlobalState,\n         span: Span, // diagnostics\n     ) -> InterpResult<'tcx> {\n-        self.perform_access(AccessKind::Write, tag, range, global, span)?;\n-        for (offset, perms) in self.rperms.iter_mut(range.start, range.size) {\n+        self.perform_access(AccessKind::Write, tag, access_range, global, span)?;\n+        for (perms_range, perms) in self.rperms.iter_mut(access_range.start, access_range.size) {\n             TreeVisitor { nodes: &mut self.nodes, tag_mapping: &self.tag_mapping, perms }\n                 .traverse_parents_this_children_others(\n                     tag,\n@@ -368,7 +369,7 @@ impl<'tcx> Tree {\n                         TbError {\n                             conflicting_info,\n                             access_kind: AccessKind::Write,\n-                            error_offset: offset,\n+                            error_offset: perms_range.start,\n                             error_kind,\n                             accessed_info,\n                         }\n@@ -388,11 +389,11 @@ impl<'tcx> Tree {\n         &mut self,\n         access_kind: AccessKind,\n         tag: BorTag,\n-        range: AllocRange,\n+        access_range: AllocRange,\n         global: &GlobalState,\n         span: Span, // diagnostics\n     ) -> InterpResult<'tcx> {\n-        for (offset, perms) in self.rperms.iter_mut(range.start, range.size) {\n+        for (perms_range, perms) in self.rperms.iter_mut(access_range.start, access_range.size) {\n             TreeVisitor { nodes: &mut self.nodes, tag_mapping: &self.tag_mapping, perms }\n                 .traverse_parents_this_children_others(\n                     tag,\n@@ -456,9 +457,9 @@ impl<'tcx> Tree {\n                             node.debug_info.history.push(diagnostics::Event {\n                                 transition,\n                                 access_kind,\n-                                access_range: range,\n                                 is_foreign: rel_pos.is_foreign(),\n-                                offset,\n+                                access_range,\n+                                transition_range: perms_range.clone(),\n                                 span,\n                             });\n                             old_state.permission =\n@@ -472,7 +473,7 @@ impl<'tcx> Tree {\n                         TbError {\n                             conflicting_info,\n                             access_kind,\n-                            error_offset: offset,\n+                            error_offset: perms_range.start,\n                             error_kind,\n                             accessed_info,\n                         }\n@@ -487,7 +488,13 @@ impl<'tcx> Tree {\n /// Integration with the BorTag garbage collector\n impl Tree {\n     pub fn remove_unreachable_tags(&mut self, live_tags: &FxHashSet<BorTag>) {\n-        assert!(self.keep_only_needed(self.root, live_tags)); // root can't be removed\n+        let root_is_needed = self.keep_only_needed(self.root, live_tags); // root can't be removed\n+        assert!(root_is_needed);\n+        // Right after the GC runs is a good moment to check if we can\n+        // merge some adjacent ranges that were made equal by the removal of some\n+        // tags (this does not necessarily mean that they have identical internal representations,\n+        // see the `PartialEq` impl for `UniValMap`)\n+        self.rperms.merge_adjacent_thorough();\n     }\n \n     /// Traverses the entire tree looking for useless tags.\n@@ -530,7 +537,7 @@ impl Tree {\n             // the tag from the mapping.\n             let tag = node.tag;\n             self.nodes.remove(idx);\n-            for perms in self.rperms.iter_mut_all() {\n+            for (_perms_range, perms) in self.rperms.iter_mut_all() {\n                 perms.remove(idx);\n             }\n             self.tag_mapping.remove(&tag);"}, {"sha": "58af32385c5070fdd0a30ea4042918b1f1ecf60b", "filename": "src/tools/miri/src/borrow_tracker/tree_borrows/unimap.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Funimap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Funimap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Ftree_borrows%2Funimap.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -36,13 +36,42 @@ pub struct UniKeyMap<K> {\n }\n \n /// From UniIndex to V\n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, Eq)]\n pub struct UniValMap<V> {\n     /// The mapping data. Thanks to Vec we get both fast accesses, and\n     /// a memory-optimal representation if there are few deletions.\n     data: Vec<Option<V>>,\n }\n \n+impl<V: PartialEq> UniValMap<V> {\n+    /// Exact equality of two maps.\n+    /// Less accurate but faster than `equivalent`, mostly because\n+    /// of the fast path when the lengths are different.\n+    pub fn identical(&self, other: &Self) -> bool {\n+        self.data == other.data\n+    }\n+\n+    /// Equality up to trailing `None`s of two maps, i.e.\n+    /// do they represent the same mapping ?\n+    pub fn equivalent(&self, other: &Self) -> bool {\n+        let min_len = self.data.len().min(other.data.len());\n+        self.data[min_len..].iter().all(Option::is_none)\n+            && other.data[min_len..].iter().all(Option::is_none)\n+            && (self.data[..min_len] == other.data[..min_len])\n+    }\n+}\n+\n+impl<V: PartialEq> PartialEq for UniValMap<V> {\n+    /// 2023-05: We found that using `equivalent` rather than `identical`\n+    /// in the equality testing of the `RangeMap` is neutral for most\n+    /// benchmarks, while being quite beneficial for `zip-equal`\n+    /// and to a lesser extent for `unicode`, `slice-get-unchecked` and\n+    /// `backtraces` as well.\n+    fn eq(&self, other: &Self) -> bool {\n+        self.equivalent(other)\n+    }\n+}\n+\n impl<V> Default for UniValMap<V> {\n     fn default() -> Self {\n         Self { data: Vec::default() }"}, {"sha": "f6252c43f9fe26eecc5e525f845328738194b33f", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 106, "deletions": 75, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -275,20 +275,20 @@ impl MemoryCellClocks {\n     /// not used previously as atomic memory.\n     fn load_acquire(\n         &mut self,\n-        clocks: &mut ThreadClockSet,\n+        thread_clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n-        self.atomic_read_detect(clocks, index)?;\n+        self.atomic_read_detect(thread_clocks, index)?;\n         if let Some(atomic) = self.atomic() {\n-            clocks.clock.join(&atomic.sync_vector);\n+            thread_clocks.clock.join(&atomic.sync_vector);\n         }\n         Ok(())\n     }\n \n     /// Checks if the memory cell access is ordered with all prior atomic reads and writes\n-    fn race_free_with_atomic(&self, clocks: &ThreadClockSet) -> bool {\n+    fn race_free_with_atomic(&self, thread_clocks: &ThreadClockSet) -> bool {\n         if let Some(atomic) = self.atomic() {\n-            atomic.read_vector <= clocks.clock && atomic.write_vector <= clocks.clock\n+            atomic.read_vector <= thread_clocks.clock && atomic.write_vector <= thread_clocks.clock\n         } else {\n             true\n         }\n@@ -299,81 +299,97 @@ impl MemoryCellClocks {\n     /// not used previously as atomic memory.\n     fn load_relaxed(\n         &mut self,\n-        clocks: &mut ThreadClockSet,\n+        thread_clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n-        self.atomic_read_detect(clocks, index)?;\n+        self.atomic_read_detect(thread_clocks, index)?;\n         if let Some(atomic) = self.atomic() {\n-            clocks.fence_acquire.join(&atomic.sync_vector);\n+            thread_clocks.fence_acquire.join(&atomic.sync_vector);\n         }\n         Ok(())\n     }\n \n     /// Update the memory cell data-race tracking for atomic\n     /// store release semantics.\n-    fn store_release(&mut self, clocks: &ThreadClockSet, index: VectorIdx) -> Result<(), DataRace> {\n-        self.atomic_write_detect(clocks, index)?;\n+    fn store_release(\n+        &mut self,\n+        thread_clocks: &ThreadClockSet,\n+        index: VectorIdx,\n+    ) -> Result<(), DataRace> {\n+        self.atomic_write_detect(thread_clocks, index)?;\n         let atomic = self.atomic_mut();\n-        atomic.sync_vector.clone_from(&clocks.clock);\n+        atomic.sync_vector.clone_from(&thread_clocks.clock);\n         Ok(())\n     }\n \n     /// Update the memory cell data-race tracking for atomic\n     /// store relaxed semantics.\n-    fn store_relaxed(&mut self, clocks: &ThreadClockSet, index: VectorIdx) -> Result<(), DataRace> {\n-        self.atomic_write_detect(clocks, index)?;\n+    fn store_relaxed(\n+        &mut self,\n+        thread_clocks: &ThreadClockSet,\n+        index: VectorIdx,\n+    ) -> Result<(), DataRace> {\n+        self.atomic_write_detect(thread_clocks, index)?;\n \n         // The handling of release sequences was changed in C++20 and so\n         // the code here is different to the paper since now all relaxed\n         // stores block release sequences. The exception for same-thread\n         // relaxed stores has been removed.\n         let atomic = self.atomic_mut();\n-        atomic.sync_vector.clone_from(&clocks.fence_release);\n+        atomic.sync_vector.clone_from(&thread_clocks.fence_release);\n         Ok(())\n     }\n \n     /// Update the memory cell data-race tracking for atomic\n     /// store release semantics for RMW operations.\n-    fn rmw_release(&mut self, clocks: &ThreadClockSet, index: VectorIdx) -> Result<(), DataRace> {\n-        self.atomic_write_detect(clocks, index)?;\n+    fn rmw_release(\n+        &mut self,\n+        thread_clocks: &ThreadClockSet,\n+        index: VectorIdx,\n+    ) -> Result<(), DataRace> {\n+        self.atomic_write_detect(thread_clocks, index)?;\n         let atomic = self.atomic_mut();\n-        atomic.sync_vector.join(&clocks.clock);\n+        atomic.sync_vector.join(&thread_clocks.clock);\n         Ok(())\n     }\n \n     /// Update the memory cell data-race tracking for atomic\n     /// store relaxed semantics for RMW operations.\n-    fn rmw_relaxed(&mut self, clocks: &ThreadClockSet, index: VectorIdx) -> Result<(), DataRace> {\n-        self.atomic_write_detect(clocks, index)?;\n+    fn rmw_relaxed(\n+        &mut self,\n+        thread_clocks: &ThreadClockSet,\n+        index: VectorIdx,\n+    ) -> Result<(), DataRace> {\n+        self.atomic_write_detect(thread_clocks, index)?;\n         let atomic = self.atomic_mut();\n-        atomic.sync_vector.join(&clocks.fence_release);\n+        atomic.sync_vector.join(&thread_clocks.fence_release);\n         Ok(())\n     }\n \n     /// Detect data-races with an atomic read, caused by a non-atomic write that does\n     /// not happen-before the atomic-read.\n     fn atomic_read_detect(\n         &mut self,\n-        clocks: &ThreadClockSet,\n+        thread_clocks: &ThreadClockSet,\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n-        log::trace!(\"Atomic read with vectors: {:#?} :: {:#?}\", self, clocks);\n+        log::trace!(\"Atomic read with vectors: {:#?} :: {:#?}\", self, thread_clocks);\n         let atomic = self.atomic_mut();\n-        atomic.read_vector.set_at_index(&clocks.clock, index);\n-        if self.write <= clocks.clock[self.write_index] { Ok(()) } else { Err(DataRace) }\n+        atomic.read_vector.set_at_index(&thread_clocks.clock, index);\n+        if self.write <= thread_clocks.clock[self.write_index] { Ok(()) } else { Err(DataRace) }\n     }\n \n     /// Detect data-races with an atomic write, either with a non-atomic read or with\n     /// a non-atomic write.\n     fn atomic_write_detect(\n         &mut self,\n-        clocks: &ThreadClockSet,\n+        thread_clocks: &ThreadClockSet,\n         index: VectorIdx,\n     ) -> Result<(), DataRace> {\n-        log::trace!(\"Atomic write with vectors: {:#?} :: {:#?}\", self, clocks);\n+        log::trace!(\"Atomic write with vectors: {:#?} :: {:#?}\", self, thread_clocks);\n         let atomic = self.atomic_mut();\n-        atomic.write_vector.set_at_index(&clocks.clock, index);\n-        if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n+        atomic.write_vector.set_at_index(&thread_clocks.clock, index);\n+        if self.write <= thread_clocks.clock[self.write_index] && self.read <= thread_clocks.clock {\n             Ok(())\n         } else {\n             Err(DataRace)\n@@ -384,21 +400,21 @@ impl MemoryCellClocks {\n     /// returns true if a data-race is detected.\n     fn read_race_detect(\n         &mut self,\n-        clocks: &mut ThreadClockSet,\n+        thread_clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n         current_span: Span,\n     ) -> Result<(), DataRace> {\n-        log::trace!(\"Unsynchronized read with vectors: {:#?} :: {:#?}\", self, clocks);\n+        log::trace!(\"Unsynchronized read with vectors: {:#?} :: {:#?}\", self, thread_clocks);\n         if !current_span.is_dummy() {\n-            clocks.clock[index].span = current_span;\n+            thread_clocks.clock[index].span = current_span;\n         }\n-        if self.write <= clocks.clock[self.write_index] {\n+        if self.write <= thread_clocks.clock[self.write_index] {\n             let race_free = if let Some(atomic) = self.atomic() {\n-                atomic.write_vector <= clocks.clock\n+                atomic.write_vector <= thread_clocks.clock\n             } else {\n                 true\n             };\n-            self.read.set_at_index(&clocks.clock, index);\n+            self.read.set_at_index(&thread_clocks.clock, index);\n             if race_free { Ok(()) } else { Err(DataRace) }\n         } else {\n             Err(DataRace)\n@@ -409,22 +425,23 @@ impl MemoryCellClocks {\n     /// returns true if a data-race is detected.\n     fn write_race_detect(\n         &mut self,\n-        clocks: &mut ThreadClockSet,\n+        thread_clocks: &mut ThreadClockSet,\n         index: VectorIdx,\n         write_type: WriteType,\n         current_span: Span,\n     ) -> Result<(), DataRace> {\n-        log::trace!(\"Unsynchronized write with vectors: {:#?} :: {:#?}\", self, clocks);\n+        log::trace!(\"Unsynchronized write with vectors: {:#?} :: {:#?}\", self, thread_clocks);\n         if !current_span.is_dummy() {\n-            clocks.clock[index].span = current_span;\n+            thread_clocks.clock[index].span = current_span;\n         }\n-        if self.write <= clocks.clock[self.write_index] && self.read <= clocks.clock {\n+        if self.write <= thread_clocks.clock[self.write_index] && self.read <= thread_clocks.clock {\n             let race_free = if let Some(atomic) = self.atomic() {\n-                atomic.write_vector <= clocks.clock && atomic.read_vector <= clocks.clock\n+                atomic.write_vector <= thread_clocks.clock\n+                    && atomic.read_vector <= thread_clocks.clock\n             } else {\n                 true\n             };\n-            self.write = clocks.clock[index];\n+            self.write = thread_clocks.clock[index];\n             self.write_index = index;\n             self.write_type = write_type;\n             if race_free {\n@@ -764,24 +781,24 @@ impl VClockAlloc {\n     fn report_data_race<'tcx>(\n         global: &GlobalState,\n         thread_mgr: &ThreadManager<'_, '_>,\n-        range: &MemoryCellClocks,\n+        mem_clocks: &MemoryCellClocks,\n         action: &str,\n         is_atomic: bool,\n         ptr_dbg: Pointer<AllocId>,\n     ) -> InterpResult<'tcx> {\n         let (current_index, current_clocks) = global.current_thread_state(thread_mgr);\n         let write_clock;\n-        let (other_action, other_thread, other_clock) = if range.write\n-            > current_clocks.clock[range.write_index]\n+        let (other_action, other_thread, other_clock) = if mem_clocks.write\n+            > current_clocks.clock[mem_clocks.write_index]\n         {\n             // Convert the write action into the vector clock it\n             // represents for diagnostic purposes.\n-            write_clock = VClock::new_with_index(range.write_index, range.write);\n-            (range.write_type.get_descriptor(), range.write_index, &write_clock)\n-        } else if let Some(idx) = Self::find_gt_index(&range.read, &current_clocks.clock) {\n-            (\"Read\", idx, &range.read)\n+            write_clock = VClock::new_with_index(mem_clocks.write_index, mem_clocks.write);\n+            (mem_clocks.write_type.get_descriptor(), mem_clocks.write_index, &write_clock)\n+        } else if let Some(idx) = Self::find_gt_index(&mem_clocks.read, &current_clocks.clock) {\n+            (\"Read\", idx, &mem_clocks.read)\n         } else if !is_atomic {\n-            if let Some(atomic) = range.atomic() {\n+            if let Some(atomic) = mem_clocks.atomic() {\n                 if let Some(idx) = Self::find_gt_index(&atomic.write_vector, &current_clocks.clock)\n                 {\n                     (\"Atomic Store\", idx, &atomic.write_vector)\n@@ -832,10 +849,10 @@ impl VClockAlloc {\n         thread_mgr: &ThreadManager<'_, '_>,\n     ) -> bool {\n         if global.race_detecting() {\n-            let (_, clocks) = global.current_thread_state(thread_mgr);\n+            let (_, thread_clocks) = global.current_thread_state(thread_mgr);\n             let alloc_ranges = self.alloc_ranges.borrow();\n-            for (_, range) in alloc_ranges.iter(range.start, range.size) {\n-                if !range.race_free_with_atomic(&clocks) {\n+            for (_, mem_clocks) in alloc_ranges.iter(range.start, range.size) {\n+                if !mem_clocks.race_free_with_atomic(&thread_clocks) {\n                     return false;\n                 }\n             }\n@@ -851,25 +868,29 @@ impl VClockAlloc {\n     pub fn read<'tcx>(\n         &self,\n         alloc_id: AllocId,\n-        range: AllocRange,\n+        access_range: AllocRange,\n         machine: &MiriMachine<'_, '_>,\n     ) -> InterpResult<'tcx> {\n         let current_span = machine.current_span();\n         let global = machine.data_race.as_ref().unwrap();\n         if global.race_detecting() {\n-            let (index, mut clocks) = global.current_thread_state_mut(&machine.threads);\n+            let (index, mut thread_clocks) = global.current_thread_state_mut(&machine.threads);\n             let mut alloc_ranges = self.alloc_ranges.borrow_mut();\n-            for (offset, range) in alloc_ranges.iter_mut(range.start, range.size) {\n-                if let Err(DataRace) = range.read_race_detect(&mut clocks, index, current_span) {\n-                    drop(clocks);\n+            for (mem_clocks_range, mem_clocks) in\n+                alloc_ranges.iter_mut(access_range.start, access_range.size)\n+            {\n+                if let Err(DataRace) =\n+                    mem_clocks.read_race_detect(&mut thread_clocks, index, current_span)\n+                {\n+                    drop(thread_clocks);\n                     // Report data-race.\n                     return Self::report_data_race(\n                         global,\n                         &machine.threads,\n-                        range,\n+                        mem_clocks,\n                         \"Read\",\n                         false,\n-                        Pointer::new(alloc_id, offset),\n+                        Pointer::new(alloc_id, Size::from_bytes(mem_clocks_range.start)),\n                     );\n                 }\n             }\n@@ -883,27 +904,32 @@ impl VClockAlloc {\n     fn unique_access<'tcx>(\n         &mut self,\n         alloc_id: AllocId,\n-        range: AllocRange,\n+        access_range: AllocRange,\n         write_type: WriteType,\n         machine: &mut MiriMachine<'_, '_>,\n     ) -> InterpResult<'tcx> {\n         let current_span = machine.current_span();\n         let global = machine.data_race.as_mut().unwrap();\n         if global.race_detecting() {\n-            let (index, mut clocks) = global.current_thread_state_mut(&machine.threads);\n-            for (offset, range) in self.alloc_ranges.get_mut().iter_mut(range.start, range.size) {\n-                if let Err(DataRace) =\n-                    range.write_race_detect(&mut clocks, index, write_type, current_span)\n-                {\n-                    drop(clocks);\n+            let (index, mut thread_clocks) = global.current_thread_state_mut(&machine.threads);\n+            for (mem_clocks_range, mem_clocks) in\n+                self.alloc_ranges.get_mut().iter_mut(access_range.start, access_range.size)\n+            {\n+                if let Err(DataRace) = mem_clocks.write_race_detect(\n+                    &mut thread_clocks,\n+                    index,\n+                    write_type,\n+                    current_span,\n+                ) {\n+                    drop(thread_clocks);\n                     // Report data-race\n                     return Self::report_data_race(\n                         global,\n                         &machine.threads,\n-                        range,\n+                        mem_clocks,\n                         write_type.get_descriptor(),\n                         false,\n-                        Pointer::new(alloc_id, offset),\n+                        Pointer::new(alloc_id, Size::from_bytes(mem_clocks_range.start)),\n                     );\n                 }\n             }\n@@ -1125,19 +1151,23 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n                 data_race.maybe_perform_sync_operation(\n                     &this.machine.threads,\n                     current_span,\n-                    |index, mut clocks| {\n-                        for (offset, range) in\n+                    |index, mut thread_clocks| {\n+                        for (mem_clocks_range, mem_clocks) in\n                             alloc_meta.alloc_ranges.borrow_mut().iter_mut(base_offset, size)\n                         {\n-                            if let Err(DataRace) = op(range, &mut clocks, index, atomic) {\n-                                mem::drop(clocks);\n+                            if let Err(DataRace) = op(mem_clocks, &mut thread_clocks, index, atomic)\n+                            {\n+                                mem::drop(thread_clocks);\n                                 return VClockAlloc::report_data_race(\n                                     data_race,\n                                     &this.machine.threads,\n-                                    range,\n+                                    mem_clocks,\n                                     description,\n                                     true,\n-                                    Pointer::new(alloc_id, offset),\n+                                    Pointer::new(\n+                                        alloc_id,\n+                                        Size::from_bytes(mem_clocks_range.start),\n+                                    ),\n                                 )\n                                 .map(|_| true);\n                             }\n@@ -1150,13 +1180,14 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n \n                 // Log changes to atomic memory.\n                 if log::log_enabled!(log::Level::Trace) {\n-                    for (_offset, range) in alloc_meta.alloc_ranges.borrow().iter(base_offset, size)\n+                    for (_offset, mem_clocks) in\n+                        alloc_meta.alloc_ranges.borrow().iter(base_offset, size)\n                     {\n                         log::trace!(\n                             \"Updated atomic memory({:?}, size={}) to {:#?}\",\n                             place.ptr,\n                             size.bytes(),\n-                            range.atomic_ops\n+                            mem_clocks.atomic_ops\n                         );\n                     }\n                 }"}, {"sha": "32717a0d28b5a52e83843453d8e1eb545b440e97", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -4,6 +4,8 @@\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::fmt;\n+use std::path::Path;\n+use std::process;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n@@ -498,7 +500,21 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n         let profiler = config.measureme_out.as_ref().map(|out| {\n-            measureme::Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n+            let crate_name = layout_cx\n+                .tcx\n+                .sess\n+                .opts\n+                .crate_name\n+                .clone()\n+                .unwrap_or_else(|| \"unknown-crate\".to_string());\n+            let pid = process::id();\n+            // We adopt the same naming scheme for the profiler output that rustc uses. In rustc,\n+            // the PID is padded so that the nondeterministic value of the PID does not spread\n+            // nondeterminisim to the allocator. In Miri we are not aiming for such performance\n+            // control, we just pad for consistency with rustc.\n+            let filename = format!(\"{crate_name}-{pid:07}\");\n+            let path = Path::new(out).join(filename);\n+            measureme::Profiler::new(path).expect(\"Couldn't create `measureme` profiler\")\n         });\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instantiate_global_state(config));"}, {"sha": "146715ddda2380bcc5305cfd6b699842030c1916", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -62,8 +62,10 @@ impl<T> RangeMap<T> {\n     /// *not* split items if they overlap with the edges. Do not use this to mutate\n     /// through interior mutability.\n     ///\n-    /// The iterator also provides the offset of the given element.\n-    pub fn iter(&self, offset: Size, len: Size) -> impl Iterator<Item = (Size, &T)> {\n+    /// The iterator also provides the range of the given element.\n+    /// How exactly the ranges are split can differ even for otherwise identical\n+    /// maps, so user-visible behavior should never depend on the exact range.\n+    pub fn iter(&self, offset: Size, len: Size) -> impl Iterator<Item = (ops::Range<u64>, &T)> {\n         let offset = offset.bytes();\n         let len = len.bytes();\n         // Compute a slice starting with the elements we care about.\n@@ -84,13 +86,21 @@ impl<T> RangeMap<T> {\n         slice\n             .iter()\n             .take_while(move |elem| elem.range.start < end)\n-            .map(|elem| (Size::from_bytes(elem.range.start), &elem.data))\n+            .map(|elem| (elem.range.clone(), &elem.data))\n     }\n \n-    pub fn iter_mut_all(&mut self) -> impl Iterator<Item = &mut T> {\n-        self.v.iter_mut().map(|elem| &mut elem.data)\n+    /// Provides mutable iteration over all elements.\n+    /// The iterator also provides the range of the given element.\n+    /// How exactly the ranges are split can differ even for otherwise identical\n+    /// maps, so user-visible behavior should never depend on the exact range.\n+    pub fn iter_mut_all(&mut self) -> impl Iterator<Item = (ops::Range<u64>, &mut T)> {\n+        self.v.iter_mut().map(|elem| (elem.range.clone(), &mut elem.data))\n     }\n \n+    /// Provides iteration over all elements.\n+    /// The iterator also provides the range of the given element.\n+    /// How exactly the ranges are split can differ even for otherwise identical\n+    /// maps, so user-visible behavior should never depend on the exact range.\n     pub fn iter_all(&self) -> impl Iterator<Item = (ops::Range<u64>, &T)> {\n         self.v.iter().map(|elem| (elem.range.clone(), &elem.data))\n     }\n@@ -126,8 +136,15 @@ impl<T> RangeMap<T> {\n     /// to make sure that when they are mutated, the effect is constrained to the given range.\n     /// Moreover, this will opportunistically merge neighbouring equal blocks.\n     ///\n-    /// The iterator also provides the offset of the given element.\n-    pub fn iter_mut(&mut self, offset: Size, len: Size) -> impl Iterator<Item = (Size, &mut T)>\n+    /// The iterator also provides the range of the given element.\n+    /// How exactly the ranges are split (both prior to and resulting from the execution of this\n+    /// function) can differ even for otherwise identical maps,\n+    /// so user-visible behavior should never depend on the exact range.\n+    pub fn iter_mut(\n+        &mut self,\n+        offset: Size,\n+        len: Size,\n+    ) -> impl Iterator<Item = (ops::Range<u64>, &mut T)>\n     where\n         T: Clone + PartialEq,\n     {\n@@ -208,7 +225,25 @@ impl<T> RangeMap<T> {\n             // Now we yield the slice. `end` is inclusive.\n             &mut self.v[first_idx..=end_idx]\n         };\n-        slice.iter_mut().map(|elem| (Size::from_bytes(elem.range.start), &mut elem.data))\n+        slice.iter_mut().map(|elem| (elem.range.clone(), &mut elem.data))\n+    }\n+\n+    /// Remove all adjacent duplicates\n+    pub fn merge_adjacent_thorough(&mut self)\n+    where\n+        T: PartialEq,\n+    {\n+        let clean = Vec::with_capacity(self.v.len());\n+        for elem in std::mem::replace(&mut self.v, clean) {\n+            if let Some(prev) = self.v.last_mut() {\n+                if prev.data == elem.data {\n+                    assert_eq!(prev.range.end, elem.range.start);\n+                    prev.range.end = elem.range.end;\n+                    continue;\n+                }\n+            }\n+            self.v.push(elem);\n+        }\n     }\n }\n "}, {"sha": "98c22fef07664fbe4ab9318c8668d66abf5c4eb6", "filename": "src/tools/miri/test-cargo-miri/subcrate/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fsrc%2Flib.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,16 @@\n+// This is a proc-macro crate.\n+\n+extern crate proc_macro; // make sure proc_macro is in the sysroot\n+\n #[cfg(doctest)]\n compile_error!(\"rustdoc should not touch me\");\n \n-#[cfg(test)]\n+#[cfg(miri)]\n compile_error!(\"Miri should not touch me\");\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn make_answer(_item: TokenStream) -> TokenStream {\n+    \"fn answer() -> u32 { 42 }\".parse().unwrap()\n+}"}, {"sha": "fe70ab3f45aa528493ee136b15bd5bd4e7e69541", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 78, "deletions": 24, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -2,6 +2,8 @@ use colored::*;\n use regex::bytes::Regex;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n+use ui_test::status_emitter::StatusEmitter;\n+use ui_test::CommandBuilder;\n use ui_test::{color_eyre::Result, Config, Match, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n@@ -44,40 +46,30 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n }\n \n fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n-    let mut config = Config {\n-        target: Some(target.to_owned()),\n-        stderr_filters: STDERR.clone(),\n-        stdout_filters: STDOUT.clone(),\n-        root_dir: PathBuf::from(path),\n-        mode,\n-        program: miri_path(),\n-        quiet: false,\n-        edition: Some(\"2018\".into()),\n-        ..Config::default()\n-    };\n+    // Miri is rustc-like, so we create a default builder for rustc and modify it\n+    let mut program = CommandBuilder::rustc();\n+    program.program = miri_path();\n \n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n-        config.args.push(\"-Astable-features\".into());\n-        config.args.push(\"-Aunused\".into());\n+        program.args.push(\"-Astable-features\".into());\n+        program.args.push(\"-Aunused\".into());\n     } else {\n-        config.args.push(\"-Dwarnings\".into());\n-        config.args.push(\"-Dunused\".into());\n+        program.args.push(\"-Dwarnings\".into());\n+        program.args.push(\"-Dunused\".into());\n     }\n     if let Ok(extra_flags) = env::var(\"MIRIFLAGS\") {\n         for flag in extra_flags.split_whitespace() {\n-            config.args.push(flag.into());\n+            program.args.push(flag.into());\n         }\n     }\n-    config.args.push(\"-Zui-testing\".into());\n-    if let Some(target) = &config.target {\n-        config.args.push(\"--target\".into());\n-        config.args.push(target.into());\n-    }\n+    program.args.push(\"-Zui-testing\".into());\n+    program.args.push(\"--target\".into());\n+    program.args.push(target.into());\n \n     // If we're on linux, and we're testing the extern-so functionality,\n     // then build the shared object file for testing external C function calls\n@@ -86,18 +78,31 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         let so_file_path = build_so_for_c_ffi_tests();\n         let mut flag = std::ffi::OsString::from(\"-Zmiri-extern-so-file=\");\n         flag.push(so_file_path.into_os_string());\n-        config.args.push(flag);\n+        program.args.push(flag);\n     }\n \n     let skip_ui_checks = env::var_os(\"MIRI_SKIP_UI_CHECKS\").is_some();\n \n-    config.output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n+    let output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n         (false, false) => OutputConflictHandling::Error,\n         (true, false) => OutputConflictHandling::Bless,\n         (false, true) => OutputConflictHandling::Ignore,\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n+    let mut config = Config {\n+        target: Some(target.to_owned()),\n+        stderr_filters: STDERR.clone(),\n+        stdout_filters: STDOUT.clone(),\n+        root_dir: PathBuf::from(path),\n+        mode,\n+        program,\n+        output_conflict_handling,\n+        quiet: false,\n+        edition: Some(\"2021\".into()),\n+        ..Config::default()\n+    };\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n     config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n@@ -135,7 +140,14 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n             \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n         ];\n     }\n-    ui_test::run_tests(config)\n+    ui_test::run_tests_generic(\n+        config,\n+        // The files we're actually interested in (all `.rs` files).\n+        |path| path.extension().is_some_and(|ext| ext == \"rs\"),\n+        // This could be used to overwrite the `Config` on a per-test basis.\n+        |_, _| None,\n+        TextAndGha,\n+    )\n }\n \n macro_rules! regexes {\n@@ -235,3 +247,45 @@ fn main() -> Result<()> {\n \n     Ok(())\n }\n+\n+/// This is a custom renderer for `ui_test` output that does not emit github actions\n+/// `group`s, while still producing regular github actions messages on test failures.\n+struct TextAndGha;\n+impl StatusEmitter for TextAndGha {\n+    fn failed_test<'a>(\n+        &'a self,\n+        revision: &'a str,\n+        path: &'a Path,\n+        cmd: &'a Command,\n+        stderr: &'a [u8],\n+    ) -> Box<dyn std::fmt::Debug + 'a> {\n+        Box::new((\n+            ui_test::status_emitter::Gha::<false>.failed_test(revision, path, cmd, stderr),\n+            ui_test::status_emitter::Text.failed_test(revision, path, cmd, stderr),\n+        ))\n+    }\n+\n+    fn run_tests(&self, _config: &Config) -> Box<dyn ui_test::status_emitter::DuringTestRun> {\n+        Box::new(TextAndGha)\n+    }\n+\n+    fn finalize(\n+        &self,\n+        failures: usize,\n+        succeeded: usize,\n+        ignored: usize,\n+        filtered: usize,\n+    ) -> Box<dyn ui_test::status_emitter::Summary> {\n+        Box::new((\n+            ui_test::status_emitter::Gha::<false>.finalize(failures, succeeded, ignored, filtered),\n+            ui_test::status_emitter::Text.finalize(failures, succeeded, ignored, filtered),\n+        ))\n+    }\n+}\n+\n+impl ui_test::status_emitter::DuringTestRun for TextAndGha {\n+    fn test_result(&mut self, path: &Path, revision: &str, result: &ui_test::TestResult) {\n+        ui_test::status_emitter::Text.test_result(path, revision, result);\n+        ui_test::status_emitter::Gha::<false>.test_result(path, revision, result);\n+    }\n+}"}, {"sha": "e8ba824db717c6fcf6f909cfa450344015bc3af2", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {"}, {"sha": "e3f9a20ac3bcbd821d31825b511e643ca65bbc69", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "f07bbda4a9be9219468e549a80236419878c68eb", "filename": "src/tools/miri/tests/fail/alloc/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: dereferenced after this allocation got freed\n+//@error-in-other-file: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "2e88e5644e441c3810d07dbd21e61898e900131c", "filename": "src/tools/miri/tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n // Make sure we detect when the `Global` and `System` allocators are mixed\n // (even when the default `Global` uses `System`).\n-//@error-pattern: /deallocating .*, which is Rust heap memory, using .* heap deallocation operation/\n+//@error-in-other-file: /deallocating .*, which is Rust heap memory, using .* heap deallocation operation/\n \n //@normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\""}, {"sha": "49b2c62d7e4f7544eb3695c5eabb2474a5d60722", "filename": "src/tools/miri/tests/fail/alloc/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, realloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "130e2a8301e1c542b5517b668785d2cae3ad9f1a", "filename": "src/tools/miri/tests/fail/alloc/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, realloc, Layout};\n \n-//@error-pattern: dereferenced after this allocation got freed\n+//@error-in-other-file: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "15a17a25afefc9c54441d8f2d05683b5f74269d5", "filename": "src/tools/miri/tests/fail/alloc/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-//@error-pattern: /deallocating .*, which is stack variable memory, using Rust heap deallocation operation/\n+//@error-in-other-file: /deallocating .*, which is stack variable memory, using Rust heap deallocation operation/\n \n fn main() {\n     let x = 42;"}, {"sha": "7e6f490bb3dd452b751228d663d1d905e20ced8d", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n-//@error-pattern: the main thread terminated without waiting for all remaining threads\n+//@error-in-other-file: the main thread terminated without waiting for all remaining threads\n \n // Check that we terminate the program when the main thread terminates.\n "}, {"sha": "c2de4afd68fa68ab7c13a157928d787ded794a45", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_few_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -7,8 +7,8 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: inside `thread_start` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "85ae930d439bb2fb6522851401eb26e28c61f9b8", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_many_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -7,8 +7,8 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: inside `thread_start` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b68a07797f8bd9e5c2306cebbc8789b417867fb8", "filename": "src/tools/miri/tests/fail/concurrency/windows_join_detached.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@only-target-windows: Uses win32 api functions\n-//@error-pattern: Undefined Behavior: trying to join a detached thread\n+//@error-in-other-file: Undefined Behavior: trying to join a detached thread\n \n // Joining a detached thread is undefined behavior.\n "}, {"sha": "9cc8b91ff500c8f1d7e9961384d857af6525d46e", "filename": "src/tools/miri/tests/fail/const-ub-checks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,3 @@\n-\n const UNALIGNED_READ: () = unsafe {\n     let x = &[0u8; 4];\n     let ptr = x.as_ptr().cast::<u32>();"}, {"sha": "42077dfae2d38dd0f57d7fcb9764de7df3106b5b", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -34,6 +35,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n \n             // Note: could also error due to reading uninitialized memory, but the data-race detector triggers first."}, {"sha": "53f4e637a197d4f3318929316aab49b2ca5ea670", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -34,6 +35,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Relaxed) = 2; //~ ERROR: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "9606df1d6ff784df005e3e54512a17ce8dc77f39", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *(c.0 as *mut usize) = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Load on thread `<unnamed>`\n         });\n "}, {"sha": "0e29ab32eef9beebfcc42a6edd20b0bf9fa4a963", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.load(Ordering::SeqCst)\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Load on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "6f1792bc8f4f741d11782bd3feaa13dbf17a0535", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.store(32, Ordering::SeqCst)\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n         });"}, {"sha": "e84207e655d617bbeefb3eec2e4a5e67a5dfd4bb", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let _val = *(c.0 as *mut usize);\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).store(32, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n "}, {"sha": "ca269b1bd2ac03677674e019702d58a049673e02", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *(c.0 as *mut usize) = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).store(64, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n "}, {"sha": "0d69a9a332dc4812d7b35a5e0fba0cafb74ccf1e", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.store(64, Ordering::SeqCst);\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "0679b81f0122c0deda6070bf01ad5983a275a14b", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -18,6 +18,7 @@ fn main() {\n \n     let join = unsafe {\n         spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 32;\n         })\n     };\n@@ -34,6 +35,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         })\n     };"}, {"sha": "3c5dd424eb110799e31008653c9ba43ae3966962", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -18,6 +18,7 @@ fn main() {\n \n     let join = unsafe {\n         spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         })\n     };"}, {"sha": "3c25cdc0d8d878b967a7d7b6444ee81715594a6e", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -20,10 +20,12 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let _val = *ptr.0;\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 //~^ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,"}, {"sha": "5d7a0cc1dc93e1f9a79a7df97054c834fa034c1a", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -20,6 +20,7 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n@@ -28,6 +29,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 //~ ERROR: dereferenced after this allocation got freed"}, {"sha": "87b5f204816cbdd696b8a1594758e7b1b66c70ae", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire)\n         });"}, {"sha": "b700f50ce1911e95f846532401b8e91beff1a131", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -19,10 +19,12 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             *ptr.0 = 2;\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 //~^ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,"}, {"sha": "a7f43f03c0258e5156bc92e6d93e253900b20261", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -19,6 +19,7 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n@@ -27,6 +28,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 = 2; //~ ERROR: dereferenced after this allocation got freed"}, {"sha": "3d35187a018c03103df2a6266eabc876ef14a0ba", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "b44be4ac64e8889dfc47422d3410366d9a679ff5", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -26,10 +26,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "aed3ca767f627bfa7d95601223e6c31f8621ba26", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -15,10 +15,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let _val = *c.0;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "40224ced12d0882446bb4147f9f52481ab7b858d", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -31,6 +31,7 @@ pub fn main() {\n     //  5. read-value\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -46,6 +47,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "1b691b996f141c3801024e50ffc0457f873744fe", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  4. load acquire : 2\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -36,6 +37,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "80b30053fc7004dbd723abdf137259c103dcdcb7", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -27,6 +27,7 @@ pub fn main() {\n     //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n             sleep(Duration::from_millis(200));\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n             sleep(Duration::from_millis(500));\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`"}, {"sha": "33de1f1755811cbc0c7cd06f4ea8bc786bbaee7b", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  3. load acquire : 2\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n \n@@ -36,6 +37,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "4d0ce8f94339af52ac1ace36157b1b2a72cd4ce9", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -37,6 +38,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "d3c2ab3e4a46460fc9ece9318bd4ab22b6943c02", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -13,7 +13,7 @@ fn main() {\n fn race(local: i32) {\n     let ptr = MakeSend(&local as *const i32);\n     thread::spawn(move || {\n-        let ptr = ptr;\n+        let ptr = ptr; // avoid field capturing\n         let _val = unsafe { *ptr.0 };\n     });\n     // Make the other thread go first so that it does not UAF."}, {"sha": "30e3460f222e14a8dd381a0b6dbd5f455fbf6d6b", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -15,10 +15,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "25be42bd4eb781a064ba8a5a2c63e4e429c0f67b", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -28,6 +28,7 @@ pub fn main() {\n     //  5. write-value\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -46,6 +47,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "f49fa49d09d5e6070def6504d29411dbb6b2259c", "filename": "src/tools/miri/tests/fail/deny_lint.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,8 @@\n+//@error-in-other-file: miri cannot be run on programs that fail compilation\n+\n+#![deny(warnings, unused)]\n+\n+struct Foo;\n+//~^ ERROR: struct `Foo` is never constructed\n+\n+fn main() {}"}, {"sha": "d1c9b4818071ac0be8b7c5ce954cee18b6db71ea", "filename": "src/tools/miri/tests/fail/deny_lint.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,17 @@\n+error: struct `Foo` is never constructed\n+  --> $DIR/deny_lint.rs:LL:CC\n+   |\n+LL | struct Foo;\n+   |        ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny_lint.rs:LL:CC\n+   |\n+LL | #![deny(warnings, unused)]\n+   |                   ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: miri cannot be run on programs that fail compilation\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "209c4a932dc917d7cf7aee9f47c82f93af1f99e2", "filename": "src/tools/miri/tests/fail/erroneous_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n LL |     const VOID: ! = panic!();\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/erroneous_const.rs:LL:CC\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n   --> $DIR/erroneous_const.rs:LL:CC"}, {"sha": "8905d739078a2853290d51226cd84eec27833214", "filename": "src/tools/miri/tests/fail/intrinsics/simd-float-to-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: cannot be represented in target type `i32`\n+//@error-in-other-file: cannot be represented in target type `i32`\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "5dd9bd8a685507a0dfb204e7bce093d68c236f23", "filename": "src/tools/miri/tests/fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-in-other-file: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "0a64478dc74b274d554065ebde715568c97d461f", "filename": "src/tools/miri/tests/fail/intrinsics/simd-scatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-in-other-file: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "3e0dd881db84e52a011beac32d988d70e83afd38", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: a cycle occurred during layout computation\n+//@error-in-other-file: a cycle occurred during layout computation\n //~^ ERROR: cycle detected when computing layout of\n \n use std::mem;"}, {"sha": "984b44d6d40928b99f4126907060410df299eaa0", "filename": "src/tools/miri/tests/fail/memleak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory leaked\n+//@error-in-other-file: memory leaked\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {"}, {"sha": "a1f8d9957ff8e02a463bb8d9e23e30df55fd098e", "filename": "src/tools/miri/tests/fail/memleak_no_backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-disable-leak-backtraces\n-//@error-pattern: the evaluated program leaked memory\n+//@error-in-other-file: the evaluated program leaked memory\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {"}, {"sha": "0927612d08eac8fd436b1521a06cbe2ff0d798ef", "filename": "src/tools/miri/tests/fail/memleak_rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory leaked\n+//@error-in-other-file: memory leaked\n //@stderr-per-bitwidth\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n "}, {"sha": "01b8c7bd66bf0f38602a25025ac23d91b7705adc", "filename": "src/tools/miri/tests/fail/no_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,2 +1,2 @@\n-//@error-pattern: miri can only run programs that have a main function\n+//@error-in-other-file: miri can only run programs that have a main function\n #![no_main]"}, {"sha": "9378adb8609df3d2a71be9dbc41d65e6b7dd5d21", "filename": "src/tools/miri/tests/fail/panic/double_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted\n+//@error-in-other-file: the program aborted\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@normalize-stderr-test: \"\\n  +[0-9]+:[^\\n]+\" -> \"$1\""}, {"sha": "77d5fc5d7ceb9ab18cfee5513b3968d120a40e0c", "filename": "src/tools/miri/tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -12,7 +12,8 @@ LL |     ABORT();\n    = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `<Foo as std::ops::Drop>::drop`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n@@ -24,7 +25,7 @@ note: inside `main`\n    |\n LL | }\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f8307c0c23bf8f5c35a58f313e0dd5a6891c5fa3", "filename": "src/tools/miri/tests/fail/panic/no_std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -11,7 +11,7 @@ note: inside `start`\n    |\n LL |     panic!(\"blarg I am dead\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "300bfa32ecbd63340b0b397913887e6c4300aeb6", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "d9303fd0d068417c14c80658df9c05a72a1ba89f", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -11,13 +11,14 @@ LL |                 ABORT();\n    = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `main`\n   --> $DIR/panic_abort1.rs:LL:CC\n    |\n LL |     std::panic!(\"panicking from libstd\");\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5d691350577085d7fcc293d658129b9eaa16241d", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "54cbc9b5f6d967a6dc6bdd7d5dc4cbc74d27851a", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     std::panic!(\"{}-panicking from libstd\", 42);\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "25afc315628e33228d4973b7b1f16651d91d204c", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "64eea47b14b4bb86592181cccf8a12108a3a2bc0", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     core::panic!(\"panicking from libcore\");\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "025b51a5cf51aaa9ccb9226c25a40cbf0b059264", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "21beb1006459b7eb8b93082c0d135d236803f00c", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     core::panic!(\"{}-panicking from libcore\", 42);\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2f27e95297b25095fb1e580904072fc9e2bce93e", "filename": "src/tools/miri/tests/fail/shims/fs/isolated_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@ignore-target-windows: File handling is not implemented yet\n-//@error-pattern: `open` not available when isolation is enabled\n+//@error-in-other-file: `open` not available when isolation is enabled\n \n fn main() {\n     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "a34df7c7fe3ae6c36d28df31a65f727cb939a367", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: /deallocating while item \\[Unique for .*\\] is strongly protected/\n+//@error-in-other-file: /deallocating while item \\[Unique for .*\\] is strongly protected/\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "9126b7e8575b05f7fbfaa737185cadc7f4628ff8", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,7 +1,7 @@\n //! Test that drop_in_place mutably retags the entire place, even for a type that does not need\n //! dropping, ensuring among other things that it is writeable\n \n-//@error-pattern: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n+//@error-in-other-file: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n \n fn main() {\n     unsafe {"}, {"sha": "b2ec23bda02c5eadb4e6241d6dfdb5392f88b8bc", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_dealloc1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: /deallocation .* tag does not exist in the borrow stack/\n+//@error-in-other-file: /deallocation .* tag does not exist in the borrow stack/\n use std::alloc::{alloc, dealloc, Layout};\n \n fn main() {"}, {"sha": "075efe494123d84bc2694b4edc14dd87d05ac890", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n+//@error-in-other-file: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n fn main() {\n     unsafe {"}, {"sha": "1b43daa925389003c9b044eb9674a6c068278000", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: is a dangling pointer\n+//@error-in-other-file: is a dangling pointer\n use std::ptr::NonNull;\n \n fn main() {"}, {"sha": "1ae6740924c50a3eda64f67955be9694d7168e26", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_pair_retagging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: which is strongly protected\n+//@error-in-other-file: which is strongly protected\n struct Newtype<'a>(&'a mut i32, i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "f106274b8112ebd2a02f3d29ed6f84fbb059a8e6", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_retagging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: which is strongly protected\n+//@error-in-other-file: which is strongly protected\n struct Newtype<'a>(&'a mut i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "fd51fa6468a0475f6c344619ced0556046325644", "filename": "src/tools/miri/tests/fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-strict-provenance\n-//@error-pattern: /retag .* tag does not exist in the borrow stack/\n+//@error-in-other-file: /retag .* tag does not exist in the borrow stack/\n \n fn main() {\n     unsafe {"}, {"sha": "d96d778e6ca40c96a8e7ecea912c535fb4810c9e", "filename": "src/tools/miri/tests/fail/tokio/sleep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,6 +1,6 @@\n //@compile-flags: -Zmiri-permissive-provenance -Zmiri-backtrace=full\n //@only-target-x86_64-unknown-linux: support for tokio only on linux and x86\n-//@error-pattern: returning ready events from epoll_wait is not yet implemented\n+//@error-in-other-file: returning ready events from epoll_wait is not yet implemented\n //@normalize-stderr-test: \" += note:.*\\n\" -> \"\"\n \n use tokio::time::{sleep, Duration, Instant};"}, {"sha": "484c7c3bbff78744f6498e3063f85a877a73ef34", "filename": "src/tools/miri/tests/fail/tree-borrows/strongly-protected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-tree-borrows\n-//@error-pattern: /deallocation through .* is forbidden/\n+//@error-in-other-file: /deallocation through .* is forbidden/\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "071b216ff982befde074245a6f69d5183205d9e2", "filename": "src/tools/miri/tests/fail/tree-borrows/strongly-protected.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -17,6 +17,12 @@ help: the strongly protected tag <TAG> was created here, in the initial state Re\n    |\n LL | fn inner(x: &mut i32, f: fn(&mut i32)) {\n    |          ^\n+help: the strongly protected tag <TAG> then transitioned from Reserved to Active due to a child write access at offsets [0x0..0x4]\n+  --> $DIR/strongly-protected.rs:LL:CC\n+   |\n+LL |         drop(unsafe { Box::from_raw(raw) });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: this corresponds to an activation\n    = note: BACKTRACE (of the first span):\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "d8cab68ac5de800c74a09dca6ab5d25b50e4f16a", "filename": "src/tools/miri/tests/fail/unaligned_pointers/drop_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -13,7 +13,7 @@ struct PartialDrop {\n     b: u8,\n }\n \n-//@error-pattern: /alignment 2 is required/\n+//@error-in-other-file: /alignment 2 is required/\n fn main() {\n     unsafe {\n         // Create an unaligned pointer"}, {"sha": "8819c53a4f91e53f8e750d3da437b314296f8429", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory is uninitialized at [0x4..0x10]\n+//@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "e788c079cb4dea4ec90af54e031ef27fad4906eb", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory is uninitialized at [0x4..0x8]\n+//@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n "}, {"sha": "0f4535e6792e6524fd3264c7ada3beaf8461f05f", "filename": "src/tools/miri/tests/panic/panic1.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,9 +1,11 @@\n thread 'main' panicked at 'panicking from libstd', $DIR/panic1.rs:LL:CC\n stack backtrace:\n-   0: std::rt::begin_panic\n+   0: std::panicking::begin_panic_handler\n  at RUSTLIB/std/src/panicking.rs:LL:CC\n-   1: main\n+   1: std::rt::panic_fmt\n+ at RUSTLIB/core/src/panicking.rs:LL:CC\n+   2: main\n  at $DIR/panic1.rs:LL:CC\n-   2: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n+   3: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n  at RUSTLIB/core/src/ops/function.rs:LL:CC\n note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "68504cb1c794fc8a1b0ec5e0c3b7cbe73f423aad", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -101,7 +101,6 @@ fn test_posix_realpath_errors() {\n \n #[cfg(target_os = \"linux\")]\n fn test_posix_fadvise() {\n-    use std::convert::TryInto;\n     use std::io::Write;\n \n     let path = tmp().join(\"miri_test_libc_posix_fadvise.txt\");"}, {"sha": "abfe3b0adeb4d0014a85082c3bbc2c3f0d894093", "filename": "src/tools/miri/tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -116,11 +116,13 @@ fn test_message_passing() {\n \n     #[rustfmt::skip]\n     let j1 = spawn(move || {\n+        let x = x; // avoid field capturing\n         unsafe { *x.0 = 1 }; // -----------------------------------------+\n         y.store(1, Release); // ---------------------+                   |\n     }); //                                           |                   |\n     #[rustfmt::skip] //                              |synchronizes-with  | happens-before\n     let j2 = spawn(move || { //                      |                   |\n+        let x = x; // avoid field capturing          |                   |\n         acquires_value(&y, 1); // <------------------+                   |\n         unsafe { *x.0 } // <---------------------------------------------+\n     });"}, {"sha": "d31420380a565ae5fc90d6a6339e67fa826f03c3", "filename": "src/tools/miri/tests/pass/concurrency/data_race.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -17,12 +17,14 @@ fn test_fence_sync() {\n     let evil_ptr = EvilSend(ptr);\n \n     let j1 = spawn(move || {\n+        let evil_ptr = evil_ptr; // avoid field capturing\n         unsafe { *evil_ptr.0 = 1 };\n         fence(Ordering::Release);\n         SYNC.store(1, Ordering::Relaxed)\n     });\n \n     let j2 = spawn(move || {\n+        let evil_ptr = evil_ptr; // avoid field capturing\n         if SYNC.load(Ordering::Relaxed) == 1 {\n             fence(Ordering::Acquire);\n             unsafe { *evil_ptr.0 }\n@@ -40,10 +42,10 @@ fn test_multiple_reads() {\n     let ptr = &mut var as *mut u32;\n     let evil_ptr = EvilSend(ptr);\n \n-    let j1 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j2 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j3 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j4 = spawn(move || unsafe { *evil_ptr.0 });\n+    let j1 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j2 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j3 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j4 = spawn(move || unsafe { *{ evil_ptr }.0 });\n \n     assert_eq!(j1.join().unwrap(), 42);\n     assert_eq!(j2.join().unwrap(), 42);\n@@ -63,6 +65,7 @@ pub fn test_rmw_no_block() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -73,7 +76,10 @@ pub fn test_rmw_no_block() {\n             }\n         });\n \n-        let j3 = spawn(move || if SYNC.load(Ordering::Acquire) == 2 { *c.0 } else { 0 });\n+        let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n+            if SYNC.load(Ordering::Acquire) == 2 { *c.0 } else { 0 }\n+        });\n \n         j1.join().unwrap();\n         j2.join().unwrap();\n@@ -91,11 +97,15 @@ pub fn test_simple_release() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n \n-        let j2 = spawn(move || if SYNC.load(Ordering::Acquire) == 1 { *c.0 } else { 0 });\n+        let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n+            if SYNC.load(Ordering::Acquire) == 1 { *c.0 } else { 0 }\n+        });\n \n         j1.join().unwrap();\n         assert_eq!(j2.join().unwrap(), 1); // relies on thread 2 going last"}, {"sha": "049b5e7f4987182c33acff4733edd6694af2b6ec", "filename": "src/tools/miri/tests/pass/concurrency/disable_data_race_detector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -14,10 +14,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; // Data race (but not detected as the detector is disabled)\n         });\n "}, {"sha": "dccc9d104dd0edf44a53c297f1a49b4385725a49", "filename": "src/tools/miri/tests/pass/concurrency/sync.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -201,8 +201,10 @@ fn park_timeout() {\n     thread::park_timeout(Duration::from_millis(200));\n     // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n     // know Miri's timed synchronization primitives do not do that.\n-\n-    assert!((200..1000).contains(&start.elapsed().as_millis()));\n+    // We allow much longer sleeps as well since the macOS GHA runners seem very oversubscribed\n+    // and sometimes just pause for 1 second or more.\n+    let elapsed = start.elapsed();\n+    assert!((200..2000).contains(&elapsed.as_millis()), \"bad sleep time: {elapsed:?}\");\n }\n \n fn park_unpark() {\n@@ -219,8 +221,10 @@ fn park_unpark() {\n     thread::park();\n     // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n     // know Miri's timed synchronization primitives do not do that.\n-\n-    assert!((200..1000).contains(&start.elapsed().as_millis()));\n+    // We allow much longer sleeps as well since the macOS GHA runners seem very oversubscribed\n+    // and sometimes just pause for 1 second or more.\n+    let elapsed = start.elapsed();\n+    assert!((200..2000).contains(&elapsed.as_millis()), \"bad sleep time: {elapsed:?}\");\n \n     t2.join().unwrap();\n }"}, {"sha": "fc4c8a283ddb277e5f578107fe039b24945e94c7", "filename": "src/tools/miri/tests/pass/concurrency/thread_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -42,6 +42,7 @@ fn main() {\n     };\n \n     thread::spawn(move || unsafe {\n+        let ptr = ptr; // avoid field capturing\n         assert_eq!(*ptr.0, 5);\n         assert_eq!(A, 0);\n         assert_eq!(B, 0);"}, {"sha": "3b27af9094cc54260927913a0fea77a806d2186d", "filename": "src/tools/miri/tests/pass/concurrency/windows_condvar_shared.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -44,6 +44,8 @@ fn all_shared() {\n     // waiters\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -71,6 +73,7 @@ fn all_shared() {\n     // readers\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -111,6 +114,8 @@ fn shared_sleep_and_exclusive_lock() {\n     let mut waiters = Vec::with_capacity(5);\n     for i in 0..5 {\n         waiters.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -170,6 +175,8 @@ fn exclusive_sleep_and_shared_lock() {\n     let mut handles = Vec::with_capacity(10);\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockExclusive(lock_ptr.0);\n             }\n@@ -193,6 +200,7 @@ fn exclusive_sleep_and_shared_lock() {\n \n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }"}, {"sha": "b2412f7dbb0e65f225fbf294c90d7955ae82417d", "filename": "src/tools/miri/tests/pass/concurrency/windows_init_once.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -66,6 +66,7 @@ fn block_until_complete() {\n     let init_once_ptr = SendPtr(&mut init_once);\n \n     let waiter = move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n         let mut pending = 0;\n \n         assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n@@ -102,6 +103,7 @@ fn retry_on_fail() {\n     let init_once_ptr = SendPtr(&mut init_once);\n \n     let waiter = move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n         let mut pending = 0;\n \n         assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n@@ -146,6 +148,8 @@ fn no_data_race_after_complete() {\n     let place_ptr = SendPtr(&mut place);\n \n     let reader = thread::spawn(move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n+        let place_ptr = place_ptr; // avoid field capture\n         let mut pending = 0;\n \n         // this doesn't block because reader only executes after `InitOnceComplete` is called"}, {"sha": "5da5497f9829f05773521bc80ffadb7f6753110c", "filename": "src/tools/miri/tests/pass/concurrency/windows_join_multiple.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_join_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_join_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_join_multiple.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -22,10 +22,8 @@ fn main() {\n     })\n     .into_raw_handle() as usize;\n \n-    let waiter = move || {\n-        unsafe {\n-            assert_eq!(WaitForSingleObject(blocker, INFINITE), 0);\n-        }\n+    let waiter = move || unsafe {\n+        assert_eq!(WaitForSingleObject(blocker, INFINITE), 0);\n     };\n \n     let waiter1 = thread::spawn(waiter);"}, {"sha": "1b00f7cea305fc19a921ebe45d7968b5d6eddba3", "filename": "src/tools/miri/tests/pass/panic/catch_panic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -49,13 +49,12 @@ fn main() {\n \n     // Std panics\n     test(None, |_old_val| std::panic!(\"Hello from panic: std\"));\n-    test(None, |old_val| std::panic!(format!(\"Hello from panic: {:?}\", old_val)));\n+    test(None, |old_val| std::panic::panic_any(format!(\"Hello from panic: {:?}\", old_val)));\n     test(None, |old_val| std::panic!(\"Hello from panic: {:?}\", old_val));\n-    test(None, |_old_val| std::panic!(1337));\n+    test(None, |_old_val| std::panic::panic_any(1337));\n \n     // Core panics\n     test(None, |_old_val| core::panic!(\"Hello from panic: core\"));\n-    test(None, |old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n     test(None, |old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n \n     // Built-in panics; also make sure the message is right."}, {"sha": "f43434582a2991235a503c6ba55481f7fe56a024", "filename": "src/tools/miri/tests/pass/panic/catch_panic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -11,8 +11,6 @@ thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:LL:CC\n Caught panic message (&str): Hello from panic: core\n thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:LL:CC\n Caught panic message (String): Hello from panic: 5\n-thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:LL:CC\n-Caught panic message (String): Hello from panic: 6\n thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:LL:CC\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:LL:CC"}, {"sha": "7cc1e2a973fd68a4072ee403ffc7fcf946ce034c", "filename": "src/tools/miri/tests/pass/panic/concurrent-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -57,7 +57,7 @@ fn main() {\n         let t2_started_pair = t2_started_pair.clone();\n         let block_on_drop = BlockOnDrop::new(t1);\n         spawn(move || {\n-            let _ = block_on_drop;\n+            let _capture = block_on_drop;\n \n             let (mutex, condvar) = &*t2_started_pair;\n             *mutex.lock().unwrap() = true;"}, {"sha": "2c80e5bbd8414f5c28d3273c6f77555e888754d3", "filename": "src/tools/miri/tests/pass/sysroot.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fsysroot.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -0,0 +1,9 @@\n+//! Just check that some things are available in the sysroot.\n+#![feature(test)]\n+#![allow(unused)]\n+\n+extern crate proc_macro;\n+extern crate std;\n+extern crate test;\n+\n+fn main() {}"}]}