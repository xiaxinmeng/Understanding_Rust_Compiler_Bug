{"sha": "50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTVmOTBjOTI1YjQxMWJhYzdkZTBlYzNlYzIzOWQ3ZDMyMWI1YTI=", "commit": {"author": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-07-26T18:26:23Z"}, "committer": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-09-06T11:18:05Z"}, "message": "Suggest deriving traits if possible\n\nThis only applies to builtin derives as I don't think there is a\nclean way to get the available derives in typeck.\n\nCloses #85851", "tree": {"sha": "605d5f1093e938a80377d0b942425f6bcf5e81a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605d5f1093e938a80377d0b942425f6bcf5e81a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "html_url": "https://github.com/rust-lang/rust/commit/50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/comments", "author": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19d864e79531ad702e4f44b2635da6c50cc5eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19d864e79531ad702e4f44b2635da6c50cc5eb0", "html_url": "https://github.com/rust-lang/rust/commit/d19d864e79531ad702e4f44b2635da6c50cc5eb0"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "8ee49e1348bd0a7ee96d3fe29f41b976b387079c", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -829,6 +829,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.note(&format!(\n                             \"the following trait bounds were not satisfied:\\n{bound_list}\"\n                         ));\n+                        self.suggest_derive(&mut err, &unsatisfied_predicates);\n+\n                         unsatisfied_bounds = true;\n                     }\n                 }\n@@ -971,6 +973,85 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    fn suggest_derive(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        unsatisfied_predicates: &Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n+    ) {\n+        let derivables = [\n+            sym::Eq,\n+            sym::PartialEq,\n+            sym::Ord,\n+            sym::PartialOrd,\n+            sym::Clone,\n+            sym::Copy,\n+            sym::Hash,\n+            sym::Default,\n+            sym::debug_trait,\n+        ];\n+        let mut derives = unsatisfied_predicates\n+            .iter()\n+            .filter_map(|(pred, _)| {\n+                let trait_pred =\n+                    if let ty::PredicateKind::Trait(trait_pred) = pred.kind().skip_binder() {\n+                        trait_pred\n+                    } else {\n+                        return None;\n+                    };\n+                let trait_ref = trait_pred.trait_ref;\n+                let adt_def = if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n+                    adt_def\n+                } else {\n+                    return None;\n+                };\n+                if adt_def.did.is_local() {\n+                    let diagnostic_items = self.tcx.diagnostic_items(trait_ref.def_id.krate);\n+                    return derivables.iter().find_map(|trait_derivable| {\n+                        let item_def_id =\n+                            if let Some(item_def_id) = diagnostic_items.get(trait_derivable) {\n+                                item_def_id\n+                            } else {\n+                                return None;\n+                            };\n+                        if item_def_id == &trait_pred.trait_ref.def_id\n+                            && !(adt_def.is_enum() && *trait_derivable == sym::Default)\n+                        {\n+                            return Some((\n+                                format!(\"{}\", trait_ref.self_ty()),\n+                                self.tcx.def_span(adt_def.did),\n+                                format!(\"{}\", trait_ref.print_only_trait_path()),\n+                            ));\n+                        }\n+                        None\n+                    });\n+                }\n+                None\n+            })\n+            .collect::<Vec<(String, Span, String)>>();\n+        derives.sort();\n+        let derives_grouped = derives.into_iter().fold(\n+            Vec::<(String, Span, String)>::new(),\n+            |mut acc, (self_name, self_span, trait_name)| {\n+                if let Some((acc_self_name, _, ref mut traits)) = acc.last_mut() {\n+                    if acc_self_name == &self_name {\n+                        traits.push_str(format!(\", {}\", trait_name).as_str());\n+                        return acc;\n+                    }\n+                }\n+                acc.push((self_name, self_span, trait_name));\n+                acc\n+            },\n+        );\n+        for (self_name, self_span, traits) in &derives_grouped {\n+            err.span_suggestion_verbose(\n+                self_span.shrink_to_lo(),\n+                &format!(\"consider annotating `{}` with `#[derive({})]`\", self_name, traits),\n+                format!(\"#[derive({})]\\n\", traits),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+\n     /// Print out the type for use in value namespace.\n     fn ty_to_value_string(&self, ty: Ty<'tcx>) -> String {\n         match ty.kind() {"}, {"sha": "5ac9fdec0cf58f9a1618b8eda53d32ab52fd3da6", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -203,6 +203,7 @@ use self::Ordering::*;\n     message = \"can't compare `{Self}` with `{Rhs}`\",\n     label = \"no implementation for `{Self} == {Rhs}`\"\n )]\n+#[rustc_diagnostic_item = \"PartialEq\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n     /// by `==`.\n@@ -269,6 +270,7 @@ pub macro PartialEq($item:item) {\n #[doc(alias = \"==\")]\n #[doc(alias = \"!=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Eq\"]\n pub trait Eq: PartialEq<Self> {\n     // this method is used solely by #[deriving] to assert\n     // that every component of a type implements #[deriving]\n@@ -728,6 +730,7 @@ impl<T: Clone> Clone for Reverse<T> {\n #[doc(alias = \"<=\")]\n #[doc(alias = \">=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Ord\"]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an [`Ordering`] between `self` and `other`.\n     ///\n@@ -984,6 +987,7 @@ impl PartialOrd for Ordering {\n     message = \"can't compare `{Self}` with `{Rhs}`\",\n     label = \"no implementation for `{Self} < {Rhs}` and `{Self} > {Rhs}`\"\n )]\n+#[rustc_diagnostic_item = \"PartialOrd\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists.\n     ///"}, {"sha": "da3f20d18e5108f9b5cc1a6ce10e014df78a8f2b", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -157,6 +157,7 @@ mod sip;\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [`hash`]: Hash::hash\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"Hash\"]\n pub trait Hash {\n     /// Feeds this value into the given [`Hasher`].\n     ///"}, {"sha": "82962a1fe13fc2ce59a3342904ee4044c286a627", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -382,6 +382,7 @@ pub trait StructuralEq {\n // existing specializations on `Copy` that already exist in the standard\n // library, and there's no way to safely have this behavior right now.\n #[rustc_unsafe_specialization_marker]\n+#[rustc_diagnostic_item = \"Copy\"]\n pub trait Copy: Clone {\n     // Empty.\n }"}, {"sha": "1080f947732e4442c23d4720b6850292e9ad066c", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -19,6 +19,10 @@ LL |     Bar::<NotClone> { x: 1 }.clone();\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "596b7bfe79c5c56ed7d60abd088da1ad98d344e9", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -9,6 +9,10 @@ LL |     a.unwrap();\n    |\n    = note: the following trait bounds were not satisfied:\n            `Foo: Debug`\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "25043da52aa015aaa3d4cab445e77724f9a9680c", "filename": "src/test/ui/suggestions/derive-trait-for-method-call.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.rs?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -0,0 +1,44 @@\n+use std::time::Instant;\n+\n+enum Enum {\n+    First\n+}\n+\n+#[derive(Clone)]\n+enum CloneEnum {\n+    First\n+}\n+\n+struct Struct {\n+}\n+\n+#[derive(Clone)]\n+struct CloneStruct {\n+}\n+\n+struct Foo<X, Y> (X, Y);\n+impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+    fn test(&self) -> (X, Y) {\n+        (self.0, self.1)\n+    }\n+}\n+\n+fn test1() {\n+    let x = Foo(Enum::First, CloneEnum::First);\n+    let y = x.test();\n+    //~^the method `test` exists for struct `Foo<Enum, CloneEnum>`, but its trait bounds were not satisfied [E0599]\n+}\n+\n+fn test2() {\n+    let x = Foo(Struct{}, CloneStruct{});\n+    let y = x.test();\n+    //~^the method `test` exists for struct `Foo<Struct, CloneStruct>`, but its trait bounds were not satisfied [E0599]\n+}\n+\n+fn test3() {\n+    let x = Foo(Vec::<Enum>::new(), Instant::now());\n+    let y = x.test();\n+    //~^the method `test` exists for struct `Foo<Vec<Enum>, Instant>`, but its trait bounds were not satisfied [E0599]\n+}\n+\n+fn main() {}"}, {"sha": "97fc1134a94774bc4376b52323fbd8624d4fb7c4", "filename": "src/test/ui/suggestions/derive-trait-for-method-call.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -0,0 +1,84 @@\n+error[E0599]: the method `test` exists for struct `Foo<Enum, CloneEnum>`, but its trait bounds were not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:28:15\n+   |\n+LL | enum Enum {\n+   | ---------\n+   | |\n+   | doesn't satisfy `Enum: Clone`\n+   | doesn't satisfy `Enum: Default`\n+...\n+LL | enum CloneEnum {\n+   | -------------- doesn't satisfy `CloneEnum: Default`\n+...\n+LL | struct Foo<X, Y> (X, Y);\n+   | ------------------------ method `test` not found for this\n+...\n+LL |     let y = x.test();\n+   |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Enum: Clone`\n+           `Enum: Default`\n+           `CloneEnum: Default`\n+help: consider annotating `Enum` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `test` exists for struct `Foo<Struct, CloneStruct>`, but its trait bounds were not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:34:15\n+   |\n+LL | struct Struct {\n+   | -------------\n+   | |\n+   | doesn't satisfy `Struct: Clone`\n+   | doesn't satisfy `Struct: Default`\n+...\n+LL | struct CloneStruct {\n+   | ------------------ doesn't satisfy `CloneStruct: Default`\n+...\n+LL | struct Foo<X, Y> (X, Y);\n+   | ------------------------ method `test` not found for this\n+...\n+LL |     let y = x.test();\n+   |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Struct: Clone`\n+           `Struct: Default`\n+           `CloneStruct: Default`\n+help: consider annotating `CloneStruct` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n+help: consider annotating `Struct` with `#[derive(Clone, Default)]`\n+   |\n+LL | #[derive(Clone, Default)]\n+   |\n+\n+error[E0599]: the method `test` exists for struct `Foo<Vec<Enum>, Instant>`, but its trait bounds were not satisfied\n+  --> $DIR/derive-trait-for-method-call.rs:40:15\n+   |\n+LL | struct Foo<X, Y> (X, Y);\n+   | ------------------------ method `test` not found for this\n+...\n+LL |     let y = x.test();\n+   |               ^^^^ method cannot be called on `Foo<Vec<Enum>, Instant>` due to unsatisfied trait bounds\n+   |\n+  ::: $SRC_DIR/std/src/time.rs:LL:COL\n+   |\n+LL | pub struct Instant(time::Instant);\n+   | ---------------------------------- doesn't satisfy `Instant: Default`\n+   |\n+  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   | ------------------------------------------------------------------------------------------------ doesn't satisfy `Vec<Enum>: Clone`\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Vec<Enum>: Clone`\n+           `Instant: Default`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "146a627bcdef7f160476cd730dd6bc69443debfd", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -16,6 +16,10 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n+help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied\n   --> $DIR/union-derive-clone.rs:6:10"}, {"sha": "146a627bcdef7f160476cd730dd6bc69443debfd", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -16,6 +16,10 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n+help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied\n   --> $DIR/union-derive-clone.rs:6:10"}, {"sha": "02ce371c8d5efa136448224f9615cf977cc8a7ae", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50e5f90c925b411bac7de0ec3ec239d7d321b5a2/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=50e5f90c925b411bac7de0ec3ec239d7d321b5a2", "patch": "@@ -21,6 +21,10 @@ LL | | >(Unique<T>, A);\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`\n+help: consider annotating `R` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}]}