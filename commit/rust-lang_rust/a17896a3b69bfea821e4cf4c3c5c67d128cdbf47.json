{"sha": "a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzg5NmEzYjY5YmZlYTgyMWU0Y2Y0YzNjNWM2N2QxMjhjZGJmNDc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-15T00:36:31Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:03Z"}, "message": "Place Self at the start of ty::Generics' param lists", "tree": {"sha": "10d7d87f2e65c77d4b3a7341e282594c70208e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d7d87f2e65c77d4b3a7341e282594c70208e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "html_url": "https://github.com/rust-lang/rust/commit/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f257bf26fb32cc72d4229b9bde6916562478165", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f257bf26fb32cc72d4229b9bde6916562478165", "html_url": "https://github.com/rust-lang/rust/commit/6f257bf26fb32cc72d4229b9bde6916562478165"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "034107852626724c1374b48ddf9781bf9c1b5b19", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "patch": "@@ -794,12 +794,8 @@ impl GenericParamDef {\n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n ///\n-/// Note that in the presence of a `Self` parameter, the ordering here\n-/// is different from the ordering in a Substs. Substs are ordered as\n-///     Self, *Regions, *Other Type Params, (...child generics)\n-/// while this struct is ordered as\n-///     regions = Regions\n-///     types = [Self, *Other Type Params]\n+/// The ordering of parameters is the same as in Subst (excluding child generics):\n+/// Self (optionally), Lifetime params..., Type params...\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Generics {\n     pub parent: Option<DefId>,\n@@ -865,8 +861,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                         -> &'tcx RegionParamDef\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n-            // We're currently assuming that lifetimes precede other generic parameters.\n-            match self.params[index as usize - self.has_self as usize] {\n+            match self.params[index as usize] {\n                 ty::GenericParamDef::Lifetime(ref lt) => lt,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n             }\n@@ -881,7 +876,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &TypeParamDef {\n-        if let Some(idx) = param.idx.checked_sub(self.parent_count as u32) {\n+        if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n             // non-Self type parameters are always offset by exactly\n             // `self.regions.len()`. In the absence of a Self, this is obvious,\n             // but even in the presence of a `Self` we just have to \"compensate\"\n@@ -912,11 +907,11 @@ impl<'a, 'gcx, 'tcx> Generics {\n             let type_param_offset = self.param_counts()[&Kind::Lifetime];\n \n             let has_self = self.has_self && self.parent.is_none();\n-            let is_separated_self = type_param_offset != 0 && idx == 0 && has_self;\n+            let is_separated_self = type_param_offset != 0 && index == 0 && has_self;\n \n-            if let Some(_) = (idx as usize).checked_sub(type_param_offset) {\n+            if let Some(_) = (index as usize).checked_sub(type_param_offset) {\n                 assert!(!is_separated_self, \"found a Self after type_param_offset\");\n-                match self.params[idx as usize] {\n+                match self.params[index as usize] {\n                     ty::GenericParamDef::Type(ref ty) => ty,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }"}, {"sha": "1a8d4392f645e54a5f17d8997c38f36b4d682bd2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17896a3b69bfea821e4cf4c3c5c67d128cdbf47/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a17896a3b69bfea821e4cf4c3c5c67d128cdbf47", "patch": "@@ -927,7 +927,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     });\n \n-    let mut types: Vec<_> = opt_self.into_iter().chain(types).collect();\n+    let mut types: Vec<_> = types.into_iter().collect();\n \n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,\n@@ -966,13 +966,17 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         });\n     }\n \n-    let type_param_to_index = types.iter()\n-                                   .map(|param| (param.def_id, param.index))\n-                                   .collect();\n+    let type_param_to_index = opt_self.iter()\n+                                      .chain(types.iter())\n+                                      .map(|ty| (ty.def_id, ty.index))\n+                                      .collect();\n \n+    let opt_self = opt_self.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n     let lifetimes = regions.into_iter().map(|lt| ty::GenericParamDef::Lifetime(lt));\n     let types = types.into_iter().map(|ty| ty::GenericParamDef::Type(ty));\n-    let params = lifetimes.chain(types).collect();\n+    let params = opt_self.chain(lifetimes)\n+                         .chain(types)\n+                         .collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,"}]}