{"sha": "cc4a8d7e72881329cc46230ef3520cfdcf116a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGE4ZDdlNzI4ODEzMjljYzQ2MjMwZWYzNTIwY2ZkY2YxMTZhOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T03:37:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-30T03:37:40Z"}, "message": "Rollup merge of #63099 - josephlr:vxworks, r=alexcrichton\n\nvxworks: Remove Linux-specific comments.\n\nIt looks like the VxWorks fork inadvertently left in some Linux-specific workaround comments in `libstd`, these can be removed. Came up when looking into #62516\n\nCC:  @BaoshanPang", "tree": {"sha": "00ba8c7a404a770c343e0442138a0b8be36f0571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ba8c7a404a770c343e0442138a0b8be36f0571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4a8d7e72881329cc46230ef3520cfdcf116a93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdP7uECRBK7hj4Ov3rIwAAdHIIAChTQiUmepBCKExXhz/1oNKq\nO/iSsBI014k97Gb7lrdlIOAV54SmYujRPx7H8vz9/J6XXPI/78d5/vVloumeb3Qj\nTR7W+BGUC/qrVRcpde+Vlti7fj2di3fgIba6z6fNIAloOUn62rNo4OycfckBlaaN\ndTUcP0+sqbTz7RwzzQ7SKxFl7wDXZFMXMExZ+FQLjkviJMopvj1nkqZ/unS+DDMJ\nxDSXVBzTJ3b5v/vuPcGhO8Lb+R+IV9kou4jJh5ueV0zrlOpKxx9WdRmJsPzOL2pp\nHnXqen+OGxyskoGAjuCyV4dSl1ODRSNg3gbAh/Xn+OXQbUwhzhAfmJi6OHVWlvg=\n=bXqK\n-----END PGP SIGNATURE-----\n", "payload": "tree 00ba8c7a404a770c343e0442138a0b8be36f0571\nparent 09eb0b1b32410819f178f24b34f8f8d02a6f0ebd\nparent 0cdd693bf6c8eb5aa0b4f2b2f82c545e5bd56f59\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564457860 +0200\ncommitter GitHub <noreply@github.com> 1564457860 +0200\n\nRollup merge of #63099 - josephlr:vxworks, r=alexcrichton\n\nvxworks: Remove Linux-specific comments.\n\nIt looks like the VxWorks fork inadvertently left in some Linux-specific workaround comments in `libstd`, these can be removed. Came up when looking into #62516\n\nCC:  @BaoshanPang\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4a8d7e72881329cc46230ef3520cfdcf116a93", "html_url": "https://github.com/rust-lang/rust/commit/cc4a8d7e72881329cc46230ef3520cfdcf116a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4a8d7e72881329cc46230ef3520cfdcf116a93/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09eb0b1b32410819f178f24b34f8f8d02a6f0ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/09eb0b1b32410819f178f24b34f8f8d02a6f0ebd", "html_url": "https://github.com/rust-lang/rust/commit/09eb0b1b32410819f178f24b34f8f8d02a6f0ebd"}, {"sha": "0cdd693bf6c8eb5aa0b4f2b2f82c545e5bd56f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd693bf6c8eb5aa0b4f2b2f82c545e5bd56f59", "html_url": "https://github.com/rust-lang/rust/commit/0cdd693bf6c8eb5aa0b4f2b2f82c545e5bd56f59"}], "stats": {"total": 26, "additions": 1, "deletions": 25}, "files": [{"sha": "d537d2258fda79318915d0646021776fd76cd807", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=cc4a8d7e72881329cc46230ef3520cfdcf116a93", "patch": "@@ -287,22 +287,7 @@ impl File {\n         let fd = cvt_r(|| unsafe {\n             open(path.as_ptr(), flags, opts.mode as c_int)\n         })?;\n-        let fd = FileDesc::new(fd);\n-        // Currently the standard library supports Linux 2.6.18 which did not\n-        // have the O_CLOEXEC flag (passed above). If we're running on an older\n-        // Linux kernel then the flag is just ignored by the OS. After we open\n-        // the first file, we check whether it has CLOEXEC set. If it doesn't,\n-        // we will explicitly ask for a CLOEXEC fd for every further file we\n-        // open, if it does, we will skip that step.\n-        //\n-        // The CLOEXEC flag, however, is supported on versions of macOS/BSD/etc\n-        // that we support, so we only do this on Linux currently.\n-        fn ensure_cloexec(_: &FileDesc) -> io::Result<()> {\n-            Ok(())\n-        }\n-\n-        ensure_cloexec(&fd)?;\n-        Ok(File(fd))\n+        Ok(File(FileDesc::new(fd)))\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {"}, {"sha": "56962e11dcf95a4c646e13827f6732bf1c86b0de", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=cc4a8d7e72881329cc46230ef3520cfdcf116a93", "patch": "@@ -141,10 +141,6 @@ impl Socket {\n \n     pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t)\n                   -> io::Result<Socket> {\n-        // Unfortunately the only known way right now to accept a socket and\n-        // atomically set the CLOEXEC flag is to use the `accept4` syscall on\n-        // Linux. This was added in 2.6.28, however, and because we support\n-        // 2.6.18 we must detect this support dynamically.\n         let fd = cvt_r(|| unsafe {\n             libc::accept(self.0.raw(), storage, len)\n         })?;"}, {"sha": "e09dbe6e99ba8898bc71f29294b721fd1b0d25df", "filename": "src/libstd/sys/vxworks/pipe.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4a8d7e72881329cc46230ef3520cfdcf116a93/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs?ref=cc4a8d7e72881329cc46230ef3520cfdcf116a93", "patch": "@@ -11,11 +11,6 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     static INVALID: AtomicBool = AtomicBool::new(false);\n \n     let mut fds = [0; 2];\n-\n-    // Unfortunately the only known way right now to create atomically set the\n-    // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n-    // 2.6.27, however, and because we support 2.6.18 we must detect this\n-    // support dynamically.\n     cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n \n     let fd0 = FileDesc::new(fds[0]);"}]}