{"sha": "b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTkyYWUxNTdlYWIzYjgzZDdjYmM0MmQyZTA4OTI1Y2JkZmQ4YjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-01T19:06:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-16T21:37:11Z"}, "message": "Add rustdoc-ui test suite", "tree": {"sha": "bb68db0f1f320836898202494ad2140ecef13ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb68db0f1f320836898202494ad2140ecef13ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "html_url": "https://github.com/rust-lang/rust/commit/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6fefdecdfff6641111ff6446f73d8364459e1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fefdecdfff6641111ff6446f73d8364459e1f0", "html_url": "https://github.com/rust-lang/rust/commit/a6fefdecdfff6641111ff6446f73d8364459e1f0"}], "stats": {"total": 119, "additions": 85, "deletions": 34}, "files": [{"sha": "d30933d2efd222dd73f774b23b2c27b6736a5cf6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -326,7 +326,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook, test::UnstableBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n-                test::RunMake),\n+                test::RunMake, test::RustdocUi),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,"}, {"sha": "992dec5217d4fbd898e64cf863bf5f740b17691b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -886,8 +886,12 @@ impl Step for Compiletest {\n         cmd.arg(\"--run-lib-path\").arg(builder.sysroot_libdir(compiler, target));\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n \n+        let is_rustdoc_ui = suite.ends_with(\"rustdoc-ui\");\n+\n         // Avoid depending on rustdoc when we don't need it.\n-        if mode == \"rustdoc\" || (mode == \"run-make\" && suite.ends_with(\"fulldeps\")) {\n+        if mode == \"rustdoc\" ||\n+           (mode == \"run-make\" && suite.ends_with(\"fulldeps\")) ||\n+           (mode == \"ui\" && is_rustdoc_ui) {\n             cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler.host));\n         }\n \n@@ -903,14 +907,24 @@ impl Step for Compiletest {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n \n-        let mut flags = vec![\"-Crpath\".to_string()];\n-        if build.config.rust_optimize_tests {\n-            flags.push(\"-O\".to_string());\n+        let mut flags = if is_rustdoc_ui {\n+            Vec::new()\n+        } else {\n+            vec![\"-Crpath\".to_string()]\n+        };\n+        if !is_rustdoc_ui {\n+            if build.config.rust_optimize_tests {\n+                flags.push(\"-O\".to_string());\n+            }\n+            if build.config.rust_debuginfo_tests {\n+                flags.push(\"-g\".to_string());\n+            }\n         }\n-        if build.config.rust_debuginfo_tests {\n-            flags.push(\"-g\".to_string());\n+        if !is_rustdoc_ui {\n+            flags.push(\"-Zmiri -Zunstable-options\".to_string());\n+        } else {\n+            flags.push(\"-Zunstable-options\".to_string());\n         }\n-        flags.push(\"-Zunstable-options\".to_string());\n         flags.push(build.config.cmd.rustc_args().join(\" \"));\n \n         if let Some(linker) = build.linker(target) {"}, {"sha": "abeaef723d48776178f015cef2983c3ab8d849be", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -107,7 +107,7 @@ pub struct SharedContext {\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon and added html).\n     pub layout: layout::Layout,\n-    /// This flag indicates whether [src] links should be generated or not. If\n+    /// This flag indicates whether `[src]` links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n     pub include_sources: bool,"}, {"sha": "3242e136ff39fbbb3b1b4c241df4cb03f9238e70", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -44,10 +44,10 @@\n //!\n //! Once you are familiar with the contents of the standard library you may\n //! begin to find the verbosity of the prose distracting. At this stage in your\n-//! development you may want to press the **[-]** button near the top of the\n+//! development you may want to press the `[-]` button near the top of the\n //! page to collapse it into a more skimmable view.\n //!\n-//! While you are looking at that **[-]** button also notice the **[src]**\n+//! While you are looking at that `[-]` button also notice the `[src]`\n //! button. Rust's API documentation comes with the source code and you are\n //! encouraged to read it. The standard library source is generally high\n //! quality and a peek behind the curtains is often enlightening."}, {"sha": "a4d1797c3ec5baa000daeebb55524950c06b63fe", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -1288,7 +1288,6 @@ fn get_concurrency() -> usize {\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {\n     let mut filtered = tests;\n-\n     // Remove tests that don't match the test filter\n     filtered = match opts.filter {\n         None => filtered,"}, {"sha": "36bcc307d55d19d32656c2dd1b068da4b77854f5", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+// must-compile-successfully\n+\n+//! Test with [Foo::baz], [Bar::foo], [Uniooon::X]\n+\n+pub struct Foo {\n+    pub bar: usize,\n+}"}, {"sha": "67d7bdd02b3593ecb309e38bc059912988aacc0c", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -0,0 +1,6 @@\n+warning: [Foo::baz] cannot be resolved, ignoring it...\n+\n+warning: [Bar::foo] cannot be resolved, ignoring it...\n+\n+warning: [Uniooon::X] cannot be resolved, ignoring it...\n+"}, {"sha": "ae4f4aa4046099c89e7192e0d698553ac469de60", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -283,6 +283,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         ),\n     };\n \n+    let src_base = opt_path(matches, \"src-base\");\n+    let run_ignored = matches.opt_present(\"ignored\");\n     Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n@@ -293,15 +295,15 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n         llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n-        src_base: opt_path(matches, \"src-base\"),\n+        src_base,\n         build_base: opt_path(matches, \"build-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode: matches\n             .opt_str(\"mode\")\n             .unwrap()\n             .parse()\n             .expect(\"invalid mode\"),\n-        run_ignored: matches.opt_present(\"ignored\"),\n+        run_ignored,\n         filter: matches.free.first().cloned(),\n         filter_exact: matches.opt_present(\"exact\"),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),"}, {"sha": "9fa176aa68c58c4054eabc1e7675b24031b46ca5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b2192ae157eab3b83d7cbc42d2e08925cbdfd8b6", "patch": "@@ -1288,7 +1288,9 @@ impl<'test> TestCx<'test> {\n                 // want to actually assert warnings about all this code. Instead\n                 // let's just ignore unused code warnings by defaults and tests\n                 // can turn it back on if needed.\n-                rustc.args(&[\"-A\", \"unused\"]);\n+                if !self.config.src_base.ends_with(\"rustdoc-ui\") {\n+                    rustc.args(&[\"-A\", \"unused\"]);\n+                }\n             }\n             _ => {}\n         }\n@@ -1582,7 +1584,12 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n-        let mut rustc = Command::new(&self.config.rustc_path);\n+        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\");\n+        let mut rustc = if !is_rustdoc {\n+            Command::new(&self.config.rustc_path)\n+        } else {\n+            Command::new(&self.config.rustdoc_path.clone().expect(\"no rustdoc built yet\"))\n+        };\n         rustc.arg(input_file).arg(\"-L\").arg(&self.config.build_base);\n \n         // Optionally prevent default --target if specified in test compile-flags.\n@@ -1605,17 +1612,19 @@ impl<'test> TestCx<'test> {\n             rustc.args(&[\"--cfg\", revision]);\n         }\n \n-        if let Some(ref incremental_dir) = self.props.incremental_dir {\n-            rustc.args(&[\n-                \"-C\",\n-                &format!(\"incremental={}\", incremental_dir.display()),\n-            ]);\n-            rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);\n-            rustc.args(&[\"-Z\", \"incremental-queries\"]);\n-        }\n+        if !is_rustdoc {\n+            if let Some(ref incremental_dir) = self.props.incremental_dir {\n+                rustc.args(&[\n+                    \"-C\",\n+                    &format!(\"incremental={}\", incremental_dir.display()),\n+                ]);\n+                rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);\n+                rustc.args(&[\"-Z\", \"incremental-queries\"]);\n+            }\n \n-        if self.config.mode == CodegenUnits {\n-            rustc.args(&[\"-Z\", \"human_readable_cgu_names\"]);\n+            if self.config.mode == CodegenUnits {\n+                rustc.args(&[\"-Z\", \"human_readable_cgu_names\"]);\n+            }\n         }\n \n         match self.config.mode {\n@@ -1668,11 +1677,12 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-\n-        if self.config.target == \"wasm32-unknown-unknown\" {\n-            // rustc.arg(\"-g\"); // get any backtrace at all on errors\n-        } else if !self.props.no_prefer_dynamic {\n-            rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+        if !is_rustdoc {\n+            if self.config.target == \"wasm32-unknown-unknown\" {\n+                // rustc.arg(\"-g\"); // get any backtrace at all on errors\n+            } else if !self.props.no_prefer_dynamic {\n+                rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+            }\n         }\n \n         match output_file {\n@@ -1696,8 +1706,10 @@ impl<'test> TestCx<'test> {\n         } else {\n             rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n         }\n-        if let Some(ref linker) = self.config.linker {\n-            rustc.arg(format!(\"-Clinker={}\", linker));\n+        if !is_rustdoc {\n+            if let Some(ref linker) = self.config.linker {\n+                rustc.arg(format!(\"-Clinker={}\", linker));\n+            }\n         }\n \n         rustc.args(&self.props.compile_flags);\n@@ -2509,7 +2521,6 @@ impl<'test> TestCx<'test> {\n             .compile_flags\n             .iter()\n             .any(|s| s.contains(\"--error-format\"));\n-\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n "}]}