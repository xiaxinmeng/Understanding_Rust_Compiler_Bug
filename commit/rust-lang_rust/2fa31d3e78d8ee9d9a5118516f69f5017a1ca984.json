{"sha": "2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "node_id": "C_kwDOAAsO6NoAKDJmYTMxZDNlNzhkOGVlOWQ5YTUxMTg1MTZmNjlmNTAxN2ExY2E5ODQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-23T00:56:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-23T00:56:55Z"}, "message": "Serialize RPITIT values in libs", "tree": {"sha": "225a4a3c1609b9b25739cd3df09f79007b3e2265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225a4a3c1609b9b25739cd3df09f79007b3e2265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "html_url": "https://github.com/rust-lang/rust/commit/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7119a0300b87a3d670408ee8e847c6821b3ae80", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7119a0300b87a3d670408ee8e847c6821b3ae80", "html_url": "https://github.com/rust-lang/rust/commit/e7119a0300b87a3d670408ee8e847c6821b3ae80"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "466da175810d5df40d99099af8305a6a7a4eaf89", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -223,6 +223,15 @@ provide! { tcx, def_id, other, cdata,\n     fn_arg_names => { table }\n     generator_kind => { table }\n     trait_def => { table }\n+    collect_trait_impl_trait_tys => {\n+        Ok(cdata\n+            .root\n+            .tables\n+            .trait_impl_trait_tys\n+            .get(cdata, def_id.index)\n+            .map(|lazy| lazy.decode((cdata, tcx)))\n+            .process_decoded(tcx, || panic!(\"{:?} does not have trait_impl_trait_tys\", def_id)))\n+     }\n \n     visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }"}, {"sha": "734e9a31bb90cb880be95f829836aac77ec7b463", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -1059,6 +1059,34 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n+fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    if tcx.def_kind(def_id) != DefKind::AssocFn {\n+        return false;\n+    }\n+\n+    let Some(item) = tcx.opt_associated_item(def_id) else { return false; };\n+    if item.container != ty::AssocItemContainer::ImplContainer {\n+        return false;\n+    }\n+\n+    let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n+\n+    // FIXME(RPITIT): This does a somewhat manual walk through the signature\n+    // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n+    // of work. We can probably remove this when we refactor RPITITs to be\n+    // associated types.\n+    tcx.fn_sig(trait_item_def_id).skip_binder().output().walk().any(|arg| {\n+        if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Projection(data) = ty.kind()\n+            && tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n+        {\n+            true\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: LocalDefId) {\n         let mut attrs = self\n@@ -1128,6 +1156,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if let DefKind::Trait | DefKind::TraitAlias = def_kind {\n                 record!(self.tables.super_predicates_of[def_id] <- self.tcx.super_predicates_of(def_id));\n             }\n+            if should_encode_trait_impl_trait_tys(tcx, def_id)\n+                && let Ok(table) = self.tcx.collect_trait_impl_trait_tys(def_id)\n+            {\n+                record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n+            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {"}, {"sha": "6d7345570af85ffdcb14f6e10f2f3f5560336018", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -1,6 +1,7 @@\n use crate::creader::CrateMetadataRef;\n use decoder::Metadata;\n use def_path_hash_map::DefPathHashMapRef;\n+use rustc_data_structures::fx::FxHashMap;\n use table::TableBuilder;\n \n use rustc_ast as ast;\n@@ -399,6 +400,8 @@ define_tables! {\n     macro_definition: Table<DefIndex, LazyValue<ast::MacArgs>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n     module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n+\n+    trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n }\n \n #[derive(TyEncodable, TyDecodable)]"}, {"sha": "0257ca7b29c712574c0ed1b7885a45e2bfba00d9", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -29,6 +30,10 @@ impl<I: Idx + 'static, T: ParameterizedOverTcx> ParameterizedOverTcx for IndexVe\n     type Value<'tcx> = IndexVec<I, T::Value<'tcx>>;\n }\n \n+impl<I: 'static, T: ParameterizedOverTcx> ParameterizedOverTcx for FxHashMap<I, T> {\n+    type Value<'tcx> = FxHashMap<I, T::Value<'tcx>>;\n+}\n+\n impl<T: ParameterizedOverTcx> ParameterizedOverTcx for ty::Binder<'static, T> {\n     type Value<'tcx> = ty::Binder<'tcx, T::Value<'tcx>>;\n }"}, {"sha": "74df300f85a6badcbb1bec5e4d206cfb1a1d797b", "filename": "src/test/ui/impl-trait/in-trait/auxiliary/rpitit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -0,0 +1,11 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+\n+pub trait Foo {\n+    fn bar() -> impl Sized;\n+}\n+\n+pub struct Foreign;\n+\n+impl Foo for Foreign {\n+    fn bar() {}\n+}"}, {"sha": "6341f5b4284299a05ea2bf9dbcf8860926a5d66b", "filename": "src/test/ui/impl-trait/in-trait/foreign.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa31d3e78d8ee9d9a5118516f69f5017a1ca984/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs?ref=2fa31d3e78d8ee9d9a5118516f69f5017a1ca984", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+// aux-build: rpitit.rs\n+\n+extern crate rpitit;\n+\n+fn main() {\n+    // Witness an RPITIT from another crate\n+    let () = <rpitit::Foreign as rpitit::Foo>::bar();\n+}"}]}