{"sha": "abbee6decdfd0cf69428c5964738bb7526e18dd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYmVlNmRlY2RmZDBjZjY5NDI4YzU5NjQ3MzhiYjc1MjZlMThkZDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T00:03:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` `ScopeInfo`", "tree": {"sha": "9232f64e8f505a6cd2c68f69306664ec19fcdcfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9232f64e8f505a6cd2c68f69306664ec19fcdcfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abbee6decdfd0cf69428c5964738bb7526e18dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abbee6decdfd0cf69428c5964738bb7526e18dd1", "html_url": "https://github.com/rust-lang/rust/commit/abbee6decdfd0cf69428c5964738bb7526e18dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abbee6decdfd0cf69428c5964738bb7526e18dd1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8728b09e78805672d0e948118b29064921da0278", "url": "https://api.github.com/repos/rust-lang/rust/commits/8728b09e78805672d0e948118b29064921da0278", "html_url": "https://github.com/rust-lang/rust/commit/8728b09e78805672d0e948118b29064921da0278"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c92386cc1ba229a84ebb20bea0a584ba6a70a776", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abbee6decdfd0cf69428c5964738bb7526e18dd1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbee6decdfd0cf69428c5964738bb7526e18dd1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=abbee6decdfd0cf69428c5964738bb7526e18dd1", "patch": "@@ -1005,7 +1005,7 @@ pub fn have_cached_lpad(bcx: @Block) -> bool {\n     return res;\n }\n \n-pub fn in_lpad_scope_cx(bcx: @Block, f: |si: &mut ScopeInfo|) {\n+pub fn in_lpad_scope_cx(bcx: @Block, f: |si: &ScopeInfo|) {\n     let mut bcx = bcx;\n     let mut cur_scope = bcx.scope.get();\n     loop {\n@@ -1191,7 +1191,7 @@ pub fn trans_stmt(cx: @Block, s: &ast::Stmt) -> @Block {\n // next three functions instead.\n pub fn new_block(cx: @FunctionContext,\n                  parent: Option<@Block>,\n-                 scope: Option<@mut ScopeInfo>,\n+                 scope: Option<@ScopeInfo>,\n                  is_lpad: bool,\n                  name: &str,\n                  opt_node_info: Option<NodeInfo>)\n@@ -1216,9 +1216,10 @@ pub fn new_block(cx: @FunctionContext,\n     }\n }\n \n-pub fn simple_block_scope(parent: Option<@mut ScopeInfo>,\n-                          node_info: Option<NodeInfo>) -> @mut ScopeInfo {\n-    @mut ScopeInfo {\n+pub fn simple_block_scope(parent: Option<@ScopeInfo>,\n+                          node_info: Option<NodeInfo>)\n+                          -> @ScopeInfo {\n+    @ScopeInfo {\n         parent: parent,\n         loop_break: None,\n         loop_label: None,\n@@ -1248,7 +1249,7 @@ pub fn loop_scope_block(bcx: @Block,\n                         loop_label: Option<Name>,\n                         n: &str,\n                         opt_node_info: Option<NodeInfo>) -> @Block {\n-    return new_block(bcx.fcx, Some(bcx), Some(@mut ScopeInfo {\n+    return new_block(bcx.fcx, Some(bcx), Some(@ScopeInfo {\n         parent: None,\n         loop_break: Some(loop_break),\n         loop_label: loop_label,\n@@ -1329,7 +1330,7 @@ pub fn cleanup_and_leave(bcx: @Block,\n             cur_scope = match cur_scope {\n                 Some (inf) if !inf.empty_cleanups() => {\n                     let (sub_cx, dest, inf_cleanups) = {\n-                        let inf = &mut *inf;\n+                        let inf = &*inf;\n                         let mut skip = 0;\n                         let mut dest = None;\n                         {"}, {"sha": "d5481b1e1d1e7831a1ea18e5657a2880ad075cbb", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abbee6decdfd0cf69428c5964738bb7526e18dd1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abbee6decdfd0cf69428c5964738bb7526e18dd1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=abbee6decdfd0cf69428c5964738bb7526e18dd1", "patch": "@@ -430,7 +430,7 @@ pub struct cleanup_path {\n     dest: BasicBlockRef\n }\n \n-pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n+pub fn shrink_scope_clean(scope_info: &ScopeInfo, size: uint) {\n     scope_info.landing_pad.set(None);\n     let new_cleanup_paths = {\n         let cleanup_paths = scope_info.cleanup_paths.borrow();\n@@ -443,7 +443,7 @@ pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n     scope_info.cleanup_paths.set(new_cleanup_paths)\n }\n \n-pub fn grow_scope_clean(scope_info: &mut ScopeInfo) {\n+pub fn grow_scope_clean(scope_info: &ScopeInfo) {\n     scope_info.landing_pad.set(None);\n }\n \n@@ -623,7 +623,7 @@ pub fn block_cleanups(bcx: &Block) -> ~[cleanup] {\n }\n \n pub struct ScopeInfo {\n-    parent: Option<@mut ScopeInfo>,\n+    parent: Option<@ScopeInfo>,\n     loop_break: Option<@Block>,\n     loop_label: Option<Name>,\n     // A list of functions that must be run at when leaving this\n@@ -640,7 +640,7 @@ pub struct ScopeInfo {\n }\n \n impl ScopeInfo {\n-    pub fn empty_cleanups(&mut self) -> bool {\n+    pub fn empty_cleanups(&self) -> bool {\n         let cleanups = self.cleanups.borrow();\n         cleanups.get().is_empty()\n     }\n@@ -694,7 +694,7 @@ pub struct Block {\n     unreachable: Cell<bool>,\n     parent: Option<@Block>,\n     // The current scope within this basic block\n-    scope: RefCell<Option<@mut ScopeInfo>>,\n+    scope: RefCell<Option<@ScopeInfo>>,\n     // Is this block part of a landing pad?\n     is_lpad: bool,\n     // info about the AST node this block originated from, if any\n@@ -803,7 +803,7 @@ pub fn val_ty(v: ValueRef) -> Type {\n \n pub fn in_scope_cx(cx: @Block,\n                    scope_id: Option<ast::NodeId>,\n-                   f: |si: &mut ScopeInfo|) {\n+                   f: |si: &ScopeInfo|) {\n     let mut cur = cx;\n     let mut cur_scope = cur.scope.get();\n     loop {"}]}