{"sha": "7b66c6678c107b4b391a8561c375e8ffad0f52e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjZjNjY3OGMxMDdiNGIzOTFhODU2MWMzNzVlOGZmYWQwZjUyZTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T01:13:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T01:13:42Z"}, "message": "Rollup merge of #74418 - rye:gha-dedup-shell-setting, r=pietroalbini\n\nci: Set `shell: bash` as a default, remove duplicates\n\nA follow-up to #74406, this commit merely removes the `shell: bash` lines where they were added in favor of setting defaults for *all* \"run\" steps in the jobs that run the tests.\n\nThe changes in #74406 were needed because of an upstream change to the `windows-2019` GitHub Actions image. Previously, the configuration worked fine without specifying `shell: bash`, but for some reason this broke with a new change that was deployed today. The preceding PR was a hotfix to get CI passing, but there was a slightly less duplicative way to specify the default shell for the jobs, which was to set the `defaults.run` option.\n\nThis change applies to the `pr`, `try`, `auto`, and `auto-fallible` jobs, which are derived from the YAML-anchor `base-ci-job`.  I did not apply these changes to the `master`, `try-success`, `try-failure`, `auto-success`, or `auto-failure` jobs because they have only a few steps.\n\ncc/r? @Mark-Simulacrum", "tree": {"sha": "3d54a63d3c367860e071ee826ca1e96b5e3fb251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d54a63d3c367860e071ee826ca1e96b5e3fb251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b66c6678c107b4b391a8561c375e8ffad0f52e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEkzGCRBK7hj4Ov3rIwAAdHIIAD6vDz75u1D0GFMUJWeUJree\nCwfb+4q/OTHuNOo8A7TJU36R3MGAzkaP8rAgKIfALRqCMP8LL/hiTzeAL0FyvRzs\nLWFq/Q1+99pDyhJwFHeGLVMfnAy+Zczk+I5c16aARQVEaOv56LBAZnk/FZcjoLX5\nNUeFi0tpKVLMofU7d1V3OcfNrQSC/2Z0ekCwsb7EtzR+nWyTDzhO8GvIKJXkO4Kd\njyk5uRUbxpNXyQyTOa3ZvIVd12JEpCrHHsodvE132AgFiwrtzKJqPVIyWaV2NDLD\nd++UwKSj56zCeV1tPMguu/HYdNO9aSJKWnrRHZHXjqdbwFatDSpMpRUDWasGeLw=\n=PbTu\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d54a63d3c367860e071ee826ca1e96b5e3fb251\nparent e775b4dbc4a991d60014225088c58eddd91f18cb\nparent 586629c0b607f34981a893cf856bb35279f58542\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595034822 -0700\ncommitter GitHub <noreply@github.com> 1595034822 -0700\n\nRollup merge of #74418 - rye:gha-dedup-shell-setting, r=pietroalbini\n\nci: Set `shell: bash` as a default, remove duplicates\n\nA follow-up to #74406, this commit merely removes the `shell: bash` lines where they were added in favor of setting defaults for *all* \"run\" steps in the jobs that run the tests.\n\nThe changes in #74406 were needed because of an upstream change to the `windows-2019` GitHub Actions image. Previously, the configuration worked fine without specifying `shell: bash`, but for some reason this broke with a new change that was deployed today. The preceding PR was a hotfix to get CI passing, but there was a slightly less duplicative way to specify the default shell for the jobs, which was to set the `defaults.run` option.\n\nThis change applies to the `pr`, `try`, `auto`, and `auto-fallible` jobs, which are derived from the YAML-anchor `base-ci-job`.  I did not apply these changes to the `master`, `try-success`, `try-failure`, `auto-success`, or `auto-failure` jobs because they have only a few steps.\n\ncc/r? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b66c6678c107b4b391a8561c375e8ffad0f52e2", "html_url": "https://github.com/rust-lang/rust/commit/7b66c6678c107b4b391a8561c375e8ffad0f52e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b66c6678c107b4b391a8561c375e8ffad0f52e2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e775b4dbc4a991d60014225088c58eddd91f18cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e775b4dbc4a991d60014225088c58eddd91f18cb", "html_url": "https://github.com/rust-lang/rust/commit/e775b4dbc4a991d60014225088c58eddd91f18cb"}, {"sha": "586629c0b607f34981a893cf856bb35279f58542", "url": "https://api.github.com/repos/rust-lang/rust/commits/586629c0b607f34981a893cf856bb35279f58542", "html_url": "https://github.com/rust-lang/rust/commit/586629c0b607f34981a893cf856bb35279f58542"}], "stats": {"total": 137, "additions": 5, "deletions": 132}, "files": [{"sha": "86de37820003ae425f59eee735e23666f7099015", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 81, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7b66c6678c107b4b391a8561c375e8ffad0f52e2/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7b66c6678c107b4b391a8561c375e8ffad0f52e2/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=7b66c6678c107b4b391a8561c375e8ffad0f52e2", "patch": "@@ -26,7 +26,7 @@ name: CI\n       - \"**\"\n defaults:\n   run:\n-    shell: \"python src/ci/exec-with-shell.py {0}\"\n+    shell: bash\n jobs:\n   pr:\n     name: PR\n@@ -54,7 +54,6 @@ jobs:\n     steps:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n-        shell: bash\n       - name: checkout the source code\n         uses: actions/checkout@v1\n         with:\n@@ -66,85 +65,66 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n-        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -173,7 +153,6 @@ jobs:\n     steps:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n-        shell: bash\n       - name: checkout the source code\n         uses: actions/checkout@v1\n         with:\n@@ -185,85 +164,66 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n-        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -510,7 +470,6 @@ jobs:\n     steps:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n-        shell: bash\n       - name: checkout the source code\n         uses: actions/checkout@v1\n         with:\n@@ -522,85 +481,66 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n-        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n@@ -655,7 +595,6 @@ jobs:\n     steps:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n-        shell: bash\n       - name: checkout the source code\n         uses: actions/checkout@v1\n         with:\n@@ -667,85 +606,66 @@ jobs:\n         if: \"success() && !env.SKIP_JOB && github.ref != 'refs/heads/try'\"\n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n-        shell: bash\n         env:\n           EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n         if: success() && !env.SKIP_JOB\n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: bash\n         if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n           TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n         if: success() && !env.SKIP_JOB\n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n           AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\""}, {"sha": "26ce69e33d9c3ea14450b82061ac05a0a88874b6", "filename": "src/ci/exec-with-shell.py", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Fci%2Fexec-with-shell.py", "raw_url": "https://github.com/rust-lang/rust/raw/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Fci%2Fexec-with-shell.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fexec-with-shell.py?ref=e775b4dbc4a991d60014225088c58eddd91f18cb", "patch": "@@ -1,16 +0,0 @@\n-#!/usr/bin/env python\n-# A simple wrapper that forwards the arguments to bash, unless the\n-# CI_OVERRIDE_SHELL environment variable is present: in that case the content\n-# of that environment variable is used as the shell path.\n-\n-import os\n-import sys\n-import subprocess\n-\n-try:\n-    shell = os.environ[\"CI_OVERRIDE_SHELL\"]\n-except KeyError:\n-    shell = \"bash\"\n-\n-res = subprocess.call([shell] + sys.argv[1:])\n-sys.exit(res)"}, {"sha": "5573d87aa2e55c278399a8f0e0c1b6a12bf11600", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b66c6678c107b4b391a8561c375e8ffad0f52e2/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7b66c6678c107b4b391a8561c375e8ffad0f52e2/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=7b66c6678c107b4b391a8561c375e8ffad0f52e2", "patch": "@@ -79,7 +79,6 @@ x--expand-yaml-anchors--remove:\n     steps:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n-        shell: bash\n \n       - name: checkout the source code\n         uses: actions/checkout@v1\n@@ -95,7 +94,6 @@ x--expand-yaml-anchors--remove:\n \n       - name: add extra environment variables\n         run: src/ci/scripts/setup-environment.sh\n-        shell: bash\n         env:\n           # Since it's not possible to merge `${{ matrix.env }}` with the other\n           # variables in `job.<name>.env`, the variables defined in the matrix\n@@ -106,67 +104,54 @@ x--expand-yaml-anchors--remove:\n \n       - name: decide whether to skip this job\n         run: src/ci/scripts/should-skip-this.sh\n-        shell: bash\n         <<: *step\n \n       - name: collect CPU statistics\n         run: src/ci/scripts/collect-cpu-stats.sh\n-        shell: bash\n         <<: *step\n \n       - name: show the current environment\n         run: src/ci/scripts/dump-environment.sh\n-        shell: bash\n         <<: *step\n \n       - name: install awscli\n         run: src/ci/scripts/install-awscli.sh\n-        shell: bash\n         <<: *step\n \n       - name: install sccache\n         run: src/ci/scripts/install-sccache.sh\n-        shell: bash\n         <<: *step\n \n       - name: install clang\n         run: src/ci/scripts/install-clang.sh\n-        shell: bash\n         <<: *step\n \n       - name: install WIX\n         run: src/ci/scripts/install-wix.sh\n-        shell: bash\n         <<: *step\n \n       - name: ensure the build happens on a partition with enough space\n         run: src/ci/scripts/symlink-build-dir.sh\n-        shell: bash\n         <<: *step\n \n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         <<: *step\n \n       - name: install MSYS2\n         run: src/ci/scripts/install-msys2.sh\n-        shell: bash\n         <<: *step\n \n       - name: install MinGW\n         run: src/ci/scripts/install-mingw.sh\n-        shell: bash\n         <<: *step\n \n       - name: install ninja\n         run: src/ci/scripts/install-ninja.sh\n-        shell: bash\n         <<: *step\n \n       - name: enable ipv6 on Docker\n         run: src/ci/scripts/enable-docker-ipv6.sh\n-        shell: bash\n         <<: *step\n \n       # Disable automatic line ending conversion (again). On Windows, when we're\n@@ -176,22 +161,18 @@ x--expand-yaml-anchors--remove:\n       # appropriate line endings.\n       - name: disable git crlf conversion\n         run: src/ci/scripts/disable-git-crlf-conversion.sh\n-        shell: bash\n         <<: *step\n \n       - name: checkout submodules\n         run: src/ci/scripts/checkout-submodules.sh\n-        shell: bash\n         <<: *step\n \n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n-        shell: bash\n         <<: *step\n \n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: ${{ env.CACHES_AWS_ACCESS_KEY_ID }}\n           AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\n@@ -200,7 +181,6 @@ x--expand-yaml-anchors--remove:\n \n       - name: upload artifacts to S3\n         run: src/ci/scripts/upload-artifacts.sh\n-        shell: bash\n         env:\n           AWS_ACCESS_KEY_ID: ${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\n           AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\n@@ -250,18 +230,10 @@ on:\n \n defaults:\n   run:\n-    # While on Linux and macOS builders it just forwards the arguments to the\n-    # system bash, this wrapper allows switching from the host's bash.exe to\n-    # the one we install along with MSYS2 mid-build on Windows.\n-    #\n-    # Once the step to install MSYS2 is executed, the CI_OVERRIDE_SHELL\n-    # environment variable is set pointing to our MSYS2's bash.exe. From that\n-    # moment the host's bash.exe will not be called anymore.\n-    #\n-    # This is needed because we can't launch our own bash.exe from the host\n-    # bash.exe, as that would load two different cygwin1.dll in memory, causing\n-    # \"cygwin heap mismatch\" errors.\n-    shell: python src/ci/exec-with-shell.py {0}\n+    # On Linux, macOS, and Windows, use the system-provided bash as the default\n+    # shell. (This should only make a difference on Windows, where the default\n+    # shell is PowerShell.)\n+    shell: bash\n \n jobs:\n   pr:"}, {"sha": "185d361582505224f9a223ca0a1d78ff14b79ae9", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b66c6678c107b4b391a8561c375e8ffad0f52e2/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7b66c6678c107b4b391a8561c375e8ffad0f52e2/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=7b66c6678c107b4b391a8561c375e8ffad0f52e2", "patch": "@@ -12,9 +12,6 @@ if isWindows; then\n     mkdir -p \"${msys2Path}/home/${USERNAME}\"\n     ciCommandAddPath \"${msys2Path}/usr/bin\"\n \n-    echo \"switching shell to use our own bash\"\n-    ciCommandSetEnv CI_OVERRIDE_SHELL \"${msys2Path}/usr/bin/bash.exe\"\n-\n     # Detect the native Python version installed on the agent. On GitHub\n     # Actions, the C:\\hostedtoolcache\\windows\\Python directory contains a\n     # subdirectory for each installed Python version."}]}