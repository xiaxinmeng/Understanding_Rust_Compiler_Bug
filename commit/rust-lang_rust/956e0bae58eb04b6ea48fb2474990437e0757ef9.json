{"sha": "956e0bae58eb04b6ea48fb2474990437e0757ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NmUwYmFlNThlYjA0YjZlYTQ4ZmIyNDc0OTkwNDM3ZTA3NTdlZjk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-17T03:37:17Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-05-15T02:53:54Z"}, "message": "Update bootstrap for in-tree rustfmt\n\n- Add rustfmt to `x.py check`\n- Update Cargo.lock\n- Remove rustfmt from the toolstate list\n- Make rustfmt an in-tree tool\n- Give an error on `x.py test rustfmt` if rustfmt fails to build or if tests fail\n- Don't call `save_toolstate` when testing rustfmt", "tree": {"sha": "68d30e4f884b39de0dc701e49fb39dae38ad9e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d30e4f884b39de0dc701e49fb39dae38ad9e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/956e0bae58eb04b6ea48fb2474990437e0757ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/956e0bae58eb04b6ea48fb2474990437e0757ef9", "html_url": "https://github.com/rust-lang/rust/commit/956e0bae58eb04b6ea48fb2474990437e0757ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/956e0bae58eb04b6ea48fb2474990437e0757ef9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d45c0d4b2d44789000ebec6d702cc27db19782", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d45c0d4b2d44789000ebec6d702cc27db19782", "html_url": "https://github.com/rust-lang/rust/commit/b2d45c0d4b2d44789000ebec6d702cc27db19782"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "f39e89a9d01f7f78483021f0d82155778b442b9c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -379,6 +379,7 @@ impl<'a> Builder<'a> {\n                 check::Clippy,\n                 check::Miri,\n                 check::Rls,\n+                check::Rustfmt,\n                 check::Bootstrap\n             ),\n             Kind::Test => describe!("}, {"sha": "c6844c16315b6819c504d54add3f4b56f098848d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -363,13 +363,14 @@ macro_rules! tool_check_step {\n }\n \n tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InTree);\n-// Clippy is a hybrid. It is an external tool, but uses a git subtree instead\n+// Clippy and Rustfmt are hybrids. They are external tools, but use a git subtree instead\n // of a submodule. Since the SourceType only drives the deny-warnings\n // behavior, treat it as in-tree so that any new warnings in clippy will be\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n tool_check_step!(Miri, \"src/tools/miri\", SourceType::Submodule);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::Submodule);\n+tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n \n tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree, false);\n "}, {"sha": "98f753b25f05f219f2d4fc8a971ac28c622ba5b9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -319,15 +319,9 @@ impl Step for Rustfmt {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        let build_result = builder.ensure(tool::Rustfmt {\n-            compiler,\n-            target: self.host,\n-            extra_features: Vec::new(),\n-        });\n-        if build_result.is_none() {\n-            eprintln!(\"failed to test rustfmt: could not build\");\n-            return;\n-        }\n+        builder\n+            .ensure(tool::Rustfmt { compiler, target: self.host, extra_features: Vec::new() })\n+            .expect(\"in-tree tool\");\n \n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n@@ -346,9 +340,7 @@ impl Step for Rustfmt {\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        if try_run(builder, &mut cargo.into()) {\n-            builder.save_toolstate(\"rustfmt\", ToolState::TestPass);\n-        }\n+        builder.run(&mut cargo.into());\n     }\n }\n "}, {"sha": "12571c1b97db6a5ff33ece95f6ef7ae47d9de0e5", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -726,7 +726,7 @@ macro_rules! tool_extended {\n // Note: tools need to be also added to `Builder::get_step_descriptions` in `builder.rs`\n // to make `./x.py build <tool>` work.\n tool_extended!((self, builder),\n-    Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n+    Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, in_tree=true, {};\n     CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n     Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n     Miri, miri, \"src/tools/miri\", \"miri\", stable=false, {};\n@@ -740,7 +740,7 @@ tool_extended!((self, builder),\n         self.extra_features.push(\"clippy\".to_owned());\n     };\n     RustDemangler, rust_demangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, {};\n-    Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, {};\n+    Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n     RustAnalyzer, rust_analyzer, \"src/tools/rust-analyzer/crates/rust-analyzer\", \"rust-analyzer\", stable=false, {};\n );\n "}, {"sha": "2394c5e020d2be3d85e2c103e2cd40d86283e5b2", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -77,7 +77,6 @@ static STABLE_TOOLS: &[(&str, &str)] = &[\n     (\"rust-by-example\", \"src/doc/rust-by-example\"),\n     (\"edition-guide\", \"src/doc/edition-guide\"),\n     (\"rls\", \"src/tools/rls\"),\n-    (\"rustfmt\", \"src/tools/rustfmt\"),\n ];\n \n // These tools are permitted to not build on the beta/stable channels.\n@@ -278,10 +277,9 @@ impl Builder<'_> {\n         if self.config.dry_run {\n             return;\n         }\n-        // Toolstate isn't tracked for clippy, but since most tools do, we avoid\n-        // checking in all the places we could save toolstate and just do so\n-        // here.\n-        if tool == \"clippy-driver\" {\n+        // Toolstate isn't tracked for clippy or rustfmt, but since most tools do, we avoid checking\n+        // in all the places we could save toolstate and just do so here.\n+        if tool == \"clippy-driver\" || tool == \"rustfmt\" {\n             return;\n         }\n         if let Some(ref path) = self.config.save_toolstates {"}, {"sha": "412efe5c4480d73fed8c7711afc91f5e263123b5", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/956e0bae58eb04b6ea48fb2474990437e0757ef9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=956e0bae58eb04b6ea48fb2474990437e0757ef9", "patch": "@@ -15,7 +15,6 @@ python3 \"$X_PY\" test --stage 2 --no-fail-fast \\\n     src/doc/embedded-book \\\n     src/doc/edition-guide \\\n     src/tools/rls \\\n-    src/tools/rustfmt \\\n     src/tools/miri \\\n \n set -e\n@@ -24,3 +23,4 @@ set -e\n cat /tmp/toolstate/toolstates.json\n python3 \"$X_PY\" test --stage 2 check-tools\n python3 \"$X_PY\" test --stage 2 src/tools/clippy\n+python3 \"$X_PY\" test --stage 2 src/tools/rustfmt"}]}