{"sha": "377162c0f81d415941a3f8f16bf5e4b6799628a6", "node_id": "C_kwDOAAsO6NoAKDM3NzE2MmMwZjgxZDQxNTk0MWEzZjhmMTZiZjVlNGI2Nzk5NjI4YTY", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T12:26:03Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-27T12:27:43Z"}, "message": "container name?", "tree": {"sha": "7f41208d1bfae3fb7a706ee795139c8240b4bf80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f41208d1bfae3fb7a706ee795139c8240b4bf80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/377162c0f81d415941a3f8f16bf5e4b6799628a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/377162c0f81d415941a3f8f16bf5e4b6799628a6", "html_url": "https://github.com/rust-lang/rust/commit/377162c0f81d415941a3f8f16bf5e4b6799628a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/377162c0f81d415941a3f8f16bf5e4b6799628a6/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1030b07ab80ceb4588d2b8582e6beb66ce624fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1030b07ab80ceb4588d2b8582e6beb66ce624fe", "html_url": "https://github.com/rust-lang/rust/commit/a1030b07ab80ceb4588d2b8582e6beb66ce624fe"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "c112b94e0168c7e90c7f0677b1bedc4567659dab", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/377162c0f81d415941a3f8f16bf5e4b6799628a6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377162c0f81d415941a3f8f16bf5e4b6799628a6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=377162c0f81d415941a3f8f16bf5e4b6799628a6", "patch": "@@ -44,9 +44,9 @@ use hir_def::{\n     nameres,\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n-    AssocContainerId, AssocItemId, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n-    FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId,\n-    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AssocItemId, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId, FunctionId, GenericDefId,\n+    HasModule, ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind, MacroDefId, MacroDefKind};\n use hir_ty::{\n@@ -114,6 +114,7 @@ pub use {\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n         AdtId,\n+        AssocContainerId,\n         AssocItemLoc,\n         ItemLoc,\n         Lookup,"}, {"sha": "f5f67dcc9b7fe75c2a440f59dea52709c99aba7e", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/377162c0f81d415941a3f8f16bf5e4b6799628a6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377162c0f81d415941a3f8f16bf5e4b6799628a6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=377162c0f81d415941a3f8f16bf5e4b6799628a6", "patch": "@@ -34,8 +34,8 @@ use base_db::{\n };\n use fst::{self, Streamer};\n use hir::{\n-    db::DefDatabase, AdtId, AssocItemLoc, DefHasSource, HirFileId, ItemLoc, ItemScope,\n-    ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId,\n+    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, HirFileId, ItemLoc,\n+    ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId,\n };\n use rayon::prelude::*;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -516,12 +516,28 @@ fn collect_symbols_from_item_scope(\n         let name = name.text().into();\n         let ptr = SyntaxNodePtr::new(source.value.syntax());\n \n+        let container_name = match loc.container {\n+            AssocContainerId::ModuleId(module_id) => {\n+                let def_map = module_id.def_map(db);\n+                let module_data = &def_map[module_id.local_id];\n+                module_data\n+                    .origin\n+                    .declaration()\n+                    .and_then(|s| s.to_node(db.upcast()).name().map(|n| n.text().into()))\n+            }\n+            AssocContainerId::TraitId(trait_id) => {\n+                let loc = trait_id.lookup(db);\n+                let source = loc.source(db);\n+                source.value.name().map(|n| n.text().into())\n+            }\n+            AssocContainerId::ImplId(_) => None,\n+        };\n+\n         Some(FileSymbol {\n             name,\n             kind,\n             range: source.value.syntax().text_range(),\n-            // todo: fill out based on loc.container.\n-            container_name: None,\n+            container_name,\n             file_id,\n             name_range: Some(name_range),\n             ptr,"}]}