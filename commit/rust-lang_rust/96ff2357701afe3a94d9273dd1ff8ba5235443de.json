{"sha": "96ff2357701afe3a94d9273dd1ff8ba5235443de", "node_id": "C_kwDOAAsO6NoAKDk2ZmYyMzU3NzAxYWZlM2E5NGQ5MjczZGQxZmY4YmE1MjM1NDQzZGU", "commit": {"author": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-23T02:07:26Z"}, "committer": {"name": "Raymond Luo", "email": "ray.luo@nyu.edu", "date": "2022-06-23T02:07:26Z"}, "message": "condense matches on autolink", "tree": {"sha": "4966856779cb740d580db6d8f315fbf7f55f5958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4966856779cb740d580db6d8f315fbf7f55f5958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ff2357701afe3a94d9273dd1ff8ba5235443de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ff2357701afe3a94d9273dd1ff8ba5235443de", "html_url": "https://github.com/rust-lang/rust/commit/96ff2357701afe3a94d9273dd1ff8ba5235443de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ff2357701afe3a94d9273dd1ff8ba5235443de/comments", "author": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erhuve", "id": 59463268, "node_id": "MDQ6VXNlcjU5NDYzMjY4", "avatar_url": "https://avatars.githubusercontent.com/u/59463268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erhuve", "html_url": "https://github.com/erhuve", "followers_url": "https://api.github.com/users/erhuve/followers", "following_url": "https://api.github.com/users/erhuve/following{/other_user}", "gists_url": "https://api.github.com/users/erhuve/gists{/gist_id}", "starred_url": "https://api.github.com/users/erhuve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erhuve/subscriptions", "organizations_url": "https://api.github.com/users/erhuve/orgs", "repos_url": "https://api.github.com/users/erhuve/repos", "events_url": "https://api.github.com/users/erhuve/events{/privacy}", "received_events_url": "https://api.github.com/users/erhuve/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3", "html_url": "https://github.com/rust-lang/rust/commit/b7e3f525bddacdea61405c2fddad5ee1a0b5d4b3"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "6932dd3ae222d7fade307c9da02c730f9549a445", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ff2357701afe3a94d9273dd1ff8ba5235443de/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ff2357701afe3a94d9273dd1ff8ba5235443de/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=96ff2357701afe3a94d9273dd1ff8ba5235443de", "patch": "@@ -385,7 +385,7 @@ fn map_links<'e>(\n             let (link_type, link_target_s, link_name) =\n                 callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n-            if !matches!(end_link_type, Some(link) if link == LinkType::Autolink) {\n+            if !matches!(end_link_type, Some(LinkType::Autolink)) {\n                 end_link_type = link_type;\n             }\n             Event::Text(CowStr::Boxed(link_name.into()))\n@@ -394,7 +394,7 @@ fn map_links<'e>(\n             let (link_type, link_target_s, link_name) =\n                 callback(&end_link_target.take().unwrap(), &s);\n             end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n-            if !matches!(end_link_type, Some(link) if link == LinkType::Autolink) {\n+            if !matches!(end_link_type, Some(LinkType::Autolink)) {\n                 end_link_type = link_type;\n             }\n             Event::Code(CowStr::Boxed(link_name.into()))"}]}