{"sha": "ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2E2NDQ5NTEyZTllNmZkMWVhNDU1YzY0Y2QwMmE3ZmE0Y2M3ZTI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-06T03:47:11Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-06T03:52:36Z"}, "message": "Add struct `AmbiguityError`.", "tree": {"sha": "777048266adfafdeb3c125e22e6a57d5f7af712d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777048266adfafdeb3c125e22e6a57d5f7af712d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "html_url": "https://github.com/rust-lang/rust/commit/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888a968139986847623bc40b5a7dc308cf44f988", "url": "https://api.github.com/repos/rust-lang/rust/commits/888a968139986847623bc40b5a7dc308cf44f988", "html_url": "https://github.com/rust-lang/rust/commit/888a968139986847623bc40b5a7dc308cf44f988"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "c5b505fba38e9669c76f2f1f60f89a50587a0e28", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ff3a6449512e9e6fd1ea455c64cd02a7fa4cc7e2", "patch": "@@ -879,9 +879,15 @@ enum NameBindingKind<'a> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n struct PrivacyError<'a>(Span, Name, &'a NameBinding<'a>);\n \n+struct AmbiguityError<'a> {\n+    span: Span,\n+    name: Name,\n+    b1: &'a NameBinding<'a>,\n+    b2: &'a NameBinding<'a>,\n+}\n+\n impl<'a> NameBinding<'a> {\n     fn module(&self) -> Result<Module<'a>, bool /* true if an error has already been reported */> {\n         match self.kind {\n@@ -1057,7 +1063,7 @@ pub struct Resolver<'a> {\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n-    ambiguity_errors: Vec<(Span, Name, &'a NameBinding<'a>, &'a NameBinding<'a>)>,\n+    ambiguity_errors: Vec<AmbiguityError<'a>>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1278,7 +1284,8 @@ impl<'a> Resolver<'a> {\n             }\n             NameBindingKind::Import { .. } => false,\n             NameBindingKind::Ambiguity { b1, b2 } => {\n-                self.ambiguity_errors.push((span, name, b1, b2));\n+                let ambiguity_error = AmbiguityError { span: span, name: name, b1: b1, b2: b2 };\n+                self.ambiguity_errors.push(ambiguity_error);\n                 true\n             }\n             _ => false\n@@ -3302,7 +3309,7 @@ impl<'a> Resolver<'a> {\n     fn report_errors(&self) {\n         let mut reported_spans = FnvHashSet();\n \n-        for &(span, name, b1, b2) in &self.ambiguity_errors {\n+        for &AmbiguityError { span, name, b1, b2 } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n             let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n             let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);"}]}