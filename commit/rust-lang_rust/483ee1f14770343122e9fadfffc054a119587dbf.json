{"sha": "483ee1f14770343122e9fadfffc054a119587dbf", "node_id": "C_kwDOAAsO6NoAKDQ4M2VlMWYxNDc3MDM0MzEyMmU5ZmFkZmZmYzA1NGExMTk1ODdkYmY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-26T11:19:32Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-26T11:27:24Z"}, "message": "Add a `-Zdump-drop-tracking-cfg` debugging flag\n\nThis is useful for debugging drop-tracking; previously, you had to recompile\nrustc from source and manually add a call to `write_graph_to_file`. This\nmakes the option more discoverable and configurable at runtime.\n\nI also took the liberty of making the labels for the CFG nodes much easier to read:\npreviously, they looked like `id(2), local_id: 48`, now they look like\n```\nexpr from_config (hir_id=HirId { owner: DefId(0:10 ~ default_struct_update[79f9]::foo), local_id: 2})\n```", "tree": {"sha": "ae744f82c1c9265644b784bb0864f8c5a20ccd10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae744f82c1c9265644b784bb0864f8c5a20ccd10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483ee1f14770343122e9fadfffc054a119587dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483ee1f14770343122e9fadfffc054a119587dbf", "html_url": "https://github.com/rust-lang/rust/commit/483ee1f14770343122e9fadfffc054a119587dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483ee1f14770343122e9fadfffc054a119587dbf/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1a6fb463e7075572cee841525bf44a864da807", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a6fb463e7075572cee841525bf44a864da807", "html_url": "https://github.com/rust-lang/rust/commit/0e1a6fb463e7075572cee841525bf44a864da807"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "dd7ef360cc18bc2c2b0cf69b56272a368fae8b08", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=483ee1f14770343122e9fadfffc054a119587dbf", "patch": "@@ -649,6 +649,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n+    untracked!(dump_drop_tracking_cfg, Some(\"cfg.dot\".to_string()));\n     untracked!(dump_mir, Some(String::from(\"abc\")));\n     untracked!(dump_mir_dataflow, true);\n     untracked!(dump_mir_dir, String::from(\"abc\"));"}, {"sha": "2638faa9d6a47e2fff76b84912d04e60c8bb46d0", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=483ee1f14770343122e9fadfffc054a119587dbf", "patch": "@@ -1245,6 +1245,8 @@ options! {\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n         (default: no)\"),\n+    dump_drop_tracking_cfg: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"dump drop-tracking control-flow graph as a `.dot` file (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:"}, {"sha": "0af866359e8479113f8755049f3128eb9786948e", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=483ee1f14770343122e9fadfffc054a119587dbf", "patch": "@@ -33,6 +33,9 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n+    if let Some(filename) = &tcx.sess.opts.debugging_opts.dump_drop_tracking_cfg {\n+        super::cfg_visualize::write_graph_to_file(&drop_range_visitor.drop_ranges, filename, tcx);\n+    }\n \n     (drop_range_visitor.drop_ranges, drop_range_visitor.places.borrowed_temporaries)\n }"}, {"sha": "afca7f7b531f4ecc9af4cac39b4aeff48fa145f0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483ee1f14770343122e9fadfffc054a119587dbf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=483ee1f14770343122e9fadfffc054a119587dbf", "patch": "@@ -2,29 +2,43 @@\n //! flow graph when needed for debugging.\n \n use rustc_graphviz as dot;\n+use rustc_middle::ty::TyCtxt;\n \n use super::{DropRangesBuilder, PostOrderId};\n \n /// Writes the CFG for DropRangesBuilder to a .dot file for visualization.\n ///\n /// It is not normally called, but is kept around to easily add debugging\n /// code when needed.\n-#[allow(dead_code)]\n-pub(super) fn write_graph_to_file(drop_ranges: &DropRangesBuilder, filename: &str) {\n-    dot::render(drop_ranges, &mut std::fs::File::create(filename).unwrap()).unwrap();\n+pub(super) fn write_graph_to_file(\n+    drop_ranges: &DropRangesBuilder,\n+    filename: &str,\n+    tcx: TyCtxt<'_>,\n+) {\n+    dot::render(\n+        &DropRangesGraph { drop_ranges, tcx },\n+        &mut std::fs::File::create(filename).unwrap(),\n+    )\n+    .unwrap();\n }\n \n-impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n+struct DropRangesGraph<'a, 'tcx> {\n+    drop_ranges: &'a DropRangesBuilder,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'a> dot::GraphWalk<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n \n     fn nodes(&'a self) -> dot::Nodes<'a, Self::Node> {\n-        self.nodes.iter_enumerated().map(|(i, _)| i).collect()\n+        self.drop_ranges.nodes.iter_enumerated().map(|(i, _)| i).collect()\n     }\n \n     fn edges(&'a self) -> dot::Edges<'a, Self::Edge> {\n-        self.nodes\n+        self.drop_ranges\n+            .nodes\n             .iter_enumerated()\n             .flat_map(|(i, node)| {\n                 if node.successors.len() == 0 {\n@@ -45,7 +59,7 @@ impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n     }\n }\n \n-impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n+impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n@@ -60,18 +74,12 @@ impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n \n     fn node_label(&'a self, n: &Self::Node) -> dot::LabelText<'a> {\n         dot::LabelText::LabelStr(\n-            format!(\n-                \"{:?}, local_id: {}\",\n-                n,\n-                self.post_order_map\n-                    .iter()\n-                    .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n-                        \"{}\",\n-                        hir_id.local_id.index()\n-                    ))\n-            )\n-            .into(),\n+            self.drop_ranges\n+                .post_order_map\n+                .iter()\n+                .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n+                .map_or(\"<unknown>\".into(), |(hir_id, _)| self.tcx.hir().node_to_string(*hir_id))\n+                .into(),\n         )\n     }\n }"}]}