{"sha": "225969e8a3b8025dac6d577f6b23af85485be7d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTk2OWU4YTNiODAyNWRhYzZkNTc3ZjZiMjNhZjg1NDg1YmU3ZDA=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T11:58:55Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T11:58:55Z"}, "message": "methods: move misc.StrToStringPass to MethodsPass", "tree": {"sha": "81aba7363024732260d0ae70bfecec10466a2fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81aba7363024732260d0ae70bfecec10466a2fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225969e8a3b8025dac6d577f6b23af85485be7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225969e8a3b8025dac6d577f6b23af85485be7d0", "html_url": "https://github.com/rust-lang/rust/commit/225969e8a3b8025dac6d577f6b23af85485be7d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225969e8a3b8025dac6d577f6b23af85485be7d0/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcd01ff47a24253eccbd722d1566537a5576e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcd01ff47a24253eccbd722d1566537a5576e52", "html_url": "https://github.com/rust-lang/rust/commit/8bcd01ff47a24253eccbd722d1566537a5576e52"}], "stats": {"total": 46, "additions": 12, "deletions": 34}, "files": [{"sha": "7b47edaa496597c9076e44279a711a48eaed9841", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=225969e8a3b8025dac6d577f6b23af85485be7d0", "patch": "@@ -37,7 +37,6 @@ pub mod returns;\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypePass as LintPassObject);\n     reg.register_lint_pass(box misc::MiscPass as LintPassObject);\n-    reg.register_lint_pass(box misc::StrToStringPass as LintPassObject);\n     reg.register_lint_pass(box misc::TopLevelRefPass as LintPassObject);\n     reg.register_lint_pass(box misc::CmpNan as LintPassObject);\n     reg.register_lint_pass(box eq_op::EqOp as LintPassObject);\n@@ -61,7 +60,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n-                                           misc::SINGLE_MATCH, misc::STR_TO_STRING,\n+                                           misc::SINGLE_MATCH,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n                                            bit_mask::BAD_BIT_MASK,\n                                            bit_mask::INEFFECTIVE_BIT_MASK,\n@@ -83,5 +82,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            misc::MODULO_ONE,\n                                            methods::OPTION_UNWRAP_USED,\n                                            methods::RESULT_UNWRAP_USED,\n+                                           methods::STR_TO_STRING,\n                                            ]);\n }"}, {"sha": "f02e06640923657bc8c84fee37924e98478b6c7e", "filename": "src/methods.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=225969e8a3b8025dac6d577f6b23af85485be7d0", "patch": "@@ -11,16 +11,19 @@ declare_lint!(pub OPTION_UNWRAP_USED, Warn,\n               \"Warn on using unwrap() on an Option value\");\n declare_lint!(pub RESULT_UNWRAP_USED, Allow,\n               \"Warn on using unwrap() on a Result value\");\n+declare_lint!(pub STR_TO_STRING, Warn,\n+              \"Warn when a String could use to_owned() instead of to_string()\");\n \n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED)\n+        lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n+            let ref obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty;\n             if ident.node.name == \"unwrap\" {\n-                if let ty::TyEnum(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty {\n+                if let ty::TyEnum(did, _) = *obj_ty {\n                     if match_def_path(cx, did.did, &[\"core\", \"option\", \"Option\"]) {\n                         span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n                                   \"used unwrap() on an Option value. If you don't want \\\n@@ -34,6 +37,11 @@ impl LintPass for MethodsPass {\n                     }\n                 }\n             }\n+            else if ident.node.name == \"to_string\" {\n+                if let ty::TyStr = *obj_ty {\n+                    span_lint(cx, STR_TO_STRING, expr.span, \"`str.to_owned()` is faster\");\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "d5e1efe2cc3a7fd80a55eb246253257990f43527", "filename": "src/misc.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225969e8a3b8025dac6d577f6b23af85485be7d0/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=225969e8a3b8025dac6d577f6b23af85485be7d0", "patch": "@@ -59,36 +59,6 @@ impl LintPass for MiscPass {\n }\n \n \n-declare_lint!(pub STR_TO_STRING, Warn, \"Warn when a String could use to_owned() instead of to_string()\");\n-\n-#[allow(missing_copy_implementations)]\n-pub struct StrToStringPass;\n-\n-impl LintPass for StrToStringPass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(STR_TO_STRING)\n-    }\n-\n-    fn check_expr(&mut self, cx: &Context, expr: &ast::Expr) {\n-        match expr.node {\n-            ast::ExprMethodCall(ref method, _, ref args)\n-                if method.node.name == \"to_string\"\n-                && is_str(cx, &*args[0]) => {\n-                span_lint(cx, STR_TO_STRING, expr.span, \"`str.to_owned()` is faster\");\n-            },\n-            _ => ()\n-        }\n-\n-        fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            match walk_ptrs_ty(cx.tcx.expr_ty(expr)).sty {\n-                ty::TyStr => true,\n-                _ => false\n-            }\n-        }\n-    }\n-}\n-\n-\n declare_lint!(pub TOPLEVEL_REF_ARG, Warn, \"Warn about pattern matches with top-level `ref` bindings\");\n \n #[allow(missing_copy_implementations)]"}]}