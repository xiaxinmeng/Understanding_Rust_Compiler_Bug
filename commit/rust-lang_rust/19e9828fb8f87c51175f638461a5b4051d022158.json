{"sha": "19e9828fb8f87c51175f638461a5b4051d022158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTk4MjhmYjhmODdjNTExNzVmNjM4NDYxYTViNDA1MWQwMjIxNTg=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-04T19:37:25Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-04T19:37:25Z"}, "message": "Fix printing of extended errors.", "tree": {"sha": "6e2687d2fe373e2cd940f8d03cc4f95164ed43dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e2687d2fe373e2cd940f8d03cc4f95164ed43dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e9828fb8f87c51175f638461a5b4051d022158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e9828fb8f87c51175f638461a5b4051d022158", "html_url": "https://github.com/rust-lang/rust/commit/19e9828fb8f87c51175f638461a5b4051d022158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e9828fb8f87c51175f638461a5b4051d022158/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2615106a46879c4e9acc46874ebe06b549d06d67", "url": "https://api.github.com/repos/rust-lang/rust/commits/2615106a46879c4e9acc46874ebe06b549d06d67", "html_url": "https://github.com/rust-lang/rust/commit/2615106a46879c4e9acc46874ebe06b549d06d67"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "34f8f34b5550565d5f9021382c52d739e00fa31e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/19e9828fb8f87c51175f638461a5b4051d022158/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e9828fb8f87c51175f638461a5b4051d022158/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=19e9828fb8f87c51175f638461a5b4051d022158", "patch": "@@ -10,45 +10,52 @@\n \n #![allow(non_snake_case)]\n \n+// Error messages for EXXXX errors.\n+// Each message should start and end with a new line, and be wrapped to 80 characters.\n+// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n register_long_diagnostics! {\n-    E0001: r##\"\n-    This error suggests that the expression arm corresponding to the noted pattern\n-    will never be reached as for all possible values of the expression being matched,\n-    one of the preceding patterns will match.\n \n-    This means that perhaps some of the preceding patterns are too general, this\n-    one is too specific or the ordering is incorrect.\n+E0001: r##\"\n+This error suggests that the expression arm corresponding to the noted pattern\n+will never be reached as for all possible values of the expression being\n+matched, one of the preceding patterns will match.\n+\n+This means that perhaps some of the preceding patterns are too general, this one\n+is too specific or the ordering is incorrect.\n \"##,\n \n-    E0003: r##\"\n-    Not-a-Number (NaN) values can not be compared for equality and hence can never match\n-    the input to a match expression. To match against NaN values, you should instead use\n-    the `is_nan` method in a guard, as in: x if x.is_nan() => ...\n+E0003: r##\"\n+Not-a-Number (NaN) values can not be compared for equality and hence can never\n+match the input to a match expression. To match against NaN values, you should\n+instead use the `is_nan` method in a guard, as in: x if x.is_nan() => ...\n \"##,\n \n-    E0004: r##\"\n-    This error indicates that the compiler can not guarantee a matching pattern for one\n-    or more possible inputs to a match expression. Guaranteed matches are required in order\n-    to assign values to match expressions, or alternatively, determine the flow of execution.\n+E0004: r##\"\n+This error indicates that the compiler can not guarantee a matching pattern for\n+one or more possible inputs to a match expression. Guaranteed matches are\n+required in order to assign values to match expressions, or alternatively,\n+determine the flow of execution.\n \n-    If you encounter this error you must alter your patterns so that every possible value of\n-    the input type is matched. For types with a small number of variants (like enums) you\n-    should probably cover all cases explicitly. Alternatively, the underscore `_` wildcard\n-    pattern can be added after all other patterns to match \"anything else\".\n+If you encounter this error you must alter your patterns so that every possible\n+value of the input type is matched. For types with a small number of variants\n+(like enums) you should probably cover all cases explicitly. Alternatively, the\n+underscore `_` wildcard pattern can be added after all other patterns to match\n+\"anything else\".\n \"##,\n \n-    // FIXME: Remove duplication here?\n-    E0005: r##\"\n-    Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n-    name will be extracted in all cases. If you encounter this error you probably need\n-    to use a `match` or `if let` to deal with the possibility of failure.\n+// FIXME: Remove duplication here?\n+E0005: r##\"\n+Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n+name will be extracted in all cases. If you encounter this error you probably need\n+to use a `match` or `if let` to deal with the possibility of failure.\n \"##,\n \n-    E0006: r##\"\n-    Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n-    name will be extracted in all cases. If you encounter this error you probably need\n-    to use a `match` or `if let` to deal with the possibility of failure.\n+E0006: r##\"\n+Patterns used to bind names must be irrefutable, that is, they must guarantee that a\n+name will be extracted in all cases. If you encounter this error you probably need\n+to use a `match` or `if let` to deal with the possibility of failure.\n \"##\n+\n }\n \n register_diagnostics! {"}, {"sha": "89c19cfb0b02a8d714676eec12a1921f9dfad349", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19e9828fb8f87c51175f638461a5b4051d022158/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e9828fb8f87c51175f638461a5b4051d022158/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=19e9828fb8f87c51175f638461a5b4051d022158", "patch": "@@ -277,7 +277,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             Some(ref code) => {\n                 match descriptions.find_description(&code[..]) {\n                     Some(ref description) => {\n-                        println!(\"{}\", description);\n+                        // Slice off the leading newline and print.\n+                        print!(\"{}\", &description[1..]);\n                     }\n                     None => {\n                         early_error(&format!(\"no extended information for {}\", code));"}]}