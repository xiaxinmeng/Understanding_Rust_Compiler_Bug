{"sha": "51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "node_id": "C_kwDOAAsO6NoAKDUxMzQ1YTgzYWFhOTlkMWVjMWE2NGUwOWM0ZTMyODAwNTFlOWNmYTI", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-11-01T23:01:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-11-08T02:27:21Z"}, "message": "Go back to loading all external crates unconditionally\n\nThis *continues* to cause regressions. This code will be unnecessary\nonce access to the resolver happens fully before creating the tyctxt\n(#83761), so load all crates unconditionally for now.", "tree": {"sha": "8184cd52b57f36921ad047cc1370765d608576db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8184cd52b57f36921ad047cc1370765d608576db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "html_url": "https://github.com/rust-lang/rust/commit/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdafe9953938150b8ad296a472a8416d64d1b5ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdafe9953938150b8ad296a472a8416d64d1b5ec", "html_url": "https://github.com/rust-lang/rust/commit/cdafe9953938150b8ad296a472a8416d64d1b5ec"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "089ffb1dc26aa6854c694c43ee7aa8496249da17", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "patch": "@@ -16,13 +16,15 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n+use rustc_resolve::Namespace::TypeNS;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::lint;\n use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n+use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cell::RefCell;\n use std::lazy::SyncLazy;\n@@ -299,13 +301,43 @@ crate fn create_config(\n }\n \n crate fn create_resolver<'a>(\n+    externs: config::Externs,\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n     let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n     let resolver = resolver.clone();\n \n-    crate::passes::collect_intra_doc_links::load_intra_link_crates(resolver, krate)\n+    let resolver = crate::passes::collect_intra_doc_links::load_intra_link_crates(resolver, krate);\n+\n+    // FIXME: somehow rustdoc is still missing crates even though we loaded all\n+    // the known necessary crates. Load them all unconditionally until we find a way to fix this.\n+    // DO NOT REMOVE THIS without first testing on the reproducer in\n+    // https://github.com/jyn514/objr/commit/edcee7b8124abf0e4c63873e8422ff81beb11ebb\n+    let extern_names: Vec<String> = externs\n+        .iter()\n+        .filter(|(_, entry)| entry.add_prelude)\n+        .map(|(name, _)| name)\n+        .cloned()\n+        .collect();\n+    resolver.borrow_mut().access(|resolver| {\n+        sess.time(\"load_extern_crates\", || {\n+            for extern_name in &extern_names {\n+                debug!(\"loading extern crate {}\", extern_name);\n+                if let Err(()) = resolver\n+                    .resolve_str_path_error(\n+                        DUMMY_SP,\n+                        extern_name,\n+                        TypeNS,\n+                        LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n+                  ) {\n+                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n+                  }\n+            }\n+        });\n+    });\n+\n+    resolver\n }\n \n crate fn run_global_ctxt("}, {"sha": "90ada38323886d95787a6596bd6b5ce4038b2bc7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51345a83aaa99d1ec1a64e09c4e3280051e9cfa2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=51345a83aaa99d1ec1a64e09c4e3280051e9cfa2", "patch": "@@ -755,6 +755,7 @@ fn main_options(options: config::Options) -> MainResult {\n     let default_passes = options.default_passes;\n     let output_format = options.output_format;\n     // FIXME: fix this clone (especially render_options)\n+    let externs = options.externs.clone();\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n@@ -773,7 +774,7 @@ fn main_options(options: config::Options) -> MainResult {\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture.\n-            let resolver = core::create_resolver(queries, sess);\n+            let resolver = core::create_resolver(externs, queries, sess);\n \n             if sess.has_errors() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");"}]}