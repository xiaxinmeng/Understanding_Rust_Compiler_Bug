{"sha": "2a28ac31e9abe0a01861bfffed85872431cc6b72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjhhYzMxZTlhYmUwYTAxODYxYmZmZmVkODU4NzI0MzFjYzZiNzI=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-05-16T12:46:37Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-05-16T12:46:37Z"}, "message": "Implement rounding for `Duration`s Debug output\n\nRounding is done like for printing floating point numbers. If the\nfirst digit which isn't printed (due to the precision parameter) is\nlarger than '4', the number is rounded up.", "tree": {"sha": "d652d7cf0dc36ccaf103b99b14b5c908097d3684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d652d7cf0dc36ccaf103b99b14b5c908097d3684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a28ac31e9abe0a01861bfffed85872431cc6b72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAlr8KG8ACgkQPLr0FT+B\nhidtZRAAhww8O6pzn90MO5vSwA/tXDmPl9kLYfvAEx5imWKX/rlWpWMa6YQz6nh8\nPMYAtdZCzU1q2t6N8Q2j4EP6ORKuDwO4yX8XeopvtZEH7h2dqgKmGLsa/YE+p+XE\n4k8Qike7yXrbybefxbsD81K8TXKaOFAaN18050qntaGwWfjMkiFcWQBPhSv1NAh/\nvOkAgPl1KNRzrDjMsBG+7VljzIsbZGhGpD3ivbNdDADVXPyQ8dJ7Idbqs+dEdWIH\nCTeTC46y1uMc2ccCDvW3dFBz5eD5j5bxT85xvDf7ieCt4gDffJTPzKVM5YHTxdOs\nD5C287lXx/UvEdPpq1ssZBKU02yrwxDOBteq7wNCEdiU0uE3j1ZqT+EaSfTI9jBQ\nroCWFJkqETqlBtEG0qR2Z37PIOeDwMUweLYGddk9ZQnPGL+0cYWjq47JshzUWlZx\nfjZ1BitaYrW3/iZ8jjJF3o9q6d72M1x/3q0EGlWKKTq5lCfsmNSLst9pqR5qi6BL\nFEYgulJZbh8bVfipoaPEGnxtQEe9d1m6IdVcjWRNlwCYZYVcdnJ5ubKXVoNRuNMa\nP+pvT4fKEKXECOgXg1C+ssp4gROK/mfbm6FrT08OjXNh5ToqgJwLFIATUi1U1dIh\nkFVpoPi83U+yaFHZFXQXPwiiUoLo7y9br5gKwhKj+DyICEr3ABA=\n=HmFI\n-----END PGP SIGNATURE-----", "payload": "tree d652d7cf0dc36ccaf103b99b14b5c908097d3684\nparent 9eeb13fdd1c10de7f489e7fc910686c6d492398e\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1526474797 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1526474797 +0200\n\nImplement rounding for `Duration`s Debug output\n\nRounding is done like for printing floating point numbers. If the\nfirst digit which isn't printed (due to the precision parameter) is\nlarger than '4', the number is rounded up.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a28ac31e9abe0a01861bfffed85872431cc6b72", "html_url": "https://github.com/rust-lang/rust/commit/2a28ac31e9abe0a01861bfffed85872431cc6b72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a28ac31e9abe0a01861bfffed85872431cc6b72/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eeb13fdd1c10de7f489e7fc910686c6d492398e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eeb13fdd1c10de7f489e7fc910686c6d492398e", "html_url": "https://github.com/rust-lang/rust/commit/9eeb13fdd1c10de7f489e7fc910686c6d492398e"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "b0abdc749f69d8b00c4d2a0f80497e6f74421f66", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a28ac31e9abe0a01861bfffed85872431cc6b72/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a28ac31e9abe0a01861bfffed85872431cc6b72/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=2a28ac31e9abe0a01861bfffed85872431cc6b72", "patch": "@@ -202,13 +202,19 @@ fn debug_formatting_precision_zero() {\n     assert_eq!(format!(\"{:.0?}\", Duration::new(0, 123)), \"123ns\");\n \n     assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_001)), \"1\u00b5s\");\n-    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_999)), \"1\u00b5s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_499)), \"1\u00b5s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_500)), \"2\u00b5s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_999)), \"2\u00b5s\");\n \n     assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_000_001)), \"1ms\");\n-    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_999_999)), \"1ms\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_499_999)), \"1ms\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_500_000)), \"2ms\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(0, 1_999_999)), \"2ms\");\n \n     assert_eq!(format!(\"{:.0?}\", Duration::new(1, 000_000_001)), \"1s\");\n-    assert_eq!(format!(\"{:.0?}\", Duration::new(1, 999_999_999)), \"1s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(1, 499_999_999)), \"1s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(1, 500_000_000)), \"2s\");\n+    assert_eq!(format!(\"{:.0?}\", Duration::new(1, 999_999_999)), \"2s\");\n }\n \n #[test]\n@@ -222,15 +228,19 @@ fn debug_formatting_precision_two() {\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_000)), \"1.00\u00b5s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 7_001)), \"7.00\u00b5s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 7_100)), \"7.10\u00b5s\");\n-    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_999)), \"1.99\u00b5s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 7_109)), \"7.11\u00b5s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 7_199)), \"7.20\u00b5s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_999)), \"2.00\u00b5s\");\n \n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_000_000)), \"1.00ms\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 3_001_000)), \"3.00ms\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(0, 3_100_000)), \"3.10ms\");\n-    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_999_999)), \"1.99ms\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(0, 1_999_999)), \"2.00ms\");\n \n     assert_eq!(format!(\"{:.2?}\", Duration::new(1, 000_000_000)), \"1.00s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(4, 001_000_000)), \"4.00s\");\n     assert_eq!(format!(\"{:.2?}\", Duration::new(2, 100_000_000)), \"2.10s\");\n-    assert_eq!(format!(\"{:.2?}\", Duration::new(8, 999_999_999)), \"8.99s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(2, 104_990_000)), \"2.10s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(2, 105_000_000)), \"2.11s\");\n+    assert_eq!(format!(\"{:.2?}\", Duration::new(8, 999_999_999)), \"9.00s\");\n }"}, {"sha": "34bf3637f298f3c8a1a62aa4d6169e7e738908f0", "filename": "src/libcore/time.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2a28ac31e9abe0a01861bfffed85872431cc6b72/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a28ac31e9abe0a01861bfffed85872431cc6b72/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=2a28ac31e9abe0a01861bfffed85872431cc6b72", "patch": "@@ -498,7 +498,7 @@ impl fmt::Debug for Duration {\n         /// to be less than `10 * divisor`!\n         fn fmt_decimal(\n             f: &mut fmt::Formatter,\n-            integer_part: u64,\n+            mut integer_part: u64,\n             mut fractional_part: u32,\n             mut divisor: u32,\n         ) -> fmt::Result {\n@@ -522,6 +522,40 @@ impl fmt::Debug for Duration {\n                 pos += 1;\n             }\n \n+            // If a precision < 9 was specified, there may be some non-zero\n+            // digits left that weren't written into the buffer. In that case we\n+            // need to perform rounding to match the semantics of printing\n+            // normal floating point numbers. However, we only need to do work\n+            // when rounding up. This happens if the first digit of the\n+            // remaining ones is >= 5.\n+            if fractional_part > 0 && fractional_part >= divisor * 5 {\n+                // Round up the number contained in the buffer. We go through\n+                // the buffer backwards and keep track of the carry.\n+                let mut rev_pos = pos;\n+                let mut carry = true;\n+                while carry && rev_pos > 0 {\n+                    rev_pos -= 1;\n+\n+                    // If the digit in the buffer is not '9', we just need to\n+                    // increment it and can stop then (since we don't have a\n+                    // carry anymore). Otherwise, we set it to '0' (overflow)\n+                    // and continue.\n+                    if buf[rev_pos] < b'9' {\n+                        buf[rev_pos] += 1;\n+                        carry = false;\n+                    } else {\n+                        buf[rev_pos] = b'0';\n+                    }\n+                }\n+\n+                // If we still have the carry bit set, that means that we set\n+                // the whole buffer to '0's and need to increment the integer\n+                // part.\n+                if carry {\n+                    integer_part += 1;\n+                }\n+            }\n+\n             // If we haven't emitted a single fractional digit and the precision\n             // wasn't set to a non-zero value, we don't print the decimal point.\n             let end = f.precision().unwrap_or(pos);"}]}