{"sha": "a30171c63d921ac7437c8d0e49d96316b68c59c5", "node_id": "C_kwDOAAsO6NoAKGEzMDE3MWM2M2Q5MjFhYzc0MzdjOGQwZTQ5ZDk2MzE2YjY4YzU5YzU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-17T07:49:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-20T15:00:36Z"}, "message": "Add compare-output-lines-by-subset flag to compiletest", "tree": {"sha": "cbbaa542eab0b6fadea40235bdd8456abcdc843d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbaa542eab0b6fadea40235bdd8456abcdc843d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a30171c63d921ac7437c8d0e49d96316b68c59c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a30171c63d921ac7437c8d0e49d96316b68c59c5", "html_url": "https://github.com/rust-lang/rust/commit/a30171c63d921ac7437c8d0e49d96316b68c59c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a30171c63d921ac7437c8d0e49d96316b68c59c5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc", "html_url": "https://github.com/rust-lang/rust/commit/5546cb64f6fbba70529582bbe58a40ba4a8ed9fc"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "ccce62bd5b0cfa7034df10e704a9ef84b7c36732", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a30171c63d921ac7437c8d0e49d96316b68c59c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30171c63d921ac7437c8d0e49d96316b68c59c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a30171c63d921ac7437c8d0e49d96316b68c59c5", "patch": "@@ -102,6 +102,9 @@ pub struct TestProps {\n     pub dont_check_compiler_stdout: bool,\n     // For UI tests, allows compiler to generate arbitrary output to stderr\n     pub dont_check_compiler_stderr: bool,\n+    // When checking the output of stdout or stderr check\n+    // that the lines of expected output are a subset of the actual output.\n+    pub compare_output_lines_by_subset: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n     //\n     // Set this for example if you have an auxiliary test file that contains\n@@ -209,6 +212,7 @@ mod directives {\n     pub const KNOWN_BUG: &'static str = \"known-bug\";\n     pub const MIR_UNIT_TEST: &'static str = \"unit-test\";\n     pub const REMAP_SRC_BASE: &'static str = \"remap-src-base\";\n+    pub const COMPARE_OUTPUT_LINES_BY_SUBSET: &'static str = \"compare-output-lines-by-subset\";\n     // This isn't a real directive, just one that is probably mistyped often\n     pub const INCORRECT_COMPILER_FLAGS: &'static str = \"compiler-flags\";\n }\n@@ -233,6 +237,7 @@ impl TestProps {\n             check_run_results: false,\n             dont_check_compiler_stdout: false,\n             dont_check_compiler_stderr: false,\n+            compare_output_lines_by_subset: false,\n             no_prefer_dynamic: false,\n             pretty_expanded: false,\n             pretty_mode: \"normal\".to_string(),\n@@ -467,6 +472,11 @@ impl TestProps {\n                     s.trim().to_string()\n                 });\n                 config.set_name_directive(ln, REMAP_SRC_BASE, &mut self.remap_src_base);\n+                config.set_name_directive(\n+                    ln,\n+                    COMPARE_OUTPUT_LINES_BY_SUBSET,\n+                    &mut self.compare_output_lines_by_subset,\n+                );\n             });\n         }\n "}, {"sha": "aed5641b67351bfd7079472742014cdf037c3c8f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a30171c63d921ac7437c8d0e49d96316b68c59c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30171c63d921ac7437c8d0e49d96316b68c59c5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a30171c63d921ac7437c8d0e49d96316b68c59c5", "patch": "@@ -3238,17 +3238,35 @@ impl<'test> TestCx<'test> {\n         match output_kind {\n             TestOutput::Compile => {\n                 if !self.props.dont_check_compiler_stdout {\n-                    errors +=\n-                        self.compare_output(stdout_kind, &normalized_stdout, &expected_stdout);\n+                    errors += self.compare_output(\n+                        stdout_kind,\n+                        &normalized_stdout,\n+                        &expected_stdout,\n+                        self.props.compare_output_lines_by_subset,\n+                    );\n                 }\n                 if !self.props.dont_check_compiler_stderr {\n-                    errors +=\n-                        self.compare_output(stderr_kind, &normalized_stderr, &expected_stderr);\n+                    errors += self.compare_output(\n+                        stderr_kind,\n+                        &normalized_stderr,\n+                        &expected_stderr,\n+                        self.props.compare_output_lines_by_subset,\n+                    );\n                 }\n             }\n             TestOutput::Run => {\n-                errors += self.compare_output(stdout_kind, &normalized_stdout, &expected_stdout);\n-                errors += self.compare_output(stderr_kind, &normalized_stderr, &expected_stderr);\n+                errors += self.compare_output(\n+                    stdout_kind,\n+                    &normalized_stdout,\n+                    &expected_stdout,\n+                    self.props.compare_output_lines_by_subset,\n+                );\n+                errors += self.compare_output(\n+                    stderr_kind,\n+                    &normalized_stderr,\n+                    &expected_stderr,\n+                    self.props.compare_output_lines_by_subset,\n+                );\n             }\n         }\n         errors\n@@ -3332,7 +3350,12 @@ impl<'test> TestCx<'test> {\n                 )\n             });\n \n-            errors += self.compare_output(\"fixed\", &fixed_code, &expected_fixed);\n+            errors += self.compare_output(\n+                \"fixed\",\n+                &fixed_code,\n+                &expected_fixed,\n+                self.props.compare_output_lines_by_subset,\n+            );\n         } else if !expected_fixed.is_empty() {\n             panic!(\n                 \"the `// run-rustfix` directive wasn't found but a `*.fixed` \\\n@@ -3790,11 +3813,38 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn compare_output(&self, kind: &str, actual: &str, expected: &str) -> usize {\n+    fn compare_output(\n+        &self,\n+        kind: &str,\n+        actual: &str,\n+        expected: &str,\n+        compare_output_by_lines: bool,\n+    ) -> usize {\n         if actual == expected {\n             return 0;\n         }\n \n+        let tmp;\n+        let (expected, actual): (&str, &str) = if compare_output_by_lines {\n+            let actual_lines: HashSet<_> = actual.lines().collect();\n+            let expected_lines: Vec<_> = expected.lines().collect();\n+            let mut used = expected_lines.clone();\n+            used.retain(|line| actual_lines.contains(line));\n+            // check if `expected` contains a subset of the lines of `actual`\n+            if used.len() == expected_lines.len() && (expected.is_empty() == actual.is_empty()) {\n+                return 0;\n+            }\n+            if expected_lines.is_empty() {\n+                // if we have no lines to check, force a full overwite\n+                (\"\", actual)\n+            } else {\n+                tmp = (expected_lines.join(\"\\n\"), used.join(\"\\n\"));\n+                (&tmp.0, &tmp.1)\n+            }\n+        } else {\n+            (expected, actual)\n+        };\n+\n         if !self.config.bless {\n             if expected.is_empty() {\n                 println!(\"normalized {}:\\n{}\\n\", kind, actual);"}]}