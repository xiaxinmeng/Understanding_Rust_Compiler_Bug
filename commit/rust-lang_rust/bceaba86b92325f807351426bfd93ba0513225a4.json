{"sha": "bceaba86b92325f807351426bfd93ba0513225a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWFiYTg2YjkyMzI1ZjgwNzM1MTQyNmJmZDkzYmEwNTEzMjI1YTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-30T16:34:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T11:30:08Z"}, "message": "rollback gating for failing macro matchers", "tree": {"sha": "290144b974c8ee7340565c89ba270142816b214d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290144b974c8ee7340565c89ba270142816b214d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bceaba86b92325f807351426bfd93ba0513225a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bceaba86b92325f807351426bfd93ba0513225a4", "html_url": "https://github.com/rust-lang/rust/commit/bceaba86b92325f807351426bfd93ba0513225a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bceaba86b92325f807351426bfd93ba0513225a4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe95cd2f4b3a722e023dc7bba8ff65136be441ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe95cd2f4b3a722e023dc7bba8ff65136be441ca", "html_url": "https://github.com/rust-lang/rust/commit/fe95cd2f4b3a722e023dc7bba8ff65136be441ca"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "74a92669a4d61cd91373d09fca4b498018f04bc1", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=bceaba86b92325f807351426bfd93ba0513225a4", "patch": "@@ -883,7 +883,7 @@ pub fn check_crate(krate: &ast::Crate,\n             // FIXME(eddyb) do something more useful than always\n             // disabling these uses of early feature-gatings.\n             if false {\n-                for span in &*parse_sess.gated_spans.$gate.borrow() {\n+                for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n                     gate_feature!(&visitor, $gate, *span, $msg);\n                 }\n             }"}, {"sha": "faad3e4af1e46daf93b376e7a7b7549df711bb8d", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=bceaba86b92325f807351426bfd93ba0513225a4", "patch": "@@ -19,8 +19,8 @@ use std::str;\n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n-crate struct GatedSpans {\n-    crate spans: Lock<FxHashMap<Symbol, Vec<Span>>>,\n+pub struct GatedSpans {\n+    pub spans: Lock<FxHashMap<Symbol, Vec<Span>>>,\n }\n \n impl GatedSpans {\n@@ -57,6 +57,15 @@ impl GatedSpans {\n             .get(&feature)\n             .map_or(true, |spans| spans.is_empty())\n     }\n+\n+    /// Prepend the given set of `spans` onto the set in `self`.\n+    pub fn merge(&self, mut spans: FxHashMap<Symbol, Vec<Span>>) {\n+        let mut inner = self.spans.borrow_mut();\n+        for (gate, mut gate_spans) in inner.drain() {\n+            spans.entry(gate).or_default().append(&mut gate_spans);\n+        }\n+        *inner = spans;\n+    }\n }\n \n /// Info about a parsing session.\n@@ -77,7 +86,7 @@ pub struct ParseSess {\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n     pub injected_crate_name: Once<Symbol>,\n-    crate gated_spans: GatedSpans,\n+    pub gated_spans: GatedSpans,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n }"}, {"sha": "5571990740317f2dfbc50fd13bc53602d14e7e00", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceaba86b92325f807351426bfd93ba0513225a4/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=bceaba86b92325f807351426bfd93ba0513225a4", "patch": "@@ -29,7 +29,7 @@ use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n-use std::slice;\n+use std::{mem, slice};\n \n use errors::Applicability;\n use rustc_data_structures::sync::Lrc;\n@@ -182,16 +182,25 @@ fn generic_extension<'cx>(\n \n     // Which arm's failure should we report? (the one furthest along)\n     let mut best_failure: Option<(Token, &str)> = None;\n-\n     for (i, lhs) in lhses.iter().enumerate() {\n         // try each arm's matchers\n         let lhs_tt = match *lhs {\n             mbe::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n             _ => cx.span_bug(sp, \"malformed macro lhs\"),\n         };\n \n+        // Take a snapshot of the state of pre-expansion gating at this point.\n+        // This is used so that if a matcher is not `Success(..)`ful,\n+        // then the spans which became gated when parsing the unsucessful matcher\n+        // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n+        let mut gated_spans_snaphot = mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n+\n         match parse_tt(cx, lhs_tt, arg.clone()) {\n             Success(named_matches) => {\n+                // The matcher was `Success(..)`ful.\n+                // Merge the gated spans from parsing the matcher with the pre-existing ones.\n+                cx.parse_sess.gated_spans.merge(gated_spans_snaphot);\n+\n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n                     mbe::TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n@@ -248,6 +257,10 @@ fn generic_extension<'cx>(\n             },\n             Error(err_sp, ref msg) => cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..]),\n         }\n+\n+        // The matcher was not `Success(..)`ful.\n+        // Restore to the state before snapshotting and maybe try again.\n+        mem::swap(&mut gated_spans_snaphot, &mut cx.parse_sess.gated_spans.spans.borrow_mut());\n     }\n \n     let (token, label) = best_failure.expect(\"ran no matchers\");"}, {"sha": "9d68a7bffdeeebfb96b5b3617ea7d8c4cc5ac4fb", "filename": "src/test/ui/parser/issue-65846-rollback-gating-failing-matcher.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bceaba86b92325f807351426bfd93ba0513225a4/src%2Ftest%2Fui%2Fparser%2Fissue-65846-rollback-gating-failing-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceaba86b92325f807351426bfd93ba0513225a4/src%2Ftest%2Fui%2Fparser%2Fissue-65846-rollback-gating-failing-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65846-rollback-gating-failing-matcher.rs?ref=bceaba86b92325f807351426bfd93ba0513225a4", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+// Test that failing macro matchers will not cause pre-expansion errors\n+// even though they use a feature that is pre-expansion gated.\n+\n+macro_rules! m {\n+    ($e:expr) => { 0 }; // This fails on the input below due to `, foo`.\n+    ($e:expr,) => { 1 }; // This also fails to match due to `foo`.\n+    (box $e:expr, foo) => { 2 }; // Successful matcher, we should get `2`.\n+}\n+\n+fn main() {\n+    assert_eq!(2, m!(box 42, foo));\n+}"}]}