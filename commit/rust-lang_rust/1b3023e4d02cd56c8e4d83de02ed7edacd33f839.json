{"sha": "1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzAyM2U0ZDAyY2Q1NmM4ZTRkODNkZTAyZWQ3ZWRhY2QzM2Y4Mzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T01:54:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T17:26:34Z"}, "message": "Convert ty::ty_uniq to contain a mutable type\n\nIssue #409", "tree": {"sha": "1026c34f2ab7fe3ee34b35df479683569f9403f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1026c34f2ab7fe3ee34b35df479683569f9403f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "html_url": "https://github.com/rust-lang/rust/commit/1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d088bd5286b7946068953fe43efe1a9dd47193a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d088bd5286b7946068953fe43efe1a9dd47193a", "html_url": "https://github.com/rust-lang/rust/commit/4d088bd5286b7946068953fe43efe1a9dd47193a"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "0e1a01b0e15960ef80812fbbf1aa15fb7d16b9f9", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -216,7 +216,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         ret ty::mk_param(st.tcx, parse_int(st) as uint, k);\n       }\n       '@' { ret ty::mk_box(st.tcx, parse_mt(st, sd)); }\n-      '~' { ret ty::mk_uniq(st.tcx, parse_ty(st, sd)); }\n+      '~' { ret ty::mk_uniq(st.tcx, parse_mt(st, sd)); }\n       '*' { ret ty::mk_ptr(st.tcx, parse_mt(st, sd)); }\n       'I' { ret ty::mk_vec(st.tcx, parse_mt(st, sd)); }\n       'R' {"}, {"sha": "7c3c396ec3531e7cf8a5c538f423239b4c285706", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -123,7 +123,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char(']');\n       }\n       ty::ty_box(mt) { w.write_char('@'); enc_mt(w, cx, mt); }\n-      ty::ty_uniq(t) { w.write_char('~'); enc_ty(w, cx, t); }\n+      ty::ty_uniq(mt) { w.write_char('~'); enc_mt(w, cx, mt); }\n       ty::ty_ptr(mt) { w.write_char('*'); enc_mt(w, cx, mt); }\n       ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {"}, {"sha": "2353aebb50fafb57f627cdf3c9460a7d122bbdc0", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -559,10 +559,9 @@ fn ty_can_unsafely_include(cx: ctx, needle: unsafe_ty, haystack: ty::t,\n             }\n             ret false;\n           }\n-          ty::ty_box(mt) | ty::ty_ptr(mt) {\n+          ty::ty_box(mt) | ty::ty_ptr(mt) | ty::ty_uniq(mt) {\n             ret helper(tcx, needle, mt.ty, get_mut(mut, mt));\n           }\n-          ty::ty_uniq(t) { ret helper(tcx, needle, t, false); }\n           ty::ty_rec(fields) {\n             for f: ty::field in fields {\n                 if helper(tcx, needle, f.mt.ty, get_mut(mut, f.mt)) {\n@@ -619,7 +618,7 @@ fn copy_is_expensive(tcx: ty::ctxt, ty: ty::t) -> bool {\n           ty::ty_fn(_, _, _, _, _) | ty::ty_native_fn(_, _, _) |\n           ty::ty_obj(_) { 4u }\n           ty::ty_str. | ty::ty_vec(_) | ty::ty_param(_, _) { 50u }\n-          ty::ty_uniq(t) { 1u + score_ty(tcx, t) }\n+          ty::ty_uniq(mt) { 1u + score_ty(tcx, mt.ty) }\n           ty::ty_tag(_, ts) | ty::ty_tup(ts) {\n             let sum = 0u;\n             for t in ts { sum += score_ty(tcx, t); }"}, {"sha": "6ac17db4209c5850994b94d765c28cc863b06eb7", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -23,7 +23,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n                 t = mt.ty;\n               }\n               ty::ty_uniq(mt) {\n-                ds += [@{mut: false, kind: unbox, outer_t: t}];\n+                ds += [@{mut: mt.mut != imm, kind: unbox, outer_t: t}];\n               }\n               ty::ty_res(_, inner, tps) {\n                 ds += [@{mut: false, kind: unbox, outer_t: t}];"}, {"sha": "2f4718223c4170093de44100b2a85b050ea528e0", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -370,9 +370,9 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         s += [shape_box];\n         add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n       }\n-      ty::ty_uniq(subt) {\n+      ty::ty_uniq(mt) {\n         s += [shape_uniq];\n-        add_substr(s, shape_of(ccx, subt, ty_param_map));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n       }\n       ty::ty_vec(mt) {\n         s += [shape_vec];"}, {"sha": "3f29c757aafaa0dc72a5a4d620bd5a55b45dae24", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -162,9 +162,10 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n         let mt_ty = mt.ty;\n         check non_ty_var(cx, mt_ty);\n         T_ptr(T_box(type_of_inner(cx, sp, mt_ty))) }\n-      ty::ty_uniq(t) {\n-        check non_ty_var(cx, t);\n-        T_ptr(type_of_inner(cx, sp, t)) }\n+      ty::ty_uniq(mt) {\n+        let mt_ty = mt.ty;\n+        check non_ty_var(cx, mt_ty);\n+        T_ptr(type_of_inner(cx, sp, mt_ty)) }\n       ty::ty_vec(mt) {\n         let mt_ty = mt.ty;\n         if ty::type_has_dynamic_size(cx.tcx, mt_ty) {\n@@ -478,7 +479,9 @@ fn simplify_type(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n     fn simplifier(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n         alt ty::struct(ccx.tcx, typ) {\n           ty::ty_box(_) { ret ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx)); }\n-          ty::ty_uniq(_) { ret ty::mk_uniq(ccx.tcx, ty::mk_nil(ccx.tcx)); }\n+          ty::ty_uniq(_) {\n+            ret ty::mk_imm_uniq(ccx.tcx, ty::mk_nil(ccx.tcx));\n+          }\n           ty::ty_fn(_, _, _, _, _) {\n             ret ty::mk_tup(ccx.tcx,\n                            [ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx)),\n@@ -1313,15 +1316,15 @@ fn make_free_glue(bcx: @block_ctxt, v0: ValueRef, t: ty::t) {\n                 trans_non_gc_free(bcx, v)\n             } else { bcx }\n           }\n-          ty::ty_uniq(content_t) {\n+          ty::ty_uniq(content_mt) {\n             let free_cx = new_sub_block_ctxt(bcx, \"uniq_free\");\n             let next_cx = new_sub_block_ctxt(bcx, \"uniq_free_next\");\n             let vptr = Load(bcx, v0);\n             let null_test = IsNull(bcx, vptr);\n             CondBr(bcx, null_test, next_cx.llbb, free_cx.llbb);\n \n             let bcx = free_cx;\n-            let bcx = drop_ty(bcx, vptr, content_t);\n+            let bcx = drop_ty(bcx, vptr, content_mt.ty);\n             let bcx = trans_shared_free(bcx, vptr);\n             Store(bcx, C_null(val_ty(vptr)), v0);\n             Br(bcx, next_cx.llbb);"}, {"sha": "0ed7fd669355dd05a22f55d5e7604774af93af16", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -65,6 +65,7 @@ export mk_ctxt;\n export mk_float;\n export mk_fn;\n export mk_imm_box;\n+export mk_imm_uniq;\n export mk_mut_ptr;\n export mk_int;\n export mk_str;\n@@ -251,7 +252,7 @@ tag sty {\n     ty_str;\n     ty_tag(def_id, [t]);\n     ty_box(mt);\n-    ty_uniq(t);\n+    ty_uniq(mt);\n     ty_vec(mt);\n     ty_ptr(mt);\n     ty_rec([field]);\n@@ -448,7 +449,7 @@ fn mk_raw_ty(cx: ctxt, st: sty, _in_cname: option::t<str>) -> @raw_t {\n         for tt: t in tys { derive_flags_t(cx, has_params, has_vars, tt); }\n       }\n       ty_box(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n-      ty_uniq(tt) { derive_flags_t(cx, has_params, has_vars, tt); }\n+      ty_uniq(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_vec(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_ptr(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_rec(flds) {\n@@ -534,7 +535,11 @@ fn mk_tag(cx: ctxt, did: ast::def_id, tys: [t]) -> t {\n \n fn mk_box(cx: ctxt, tm: mt) -> t { ret gen_ty(cx, ty_box(tm)); }\n \n-fn mk_uniq(cx: ctxt, typ: t) -> t { ret gen_ty(cx, ty_uniq(typ)); }\n+fn mk_uniq(cx: ctxt, tm: mt) -> t { ret gen_ty(cx, ty_uniq(tm)); }\n+\n+fn mk_imm_uniq(cx: ctxt, ty: t) -> t {\n+    ret mk_uniq(cx, {ty: ty, mut: ast::imm});\n+}\n \n fn mk_ptr(cx: ctxt, tm: mt) -> t { ret gen_ty(cx, ty_ptr(tm)); }\n \n@@ -643,7 +648,7 @@ fn walk_ty(cx: ctxt, walker: ty_walk, ty: t) {\n       ty_constr(sub, _) { walk_ty(cx, walker, sub); }\n       ty_var(_) {/* no-op */ }\n       ty_param(_, _) {/* no-op */ }\n-      ty_uniq(sub) { walk_ty(cx, walker, sub); }\n+      ty_uniq(tm) { walk_ty(cx, walker, tm.ty); }\n     }\n     walker(ty);\n }\n@@ -678,7 +683,9 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_box(tm) {\n         ty = mk_box(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n-      ty_uniq(subty) { ty = mk_uniq(cx, fold_ty(cx, fld, subty)); }\n+      ty_uniq(tm) {\n+        ty = mk_uniq(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n+      }\n       ty_ptr(tm) {\n         ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n@@ -1420,7 +1427,7 @@ fn hash_type_structure(st: sty) -> uint {\n         for c: @type_constr in cs { h += h << 5u + hash_type_constr(h, c); }\n         ret h;\n       }\n-      ty_uniq(t) { let h = 37u; h += h << 5u + hash_ty(t); ret h; }\n+      ty_uniq(mt) { let h = 37u; h += h << 5u + hash_ty(mt.ty); ret h; }\n     }\n }\n \n@@ -2184,13 +2191,20 @@ mod unify {\n               _ { ret ures_err(terr_mismatch); }\n             }\n           }\n-          ty::ty_uniq(expected_sub) {\n+          ty::ty_uniq(expected_mt) {\n             alt struct(cx.tcx, actual) {\n-              ty::ty_uniq(actual_sub) {\n-                let result = unify_step(cx, expected_sub, actual_sub);\n+              ty::ty_uniq(actual_mt) {\n+                let mut = expected_mt.mut;\n+                // FIXME (409) Write a test then uncomment\n+                /*alt unify_mut(expected_mt.mut, actual_mt.mut) {\n+                  none. { ret ures_err(terr_box_mutability); }\n+                  some(m) { mut = m; }\n+                }*/\n+                let result = unify_step(cx, expected_mt.ty, actual_mt.ty);\n                 alt result {\n-                  ures_ok(result_sub) {\n-                    ret ures_ok(mk_uniq(cx.tcx, result_sub));\n+                  ures_ok(result_mt) {\n+                    let mt = {ty: result_mt, mut: mut};\n+                    ret ures_ok(mk_uniq(cx.tcx, mt));\n                   }\n                   _ { ret result; }\n                 }"}, {"sha": "88035da6c62e4e1e6fe23e84f3da50af58f629e6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -286,7 +286,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, getter: ty_getter, ast_ty: @ast::ty) -> ty::t {\n         typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n       ast::ty_uniq(mt) {\n-        typ = ty::mk_uniq(tcx, ast_ty_to_ty(tcx, getter, mt.ty));\n+        typ = ty::mk_uniq(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n       ast::ty_vec(mt) {\n         typ = ty::mk_vec(tcx, ast_mt_to_mt(tcx, getter, mt));\n@@ -1720,12 +1720,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         alt unop {\n           ast::box(mut) { oper_t = ty::mk_box(tcx, {ty: oper_t, mut: mut}); }\n           ast::uniq(mut) {\n-            oper_t = ty::mk_uniq(tcx, oper_t);\n+            oper_t = ty::mk_uniq(tcx, {ty: oper_t, mut: mut});\n           }\n           ast::deref. {\n             alt structure_of(fcx, expr.span, oper_t) {\n               ty::ty_box(inner) { oper_t = inner.ty; }\n-              ty::ty_uniq(inner) { oper_t = inner; }\n+              ty::ty_uniq(inner) { oper_t = inner.ty; }\n               ty::ty_res(_, inner, _) { oper_t = inner; }\n               ty::ty_tag(id, tps) {\n                 let variants = ty::tag_variants(tcx, id);"}, {"sha": "11c50affd28d629d9a1acc3dfa233f83629e1920", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b3023e4d02cd56c8e4d83de02ed7edacd33f839/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=1b3023e4d02cd56c8e4d83de02ed7edacd33f839", "patch": "@@ -101,7 +101,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n           ty_char. { \"char\" }\n           ty_str. { \"str\" }\n           ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n-          ty_uniq(t) { \"~\" + ty_to_str(cx, t) }\n+          ty_uniq(tm) { \"~\" + mt_to_str(cx, tm) }\n           ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }\n           ty_type. { \"type\" }\n           ty_rec(elems) {"}]}