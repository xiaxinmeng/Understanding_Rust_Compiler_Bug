{"sha": "cead47ca53a2c6bb0f774264131dccbc0936d90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWQ0N2NhNTNhMmM2YmIwZjc3NDI2NDEzMWRjY2JjMDkzNmQ5MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-20T12:17:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T13:51:35Z"}, "message": "Add a \"match\" relation that can be used to make recursion check during\ntrait matching more tailored. We now detect recursion where the\nobligations \"match\" -- meaning basically that they are the same for some\nsubstitution of any unbound type variables.", "tree": {"sha": "26972ced5bfd0742dd2597bb6398db319610936f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26972ced5bfd0742dd2597bb6398db319610936f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cead47ca53a2c6bb0f774264131dccbc0936d90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cead47ca53a2c6bb0f774264131dccbc0936d90b", "html_url": "https://github.com/rust-lang/rust/commit/cead47ca53a2c6bb0f774264131dccbc0936d90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cead47ca53a2c6bb0f774264131dccbc0936d90b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8403b82ddb6657dead95c6c3877824ffb3f13af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8403b82ddb6657dead95c6c3877824ffb3f13af2", "html_url": "https://github.com/rust-lang/rust/commit/8403b82ddb6657dead95c6c3877824ffb3f13af2"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "8f0ccbd446110be216986fb72392a1804c974ec4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=cead47ca53a2c6bb0f774264131dccbc0936d90b", "patch": "@@ -122,6 +122,7 @@ pub mod middle {\n     pub mod traits;\n     pub mod ty;\n     pub mod ty_fold;\n+    pub mod ty_match;\n     pub mod ty_relate;\n     pub mod ty_walk;\n     pub mod weak_lang_items;"}, {"sha": "169e06a959419f407132ef50d642b17976f05b32", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=cead47ca53a2c6bb0f774264131dccbc0936d90b", "patch": "@@ -38,6 +38,8 @@ use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n+use middle::ty_match;\n+use middle::ty_relate::TypeRelation;\n use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::{abi, ast};\n@@ -472,7 +474,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             unbound_input_types &&\n              (self.intercrate ||\n               stack.iter().skip(1).any(\n-                  |prev| stack.fresh_trait_ref.def_id() == prev.fresh_trait_ref.def_id()))\n+                  |prev| self.match_fresh_trait_refs(&stack.fresh_trait_ref,\n+                                                     &prev.fresh_trait_ref)))\n         {\n             debug!(\"evaluate_stack({}) --> unbound argument, recursion -->  ambiguous\",\n                    stack.fresh_trait_ref.repr(self.tcx()));\n@@ -2475,6 +2478,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // Miscellany\n \n+    fn match_fresh_trait_refs(&self,\n+                              previous: &ty::PolyTraitRef<'tcx>,\n+                              current: &ty::PolyTraitRef<'tcx>)\n+                              -> bool\n+    {\n+        let mut matcher = ty_match::Match::new(self.tcx());\n+        matcher.relate(previous, current).is_ok()\n+    }\n+\n     fn push_stack<'o,'s:'o>(&mut self,\n                             previous_stack: Option<&'s TraitObligationStack<'s, 'tcx>>,\n                             obligation: &'o TraitObligation<'tcx>)"}, {"sha": "bb00fadc39c95c062ab61c9ccc3b04794797e9ef", "filename": "src/librustc/middle/ty_match.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cead47ca53a2c6bb0f774264131dccbc0936d90b/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_match.rs?ref=cead47ca53a2c6bb0f774264131dccbc0936d90b", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use middle::ty::{self, Ty};\n+use middle::ty_relate::{self, Relate, TypeRelation, RelateResult};\n+use util::ppaux::Repr;\n+\n+/// A type \"A\" *matches* \"B\" if the fresh types in B could be\n+/// substituted with values so as to make it equal to A. Matching is\n+/// intended to be used only on freshened types, and it basically\n+/// indicates if the non-freshened versions of A and B could have been\n+/// unified.\n+///\n+/// It is only an approximation. If it yields false, unification would\n+/// definitely fail, but a true result doesn't mean unification would\n+/// succeed. This is because we don't track the \"side-constraints\" on\n+/// type variables, nor do we track if the same freshened type appears\n+/// more than once. To some extent these approximations could be\n+/// fixed, given effort.\n+///\n+/// Like subtyping, matching is really a binary relation, so the only\n+/// important thing about the result is Ok/Err. Also, matching never\n+/// affects any type variables or unification state.\n+pub struct Match<'a, 'tcx: 'a> {\n+    tcx: &'a ty::ctxt<'tcx>\n+}\n+\n+impl<'a, 'tcx> Match<'a, 'tcx> {\n+    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Match<'a, 'tcx> {\n+        Match { tcx: tcx }\n+    }\n+}\n+\n+impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n+    fn tag(&self) -> &'static str { \"Match\" }\n+    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }\n+    fn a_is_expected(&self) -> bool { true } // irrelevant\n+\n+    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n+                                               _: ty::Variance,\n+                                               a: &T,\n+                                               b: &T)\n+                                               -> RelateResult<'tcx, T>\n+    {\n+        self.relate(a, b)\n+    }\n+\n+    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> {\n+        debug!(\"{}.regions({}, {})\",\n+               self.tag(),\n+               a.repr(self.tcx()),\n+               b.repr(self.tcx()));\n+        Ok(a)\n+    }\n+\n+    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        debug!(\"{}.tys({}, {})\", self.tag(),\n+               a.repr(self.tcx()), b.repr(self.tcx()));\n+        if a == b { return Ok(a); }\n+\n+        match (&a.sty, &b.sty) {\n+            (_, &ty::ty_infer(ty::FreshTy(_))) |\n+            (_, &ty::ty_infer(ty::FreshIntTy(_))) => {\n+                Ok(a)\n+            }\n+\n+            (&ty::ty_infer(_), _) |\n+            (_, &ty::ty_infer(_)) => {\n+                Err(ty::terr_sorts(ty_relate::expected_found(self, &a, &b)))\n+            }\n+\n+            (&ty::ty_err, _) | (_, &ty::ty_err) => {\n+                Ok(self.tcx().types.err)\n+            }\n+\n+            _ => {\n+                ty_relate::super_relate_tys(self, a, b)\n+            }\n+        }\n+    }\n+\n+    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n+                  -> RelateResult<'tcx, ty::Binder<T>>\n+        where T: Relate<'a,'tcx>\n+    {\n+        Ok(ty::Binder(try!(self.relate(a.skip_binder(), b.skip_binder()))))\n+    }\n+}"}]}