{"sha": "e4646ce0d5bc232fb525a9330bc0c64d826fd241", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NjQ2Y2UwZDViYzIzMmZiNTI1YTkzMzBiYzBjNjRkODI2ZmQyNDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T10:53:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T10:53:50Z"}, "message": "reduce visibility", "tree": {"sha": "884b57f27d090df3f002a5b918a21d36d535212b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884b57f27d090df3f002a5b918a21d36d535212b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4646ce0d5bc232fb525a9330bc0c64d826fd241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4646ce0d5bc232fb525a9330bc0c64d826fd241", "html_url": "https://github.com/rust-lang/rust/commit/e4646ce0d5bc232fb525a9330bc0c64d826fd241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4646ce0d5bc232fb525a9330bc0c64d826fd241/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5270bca5f72fa65f0515be776e06d3d6a4d1efca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5270bca5f72fa65f0515be776e06d3d6a4d1efca", "html_url": "https://github.com/rust-lang/rust/commit/5270bca5f72fa65f0515be776e06d3d6a4d1efca"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "ee0719ee0e75f8ea02fd9578c075c7e6b7d1ee4f", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e4646ce0d5bc232fb525a9330bc0c64d826fd241/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4646ce0d5bc232fb525a9330bc0c64d826fd241/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=e4646ce0d5bc232fb525a9330bc0c64d826fd241", "patch": "@@ -15,6 +15,10 @@ use crate::{\n     ids::{SourceFileItemId, SourceFileItems},\n };\n \n+/// `RawItems` is a set of top-level items in a file (except for impls).\n+///\n+/// It is the input to name resolution algorithm. `RawItems` are not invalidated\n+/// on most edits.\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct RawItems {\n     modules: Arena<Module, ModuleData>,\n@@ -31,11 +35,11 @@ pub struct ImportSourceMap {\n }\n \n impl ImportSourceMap {\n-    pub(crate) fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n+    fn insert(&mut self, import: ImportId, segment: &ast::PathSegment) {\n         self.map.insert(import, AstPtr::new(segment))\n     }\n \n-    pub fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::PathSegment> {\n+    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::PathSegment> {\n         let file = match source {\n             ModuleSource::SourceFile(file) => &*file,\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n@@ -64,7 +68,7 @@ impl RawItems {\n         (Arc::new(collector.raw_items), Arc::new(collector.source_map))\n     }\n \n-    pub(crate) fn items(&self) -> &[RawItem] {\n+    pub(super) fn items(&self) -> &[RawItem] {\n         &self.items\n     }\n }\n@@ -98,19 +102,19 @@ impl Index<Macro> for RawItems {\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(crate) enum RawItem {\n+pub(super) enum RawItem {\n     Module(Module),\n     Import(ImportId),\n     Def(Def),\n     Macro(Macro),\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct Module(RawId);\n+pub(super) struct Module(RawId);\n impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) enum ModuleData {\n+pub(super) enum ModuleData {\n     Declaration { name: Name, source_item_id: SourceFileItemId },\n     Definition { name: Name, source_item_id: SourceFileItemId, items: Vec<RawItem> },\n }\n@@ -121,26 +125,26 @@ impl_arena_id!(ImportId);\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n-    pub(crate) path: Path,\n-    pub(crate) alias: Option<Name>,\n-    pub(crate) is_glob: bool,\n-    pub(crate) is_prelude: bool,\n-    pub(crate) is_extern_crate: bool,\n+    pub(super) path: Path,\n+    pub(super) alias: Option<Name>,\n+    pub(super) is_glob: bool,\n+    pub(super) is_prelude: bool,\n+    pub(super) is_extern_crate: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct Def(RawId);\n+pub(super) struct Def(RawId);\n impl_arena_id!(Def);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct DefData {\n-    pub(crate) source_item_id: SourceFileItemId,\n-    pub(crate) name: Name,\n-    pub(crate) kind: DefKind,\n+pub(super) struct DefData {\n+    pub(super) source_item_id: SourceFileItemId,\n+    pub(super) name: Name,\n+    pub(super) kind: DefKind,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(crate) enum DefKind {\n+pub(super) enum DefKind {\n     Function,\n     Struct,\n     Enum,\n@@ -151,15 +155,15 @@ pub(crate) enum DefKind {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct Macro(RawId);\n+pub(super) struct Macro(RawId);\n impl_arena_id!(Macro);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct MacroData {\n-    pub(crate) source_item_id: SourceFileItemId,\n-    pub(crate) path: Path,\n-    pub(crate) name: Option<Name>,\n-    pub(crate) export: bool,\n+pub(super) struct MacroData {\n+    pub(super) source_item_id: SourceFileItemId,\n+    pub(super) path: Path,\n+    pub(super) name: Option<Name>,\n+    pub(super) export: bool,\n }\n \n struct RawItemsCollector {"}]}