{"sha": "f7cbf2eb410915149e983b5a934567d0512e10e5", "node_id": "C_kwDOAAsO6NoAKGY3Y2JmMmViNDEwOTE1MTQ5ZTk4M2I1YTkzNDU2N2QwNTEyZTEwZTU", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-06-02T03:47:05Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-02-07T09:37:55Z"}, "message": "Update with comments\n\nChanging a bunch of struct constructors to `from`, no extra destructuring,\ngetting the type of the discriminant.", "tree": {"sha": "9965d9735c40fe058f4147bef1a68b80f84817f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9965d9735c40fe058f4147bef1a68b80f84817f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cbf2eb410915149e983b5a934567d0512e10e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cbf2eb410915149e983b5a934567d0512e10e5", "html_url": "https://github.com/rust-lang/rust/commit/f7cbf2eb410915149e983b5a934567d0512e10e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cbf2eb410915149e983b5a934567d0512e10e5/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b4d203382f37917f5d5e1bc9057582529a9e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b4d203382f37917f5d5e1bc9057582529a9e90", "html_url": "https://github.com/rust-lang/rust/commit/33b4d203382f37917f5d5e1bc9057582529a9e90"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "efda87a15477114e5b08b7ddb870c0f0630036a5", "filename": "compiler/rustc_mir/src/transform/large_enums.rs", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f7cbf2eb410915149e983b5a934567d0512e10e5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cbf2eb410915149e983b5a934567d0512e10e5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flarge_enums.rs?ref=f7cbf2eb410915149e983b5a934567d0512e10e5", "patch": "@@ -1,8 +1,8 @@\n use crate::transform::MirPass;\n-use crate::util::patch::MirPatch;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, Const, List, Ty, TyCtxt};\n+use rustc_middle::ty::util::IntTypeExt;\n+use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{Size, TagEncoding, Variants};\n \n@@ -60,7 +60,6 @@ impl<const D: u64> EnumSizeOpt<D> {\n     fn optim(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let mut alloc_cache = FxHashMap::default();\n         let body_did = body.source.def_id();\n-        let mut patch = MirPatch::new(body);\n         let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for bb in bbs {\n             bb.expand_statements(|st| {\n@@ -70,15 +69,17 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n                     )) => {\n                         let ty = lhs.ty(local_decls, tcx).ty;\n+\n                         let source_info = st.source_info;\n                         let span = source_info.span;\n \n                         let (total_size, num_variants, sizes) =\n-                            if let Some((ts, nv, s)) = Self::candidate(tcx, ty, body_did) {\n-                                (ts, nv, s)\n+                            if let Some(cand) = Self::candidate(tcx, ty, body_did) {\n+                                cand\n                             } else {\n                                 return None;\n                             };\n+                        let adt_def = ty.ty_adt_def().unwrap();\n \n                         let alloc = if let Some(alloc) = alloc_cache.get(ty) {\n                             alloc\n@@ -111,13 +112,13 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             Const::from_usize(tcx, num_variants),\n                         ));\n \n-                        let size_array_local = patch.new_temp(tmp_ty, span);\n+                        let size_array_local = local_decls.push(LocalDecl::new(tmp_ty, span));\n                         let store_live = Statement {\n                             source_info,\n                             kind: StatementKind::StorageLive(size_array_local),\n                         };\n \n-                        let place = Place { local: size_array_local, projection: List::empty() };\n+                        let place = Place::from(size_array_local);\n                         let constant_vals = Constant {\n                             span,\n                             user_ty: None,\n@@ -133,11 +134,10 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             kind: StatementKind::Assign(box (place, rval)),\n                         };\n \n-                        let discr_place = Place {\n-                            // How do I get the discriminant type?\n-                            local: patch.new_temp(tcx.types.isize, span),\n-                            projection: List::empty(),\n-                        };\n+                        let discr_place = Place::from(\n+                            local_decls\n+                                .push(LocalDecl::new(adt_def.repr.discr_type().to_ty(tcx), span)),\n+                        );\n \n                         let store_discr = Statement {\n                             source_info,\n@@ -147,28 +147,40 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             )),\n                         };\n \n-                        // FIXME(jknodt) do I need to add a storage live here for this place?\n-                        let size_place = Place {\n-                            local: patch.new_temp(tcx.types.usize, span),\n-                            projection: List::empty(),\n+                        let discr_cast_place =\n+                            Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n+\n+                        let cast_discr = Statement {\n+                            source_info,\n+                            kind: StatementKind::Assign(box (\n+                                discr_cast_place,\n+                                Rvalue::Cast(\n+                                    CastKind::Misc,\n+                                    Operand::Copy(discr_place),\n+                                    tcx.types.usize,\n+                                ),\n+                            )),\n                         };\n \n+                        // FIXME(jknodt) do I need to add a storage live here for this place?\n+                        let size_place =\n+                            Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n+\n                         let store_size = Statement {\n                             source_info,\n                             kind: StatementKind::Assign(box (\n                                 size_place,\n                                 Rvalue::Use(Operand::Copy(Place {\n                                     local: size_array_local,\n-                                    projection: tcx\n-                                        .intern_place_elems(&[PlaceElem::Index(discr_place.local)]),\n+                                    projection: tcx.intern_place_elems(&[PlaceElem::Index(\n+                                        discr_cast_place.local,\n+                                    )]),\n                                 })),\n                             )),\n                         };\n \n-                        let dst = Place {\n-                            local: patch.new_temp(tcx.mk_mut_ptr(ty), span),\n-                            projection: List::empty(),\n-                        };\n+                        let dst =\n+                            Place::from(local_decls.push(LocalDecl::new(tcx.mk_mut_ptr(ty), span)));\n \n                         let dst_ptr = Statement {\n                             source_info,\n@@ -179,10 +191,8 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         };\n \n                         let dst_cast_ty = tcx.mk_mut_ptr(tcx.types.u8);\n-                        let dst_cast_place = Place {\n-                            local: patch.new_temp(dst_cast_ty, span),\n-                            projection: List::empty(),\n-                        };\n+                        let dst_cast_place =\n+                            Place::from(local_decls.push(LocalDecl::new(dst_cast_ty, span)));\n \n                         let dst_cast = Statement {\n                             source_info,\n@@ -192,10 +202,8 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             )),\n                         };\n \n-                        let src = Place {\n-                            local: patch.new_temp(tcx.mk_imm_ptr(ty), span),\n-                            projection: List::empty(),\n-                        };\n+                        let src =\n+                            Place::from(local_decls.push(LocalDecl::new(tcx.mk_imm_ptr(ty), span)));\n \n                         let src_ptr = Statement {\n                             source_info,\n@@ -206,10 +214,8 @@ impl<const D: u64> EnumSizeOpt<D> {\n                         };\n \n                         let src_cast_ty = tcx.mk_imm_ptr(tcx.types.u8);\n-                        let src_cast_place = Place {\n-                            local: patch.new_temp(src_cast_ty, span),\n-                            projection: List::empty(),\n-                        };\n+                        let src_cast_place =\n+                            Place::from(local_decls.push(LocalDecl::new(src_cast_ty, span)));\n \n                         let src_cast = Statement {\n                             source_info,\n@@ -245,6 +251,7 @@ impl<const D: u64> EnumSizeOpt<D> {\n                             store_live,\n                             const_assign,\n                             store_discr,\n+                            cast_discr,\n                             store_size,\n                             dst_ptr,\n                             dst_cast,\n@@ -261,6 +268,5 @@ impl<const D: u64> EnumSizeOpt<D> {\n                 }\n             });\n         }\n-        patch.apply(body);\n     }\n }"}]}