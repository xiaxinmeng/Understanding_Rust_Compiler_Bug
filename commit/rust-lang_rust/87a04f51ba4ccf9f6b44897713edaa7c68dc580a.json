{"sha": "87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "node_id": "C_kwDOAAsO6NoAKDg3YTA0ZjUxYmE0Y2NmOWY2YjQ0ODk3NzEzZWRhYTdjNjhkYzU4MGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T16:38:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T12:17:13Z"}, "message": "move WithCachedTypeInfo to rustc_type_ir", "tree": {"sha": "b9e1e1922dfd8bb8054566697523a1dcab6bf535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e1e1922dfd8bb8054566697523a1dcab6bf535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "html_url": "https://github.com/rust-lang/rust/commit/87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "html_url": "https://github.com/rust-lang/rust/commit/3d31e5c9810227ceb56d6d3a5228ca28b1aca890"}], "stats": {"total": 189, "additions": 101, "deletions": 88}, "files": [{"sha": "7a320b10b60300460fc3efe19811798742efb599", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -4,8 +4,6 @@ use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n use std::ptr;\n \n-use crate::fingerprint::Fingerprint;\n-\n mod private {\n     #[derive(Clone, Copy, Debug)]\n     pub struct PrivateZst;\n@@ -110,86 +108,5 @@ where\n     }\n }\n \n-/// A helper type that you can wrap round your own type in order to automatically\n-/// cache the stable hash on creation and not recompute it whenever the stable hash\n-/// of the type is computed.\n-/// This is only done in incremental mode. You can also opt out of caching by using\n-/// StableHash::ZERO for the hash, in which case the hash gets computed each time.\n-/// This is useful if you have values that you intern but never (can?) use for stable\n-/// hashing.\n-#[derive(Copy, Clone)]\n-pub struct WithCachedTypeInfo<T> {\n-    pub internee: T,\n-    pub stable_hash: Fingerprint,\n-}\n-\n-impl<T: PartialEq> PartialEq for WithCachedTypeInfo<T> {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.internee.eq(&other.internee)\n-    }\n-}\n-\n-impl<T: Eq> Eq for WithCachedTypeInfo<T> {}\n-\n-impl<T: Ord> PartialOrd for WithCachedTypeInfo<T> {\n-    fn partial_cmp(&self, other: &WithCachedTypeInfo<T>) -> Option<Ordering> {\n-        Some(self.internee.cmp(&other.internee))\n-    }\n-}\n-\n-impl<T: Ord> Ord for WithCachedTypeInfo<T> {\n-    fn cmp(&self, other: &WithCachedTypeInfo<T>) -> Ordering {\n-        self.internee.cmp(&other.internee)\n-    }\n-}\n-\n-impl<T> Deref for WithCachedTypeInfo<T> {\n-    type Target = T;\n-\n-    #[inline]\n-    fn deref(&self) -> &T {\n-        &self.internee\n-    }\n-}\n-\n-impl<T: Hash> Hash for WithCachedTypeInfo<T> {\n-    #[inline]\n-    fn hash<H: Hasher>(&self, s: &mut H) {\n-        if self.stable_hash != Fingerprint::ZERO {\n-            self.stable_hash.hash(s)\n-        } else {\n-            self.internee.hash(s)\n-        }\n-    }\n-}\n-\n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for WithCachedTypeInfo<T> {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        if self.stable_hash == Fingerprint::ZERO || cfg!(debug_assertions) {\n-            // No cached hash available. This can only mean that incremental is disabled.\n-            // We don't cache stable hashes in non-incremental mode, because they are used\n-            // so rarely that the performance actually suffers.\n-\n-            // We need to build the hash as if we cached it and then hash that hash, as\n-            // otherwise the hashes will differ between cached and non-cached mode.\n-            let stable_hash: Fingerprint = {\n-                let mut hasher = StableHasher::new();\n-                self.internee.hash_stable(hcx, &mut hasher);\n-                hasher.finish()\n-            };\n-            if cfg!(debug_assertions) && self.stable_hash != Fingerprint::ZERO {\n-                assert_eq!(\n-                    stable_hash, self.stable_hash,\n-                    \"cached stable hash does not match freshly computed stable hash\"\n-                );\n-            }\n-            stable_hash.hash_stable(hcx, hasher);\n-        } else {\n-            self.stable_hash.hash_stable(hcx, hasher);\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "2cbc381a11a7da554983e39e3e9f7a279b5ece53", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -88,8 +88,8 @@ macro_rules! arena_types {\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_data_structures::intern::WithCachedTypeInfo<rustc_middle::ty::TyS<'tcx>>,\n-            [] predicates: rustc_data_structures::intern::WithCachedTypeInfo<rustc_middle::ty::PredicateS<'tcx>>,\n+            [] tys: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::TyS<'tcx>>,\n+            [] predicates: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::PredicateS<'tcx>>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,"}, {"sha": "e1834f1f57afe5b3e8b5b11560716d9b8e6f1962", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -27,7 +27,7 @@ use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubst\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n+use rustc_data_structures::intern::Interned;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n@@ -67,6 +67,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n+use rustc_type_ir::WithCachedTypeInfo;\n use rustc_type_ir::{DynKind, InternAs, InternIteratorElement, Interner, TypeFlags};\n \n use std::any::Any;"}, {"sha": "c56e1b6e5a0f3edf6c2f404e68c2a0faa302afd1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -32,7 +32,7 @@ use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n-use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n+use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n@@ -50,6 +50,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, Span};\n use rustc_target::abi::{Align, Integer, IntegerType, VariantIdx};\n pub use rustc_target::abi::{ReprFlags, ReprOptions};\n+use rustc_type_ir::WithCachedTypeInfo;\n pub use subst::*;\n pub use vtable::*;\n "}, {"sha": "13fab0068d6a8687eacc964a0de591fe66f2358d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -6,10 +6,11 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n+use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n+use rustc_type_ir::WithCachedTypeInfo;\n use smallvec::SmallVec;\n \n use core::intrinsics;"}, {"sha": "e3f7a1bd033cea39b7ed706a45ed49ce7e8474e6", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -19,9 +19,11 @@ use std::mem::discriminant;\n \n pub mod codec;\n pub mod sty;\n+pub mod ty_info;\n \n pub use codec::*;\n pub use sty::*;\n+pub use ty_info::*;\n \n /// Needed so we can use #[derive(HashStable_Generic)]\n pub trait HashStableContext {}"}, {"sha": "815237a06c06b369846f389098b6f598a28c7850", "filename": "compiler/rustc_type_ir/src/ty_info.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a04f51ba4ccf9f6b44897713edaa7c68dc580a/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fty_info.rs?ref=87a04f51ba4ccf9f6b44897713edaa7c68dc580a", "patch": "@@ -0,0 +1,91 @@\n+use std::{\n+    cmp::Ordering,\n+    hash::{Hash, Hasher},\n+    ops::Deref,\n+};\n+\n+use rustc_data_structures::{\n+    fingerprint::Fingerprint,\n+    stable_hasher::{HashStable, StableHasher},\n+};\n+\n+/// A helper type that you can wrap round your own type in order to automatically\n+/// cache the stable hash on creation and not recompute it whenever the stable hash\n+/// of the type is computed.\n+/// This is only done in incremental mode. You can also opt out of caching by using\n+/// StableHash::ZERO for the hash, in which case the hash gets computed each time.\n+/// This is useful if you have values that you intern but never (can?) use for stable\n+/// hashing.\n+#[derive(Copy, Clone)]\n+pub struct WithCachedTypeInfo<T> {\n+    pub internee: T,\n+    pub stable_hash: Fingerprint,\n+}\n+\n+impl<T: PartialEq> PartialEq for WithCachedTypeInfo<T> {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.internee.eq(&other.internee)\n+    }\n+}\n+\n+impl<T: Eq> Eq for WithCachedTypeInfo<T> {}\n+\n+impl<T: Ord> PartialOrd for WithCachedTypeInfo<T> {\n+    fn partial_cmp(&self, other: &WithCachedTypeInfo<T>) -> Option<Ordering> {\n+        Some(self.internee.cmp(&other.internee))\n+    }\n+}\n+\n+impl<T: Ord> Ord for WithCachedTypeInfo<T> {\n+    fn cmp(&self, other: &WithCachedTypeInfo<T>) -> Ordering {\n+        self.internee.cmp(&other.internee)\n+    }\n+}\n+\n+impl<T> Deref for WithCachedTypeInfo<T> {\n+    type Target = T;\n+\n+    #[inline]\n+    fn deref(&self) -> &T {\n+        &self.internee\n+    }\n+}\n+\n+impl<T: Hash> Hash for WithCachedTypeInfo<T> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, s: &mut H) {\n+        if self.stable_hash != Fingerprint::ZERO {\n+            self.stable_hash.hash(s)\n+        } else {\n+            self.internee.hash(s)\n+        }\n+    }\n+}\n+\n+impl<T: HashStable<CTX>, CTX> HashStable<CTX> for WithCachedTypeInfo<T> {\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        if self.stable_hash == Fingerprint::ZERO || cfg!(debug_assertions) {\n+            // No cached hash available. This can only mean that incremental is disabled.\n+            // We don't cache stable hashes in non-incremental mode, because they are used\n+            // so rarely that the performance actually suffers.\n+\n+            // We need to build the hash as if we cached it and then hash that hash, as\n+            // otherwise the hashes will differ between cached and non-cached mode.\n+            let stable_hash: Fingerprint = {\n+                let mut hasher = StableHasher::new();\n+                self.internee.hash_stable(hcx, &mut hasher);\n+                hasher.finish()\n+            };\n+            if cfg!(debug_assertions) && self.stable_hash != Fingerprint::ZERO {\n+                assert_eq!(\n+                    stable_hash, self.stable_hash,\n+                    \"cached stable hash does not match freshly computed stable hash\"\n+                );\n+            }\n+            stable_hash.hash_stable(hcx, hasher);\n+        } else {\n+            self.stable_hash.hash_stable(hcx, hasher);\n+        }\n+    }\n+}"}]}