{"sha": "142dbd65da9ae168c198162f0e1eec1c960e91f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MmRiZDY1ZGE5YWUxNjhjMTk4MTYyZjBlMWVlYzFjOTYwZTkxZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-23T01:52:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T04:29:34Z"}, "message": "librustc: Remove all uses of the old `[T * N]` fixed-length vector syntax", "tree": {"sha": "d403258aa9f4b33b7695a08100ce5454d49584b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d403258aa9f4b33b7695a08100ce5454d49584b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/142dbd65da9ae168c198162f0e1eec1c960e91f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/142dbd65da9ae168c198162f0e1eec1c960e91f5", "html_url": "https://github.com/rust-lang/rust/commit/142dbd65da9ae168c198162f0e1eec1c960e91f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/142dbd65da9ae168c198162f0e1eec1c960e91f5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d4cc12d1f2b1c7b13d19ae88d123523e3e3964", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d4cc12d1f2b1c7b13d19ae88d123523e3e3964", "html_url": "https://github.com/rust-lang/rust/commit/46d4cc12d1f2b1c7b13d19ae88d123523e3e3964"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "3beb1add3eac9c09f8b65a39e96c25d890926ba5", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -38,12 +38,12 @@ struct MemoryRegion { priv opaque: () }\n #[cfg(target_arch=\"x86\")]\n #[cfg(target_arch=\"arm\")]\n struct Registers {\n-    data: [u32 * 16]\n+    data: [u32, ..16]\n }\n \n #[cfg(target_arch=\"mips\")]\n struct Registers {\n-    data: [u32 * 32]\n+    data: [u32, ..32]\n }\n \n #[cfg(target_arch=\"x86\")]\n@@ -52,12 +52,12 @@ struct Registers {\n struct Context {\n     regs: Registers,\n     next: *Context,\n-    pad: [u32 * 3]\n+    pad: [u32, ..3]\n }\n \n #[cfg(target_arch=\"x86_64\")]\n struct Registers {\n-    data: [u64 * 22]\n+    data: [u64, ..22]\n }\n \n #[cfg(target_arch=\"x86_64\")]\n@@ -80,7 +80,7 @@ struct Task {\n     // Public fields\n     refcount: intptr_t,                 // 0\n     id: TaskID,                         // 4\n-    pad: [u32 * 2],                     // 8\n+    pad: [u32, ..2],                    // 8\n     ctx: Context,                       // 16\n     stack_segment: *StackSegment,       // 96\n     runtime_sp: uintptr_t,              // 100"}, {"sha": "7b3b49b7ee908492009388832c83216d2bd9d31a", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -162,7 +162,7 @@ struct SipState {\n     mut v1: u64,\n     mut v2: u64,\n     mut v3: u64,\n-    mut tail: [u8 * 8], // unprocessed bytes\n+    mut tail: [u8, ..8], // unprocessed bytes\n     mut ntail: uint,  // how many bytes in tail are valid\n }\n \n@@ -369,7 +369,7 @@ impl Streaming for SipState {\n \n #[test]\n pub fn test_siphash() {\n-    let vecs : [[u8 * 8] * 64] = [\n+    let vecs : [[u8, ..8], ..64] = [\n         [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n         [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n         [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n@@ -443,7 +443,7 @@ pub fn test_siphash() {\n     let stream_inc = &State(k0,k1);\n     let stream_full = &State(k0,k1);\n \n-    fn to_hex_str(r:  &[u8 * 8]) -> ~str {\n+    fn to_hex_str(r:  &[u8, ..8]) -> ~str {\n         let mut s = ~\"\";\n         for vec::each(*r) |b| {\n             s += uint::to_str_radix(*b as uint, 16u);"}, {"sha": "084437354fba49fac90d3f95513ee0aa7e5c101f", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -342,7 +342,7 @@ pub mod types {\n                     st_mtime_nsec: c_long,\n                     st_ctime: time_t,\n                     st_ctime_nsec: c_long,\n-                    __unused: [c_long * 3],\n+                    __unused: [c_long, ..3],\n                 }\n             }\n             pub mod posix08 {\n@@ -430,7 +430,7 @@ pub mod types {\n                     st_lspare: int32_t,\n                     st_birthtime: time_t,\n                     st_birthtime_nsec: c_long,\n-                    __unused: [uint8_t * 2],\n+                    __unused: [uint8_t, ..2],\n                 }\n             }\n             pub mod posix08 {\n@@ -631,7 +631,7 @@ pub mod types {\n                     st_flags: uint32_t,\n                     st_gen: uint32_t,\n                     st_lspare: int32_t,\n-                    st_qspare: [int64_t * 2],\n+                    st_qspare: [int64_t, ..2],\n                 }\n             }\n             pub mod posix08 {\n@@ -712,7 +712,7 @@ pub mod types {\n                     st_flags: uint32_t,\n                     st_gen: uint32_t,\n                     st_lspare: int32_t,\n-                    st_qspare: [int64_t * 2],\n+                    st_qspare: [int64_t, ..2],\n                 }\n             }\n             pub mod posix08 {"}, {"sha": "5299203eb427367e4159c88a586282335ae44a51", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -132,10 +132,12 @@ impl_NumStrConv_Integer!(u64)\n \n \n // Special value strings as [u8] consts.\n-static inf_buf:          [u8*3] = ['i' as u8, 'n' as u8, 'f' as u8];\n-static positive_inf_buf: [u8*4] = ['+' as u8, 'i' as u8, 'n' as u8, 'f' as u8];\n-static negative_inf_buf: [u8*4] = ['-' as u8, 'i' as u8, 'n' as u8, 'f' as u8];\n-static nan_buf:          [u8*3] = ['N' as u8, 'a' as u8, 'N' as u8];\n+static inf_buf:          [u8, ..3] = ['i' as u8, 'n' as u8, 'f' as u8];\n+static positive_inf_buf: [u8, ..4] = ['+' as u8, 'i' as u8, 'n' as u8,\n+                                      'f' as u8];\n+static negative_inf_buf: [u8, ..4] = ['-' as u8, 'i' as u8, 'n' as u8,\n+                                      'f' as u8];\n+static nan_buf:          [u8, ..3] = ['N' as u8, 'a' as u8, 'N' as u8];\n \n /**\n  * Converts a number to its string representation as a byte vector."}, {"sha": "7237fe118d8b508f52e4037108eb013336813043", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -123,7 +123,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-type Registers = [uint * 22];\n+type Registers = [uint, ..22];\n \n #[cfg(target_arch = \"x86_64\")]\n fn new_regs() -> ~Registers { ~[0, .. 22] }\n@@ -157,7 +157,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n }\n \n #[cfg(target_arch = \"arm\")]\n-type Registers = [uint * 32];\n+type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"arm\")]\n fn new_regs() -> ~Registers { ~[0, .. 32] }\n@@ -175,7 +175,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n }\n \n #[cfg(target_arch = \"mips\")]\n-type Registers = [uint * 32];\n+type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"mips\")]\n fn new_regs() -> ~Registers { ~[0, .. 32] }"}, {"sha": "69991259cf29ea0d20c3ba58dc5b4c8ebc232595", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -194,7 +194,7 @@ pub mod tests {\n \n     #[test]\n     pub fn nonzero_size_of_basic() {\n-        type Z = [i8 * 0];\n+        type Z = [i8, ..0];\n         fail_unless!(size_of::<Z>() == 0u);\n         fail_unless!(nonzero_size_of::<Z>() == 1u);\n         fail_unless!(nonzero_size_of::<uint>() == size_of::<uint>());"}, {"sha": "4c4be33ea173079a5be16009463fcda2d15373f0", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -223,7 +223,7 @@ pub impl TrieSet {\n \n struct TrieNode<T> {\n     count: uint,\n-    children: [Child<T> * SIZE]\n+    children: [Child<T>, ..SIZE]\n }\n \n impl<T> TrieNode<T> {"}, {"sha": "256b4c4922e505efe429206ebe58f4de70fa60c3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -2636,7 +2636,7 @@ mod tests {\n \n     #[test]\n     fn test_len_divzero() {\n-        type Z = [i8 * 0];\n+        type Z = [i8, ..0];\n         let v0 : &[Z] = &[];\n         let v1 : &[Z] = &[[]];\n         let v2 : &[Z] = &[[], []];"}, {"sha": "031363469cd0ac6911660b10de9fac93621cf4f2", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -1201,11 +1201,11 @@ struct GraphNode {\n     span: span,\n     classification: Classification,\n     value: GraphNodeValue,\n-    head_edge: [uint * 2],\n+    head_edge: [uint, ..2],\n }\n \n struct GraphEdge {\n-    next_edge: [uint * 2],\n+    next_edge: [uint, ..2],\n     constraint: Constraint,\n     span: span,\n }"}, {"sha": "01a7cbfe604fadd51ee06cdc4cb70d81c8ad2d48", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -254,7 +254,7 @@ pub trait ByteChan {\n     fn send(&self, val: ~[u8]);\n }\n \n-static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+static CONTINUE: [u8, ..4] = [0xAA, 0xBB, 0xCC, 0xDD];\n \n impl<T,U:Unflattener<T>,P:BytePort> GenericPort<T> for FlatPort<T, U, P> {\n     fn recv(&self) -> T {\n@@ -921,7 +921,7 @@ mod test {\n         }\n \n         fn test_try_recv_none3<P:BytePort>(loader: PortLoader<P>) {\n-            static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+            static CONTINUE: [u8, ..4] = [0xAA, 0xBB, 0xCC, 0xDD];\n             // The control word is followed by garbage\n             let bytes = CONTINUE.to_vec() + ~[0];\n             let port = loader(bytes);\n@@ -940,7 +940,7 @@ mod test {\n \n         fn test_try_recv_none4<P:BytePort>(+loader: PortLoader<P>) {\n             fail_unless!(do task::try || {\n-                static CONTINUE: [u8 * 4] = [0xAA, 0xBB, 0xCC, 0xDD];\n+                static CONTINUE: [u8, ..4] = [0xAA, 0xBB, 0xCC, 0xDD];\n                 // The control word is followed by a valid length,\n                 // then undeserializable garbage\n                 let len_bytes = do io::u64_to_be_bytes("}, {"sha": "410ea975dd8bbe6dca20d1b4a6603354dc64aa80", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -251,7 +251,7 @@ pub struct Parser {\n     token: @mut token::Token,\n     span: @mut span,\n     last_span: @mut span,\n-    buffer: @mut [TokenAndSpan * 4],\n+    buffer: @mut [TokenAndSpan, ..4],\n     buffer_start: @mut int,\n     buffer_end: @mut int,\n     tokens_consumed: @mut uint,"}, {"sha": "d28382abaa386a35c7d8204ef5b12454ab6e7ba3", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -24,8 +24,8 @@ fn gradient(orig: Vec2, grad: Vec2, p: Vec2) -> f32 {\n }\n \n struct Noise2DContext {\n-    rgradients: [Vec2 * 256],\n-    permutations: [int * 256],\n+    rgradients: [Vec2, ..256],\n+    permutations: [int, ..256],\n }\n \n fn Noise2DContext() -> ~Noise2DContext {\n@@ -50,7 +50,7 @@ pub impl Noise2DContext {\n     }\n \n     #[inline(always)]\n-    fn get_gradients(&self, gradients: &mut [Vec2 * 4], origins: &mut [Vec2 * 4], x: f32, y: f32) {\n+    fn get_gradients(&self, gradients: &mut [Vec2, ..4], origins: &mut [Vec2, ..4], x: f32, y: f32) {\n         let x0f = f32::floor(x);\n         let y0f = f32::floor(y);\n         let x0 = x0f as int;"}, {"sha": "09c9e27d4dbfeefef07643b23328e301658fd01c", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -44,7 +44,7 @@ pub impl Sudoku {\n         return Sudoku { grid: g }\n     }\n \n-    pub fn from_vec(vec: &[[u8 * 9] * 9]) -> Sudoku {\n+    pub fn from_vec(vec: &[[u8, ..9], ..9]) -> Sudoku {\n         let mut g = do vec::from_fn(9u) |i| {\n             do vec::from_fn(9u) |j| { vec[i][j] }\n         };\n@@ -183,7 +183,7 @@ impl Colors {\n     }\n }\n \n-static default_sudoku: [[u8 * 9] * 9] = [\n+static default_sudoku: [[u8, ..9], ..9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [0u8, 4u8, 0u8, 6u8, 0u8, 0u8, 0u8, 3u8, 2u8],\n   /* 1 */  [0u8, 0u8, 8u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8],\n@@ -197,7 +197,7 @@ static default_sudoku: [[u8 * 9] * 9] = [\n ];\n \n #[cfg(test)]\n-static default_solution: [[u8 * 9] * 9] = [\n+static default_solution: [[u8, ..9], ..9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [1u8, 4u8, 9u8, 6u8, 7u8, 5u8, 8u8, 3u8, 2u8],\n   /* 1 */  [5u8, 3u8, 8u8, 1u8, 2u8, 9u8, 7u8, 4u8, 6u8],"}, {"sha": "875358ea1420131e2b0e8d30a3d31e8ca4636a1d", "filename": "src/test/compile-fail/const-cast-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-wrong-type.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n+static a: [u8, ..3] = ['h' as u8, 'i' as u8, 0 as u8];\n static b: *i8 = &a as *i8; //~ ERROR mismatched types\n \n fn main() {"}, {"sha": "f9c8ba01f1805cec3891e234f8b6f5e4de569d03", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -10,7 +10,7 @@\n \n fn wants_box(x: @[uint]) { }\n fn wants_uniq(x: ~[uint]) { }\n-fn wants_three(x: [uint * 3]) { }\n+fn wants_three(x: [uint, ..3]) { }\n \n fn has_box(x: @[uint]) {\n    wants_box(x);\n@@ -24,13 +24,13 @@ fn has_uniq(x: ~[uint]) {\n    wants_three(x); //~ ERROR [] storage differs: expected 3 but found ~\n }\n \n-fn has_three(x: [uint * 3]) {\n+fn has_three(x: [uint, ..3]) {\n    wants_box(x); //~ ERROR [] storage differs: expected @ but found 3\n    wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 3\n    wants_three(x);\n }\n \n-fn has_four(x: [uint * 4]) {\n+fn has_four(x: [uint, ..4]) {\n    wants_box(x); //~ ERROR [] storage differs: expected @ but found 4\n    wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 4\n    wants_three(x); //~ ERROR [] storage differs: expected 3 but found 4"}, {"sha": "23cfeecc520e708d2eadaae34c4abfda41d07000", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -1,6 +1,6 @@\n fn bar(int_param: int) {}\n \n fn main() {\n-     let foo: [u8 * 4] = [1u8, ..4u8];\n+     let foo: [u8, ..4] = [1u8, ..4u8];\n      bar(foo); //~ ERROR mismatched types: expected `int` but found `[u8 * 4]` (expected int but found vector)\n }"}, {"sha": "572b961b2f884d609065bc7df1b3803954f6966e", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A: [u8 * 1] = ['h' as u8];\n+static A: [u8, ..1] = ['h' as u8];\n static B: u8 = (&A)[0];\n-static C: &'static &'static &'static &'static [u8 * 1] = & & & &A;\n+static C: &'static &'static &'static &'static [u8, ..1] = & & & &A;\n static D: u8 = (&C)[0];\n \n pub fn main() {"}, {"sha": "0e92694dde8ac671ec4d36fb7acd73ad82308cf2", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-static C: [E * 3] = [V0, V1(0xDEADBEE), V0];\n+static C: [E, ..3] = [V0, V1(0xDEADBEE), V0];\n \n pub fn main() {\n     match C[1] {"}, {"sha": "dc97c582219830f803f6c47895db751fdb5af85a", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -14,6 +14,6 @@\n fn main() {\n \n     static FOO: int = 2;\n-    let _v: [int * FOO*3];\n+    let _v: [int, ..FOO*3];\n \n }"}, {"sha": "658b39509bfbbce4f62a31c4846a6533ccc8c0b8", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static x : [int * 4] = [1,2,3,4];\n+static x : [int, ..4] = [1,2,3,4];\n static p : int = x[2];\n static y : &'static [int] = &[1,2,3,4];\n static q : int = y[2];"}, {"sha": "46f9fdb08217b8977789b738302d17e542f5a4fe", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Big = [u64 * 8];\n+type Big = [u64, ..8];\n struct Pair { a: int, b: &'self Big }\n static x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n static y: &'static Pair<'static> = &Pair {a: 15, b: x};"}, {"sha": "1f40c57d851b3bdd8fbdf7acda4d9dd5d5fd7312", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: [u8 * 3] = ['h' as u8, 'i' as u8, 0 as u8];\n-static c: &'static [u8 * 3] = &a;\n+static a: [u8, ..3] = ['h' as u8, 'i' as u8, 0 as u8];\n+static c: &'static [u8, ..3] = &a;\n static b: *u8 = c as *u8;\n \n fn main() {"}, {"sha": "f99f2c17ca5df639ab87c8b0aecd20daf648ea65", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static x : [int * 4] = [1,2,3,4];\n+static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n \n pub fn main() {"}, {"sha": "ec5c5f01e1597fcc582726600a381911cd711f2b", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x : [@int * 5] = [@1,@2,@3,@4,@5];\n-    let _y : [@int * 5] = [@1,@2,@3,@4,@5];\n+    let x : [@int, ..5] = [@1,@2,@3,@4,@5];\n+    let _y : [@int, ..5] = [@1,@2,@3,@4,@5];\n     let mut z = [@1,@2,@3,@4,@5];\n     z = x;\n     fail_unless!(*z[0] == 1);"}, {"sha": "1c23d5ac810a7eb9a8568f73a1b5500bfa05b3ef", "filename": "src/test/run-pass/evec-internal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -14,16 +14,16 @@\n // Doesn't work; needs a design decision.\n \n pub fn main() {\n-    let x : [int * 5] = [1,2,3,4,5];\n-    let _y : [int * 5] = [1,2,3,4,5];\n+    let x : [int, ..5] = [1,2,3,4,5];\n+    let _y : [int, ..5] = [1,2,3,4,5];\n     let mut z = [1,2,3,4,5];\n     z = x;\n     fail_unless!(z[0] == 1);\n     fail_unless!(z[4] == 5);\n \n-    let a : [int * 5] = [1,1,1,1,1];\n-    let b : [int * 5] = [2,2,2,2,2];\n-    let c : [int * 5] = [2,2,2,2,3];\n+    let a : [int, ..5] = [1,1,1,1,1];\n+    let b : [int, ..5] = [2,2,2,2,2];\n+    let c : [int, ..5] = [2,2,2,2,3];\n \n     log(debug, a);\n "}, {"sha": "a8752f444bfd8ff9a7a3deafe09744c4c6c84a21", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Struc { a: u8, b: [int * 3], c: int }\n+struct Struc { a: u8, b: [int, ..3], c: int }\n \n pub fn main() {\n     let arr = [1,2,3];"}, {"sha": "b59810fc18875df0782029b7c1c1c54e0813812f", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -16,7 +16,7 @@\n use core::libc::*;\n \n struct KEYGEN {\n-    hash_algorithm: [c_uint * 2],\n+    hash_algorithm: [c_uint, ..2],\n     count: uint32_t,\n     salt: *c_void,\n     salt_size: uint32_t,"}, {"sha": "982515b61219fc586836a1fea15417ec5b6ecd13", "filename": "src/test/run-pass/region-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -14,7 +14,7 @@ struct A {\n \n struct B {\n     v1: int,\n-    v2: [int * 3],\n+    v2: [int, ..3],\n     v3: ~[int],\n     v4: C,\n     v5: ~C,"}, {"sha": "5ce1b04dbe9a06fc0e56e52c247508fc0dbc6b6d", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/142dbd65da9ae168c198162f0e1eec1c960e91f5/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=142dbd65da9ae168c198162f0e1eec1c960e91f5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x: [int*4] = [1, 2, 3, 4];\n+    let x: [int, ..4] = [1, 2, 3, 4];\n     io::println(fmt!(\"%d\", x[0]));\n }\n "}]}