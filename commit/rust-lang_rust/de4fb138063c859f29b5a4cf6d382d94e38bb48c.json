{"sha": "de4fb138063c859f29b5a4cf6d382d94e38bb48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNGZiMTM4MDYzYzg1OWYyOWI1YTRjZjZkMzgyZDk0ZTM4YmI0OGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-24T14:08:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-24T14:08:46Z"}, "message": "Merge #6061\n\n6061: Allow to use a Github Auth token for fetching releases r=matklad a=Matthias247\n\nThis change allows to use a authorization token provided by Github in\r\norder to fetch metadata for a RA release. Using an authorization token\r\nprevents to get rate-limited in environments where lots of RA users use\r\na shared client IP (e.g. behind a company NAT).\r\n\r\nThe auth token is stored in `ExtensionContext.globalState`.\r\nAs far as I could observe through testing with a local WSL2 environment\r\nthat state is synced between an extension installed locally and a remote\r\nversion.\r\n\r\nThe change provides no explicit command to query for an auth token.\r\nHowever in case a download fails it will provide a retry option as well\r\nas an option to enter the auth token. This should be more discoverable\r\nfor most users.\r\n\r\nCloses #3688\n\nCo-authored-by: Matthias Einwag <matthias.einwag@live.com>", "tree": {"sha": "e5e605708e31a23983cbbe273bc8a6a72cb6d179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e605708e31a23983cbbe273bc8a6a72cb6d179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4fb138063c859f29b5a4cf6d382d94e38bb48c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbKhuCRBK7hj4Ov3rIwAAdHIIACZNv+az6rgmuOzuEdzhv4lh\n4gUvSoMRFQ1m7Se2Up9o6u49PHoGUbuGmZt6LJN/tnHgaEhJ51umcRsf9zhfcy9V\nbiRLNZLjsCpT8ohfusWt8bjOoTOuLCP9/WGNh/QBNya+JNZEkhWMzgwWbGEZ1KSm\nqQHQ6YUGyTBl4t5JjkF6GfqCh2UT4R7E9Q4m2tAaZNGyVIBeUQ9lk+sKoEjywY5o\n80fP5YpCDOQXw70A45h/QuJ8DuBUaiqbWcRVMgJC2akwW8PlH/cOpQKzOfPCKprO\n+AOLBkwEOpyJTzAMABJZ/hJ4cb1cD0fqPgjYaVDYmTWEFhSslEMWT84cpeZO3BA=\n=9Bml\n-----END PGP SIGNATURE-----\n", "payload": "tree e5e605708e31a23983cbbe273bc8a6a72cb6d179\nparent 9d3483a74dba6b0a338230fd003d91a0447c5398\nparent 8eae893c767941bf02338cd74d7b103437783013\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600956526 +0000\ncommitter GitHub <noreply@github.com> 1600956526 +0000\n\nMerge #6061\n\n6061: Allow to use a Github Auth token for fetching releases r=matklad a=Matthias247\n\nThis change allows to use a authorization token provided by Github in\r\norder to fetch metadata for a RA release. Using an authorization token\r\nprevents to get rate-limited in environments where lots of RA users use\r\na shared client IP (e.g. behind a company NAT).\r\n\r\nThe auth token is stored in `ExtensionContext.globalState`.\r\nAs far as I could observe through testing with a local WSL2 environment\r\nthat state is synced between an extension installed locally and a remote\r\nversion.\r\n\r\nThe change provides no explicit command to query for an auth token.\r\nHowever in case a download fails it will provide a retry option as well\r\nas an option to enter the auth token. This should be more discoverable\r\nfor most users.\r\n\r\nCloses #3688\n\nCo-authored-by: Matthias Einwag <matthias.einwag@live.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4fb138063c859f29b5a4cf6d382d94e38bb48c", "html_url": "https://github.com/rust-lang/rust/commit/de4fb138063c859f29b5a4cf6d382d94e38bb48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4fb138063c859f29b5a4cf6d382d94e38bb48c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3483a74dba6b0a338230fd003d91a0447c5398", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3483a74dba6b0a338230fd003d91a0447c5398", "html_url": "https://github.com/rust-lang/rust/commit/9d3483a74dba6b0a338230fd003d91a0447c5398"}, {"sha": "8eae893c767941bf02338cd74d7b103437783013", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eae893c767941bf02338cd74d7b103437783013", "html_url": "https://github.com/rust-lang/rust/commit/8eae893c767941bf02338cd74d7b103437783013"}], "stats": {"total": 136, "additions": 117, "deletions": 19}, "files": [{"sha": "13266492662fa5b90b4ef9511ceade4c9c70eaeb", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=de4fb138063c859f29b5a4cf6d382d94e38bb48c", "patch": "@@ -158,6 +158,11 @@\n                 \"title\": \"Restart server\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.updateGithubToken\",\n+                \"title\": \"Update Github API token\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.onEnter\",\n                 \"title\": \"Enhanced enter key\",\n@@ -984,6 +989,10 @@\n                     \"command\": \"rust-analyzer.reload\",\n                     \"when\": \"inRustProject\"\n                 },\n+                {\n+                    \"command\": \"rust-analyzer.updateGithubToken\",\n+                    \"when\": \"inRustProject\"\n+                },\n                 {\n                     \"command\": \"rust-analyzer.onEnter\",\n                     \"when\": \"inRustProject\""}, {"sha": "2896d90ac94b4873bafdb9c522f3503571ea2ef0", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 81, "deletions": 17, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=de4fb138063c859f29b5a4cf6d382d94e38bb48c", "patch": "@@ -95,6 +95,10 @@ async function tryActivate(context: vscode.ExtensionContext) {\n         await activate(context).catch(log.error);\n     });\n \n+    ctx.registerCommand('updateGithubToken', ctx => async () => {\n+        await queryForGithubToken(new PersistentState(ctx.globalState));\n+    });\n+\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('memoryUsage', commands.memoryUsage);\n     ctx.registerCommand('reloadWorkspace', commands.reloadWorkspace);\n@@ -173,7 +177,9 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         if (!shouldCheckForNewNightly) return;\n     }\n \n-    const release = await fetchRelease(\"nightly\").catch((e) => {\n+    const release = await downloadWithRetryDialog(state, async () => {\n+        return await fetchRelease(\"nightly\", state.githubToken);\n+    }).catch((e) => {\n         log.error(e);\n         if (state.releaseId === undefined) { // Show error only for the initial download\n             vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n@@ -192,10 +198,14 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n-    await download({\n-        url: artifact.browser_download_url,\n-        dest,\n-        progressTitle: \"Downloading rust-analyzer extension\",\n+\n+    await downloadWithRetryDialog(state, async () => {\n+        await download({\n+            url: artifact.browser_download_url,\n+            dest,\n+            progressTitle: \"Downloading rust-analyzer extension\",\n+            overwrite: true,\n+        });\n     });\n \n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n@@ -308,21 +318,22 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         if (userResponse !== \"Download now\") return dest;\n     }\n \n-    const release = await fetchRelease(config.package.releaseTag);\n+    const releaseTag = config.package.releaseTag;\n+    const release = await downloadWithRetryDialog(state, async () => {\n+        return await fetchRelease(releaseTag, state.githubToken);\n+    });\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n-    // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n-    await fs.unlink(dest).catch(err => {\n-        if (err.code !== \"ENOENT\") throw err;\n-    });\n-\n-    await download({\n-        url: artifact.browser_download_url,\n-        dest,\n-        progressTitle: \"Downloading rust-analyzer server\",\n-        gunzip: true,\n-        mode: 0o755\n+    await downloadWithRetryDialog(state, async () => {\n+        await download({\n+            url: artifact.browser_download_url,\n+            dest,\n+            progressTitle: \"Downloading rust-analyzer server\",\n+            gunzip: true,\n+            mode: 0o755,\n+            overwrite: true,\n+        });\n     });\n \n     // Patching executable if that's NixOS.\n@@ -333,3 +344,56 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     await state.updateServerVersion(config.package.version);\n     return dest;\n }\n+\n+async function downloadWithRetryDialog<T>(state: PersistentState, downloadFunc: () => Promise<T>): Promise<T> {\n+    while (true) {\n+        try {\n+            return await downloadFunc();\n+        } catch (e) {\n+            const selected = await vscode.window.showErrorMessage(\"Failed to download: \" + e.message, {}, {\n+                title: \"Update Github Auth Token\",\n+                updateToken: true,\n+            }, {\n+                title: \"Retry download\",\n+                retry: true,\n+            }, {\n+                title: \"Dismiss\",\n+            });\n+\n+            if (selected?.updateToken) {\n+                await queryForGithubToken(state);\n+                continue;\n+            } else if (selected?.retry) {\n+                continue;\n+            }\n+            throw e;\n+        };\n+    }\n+}\n+\n+async function queryForGithubToken(state: PersistentState): Promise<void> {\n+    const githubTokenOptions: vscode.InputBoxOptions = {\n+        value: state.githubToken,\n+        password: true,\n+        prompt: `\n+            This dialog allows to store a Github authorization token.\n+            The usage of an authorization token will increase the rate\n+            limit on the use of Github APIs and can thereby prevent getting\n+            throttled.\n+            Auth tokens can be created at https://github.com/settings/tokens`,\n+    };\n+\n+    const newToken = await vscode.window.showInputBox(githubTokenOptions);\n+    if (newToken === undefined) {\n+        // The user aborted the dialog => Do not update the stored token\n+        return;\n+    }\n+\n+    if (newToken === \"\") {\n+        log.info(\"Clearing github token\");\n+        await state.updateGithubToken(undefined);\n+    } else {\n+        log.info(\"Storing new github token\");\n+        await state.updateGithubToken(newToken);\n+    }\n+}"}, {"sha": "9ba17b7b5dba2ffe5802aad95968652fa2902fa5", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=de4fb138063c859f29b5a4cf6d382d94e38bb48c", "patch": "@@ -18,7 +18,8 @@ const OWNER = \"rust-analyzer\";\n const REPO = \"rust-analyzer\";\n \n export async function fetchRelease(\n-    releaseTag: string\n+    releaseTag: string,\n+    githubToken: string | null | undefined,\n ): Promise<GithubRelease> {\n \n     const apiEndpointPath = `/repos/${OWNER}/${REPO}/releases/tags/${releaseTag}`;\n@@ -27,7 +28,12 @@ export async function fetchRelease(\n \n     log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n-    const response = await fetch(requestUrl, { headers: { Accept: \"application/vnd.github.v3+json\" } });\n+    const headers: Record<string, string> = { Accept: \"application/vnd.github.v3+json\" };\n+    if (githubToken != null) {\n+        headers.Authorization = \"token \" + githubToken;\n+    }\n+\n+    const response = await fetch(requestUrl, { headers: headers });\n \n     if (!response.ok) {\n         log.error(\"Error fetching artifact release info\", {\n@@ -70,6 +76,7 @@ interface DownloadOpts {\n     dest: string;\n     mode?: number;\n     gunzip?: boolean;\n+    overwrite?: boolean;\n }\n \n export async function download(opts: DownloadOpts) {\n@@ -79,6 +86,13 @@ export async function download(opts: DownloadOpts) {\n     const randomHex = crypto.randomBytes(5).toString(\"hex\");\n     const tempFile = path.join(dest.dir, `${dest.name}${randomHex}`);\n \n+    if (opts.overwrite) {\n+        // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n+        await fs.promises.unlink(opts.dest).catch(err => {\n+            if (err.code !== \"ENOENT\") throw err;\n+        });\n+    }\n+\n     await vscode.window.withProgress(\n         {\n             location: vscode.ProgressLocation.Notification,"}, {"sha": "afb6525899170a22889d59ad049cef8efee857f9", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/de4fb138063c859f29b5a4cf6d382d94e38bb48c/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=de4fb138063c859f29b5a4cf6d382d94e38bb48c", "patch": "@@ -38,4 +38,15 @@ export class PersistentState {\n     async updateServerVersion(value: string | undefined) {\n         await this.globalState.update(\"serverVersion\", value);\n     }\n+\n+    /**\n+     * Github authorization token.\n+     * This is used for API requests against the Github API.\n+     */\n+    get githubToken(): string | undefined {\n+        return this.globalState.get(\"githubToken\");\n+    }\n+    async updateGithubToken(value: string | undefined) {\n+        await this.globalState.update(\"githubToken\", value);\n+    }\n }"}]}