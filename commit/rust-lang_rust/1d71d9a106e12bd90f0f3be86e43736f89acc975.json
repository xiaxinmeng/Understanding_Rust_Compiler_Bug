{"sha": "1d71d9a106e12bd90f0f3be86e43736f89acc975", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNzFkOWExMDZlMTJiZDkwZjBmM2JlODZlNDM3MzZmODlhY2M5NzU=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-05T10:08:25Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-05T10:10:29Z"}, "message": "Fix dogfood errors in clippy_lints", "tree": {"sha": "dd1c142d5409a03a99d063c331af78d670d8d934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd1c142d5409a03a99d063c331af78d670d8d934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d71d9a106e12bd90f0f3be86e43736f89acc975", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmBCA5UACgkQHKDfKvWd\naKX8aA//TZZHg+7YQDciyqSEldN6+icjQoYDBG1L+kA2EPwo5xXwEc7JQvW5Zl4m\neUSECAJgDQ/VTR8lNHmNaNNJqJJFloS3Fiu3jf8WOrO2MKiUcsHkEo61E4C9+d36\nP+E1B6T/4yLexPDDyOk19QC5f9Z8+v1rz1BEvEB3h2mej2VG1KR1Xsm0MosgdT2B\nWpsGiwdM8hZP7B+AGzoqNT3YUzCx0CniEpyCcXRqaGNsxUYBGrMSWaJ/xixEbw6d\nArEzTwojOmTuEJ+0MS69Y9TR9NcEeykdeATw/7Pqkf6F/BMSfUuxxgL2HNCcNKD6\nDU6Vw2pDDzoLPKXufiX5uECqa0hyFRXyVpbIiyPVkD9bK1GpHlZG3vyMt6ESv4QD\nZPGzH+8MW2G6M0uS449UfjAr38sW0+wDeO7ssjIC08SUyVCiWULSVfkm+RHzZ9Es\nKxDkQ9xLZfNJhx8TUMK2CaQZWN311WunXDwz7yVywZKVS8/HAVrhMF6t1cLMQ1tC\n9rcIZLjbobnnVytvEfzVJl8wJwUtLSqBX1mX8Yaq/dqx4poZTccPkUWkJrz8Hd57\nsOuP+0n3P95O2dUmCtaIavC8X1nLlWZlY7+h94uVIhLYAikIor8B9JBP//cYXs7l\nz/HFbrl/LZFUhAn9aZTr7t5rrIX01LhvuJ0qOQYaMFod+Xu8hmY=\n=f8Ym\n-----END PGP SIGNATURE-----", "payload": "tree dd1c142d5409a03a99d063c331af78d670d8d934\nparent 3c502ec8a50177ea05b6de233bfe2420c4b08c15\nauthor flip1995 <philipp.krones@embecosm.com> 1614938905 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1614939029 +0100\n\nFix dogfood errors in clippy_lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d71d9a106e12bd90f0f3be86e43736f89acc975", "html_url": "https://github.com/rust-lang/rust/commit/1d71d9a106e12bd90f0f3be86e43736f89acc975", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d71d9a106e12bd90f0f3be86e43736f89acc975/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c502ec8a50177ea05b6de233bfe2420c4b08c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c502ec8a50177ea05b6de233bfe2420c4b08c15", "html_url": "https://github.com/rust-lang/rust/commit/3c502ec8a50177ea05b6de233bfe2420c4b08c15"}], "stats": {"total": 159, "additions": 77, "deletions": 82}, "files": [{"sha": "29d2450618a7e7ef5b3c7554b2cd35e7aa513bc5", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=1d71d9a106e12bd90f0f3be86e43736f89acc975", "patch": "@@ -17,28 +17,26 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n-            {\n-                span_lint_and_then(\n-                    cx,\n-                    TRANSMUTE_INT_TO_CHAR,\n-                    e.span,\n-                    &format!(\"transmute from a `{}` to a `char`\", from_ty),\n-                    |diag| {\n-                        let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                        let arg = if let ty::Int(_) = from_ty.kind() {\n-                            arg.as_ty(ast::UintTy::U32.name_str())\n-                        } else {\n-                            arg\n-                        };\n-                        diag.span_suggestion(\n-                            e.span,\n-                            \"consider using\",\n-                            format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n-                            Applicability::Unspecified,\n-                        );\n-                    },\n-                )\n-            };\n+            span_lint_and_then(\n+                cx,\n+                TRANSMUTE_INT_TO_CHAR,\n+                e.span,\n+                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                |diag| {\n+                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = if let ty::Int(_) = from_ty.kind() {\n+                        arg.as_ty(ast::UintTy::U32.name_str())\n+                    } else {\n+                        arg\n+                    };\n+                    diag.span_suggestion(\n+                        e.span,\n+                        \"consider using\",\n+                        format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n+                        Applicability::Unspecified,\n+                    );\n+                },\n+            );\n             true\n         },\n         _ => false,"}, {"sha": "f5dbbbe33bc640e5e1ca474875d1a92cacc1498d", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=1d71d9a106e12bd90f0f3be86e43736f89acc975", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     qpath: &'tcx QPath<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::RawPtr(from_pty), ty::Ref(_, to_ref_ty, mutbl)) => {\n+        (ty::RawPtr(from_ptr_ty), ty::Ref(_, to_ref_ty, mutbl)) => {\n             span_lint_and_then(\n                 cx,\n                 TRANSMUTE_PTR_TO_REF,\n@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                         (\"&*\", \"*const\")\n                     };\n \n-                    let arg = if from_pty.ty == *to_ref_ty {\n+                    let arg = if from_ptr_ty.ty == *to_ref_ty {\n                         arg\n                     } else {\n                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))"}, {"sha": "01b00bb0a222998c1df3ce3b6f29c62ce04ffcab", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=1d71d9a106e12bd90f0f3be86e43736f89acc975", "patch": "@@ -18,70 +18,67 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     let mut triggered = false;\n \n-    match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n-            if_chain! {\n-                if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n-                if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n-                if from_mutbl == to_mutbl;\n-                then {\n-                    let postfix = if *from_mutbl == Mutability::Mut {\n-                        \"_mut\"\n-                    } else {\n-                        \"\"\n-                    };\n+    if let (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) = (&from_ty.kind(), &to_ty.kind()) {\n+        if_chain! {\n+            if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n+            if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n+            if from_mutbl == to_mutbl;\n+            then {\n+                let postfix = if *from_mutbl == Mutability::Mut {\n+                    \"_mut\"\n+                } else {\n+                    \"\"\n+                };\n \n-                    span_lint_and_sugg(\n+                span_lint_and_sugg(\n+                    cx,\n+                    TRANSMUTE_BYTES_TO_STR,\n+                    e.span,\n+                    &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                    \"consider using\",\n+                    format!(\n+                        \"std::str::from_utf8{}({}).unwrap()\",\n+                        postfix,\n+                        snippet(cx, args[0].span, \"..\"),\n+                    ),\n+                    Applicability::Unspecified,\n+                );\n+                triggered = true;\n+            } else {\n+                if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n+                    && !const_context {\n+                    span_lint_and_then(\n                         cx,\n-                        TRANSMUTE_BYTES_TO_STR,\n+                        TRANSMUTE_PTR_TO_PTR,\n                         e.span,\n-                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                        \"consider using\",\n-                        format!(\n-                            \"std::str::from_utf8{}({}).unwrap()\",\n-                            postfix,\n-                            snippet(cx, args[0].span, \"..\"),\n-                        ),\n-                        Applicability::Unspecified,\n+                        \"transmute from a reference to a reference\",\n+                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                            let ty_from_and_mut = ty::TypeAndMut {\n+                                ty: ty_from,\n+                                mutbl: *from_mutbl\n+                            };\n+                            let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n+                            let sugg_paren = arg\n+                                .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n+                                .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n+                            let sugg = if *to_mutbl == Mutability::Mut {\n+                                sugg_paren.mut_addr_deref()\n+                            } else {\n+                                sugg_paren.addr_deref()\n+                            };\n+                            diag.span_suggestion(\n+                                e.span,\n+                                \"try\",\n+                                sugg.to_string(),\n+                                Applicability::Unspecified,\n+                            );\n+                        },\n                     );\n-                    triggered = true;\n-                } else {\n-                    if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n-                        && !const_context {\n-                        span_lint_and_then(\n-                            cx,\n-                            TRANSMUTE_PTR_TO_PTR,\n-                            e.span,\n-                            \"transmute from a reference to a reference\",\n-                            |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let ty_from_and_mut = ty::TypeAndMut {\n-                                    ty: ty_from,\n-                                    mutbl: *from_mutbl\n-                                };\n-                                let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n-                                let sugg_paren = arg\n-                                    .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n-                                    .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                let sugg = if *to_mutbl == Mutability::Mut {\n-                                    sugg_paren.mut_addr_deref()\n-                                } else {\n-                                    sugg_paren.addr_deref()\n-                                };\n-                                diag.span_suggestion(\n-                                    e.span,\n-                                    \"try\",\n-                                    sugg.to_string(),\n-                                    Applicability::Unspecified,\n-                                );\n-                            },\n-                        );\n \n-                        triggered = true;\n-                    }\n+                    triggered = true;\n                 }\n             }\n-        },\n-        _ => {},\n+        }\n     }\n \n     triggered"}, {"sha": "f0523cec6211d7a8eb74a5dec59288a4421a3663", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d71d9a106e12bd90f0f3be86e43736f89acc975/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=1d71d9a106e12bd90f0f3be86e43736f89acc975", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             let hir = cx.tcx.hir();\n             let id = hir.get_parent_node(hir_ty.hir_id);\n \n-            if !hir.opt_span(id).map(in_macro).unwrap_or(false) {\n+            if !hir.opt_span(id).map_or(false, in_macro) {\n                 match hir.find(id) {\n                     Some(Node::Expr(Expr {\n                         kind: ExprKind::Path(QPath::TypeRelative(_, segment)),"}]}