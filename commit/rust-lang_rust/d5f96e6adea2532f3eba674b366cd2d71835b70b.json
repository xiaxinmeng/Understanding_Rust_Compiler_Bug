{"sha": "d5f96e6adea2532f3eba674b366cd2d71835b70b", "node_id": "C_kwDOAAsO6NoAKGQ1Zjk2ZTZhZGVhMjUzMmYzZWJhNjc0YjM2NmNkMmQ3MTgzNWI3MGI", "commit": {"author": {"name": "Raekye", "email": "Raekye@users.noreply.github.com", "date": "2022-04-16T01:21:02Z"}, "committer": {"name": "Raekye", "email": "Raekye@users.noreply.github.com", "date": "2022-04-16T01:21:02Z"}, "message": "Change `as_uninit_*` methods on `NonNull` from taking `self` by\nreference to taking `self` by value. This is consistent with the methods\nof the same names on primitive pointers. The returned lifetime was\nalready previously unbounded.", "tree": {"sha": "889b780f50cc954eb22c07e406441652767a4d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889b780f50cc954eb22c07e406441652767a4d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f96e6adea2532f3eba674b366cd2d71835b70b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f96e6adea2532f3eba674b366cd2d71835b70b", "html_url": "https://github.com/rust-lang/rust/commit/d5f96e6adea2532f3eba674b366cd2d71835b70b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f96e6adea2532f3eba674b366cd2d71835b70b/comments", "author": {"login": "Raekye", "id": 4921931, "node_id": "MDQ6VXNlcjQ5MjE5MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4921931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Raekye", "html_url": "https://github.com/Raekye", "followers_url": "https://api.github.com/users/Raekye/followers", "following_url": "https://api.github.com/users/Raekye/following{/other_user}", "gists_url": "https://api.github.com/users/Raekye/gists{/gist_id}", "starred_url": "https://api.github.com/users/Raekye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Raekye/subscriptions", "organizations_url": "https://api.github.com/users/Raekye/orgs", "repos_url": "https://api.github.com/users/Raekye/repos", "events_url": "https://api.github.com/users/Raekye/events{/privacy}", "received_events_url": "https://api.github.com/users/Raekye/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Raekye", "id": 4921931, "node_id": "MDQ6VXNlcjQ5MjE5MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4921931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Raekye", "html_url": "https://github.com/Raekye", "followers_url": "https://api.github.com/users/Raekye/followers", "following_url": "https://api.github.com/users/Raekye/following{/other_user}", "gists_url": "https://api.github.com/users/Raekye/gists{/gist_id}", "starred_url": "https://api.github.com/users/Raekye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Raekye/subscriptions", "organizations_url": "https://api.github.com/users/Raekye/orgs", "repos_url": "https://api.github.com/users/Raekye/repos", "events_url": "https://api.github.com/users/Raekye/events{/privacy}", "received_events_url": "https://api.github.com/users/Raekye/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f391b84552f210adec7893b50c5da74f9362ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f391b84552f210adec7893b50c5da74f9362ae4", "html_url": "https://github.com/rust-lang/rust/commit/3f391b84552f210adec7893b50c5da74f9362ae4"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2618cef36087732a24a487911f4fbecfe3ce0218", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5f96e6adea2532f3eba674b366cd2d71835b70b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f96e6adea2532f3eba674b366cd2d71835b70b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=d5f96e6adea2532f3eba674b366cd2d71835b70b", "patch": "@@ -124,7 +124,7 @@ impl<T: Sized> NonNull<T> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.cast().as_ptr() }\n@@ -158,7 +158,7 @@ impl<T: Sized> NonNull<T> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n+    pub const unsafe fn as_uninit_mut<'a>(self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &mut *self.cast().as_ptr() }\n@@ -592,7 +592,7 @@ impl<T> NonNull<[T]> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n         unsafe { slice::from_raw_parts(self.cast().as_ptr(), self.len()) }\n     }\n@@ -655,7 +655,7 @@ impl<T> NonNull<[T]> {\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n-    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n+    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`.\n         unsafe { slice::from_raw_parts_mut(self.cast().as_ptr(), self.len()) }\n     }"}]}