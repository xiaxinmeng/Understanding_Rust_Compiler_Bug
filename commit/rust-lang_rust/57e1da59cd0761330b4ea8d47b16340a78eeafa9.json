{"sha": "57e1da59cd0761330b4ea8d47b16340a78eeafa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTFkYTU5Y2QwNzYxMzMwYjRlYThkNDdiMTYzNDBhNzhlZWFmYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T00:28:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-19T00:28:33Z"}, "message": "Auto merge of #70118 - pietroalbini:rollup-pgjc90i, r=pietroalbini\n\nRollup of 2 pull requests\n\nSuccessful merges:\n\n - #70112 (Rollup of 10 pull requests)\n - #70116 (ci: use python from the correct path)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0dc41b23dbe3fda1dbc8e69548e7060adcea0fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dc41b23dbe3fda1dbc8e69548e7060adcea0fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e1da59cd0761330b4ea8d47b16340a78eeafa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e1da59cd0761330b4ea8d47b16340a78eeafa9", "html_url": "https://github.com/rust-lang/rust/commit/57e1da59cd0761330b4ea8d47b16340a78eeafa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e1da59cd0761330b4ea8d47b16340a78eeafa9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f509b26a7730d721ef87423a72b3fdf8724b4afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f509b26a7730d721ef87423a72b3fdf8724b4afa", "html_url": "https://github.com/rust-lang/rust/commit/f509b26a7730d721ef87423a72b3fdf8724b4afa"}, {"sha": "94ed0719f7ab083e4c94651a608ae49e14653e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ed0719f7ab083e4c94651a608ae49e14653e6a", "html_url": "https://github.com/rust-lang/rust/commit/94ed0719f7ab083e4c94651a608ae49e14653e6a"}], "stats": {"total": 3866, "additions": 2027, "deletions": 1839}, "files": [{"sha": "99bcfd7c7ccc11d6f63ce8c02bffb7d76437eb94", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3624,6 +3624,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_metadata\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n ]\n@@ -3677,6 +3678,7 @@ dependencies = [\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3791,6 +3793,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3903,6 +3906,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3933,6 +3937,7 @@ dependencies = [\n  \"rustc_infer\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n@@ -4013,6 +4018,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n+ \"rustc_session\",\n  \"rustc_span\",\n ]\n \n@@ -4027,6 +4033,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_typeck\",\n ]\n@@ -4068,6 +4075,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"serde_json\",\n ]\n@@ -4174,6 +4182,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_infer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n@@ -4193,6 +4202,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\","}, {"sha": "1616ae15d31d6abc45025c6c4ecd91eaf6cf63b3", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -37,6 +37,9 @@ struct RustfmtConfig {\n }\n \n pub fn format(build: &Build, check: bool) {\n+    if build.config.dry_run {\n+        return;\n+    }\n     let mut builder = ignore::types::TypesBuilder::new();\n     builder.add_defaults();\n     builder.select(\"rust\");"}, {"sha": "22b9854ad5eb4e5c15b7b0135388db89ebde44ee", "filename": "src/ci/scripts/install-msys2-packages.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2-packages.sh?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -13,6 +13,7 @@ if isWindows; then\n     # one way or another. The msys interpreters seem to have weird path conversions\n     # baked in which break LLVM's build system one way or another, so let's use the\n     # native version which keeps everything as native as possible.\n-    cp C:/Python27amd64/python.exe C:/Python27amd64/python2.7.exe\n-    ciCommandAddPath \"C:\\\\Python27amd64\"\n+    python_home=\"C:/hostedtoolcache/windows/Python/2.7.17/x64\"\n+    cp \"${python_home}/python.exe\" \"${python_home}/python2.7.exe\"\n+    ciCommandAddPath \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\2.7.17\\\\x64\"\n fi"}, {"sha": "a0bdb1481c6b2460c2c3eb2140adb46ccedce5c5", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,8 +6,6 @@\n //! Emscripten's runtime always implements those APIs and does not\n //! implement libunwind.\n \n-#![allow(private_no_mangle_fns)]\n-\n use alloc::boxed::Box;\n use core::any::Any;\n use core::mem;"}, {"sha": "1622442a5eb450dae5058eb724f3aac8a878fd1b", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -36,8 +36,6 @@\n //! Once stack has been unwound down to the handler frame level, unwinding stops\n //! and the last personality routine transfers control to the catch block.\n \n-#![allow(private_no_mangle_fns)]\n-\n use alloc::boxed::Box;\n use core::any::Any;\n "}, {"sha": "10b765a5b411b60efe5f1484e5ab3c1c6228c98c", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -45,7 +45,6 @@\n //! [llvm]: http://llvm.org/docs/ExceptionHandling.html#background-on-windows-exceptions\n \n #![allow(nonstandard_style)]\n-#![allow(private_no_mangle_fns)]\n \n use alloc::boxed::Box;\n use core::any::Any;"}, {"sha": "ba1665fb530835a4284a656d904696b285976d21", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -346,7 +346,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn get_entry(&self, id: HirId) -> Entry<'hir> {\n-        if id.local_id == ItemLocalId::from_u32_const(0) {\n+        if id.local_id == ItemLocalId::from_u32(0) {\n             let owner = self.tcx.hir_owner(id.owner_def_id());\n             Entry { parent: owner.parent, node: owner.node }\n         } else {"}, {"sha": "8fd86b3232d002abbb1c307f80f3e39a351aef10", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,6 @@\n-use crate::hir::map::definitions::Definitions;\n-use crate::hir::map::DefPathHash;\n+use crate::hir::map::definitions::{DefPathHash, Definitions};\n use crate::ich::{self, CachingSourceMapView};\n use crate::middle::cstore::CrateStore;\n-use crate::session::Session;\n use crate::ty::{fast_reject, TyCtxt};\n \n use rustc_ast::ast;\n@@ -11,6 +9,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex};\n+use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, SourceFile};"}, {"sha": "8d0f604de6d7623daf29d6c4a7a16a6e3f252f6b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -26,6 +26,9 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n@@ -80,7 +83,6 @@ pub mod infer;\n pub mod lint;\n pub mod middle;\n pub mod mir;\n-pub use rustc_session as session;\n pub mod traits;\n pub mod ty;\n "}, {"sha": "d4d01a716db97c32602f677796c4e47594b88f53", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n-pub use rustc_session::lint::{builtin, Level, Lint, LintId, LintPass};\n+use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};"}, {"sha": "9f5a56903aa6e9ede938d32daf717c3351b7afe8", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,10 +2,9 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use crate::hir::map as hir_map;\n-use crate::hir::map::definitions::{DefKey, DefPathTable};\n-use crate::session::search_paths::PathKind;\n-use crate::session::CrateDisambiguator;\n+pub use self::NativeLibraryKind::*;\n+\n+use crate::hir::map::definitions::{DefKey, DefPath, DefPathHash, DefPathTable};\n use crate::ty::TyCtxt;\n \n use rustc_ast::ast;\n@@ -14,15 +13,16 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_macros::HashStable;\n+use rustc_session::search_paths::PathKind;\n+pub use rustc_session::utils::NativeLibraryKind;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_target::spec::Target;\n+\n use std::any::Any;\n use std::path::{Path, PathBuf};\n \n-pub use self::NativeLibraryKind::*;\n-pub use rustc_session::utils::NativeLibraryKind;\n-\n // lonely orphan structs and enums looking for a better home\n \n /// Where a crate came from on the local filesystem. One of these three options\n@@ -197,8 +197,8 @@ pub trait CrateStore {\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n-    fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n+    fn def_path(&self, def: DefId) -> DefPath;\n+    fn def_path_hash(&self, def: DefId) -> DefPathHash;\n     fn def_path_table(&self, cnum: CrateNum) -> &DefPathTable;\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation"}, {"sha": "ee5f822d3134c69267363292b1caab4b78b49b23", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,7 @@\n //! For all the gory details, see the provider of the `dependency_formats`\n //! query.\n \n-use crate::session::config;\n+use rustc_session::config;\n \n /// A list of dependencies for a certain crate type.\n ///"}, {"sha": "6de53c703e1653411dec153b85a0fc319ec168b5", "filename": "src/librustc/middle/limits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flimits.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,13 +5,13 @@\n //! this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n //! just peeks and looks for that attribute.\n \n-use crate::session::Session;\n-use core::num::IntErrorKind;\n use rustc::bug;\n use rustc_ast::ast;\n+use rustc_data_structures::sync::Once;\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n-use rustc_data_structures::sync::Once;\n+use std::num::IntErrorKind;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);"}, {"sha": "46525bdedad3554ab6669d0540ba4b5ef3815d13", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,7 +3,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr::{self as attr, ConstStability, Deprecation, RustcDeprecation, Stability};\n@@ -17,6 +16,7 @@ use rustc_hir::{self, HirId};\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n use rustc_session::parse::feature_err_issue;\n+use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n "}, {"sha": "9474f05b55df7e9bbf1d02c86f9ee7acf5aa1fc4", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -41,6 +41,7 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     /// The size of the allocation. Currently, must always equal `bytes.len()`.\n     pub size: Size,\n     /// The alignment of the allocation to detect unaligned reads.\n+    /// (`Align` guarantees that this is a power of two.)\n     pub align: Align,\n     /// `true` if the allocation is mutable.\n     /// Also used by codegen to determine if a static should be put into mutable memory,\n@@ -314,7 +315,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n                 &self.get_bytes(cx, ptr, size_with_null)?[..size]\n             }\n             // This includes the case where `offset` is out-of-bounds to begin with.\n-            None => throw_unsup!(UnterminatedCString(ptr.erase_tag())),\n+            None => throw_ub!(UnterminatedCString(ptr.erase_tag())),\n         })\n     }\n \n@@ -573,7 +574,7 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     fn check_defined(&self, ptr: Pointer<Tag>, size: Size) -> InterpResult<'tcx> {\n         self.undef_mask\n             .is_range_defined(ptr.offset, ptr.offset + size)\n-            .or_else(|idx| throw_unsup!(ReadUndefBytes(idx)))\n+            .or_else(|idx| throw_ub!(InvalidUndefBytes(Some(Pointer::new(ptr.alloc_id, idx)))))\n     }\n \n     pub fn mark_definedness(&mut self, ptr: Pointer<Tag>, size: Size, new_state: bool) {"}, {"sha": "ff107a5f1e268990a327581b67711ddc079aef5a", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 117, "deletions": 186, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,7 +1,6 @@\n-use super::{CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n+use super::{AllocId, CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n \n use crate::hir::map::definitions::DefPathData;\n-use crate::mir;\n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::{Align, LayoutError, Size};\n use crate::ty::query::TyCtxtAt;\n@@ -14,8 +13,7 @@ use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n-use rustc_span::{Pos, Span};\n-use rustc_target::spec::abi::Abi;\n+use rustc_span::{def_id::DefId, Pos, Span};\n use std::{any::Any, fmt};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n@@ -296,6 +294,8 @@ pub enum InvalidProgramInfo<'tcx> {\n     TypeckError,\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n+    /// An invalid transmute happened.\n+    TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n }\n \n impl fmt::Debug for InvalidProgramInfo<'_> {\n@@ -306,6 +306,11 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n             TypeckError => write!(f, \"encountered constants with type errors, stopping evaluation\"),\n             Layout(ref err) => write!(f, \"{}\", err),\n+            TransmuteSizeDiff(from_ty, to_ty) => write!(\n+                f,\n+                \"tried to transmute from {:?} to {:?}, but their sizes differed\",\n+                from_ty, to_ty\n+            ),\n         }\n     }\n }\n@@ -321,7 +326,10 @@ pub enum UndefinedBehaviorInfo {\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n     InvalidDiscriminant(ScalarMaybeUndef),\n     /// A slice/array index projection went out-of-bounds.\n-    BoundsCheckFailed { len: u64, index: u64 },\n+    BoundsCheckFailed {\n+        len: u64,\n+        index: u64,\n+    },\n     /// Something was divided by 0 (x / 0).\n     DivisionByZero,\n     /// Something was \"remainded\" by 0 (x % 0).\n@@ -330,6 +338,43 @@ pub enum UndefinedBehaviorInfo {\n     PointerArithOverflow,\n     /// Invalid metadata in a wide pointer (using `str` to avoid allocations).\n     InvalidMeta(&'static str),\n+    /// Reading a C string that does not end within its allocation.\n+    UnterminatedCString(Pointer),\n+    /// Dereferencing a dangling pointer after it got freed.\n+    PointerUseAfterFree(AllocId),\n+    /// Used a pointer outside the bounds it is valid for.\n+    PointerOutOfBounds {\n+        ptr: Pointer,\n+        msg: CheckInAllocMsg,\n+        allocation_size: Size,\n+    },\n+    /// Used a pointer with bad alignment.\n+    AlignmentCheckFailed {\n+        required: Align,\n+        has: Align,\n+    },\n+    /// Using an integer as a pointer in the wrong way.\n+    InvalidIntPointerUsage(u64),\n+    /// Writing to read-only memory.\n+    WriteToReadOnly(AllocId),\n+    /// Using a pointer-not-to-a-function as function pointer.\n+    InvalidFunctionPointer(Pointer),\n+    // Trying to access the data behind a function pointer.\n+    DerefFunctionPointer(AllocId),\n+    /// The value validity check found a problem.\n+    /// Should only be thrown by `validity.rs` and always point out which part of the value\n+    /// is the problem.\n+    ValidationFailure(String),\n+    /// Using a non-boolean `u8` as bool.\n+    InvalidBool(u8),\n+    /// Using a non-character `u32` as character.\n+    InvalidChar(u32),\n+    /// Using uninitialized data where it is not allowed.\n+    InvalidUndefBytes(Option<Pointer>),\n+    /// Working with a local that is not currently live.\n+    DeadLocal,\n+    /// Trying to read from the return place of a function.\n+    ReadFromReturnPlace,\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -348,6 +393,50 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n+            UnterminatedCString(p) => write!(\n+                f,\n+                \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n+                p,\n+            ),\n+            PointerUseAfterFree(a) => {\n+                write!(f, \"pointer to {:?} was dereferenced after this allocation got freed\", a)\n+            }\n+            PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n+                f,\n+                \"{} failed: pointer must be in-bounds at offset {}, \\\n+                           but is outside bounds of {} which has size {}\",\n+                msg,\n+                ptr.offset.bytes(),\n+                ptr.alloc_id,\n+                allocation_size.bytes()\n+            ),\n+            InvalidIntPointerUsage(0) => write!(f, \"invalid use of NULL pointer\"),\n+            InvalidIntPointerUsage(i) => write!(f, \"invalid use of {} as a pointer\", i),\n+            AlignmentCheckFailed { required, has } => write!(\n+                f,\n+                \"accessing memory with alignment {}, but alignment {} is required\",\n+                has.bytes(),\n+                required.bytes()\n+            ),\n+            WriteToReadOnly(a) => write!(f, \"writing to {:?} which is read-only\", a),\n+            InvalidFunctionPointer(p) => {\n+                write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n+            }\n+            DerefFunctionPointer(a) => write!(f, \"accessing {:?} which contains a function\", a),\n+            ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n+            InvalidBool(b) => write!(f, \"interpreting an invalid 8-bit value as a bool: {}\", b),\n+            InvalidChar(c) => write!(f, \"interpreting an invalid 32-bit value as a char: {}\", c),\n+            InvalidUndefBytes(Some(p)) => write!(\n+                f,\n+                \"reading uninitialized memory at {:?}, but this operation requires initialized memory\",\n+                p\n+            ),\n+            InvalidUndefBytes(None) => write!(\n+                f,\n+                \"using uninitialized data, but this operation requires initialized memory\"\n+            ),\n+            DeadLocal => write!(f, \"accessing a dead local variable\"),\n+            ReadFromReturnPlace => write!(f, \"tried to read from the return place\"),\n         }\n     }\n }\n@@ -359,203 +448,45 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n ///\n /// Currently, we also use this as fall-back error kind for errors that have not been\n /// categorized yet.\n-pub enum UnsupportedOpInfo<'tcx> {\n+pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-\n     /// When const-prop encounters a situation it does not support, it raises this error.\n     /// This must not allocate for performance reasons (hence `str`, not `String`).\n     ConstPropUnsupported(&'static str),\n-\n-    // -- Everything below is not categorized yet --\n-    FunctionAbiMismatch(Abi, Abi),\n-    FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n-    FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n-    FunctionArgCountMismatch,\n-    UnterminatedCString(Pointer),\n-    DanglingPointerDeref,\n-    DoubleFree,\n-    InvalidMemoryAccess,\n-    InvalidFunctionPointer,\n-    InvalidBool,\n-    PointerOutOfBounds {\n-        ptr: Pointer,\n-        msg: CheckInAllocMsg,\n-        allocation_size: Size,\n-    },\n-    InvalidNullPointerUsage,\n+    /// Accessing an unsupported foreign static.\n+    ReadForeignStatic(DefId),\n+    /// Could not find MIR for a function.\n+    NoMirFor(DefId),\n+    /// Modified a static during const-eval.\n+    /// FIXME: move this to `ConstEvalErrKind` through a machine hook.\n+    ModifiedStatic,\n+    /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n+    /// Encountered raw bytes where we needed a pointer.\n     ReadBytesAsPointer,\n-    ReadForeignStatic,\n-    InvalidPointerMath,\n-    ReadUndefBytes(Size),\n-    DeadLocal,\n-    InvalidBoolOp(mir::BinOp),\n-    UnimplementedTraitSelection,\n-    CalledClosureAsFunction,\n-    NoMirFor(String),\n-    DerefFunctionPointer,\n-    ExecuteMemory,\n-    InvalidChar(u128),\n-    OutOfTls,\n-    TlsOutOfBounds,\n-    AlignmentCheckFailed {\n-        required: Align,\n-        has: Align,\n-    },\n-    ValidationFailure(String),\n-    VtableForArgumentlessMethod,\n-    ModifiedConstantMemory,\n-    ModifiedStatic,\n-    TypeNotPrimitive(Ty<'tcx>),\n-    ReallocatedWrongMemoryKind(String, String),\n-    DeallocatedWrongMemoryKind(String, String),\n-    ReallocateNonBasePtr,\n-    DeallocateNonBasePtr,\n-    IncorrectAllocationInformation(Size, Size, Align, Align),\n-    HeapAllocZeroBytes,\n-    HeapAllocNonPowerOfTwoAlignment(u64),\n-    ReadFromReturnPointer,\n-    PathNotFound(Vec<String>),\n-    TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n }\n \n-impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n+impl fmt::Debug for UnsupportedOpInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UnsupportedOpInfo::*;\n         match self {\n-            PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n-                f,\n-                \"{} failed: pointer must be in-bounds at offset {}, \\\n-                           but is outside bounds of allocation {} which has size {}\",\n-                msg,\n-                ptr.offset.bytes(),\n-                ptr.alloc_id,\n-                allocation_size.bytes()\n-            ),\n-            ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n-            NoMirFor(ref func) => write!(f, \"no MIR for `{}`\", func),\n-            FunctionAbiMismatch(caller_abi, callee_abi) => write!(\n-                f,\n-                \"tried to call a function with ABI {:?} using caller ABI {:?}\",\n-                callee_abi, caller_abi\n-            ),\n-            FunctionArgMismatch(caller_ty, callee_ty) => write!(\n-                f,\n-                \"tried to call a function with argument of type {:?} \\\n-                           passing data of type {:?}\",\n-                callee_ty, caller_ty\n-            ),\n-            TransmuteSizeDiff(from_ty, to_ty) => write!(\n-                f,\n-                \"tried to transmute from {:?} to {:?}, but their sizes differed\",\n-                from_ty, to_ty\n-            ),\n-            FunctionRetMismatch(caller_ty, callee_ty) => write!(\n-                f,\n-                \"tried to call a function with return type {:?} \\\n-                           passing return place of type {:?}\",\n-                callee_ty, caller_ty\n-            ),\n-            FunctionArgCountMismatch => {\n-                write!(f, \"tried to call a function with incorrect number of arguments\")\n-            }\n-            ReallocatedWrongMemoryKind(ref old, ref new) => {\n-                write!(f, \"tried to reallocate memory from `{}` to `{}`\", old, new)\n-            }\n-            DeallocatedWrongMemoryKind(ref old, ref new) => {\n-                write!(f, \"tried to deallocate `{}` memory but gave `{}` as the kind\", old, new)\n-            }\n-            InvalidChar(c) => {\n-                write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c)\n-            }\n-            AlignmentCheckFailed { required, has } => write!(\n-                f,\n-                \"tried to access memory with alignment {}, but alignment {} is required\",\n-                has.bytes(),\n-                required.bytes()\n-            ),\n-            TypeNotPrimitive(ty) => write!(f, \"expected primitive type, got {}\", ty),\n-            PathNotFound(ref path) => write!(f, \"cannot find path {:?}\", path),\n-            IncorrectAllocationInformation(size, size2, align, align2) => write!(\n-                f,\n-                \"incorrect alloc info: expected size {} and align {}, \\\n-                           got size {} and align {}\",\n-                size.bytes(),\n-                align.bytes(),\n-                size2.bytes(),\n-                align2.bytes()\n-            ),\n-            InvalidMemoryAccess => write!(f, \"tried to access memory through an invalid pointer\"),\n-            DanglingPointerDeref => write!(f, \"dangling pointer was dereferenced\"),\n-            DoubleFree => write!(f, \"tried to deallocate dangling pointer\"),\n-            InvalidFunctionPointer => {\n-                write!(f, \"tried to use a function pointer after offsetting it\")\n-            }\n-            InvalidBool => write!(f, \"invalid boolean value read\"),\n-            InvalidNullPointerUsage => write!(f, \"invalid use of NULL pointer\"),\n-            ReadPointerAsBytes => write!(\n-                f,\n-                \"a raw memory access tried to access part of a pointer value as raw \\\n-                    bytes\"\n-            ),\n-            ReadBytesAsPointer => {\n-                write!(f, \"a memory access tried to interpret some bytes as a pointer\")\n-            }\n-            ReadForeignStatic => write!(f, \"tried to read from foreign (extern) static\"),\n-            InvalidPointerMath => write!(\n-                f,\n-                \"attempted to do invalid arithmetic on pointers that would leak base \\\n-                    addresses, e.g., comparing pointers into different allocations\"\n-            ),\n-            DeadLocal => write!(f, \"tried to access a dead local variable\"),\n-            DerefFunctionPointer => write!(f, \"tried to dereference a function pointer\"),\n-            ExecuteMemory => write!(f, \"tried to treat a memory pointer as a function pointer\"),\n-            OutOfTls => write!(f, \"reached the maximum number of representable TLS keys\"),\n-            TlsOutOfBounds => write!(f, \"accessed an invalid (unallocated) TLS key\"),\n-            CalledClosureAsFunction => {\n-                write!(f, \"tried to call a closure through a function pointer\")\n+            Unsupported(ref msg) => write!(f, \"{}\", msg),\n+            ConstPropUnsupported(ref msg) => {\n+                write!(f, \"Constant propagation encountered an unsupported situation: {}\", msg)\n             }\n-            VtableForArgumentlessMethod => {\n-                write!(f, \"tried to call a vtable function without arguments\")\n+            ReadForeignStatic(did) => {\n+                write!(f, \"tried to read from foreign (extern) static {:?}\", did)\n             }\n-            ModifiedConstantMemory => write!(f, \"tried to modify constant memory\"),\n+            NoMirFor(did) => write!(f, \"could not load MIR for {:?}\", did),\n             ModifiedStatic => write!(\n                 f,\n                 \"tried to modify a static's initial value from another static's \\\n                     initializer\"\n             ),\n-            ReallocateNonBasePtr => write!(\n-                f,\n-                \"tried to reallocate with a pointer not to the beginning of an \\\n-                    existing object\"\n-            ),\n-            DeallocateNonBasePtr => write!(\n-                f,\n-                \"tried to deallocate with a pointer not to the beginning of an \\\n-                    existing object\"\n-            ),\n-            HeapAllocZeroBytes => write!(f, \"tried to re-, de- or allocate zero bytes on the heap\"),\n-            ReadFromReturnPointer => write!(f, \"tried to read from the return pointer\"),\n-            UnimplementedTraitSelection => {\n-                write!(f, \"there were unresolved type arguments during trait selection\")\n-            }\n-            InvalidBoolOp(_) => write!(f, \"invalid boolean operation\"),\n-            UnterminatedCString(_) => write!(\n-                f,\n-                \"attempted to get length of a null-terminated string, but no null \\\n-                    found before end of allocation\"\n-            ),\n-            ReadUndefBytes(_) => write!(f, \"attempted to read undefined bytes\"),\n-            HeapAllocNonPowerOfTwoAlignment(_) => write!(\n-                f,\n-                \"tried to re-, de-, or allocate heap memory with alignment that is \\\n-                    not a power of two\"\n-            ),\n-            Unsupported(ref msg) => write!(f, \"{}\", msg),\n-            ConstPropUnsupported(ref msg) => {\n-                write!(f, \"Constant propagation encountered an unsupported situation: {}\", msg)\n-            }\n+\n+            ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n+            ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n         }\n     }\n }\n@@ -590,7 +521,7 @@ pub enum InterpError<'tcx> {\n     UndefinedBehavior(UndefinedBehaviorInfo),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n-    Unsupported(UnsupportedOpInfo<'tcx>),\n+    Unsupported(UnsupportedOpInfo),\n     /// The program was invalid (ill-typed, bad MIR, not sufficiently monomorphized, ...).\n     InvalidProgram(InvalidProgramInfo<'tcx>),\n     /// The program exhausted the interpreter's resources (stack/heap too big,\n@@ -606,7 +537,7 @@ pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Forward `Display` to `Debug`.\n-        write!(f, \"{:?}\", self)\n+        fmt::Debug::fmt(self, f)\n     }\n }\n \n@@ -631,7 +562,7 @@ impl InterpError<'_> {\n         match self {\n             InterpError::MachineStop(_)\n             | InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n-            | InterpError::Unsupported(UnsupportedOpInfo::ValidationFailure(_))\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) => true,\n             _ => false,"}, {"sha": "0b5bb7f3c03faf01bfdb98dac9816587460418c1", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -161,7 +161,13 @@ pub struct AllocId(pub u64);\n \n impl fmt::Debug for AllocId {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"alloc{}\", self.0)\n+        fmt::Display::fmt(self, fmt)\n+    }\n+}\n+\n+impl fmt::Display for AllocId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"alloc{}\", self.0)\n     }\n }\n \n@@ -351,12 +357,6 @@ impl<'s> AllocDecodingSession<'s> {\n     }\n }\n \n-impl fmt::Display for AllocId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.0)\n-    }\n-}\n-\n /// An allocation in the global (tcx-managed) memory can be either a function pointer,\n /// a static, or a \"real\" allocation with some data in it.\n #[derive(Debug, Clone, Eq, PartialEq, Hash, RustcDecodable, RustcEncodable, HashStable)]"}, {"sha": "2cbe25f9674261e899319d537f8480ead7eda068", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -213,20 +213,4 @@ impl<'tcx, Tag> Pointer<Tag> {\n     pub fn erase_tag(self) -> Pointer {\n         Pointer { alloc_id: self.alloc_id, offset: self.offset, tag: () }\n     }\n-\n-    /// Test if the pointer is \"inbounds\" of an allocation of the given size.\n-    /// A pointer is \"inbounds\" even if its offset is equal to the size; this is\n-    /// a \"one-past-the-end\" pointer.\n-    #[inline(always)]\n-    pub fn check_inbounds_alloc(\n-        self,\n-        allocation_size: Size,\n-        msg: CheckInAllocMsg,\n-    ) -> InterpResult<'tcx, ()> {\n-        if self.offset > allocation_size {\n-            throw_unsup!(PointerOutOfBounds { ptr: self.erase_tag(), msg, allocation_size })\n-        } else {\n-            Ok(())\n-        }\n-    }\n }"}, {"sha": "04fe70b36c1e02bdd93c7f11d6e27ee26572a017", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -455,18 +455,19 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     pub fn to_bool(self) -> InterpResult<'tcx, bool> {\n-        match self {\n-            Scalar::Raw { data: 0, size: 1 } => Ok(false),\n-            Scalar::Raw { data: 1, size: 1 } => Ok(true),\n-            _ => throw_unsup!(InvalidBool),\n+        let val = self.to_u8()?;\n+        match val {\n+            0 => Ok(false),\n+            1 => Ok(true),\n+            _ => throw_ub!(InvalidBool(val)),\n         }\n     }\n \n     pub fn to_char(self) -> InterpResult<'tcx, char> {\n         let val = self.to_u32()?;\n         match ::std::char::from_u32(val) {\n             Some(c) => Ok(c),\n-            None => throw_unsup!(InvalidChar(val as u128)),\n+            None => throw_ub!(InvalidChar(val)),\n         }\n     }\n \n@@ -609,7 +610,7 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     pub fn not_undef(self) -> InterpResult<'static, Scalar<Tag>> {\n         match self {\n             ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUndef::Undef => throw_unsup!(ReadUndefBytes(Size::ZERO)),\n+            ScalarMaybeUndef::Undef => throw_ub!(InvalidUndefBytes(None)),\n         }\n     }\n "}, {"sha": "27d82d25803c74b14101365a53df035bac2559c8", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,5 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n-use crate::session::config::OptLevel;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_attr::InlineAttr;\n@@ -9,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::HirId;\n+use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use std::fmt;"}, {"sha": "d7a259cc870749b762281ff9c7adb0f0f069a8ff", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -23,7 +23,6 @@ use crate::mir::{\n };\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n-use crate::ty::free_region_map::FreeRegionMap;\n use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n use crate::ty::query;\n use crate::ty::steal::Steal;\n@@ -416,11 +415,6 @@ pub struct TypeckTables<'tcx> {\n     /// this field will be set to `true`.\n     pub tainted_by_errors: bool,\n \n-    /// Stores the free-region relationships that were deduced from\n-    /// its where-clauses and parameter types. These are then\n-    /// read-again by borrowck.\n-    pub free_region_map: FreeRegionMap<'tcx>,\n-\n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n     pub concrete_opaque_types: FxHashMap<DefId, ResolvedOpaqueTy<'tcx>>,\n@@ -456,7 +450,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             coercion_casts: Default::default(),\n             used_trait_imports: Lrc::new(Default::default()),\n             tainted_by_errors: false,\n-            free_region_map: Default::default(),\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),\n@@ -719,7 +712,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n \n             ref used_trait_imports,\n             tainted_by_errors,\n-            ref free_region_map,\n             ref concrete_opaque_types,\n             ref upvar_list,\n             ref generator_interior_types,\n@@ -757,7 +749,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             coercion_casts.hash_stable(hcx, hasher);\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n-            free_region_map.hash_stable(hcx, hasher);\n             concrete_opaque_types.hash_stable(hcx, hasher);\n             upvar_list.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);"}, {"sha": "041dfc7d169a4c217a083d9ab31ea89f1526605f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,30 +1,28 @@\n-use crate::session::{self, DataTypeKind};\n+use crate::ich::StableHashingContext;\n+use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast::ast::{self, Ident, IntTy, UintTy};\n use rustc_attr as attr;\n-use rustc_span::DUMMY_SP;\n-\n-use std::cmp;\n-use std::fmt;\n-use std::iter;\n-use std::mem;\n-use std::ops::Bound;\n-\n-use crate::ich::StableHashingContext;\n-use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n-use crate::ty::subst::Subst;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-\n+use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n pub use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec};\n \n+use std::cmp;\n+use std::fmt;\n+use std::iter;\n+use std::mem;\n+use std::ops::Bound;\n+\n pub trait IntegerExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n@@ -1409,12 +1407,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // locals as part of the prefix. We compute the layout of all of\n         // these fields at once to get optimal packing.\n         let discr_index = substs.as_generator().prefix_tys(def_id, tcx).count();\n-        // FIXME(eddyb) set the correct vaidity range for the discriminant.\n-        let discr_layout = self.layout_of(substs.as_generator().discr_ty(tcx))?;\n-        let discr = match &discr_layout.abi {\n-            Abi::Scalar(s) => s.clone(),\n-            _ => bug!(),\n-        };\n+\n+        // `info.variant_fields` already accounts for the reserved variants, so no need to add them.\n+        let max_discr = (info.variant_fields.len() - 1) as u128;\n+        let discr_int = Integer::fit_unsigned(max_discr);\n+        let discr_int_ty = discr_int.to_ty(tcx, false);\n+        let discr = Scalar { value: Primitive::Int(discr_int, false), valid_range: 0..=max_discr };\n+        let discr_layout = self.tcx.intern_layout(LayoutDetails::scalar(self, discr.clone()));\n+        let discr_layout = TyLayout { ty: discr_int_ty, details: discr_layout };\n+\n         let promoted_layouts = ineligible_locals\n             .iter()\n             .map(|local| subst_field(info.field_tys[local]))\n@@ -1648,7 +1649,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         if min_size < field_end {\n                             min_size = field_end;\n                         }\n-                        session::FieldInfo {\n+                        FieldInfo {\n                             name: name.to_string(),\n                             offset: offset.bytes(),\n                             size: field_layout.size.bytes(),\n@@ -1658,13 +1659,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 })\n                 .collect();\n \n-            session::VariantInfo {\n+            VariantInfo {\n                 name: n.map(|n| n.to_string()),\n-                kind: if layout.is_unsized() {\n-                    session::SizeKind::Min\n-                } else {\n-                    session::SizeKind::Exact\n-                },\n+                kind: if layout.is_unsized() { SizeKind::Min } else { SizeKind::Exact },\n                 align: layout.align.abi.bytes(),\n                 size: if min_size.bytes() == 0 { layout.size.bytes() } else { min_size.bytes() },\n                 fields: field_info,"}, {"sha": "74d677298d3f85f7161ec482f12d31810f0cbe3e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,7 +9,6 @@ pub use self::Variance::*;\n use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n use crate::hir::map as hir_map;\n-\n use crate::ich::Fingerprint;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n@@ -19,7 +18,6 @@ use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::interpret::ErrorHandled;\n use crate::mir::GeneratorLayout;\n use crate::mir::ReadOnlyBodyAndCache;\n-use crate::session::DataTypeKind;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::layout::VariantIdx;\n@@ -42,6 +40,7 @@ use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n+use rustc_session::DataTypeKind;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -1700,7 +1699,7 @@ rustc_index::newtype_index! {\n }\n \n impl UniverseIndex {\n-    pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n+    pub const ROOT: UniverseIndex = UniverseIndex::from_u32(0);\n \n     /// Returns the \"next\" universe index in order -- this new index\n     /// is considered to extend all previous universes. This"}, {"sha": "e3859ed12a2ebb2c31297b79df514125c018da98", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -19,8 +19,6 @@ use crate::mir::interpret::GlobalId;\n use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult, ConstValue};\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n-use crate::session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n-use crate::session::CrateDisambiguator;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n@@ -49,6 +47,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast::ast;"}, {"sha": "62c2bd801ee33626c8643f68def62de45d2c5d60", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,7 +3,6 @@ use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use crate::mir::{self, interpret};\n-use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n@@ -19,6 +18,7 @@ use rustc_serialize::{\n     opaque, Decodable, Decoder, Encodable, Encoder, SpecializedDecoder, SpecializedEncoder,\n     UseSpecializedDecodable, UseSpecializedEncodable,\n };\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};"}, {"sha": "e3077b9897c18fcd08712eda6f611a2b4d735b76", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2153,7 +2153,7 @@ impl FnRetTy {\n /// Module declaration.\n ///\n /// E.g., `mod foo;` or `mod foo { .. }`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token"}, {"sha": "2594cc536ac5f893b17c308f619940e60d0b3440", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,7 +7,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n+#![feature(const_panic)]\n #![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]"}, {"sha": "cd562c48e9115eb24f12bd73bf5eb138d974f533", "filename": "src/librustc_ast/node_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fnode_id.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,7 +12,7 @@ rustc_index::newtype_index! {\n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n \n /// `NodeId` used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have"}, {"sha": "43a6b7ac04cd9c15c6e9ba3a3ca1f929c67ec850", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -37,7 +37,6 @@\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n-use rustc::hir::map::Map;\n use rustc::{bug, span_bug};\n use rustc_ast::ast;\n use rustc_ast::ast::*;\n@@ -1463,7 +1462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "b5b0a3089ce0f55054a9667bcf688e4e50bd76f0", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,14 +1,14 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n use rustc_ast::ast::{self, *};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n "}, {"sha": "bb73e982a9c28aa098bfaf993f6797a3deb8428e", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -148,12 +148,19 @@ pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n \n // This makes comma-separated lists look slightly nicer,\n // and also addresses a specific regression described in issue #63896.\n-fn tt_prepend_space(tt: &TokenTree) -> bool {\n+fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n     match tt {\n         TokenTree::Token(token) => match token.kind {\n             token::Comma => false,\n             _ => true,\n         },\n+        TokenTree::Delimited(_, DelimToken::Paren, _) => match prev {\n+            TokenTree::Token(token) => match token.kind {\n+                token::Ident(_, _) => false,\n+                _ => true,\n+            },\n+            _ => true,\n+        },\n         _ => true,\n     }\n }\n@@ -650,11 +657,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn print_tts(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n-        for (i, tt) in tts.into_trees().enumerate() {\n-            if i != 0 && tt_prepend_space(&tt) {\n+        let mut iter = tts.into_trees().peekable();\n+        while let Some(tt) = iter.next() {\n+            let show_space =\n+                if let Some(next) = iter.peek() { tt_prepend_space(next, &tt) } else { false };\n+            self.print_tt(tt, convert_dollar_crate);\n+            if show_space {\n                 self.space();\n             }\n-            self.print_tt(tt, convert_dollar_crate);\n         }\n     }\n "}, {"sha": "71622a3b7e657b3d6420c3cc0acf4e2df6599362", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -59,7 +59,7 @@ pub fn inject(\n     handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n-    let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n+    let mut cx = ExtCtxt::new(sess, ecfg, resolver, None);\n \n     let mut collect = CollectProcMacros {\n         macros: Vec::new(),"}, {"sha": "662bbe6a287a36e9399e5d3858fe6596e8e7aa2c", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::panictry;\n-use rustc_parse::{self, new_sub_parser_from_file, parser::Parser, DirectoryOwnership};\n+use rustc_parse::{self, new_sub_parser_from_file, parser::Parser};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Pos, Span};\n@@ -108,8 +108,7 @@ pub fn expand_include<'cx>(\n             return DummyResult::any(sp);\n         }\n     };\n-    let directory_ownership = DirectoryOwnership::Owned { relative: None };\n-    let p = new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n+    let p = new_sub_parser_from_file(cx.parse_sess(), &file, None, sp);\n \n     struct ExpandResult<'a> {\n         p: Parser<'a>,"}, {"sha": "f48fd6df9c98bd4e7d1797cf1a6fff4ee603b4cf", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -39,7 +39,7 @@ pub fn inject(\n     let call_site = DUMMY_SP.with_call_site_ctxt(expn_id);\n \n     let ecfg = ExpansionConfig::default(\"std_lib_injection\".to_string());\n-    let cx = ExtCtxt::new(sess, ecfg, resolver);\n+    let cx = ExtCtxt::new(sess, ecfg, resolver, None);\n \n     // .rev() to preserve ordering above in combination with insert(0, ...)\n     for &name in names.iter().rev() {"}, {"sha": "b87767f4a4127f650f7037f29833c0b24c42fe77", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -202,7 +202,7 @@ fn generate_test_harness(\n     let mut econfig = ExpansionConfig::default(\"test\".to_string());\n     econfig.features = Some(features);\n \n-    let ext_cx = ExtCtxt::new(sess, econfig, resolver);\n+    let ext_cx = ExtCtxt::new(sess, econfig, resolver, None);\n \n     let expn_id = ext_cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,"}, {"sha": "072607fff85c73cb9f020dfa3f626c7c2db83b91", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,8 +3,6 @@\n use std::ffi::CString;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc::session::config::{OptLevel, Sanitizer};\n-use rustc::session::Session;\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -13,6 +11,8 @@ use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_session::config::{OptLevel, Sanitizer};\n+use rustc_session::Session;\n use rustc_target::abi::call::Conv;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "239ca57ba41434d38b13858dc9157473d00c5bc6", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,9 +9,9 @@ use std::str;\n \n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind};\n-use rustc::session::Session;\n use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::{looks_like_rust_object_file, METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n struct ArchiveConfig<'a> {"}, {"sha": "1b64750f51febd12f10cb21c8abb0525524951b5", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,7 +9,6 @@ use log::{debug, info};\n use rustc::bug;\n use rustc::dep_graph::WorkProduct;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n-use rustc::session::config::{self, Lto};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n@@ -19,6 +18,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{FatalError, Handler};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n+use rustc_session::config::{self, Lto};\n \n use std::ffi::{CStr, CString};\n use std::fs::File;"}, {"sha": "2327b96e26c36597a125f1bbf945707d493d4771", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -15,8 +15,6 @@ use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n-use rustc::session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n@@ -25,6 +23,8 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::Session;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;"}, {"sha": "0d063d82c6934ff700ba8fd8476d937abfa776ee", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -28,13 +28,13 @@ use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols;\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::session::config::DebugInfo;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_session::config::DebugInfo;\n use rustc_span::symbol::Symbol;\n \n use std::ffi::CString;"}, {"sha": "b37d63fce659235a79dbe3db9fa704069579922b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,7 +7,6 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::{c_char, c_uint};\n use log::debug;\n-use rustc::session::config::{self, Sanitizer};\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_codegen_ssa::base::to_immediate;\n@@ -19,6 +18,7 @@ use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::{self, Sanitizer};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;"}, {"sha": "7b1526e9da154747ebf41057ca8282fb6bc67f7c", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,31 +1,30 @@\n use crate::attributes;\n+use crate::callee::get_fn;\n use crate::debuginfo;\n use crate::llvm;\n use crate::llvm_util;\n-use crate::value::Value;\n-use rustc::dep_graph::DepGraphSafe;\n-\n use crate::type_::Type;\n-use rustc_codegen_ssa::traits::*;\n+use crate::value::Value;\n \n-use crate::callee::get_fn;\n use rustc::bug;\n+use rustc::dep_graph::DepGraphSafe;\n use rustc::mir::mono::CodegenUnit;\n-use rustc::session::config::{self, CFGuard, DebugInfo};\n-use rustc::session::Session;\n use rustc::ty::layout::{\n     HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_codegen_ssa::base::wants_msvc_seh;\n+use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_target::spec::{HasTargetSpec, Target};\n-\n+use rustc_session::config::{self, CFGuard, DebugInfo};\n+use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::{HasTargetSpec, Target};\n+\n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n use std::str;"}, {"sha": "e4cbffb6db3c30704e351dff1988d71c9d545d79", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,8 +6,8 @@ use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::value::Value;\n use rustc::bug;\n-use rustc::session::config::DebugInfo;\n use rustc_codegen_ssa::traits::*;\n+use rustc_session::config::DebugInfo;\n \n use rustc_ast::attr;\n use rustc_span::symbol::sym;"}, {"sha": "6a7ed4e1dc384266eeefcecc13c58b047cf179dd", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -24,7 +24,6 @@ use rustc::ich::NodeIdHashingMode;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::interpret::truncate;\n use rustc::mir::{self, Field, GeneratorLayout};\n-use rustc::session::config::{self, DebugInfo};\n use rustc::ty::layout::{\n     self, Align, Integer, IntegerExt, LayoutOf, PrimitiveExt, Size, TyLayout, VariantIdx,\n };\n@@ -42,6 +41,7 @@ use rustc_fs_util::path_to_c_string;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::{self, FileName, Span};\n use rustc_target::abi::HasDataLayout;"}, {"sha": "85decff35b9e054267083b0f9f1629774541516e", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -20,12 +20,12 @@ use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::value::Value;\n use rustc::mir;\n-use rustc::session::config::{self, DebugInfo};\n use rustc::ty::{self, Instance, ParamEnv, Ty};\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{self, DebugInfo};\n \n use libc::c_uint;\n use log::debug;"}, {"sha": "fa730d289b16bca1dd37c2e3046087a9ec12c4f8", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -15,31 +15,30 @@\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n-use rustc_span::symbol::Symbol;\n \n pub use llvm_util::target_features;\n-use rustc::dep_graph::WorkProduct;\n+use rustc::dep_graph::{DepGraph, WorkProduct};\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n+use rustc::ty::{self, TyCtxt};\n+use rustc::util::common::ErrorReported;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n+use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n+use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_errors::{FatalError, Handler};\n+use rustc_serialize::json;\n+use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n+use rustc_session::Session;\n+use rustc_span::symbol::Symbol;\n+\n use std::any::Any;\n use std::ffi::CStr;\n use std::fs;\n use std::sync::Arc;\n \n-use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n-use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n-use rustc::util::common::ErrorReported;\n-use rustc_codegen_ssa::ModuleCodegen;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_serialize::json;\n-\n mod back {\n     pub mod archive;\n     pub mod bytecode;"}, {"sha": "c17c06718f506a3f82dac0c51a8477a64a031883", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -694,8 +694,8 @@ pub mod debuginfo {\n     }\n \n     impl DebugEmissionKind {\n-        pub fn from_generic(kind: rustc::session::config::DebugInfo) -> Self {\n-            use rustc::session::config::DebugInfo;\n+        pub fn from_generic(kind: rustc_session::config::DebugInfo) -> Self {\n+            use rustc_session::config::DebugInfo;\n             match kind {\n                 DebugInfo::None => DebugEmissionKind::NoDebug,\n                 DebugInfo::Limited => DebugEmissionKind::LineTablesOnly,"}, {"sha": "5e924c9af8481457d5a9af061676ac8844494e10", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,10 +2,10 @@ use crate::back::write::create_informational_target_machine;\n use crate::llvm;\n use libc::c_int;\n use rustc::bug;\n-use rustc::session::config::PrintRequest;\n-use rustc::session::Session;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::UnstableFeatures;\n+use rustc_session::config::PrintRequest;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};"}, {"sha": "f83b4b2b0c025adb24d3c9c76fb45b42ae1a9020", "filename": "src/librustc_codegen_ssa/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-use rustc::session::Session;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n use std::io;"}, {"sha": "af413d3cdfe6862ec25013ae7f902500101b4098", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,15 +1,15 @@\n use rustc::middle::cstore::{EncodedMetadata, LibSource, NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n-use rustc::session::config::{\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use rustc_hir::def_id::CrateNum;\n+use rustc_session::config::{\n     self, CFGuard, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n };\n-use rustc::session::search_paths::PathKind;\n+use rustc_session::search_paths::PathKind;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n-use rustc::session::{filesearch, Session};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use rustc_hir::def_id::CrateNum;\n+use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n "}, {"sha": "6b30ae8559db9e146d95f1587b7126a4eae6521a", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,19 +2,19 @@ use super::archive;\n use super::command::Command;\n use super::symbol_export;\n \n-use rustc_data_structures::fx::FxHashMap;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n \n use rustc::middle::dependency_format::Linkage;\n-use rustc::session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_serialize::{json, Encoder};\n+use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n "}, {"sha": "8368d98884a5d5dfccde1621dec110fc42c7584c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n-use rustc::session::config::{self, Sanitizer};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n@@ -16,6 +15,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{self, Sanitizer};\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())"}, {"sha": "303ee385658480c4063ddf151306afe028db85bd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,10 +14,6 @@ use jobserver::{Acquired, Client};\n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n-use rustc::session::config::{\n-    self, Lto, OutputFilenames, OutputType, Passes, Sanitizer, SwitchWithOptPath,\n-};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_ast::attr;\n use rustc_data_structures::fx::FxHashMap;\n@@ -34,6 +30,10 @@ use rustc_incremental::{\n     copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n+use rustc_session::config::{\n+    self, Lto, OutputFilenames, OutputType, Passes, Sanitizer, SwitchWithOptPath,\n+};\n+use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "e57cae30b7795446777e956f0157dd74002b30bf", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -31,8 +31,6 @@ use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::lang_items;\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n-use rustc::session::config::{self, EntryFnType, Lto};\n-use rustc::session::Session;\n use rustc::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyLayout, VariantIdx};\n use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n@@ -46,6 +44,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n+use rustc_session::config::{self, EntryFnType, Lto};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use std::cmp;"}, {"sha": "147b23995023f04585159205f1a6bcb2d27360ae", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n #![allow(non_camel_case_types, non_snake_case)]\n \n-use rustc::session::Session;\n use rustc::ty::{Ty, TyCtxt};\n use rustc_errors::struct_span_err;\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use crate::base;"}, {"sha": "d2afbdc23e1fdd586e3518c47fefb0ca9b314a57", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -21,12 +21,12 @@ use rustc::dep_graph::WorkProduct;\n use rustc::middle::cstore::{CrateSource, LibSource, NativeLibrary};\n use rustc::middle::dependency_format::Dependencies;\n use rustc::middle::lang_items::LangItem;\n-use rustc::session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc::ty::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n+use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n "}, {"sha": "cbe5f51115246c02ca27492f06b4626fc35cee1b", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,10 @@\n use crate::traits::*;\n use rustc::mir;\n-use rustc::session::config::DebugInfo;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::DebugInfo;\n \n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};"}, {"sha": "7acae300a2f0276a7dca59695443e36f7a3a90c4", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,12 +3,12 @@ use super::CodegenObject;\n use crate::ModuleCodegen;\n \n use rustc::middle::cstore::EncodedMetadata;\n-use rustc::session::{config, Session};\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_session::{config, Session};\n use rustc_span::symbol::Symbol;\n \n use std::sync::Arc;"}, {"sha": "6863b474cb6de95923105b5b55cc4e6531f9d454", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n use super::BackendTypes;\n use rustc::mir::mono::CodegenUnit;\n-use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_session::Session;\n use std::cell::RefCell;\n use std::sync::Arc;\n "}, {"sha": "7ab59029bc8a9fbf9676a726a367a263469ad54e", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -21,3 +21,4 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "561692e70669aaa0ad54c3f4a9a7da62adf7f1a9", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -10,11 +10,11 @@ use std::any::Any;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{OutputFilenames, PrintRequest};\n-use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n+use rustc_session::config::{OutputFilenames, PrintRequest};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n pub use rustc_data_structures::sync::MetadataRef;"}, {"sha": "1f53eec514bbf682f36c0fcd60b1cf517460a5e6", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,6 @@\n-use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n-use rustc::session::Session;\n use rustc_ast::{ast, attr};\n+use rustc_session::config::{self, Input, OutputFilenames, OutputType};\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::path::{Path, PathBuf};"}, {"sha": "eb3fe49a5e9cc6f1d46b05d76ae0b2a92e94ad29", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -89,12 +89,12 @@\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n-use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Instance, TyCtxt};\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::Node;\n+use rustc_session::config::SymbolManglingVersion;\n \n use rustc_span::symbol::Symbol;\n "}, {"sha": "3e6449582319fedf36ef8bbb6d88d7b9c1114631", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -33,6 +33,7 @@ rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "34f0c182499dbc410a3f63c5be42030635122f8d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,12 +18,7 @@ extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n-use rustc::lint::{Lint, LintId};\n use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::config::nightly_options;\n-use rustc::session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n-use rustc::session::{config, DiagnosticOutput, Session};\n-use rustc::session::{early_error, early_warn};\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n use rustc_codegen_ssa::CodegenResults;\n@@ -43,6 +38,11 @@ use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n+use rustc_session::config::nightly_options;\n+use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n+use rustc_session::lint::{Lint, LintId};\n+use rustc_session::{config, DiagnosticOutput, Session};\n+use rustc_session::{early_error, early_warn};\n \n use std::borrow::Cow;\n use std::cmp::max;\n@@ -652,7 +652,7 @@ impl RustcDefaultCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n-        use rustc::session::config::PrintRequest::*;\n+        use rustc_session::config::PrintRequest::*;\n         // PrintRequest::NativeStaticLibs is special - printed during linking\n         // (empty iterator returns true)\n         if sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs) {"}, {"sha": "1e5cc55a82853058dee3fd7ae236b4ed56adbda5", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,6 @@\n //! The various pretty-printing routines.\n \n use rustc::hir::map as hir_map;\n-use rustc::session::config::{Input, PpMode, PpSourceMode};\n-use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast;\n@@ -11,6 +9,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::print as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n+use rustc_session::config::{Input, PpMode, PpSourceMode};\n+use rustc_session::Session;\n use rustc_span::FileName;\n \n use std::cell::Cell;"}, {"sha": "7d87d54194e9b7a5e195a2d9e5a7067b9d66affe", "filename": "src/librustc_error_codes/error_codes/E0308.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,6 @@\n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \"I am not a number!\";\n@@ -15,3 +11,9 @@ let x: i32 = \"I am not a number!\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n+variable. It can occur for several cases, the most common of which is a\n+mismatch in the expected type that the compiler inferred for a variable's\n+initializing expression, and the actual type explicitly assigned to the\n+variable."}, {"sha": "26f1fa267f9b5e828877dd1101c17c5ac652d94d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@\n //! There are various `Emitter` implementations that generate different output formats such as\n //! JSON and human readable output.\n //!\n-//! The output types are defined in `librustc::session::config::ErrorOutputType`.\n+//! The output types are defined in `rustc_session::config::ErrorOutputType`.\n \n use Destination::*;\n "}, {"sha": "74c304c96b9a45490d82dd6969abdc801c6580da", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,5 @@\n use crate::expand::{self, AstFragment, Invocation};\n+use crate::module::DirectoryOwnership;\n \n use rustc_ast::ast::{self, Attribute, Name, NodeId, PatKind};\n use rustc_ast::mut_visit::{self, MutVisitor};\n@@ -10,7 +11,7 @@ use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n-use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n+use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n@@ -925,19 +926,23 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut dyn Resolver,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n+    /// Called directly after having parsed an external `mod foo;` in expansion.\n+    pub(super) extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n }\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         parse_sess: &'a ParseSess,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn Resolver,\n+        extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             parse_sess,\n             ecfg,\n-            root_path: PathBuf::new(),\n             resolver,\n+            extern_mod_loaded,\n+            root_path: PathBuf::new(),\n             current_expansion: ExpansionData {\n                 id: ExpnId::root(),\n                 depth: 0,"}, {"sha": "72c09f35dfa5573f5ce6f7f1afe4dc05ae4c9cfe", "filename": "src/librustc_expand/config.rs", "status": "renamed", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fconfig.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,14 +1,5 @@\n-//! Process the potential `cfg` attributes on a module.\n-//! Also determine if the module should be included in this configuration.\n-//!\n-//! This module properly belongs in rustc_expand, but for now it's tied into\n-//! parsing, so we leave it here to avoid complicated out-of-line dependencies.\n-//!\n-//! A principled solution to this wrong location would be to implement [#64197].\n-//!\n-//! [#64197]: https://github.com/rust-lang/rust/issues/64197\n-\n-use crate::{parse_in, validate_attr};\n+//! Conditional compilation stripping.\n+\n use rustc_ast::ast::{self, AttrItem, Attribute, MetaItem};\n use rustc_ast::attr::HasAttrs;\n use rustc_ast::mut_visit::*;\n@@ -21,6 +12,7 @@ use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n };\n+use rustc_parse::{parse_in, validate_attr};\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n@@ -538,12 +530,3 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n fn is_cfg(attr: &Attribute) -> bool {\n     attr.check_name(sym::cfg)\n }\n-\n-/// Process the potential `cfg` attributes on a module.\n-/// Also determine if the module should be included in this configuration.\n-pub fn process_configure_mod(sess: &ParseSess, cfg_mods: bool, attrs: &mut Vec<Attribute>) -> bool {\n-    // Don't perform gated feature checking.\n-    let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n-    strip_unconfigured.process_cfg_attrs(attrs);\n-    !cfg_mods || strip_unconfigured.in_cfg(&attrs)\n-}", "previous_filename": "src/librustc_parse/config.rs"}, {"sha": "b6cc192cc33d6c6b86d64e4816aa8757b12252d3", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 58, "deletions": 34, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,7 +1,9 @@\n use crate::base::*;\n use crate::config::StripUnconfigured;\n+use crate::configure;\n use crate::hygiene::{ExpnData, ExpnId, ExpnKind, SyntaxContext};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n+use crate::module::{parse_external_mod, push_directory, Directory, DirectoryOwnership};\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n@@ -17,10 +19,8 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n-use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n-use rustc_parse::DirectoryOwnership;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n@@ -1427,59 +1427,83 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_items();\n         }\n \n+        let mut attrs = mem::take(&mut item.attrs); // We do this to please borrowck.\n+        let ident = item.ident;\n+        let span = item.span;\n+\n         match item.kind {\n             ast::ItemKind::MacCall(..) => {\n+                item.attrs = attrs;\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n                     ItemKind::MacCall(mac) => self\n-                        .collect(\n-                            AstFragmentKind::Items,\n-                            InvocationKind::Bang { mac, span: item.span },\n-                        )\n+                        .collect(AstFragmentKind::Items, InvocationKind::Bang { mac, span })\n                         .make_items(),\n                     _ => unreachable!(),\n                 })\n             }\n-            ast::ItemKind::Mod(ast::Mod { inner, inline, .. })\n-                if item.ident != Ident::invalid() =>\n-            {\n-                let orig_directory_ownership = self.cx.current_expansion.directory_ownership;\n+            ast::ItemKind::Mod(ref mut old_mod @ ast::Mod { .. }) if ident != Ident::invalid() => {\n+                let sess = self.cx.parse_sess;\n+                let orig_ownership = self.cx.current_expansion.directory_ownership;\n                 let mut module = (*self.cx.current_expansion.module).clone();\n-                module.mod_path.push(item.ident);\n \n-                if inline {\n-                    if let Some(path) = attr::first_attr_value_str_by_name(&item.attrs, sym::path) {\n-                        self.cx.current_expansion.directory_ownership =\n-                            DirectoryOwnership::Owned { relative: None };\n-                        module.directory.push(&*path.as_str());\n-                    } else {\n-                        module.directory.push(&*item.ident.as_str());\n-                    }\n+                let pushed = &mut false; // Record `parse_external_mod` pushing so we can pop.\n+                let dir = Directory { ownership: orig_ownership, path: module.directory };\n+                let Directory { ownership, path } = if old_mod.inline {\n+                    // Inline `mod foo { ... }`, but we still need to push directories.\n+                    item.attrs = attrs;\n+                    push_directory(ident, &item.attrs, dir)\n                 } else {\n-                    let path = self.cx.parse_sess.source_map().span_to_unmapped_path(inner);\n-                    let mut path = match path {\n-                        FileName::Real(path) => path,\n-                        other => PathBuf::from(other.to_string()),\n+                    // We have an outline `mod foo;` so we need to parse the file.\n+                    let (new_mod, dir) =\n+                        parse_external_mod(sess, ident, span, dir, &mut attrs, pushed);\n+\n+                    let krate = ast::Crate {\n+                        span: new_mod.inner,\n+                        module: new_mod,\n+                        attrs,\n+                        proc_macros: vec![],\n                     };\n-                    let directory_ownership = match path.file_name().unwrap().to_str() {\n-                        Some(\"mod.rs\") => DirectoryOwnership::Owned { relative: None },\n-                        Some(_) => DirectoryOwnership::Owned { relative: Some(item.ident) },\n-                        None => DirectoryOwnership::UnownedViaMod,\n+                    if let Some(extern_mod_loaded) = self.cx.extern_mod_loaded {\n+                        extern_mod_loaded(&krate);\n+                    }\n+\n+                    *old_mod = krate.module;\n+                    item.attrs = krate.attrs;\n+                    // File can have inline attributes, e.g., `#![cfg(...)]` & co. => Reconfigure.\n+                    item = match self.configure(item) {\n+                        Some(node) => node,\n+                        None => {\n+                            if *pushed {\n+                                sess.included_mod_stack.borrow_mut().pop();\n+                            }\n+                            return Default::default();\n+                        }\n                     };\n-                    path.pop();\n-                    module.directory = path;\n-                    self.cx.current_expansion.directory_ownership = directory_ownership;\n-                }\n+                    dir\n+                };\n \n+                // Set the module info before we flat map.\n+                self.cx.current_expansion.directory_ownership = ownership;\n+                module.directory = path;\n+                module.mod_path.push(ident);\n                 let orig_module =\n                     mem::replace(&mut self.cx.current_expansion.module, Rc::new(module));\n+\n                 let result = noop_flat_map_item(item, self);\n+\n+                // Restore the module info.\n                 self.cx.current_expansion.module = orig_module;\n-                self.cx.current_expansion.directory_ownership = orig_directory_ownership;\n+                self.cx.current_expansion.directory_ownership = orig_ownership;\n+                if *pushed {\n+                    sess.included_mod_stack.borrow_mut().pop();\n+                }\n                 result\n             }\n-\n-            _ => noop_flat_map_item(item, self),\n+            _ => {\n+                item.attrs = attrs;\n+                noop_flat_map_item(item, self)\n+            }\n         }\n     }\n "}, {"sha": "0320a275e5d20de35c773dd602a57768785551c4", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,9 +1,11 @@\n+#![feature(bool_to_option)]\n #![feature(cow_is_borrowed)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n+#![feature(try_blocks)]\n \n extern crate proc_macro as pm;\n \n@@ -33,8 +35,10 @@ pub use mbe::macro_rules::compile_declarative_macro;\n crate use rustc_span::hygiene;\n pub mod base;\n pub mod build;\n+#[macro_use]\n+pub mod config;\n pub mod expand;\n-pub use rustc_parse::config;\n+pub mod module;\n pub mod proc_macro;\n \n crate mod mbe;"}, {"sha": "3de2169f1142e41560a76cdee472263724fbd08a", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-use crate::base::{DummyResult, ExpansionData, ExtCtxt, MacResult, TTMacroExpander};\n+use crate::base::{DummyResult, ExtCtxt, MacResult, TTMacroExpander};\n use crate::base::{SyntaxExtension, SyntaxExtensionKind};\n use crate::expand::{ensure_complete_parse, parse_ast_fragment, AstFragment, AstFragmentKind};\n use crate::mbe;\n@@ -18,7 +18,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n-use rustc_parse::Directory;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n@@ -182,6 +181,8 @@ fn generic_extension<'cx>(\n     lhses: &[mbe::TokenTree],\n     rhses: &[mbe::TokenTree],\n ) -> Box<dyn MacResult + 'cx> {\n+    let sess = cx.parse_sess;\n+\n     if cx.trace_macros() {\n         let msg = format!(\"expanding `{}! {{ {} }}`\", name, pprust::tts_to_string(arg.clone()));\n         trace_macros_note(&mut cx.expansions, sp, msg);\n@@ -209,7 +210,7 @@ fn generic_extension<'cx>(\n     // hacky, but speeds up the `html5ever` benchmark significantly. (Issue\n     // 68836 suggests a more comprehensive but more complex change to deal with\n     // this situation.)\n-    let parser = parser_from_cx(&cx.current_expansion, &cx.parse_sess, arg.clone());\n+    let parser = parser_from_cx(sess, arg.clone());\n \n     for (i, lhs) in lhses.iter().enumerate() {\n         // try each arm's matchers\n@@ -222,14 +223,13 @@ fn generic_extension<'cx>(\n         // This is used so that if a matcher is not `Success(..)`ful,\n         // then the spans which became gated when parsing the unsuccessful matcher\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n-        let mut gated_spans_snapshot =\n-            mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n+        let mut gated_spans_snapshot = mem::take(&mut *sess.gated_spans.spans.borrow_mut());\n \n         match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n             Success(named_matches) => {\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n-                cx.parse_sess.gated_spans.merge(gated_spans_snapshot);\n+                sess.gated_spans.merge(gated_spans_snapshot);\n \n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n@@ -258,11 +258,7 @@ fn generic_extension<'cx>(\n                     trace_macros_note(&mut cx.expansions, sp, msg);\n                 }\n \n-                let directory = Directory {\n-                    path: cx.current_expansion.module.directory.clone(),\n-                    ownership: cx.current_expansion.directory_ownership,\n-                };\n-                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false, None);\n+                let mut p = Parser::new(sess, tts, false, None);\n                 p.root_module_name =\n                     cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n@@ -289,7 +285,7 @@ fn generic_extension<'cx>(\n \n         // The matcher was not `Success(..)`ful.\n         // Restore to the state before snapshotting and maybe try again.\n-        mem::swap(&mut gated_spans_snapshot, &mut cx.parse_sess.gated_spans.spans.borrow_mut());\n+        mem::swap(&mut gated_spans_snapshot, &mut sess.gated_spans.spans.borrow_mut());\n     }\n     drop(parser);\n \n@@ -309,8 +305,7 @@ fn generic_extension<'cx>(\n                 mbe::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n                 _ => continue,\n             };\n-            let parser = parser_from_cx(&cx.current_expansion, &cx.parse_sess, arg.clone());\n-            match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n+            match parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt) {\n                 Success(_) => {\n                     if comma_span.is_dummy() {\n                         err.note(\"you might be missing a comma\");\n@@ -392,7 +387,7 @@ pub fn compile_declarative_macro(\n         ),\n     ];\n \n-    let parser = Parser::new(sess, body, None, true, true, rustc_parse::MACRO_ARGUMENTS);\n+    let parser = Parser::new(sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n     let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram) {\n         Success(m) => m,\n         Failure(token, msg) => {\n@@ -1209,16 +1204,8 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     }\n }\n \n-fn parser_from_cx<'cx>(\n-    current_expansion: &'cx ExpansionData,\n-    sess: &'cx ParseSess,\n-    tts: TokenStream,\n-) -> Parser<'cx> {\n-    let directory = Directory {\n-        path: current_expansion.module.directory.clone(),\n-        ownership: current_expansion.directory_ownership,\n-    };\n-    Parser::new(sess, tts, Some(directory), true, true, rustc_parse::MACRO_ARGUMENTS)\n+fn parser_from_cx(sess: &ParseSess, tts: TokenStream) -> Parser<'_> {\n+    Parser::new(sess, tts, true, rustc_parse::MACRO_ARGUMENTS)\n }\n \n /// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For"}, {"sha": "2d5e4d4e8894d8127dba4811a8f706ab5fadfc1e", "filename": "src/librustc_expand/module.rs", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,306 @@\n+use rustc_ast::ast::{self, Attribute, Ident, Mod};\n+use rustc_ast::{attr, token};\n+use rustc_errors::{struct_span_err, PResult};\n+use rustc_parse::new_sub_parser_from_file;\n+use rustc_session::parse::ParseSess;\n+use rustc_span::source_map::{FileName, Span};\n+use rustc_span::symbol::sym;\n+\n+use std::path::{self, Path, PathBuf};\n+\n+#[derive(Clone)]\n+pub struct Directory {\n+    pub path: PathBuf,\n+    pub ownership: DirectoryOwnership,\n+}\n+\n+#[derive(Copy, Clone)]\n+pub enum DirectoryOwnership {\n+    Owned {\n+        // None if `mod.rs`, `Some(\"foo\")` if we're in `foo.rs`.\n+        relative: Option<ast::Ident>,\n+    },\n+    UnownedViaBlock,\n+    UnownedViaMod,\n+}\n+\n+/// Information about the path to a module.\n+// Public for rustfmt usage.\n+pub struct ModulePath<'a> {\n+    name: String,\n+    path_exists: bool,\n+    pub result: PResult<'a, ModulePathSuccess>,\n+}\n+\n+// Public for rustfmt usage.\n+pub struct ModulePathSuccess {\n+    pub path: PathBuf,\n+    pub ownership: DirectoryOwnership,\n+}\n+\n+crate fn parse_external_mod(\n+    sess: &ParseSess,\n+    id: ast::Ident,\n+    span: Span, // The span to blame on errors.\n+    Directory { mut ownership, path }: Directory,\n+    attrs: &mut Vec<Attribute>,\n+    pop_mod_stack: &mut bool,\n+) -> (Mod, Directory) {\n+    // We bail on the first error, but that error does not cause a fatal error... (1)\n+    let result: PResult<'_, _> = try {\n+        // Extract the file path and the new ownership.\n+        let mp = submod_path(sess, id, span, &attrs, ownership, &path)?;\n+        ownership = mp.ownership;\n+\n+        // Ensure file paths are acyclic.\n+        let mut included_mod_stack = sess.included_mod_stack.borrow_mut();\n+        error_on_circular_module(sess, span, &mp.path, &included_mod_stack)?;\n+        included_mod_stack.push(mp.path.clone());\n+        *pop_mod_stack = true; // We have pushed, so notify caller.\n+        drop(included_mod_stack);\n+\n+        // Actually parse the external file as amodule.\n+        let mut p0 = new_sub_parser_from_file(sess, &mp.path, Some(id.to_string()), span);\n+        let mut module = p0.parse_mod(&token::Eof)?;\n+        module.0.inline = false;\n+        module\n+    };\n+    // (1) ...instead, we return a dummy module.\n+    let (module, mut new_attrs) = result.map_err(|mut err| err.emit()).unwrap_or_default();\n+    attrs.append(&mut new_attrs);\n+\n+    // Extract the directory path for submodules of `module`.\n+    let path = sess.source_map().span_to_unmapped_path(module.inner);\n+    let mut path = match path {\n+        FileName::Real(path) => path,\n+        other => PathBuf::from(other.to_string()),\n+    };\n+    path.pop();\n+\n+    (module, Directory { ownership, path })\n+}\n+\n+fn error_on_circular_module<'a>(\n+    sess: &'a ParseSess,\n+    span: Span,\n+    path: &Path,\n+    included_mod_stack: &[PathBuf],\n+) -> PResult<'a, ()> {\n+    if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n+        let mut err = String::from(\"circular modules: \");\n+        for p in &included_mod_stack[i..] {\n+            err.push_str(&p.to_string_lossy());\n+            err.push_str(\" -> \");\n+        }\n+        err.push_str(&path.to_string_lossy());\n+        return Err(sess.span_diagnostic.struct_span_err(span, &err[..]));\n+    }\n+    Ok(())\n+}\n+\n+crate fn push_directory(\n+    id: Ident,\n+    attrs: &[Attribute],\n+    Directory { mut ownership, mut path }: Directory,\n+) -> Directory {\n+    if let Some(filename) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n+        path.push(&*filename.as_str());\n+        ownership = DirectoryOwnership::Owned { relative: None };\n+    } else {\n+        // We have to push on the current module name in the case of relative\n+        // paths in order to ensure that any additional module paths from inline\n+        // `mod x { ... }` come after the relative extension.\n+        //\n+        // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n+        // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n+        if let DirectoryOwnership::Owned { relative } = &mut ownership {\n+            if let Some(ident) = relative.take() {\n+                // Remove the relative offset.\n+                path.push(&*ident.as_str());\n+            }\n+        }\n+        path.push(&*id.as_str());\n+    }\n+    Directory { ownership, path }\n+}\n+\n+fn submod_path<'a>(\n+    sess: &'a ParseSess,\n+    id: ast::Ident,\n+    span: Span,\n+    attrs: &[Attribute],\n+    ownership: DirectoryOwnership,\n+    dir_path: &Path,\n+) -> PResult<'a, ModulePathSuccess> {\n+    if let Some(path) = submod_path_from_attr(attrs, dir_path) {\n+        let ownership = match path.file_name().and_then(|s| s.to_str()) {\n+            // All `#[path]` files are treated as though they are a `mod.rs` file.\n+            // This means that `mod foo;` declarations inside `#[path]`-included\n+            // files are siblings,\n+            //\n+            // Note that this will produce weirdness when a file named `foo.rs` is\n+            // `#[path]` included and contains a `mod foo;` declaration.\n+            // If you encounter this, it's your own darn fault :P\n+            Some(_) => DirectoryOwnership::Owned { relative: None },\n+            _ => DirectoryOwnership::UnownedViaMod,\n+        };\n+        return Ok(ModulePathSuccess { ownership, path });\n+    }\n+\n+    let relative = match ownership {\n+        DirectoryOwnership::Owned { relative } => relative,\n+        DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n+    };\n+    let ModulePath { path_exists, name, result } =\n+        default_submod_path(sess, id, span, relative, dir_path);\n+    match ownership {\n+        DirectoryOwnership::Owned { .. } => Ok(result?),\n+        DirectoryOwnership::UnownedViaBlock => {\n+            let _ = result.map_err(|mut err| err.cancel());\n+            error_decl_mod_in_block(sess, span, path_exists, &name)\n+        }\n+        DirectoryOwnership::UnownedViaMod => {\n+            let _ = result.map_err(|mut err| err.cancel());\n+            error_cannot_declare_mod_here(sess, span, path_exists, &name)\n+        }\n+    }\n+}\n+\n+fn error_decl_mod_in_block<'a, T>(\n+    sess: &'a ParseSess,\n+    span: Span,\n+    path_exists: bool,\n+    name: &str,\n+) -> PResult<'a, T> {\n+    let msg = \"Cannot declare a non-inline module inside a block unless it has a path attribute\";\n+    let mut err = sess.span_diagnostic.struct_span_err(span, msg);\n+    if path_exists {\n+        let msg = format!(\"Maybe `use` the module `{}` instead of redeclaring it\", name);\n+        err.span_note(span, &msg);\n+    }\n+    Err(err)\n+}\n+\n+fn error_cannot_declare_mod_here<'a, T>(\n+    sess: &'a ParseSess,\n+    span: Span,\n+    path_exists: bool,\n+    name: &str,\n+) -> PResult<'a, T> {\n+    let mut err =\n+        sess.span_diagnostic.struct_span_err(span, \"cannot declare a new module at this location\");\n+    if !span.is_dummy() {\n+        if let FileName::Real(src_path) = sess.source_map().span_to_filename(span) {\n+            if let Some(stem) = src_path.file_stem() {\n+                let mut dest_path = src_path.clone();\n+                dest_path.set_file_name(stem);\n+                dest_path.push(\"mod.rs\");\n+                err.span_note(\n+                    span,\n+                    &format!(\n+                        \"maybe move this module `{}` to its own directory via `{}`\",\n+                        src_path.display(),\n+                        dest_path.display()\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+    if path_exists {\n+        err.span_note(\n+            span,\n+            &format!(\"... or maybe `use` the module `{}` instead of possibly redeclaring it\", name),\n+        );\n+    }\n+    Err(err)\n+}\n+\n+/// Derive a submodule path from the first found `#[path = \"path_string\"]`.\n+/// The provided `dir_path` is joined with the `path_string`.\n+// Public for rustfmt usage.\n+pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n+    // Extract path string from first `#[path = \"path_string\"]` attribute.\n+    let path_string = attr::first_attr_value_str_by_name(attrs, sym::path)?;\n+    let path_string = path_string.as_str();\n+\n+    // On windows, the base path might have the form\n+    // `\\\\?\\foo\\bar` in which case it does not tolerate\n+    // mixed `/` and `\\` separators, so canonicalize\n+    // `/` to `\\`.\n+    #[cfg(windows)]\n+    let path_string = path_string.replace(\"/\", \"\\\\\");\n+\n+    Some(dir_path.join(&*path_string))\n+}\n+\n+/// Returns a path to a module.\n+// Public for rustfmt usage.\n+pub fn default_submod_path<'a>(\n+    sess: &'a ParseSess,\n+    id: ast::Ident,\n+    span: Span,\n+    relative: Option<ast::Ident>,\n+    dir_path: &Path,\n+) -> ModulePath<'a> {\n+    // If we're in a foo.rs file instead of a mod.rs file,\n+    // we need to look for submodules in\n+    // `./foo/<id>.rs` and `./foo/<id>/mod.rs` rather than\n+    // `./<id>.rs` and `./<id>/mod.rs`.\n+    let relative_prefix_string;\n+    let relative_prefix = if let Some(ident) = relative {\n+        relative_prefix_string = format!(\"{}{}\", ident.name, path::MAIN_SEPARATOR);\n+        &relative_prefix_string\n+    } else {\n+        \"\"\n+    };\n+\n+    let mod_name = id.name.to_string();\n+    let default_path_str = format!(\"{}{}.rs\", relative_prefix, mod_name);\n+    let secondary_path_str =\n+        format!(\"{}{}{}mod.rs\", relative_prefix, mod_name, path::MAIN_SEPARATOR);\n+    let default_path = dir_path.join(&default_path_str);\n+    let secondary_path = dir_path.join(&secondary_path_str);\n+    let default_exists = sess.source_map().file_exists(&default_path);\n+    let secondary_exists = sess.source_map().file_exists(&secondary_path);\n+\n+    let result = match (default_exists, secondary_exists) {\n+        (true, false) => Ok(ModulePathSuccess {\n+            path: default_path,\n+            ownership: DirectoryOwnership::Owned { relative: Some(id) },\n+        }),\n+        (false, true) => Ok(ModulePathSuccess {\n+            path: secondary_path,\n+            ownership: DirectoryOwnership::Owned { relative: None },\n+        }),\n+        (false, false) => {\n+            let mut err = struct_span_err!(\n+                sess.span_diagnostic,\n+                span,\n+                E0583,\n+                \"file not found for module `{}`\",\n+                mod_name,\n+            );\n+            err.help(&format!(\n+                \"to create the module `{}`, create file \\\"{}\\\"\",\n+                mod_name,\n+                default_path.display(),\n+            ));\n+            Err(err)\n+        }\n+        (true, true) => {\n+            let mut err = struct_span_err!(\n+                sess.span_diagnostic,\n+                span,\n+                E0584,\n+                \"file for module `{}` found at both {} and {}\",\n+                mod_name,\n+                default_path_str,\n+                secondary_path_str,\n+            );\n+            err.help(\"delete or rename one of them to remove the ambiguity\");\n+            Err(err)\n+        }\n+    };\n+\n+    ModulePath { name: mod_name, path_exists: default_exists || secondary_exists, result }\n+}"}, {"sha": "a11638a3bb24fb9217188f8f5961f1f199770bae", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -71,7 +71,7 @@ rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n \n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32_const(0) };\n+    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32(0) };\n \n pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n "}, {"sha": "316b31f069855e8ae69a98dbb9d04fbe4f516949", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -127,6 +127,25 @@ pub trait Map<'hir> {\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n }\n \n+/// An erased version of `Map<'hir>`, using dynamic dispatch.\n+/// NOTE: This type is effectively only usable with `NestedVisitorMap::None`.\n+pub struct ErasedMap<'hir>(&'hir dyn Map<'hir>);\n+\n+impl<'hir> Map<'hir> for ErasedMap<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.0.body(id)\n+    }\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.0.item(id)\n+    }\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.0.trait_item(id)\n+    }\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.0.impl_item(id)\n+    }\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested"}, {"sha": "fa5c72b060dcfe59e886f987d98fb69647e47f8a", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,7 +3,9 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n+#![feature(const_if_match)]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n+#![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n #![feature(specialization)]\n #![recursion_limit = \"256\"]"}, {"sha": "048a81b81bab3879f19c1be80f51dafe0ca21c13", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,8 +14,8 @@ use std::fs;\n use std::io::{self, Read};\n use std::path::Path;\n \n-use rustc::session::config::nightly_options;\n use rustc_serialize::opaque::Encoder;\n+use rustc_session::config::nightly_options;\n \n /// The first few bytes of files generated by incremental compilation.\n const FILE_MAGIC: &[u8] = b\"RSIC\";"}, {"sha": "4926f726f35935779407db28373def3eeaf241f4", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -103,11 +103,11 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n-use rustc::session::{CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n+use rustc_session::{CrateDisambiguator, Session};\n \n use std::fs as std_fs;\n use std::io;"}, {"sha": "8a11586250dec543d49909ba45584509b32b20ae", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,12 +1,12 @@\n //! Code to save/load the dep-graph from files.\n \n use rustc::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n-use rustc::session::Session;\n use rustc::ty::query::OnDiskCache;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable as RustcDecodable;\n+use rustc_session::Session;\n use std::path::Path;\n \n use super::data::*;"}, {"sha": "b465a11c99c069bdbe3c97b9088f02d05d812278", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,10 @@\n use rustc::dep_graph::{DepGraph, DepKind, WorkProduct, WorkProductId};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::join;\n use rustc_serialize::opaque::Encoder;\n use rustc_serialize::Encodable as RustcEncodable;\n+use rustc_session::Session;\n use std::fs;\n use std::path::PathBuf;\n "}, {"sha": "aa3588b284b2812455f5dd3d18195e82fc78f09d", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,8 +2,8 @@\n \n use crate::persist::fs::*;\n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n-use rustc::session::Session;\n use rustc_fs_util::link_or_copy;\n+use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n "}, {"sha": "e8aa1a209e9299812dff923723ae6e751366bf88", "filename": "src/librustc_index/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_index%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_index%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,7 @@\n #![feature(allow_internal_unstable)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(unboxed_closures)]\n #![feature(test)]\n #![feature(fn_traits)]"}, {"sha": "d8c67f6210c7500d5c1ed399fae5a91edec373e1", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -120,62 +120,44 @@ macro_rules! newtype_index {\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n-            $v const MAX: Self = Self::from_u32_const($max);\n+            $v const MAX: Self = Self::from_u32($max);\n \n             #[inline]\n-            $v fn from_usize(value: usize) -> Self {\n+            $v const fn from_usize(value: usize) -> Self {\n                 assert!(value <= ($max as usize));\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n-            $v fn from_u32(value: u32) -> Self {\n+            $v const fn from_u32(value: u32) -> Self {\n                 assert!(value <= $max);\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }\n             }\n \n-            /// Hacky variant of `from_u32` for use in constants.\n-            /// This version checks the \"max\" constraint by using an\n-            /// invalid array dereference.\n-            #[inline]\n-            $v const fn from_u32_const(value: u32) -> Self {\n-                // This will fail at const eval time unless `value <=\n-                // max` is true (in which case we get the index 0).\n-                // It will also fail at runtime, of course, but in a\n-                // kind of wacky way.\n-                let _ = [\"out of range value used\"][\n-                    !(value <= $max) as usize\n-                ];\n-\n-                unsafe {\n-                    Self { private: value }\n-                }\n-            }\n-\n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n                 Self { private: value }\n             }\n \n             /// Extracts the value of this index as an integer.\n             #[inline]\n-            $v fn index(self) -> usize {\n+            $v const fn index(self) -> usize {\n                 self.as_usize()\n             }\n \n             /// Extracts the value of this index as a `u32`.\n             #[inline]\n-            $v fn as_u32(self) -> u32 {\n+            $v const fn as_u32(self) -> u32 {\n                 self.private\n             }\n \n             /// Extracts the value of this index as a `usize`.\n             #[inline]\n-            $v fn as_usize(self) -> usize {\n+            $v const fn as_usize(self) -> usize {\n                 self.as_u32() as usize\n             }\n         }\n@@ -500,7 +482,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        $v const $name: $type = $type::from_u32_const($constant);\n+        $v const $name: $type = $type::from_u32($constant);\n         $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]"}, {"sha": "9ecd056430c204b571120e7b3e37d019410501bc", "filename": "src/librustc_infer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,6 +18,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_macros = { path = \"../librustc_macros\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "ebbfcb28db2f533244821293bf8f538c69f581c6", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -49,7 +49,7 @@ use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n-use crate::infer::{self, SuppressRegionErrors};\n+use crate::infer;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -372,17 +372,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         region_scope_tree: &region::ScopeTree,\n         errors: &Vec<RegionResolutionError<'tcx>>,\n-        suppress: SuppressRegionErrors,\n     ) {\n-        debug!(\n-            \"report_region_errors(): {} errors to start, suppress = {:?}\",\n-            errors.len(),\n-            suppress\n-        );\n-\n-        if suppress.suppressed() {\n-            return;\n-        }\n+        debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // try to pre-process the errors, which will group some of them\n         // together into a `ProcessedErrors` group:"}, {"sha": "50b324c72278e1fa83d9a67671962e900221a6e6", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,6 +3,8 @@\n \n use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::SubregionOrigin;\n use rustc::util::common::ErrorReported;\n \n use rustc_errors::struct_span_err;\n@@ -47,6 +49,15 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n         let (span, sub, sup) = self.regions()?;\n \n+        if let Some(RegionResolutionError::ConcreteFailure(\n+            SubregionOrigin::ReferenceOutlivesReferent(..),\n+            ..,\n+        )) = self.error\n+        {\n+            // This error doesn't make much sense in this case.\n+            return None;\n+        }\n+\n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.tcx().is_suitable_region(sup)?;\n "}, {"sha": "2357ee689d59e700a5d2c034b6f1d4a828bcbca3", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -17,39 +17,28 @@ mod util;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     pub fn try_report_nice_region_error(&self, error: &RegionResolutionError<'tcx>) -> bool {\n-        if let Some(tables) = self.in_progress_tables {\n-            let tables = tables.borrow();\n-            NiceRegionError::new(self, error.clone(), Some(&tables)).try_report().is_some()\n-        } else {\n-            NiceRegionError::new(self, error.clone(), None).try_report().is_some()\n-        }\n+        NiceRegionError::new(self, error.clone()).try_report().is_some()\n     }\n }\n \n pub struct NiceRegionError<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     error: Option<RegionResolutionError<'tcx>>,\n     regions: Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)>,\n-    tables: Option<&'cx ty::TypeckTables<'tcx>>,\n }\n \n impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n-    pub fn new(\n-        infcx: &'cx InferCtxt<'cx, 'tcx>,\n-        error: RegionResolutionError<'tcx>,\n-        tables: Option<&'cx ty::TypeckTables<'tcx>>,\n-    ) -> Self {\n-        Self { infcx, error: Some(error), regions: None, tables }\n+    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>, error: RegionResolutionError<'tcx>) -> Self {\n+        Self { infcx, error: Some(error), regions: None }\n     }\n \n     pub fn new_from_span(\n         infcx: &'cx InferCtxt<'cx, 'tcx>,\n         span: Span,\n         sub: ty::Region<'tcx>,\n         sup: ty::Region<'tcx>,\n-        tables: Option<&'cx ty::TypeckTables<'tcx>>,\n     ) -> Self {\n-        Self { infcx, error: None, regions: Some((span, sub, sup)), tables }\n+        Self { infcx, error: None, regions: Some((span, sub, sup)) }\n     }\n \n     fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "de72c276595f769dc5b887a087e17615498b39d3", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -51,52 +51,44 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         };\n \n         let hir = &self.tcx().hir();\n-        if let Some(hir_id) = hir.as_local_hir_id(id) {\n-            if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n-                let body = hir.body(body_id);\n-                let owner_id = hir.body_owner(body_id);\n-                let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n-                if let Some(tables) = self.tables {\n-                    body.params\n-                        .iter()\n-                        .enumerate()\n-                        .filter_map(|(index, param)| {\n-                            // May return None; sometimes the tables are not yet populated.\n-                            let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let param_ty_span = hir.span(ty_hir_id);\n-                            let ty = tables.node_type_opt(param.hir_id)?;\n-                            let mut found_anon_region = false;\n-                            let new_param_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n-                                if *r == *anon_region {\n-                                    found_anon_region = true;\n-                                    replace_region\n-                                } else {\n-                                    r\n-                                }\n-                            });\n-                            if found_anon_region {\n-                                let is_first = index == 0;\n-                                Some(AnonymousParamInfo {\n-                                    param,\n-                                    param_ty: new_param_ty,\n-                                    param_ty_span,\n-                                    bound_region,\n-                                    is_first,\n-                                })\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .next()\n+        let hir_id = hir.as_local_hir_id(id)?;\n+        let body_id = hir.maybe_body_owned_by(hir_id)?;\n+        let body = hir.body(body_id);\n+        let owner_id = hir.body_owner(body_id);\n+        let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n+        let poly_fn_sig = self.tcx().fn_sig(id);\n+        let fn_sig = self.tcx().liberate_late_bound_regions(id, &poly_fn_sig);\n+        body.params\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(index, param)| {\n+                // May return None; sometimes the tables are not yet populated.\n+                let ty = fn_sig.inputs()[index];\n+                let mut found_anon_region = false;\n+                let new_param_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n+                    if *r == *anon_region {\n+                        found_anon_region = true;\n+                        replace_region\n+                    } else {\n+                        r\n+                    }\n+                });\n+                if found_anon_region {\n+                    let ty_hir_id = fn_decl.inputs[index].hir_id;\n+                    let param_ty_span = hir.span(ty_hir_id);\n+                    let is_first = index == 0;\n+                    Some(AnonymousParamInfo {\n+                        param,\n+                        param_ty: new_param_ty,\n+                        param_ty_span,\n+                        bound_region,\n+                        is_first,\n+                    })\n                 } else {\n                     None\n                 }\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        }\n+            })\n+            .next()\n     }\n \n     // Here, we check for the case where the anonymous region"}, {"sha": "3af10e850d534fe2c3112c58339f7075672fdfbb", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,6 +7,7 @@ use crate::infer::region_constraints::RegionConstraintData;\n use crate::infer::region_constraints::VarInfos;\n use crate::infer::region_constraints::VerifyBound;\n use crate::infer::RegionVariableOrigin;\n+use crate::infer::RegionckMode;\n use crate::infer::SubregionOrigin;\n use rustc::middle::free_region::RegionRelations;\n use rustc::ty::fold::TypeFoldable;\n@@ -33,12 +34,29 @@ pub fn resolve<'tcx>(\n     region_rels: &RegionRelations<'_, 'tcx>,\n     var_infos: VarInfos,\n     data: RegionConstraintData<'tcx>,\n+    mode: RegionckMode,\n ) -> (LexicalRegionResolutions<'tcx>, Vec<RegionResolutionError<'tcx>>) {\n     debug!(\"RegionConstraintData: resolve_regions()\");\n     let mut errors = vec![];\n     let mut resolver = LexicalResolver { region_rels, var_infos, data };\n-    let values = resolver.infer_variable_values(&mut errors);\n-    (values, errors)\n+    match mode {\n+        RegionckMode::Solve => {\n+            let values = resolver.infer_variable_values(&mut errors);\n+            (values, errors)\n+        }\n+        RegionckMode::Erase { suppress_errors: false } => {\n+            // Do real inference to get errors, then erase the results.\n+            let mut values = resolver.infer_variable_values(&mut errors);\n+            let re_erased = region_rels.tcx.lifetimes.re_erased;\n+\n+            values.values.iter_mut().for_each(|v| *v = VarValue::Value(re_erased));\n+            (values, errors)\n+        }\n+        RegionckMode::Erase { suppress_errors: true } => {\n+            // Skip region inference entirely.\n+            (resolver.erased_data(region_rels.tcx), Vec::new())\n+        }\n+    }\n }\n \n /// Contains the result of lexical region resolution. Offers methods\n@@ -163,6 +181,19 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n+    /// An erased version of the lexical region resolutions. Used when we're\n+    /// erasing regions and suppressing errors: in item bodies with\n+    /// `-Zborrowck=mir`.\n+    fn erased_data(&self, tcx: TyCtxt<'tcx>) -> LexicalRegionResolutions<'tcx> {\n+        LexicalRegionResolutions {\n+            error_region: tcx.lifetimes.re_static,\n+            values: IndexVec::from_elem_n(\n+                VarValue::Value(tcx.lifetimes.re_erased),\n+                self.num_vars(),\n+            ),\n+        }\n+    }\n+\n     fn dump_constraints(&self, free_regions: &RegionRelations<'_, 'tcx>) {\n         debug!(\"----() Start constraint listing (context={:?}) ()----\", free_regions.context);\n         for (idx, (constraint, _)) in self.data.constraints.iter().enumerate() {"}, {"sha": "391fce946bf43b37fa9b0bddedeb0d39f7213ff5", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,6 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n-pub use rustc::ty::IntVarValue;\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n \n@@ -16,24 +15,25 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::middle::region;\n use rustc::mir;\n use rustc::mir::interpret::ConstEvalResult;\n-use rustc::session::config::BorrowckMode;\n use rustc::traits::select;\n use rustc::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n+pub use rustc::ty::IntVarValue;\n use rustc::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc::ty::{ConstVid, FloatVid, IntVid, TyVid};\n-\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::BorrowckMode;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n+\n use std::cell::{Cell, Ref, RefCell};\n use std::collections::BTreeMap;\n use std::fmt;\n@@ -79,31 +79,50 @@ pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<'tcx, T> = Result<T, FixupError<'tcx>>; // \"fixup result\"\n \n-/// A flag that is used to suppress region errors. This is normally\n-/// false, but sometimes -- when we are doing region checks that the\n-/// NLL borrow checker will also do -- it might be set to true.\n-#[derive(Copy, Clone, Default, Debug)]\n-pub struct SuppressRegionErrors {\n-    suppressed: bool,\n+/// How we should handle region solving.\n+///\n+/// This is used so that the region values inferred by HIR region solving are\n+/// not exposed, and so that we can avoid doing work in HIR typeck that MIR\n+/// typeck will also do.\n+#[derive(Copy, Clone, Debug)]\n+pub enum RegionckMode {\n+    /// The default mode: report region errors, don't erase regions.\n+    Solve,\n+    /// Erase the results of region after solving.\n+    Erase {\n+        /// A flag that is used to suppress region errors, when we are doing\n+        /// region checks that the NLL borrow checker will also do -- it might\n+        /// be set to true.\n+        suppress_errors: bool,\n+    },\n+}\n+\n+impl Default for RegionckMode {\n+    fn default() -> Self {\n+        RegionckMode::Solve\n+    }\n }\n \n-impl SuppressRegionErrors {\n+impl RegionckMode {\n     pub fn suppressed(self) -> bool {\n-        self.suppressed\n+        match self {\n+            Self::Solve => false,\n+            Self::Erase { suppress_errors } => suppress_errors,\n+        }\n     }\n \n     /// Indicates that the MIR borrowck will repeat these region\n     /// checks, so we should ignore errors if NLL is (unconditionally)\n     /// enabled.\n-    pub fn when_nll_is_enabled(tcx: TyCtxt<'_>) -> Self {\n+    pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {\n         // FIXME(Centril): Once we actually remove `::Migrate` also make\n         // this always `true` and then proceed to eliminate the dead code.\n         match tcx.borrowck_mode() {\n             // If we're on Migrate mode, report AST region errors\n-            BorrowckMode::Migrate => SuppressRegionErrors { suppressed: false },\n+            BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },\n \n             // If we're on MIR, don't report AST region errors as they should be reported by NLL\n-            BorrowckMode::Mir => SuppressRegionErrors { suppressed: true },\n+            BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },\n         }\n     }\n }\n@@ -1207,29 +1226,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         region_context: DefId,\n         region_map: &region::ScopeTree,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-        suppress: SuppressRegionErrors,\n+        mode: RegionckMode,\n     ) {\n         assert!(\n             self.is_tainted_by_errors() || self.inner.borrow().region_obligations.is_empty(),\n             \"region_obligations not empty: {:#?}\",\n             self.inner.borrow().region_obligations\n         );\n-\n-        let region_rels = &RegionRelations::new(\n-            self.tcx,\n-            region_context,\n-            region_map,\n-            outlives_env.free_region_map(),\n-        );\n         let (var_infos, data) = self\n             .inner\n             .borrow_mut()\n             .region_constraints\n             .take()\n             .expect(\"regions already resolved\")\n             .into_infos_and_data();\n+\n+        let region_rels = &RegionRelations::new(\n+            self.tcx,\n+            region_context,\n+            region_map,\n+            outlives_env.free_region_map(),\n+        );\n+\n         let (lexical_region_resolutions, errors) =\n-            lexical_region_resolve::resolve(region_rels, var_infos, data);\n+            lexical_region_resolve::resolve(region_rels, var_infos, data, mode);\n \n         let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));\n         assert!(old_value.is_none());\n@@ -1240,7 +1260,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // this infcx was in use.  This is totally hokey but\n             // otherwise we have a hard time separating legit region\n             // errors from silly ones.\n-            self.report_region_errors(region_map, &errors, suppress);\n+            self.report_region_errors(region_map, &errors);\n         }\n     }\n "}, {"sha": "c5ebcf0696fba163a68f8074bd7ba32902ab33b2", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,6 @@\n pub use crate::passes::BoxedResolver;\n use crate::util;\n \n-use rustc::lint;\n-use rustc::session::config::{self, ErrorOutputType, Input, OutputFilenames};\n-use rustc::session::early_error;\n-use rustc::session::{DiagnosticOutput, Session};\n use rustc::ty;\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast::{self, MetaItemKind};\n@@ -16,7 +12,11 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_lint::LintStore;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::early_error;\n+use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n+use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::edition;\n use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;"}, {"sha": "ee323b204b7a01f28a3b965028d97dfc2f282a36", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,13 +6,8 @@ use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::Definitions;\n-use rustc::lint;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n-use rustc::session::config::{PpMode, PpSourceMode};\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n@@ -34,6 +29,11 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n+use rustc_session::config::{PpMode, PpSourceMode};\n+use rustc_session::lint;\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_trait_selection::traits;\n@@ -210,14 +210,7 @@ pub fn register_plugins<'a>(\n     Ok((krate, Lrc::new(lint_store)))\n }\n \n-fn configure_and_expand_inner<'a>(\n-    sess: &'a Session,\n-    lint_store: &'a LintStore,\n-    mut krate: ast::Crate,\n-    crate_name: &str,\n-    resolver_arenas: &'a ResolverArenas<'a>,\n-    metadata_loader: &'a MetadataLoaderDyn,\n-) -> Result<(ast::Crate, Resolver<'a>)> {\n+fn pre_expansion_lint(sess: &Session, lint_store: &LintStore, krate: &ast::Crate) {\n     sess.time(\"pre_AST_expansion_lint_checks\", || {\n         rustc_lint::check_ast_crate(\n             sess,\n@@ -228,6 +221,17 @@ fn configure_and_expand_inner<'a>(\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n         );\n     });\n+}\n+\n+fn configure_and_expand_inner<'a>(\n+    sess: &'a Session,\n+    lint_store: &'a LintStore,\n+    mut krate: ast::Crate,\n+    crate_name: &str,\n+    resolver_arenas: &'a ResolverArenas<'a>,\n+    metadata_loader: &'a MetadataLoaderDyn,\n+) -> Result<(ast::Crate, Resolver<'a>)> {\n+    pre_expansion_lint(sess, lint_store, &krate);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n     rustc_builtin_macros::register_builtin_macros(&mut resolver, sess.edition());\n@@ -291,7 +295,8 @@ fn configure_and_expand_inner<'a>(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n+        let extern_mod_loaded = |k: &ast::Crate| pre_expansion_lint(sess, lint_store, k);\n+        let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver, Some(&extern_mod_loaded));\n \n         // Expand macros now!\n         let krate = sess.time(\"expand_crate\", || ecx.monotonic_expander().expand_crate(krate));"}, {"sha": "3514829dca7f777034b4a87c90e073f719195db8", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,8 +3,6 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::session::config::{OutputFilenames, OutputType};\n-use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n@@ -15,6 +13,8 @@ use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n+use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_session::Session;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::mem;"}, {"sha": "db5ada9291435f5b8c9f7b02c1488df1dd6bc419", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,16 +2,16 @@ extern crate getopts;\n \n use crate::interface::parse_cfgspecs;\n \n-use rustc::lint::Level;\n use rustc::middle::cstore;\n-use rustc::session::config::{build_configuration, build_session_options, to_crate_config};\n-use rustc::session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n-use rustc::session::config::{ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n-use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n-use rustc::session::search_paths::SearchPath;\n-use rustc::session::{build_session, Session};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n+use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n+use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n+use rustc_session::config::{ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n+use rustc_session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n+use rustc_session::lint::Level;\n+use rustc_session::search_paths::SearchPath;\n+use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};"}, {"sha": "5c4de9e7155c63c30f4a34cd86527d771fbb514a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,4 @@\n use log::info;\n-use rustc::lint;\n use rustc::ty;\n use rustc_ast::ast::{AttrVec, BlockCheckMode};\n use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n@@ -18,7 +17,7 @@ use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n-use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};"}, {"sha": "408031028b102dac8f11d1e594a81560161e47fd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -22,7 +22,6 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc::hir::map::Map;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_ast::ast::{self, Expr};\n@@ -1071,7 +1070,7 @@ impl TypeAliasBounds {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "34da29c9747775b61d47aebb114e80e243ddff56", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,7 +18,7 @@ use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;\n-use rustc_session::lint::{LintBuffer, LintPass};\n+use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::Span;\n \n@@ -37,13 +37,7 @@ struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     fn check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.context.buffered.take(id) {\n-            let rustc_session::lint::BufferedEarlyLint {\n-                span,\n-                msg,\n-                node_id: _,\n-                lint_id,\n-                diagnostic,\n-            } = early_lint;\n+            let BufferedEarlyLint { span, msg, node_id: _, lint_id, diagnostic } = early_lint;\n             self.context.lookup_with_diagnostics(\n                 lint_id.lint,\n                 Some(span),\n@@ -326,11 +320,9 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     lint_buffer: Option<LintBuffer>,\n     builtin_lints: T,\n ) {\n-    let mut passes: Vec<_> = if pre_expansion {\n-        lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect()\n-    } else {\n-        lint_store.early_passes.iter().map(|p| (p)()).collect()\n-    };\n+    let passes =\n+        if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n+    let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {"}, {"sha": "088cba83ef998164cb7c1f11fb621709a01a44f6", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -26,6 +26,7 @@ stable_deref_trait = \"1.0.0\"\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"errhandlingapi\", \"libloaderapi\"] }"}, {"sha": "9616e1249dc9874c2f69e8567ae3781a0a6d38f7", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,19 +6,18 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::session::config;\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n-use rustc_ast::ast;\n-use rustc_ast::attr;\n use rustc_ast::expand::allocator::{global_allocator_spans, AllocatorKind};\n+use rustc_ast::{ast, attr};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config;\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "4cfaf03b7a5f63ae59e9a33b41271768695d98ee", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -56,10 +56,10 @@ use crate::creader::CStore;\n use rustc::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n use rustc::middle::cstore::{self, DepKind};\n use rustc::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n-use rustc::session::config;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n+use rustc_session::config;\n use rustc_target::spec::PanicStrategy;\n \n crate fn calculate(tcx: TyCtxt<'_>) -> Dependencies {"}, {"sha": "e401dc0f6e7d49d698c1fd17143f42c219c90a94", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -31,7 +31,7 @@ pub mod dynamic_lib;\n pub mod locator;\n \n pub fn validate_crate_name(\n-    sess: Option<&rustc::session::Session>,\n+    sess: Option<&rustc_session::Session>,\n     s: &str,\n     sp: Option<rustc_span::Span>,\n ) {"}, {"sha": "1ede629e7ef7dc9af47c52d7aa5427c4df418dfe", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -216,13 +216,13 @@ use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n-use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::{config, CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::{config, CrateDisambiguator, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};"}, {"sha": "64bbf393ba0f1ca9e4d429703581b52ceb3bd10a", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,12 +1,12 @@\n use rustc::middle::cstore::{self, NativeLibrary};\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;"}, {"sha": "cf0f88160586678bb72fe584b1b598cc424ca5af", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,36 +14,35 @@ use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc::mir::{self, interpret, BodyAndCache, Promoted};\n-use rustc::session::Session;\n use rustc::ty::codec::TyDecoder;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::common::record_time;\n+use rustc_ast::ast::{self, Ident};\n+use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AtomicCell, Lock, LockGuard, Lrc, Once};\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n+use rustc_session::Session;\n+use rustc_span::source_map::{self, respan, Spanned};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n \n+use log::debug;\n+use proc_macro::bridge::client::ProcMacro;\n use std::io;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::u32;\n \n-use log::debug;\n-use proc_macro::bridge::client::ProcMacro;\n-use rustc_ast::ast::{self, Ident};\n-use rustc_attr as attr;\n-use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n-use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n-use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n-use rustc_span::source_map::{self, respan, Spanned};\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n-\n pub use cstore_impl::{provide, provide_extern};\n \n mod cstore_impl;"}, {"sha": "cc2bd51f92f3e132889605a34621ec60c6cdf81d", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -10,7 +10,6 @@ use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::middle::cstore::{CrateSource, CrateStore, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n-use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n@@ -20,6 +19,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::Symbol;\n "}, {"sha": "90179520a623313c05af550bf11898a629b7fd9f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,33 +12,31 @@ use rustc::traits::specialization_graph;\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, SymbolName, Ty, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n-\n-use rustc::session::config::{self, CrateType};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n-\n-use log::{debug, trace};\n-use rustc_ast::ast;\n-use rustc_ast::attr;\n+use rustc_session::config::{self, CrateType};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName, SourceFile, Span};\n+\n+use log::{debug, trace};\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n use std::u32;\n \n-use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-\n struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "defa306b6d6feec2bf790b4a4c3fd14cd12a1ce4", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,8 +7,6 @@ use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLib\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir;\n-use rustc::session::config::SymbolManglingVersion;\n-use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n use rustc_ast::ast::{self, MacroDef};\n use rustc_attr as attr;\n@@ -19,6 +17,8 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::Encoder;\n+use rustc_session::config::SymbolManglingVersion;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span};"}, {"sha": "256a80076b92338ddc61f89859f2fdccf4e51e7e", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -27,6 +27,7 @@ rustc_infer = { path = \"../librustc_infer\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "494b6421fd5d49bcf9e9eae433e76813650b0b58", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -284,8 +284,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         debug!(\"report_region_error: category={:?} {:?}\", category, span);\n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n-            let tables = self.infcx.tcx.typeck_tables_of(self.mir_def_id);\n-            let nice = NiceRegionError::new_from_span(self.infcx, span, o, f, Some(tables));\n+            let nice = NiceRegionError::new_from_span(self.infcx, span, o, f);\n             if let Some(diag) = nice.try_report_from_nll() {\n                 diag.buffer(&mut self.errors_buffer);\n                 return;"}, {"sha": "6c1901455fda95f4868f550e6c65862af19c59e3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,7 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use rustc::lint::builtin::MUTABLE_BORROW_RESERVATION_CONFLICT;\n-use rustc::lint::builtin::UNUSED_MUT;\n use rustc::mir::{\n     read_only, traversal, Body, BodyAndCache, ClearCrossCrate, Local, Location, Mutability,\n     Operand, Place, PlaceElem, PlaceRef, ReadOnlyBodyAndCache,\n@@ -11,7 +9,7 @@ use rustc::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKi\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, RegionVid, TyCtxt};\n-\n+use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n@@ -20,6 +18,8 @@ use rustc_hir::{def_id::DefId, HirId, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n+use rustc_span::{Span, DUMMY_SP};\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -28,9 +28,6 @@ use std::collections::BTreeMap;\n use std::mem;\n use std::rc::Rc;\n \n-use rustc_ast::ast::Name;\n-use rustc_span::{Span, DUMMY_SP};\n-\n use crate::dataflow;\n use crate::dataflow::generic::{Analysis, BorrowckFlowState as Flows, BorrowckResults};\n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};"}, {"sha": "28889486c383b55150ced9e80d4c73fc60b31f21", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -240,7 +240,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Ok(Some(match ecx.load_mir(instance.def, None) {\n             Ok(body) => *body,\n             Err(err) => {\n-                if let err_unsup!(NoMirFor(ref path)) = err.kind {\n+                if let err_unsup!(NoMirFor(did)) = err.kind {\n+                    let path = ecx.tcx.def_path_str(did);\n                     return Err(ConstEvalErrKind::NeedsRfc(format!(\n                         \"calling extern function `{}`\",\n                         path"}, {"sha": "dd0f9ff75b9fe45627ad10c2af088b1b927d3aa7", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,16 +1,14 @@\n+use rustc::mir::traversal;\n+use rustc::mir::{self, BasicBlock, BasicBlockData, Body, Location, Statement, Terminator};\n+use rustc::ty::{self, TyCtxt};\n use rustc_ast::ast::{self, MetaItem};\n use rustc_ast_pretty::pprust;\n-use rustc_span::symbol::{sym, Symbol};\n-\n use rustc_data_structures::work_queue::WorkQueue;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::Idx;\n-\n-use rustc::mir::traversal;\n-use rustc::mir::{self, BasicBlock, BasicBlockData, Body, Location, Statement, Terminator};\n-use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n-use rustc_hir::def_id::DefId;\n+use rustc_session::Session;\n+use rustc_span::symbol::{sym, Symbol};\n \n use std::borrow::Borrow;\n use std::fmt;"}, {"sha": "481719bfa8e6338c91f73a48a03f3b3c66d1f5d2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -138,7 +138,7 @@ pub enum LocalValue<Tag = (), Id = AllocId> {\n impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n-            LocalValue::Dead => throw_unsup!(DeadLocal),\n+            LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Uninitialized => {\n                 bug!(\"The type checker should prevent reading from a never-written local\")\n             }\n@@ -152,7 +152,7 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n         &mut self,\n     ) -> InterpResult<'tcx, Result<&mut LocalValue<Tag>, MemPlace<Tag>>> {\n         match self.value {\n-            LocalValue::Dead => throw_unsup!(DeadLocal),\n+            LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n             ref mut local @ LocalValue::Live(Operand::Immediate(_))\n             | ref mut local @ LocalValue::Uninitialized => Ok(Ok(local)),\n@@ -326,7 +326,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if self.tcx.is_mir_available(did) {\n                     Ok(self.tcx.optimized_mir(did).unwrap_read_only())\n                 } else {\n-                    throw_unsup!(NoMirFor(self.tcx.def_path_str(def_id)))\n+                    throw_unsup!(NoMirFor(def_id))\n                 }\n             }\n             _ => Ok(self.tcx.instance_mir(instance)),"}, {"sha": "90b8a4932991e2b44499c2a4105a257c4ecb1dba", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -327,7 +327,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n         if let Err(error) = interned {\n             // This can happen when e.g. the tag of an enum is not a valid discriminant. We do have\n             // to read enum discriminants in order to find references in enum variant fields.\n-            if let err_unsup!(ValidationFailure(_)) = error.kind {\n+            if let err_ub!(ValidationFailure(_)) = error.kind {\n                 let err = crate::const_eval::error_to_const_error(&ecx, error);\n                 match err.struct_error(\n                     ecx.tcx,\n@@ -390,7 +390,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             }\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n-            throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n+            throw_ub_format!(\"encountered dangling pointer in final constant\")\n         } else if ecx.tcx.alloc_map.lock().get(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't marked\n             // as dangling by local memory."}, {"sha": "03aedad0d988da39935fa9682b6d2aa807ea358b", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -135,7 +135,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.force_bits(val, layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => throw_unsup!(TypeNotPrimitive(ty)),\n+                    _ => bug!(\"{} called on invalid type {:?}\", intrinsic_name, ty),\n                 };\n                 let (nonzero, intrinsic_name) = match intrinsic_name {\n                     sym::cttz_nonzero => (true, sym::cttz),\n@@ -246,9 +246,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let layout = self.layout_of(substs.type_at(0))?;\n                     let r_val = self.force_bits(r.to_scalar()?, layout.size)?;\n                     if let sym::unchecked_shl | sym::unchecked_shr = intrinsic_name {\n-                        throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n+                        throw_ub_format!(\"overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n                     } else {\n-                        throw_ub_format!(\"Overflow executing `{}`\", intrinsic_name);\n+                        throw_ub_format!(\"overflow executing `{}`\", intrinsic_name);\n                     }\n                 }\n                 self.write_scalar(val, dest)?;"}, {"sha": "c9d32f6240037ee43691a0a5f568679bc98a1357", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -286,8 +286,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         int: u64,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         Err((if int == 0 {\n-            err_unsup!(InvalidNullPointerUsage)\n+            // This is UB, seriously.\n+            err_ub!(InvalidIntPointerUsage(0))\n         } else {\n+            // This is just something we cannot support during const-eval.\n             err_unsup!(ReadBytesAsPointer)\n         })\n         .into())"}, {"sha": "5b2cd89a122845f13cd512465cdb60f8806e4968", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -215,7 +215,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         if ptr.offset.bytes() != 0 {\n-            throw_unsup!(ReallocateNonBasePtr)\n+            throw_ub_format!(\n+                \"reallocating {:?} which does not point to the beginning of an object\",\n+                ptr\n+            );\n         }\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n@@ -251,37 +254,43 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         trace!(\"deallocating: {}\", ptr.alloc_id);\n \n         if ptr.offset.bytes() != 0 {\n-            throw_unsup!(DeallocateNonBasePtr)\n+            throw_ub_format!(\n+                \"deallocating {:?} which does not point to the beginning of an object\",\n+                ptr\n+            );\n         }\n \n         let (alloc_kind, mut alloc) = match self.alloc_map.remove(&ptr.alloc_id) {\n             Some(alloc) => alloc,\n             None => {\n                 // Deallocating static memory -- always an error\n                 return Err(match self.tcx.alloc_map.lock().get(ptr.alloc_id) {\n-                    Some(GlobalAlloc::Function(..)) => err_unsup!(DeallocatedWrongMemoryKind(\n-                        \"function\".to_string(),\n-                        format!(\"{:?}\", kind),\n-                    )),\n-                    Some(GlobalAlloc::Static(..)) | Some(GlobalAlloc::Memory(..)) => err_unsup!(\n-                        DeallocatedWrongMemoryKind(\"static\".to_string(), format!(\"{:?}\", kind))\n-                    ),\n-                    None => err_unsup!(DoubleFree),\n+                    Some(GlobalAlloc::Function(..)) => err_ub_format!(\"deallocating a function\"),\n+                    Some(GlobalAlloc::Static(..)) | Some(GlobalAlloc::Memory(..)) => {\n+                        err_ub_format!(\"deallocating static memory\")\n+                    }\n+                    None => err_ub!(PointerUseAfterFree(ptr.alloc_id)),\n                 }\n                 .into());\n             }\n         };\n \n         if alloc_kind != kind {\n-            throw_unsup!(DeallocatedWrongMemoryKind(\n-                format!(\"{:?}\", alloc_kind),\n-                format!(\"{:?}\", kind),\n-            ))\n+            throw_ub_format!(\n+                \"deallocating `{:?}` memory using `{:?}` deallocation operation\",\n+                alloc_kind,\n+                kind\n+            );\n         }\n         if let Some((size, align)) = old_size_and_align {\n             if size != alloc.size || align != alloc.align {\n-                let bytes = alloc.size;\n-                throw_unsup!(IncorrectAllocationInformation(size, bytes, align, alloc.align))\n+                throw_ub_format!(\n+                    \"incorrect layout on deallocation: allocation has size {} and alignment {}, but gave size {} and alignment {}\",\n+                    alloc.size.bytes(),\n+                    alloc.align.bytes(),\n+                    size.bytes(),\n+                    align.bytes(),\n+                )\n             }\n         }\n \n@@ -338,7 +347,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             } else {\n                 // The biggest power of two through which `offset` is divisible.\n                 let offset_pow2 = 1 << offset.trailing_zeros();\n-                throw_unsup!(AlignmentCheckFailed {\n+                throw_ub!(AlignmentCheckFailed {\n                     has: Align::from_bytes(offset_pow2).unwrap(),\n                     required: align,\n                 })\n@@ -360,7 +369,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 assert!(size.bytes() == 0);\n                 // Must be non-NULL.\n                 if bits == 0 {\n-                    throw_unsup!(InvalidNullPointerUsage)\n+                    throw_ub!(InvalidIntPointerUsage(0))\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {\n@@ -375,7 +384,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                end_ptr.check_inbounds_alloc(allocation_size, msg)?;\n+                if end_ptr.offset > allocation_size {\n+                    // equal is okay!\n+                    throw_ub!(PointerOutOfBounds { ptr: end_ptr.erase_tag(), msg, allocation_size })\n+                }\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {\n@@ -385,7 +397,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         // got picked we might be aligned even if this check fails.\n                         // We instead have to fall back to converting to an integer and checking\n                         // the \"real\" alignment.\n-                        throw_unsup!(AlignmentCheckFailed { has: alloc_align, required: align });\n+                        throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });\n                     }\n                     check_offset_align(ptr.offset.bytes(), align)?;\n                 }\n@@ -402,7 +414,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let (size, _align) = self\n             .get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)\n             .expect(\"alloc info with MaybeDead cannot fail\");\n-        ptr.check_inbounds_alloc(size, CheckInAllocMsg::NullPointerTest).is_err()\n+        // If the pointer is out-of-bounds, it may be null.\n+        // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n+        ptr.offset > size\n     }\n }\n \n@@ -432,13 +446,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let alloc = match alloc {\n             Some(GlobalAlloc::Memory(mem)) => Cow::Borrowed(mem),\n-            Some(GlobalAlloc::Function(..)) => throw_unsup!(DerefFunctionPointer),\n-            None => throw_unsup!(DanglingPointerDeref),\n+            Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),\n+            None => throw_ub!(PointerUseAfterFree(id)),\n             Some(GlobalAlloc::Static(def_id)) => {\n                 // We got a \"lazy\" static that has not been computed yet.\n                 if tcx.is_foreign_item(def_id) {\n                     trace!(\"get_static_alloc: foreign item {:?}\", def_id);\n-                    throw_unsup!(ReadForeignStatic)\n+                    throw_unsup!(ReadForeignStatic(def_id))\n                 }\n                 trace!(\"get_static_alloc: Need to compute {:?}\", def_id);\n                 let instance = Instance::mono(tcx.tcx, def_id);\n@@ -524,7 +538,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             // to give us a cheap reference.\n             let alloc = Self::get_static_alloc(memory_extra, tcx, id)?;\n             if alloc.mutability == Mutability::Not {\n-                throw_unsup!(ModifiedConstantMemory)\n+                throw_ub!(WriteToReadOnly(id))\n             }\n             match M::STATIC_KIND {\n                 Some(kind) => Ok((MemoryKind::Machine(kind), alloc.into_owned())),\n@@ -538,7 +552,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Ok(a) => {\n                 let a = &mut a.1;\n                 if a.mutability == Mutability::Not {\n-                    throw_unsup!(ModifiedConstantMemory)\n+                    throw_ub!(WriteToReadOnly(id))\n                 }\n                 Ok(a)\n             }\n@@ -568,7 +582,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if self.get_fn_alloc(id).is_some() {\n             return if let AllocCheck::Dereferenceable = liveness {\n                 // The caller requested no function pointers.\n-                throw_unsup!(DerefFunctionPointer)\n+                throw_ub!(DerefFunctionPointer(id))\n             } else {\n                 Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n             };\n@@ -596,12 +610,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 if let AllocCheck::MaybeDead = liveness {\n                     // Deallocated pointers are allowed, we should be able to find\n                     // them in the map.\n-                    Ok(*self.dead_alloc_map.get(&id).expect(\n-                        \"deallocated pointers should all be recorded in \\\n-                            `dead_alloc_map`\",\n-                    ))\n+                    Ok(*self\n+                        .dead_alloc_map\n+                        .get(&id)\n+                        .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n                 } else {\n-                    throw_unsup!(DanglingPointerDeref)\n+                    throw_ub!(PointerUseAfterFree(id))\n                 }\n             }\n         }\n@@ -626,10 +640,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n         let ptr = self.force_ptr(ptr)?; // We definitely need a pointer value.\n         if ptr.offset.bytes() != 0 {\n-            throw_unsup!(InvalidFunctionPointer)\n+            throw_ub!(InvalidFunctionPointer(ptr.erase_tag()))\n         }\n         let id = M::canonical_alloc_id(self, ptr.alloc_id);\n-        self.get_fn_alloc(id).ok_or_else(|| err_unsup!(ExecuteMemory).into())\n+        self.get_fn_alloc(id).ok_or_else(|| err_ub!(InvalidFunctionPointer(ptr.erase_tag())).into())\n     }\n \n     pub fn mark_immutable(&mut self, id: AllocId) -> InterpResult<'tcx> {"}, {"sha": "316cf2ee41918fe067a04fec8c4b97300e3b780c", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -343,7 +343,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len as u64))?;\n         let str = ::std::str::from_utf8(bytes)\n-            .map_err(|err| err_unsup!(ValidationFailure(err.to_string())))?;\n+            .map_err(|err| err_ub_format!(\"this string is not valid UTF-8: {}\", err))?;\n         Ok(str)\n     }\n \n@@ -457,7 +457,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         layout: Option<TyLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let base_op = match place.local {\n-            mir::RETURN_PLACE => throw_unsup!(ReadFromReturnPointer),\n+            mir::RETURN_PLACE => throw_ub!(ReadFromReturnPlace),\n             local => {\n                 // Do not use the layout passed in as argument if the base we are looking at\n                 // here is not the entire place."}, {"sha": "107cfee5aceb50f6b3ecb21887ee8e82de138a8b", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -926,7 +926,7 @@ where\n             // most likey we *are* running `typeck` right now. Investigate whether we can bail out\n             // on `typeck_tables().has_errors` at all const eval entry points.\n             debug!(\"Size mismatch when transmuting!\\nsrc: {:#?}\\ndest: {:#?}\", src, dest);\n-            throw_unsup!(TransmuteSizeDiff(src.layout.ty, dest.layout.ty));\n+            throw_inval!(TransmuteSizeDiff(src.layout.ty, dest.layout.ty));\n         }\n         // Unsized copies rely on interpreting `src.meta` with `dest.layout`, we want\n         // to avoid that here."}, {"sha": "22a081a9c8e0be9af49b682c8dbe25ad83b560c5", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 109, "deletions": 101, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -172,13 +172,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             trace!(\"Skipping callee ZST\");\n             return Ok(());\n         }\n-        let caller_arg = caller_arg.next().ok_or_else(|| err_unsup!(FunctionArgCountMismatch))?;\n+        let caller_arg = caller_arg.next().ok_or_else(|| {\n+            err_ub_format!(\"calling a function with fewer arguments than it requires\")\n+        })?;\n         if rust_abi {\n             assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }\n         // Now, check\n         if !Self::check_argument_compat(rust_abi, caller_arg.layout, callee_arg.layout) {\n-            throw_unsup!(FunctionArgMismatch(caller_arg.layout.ty, callee_arg.layout.ty))\n+            throw_ub_format!(\n+                \"calling a function with argument of type {:?} passing data of type {:?}\",\n+                callee_arg.layout.ty,\n+                caller_arg.layout.ty\n+            )\n         }\n         // We allow some transmutes here\n         self.copy_op_transmute(caller_arg, callee_arg)\n@@ -223,7 +229,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 abi => abi,\n             };\n             if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n-                throw_unsup!(FunctionAbiMismatch(caller_abi, callee_abi))\n+                throw_ub_format!(\n+                    \"calling a function with ABI {:?} using caller ABI {:?}\",\n+                    callee_abi,\n+                    caller_abi\n+                )\n             }\n         }\n \n@@ -253,110 +263,108 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },\n                 )?;\n \n-                // We want to pop this frame again in case there was an error, to put\n-                // the blame in the right location.  Until the 2018 edition is used in\n-                // the compiler, we have to do this with an immediately invoked function.\n-                let res =\n-                    (|| {\n-                        trace!(\n-                            \"caller ABI: {:?}, args: {:#?}\",\n-                            caller_abi,\n-                            args.iter()\n-                                .map(|arg| (arg.layout.ty, format!(\"{:?}\", **arg)))\n-                                .collect::<Vec<_>>()\n-                        );\n-                        trace!(\n-                            \"spread_arg: {:?}, locals: {:#?}\",\n-                            body.spread_arg,\n-                            body.args_iter()\n-                                .map(|local| (\n-                                    local,\n-                                    self.layout_of_local(self.frame(), local, None).unwrap().ty\n-                                ))\n-                                .collect::<Vec<_>>()\n-                        );\n-\n-                        // Figure out how to pass which arguments.\n-                        // The Rust ABI is special: ZST get skipped.\n-                        let rust_abi = match caller_abi {\n-                            Abi::Rust | Abi::RustCall => true,\n-                            _ => false,\n+                // If an error is raised here, pop the frame again to get an accurate backtrace.\n+                // To this end, we wrap it all in a `try` block.\n+                let res: InterpResult<'tcx> = try {\n+                    trace!(\n+                        \"caller ABI: {:?}, args: {:#?}\",\n+                        caller_abi,\n+                        args.iter()\n+                            .map(|arg| (arg.layout.ty, format!(\"{:?}\", **arg)))\n+                            .collect::<Vec<_>>()\n+                    );\n+                    trace!(\n+                        \"spread_arg: {:?}, locals: {:#?}\",\n+                        body.spread_arg,\n+                        body.args_iter()\n+                            .map(|local| (\n+                                local,\n+                                self.layout_of_local(self.frame(), local, None).unwrap().ty\n+                            ))\n+                            .collect::<Vec<_>>()\n+                    );\n+\n+                    // Figure out how to pass which arguments.\n+                    // The Rust ABI is special: ZST get skipped.\n+                    let rust_abi = match caller_abi {\n+                        Abi::Rust | Abi::RustCall => true,\n+                        _ => false,\n+                    };\n+                    // We have two iterators: Where the arguments come from,\n+                    // and where they go to.\n+\n+                    // For where they come from: If the ABI is RustCall, we untuple the\n+                    // last incoming argument.  These two iterators do not have the same type,\n+                    // so to keep the code paths uniform we accept an allocation\n+                    // (for RustCall ABI only).\n+                    let caller_args: Cow<'_, [OpTy<'tcx, M::PointerTag>]> =\n+                        if caller_abi == Abi::RustCall && !args.is_empty() {\n+                            // Untuple\n+                            let (&untuple_arg, args) = args.split_last().unwrap();\n+                            trace!(\"eval_fn_call: Will pass last argument by untupling\");\n+                            Cow::from(\n+                                args.iter()\n+                                    .map(|&a| Ok(a))\n+                                    .chain(\n+                                        (0..untuple_arg.layout.fields.count())\n+                                            .map(|i| self.operand_field(untuple_arg, i as u64)),\n+                                    )\n+                                    .collect::<InterpResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>(\n+                                    )?,\n+                            )\n+                        } else {\n+                            // Plain arg passing\n+                            Cow::from(args)\n                         };\n-                        // We have two iterators: Where the arguments come from,\n-                        // and where they go to.\n-\n-                        // For where they come from: If the ABI is RustCall, we untuple the\n-                        // last incoming argument.  These two iterators do not have the same type,\n-                        // so to keep the code paths uniform we accept an allocation\n-                        // (for RustCall ABI only).\n-                        let caller_args: Cow<'_, [OpTy<'tcx, M::PointerTag>]> =\n-                            if caller_abi == Abi::RustCall && !args.is_empty() {\n-                                // Untuple\n-                                let (&untuple_arg, args) = args.split_last().unwrap();\n-                                trace!(\"eval_fn_call: Will pass last argument by untupling\");\n-                                Cow::from(args.iter().map(|&a| Ok(a))\n-                                .chain((0..untuple_arg.layout.fields.count())\n-                                    .map(|i| self.operand_field(untuple_arg, i as u64))\n-                                )\n-                                .collect::<InterpResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>()?)\n-                            } else {\n-                                // Plain arg passing\n-                                Cow::from(args)\n-                            };\n-                        // Skip ZSTs\n-                        let mut caller_iter = caller_args\n-                            .iter()\n-                            .filter(|op| !rust_abi || !op.layout.is_zst())\n-                            .copied();\n-\n-                        // Now we have to spread them out across the callee's locals,\n-                        // taking into account the `spread_arg`.  If we could write\n-                        // this is a single iterator (that handles `spread_arg`), then\n-                        // `pass_argument` would be the loop body. It takes care to\n-                        // not advance `caller_iter` for ZSTs\n-                        for local in body.args_iter() {\n-                            let dest = self.eval_place(&mir::Place::from(local))?;\n-                            if Some(local) == body.spread_arg {\n-                                // Must be a tuple\n-                                for i in 0..dest.layout.fields.count() {\n-                                    let dest = self.place_field(dest, i as u64)?;\n-                                    self.pass_argument(rust_abi, &mut caller_iter, dest)?;\n-                                }\n-                            } else {\n-                                // Normal argument\n+                    // Skip ZSTs\n+                    let mut caller_iter =\n+                        caller_args.iter().filter(|op| !rust_abi || !op.layout.is_zst()).copied();\n+\n+                    // Now we have to spread them out across the callee's locals,\n+                    // taking into account the `spread_arg`.  If we could write\n+                    // this is a single iterator (that handles `spread_arg`), then\n+                    // `pass_argument` would be the loop body. It takes care to\n+                    // not advance `caller_iter` for ZSTs.\n+                    for local in body.args_iter() {\n+                        let dest = self.eval_place(&mir::Place::from(local))?;\n+                        if Some(local) == body.spread_arg {\n+                            // Must be a tuple\n+                            for i in 0..dest.layout.fields.count() {\n+                                let dest = self.place_field(dest, i as u64)?;\n                                 self.pass_argument(rust_abi, &mut caller_iter, dest)?;\n                             }\n+                        } else {\n+                            // Normal argument\n+                            self.pass_argument(rust_abi, &mut caller_iter, dest)?;\n                         }\n-                        // Now we should have no more caller args\n-                        if caller_iter.next().is_some() {\n-                            trace!(\"Caller has passed too many args\");\n-                            throw_unsup!(FunctionArgCountMismatch)\n+                    }\n+                    // Now we should have no more caller args\n+                    if caller_iter.next().is_some() {\n+                        throw_ub_format!(\"calling a function with more arguments than it expected\")\n+                    }\n+                    // Don't forget to check the return type!\n+                    if let Some((caller_ret, _)) = ret {\n+                        let callee_ret = self.eval_place(&mir::Place::return_place())?;\n+                        if !Self::check_argument_compat(\n+                            rust_abi,\n+                            caller_ret.layout,\n+                            callee_ret.layout,\n+                        ) {\n+                            throw_ub_format!(\n+                                \"calling a function with return type {:?} passing \\\n+                                     return place of type {:?}\",\n+                                callee_ret.layout.ty,\n+                                caller_ret.layout.ty\n+                            )\n                         }\n-                        // Don't forget to check the return type!\n-                        if let Some((caller_ret, _)) = ret {\n-                            let callee_ret = self.eval_place(&mir::Place::return_place())?;\n-                            if !Self::check_argument_compat(\n-                                rust_abi,\n-                                caller_ret.layout,\n-                                callee_ret.layout,\n-                            ) {\n-                                throw_unsup!(FunctionRetMismatch(\n-                                    caller_ret.layout.ty,\n-                                    callee_ret.layout.ty\n-                                ))\n-                            }\n-                        } else {\n-                            let local = mir::RETURN_PLACE;\n-                            let callee_layout = self.layout_of_local(self.frame(), local, None)?;\n-                            if !callee_layout.abi.is_uninhabited() {\n-                                throw_unsup!(FunctionRetMismatch(\n-                                    self.tcx.types.never,\n-                                    callee_layout.ty\n-                                ))\n-                            }\n+                    } else {\n+                        let local = mir::RETURN_PLACE;\n+                        let callee_layout = self.layout_of_local(self.frame(), local, None)?;\n+                        if !callee_layout.abi.is_uninhabited() {\n+                            throw_ub_format!(\"calling a returning function without a return place\")\n                         }\n-                        Ok(())\n-                    })();\n+                    }\n+                };\n                 match res {\n                     Err(err) => {\n                         self.stack.pop();"}, {"sha": "d93b78a5bd5b618b5c47a644355ddab06e48f787", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -29,7 +29,7 @@ macro_rules! throw_validation_failure {\n             write_path(&mut msg, where_);\n         }\n         write!(&mut msg, \", but expected {}\", $details).unwrap();\n-        throw_unsup!(ValidationFailure(msg))\n+        throw_ub!(ValidationFailure(msg))\n     }};\n     ($what:expr, $where:expr) => {{\n         let mut msg = format!(\"encountered {}\", $what);\n@@ -38,7 +38,7 @@ macro_rules! throw_validation_failure {\n             msg.push_str(\" at \");\n             write_path(&mut msg, where_);\n         }\n-        throw_unsup!(ValidationFailure(msg))\n+        throw_ub!(ValidationFailure(msg))\n     }};\n }\n \n@@ -353,31 +353,39 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     place.ptr, size, align\n                 );\n                 match err.kind {\n-                    err_unsup!(InvalidNullPointerUsage) => {\n+                    err_ub!(InvalidIntPointerUsage(0)) => {\n                         throw_validation_failure!(format_args!(\"a NULL {}\", kind), self.path)\n                     }\n-                    err_unsup!(AlignmentCheckFailed { required, has }) => {\n-                        throw_validation_failure!(\n-                            format_args!(\n-                                \"an unaligned {} \\\n-                                    (required {} byte alignment but found {})\",\n-                                kind,\n-                                required.bytes(),\n-                                has.bytes()\n-                            ),\n-                            self.path\n-                        )\n-                    }\n+                    err_ub!(InvalidIntPointerUsage(i)) => throw_validation_failure!(\n+                        format_args!(\"a {} to unallocated address {}\", kind, i),\n+                        self.path\n+                    ),\n+                    err_ub!(AlignmentCheckFailed { required, has }) => throw_validation_failure!(\n+                        format_args!(\n+                            \"an unaligned {} (required {} byte alignment but found {})\",\n+                            kind,\n+                            required.bytes(),\n+                            has.bytes()\n+                        ),\n+                        self.path\n+                    ),\n                     err_unsup!(ReadBytesAsPointer) => throw_validation_failure!(\n                         format_args!(\"a dangling {} (created from integer)\", kind),\n                         self.path\n                     ),\n-                    err_unsup!(PointerOutOfBounds { .. }) | err_unsup!(DanglingPointerDeref) => {\n-                        throw_validation_failure!(\n-                            format_args!(\"a dangling {} (not entirely in bounds)\", kind),\n-                            self.path\n-                        )\n-                    }\n+                    err_ub!(PointerOutOfBounds { .. }) => throw_validation_failure!(\n+                        format_args!(\n+                            \"a dangling {} (going beyond the bounds of its allocation)\",\n+                            kind\n+                        ),\n+                        self.path\n+                    ),\n+                    // This cannot happen during const-eval (because interning already detects\n+                    // dangling pointers), but it can happen in Miri.\n+                    err_ub!(PointerUseAfterFree(_)) => throw_validation_failure!(\n+                        format_args!(\"a dangling {} (use-after-free)\", kind),\n+                        self.path\n+                    ),\n                     _ => bug!(\"Unexpected error during ptr inbounds test: {}\", err),\n                 }\n             }\n@@ -765,11 +773,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     Err(err) => {\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n-                            err_unsup!(ReadUndefBytes(offset)) => {\n+                            err_ub!(InvalidUndefBytes(Some(ptr))) => {\n                                 // Some byte was undefined, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n-                                let i = (offset.bytes() / layout.size.bytes()) as usize;\n+                                let i = (ptr.offset.bytes() / layout.size.bytes()) as usize;\n                                 self.path.push(PathElem::ArrayElem(i));\n \n                                 throw_validation_failure!(\"undefined bytes\", self.path)\n@@ -817,7 +825,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n-            Err(err) if matches!(err.kind, err_unsup!(ValidationFailure { .. })) => Err(err),\n+            Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n             Err(err) if cfg!(debug_assertions) => {\n                 bug!(\"Unexpected error during validation: {}\", err)\n             }"}, {"sha": "7d3aba3ff034e03ca6272c343e8139a8622d2ce3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,6 +9,9 @@ Rust MIR: a lowered representation of Rust.\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]"}, {"sha": "51760500b03c9e6e3c4a5f80d02b041d8a4e3f07", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -183,7 +183,6 @@ use rustc::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::{self, Local, Location};\n-use rustc::session::config::EntryFnType;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -194,6 +193,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_index::bit_set::GrowableBitSet;\n+use rustc_session::config::EntryFnType;\n use smallvec::SmallVec;\n use std::iter;\n "}, {"sha": "af7af7388bd28a62b8bb77236d8debb59d221449", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,9 +1,9 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc::session::config::nightly_options;\n-use rustc::session::parse::feature_err;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n "}, {"sha": "437a154a9b80faa68eaeefe15d2466c7660b2400", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,3 @@\n-use rustc::hir::map::Map;\n-use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n@@ -11,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit;\n use rustc_hir::Node;\n+use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -451,7 +450,7 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "ca23c44f64668f19fb61788009b8384fc85d0b3d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,6 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::lint;\n use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n@@ -25,6 +24,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n+use rustc_session::lint;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n "}, {"sha": "795bcb57d0678cc4aff9a4d01c5ecf1ed56913e4", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -8,8 +8,8 @@ use std::io;\n use crate::transform::{MirPass, MirSource};\n use crate::util as mir_util;\n use rustc::mir::{Body, BodyAndCache};\n-use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n+use rustc_session::config::{OutputFilenames, OutputType};\n \n pub struct Marker(pub &'static str);\n "}, {"sha": "a179cd310750225c9f1dda6853a7f72a43cdbb00", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -107,15 +107,15 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Deref]),\n                 },\n                 self.tcx,\n@@ -125,7 +125,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -143,15 +143,15 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Field(\n                         Field::new(0),\n                         self.ref_gen_ty,\n@@ -164,7 +164,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -180,9 +180,7 @@ fn replace_base<'tcx>(place: &mut Place<'tcx>, new_base: Place<'tcx>, tcx: TyCtx\n     place.projection = tcx.intern_place_elems(&new_projection);\n }\n \n-fn self_arg() -> Local {\n-    Local::new(1)\n-}\n+const SELF_ARG: Local = Local::from_u32(1);\n \n /// Generator has not been resumed yet.\n const UNRESUMED: usize = GeneratorSubsts::UNRESUMED;\n@@ -237,7 +235,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a Place referencing a generator struct field\n     fn make_field(&self, variant_index: VariantIdx, idx: usize, ty: Ty<'tcx>) -> Place<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let base = self.tcx.mk_place_downcast_unnamed(self_place, variant_index);\n         let mut projection = base.projection.to_vec();\n         projection.push(ProjectionElem::Field(Field::new(idx), ty));\n@@ -247,7 +245,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which changes the discriminant\n     fn set_discr(&self, state_disc: VariantIdx, source_info: SourceInfo) -> Statement<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant {\n@@ -263,7 +261,7 @@ impl TransformVisitor<'tcx> {\n         let local_decls_len = body.local_decls.push(temp_decl);\n         let temp = Place::from(local_decls_len);\n \n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n             source_info: source_info(body),\n             kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n@@ -540,7 +538,7 @@ fn locals_live_across_suspend_points(\n             live_locals_here.intersect(&liveness.outs[block]);\n \n             // The generator argument is ignored.\n-            live_locals_here.remove(self_arg());\n+            live_locals_here.remove(SELF_ARG);\n \n             debug!(\"loc = {:?}, live_locals_here = {:?}\", loc, live_locals_here);\n \n@@ -837,15 +835,14 @@ fn elaborate_generator_drops<'tcx>(\n     // generator's resume function.\n \n     let param_env = tcx.param_env(def_id);\n-    let gen = self_arg();\n \n     let mut elaborator = DropShimElaborator { body, patch: MirPatch::new(body), tcx, param_env };\n \n     for (block, block_data) in body.basic_blocks().iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n             Terminator { source_info, kind: TerminatorKind::Drop { location, target, unwind } } => {\n                 if let Some(local) = location.as_local() {\n-                    if local == gen {\n+                    if local == SELF_ARG {\n                         (target, unwind, source_info)\n                     } else {\n                         continue;\n@@ -864,7 +861,7 @@ fn elaborate_generator_drops<'tcx>(\n         elaborate_drop(\n             &mut elaborator,\n             *source_info,\n-            &Place::from(gen),\n+            &Place::from(SELF_ARG),\n             (),\n             *target,\n             unwind,\n@@ -918,7 +915,7 @@ fn create_generator_drop_shim<'tcx>(\n     make_generator_state_argument_indirect(tcx, def_id, &mut body);\n \n     // Change the generator argument from &mut to *mut\n-    body.local_decls[self_arg()] = LocalDecl {\n+    body.local_decls[SELF_ARG] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n         user_ty: UserTypeProjections::none(),\n@@ -933,7 +930,7 @@ fn create_generator_drop_shim<'tcx>(\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(self_arg())),\n+                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(SELF_ARG)),\n             },\n         )\n     }\n@@ -1042,7 +1039,7 @@ fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Drop {\n-        location: Place::from(self_arg()),\n+        location: Place::from(SELF_ARG),\n         target: return_block,\n         unwind: None,\n     };"}, {"sha": "769f3fdcc013fcb64ca46389d1ec93f57213ca57", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,25 +1,22 @@\n //! Inlining pass for MIR functions\n \n-use rustc_hir::def_id::DefId;\n-\n-use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n-\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n-use rustc::session::config::Sanitizer;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_attr as attr;\n+use rustc_hir::def_id::DefId;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::{Idx, IndexVec};\n+use rustc_session::config::Sanitizer;\n+use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n use crate::transform::{MirPass, MirSource};\n use std::collections::VecDeque;\n use std::iter;\n \n-use rustc_attr as attr;\n-use rustc_target::spec::abi::Abi;\n-\n const DEFAULT_THRESHOLD: usize = 50;\n const HINT_THRESHOLD: usize = 100;\n "}, {"sha": "3eb9d23a32a259472cc4e2d17c118dfc194f3799", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,4 @@\n use crate::{shim, util};\n-use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -86,7 +85,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }"}, {"sha": "82810f356759d4fdc68cdcd799e057dfe4860946", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -235,17 +235,15 @@ use rustc_index::vec::Idx;\n use super::{compare_const_vals, PatternFoldable, PatternFolder};\n use super::{FieldPat, Pat, PatKind, PatRange};\n \n-use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n-use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{HirId, RangeEnd};\n-\n-use rustc::lint;\n use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n use rustc::mir::Field;\n+use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n+use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n use rustc::util::common::ErrorReported;\n-\n use rustc_attr::{SignedInt, UnsignedInt};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{HirId, RangeEnd};\n+use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n \n use arena::TypedArena;"}, {"sha": "f71ec5e9ac000f768f1d063c70447e7761ef35c7", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,6 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_ast::ast::Mutability;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -43,7 +42,7 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -753,7 +752,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "ae951e810e32e6cc09e1c8b0dd0455d59e01981a", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,16 +1,14 @@\n-use rustc::lint;\n use rustc::mir::Field;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n+use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_session::lint;\n+use rustc_span::Span;\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligation};\n \n-use rustc_index::vec::Idx;\n-\n-use rustc_span::Span;\n-\n use std::cell::Cell;\n \n use super::{FieldPat, Pat, PatCtxt, PatKind};\n@@ -182,7 +180,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         let kind = match cv.ty.kind {\n             ty::Float(_) => {\n                 tcx.struct_span_lint_hir(\n-                    ::rustc::lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                    lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                     id,\n                     span,\n                     |lint| lint.build(\"floating-point types cannot be used in patterns\").emit(),"}, {"sha": "5a8b5a329634d0f28242cbeeaac505be4ec49b0a", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,6 +4,9 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![recursion_limit = \"256\"]"}, {"sha": "8b1ddf7461a766a01b65bb65fa326cf9fed36c39", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,11 +1,11 @@\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_index::bit_set::BitSet;\n+use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n \n crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "c31cc1b4c9f00b4d0263a091a0c5fb21dce439cf", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 5, "deletions": 46, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,6 +3,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n+#![feature(try_blocks)]\n \n use rustc_ast::ast;\n use rustc_ast::token::{self, Nonterminal};\n@@ -13,7 +14,7 @@ use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n use rustc_span::{FileName, SourceFile, Span};\n \n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::str;\n \n use log::info;\n@@ -25,24 +26,6 @@ pub mod parser;\n use parser::{emit_unclosed_delims, make_unclosed_delims_error, Parser};\n pub mod lexer;\n pub mod validate_attr;\n-#[macro_use]\n-pub mod config;\n-\n-#[derive(Clone)]\n-pub struct Directory {\n-    pub path: PathBuf,\n-    pub ownership: DirectoryOwnership,\n-}\n-\n-#[derive(Copy, Clone)]\n-pub enum DirectoryOwnership {\n-    Owned {\n-        // None if `mod.rs`, `Some(\"foo\")` if we're in `foo.rs`.\n-        relative: Option<ast::Ident>,\n-    },\n-    UnownedViaBlock,\n-    UnownedViaMod,\n-}\n \n // A bunch of utility functions of the form `parse_<thing>_from_<source>`\n // where <thing> includes crate, expr, item, stmt, tts, and one that\n@@ -119,10 +102,7 @@ pub fn maybe_new_parser_from_source_str(\n     name: FileName,\n     source: String,\n ) -> Result<Parser<'_>, Vec<Diagnostic>> {\n-    let mut parser =\n-        maybe_source_file_to_parser(sess, sess.source_map().new_source_file(name, source))?;\n-    parser.recurse_into_file_modules = false;\n-    Ok(parser)\n+    maybe_source_file_to_parser(sess, sess.source_map().new_source_file(name, source))\n }\n \n /// Creates a new parser, handling errors as appropriate if the file doesn't exist.\n@@ -146,12 +126,10 @@ pub fn maybe_new_parser_from_file<'a>(\n pub fn new_sub_parser_from_file<'a>(\n     sess: &'a ParseSess,\n     path: &Path,\n-    directory_ownership: DirectoryOwnership,\n     module_name: Option<String>,\n     sp: Span,\n ) -> Parser<'a> {\n     let mut p = source_file_to_parser(sess, file_to_source_file(sess, path, Some(sp)));\n-    p.directory.ownership = directory_ownership;\n     p.root_module_name = module_name;\n     p\n }\n@@ -257,26 +235,7 @@ pub fn stream_to_parser<'a>(\n     stream: TokenStream,\n     subparser_name: Option<&'static str>,\n ) -> Parser<'a> {\n-    Parser::new(sess, stream, None, true, false, subparser_name)\n-}\n-\n-/// Given a stream, the `ParseSess` and the base directory, produces a parser.\n-///\n-/// Use this function when you are creating a parser from the token stream\n-/// and also care about the current working directory of the parser (e.g.,\n-/// you are trying to resolve modules defined inside a macro invocation).\n-///\n-/// # Note\n-///\n-/// The main usage of this function is outside of rustc, for those who uses\n-/// librustc_ast as a library. Please do not remove this function while refactoring\n-/// just because it is not used in rustc codebase!\n-pub fn stream_to_parser_with_base_dir(\n-    sess: &ParseSess,\n-    stream: TokenStream,\n-    base_dir: Directory,\n-) -> Parser<'_> {\n-    Parser::new(sess, stream, Some(base_dir), true, false, None)\n+    Parser::new(sess, stream, false, subparser_name)\n }\n \n /// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n@@ -286,7 +245,7 @@ pub fn parse_in<'a, T>(\n     name: &'static str,\n     mut f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n ) -> PResult<'a, T> {\n-    let mut parser = Parser::new(sess, tts, None, false, false, Some(name));\n+    let mut parser = Parser::new(sess, tts, false, Some(name));\n     let result = f(&mut parser)?;\n     if parser.token != token::Eof {\n         parser.unexpected()?;"}, {"sha": "87255386b9e6602b101f6dbbf069cf43dd2b5c22", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,7 +18,6 @@ use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use log::{debug, trace};\n use std::mem;\n-use std::path::PathBuf;\n \n const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n@@ -41,42 +40,12 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n }\n \n pub enum Error {\n-    FileNotFoundForModule { mod_name: String, default_path: PathBuf },\n-    DuplicatePaths { mod_name: String, default_path: String, secondary_path: String },\n     UselessDocComment,\n }\n \n impl Error {\n     fn span_err(self, sp: impl Into<MultiSpan>, handler: &Handler) -> DiagnosticBuilder<'_> {\n         match self {\n-            Error::FileNotFoundForModule { ref mod_name, ref default_path } => {\n-                let mut err = struct_span_err!(\n-                    handler,\n-                    sp,\n-                    E0583,\n-                    \"file not found for module `{}`\",\n-                    mod_name,\n-                );\n-                err.help(&format!(\n-                    \"to create the module `{}`, create file \\\"{}\\\"\",\n-                    mod_name,\n-                    default_path.display(),\n-                ));\n-                err\n-            }\n-            Error::DuplicatePaths { ref mod_name, ref default_path, ref secondary_path } => {\n-                let mut err = struct_span_err!(\n-                    handler,\n-                    sp,\n-                    E0584,\n-                    \"file for module `{}` found at both {} and {}\",\n-                    mod_name,\n-                    default_path,\n-                    secondary_path,\n-                );\n-                err.help(\"delete or rename one of them to remove the ambiguity\");\n-                err\n-            }\n             Error::UselessDocComment => {\n                 let mut err = struct_span_err!(\n                     handler,"}, {"sha": "9d70f606f3ef4339e80e6c619cd1048282bbd8d6", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,14 +4,15 @@ use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n \n-use rustc_ast::ast::{self, Async, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n-use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind};\n-use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, MacArgs, MacCall, MacDelimiter, Param};\n-use rustc_ast::ast::{Const, Defaultness, IsAuto, PathSegment, Unsafe, UseTree, UseTreeKind};\n+use rustc_ast::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n+use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind, Mod};\n+use rustc_ast::ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n+use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n use rustc_ast::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use rustc_ast::ast::{FnHeader, ForeignItem, Mutability, SelfKind, Visibility, VisibilityKind};\n+use rustc_ast::ast::{FnHeader, ForeignItem, PathSegment, Visibility, VisibilityKind};\n+use rustc_ast::ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast::ptr::P;\n-use rustc_ast::token;\n+use rustc_ast::token::{self, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n@@ -23,6 +24,61 @@ use log::debug;\n use std::convert::TryFrom;\n use std::mem;\n \n+impl<'a> Parser<'a> {\n+    /// Parses a source module as a crate. This is the main entry point for the parser.\n+    pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n+        let lo = self.token.span;\n+        let (module, attrs) = self.parse_mod(&token::Eof)?;\n+        let span = lo.to(self.token.span);\n+        let proc_macros = Vec::new(); // Filled in by `proc_macro_harness::inject()`.\n+        Ok(ast::Crate { attrs, module, span, proc_macros })\n+    }\n+\n+    /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n+    fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+        let id = self.parse_ident()?;\n+        let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n+            Default::default()\n+        } else {\n+            self.expect(&token::OpenDelim(token::Brace))?;\n+            self.parse_mod(&token::CloseDelim(token::Brace))?\n+        };\n+        attrs.append(&mut inner_attrs);\n+        Ok((id, ItemKind::Mod(module)))\n+    }\n+\n+    /// Parses the contents of a module (inner attributes followed by module items).\n+    pub fn parse_mod(&mut self, term: &TokenKind) -> PResult<'a, (Mod, Vec<Attribute>)> {\n+        let lo = self.token.span;\n+        let attrs = self.parse_inner_attributes()?;\n+        let module = self.parse_mod_items(term, lo)?;\n+        Ok((module, attrs))\n+    }\n+\n+    /// Given a termination token, parses all of the items in a module.\n+    fn parse_mod_items(&mut self, term: &TokenKind, inner_lo: Span) -> PResult<'a, Mod> {\n+        let mut items = vec![];\n+        while let Some(item) = self.parse_item()? {\n+            items.push(item);\n+            self.maybe_consume_incorrect_semicolon(&items);\n+        }\n+\n+        if !self.eat(term) {\n+            let token_str = super::token_descr(&self.token);\n+            if !self.maybe_consume_incorrect_semicolon(&items) {\n+                let msg = &format!(\"expected item, found {}\", token_str);\n+                let mut err = self.struct_span_err(self.token.span, msg);\n+                err.span_label(self.token.span, \"expected item\");\n+                return Err(err);\n+            }\n+        }\n+\n+        let hi = if self.token.span.is_dummy() { inner_lo } else { self.prev_token.span };\n+\n+        Ok(Mod { inner: inner_lo.to(hi), items, inline: true })\n+    }\n+}\n+\n pub(super) type ItemInfo = (Ident, ItemKind);\n \n impl<'a> Parser<'a> {"}, {"sha": "bb6793d08aa270dc24200d69cf5cc16e7fd0f4ea", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,6 @@\n pub mod attr;\n mod expr;\n mod item;\n-mod module;\n-pub use module::{ModulePath, ModulePathSuccess};\n mod pat;\n mod path;\n mod ty;\n@@ -13,7 +11,6 @@ mod stmt;\n use diagnostics::Error;\n \n use crate::lexer::UnmatchedBrace;\n-use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n use rustc_ast::ast::DUMMY_NODE_ID;\n@@ -28,11 +25,9 @@ use rustc_ast::util::comments::{doc_comment_style, strip_doc_comment_decoration}\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::respan;\n+use rustc_span::source_map::{respan, Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{FileName, Span, DUMMY_SP};\n \n-use std::path::PathBuf;\n use std::{cmp, mem, slice};\n \n bitflags::bitflags! {\n@@ -93,21 +88,13 @@ pub struct Parser<'a> {\n     /// The previous token.\n     pub prev_token: Token,\n     restrictions: Restrictions,\n-    /// Used to determine the path to externally loaded source files.\n-    pub(super) directory: Directory,\n-    /// `true` to parse sub-modules in other files.\n-    // Public for rustfmt usage.\n-    pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n     pub root_module_name: Option<String>,\n     expected_tokens: Vec<TokenType>,\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n-    /// `true` we should configure out of line modules as we parse.\n-    // Public for rustfmt usage.\n-    pub cfg_mods: bool,\n     /// This field is used to keep track of how many left angle brackets we have seen. This is\n     /// required in order to detect extra leading left angle brackets (`<` characters) and error\n     /// appropriately.\n@@ -355,8 +342,6 @@ impl<'a> Parser<'a> {\n     pub fn new(\n         sess: &'a ParseSess,\n         tokens: TokenStream,\n-        directory: Option<Directory>,\n-        recurse_into_file_modules: bool,\n         desugar_doc_comments: bool,\n         subparser_name: Option<&'static str>,\n     ) -> Self {\n@@ -365,19 +350,13 @@ impl<'a> Parser<'a> {\n             token: Token::dummy(),\n             prev_token: Token::dummy(),\n             restrictions: Restrictions::empty(),\n-            recurse_into_file_modules,\n-            directory: Directory {\n-                path: PathBuf::new(),\n-                ownership: DirectoryOwnership::Owned { relative: None },\n-            },\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n                 frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens),\n                 stack: Vec::new(),\n             },\n             desugar_doc_comments,\n-            cfg_mods: true,\n             unmatched_angle_bracket_count: 0,\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n@@ -389,18 +368,6 @@ impl<'a> Parser<'a> {\n         // Make parser point to the first token.\n         parser.bump();\n \n-        if let Some(directory) = directory {\n-            parser.directory = directory;\n-        } else if !parser.token.span.is_dummy() {\n-            if let Some(FileName::Real(path)) =\n-                &sess.source_map().lookup_char_pos(parser.token.span.lo()).file.unmapped_path\n-            {\n-                if let Some(directory_path) = path.parent() {\n-                    parser.directory.path = directory_path.to_path_buf();\n-                }\n-            }\n-        }\n-\n         parser\n     }\n "}, {"sha": "7b46601cc7d8026cc492f04fa432d40be511a182", "filename": "src/librustc_parse/parser/module.rs", "status": "removed", "additions": 0, "deletions": 303, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/f509b26a7730d721ef87423a72b3fdf8724b4afa/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f509b26a7730d721ef87423a72b3fdf8724b4afa/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=f509b26a7730d721ef87423a72b3fdf8724b4afa", "patch": "@@ -1,303 +0,0 @@\n-use super::diagnostics::Error;\n-use super::item::ItemInfo;\n-use super::Parser;\n-\n-use crate::{new_sub_parser_from_file, DirectoryOwnership};\n-\n-use rustc_ast::ast::{self, Attribute, Crate, Ident, ItemKind, Mod};\n-use rustc_ast::attr;\n-use rustc_ast::token::{self, TokenKind};\n-use rustc_errors::PResult;\n-use rustc_span::source_map::{FileName, SourceMap, Span, DUMMY_SP};\n-use rustc_span::symbol::sym;\n-\n-use std::path::{self, Path, PathBuf};\n-\n-/// Information about the path to a module.\n-// Public for rustfmt usage.\n-pub struct ModulePath {\n-    name: String,\n-    path_exists: bool,\n-    pub result: Result<ModulePathSuccess, Error>,\n-}\n-\n-// Public for rustfmt usage.\n-pub struct ModulePathSuccess {\n-    pub path: PathBuf,\n-    pub directory_ownership: DirectoryOwnership,\n-}\n-\n-impl<'a> Parser<'a> {\n-    /// Parses a source module as a crate. This is the main entry point for the parser.\n-    pub fn parse_crate_mod(&mut self) -> PResult<'a, Crate> {\n-        let lo = self.token.span;\n-        let krate = Ok(ast::Crate {\n-            attrs: self.parse_inner_attributes()?,\n-            module: self.parse_mod_items(&token::Eof, lo)?,\n-            span: lo.to(self.token.span),\n-            // Filled in by proc_macro_harness::inject()\n-            proc_macros: Vec::new(),\n-        });\n-        krate\n-    }\n-\n-    /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n-    pub(super) fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n-        let in_cfg = crate::config::process_configure_mod(self.sess, self.cfg_mods, attrs);\n-\n-        let id_span = self.token.span;\n-        let id = self.parse_ident()?;\n-        let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n-            if in_cfg && self.recurse_into_file_modules {\n-                // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership } =\n-                    self.submod_path(id, &attrs, id_span)?;\n-                self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?\n-            } else {\n-                (ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false }, Vec::new())\n-            }\n-        } else {\n-            let old_directory = self.directory.clone();\n-            self.push_directory(id, &attrs);\n-\n-            self.expect(&token::OpenDelim(token::Brace))?;\n-            let mod_inner_lo = self.token.span;\n-            let inner_attrs = self.parse_inner_attributes()?;\n-            let module = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n-\n-            self.directory = old_directory;\n-            (module, inner_attrs)\n-        };\n-        attrs.append(&mut inner_attrs);\n-        Ok((id, ItemKind::Mod(module)))\n-    }\n-\n-    /// Given a termination token, parses all of the items in a module.\n-    fn parse_mod_items(&mut self, term: &TokenKind, inner_lo: Span) -> PResult<'a, Mod> {\n-        let mut items = vec![];\n-        while let Some(item) = self.parse_item()? {\n-            items.push(item);\n-            self.maybe_consume_incorrect_semicolon(&items);\n-        }\n-\n-        if !self.eat(term) {\n-            let token_str = super::token_descr(&self.token);\n-            if !self.maybe_consume_incorrect_semicolon(&items) {\n-                let msg = &format!(\"expected item, found {}\", token_str);\n-                let mut err = self.struct_span_err(self.token.span, msg);\n-                err.span_label(self.token.span, \"expected item\");\n-                return Err(err);\n-            }\n-        }\n-\n-        let hi = if self.token.span.is_dummy() { inner_lo } else { self.prev_token.span };\n-\n-        Ok(Mod { inner: inner_lo.to(hi), items, inline: true })\n-    }\n-\n-    fn submod_path(\n-        &mut self,\n-        id: ast::Ident,\n-        outer_attrs: &[Attribute],\n-        id_sp: Span,\n-    ) -> PResult<'a, ModulePathSuccess> {\n-        if let Some(path) = Parser::submod_path_from_attr(outer_attrs, &self.directory.path) {\n-            return Ok(ModulePathSuccess {\n-                directory_ownership: match path.file_name().and_then(|s| s.to_str()) {\n-                    // All `#[path]` files are treated as though they are a `mod.rs` file.\n-                    // This means that `mod foo;` declarations inside `#[path]`-included\n-                    // files are siblings,\n-                    //\n-                    // Note that this will produce weirdness when a file named `foo.rs` is\n-                    // `#[path]` included and contains a `mod foo;` declaration.\n-                    // If you encounter this, it's your own darn fault :P\n-                    Some(_) => DirectoryOwnership::Owned { relative: None },\n-                    _ => DirectoryOwnership::UnownedViaMod,\n-                },\n-                path,\n-            });\n-        }\n-\n-        let relative = match self.directory.ownership {\n-            DirectoryOwnership::Owned { relative } => relative,\n-            DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n-        };\n-        let paths =\n-            Parser::default_submod_path(id, relative, &self.directory.path, self.sess.source_map());\n-\n-        match self.directory.ownership {\n-            DirectoryOwnership::Owned { .. } => {\n-                paths.result.map_err(|err| self.span_fatal_err(id_sp, err))\n-            }\n-            DirectoryOwnership::UnownedViaBlock => {\n-                let msg = \"Cannot declare a non-inline module inside a block \\\n-                    unless it has a path attribute\";\n-                let mut err = self.struct_span_err(id_sp, msg);\n-                if paths.path_exists {\n-                    let msg = format!(\n-                        \"Maybe `use` the module `{}` instead of redeclaring it\",\n-                        paths.name\n-                    );\n-                    err.span_note(id_sp, &msg);\n-                }\n-                Err(err)\n-            }\n-            DirectoryOwnership::UnownedViaMod => {\n-                let mut err =\n-                    self.struct_span_err(id_sp, \"cannot declare a new module at this location\");\n-                if !id_sp.is_dummy() {\n-                    let src_path = self.sess.source_map().span_to_filename(id_sp);\n-                    if let FileName::Real(src_path) = src_path {\n-                        if let Some(stem) = src_path.file_stem() {\n-                            let mut dest_path = src_path.clone();\n-                            dest_path.set_file_name(stem);\n-                            dest_path.push(\"mod.rs\");\n-                            err.span_note(\n-                                id_sp,\n-                                &format!(\n-                                    \"maybe move this module `{}` to its own \\\n-                                                directory via `{}`\",\n-                                    src_path.display(),\n-                                    dest_path.display()\n-                                ),\n-                            );\n-                        }\n-                    }\n-                }\n-                if paths.path_exists {\n-                    err.span_note(\n-                        id_sp,\n-                        &format!(\n-                            \"... or maybe `use` the module `{}` instead \\\n-                                            of possibly redeclaring it\",\n-                            paths.name\n-                        ),\n-                    );\n-                }\n-                Err(err)\n-            }\n-        }\n-    }\n-\n-    // Public for rustfmt usage.\n-    pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n-        if let Some(s) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n-            let s = s.as_str();\n-\n-            // On windows, the base path might have the form\n-            // `\\\\?\\foo\\bar` in which case it does not tolerate\n-            // mixed `/` and `\\` separators, so canonicalize\n-            // `/` to `\\`.\n-            #[cfg(windows)]\n-            let s = s.replace(\"/\", \"\\\\\");\n-            Some(dir_path.join(&*s))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Returns a path to a module.\n-    // Public for rustfmt usage.\n-    pub fn default_submod_path(\n-        id: ast::Ident,\n-        relative: Option<ast::Ident>,\n-        dir_path: &Path,\n-        source_map: &SourceMap,\n-    ) -> ModulePath {\n-        // If we're in a foo.rs file instead of a mod.rs file,\n-        // we need to look for submodules in\n-        // `./foo/<id>.rs` and `./foo/<id>/mod.rs` rather than\n-        // `./<id>.rs` and `./<id>/mod.rs`.\n-        let relative_prefix_string;\n-        let relative_prefix = if let Some(ident) = relative {\n-            relative_prefix_string = format!(\"{}{}\", ident.name, path::MAIN_SEPARATOR);\n-            &relative_prefix_string\n-        } else {\n-            \"\"\n-        };\n-\n-        let mod_name = id.name.to_string();\n-        let default_path_str = format!(\"{}{}.rs\", relative_prefix, mod_name);\n-        let secondary_path_str =\n-            format!(\"{}{}{}mod.rs\", relative_prefix, mod_name, path::MAIN_SEPARATOR);\n-        let default_path = dir_path.join(&default_path_str);\n-        let secondary_path = dir_path.join(&secondary_path_str);\n-        let default_exists = source_map.file_exists(&default_path);\n-        let secondary_exists = source_map.file_exists(&secondary_path);\n-\n-        let result = match (default_exists, secondary_exists) {\n-            (true, false) => Ok(ModulePathSuccess {\n-                path: default_path,\n-                directory_ownership: DirectoryOwnership::Owned { relative: Some(id) },\n-            }),\n-            (false, true) => Ok(ModulePathSuccess {\n-                path: secondary_path,\n-                directory_ownership: DirectoryOwnership::Owned { relative: None },\n-            }),\n-            (false, false) => {\n-                Err(Error::FileNotFoundForModule { mod_name: mod_name.clone(), default_path })\n-            }\n-            (true, true) => Err(Error::DuplicatePaths {\n-                mod_name: mod_name.clone(),\n-                default_path: default_path_str,\n-                secondary_path: secondary_path_str,\n-            }),\n-        };\n-\n-        ModulePath { name: mod_name, path_exists: default_exists || secondary_exists, result }\n-    }\n-\n-    /// Reads a module from a source file.\n-    fn eval_src_mod(\n-        &mut self,\n-        path: PathBuf,\n-        directory_ownership: DirectoryOwnership,\n-        name: String,\n-        id_sp: Span,\n-    ) -> PResult<'a, (Mod, Vec<Attribute>)> {\n-        let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n-        if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n-            let mut err = String::from(\"circular modules: \");\n-            let len = included_mod_stack.len();\n-            for p in &included_mod_stack[i..len] {\n-                err.push_str(&p.to_string_lossy());\n-                err.push_str(\" -> \");\n-            }\n-            err.push_str(&path.to_string_lossy());\n-            return Err(self.struct_span_err(id_sp, &err[..]));\n-        }\n-        included_mod_stack.push(path.clone());\n-        drop(included_mod_stack);\n-\n-        let mut p0 =\n-            new_sub_parser_from_file(self.sess, &path, directory_ownership, Some(name), id_sp);\n-        p0.cfg_mods = self.cfg_mods;\n-        let mod_inner_lo = p0.token.span;\n-        let mod_attrs = p0.parse_inner_attributes()?;\n-        let mut m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;\n-        m0.inline = false;\n-        self.sess.included_mod_stack.borrow_mut().pop();\n-        Ok((m0, mod_attrs))\n-    }\n-\n-    fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n-        if let Some(path) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n-            self.directory.path.push(&*path.as_str());\n-            self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n-        } else {\n-            // We have to push on the current module name in the case of relative\n-            // paths in order to ensure that any additional module paths from inline\n-            // `mod x { ... }` come after the relative extension.\n-            //\n-            // For example, a `mod z { ... }` inside `x/y.rs` should set the current\n-            // directory path to `/x/y/z`, not `/x/z` with a relative offset of `y`.\n-            if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n-                if let Some(ident) = relative.take() {\n-                    // remove the relative offset\n-                    self.directory.path.push(&*ident.as_str());\n-                }\n-            }\n-            self.directory.path.push(&*id.as_str());\n-        }\n-    }\n-}"}, {"sha": "d40597d8fcb0c543127dc61e155dd87e54b84bd7", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,6 @@ use super::pat::GateOr;\n use super::path::PathStyle;\n use super::{BlockMode, Parser, Restrictions, SemiColonMode};\n use crate::maybe_whole;\n-use crate::DirectoryOwnership;\n \n use rustc_ast::ast;\n use rustc_ast::ast::{AttrStyle, AttrVec, Attribute, MacCall, MacStmtStyle};\n@@ -54,7 +53,7 @@ impl<'a> Parser<'a> {\n             // that starts like a path (1 token), but it fact not a path.\n             // Also, we avoid stealing syntax from `parse_item_`.\n             self.parse_stmt_path_start(lo, attrs)?\n-        } else if let Some(item) = self.parse_stmt_item(attrs.clone())? {\n+        } else if let Some(item) = self.parse_item_common(attrs.clone(), false, true, |_| true)? {\n             // FIXME: Bad copy of attrs\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         } else if self.eat(&token::Semi) {\n@@ -72,13 +71,6 @@ impl<'a> Parser<'a> {\n         Ok(Some(stmt))\n     }\n \n-    fn parse_stmt_item(&mut self, attrs: Vec<Attribute>) -> PResult<'a, Option<ast::Item>> {\n-        let old = mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n-        let item = self.parse_item_common(attrs, false, true, |_| true)?;\n-        self.directory.ownership = old;\n-        Ok(item)\n-    }\n-\n     fn parse_stmt_path_start(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, Stmt> {\n         let path = self.parse_path(PathStyle::Expr)?;\n "}, {"sha": "2512878ec65be06d77eedc820e0a9fa9edbed196", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -57,7 +57,7 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n     })\n }\n \n-crate fn check_meta_bad_delim(sess: &ParseSess, span: DelimSpan, delim: MacDelimiter, msg: &str) {\n+pub fn check_meta_bad_delim(sess: &ParseSess, span: DelimSpan, delim: MacDelimiter, msg: &str) {\n     if let ast::MacDelimiter::Parenthesis = delim {\n         return;\n     }"}, {"sha": "30737360b9c20098f3c81f3d40712cd82b4e45aa", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -8,15 +8,15 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n-use rustc::session::config::nightly_options;\n-use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast::Mutability;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n use std::fmt;"}, {"sha": "4466dea89b0c1806185fd5f872f890fb4aa1de70", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "598d6bb3c48312afe7528ff7c208dff0e6de8795", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::config::EntryFnType;\n-use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::attr;\n@@ -9,6 +7,8 @@ use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n+use rustc_session::config::EntryFnType;\n+use rustc_session::{config, Session};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "1b46aaeefcb18f28e98169353468a78315d78090", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -122,7 +121,7 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -139,7 +138,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "556d6b40db46637582facf7c23e6ce196ef486c5", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -97,7 +97,6 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_ast::ast;\n@@ -108,6 +107,7 @@ use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n+use rustc_session::lint;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -1370,7 +1370,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "121e03680396cedbaf00a70435413f2ce6d17228", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,10 +5,8 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n-use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -17,10 +15,10 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::intravisit;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n+use rustc_session::config;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be\n@@ -83,7 +81,7 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "e771696a5b6bf9678935529ad070d3178caef8c0", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,7 +6,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n-use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -696,7 +695,7 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "11311a3e8aa682d4aaa94f67213178f95ff830bf", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,11 +2,8 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast::Attribute;\n@@ -18,6 +15,9 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;"}, {"sha": "43f39e6c610c8ba5d96f3ebb86e4d55ad0b2e236", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,5 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n@@ -44,7 +43,7 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -73,7 +72,7 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "cde489e8d2c1eca8d4a202036acb4f2eb09fb89b", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,15 +2,13 @@\n \n use rustc::middle::lang_items;\n use rustc::middle::lang_items::whitelisted;\n-use rustc::session::config;\n-\n-use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n+use rustc_session::config;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n@@ -85,9 +83,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'v>> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "372d6a534c8d4fd462439607c6a76cc3cce39261", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -17,4 +17,5 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_ast = { path = \"../librustc_ast\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "0810cf56d178370add97a81aa9842399c8f7593c", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,10 +2,10 @@\n \n use crate::Registry;\n use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::Session;\n use rustc_ast::ast::{Crate, Ident};\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n "}, {"sha": "9854e0f6c53f3a6ed76838efe6cd81bbb95cc528", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,6 +14,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "f5b3de2512527196845a23808abcf3c360583147", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,6 @@\n \n use rustc::bug;\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n@@ -20,6 +19,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n+use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -1447,7 +1447,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "35876176e3e4b0381381a6404e3392abaa086533", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -26,12 +26,13 @@\n use crate::imports::ImportKind;\n use crate::Resolver;\n \n-use rustc::{lint, ty};\n+use rustc::ty;\n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n+use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n \n@@ -232,7 +233,7 @@ impl Resolver<'_> {\n                     if let ImportKind::MacroUse = import.kind {\n                         if !import.span.is_dummy() {\n                             self.lint_buffer.buffer_lint(\n-                                lint::builtin::MACRO_USE_EXTERN_CRATE,\n+                                MACRO_USE_EXTERN_CRATE,\n                                 import.id,\n                                 import.span,\n                                 \"deprecated `#[macro_use]` attribute used to \\\n@@ -247,9 +248,8 @@ impl Resolver<'_> {\n                     self.maybe_unused_extern_crates.push((import.id, import.span));\n                 }\n                 ImportKind::MacroUse => {\n-                    let lint = lint::builtin::UNUSED_IMPORTS;\n                     let msg = \"unused `#[macro_use]` import\";\n-                    self.lint_buffer.buffer_lint(lint, import.id, import.span, msg);\n+                    self.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);\n                 }\n                 _ => {}\n             }\n@@ -314,7 +314,7 @@ impl Resolver<'_> {\n             };\n \n             visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n-                lint::builtin::UNUSED_IMPORTS,\n+                UNUSED_IMPORTS,\n                 unused.use_tree_id,\n                 ms,\n                 &msg,"}, {"sha": "6f567ab65a70c01ea3990c8d78cabd1ca211bf4e", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3,7 +3,6 @@ use std::ptr;\n \n use log::debug;\n use rustc::bug;\n-use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_ast::ast::{self, Ident, Path};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n@@ -14,6 +13,7 @@ use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Symbol};"}, {"sha": "663e61ad2add4c0b79d5b09882bc2c045df7af60", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -10,7 +10,6 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc::hir::exports::Export;\n-use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_ast::ast::{Ident, Name, NodeId};\n@@ -21,6 +20,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;"}, {"sha": "4a3c9f338d90379ea99b7008e8aea431c7a62cf5", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -11,7 +11,7 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n-use rustc::{bug, lint, span_bug};\n+use rustc::{bug, span_bug};\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n@@ -23,6 +23,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::TraitCandidate;\n+use rustc_session::lint;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "41380b2a4b78a2b787e15b6a370400e4449f9aeb", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,6 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use rustc::session::config::nightly_options;\n use rustc_ast::ast::{self, Expr, ExprKind, Ident, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n@@ -15,6 +14,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::PrimTy;\n+use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "47d04964842e4971401a799a90cd5020c99aaf6c", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,7 +7,6 @@\n \n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n@@ -22,6 +21,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n+use rustc_session::lint;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -1123,7 +1123,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2173,7 +2173,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                type Map = Map<'a>;\n+                type Map = intravisit::ErasedMap<'a>;\n \n                 fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                     NestedVisitorMap::None\n@@ -2264,7 +2264,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                 NestedVisitorMap::None\n@@ -2855,7 +2855,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2898,7 +2898,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "8164998d55fd7e23ebaca4f4956f504ae9aba22b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,7 +18,6 @@ use Determinacy::*;\n \n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n-use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n@@ -42,6 +41,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};"}, {"sha": "6f2e0bce3acaf63e9d2cf15dfa92099b79d295bd", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,9 +7,7 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc::middle::stability;\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n-use rustc::{lint, span_bug, ty};\n+use rustc::{span_bug, ty};\n use rustc_ast::ast::{self, Ident, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n@@ -21,6 +19,9 @@ use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationK\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n+use rustc_session::lint::builtin::UNUSED_MACROS;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -329,12 +330,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn check_unused_macros(&mut self) {\n         for (&node_id, &span) in self.unused_macros.iter() {\n-            self.lint_buffer.buffer_lint(\n-                lint::builtin::UNUSED_MACROS,\n-                node_id,\n-                span,\n-                \"unused macro definition\",\n-            );\n+            self.lint_buffer.buffer_lint(UNUSED_MACROS, node_id, span, \"unused macro definition\");\n         }\n     }\n "}, {"sha": "4717664b6ba8000d4bf00850734bb7ddcb450889", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -18,6 +18,7 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n rustc_ast = { path = \"../librustc_ast\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "8d1a39eab89d8a16080184555e7cd4a10da11083", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -13,7 +13,6 @@\n //! DumpVisitor walks the AST and processes it, and Dumper is used for\n //! recording the output.\n \n-use rustc::session::config::Input;\n use rustc::span_bug;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n@@ -25,6 +24,7 @@ use rustc_ast_pretty::pprust::{bounds_to_string, generic_params_to_string, ty_to\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::Input;\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::*;\n "}, {"sha": "98d81c6252242c3bec73c27aa30a5c2dfc5eb7f4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -10,7 +10,6 @@ mod sig;\n \n use rustc::middle::cstore::ExternCrate;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n@@ -22,6 +21,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n+use rustc_session::config::{CrateType, Input, OutputType};\n use rustc_span::source_map::Spanned;\n use rustc_span::*;\n "}, {"sha": "6620941c440465bc2c12c54c1af038c6cab81342", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,7 +1,7 @@\n use crate::generated_code;\n-use rustc::session::Session;\n use rustc_ast::token::{self, TokenKind};\n use rustc_parse::lexer::{self, StringReader};\n+use rustc_session::Session;\n use rustc_span::*;\n \n #[derive(Clone)]"}, {"sha": "af8d5ce09b52de5f8b66b26f8d6ef03be80b0abb", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -25,7 +25,7 @@ pub enum CrateNum {\n \n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n /// `LOCAL_CRATE` in their `DefId`.\n-pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32_const(0));\n+pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32(0));\n \n impl Idx for CrateNum {\n     #[inline]"}, {"sha": "1f6d10f4e8f6a8740b73705697b0d0e92061aa01", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,6 +6,9 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]"}, {"sha": "5685505f6948d87c61de82788a4d7380db364025", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1026,7 +1026,7 @@ rustc_index::newtype_index! {\n \n impl Symbol {\n     const fn new(n: u32) -> Self {\n-        Symbol(SymbolIndex::from_u32_const(n))\n+        Symbol(SymbolIndex::from_u32(n))\n     }\n \n     /// Maps a string to its interned representation."}, {"sha": "98190867d493fc7daa4414a3405c1622c582fa91", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,6 +9,9 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n+#![feature(const_if_match)]\n+#![feature(const_fn)]\n+#![feature(const_panic)]\n #![feature(nll)]\n #![feature(never_type)]\n #![feature(associated_type_bounds)]"}, {"sha": "785d8b892bee5703203cb855f8c98ba2b3ad62f7", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::InferCtxtExt as _;\n use crate::traits::{self, PredicateObligation};\n-use rustc::session::config::nightly_options;\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::free_region_map::FreeRegionRelations;\n use rustc::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -13,6 +12,7 @@ use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n+use rustc_session::config::nightly_options;\n use rustc_span::Span;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;"}, {"sha": "ef62958a3f7d0a99a0b13a55730bd5a9bbea4c34", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,7 +12,6 @@ use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCod\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc::mir::interpret::ErrorHandled;\n-use rustc::session::DiagnosticMessageId;\n use rustc::ty::error::ExpectedFound;\n use rustc::ty::fast_reject;\n use rustc::ty::fold::TypeFolder;\n@@ -25,6 +24,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder}\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_session::DiagnosticMessageId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;"}, {"sha": "dd03f9358c819c219e1d442aa67f3d7dac0b5d5b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1567,7 +1567,7 @@ struct ReturnsVisitor<'v> {\n }\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n-    type Map = rustc::hir::map::Map<'v>;\n+    type Map = hir::intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None"}, {"sha": "43a90c4a6c1649dd5e38ed771ce24441374b55bc", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -21,7 +21,7 @@ mod util;\n pub mod wf;\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n-use crate::infer::{InferCtxt, SuppressRegionErrors, TyCtxtInferExt};\n+use crate::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc::middle::region;\n@@ -244,7 +244,7 @@ fn do_normalize_predicates<'tcx>(\n             region_context,\n             &region_scope_tree,\n             &outlives_env,\n-            SuppressRegionErrors::default(),\n+            RegionckMode::default(),\n         );\n \n         let predicates = match infcx.fully_resolve(&predicates) {"}, {"sha": "cf0b4b82eea7261590744284c8be8fe9ac8e2778", "filename": "src/librustc_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -15,5 +15,6 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "4b522997537b7bf905d7a23b08e6ae93137bff08", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,10 @@\n use rustc::hir::map as hir_map;\n-use rustc::session::CrateDisambiguator;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_trait_selection::traits;"}, {"sha": "e61a36f844f87bc3bc660a077d963a877bc18df7", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -19,6 +19,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "9a8d161572bcfd3e28879e70f4e429cda5536e02", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,13 +6,10 @@\n // ignore-tidy-filelength\n \n use crate::collect::PlaceholderHirTyCollector;\n-use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n-use rustc::session::{parse::feature_err, Session};\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n@@ -26,15 +23,18 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n use rustc_hir::{Constness, ExprKind, GenericArg, GenericArgs};\n+use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n-use smallvec::SmallVec;\n \n+use smallvec::SmallVec;\n use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n@@ -340,7 +340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n                     tcx.struct_span_lint_hir(\n-                        lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n+                        LATE_BOUND_LIFETIME_ARGUMENTS,\n                         args.args[0].id(),\n                         multispan,\n                         |lint| lint.build(msg).emit(),"}, {"sha": "2315b42aec54c7b4ced0bf96c6beb1d9490f0964", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,19 +1,18 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use rustc::session::DiagnosticMessageId;\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc_ast::ast::Ident;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_session::DiagnosticMessageId;\n+use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n \n-use rustc_ast::ast::Ident;\n-use rustc_span::Span;\n-\n use std::iter;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "2875d38a996a04e72934315a5972dc831747b621", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -31,11 +31,9 @@\n use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n-use crate::lint;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n use rustc::middle::lang_items;\n-use rustc::session::Session;\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n@@ -44,6 +42,8 @@ use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_ast::ast;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_session::lint;\n+use rustc_session::Session;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;"}, {"sha": "b0d74651847a90080ad4a88b8fb8acaebb4394fd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -52,7 +52,6 @@\n \n use crate::astconv::AstConv;\n use crate::check::{FnCtxt, Needs};\n-use rustc::session::parse::feature_err;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -66,11 +65,13 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n+\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n "}, {"sha": "a2832d92d4aebdbc62a2843d3bc1420671bd623e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n@@ -890,7 +889,7 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            type Map = Map<'v>;\n+                            type Map = intravisit::ErasedMap<'v>;\n                             fn nested_visit_map(\n                                 &mut self,\n                             ) -> intravisit::NestedVisitorMap<Self::Map>"}, {"sha": "e48ebbbb23514b153438220d9c04b8d3b185784d", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, Predicate, Ty, TyCtxt};\n use rustc_errors::struct_span_err;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{InferOk, SuppressRegionErrors, TyCtxtInferExt};\n+use rustc_infer::infer::{InferOk, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -139,7 +139,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             drop_impl_did,\n             &region_scope_tree,\n             &outlives_env,\n-            SuppressRegionErrors::default(),\n+            RegionckMode::default(),\n         );\n         Ok(())\n     })"}, {"sha": "cdf68256a7a88198d6a3cd65fd3db0aad64b5efa", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,6 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -209,7 +208,7 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "45b1c7d6ea7409f19927698d519efc45dfa59a7d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -8,9 +8,7 @@ use crate::check::FnCtxt;\n use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n \n-use rustc::lint;\n use rustc::middle::stability;\n-use rustc::session::config::nightly_options;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n@@ -28,6 +26,8 @@ use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_session::config::nightly_options;\n+use rustc_session::lint;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;"}, {"sha": "94a582dfcfe80ca0bc323fa413cb089f721ddced", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,6 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use rustc::hir::map as hir_map;\n-use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_ast::ast;\n@@ -1347,7 +1346,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "bfb0d25dea208bd3f5de0544ad4ebb8da0491409", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -90,10 +90,8 @@ pub mod writeback;\n use crate::astconv::{AstConv, GenericArgCountMismatch, PathSeg};\n use crate::middle::lang_items;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::hir::map::Map;\n use rustc::middle::region;\n use rustc::mir::interpret::ConstValue;\n-use rustc::session::parse::feature_err;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -124,6 +122,10 @@ use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk, InferResult, TyCtxtInferExt};\n+use rustc_session::config::{self, EntryFnType};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -146,10 +148,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use std::slice;\n \n-use crate::lint;\n use crate::require_c_abi_if_c_variadic;\n-use crate::session::config::EntryFnType;\n-use crate::session::Session;\n use crate::util::common::{indenter, ErrorReported};\n use crate::TypeAndSubsts;\n \n@@ -1177,7 +1176,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -5790,7 +5789,7 @@ fn fatally_break_rust(sess: &Session) {\n     handler.note_without_error(&format!(\n         \"rustc {} running on {}\",\n         option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-        crate::session::config::host_triple(),\n+        config::host_triple(),\n     ));\n }\n "}, {"sha": "57a89614eb18c5100a44d175912746e80207ed5f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -76,7 +76,6 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::map::Map;\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n@@ -85,7 +84,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{self, RegionObligation, SuppressRegionErrors};\n+use rustc_infer::infer::{self, RegionObligation, RegionckMode};\n use rustc_span::Span;\n use rustc_trait_selection::infer::OutlivesEnvironmentExt;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n@@ -124,10 +123,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n-\n-        assert!(self.tables.borrow().free_region_map.is_empty());\n-        self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n+        rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));\n     }\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n@@ -145,7 +141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);\n         rcx.outlives_environment.save_implied_bounds(item_id);\n         rcx.visit_region_obligations(item_id);\n-        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::default());\n+        rcx.resolve_regions_and_report_errors(RegionckMode::default());\n     }\n \n     /// Region check a function body. Not invoked on closures, but\n@@ -168,13 +164,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));\n-\n-        // In this mode, we also copy the free-region-map into the\n-        // tables of the enclosing fcx. In the other regionck modes\n-        // (e.g., `regionck_item`), we don't have an enclosing tables.\n-        assert!(self.tables.borrow().free_region_map.is_empty());\n-        self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n+        rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));\n     }\n }\n \n@@ -355,7 +345,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.select_all_obligations_or_error();\n     }\n \n-    fn resolve_regions_and_report_errors(&self, suppress: SuppressRegionErrors) {\n+    fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n             self.implicit_region_bound,\n@@ -366,7 +356,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n             self.subject_def_id,\n             &self.region_scope_tree,\n             &self.outlives_environment,\n-            suppress,\n+            mode,\n         );\n     }\n \n@@ -417,7 +407,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "44b960ad22bffd074fa84048cdb4b825eb882573", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -35,7 +35,6 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -60,7 +59,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "3255d7b435c8fb55ce387c055494107c45613e29", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,7 +2,6 @@ use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use rustc::middle::lang_items;\n-use rustc::session::parse::feature_err;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::trait_def::TraitSpecializationKind;\n use rustc::ty::{\n@@ -11,17 +10,17 @@ use rustc::ty::{\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::ItemKind;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n-use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n-\n /// Helper type of a temporary returned by `.for_item(...)`.\n /// This is necessary because we can't write the following bound:\n ///"}, {"sha": "9d574ee50a4c5d7c6d5d505f7d8e240aaf2fe983", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,6 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir::map::Map;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -62,7 +61,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.visit_fru_field_types();\n         wbcx.visit_opaque_types(body.value.span);\n         wbcx.visit_coercion_casts();\n-        wbcx.visit_free_region_map();\n         wbcx.visit_user_provided_tys();\n         wbcx.visit_user_provided_sigs();\n         wbcx.visit_generator_interior_types();\n@@ -125,7 +123,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn write_ty_to_tables(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {\n         debug!(\"write_ty_to_tables({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.needs_infer() && !ty.has_placeholders());\n+        assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());\n         self.tables.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -244,7 +242,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -327,9 +325,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             let new_upvar_capture = match *upvar_capture {\n                 ty::UpvarCapture::ByValue => ty::UpvarCapture::ByValue,\n                 ty::UpvarCapture::ByRef(ref upvar_borrow) => {\n-                    let r = upvar_borrow.region;\n-                    let r = self.resolve(&r, &upvar_id.var_path.hir_id);\n-                    ty::UpvarCapture::ByRef(ty::UpvarBorrow { kind: upvar_borrow.kind, region: r })\n+                    ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n+                        kind: upvar_borrow.kind,\n+                        region: self.tcx().lifetimes.re_erased,\n+                    })\n                 }\n             };\n             debug!(\"Upvar capture for {:?} resolved to {:?}\", upvar_id, new_upvar_capture);\n@@ -358,11 +357,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n-    fn visit_free_region_map(&mut self) {\n-        self.tables.free_region_map = self.fcx.tables.borrow().free_region_map.clone();\n-        debug_assert!(!self.tables.free_region_map.elements().any(|r| r.has_local_value()));\n-    }\n-\n     fn visit_user_provided_tys(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n@@ -427,8 +421,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     fn visit_opaque_types(&mut self, span: Span) {\n         for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n             let hir_id = self.tcx().hir().as_local_hir_id(def_id).unwrap();\n-            let instantiated_ty =\n-                self.tcx().erase_regions(&self.resolve(&opaque_defn.concrete_ty, &hir_id));\n+            let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &hir_id);\n \n             debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n \n@@ -617,10 +610,8 @@ impl Locatable for hir::HirId {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// The Resolver. This is the type folding engine that detects\n-// unresolved types and so forth.\n-\n+/// The Resolver. This is the type folding engine that detects\n+/// unresolved types and so forth.\n struct Resolver<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n@@ -653,7 +644,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match self.infcx.fully_resolve(&t) {\n-            Ok(t) => t,\n+            Ok(t) => self.infcx.tcx.erase_regions(&t),\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 self.report_error(t);\n@@ -662,15 +653,14 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n         }\n     }\n \n-    // FIXME This should be carefully checked\n-    // We could use `self.report_error` but it doesn't accept a ty::Region, right now.\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        self.infcx.fully_resolve(&r).unwrap_or(self.tcx.lifetimes.re_static)\n+        debug_assert!(!r.is_late_bound(), \"Should not be resolving bound region.\");\n+        self.tcx.lifetimes.re_erased\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         match self.infcx.fully_resolve(&ct) {\n-            Ok(ct) => ct,\n+            Ok(ct) => self.infcx.tcx.erase_regions(&ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet"}, {"sha": "d0414af5b213866e85f833224d2a1e99cfa55074", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,3 @@\n-use crate::lint;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -7,6 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::visibility_qualified;\n+use rustc_session::lint;\n use rustc_span::Span;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {"}, {"sha": "e24d9bebf657fd730cee09280c26499a0b679507", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{SuppressRegionErrors, TyCtxtInferExt};\n+use rustc_infer::infer::{RegionckMode, TyCtxtInferExt};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::misc::{can_type_implement_copy, CopyImplementationError};\n use rustc_trait_selection::traits::predicate_for_trait_def;\n@@ -307,7 +307,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n                             impl_did,\n                             &region_scope_tree,\n                             &outlives_env,\n-                            SuppressRegionErrors::default(),\n+                            RegionckMode::default(),\n                         );\n                     }\n                 }\n@@ -568,7 +568,7 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n             impl_did,\n             &region_scope_tree,\n             &outlives_env,\n-            SuppressRegionErrors::default(),\n+            RegionckMode::default(),\n         );\n \n         CoerceUnsizedInfo { custom_kind: kind }"}, {"sha": "7145b948f2f5a96159222a942ca280c39853bb7f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -17,14 +17,12 @@\n use crate::astconv::{AstConv, Bounds, SizedByDefault};\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::constrained_generic_params as cgp;\n-use crate::lint;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime as rl;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n-use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::Discr;\n@@ -42,6 +40,8 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, Node, Unsafety};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -105,7 +105,7 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -1060,7 +1060,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "41c205bc11b3594de9f7ea67f9cc117d6224e50e", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::parse::feature_err;\n use rustc::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n@@ -11,6 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;"}, {"sha": "cae88376118466d9bd0fb5b5efbac9097b76db30", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -75,7 +75,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{InferCtxt, SuppressRegionErrors, TyCtxtInferExt};\n+use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n@@ -162,7 +162,7 @@ fn get_impl_substs<'tcx>(\n         impl1_def_id,\n         &ScopeTree::default(),\n         &outlives_env,\n-        SuppressRegionErrors::default(),\n+        RegionckMode::default(),\n     );\n     let impl2_substs = match infcx.fully_resolve(&impl2_substs) {\n         Ok(s) => s,"}, {"sha": "e487e0d265c3ef0387ac3755d0be2f69ef882d2d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -88,10 +88,7 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n-use rustc::lint;\n use rustc::middle;\n-use rustc::session;\n-use rustc::session::config::EntryFnType;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -103,6 +100,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n+use rustc_session::config::EntryFnType;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;"}, {"sha": "a4f8472ae28913bf7b3d8027edeccec5225a3784", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,6 +1,6 @@\n-use rustc::session::Session;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n pub trait StructuredDiagnostic<'tcx> {"}, {"sha": "179c5bfacf32ea047d7a1721dabe2e68146c5795", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,15 +4,14 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use rustc::lint::Level;\n-use rustc::session;\n-use rustc::session::config::{\n+use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n+use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n     nightly_options,\n };\n-use rustc::session::config::{parse_crate_types_from_list, parse_externs, CrateType};\n-use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n-use rustc::session::search_paths::SearchPath;\n+use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n+use rustc_session::lint::Level;\n+use rustc_session::search_paths::SearchPath;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_target::spec::TargetTriple;\n \n@@ -299,9 +298,9 @@ impl Options {\n             return Err(0);\n         }\n \n-        let color = session::config::parse_color(&matches);\n-        let (json_rendered, _artifacts) = session::config::parse_json(&matches);\n-        let error_format = session::config::parse_error_format(&matches, color, json_rendered);\n+        let color = config::parse_color(&matches);\n+        let (json_rendered, _artifacts) = config::parse_json(&matches);\n+        let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n         let debugging_options = build_debugging_options(matches, error_format);"}, {"sha": "f0b9ad2852f5115a480e5bcd99c88e705b654810", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,23 +1,22 @@\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::session::config::ErrorOutputType;\n-use rustc::session::DiagnosticOutput;\n-use rustc::session::{self, config};\n use rustc::ty::{Ty, TyCtxt};\n+use rustc_ast::ast::CRATE_NODE_ID;\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_driver::abort_on_err;\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_interface::interface;\n use rustc_resolve as resolve;\n+use rustc_session::config::ErrorOutputType;\n use rustc_session::lint;\n-\n-use rustc_ast::ast::CRATE_NODE_ID;\n-use rustc_attr as attr;\n-use rustc_errors::emitter::{Emitter, EmitterWriter};\n-use rustc_errors::json::JsonEmitter;\n+use rustc_session::DiagnosticOutput;\n+use rustc_session::{config, Session};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -34,8 +33,8 @@ use crate::html::render::RenderInfo;\n \n use crate::passes::{self, Condition::*, ConditionalPass};\n \n-pub use rustc::session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n-pub use rustc::session::search_paths::SearchPath;\n+pub use rustc_session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n+pub use rustc_session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n@@ -68,7 +67,7 @@ pub struct DocContext<'tcx> {\n }\n \n impl<'tcx> DocContext<'tcx> {\n-    pub fn sess(&self) -> &session::Session {\n+    pub fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n "}, {"sha": "d782a9d5a094ddb6a528bf0c6920aff9d178cb24", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -3151,7 +3151,6 @@ fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n             continue;\n         }\n \n-        // FIXME: this currently renders too many spaces as in: `#[repr(C, align (8))]`.\n         attrs.push_str(&pprust::attribute_to_string(&attr));\n     }\n     if !attrs.is_empty() {"}, {"sha": "3c1f0509bba4d04b98e6b02e75cdc3e26f3a42f1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -49,8 +49,8 @@ use std::env;\n use std::panic;\n use std::process;\n \n-use rustc::session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n-use rustc::session::{early_error, early_warn};\n+use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n+use rustc_session::{early_error, early_warn};\n \n #[macro_use]\n mod externalfiles;"}, {"sha": "72106afbe0e759092ef13f46d288e906d5033971", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,3 @@\n-use rustc::lint;\n use rustc::ty;\n use rustc_ast::ast::{self, Ident};\n use rustc_errors::Applicability;\n@@ -12,6 +11,7 @@ use rustc_hir::def::{\n };\n use rustc_hir::def_id::DefId;\n use rustc_resolve::ParentScope;\n+use rustc_session::lint;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n "}, {"sha": "38f371783e994d257462b0e88e25c03f54c6657c", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,9 +1,9 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n-use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc_hir::def_id::{DefId, DefIdSet};\n+use rustc_session::lint;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;"}, {"sha": "c5aa4677d56595fad27ec1adea342cf5807eba25", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::{self, config, DiagnosticOutput};\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast;\n use rustc_ast::with_globals;\n@@ -8,6 +7,7 @@ use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_interface::interface;\n+use rustc_session::{self, config, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n@@ -52,7 +52,7 @@ pub fn run(options: Options) -> i32 {\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n-        lint_cap: Some(::rustc::lint::Level::Allow),\n+        lint_cap: Some(rustc_session::lint::Level::Allow),\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions { ..config::basic_debugging_options() },\n         edition: options.edition,\n@@ -854,7 +854,7 @@ impl Tester for Collector {\n }\n \n struct HirCollector<'a, 'hir> {\n-    sess: &'a session::Session,\n+    sess: &'a Session,\n     collector: &'a mut Collector,\n     map: Map<'hir>,\n     codes: ErrorCodes,"}, {"sha": "314424631fcbf7a16d4caa5a8ec3cc2c4eb32bbc", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -234,12 +234,55 @@ mod crate_keyword {}\n \n #[doc(keyword = \"else\")]\n //\n-/// What to do when an [`if`] condition does not hold.\n+/// What expression to evaluate when an [`if`] condition evaluates to [`false`].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `else` expressions are optional. When no else expressions are supplied it is assumed to evaluate\n+/// to the unit type `()`.\n+///\n+/// The type that the `else` blocks evaluate to must be compatible with the type that the `if` block\n+/// evaluates to.\n+///\n+/// As can be seen below, `else` must be followed by either: `if`, `if let`, or a block `{}` and it\n+/// will return the value of that expression.\n ///\n+/// ```rust\n+/// let result = if true == false {\n+///     \"oh no\"\n+/// } else if \"something\" == \"other thing\" {\n+///     \"oh dear\"\n+/// } else if let Some(200) = \"blarg\".parse::<i32>().ok() {\n+///     \"uh oh\"\n+/// } else {\n+///     println!(\"Sneaky side effect.\");\n+///     \"phew, nothing's broken\"\n+/// };\n+/// ```\n+///\n+/// Here's another example but here we do not try and return an expression:\n+///\n+/// ```rust\n+/// if true == false {\n+///     println!(\"oh no\");\n+/// } else if \"something\" == \"other thing\" {\n+///     println!(\"oh dear\");\n+/// } else if let Some(200) = \"blarg\".parse::<i32>().ok() {\n+///     println!(\"uh oh\");\n+/// } else {\n+///     println!(\"phew, nothing's broken\");\n+/// }\n+/// ```\n+///\n+/// The above is _still_ an expression but it will always evaluate to `()`.\n+///\n+/// There is possibly no limit to the number of `else` blocks that could follow an `if` expression\n+/// however if you have several then a [`match`] expression might be preferable.\n+///\n+/// Read more about control flow in the [Rust Book].\n+///\n+/// [Rust Book]: ../book/ch03-05-control-flow.html#handling-multiple-conditions-with-else-if\n+/// [`match`]: keyword.match.html\n+/// [`false`]: keyword.false.html\n /// [`if`]: keyword.if.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod else_keyword {}\n \n #[doc(keyword = \"enum\")]\n@@ -637,10 +680,18 @@ mod impl_keyword {}\n //\n /// Iterate over a series of values with [`for`].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// The expression immediately following `in` must implement the [`Iterator`] trait.\n ///\n+/// ## Literal Examples:\n+///\n+///    * `for _ **in** 1..3 {}` - Iterate over an exclusive range up to but excluding 3.\n+///    * `for _ **in** 1..=3 {}` - Iterate over an inclusive range up to and includeing 3.\n+///\n+/// (Read more about [range patterns])\n+///\n+/// [`Iterator`]: ../book/ch13-04-performance.html\n+/// [`range patterns`]: ../reference/patterns.html?highlight=range#range-patterns\n /// [`for`]: keyword.for.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod in_keyword {}\n \n #[doc(keyword = \"let\")]"}, {"sha": "9b3b381d6210ac4f81b73721bc00fa01054c850a", "filename": "src/test/incremental/change_symbol_export_status.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,10 +2,8 @@\n // compile-flags: -Zquery-dep-graph\n \n #![feature(rustc_attrs)]\n-#![allow(private_no_mangle_fns)]\n-\n-#![rustc_partition_codegened(module=\"change_symbol_export_status-mod1\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"change_symbol_export_status-mod2\", cfg=\"rpass2\")]\n+#![rustc_partition_codegened(module = \"change_symbol_export_status-mod1\", cfg = \"rpass2\")]\n+#![rustc_partition_reused(module = \"change_symbol_export_status-mod2\", cfg = \"rpass2\")]\n \n // This test case makes sure that a change in symbol visibility is detected by\n // our dependency tracking. We do this by changing a module's visibility to"}, {"sha": "8edece2c8d361402f4d878f981b64e0e3992ac4b", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -84,8 +84,8 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner_items, typeck_tables_of\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n     let _: u32 = closure(1);"}, {"sha": "139c265164bc57d71760e6efd349b4d019c91cca", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -360,7 +360,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of,typeck_tables_of\"\n+        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }"}, {"sha": "89aa0b1a58baa9eaa315010aeec03b04ead7555b", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y"}, {"sha": "c858a4c5ee7c6cecce7253ae2b0de020c96606b7", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,9 +4,9 @@ extern \"C\" {\n \n static Y: i32 = 42;\n \n-static mut BAR: *const &'static i32 = [&Y].as_ptr();\n+static mut BAR: *const &i32 = [&Y].as_ptr();\n \n-static mut FOO: *const &'static i32 = [unsafe { &X }].as_ptr();\n+static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n fn main() {}\n \n@@ -18,8 +18,8 @@ fn main() {}\n //     _4 = &(*_5);\n //     _3 = [move _4];\n //     _2 = &_3;\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -35,8 +35,8 @@ fn main() {}\n //     _4 = &(*_5);\n //     _3 = [move _4];\n //     _2 = &_3;\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -50,8 +50,8 @@ fn main() {}\n // ...\n //     _6 = const BAR::promoted[0];\n //     _2 = &(*_6);\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {\n@@ -63,8 +63,8 @@ fn main() {}\n // ...\n //     _6 = const FOO::promoted[0];\n //     _2 = &(*_6);\n-//     _1 = move _2 as &[&'static i32] (Pointer(Unsize));\n-//     _0 = const core::slice::<impl [&'static i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n+//     _1 = move _2 as &[&i32] (Pointer(Unsize));\n+//     _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1];\n // }\n // ...\n // bb2: {"}, {"sha": "74a606af28fc1cb222c25c1a7c888d790ec13aca", "filename": "src/test/mir-opt/no-drop-for-inactive-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -27,7 +27,7 @@ fn main() {\n //     }\n //     bb2: {\n //         ...\n-//         const std::rt::begin_panic::<&'static str>(const \"explicit panic\") -> bb5;\n+//         const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5;\n //     }\n //     bb3: {\n //         unreachable;"}, {"sha": "ea106eaf595292d0d5b28baa180bbe207cfd777e", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -26,16 +26,16 @@ fn main() {\n //     goto -> bb7;\n // }\n // bb2: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n // }\n // bb3: {\n //     goto -> bb4;\n // }\n // bb4: {\n //     _4 = &shallow _1;\n-//     _5 = &shallow ((_1 as Some).0: &'<empty> &'<empty> i32);\n-//     _6 = &shallow (*((_1 as Some).0: &'<empty> &'<empty> i32));\n-//     _7 = &shallow (*(*((_1 as Some).0: &'<empty> &'<empty> i32)));\n+//     _5 = &shallow ((_1 as Some).0: &&i32);\n+//     _6 = &shallow (*((_1 as Some).0: &&i32));\n+//     _7 = &shallow (*(*((_1 as Some).0: &&i32)));\n //     StorageLive(_8);\n //     _8 = _2;\n //     switchInt(move _8) -> [false: bb6, otherwise: bb5];\n@@ -72,7 +72,7 @@ fn main() {\n //     goto -> bb7;\n // }\n // bb2: {\n-//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb1];\n+//     switchInt((*(*((_1 as Some).0: &&i32)))) -> [0i32: bb3, otherwise: bb1];\n // }\n // bb3: {\n //     goto -> bb4;"}, {"sha": "1c98766b9685c254a4d6f71fe1359c3430e3d574", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -35,12 +35,12 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.XXX.mir_map.0.mir\n-//    let mut _0: &'static Foo;\n-//    let _1: &'static Foo;\n+//    let mut _0: &Foo;\n+//    let _1: &Foo;\n //    let _2: Foo;\n-//    let mut _3: &'static [(u32, u32)];\n-//    let mut _4: &'static [(u32, u32); 42];\n-//    let _5: &'static [(u32, u32); 42];\n+//    let mut _3: &[(u32, u32)];\n+//    let mut _4: &[(u32, u32); 42];\n+//    let _5: &[(u32, u32); 42];\n //    let _6: [(u32, u32); 42];\n //    let mut _7: (u32, u32);\n //    let mut _8: (u32, u32);\n@@ -178,7 +178,7 @@ fn main() {\n //        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n //        _5 = &_6;\n //        _4 = &(*_5);\n-//        _3 = move _4 as &'static [(u32, u32)] (Pointer(Unsize));\n+//        _3 = move _4 as &[(u32, u32)] (Pointer(Unsize));\n //        _2 = Foo { tup: const \"hi\", data: move _3 };\n //        _1 = &_2;\n //        _0 = &(*_1);"}, {"sha": "44d2c5db3e668e67fad55215387a9710a4aeb250", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@\n #![feature(rustc_attrs)]\n \n fn main() {\n-    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name (\"John\"))]\n+    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n     #[rustc_dummy = 8]\n     fn f() { }\n "}, {"sha": "66de0fc6cf7fa85c4487d161182f1314bc6d3792", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,7 +7,7 @@ macro_rules! mac { ($ ($ tt : tt) *) => () }\n mac! {\n     struct S { field1 : u8, field2 : u16, } impl Clone for S\n     {\n-        fn clone () -> S\n+        fn clone() -> S\n         {\n             panic ! () ;\n \n@@ -16,9 +16,8 @@ mac! {\n }\n \n mac! {\n-    a\n-    (aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa) a\n+    a(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n+      aaaaaaaa aaaaaaaa) a\n     [aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n      aaaaaaaa aaaaaaaa] a\n     {"}, {"sha": "ca1fef83cffc5fcfa249e8496d39d6c79fd71456", "filename": "src/test/pretty/issue-12590-a.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-12590-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-12590-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-12590-a.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,5 @@\n // pp-exact\n+// pretty-compare-only\n \n // The next line should not be expanded\n "}, {"sha": "ee7586bae820af702cea233269c9cf9e9cdc65de", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -34,29 +34,29 @@\n                            ((::alloc::fmt::format as\n                                 for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                                     as\n-                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n-                                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                                     &'static str)]\n-                                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                                   [&str; 1])\n-                                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                                 &[&str; 1]),\n-                                                                                                                                                                                                                             (&(match (()\n-                                                                                                                                                                                                                                          as\n-                                                                                                                                                                                                                                          ())\n-                                                                                                                                                                                                                                    {\n-                                                                                                                                                                                                                                    ()\n-                                                                                                                                                                                                                                    =>\n-                                                                                                                                                                                                                                    ([]\n-                                                                                                                                                                                                                                        as\n-                                                                                                                                                                                                                                        [std::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                                                }\n-                                                                                                                                                                                                                                   as\n-                                                                                                                                                                                                                                   [std::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                                 &[std::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                                    fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1})((&([(\"test\"\n+                                                                                                                                                                                                                       as\n+                                                                                                                                                                                                                       &str)]\n+                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                     [&str; 1])\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &[&str; 1]),\n+                                                                                                                                                                                                               (&(match (()\n+                                                                                                                                                                                                                            as\n+                                                                                                                                                                                                                            ())\n+                                                                                                                                                                                                                      {\n+                                                                                                                                                                                                                      ()\n+                                                                                                                                                                                                                      =>\n+                                                                                                                                                                                                                      ([]\n+                                                                                                                                                                                                                          as\n+                                                                                                                                                                                                                          [std::fmt::ArgumentV1; 0]),\n+                                                                                                                                                                                                                  }\n+                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                     [std::fmt::ArgumentV1; 0])\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &[std::fmt::ArgumentV1; 0]))\n                                                                                                                    as\n-                                                                                                                   std::fmt::Arguments<'_>))\n+                                                                                                                   std::fmt::Arguments))\n                                as std::string::String);\n                        (res as std::string::String)\n                    } as std::string::String);"}, {"sha": "031a4825959329f11360f13940057b1c8ebcac31", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,5 +12,5 @@ const C: C =\n       #[cfg(debug_assertions)]\n       field: 0,\n \n-      #[cfg(not (debug_assertions))]\n+      #[cfg(not(debug_assertions))]\n       field: 1,};"}, {"sha": "d975af52f5bb88007d5a61b4628a8f5d236dbb20", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -7,14 +7,12 @@ extern crate rustc_data_structures;\n extern crate rustc_hir;\n extern crate rustc_target;\n extern crate rustc_driver;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n use std::any::Any;\n use std::sync::Arc;\n use std::path::Path;\n-use rustc_span::symbol::Symbol;\n-use rustc::session::Session;\n-use rustc::session::config::OutputFilenames;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n@@ -23,6 +21,9 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_session::Session;\n+use rustc_session::config::OutputFilenames;\n+use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n \n pub struct NoLlvmMetadataLoader;\n@@ -89,7 +90,7 @@ impl CodegenBackend for TheBackend {\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use std::io::Write;\n-        use rustc::session::config::CrateType;\n+        use rustc_session::config::CrateType;\n         use rustc_codegen_utils::link::out_filename;\n         let crate_name = codegen_results.downcast::<Symbol>()\n             .expect(\"in link: codegen_results is not a Symbol\");"}, {"sha": "af84faa7511c61ba9777d853669ac82ab09cce5c", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,13 +1,12 @@\n #![feature(rustc_private)]\n \n-extern crate rustc;\n extern crate rustc_interface;\n extern crate rustc_driver;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc::session::DiagnosticOutput;\n-use rustc::session::config::{Input, Options,\n-                             OutputType, OutputTypes};\n+use rustc_session::DiagnosticOutput;\n+use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n use rustc_interface::interface;\n use rustc_span::source_map::FileName;\n "}, {"sha": "e9cd3514a07e21623424b7f1f5648e0379c138de", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -16,6 +16,6 @@ pub enum Foo {\n     Bar,\n }\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align (8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "837ed1f002fc99b3bb1198397989ad9ffd087a73", "filename": "src/test/ui-fulldeps/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,16 +2,14 @@\n \n #![feature(rustc_private)]\n \n-// We're testing linkage visibility; the compiler warns us, but we want to\n-// do the runtime check that these functions aren't exported.\n-#![allow(private_no_mangle_fns)]\n-\n extern crate rustc_metadata;\n \n use rustc_metadata::dynamic_lib::DynamicLibrary;\n \n #[no_mangle]\n-pub fn foo() { bar(); }\n+pub fn foo() {\n+    bar();\n+}\n \n pub fn foo2<T>() {\n     fn bar2() {\n@@ -21,11 +19,11 @@ pub fn foo2<T>() {\n }\n \n #[no_mangle]\n-fn bar() { }\n+fn bar() {}\n \n #[allow(dead_code)]\n #[no_mangle]\n-fn baz() { }\n+fn baz() {}\n \n pub fn test() {\n     let lib = DynamicLibrary::open(None).unwrap();"}, {"sha": "636fafc2bc44a248731973987639c545c49daf4f", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -110,9 +110,9 @@ async fn mixed_sizes() {\n }\n \n fn main() {\n-    assert_eq!(1028, std::mem::size_of_val(&single()));\n-    assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(7188, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(1025, std::mem::size_of_val(&single()));\n+    assert_eq!(1026, std::mem::size_of_val(&single_with_noop()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined()));\n+    assert_eq!(3079, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(7181, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "d5d7b3fc3f0bd10c7438002ba5f0a391f962c929", "filename": "src/test/ui/async-await/async-fn-size-uninit-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -95,9 +95,9 @@ async fn join_retval() -> Joiner {\n }\n \n fn main() {\n-    assert_eq!(8, std::mem::size_of_val(&single()));\n-    assert_eq!(12, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(3080, std::mem::size_of_val(&join_retval()));\n+    assert_eq!(2, std::mem::size_of_val(&single()));\n+    assert_eq!(3, std::mem::size_of_val(&single_with_noop()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined()));\n+    assert_eq!(3078, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(3074, std::mem::size_of_val(&join_retval()));\n }"}, {"sha": "0c1f3636446c9ee5b493df779d4d9a23021b6019", "filename": "src/test/ui/async-await/async-fn-size.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -86,13 +86,13 @@ async fn await3_level5() -> u8 {\n \n fn main() {\n     assert_eq!(2, std::mem::size_of_val(&base()));\n-    assert_eq!(8, std::mem::size_of_val(&await1_level1()));\n-    assert_eq!(12, std::mem::size_of_val(&await2_level1()));\n-    assert_eq!(12, std::mem::size_of_val(&await3_level1()));\n-    assert_eq!(24, std::mem::size_of_val(&await3_level2()));\n-    assert_eq!(36, std::mem::size_of_val(&await3_level3()));\n-    assert_eq!(48, std::mem::size_of_val(&await3_level4()));\n-    assert_eq!(60, std::mem::size_of_val(&await3_level5()));\n+    assert_eq!(3, std::mem::size_of_val(&await1_level1()));\n+    assert_eq!(4, std::mem::size_of_val(&await2_level1()));\n+    assert_eq!(5, std::mem::size_of_val(&await3_level1()));\n+    assert_eq!(8, std::mem::size_of_val(&await3_level2()));\n+    assert_eq!(11, std::mem::size_of_val(&await3_level3()));\n+    assert_eq!(14, std::mem::size_of_val(&await3_level4()));\n+    assert_eq!(17, std::mem::size_of_val(&await3_level5()));\n \n     assert_eq!(1,   wait(base()));\n     assert_eq!(1,   wait(await1_level1()));"}, {"sha": "305f259eac22dc38832040e15a79ede2a75ca89d", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -12,7 +12,7 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n \n@@ -22,15 +22,15 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:37:5\n@@ -54,23 +54,23 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:46:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:49:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:52:5\n@@ -94,7 +94,7 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:61:5\n@@ -110,39 +110,39 @@ error: any use of this value will cause an error\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n-   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                               unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:67:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n-   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                               unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:70:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n-   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                       unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:73:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:76:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:79:5\n@@ -158,31 +158,31 @@ error: any use of this value will cause an error\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:85:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n-   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                       unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:91:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:94:5\n@@ -198,15 +198,15 @@ error: any use of this value will cause an error\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:100:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:103:5\n@@ -222,15 +222,15 @@ error: any use of this value will cause an error\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:109:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn pointer into raw bytes\n \n error: aborting due to 29 previous errors\n "}, {"sha": "cc40728e6b574afa577f8f59cead2455a48782ee", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -30,15 +30,15 @@ error: any use of this value will cause an error\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n-   |                          a memory access tried to interpret some bytes as a pointer\n+   |                          unable to turn bytes into a pointer\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:17:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n-   |                          a memory access tried to interpret some bytes as a pointer\n+   |                          unable to turn bytes into a pointer\n \n error: aborting due to 5 previous errors\n "}, {"sha": "798f130a4baf6fb1bfa2c39afd888d2da3afcad3", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-\n    |                |\n-   |                dangling pointer was dereferenced\n+   |                pointer to alloc2 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "adad1b4f7fafe3006be2b5a38a7c446f0d20983d", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 8 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc8 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "0200bfe9f08f870f1fbdf43431ec9d25b8f16408", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,7 +6,7 @@\n use std::mem;\n \n // normalize-stderr-test \"offset \\d+\" -> \"offset N\"\n-// normalize-stderr-test \"allocation \\d+\" -> \"allocation N\"\n+// normalize-stderr-test \"alloc\\d+\" -> \"allocN\"\n // normalize-stderr-test \"size \\d+\" -> \"size N\"\n \n #[repr(C)]"}, {"sha": "80e60dbb58a5d6adf5f74cc191158f2a3b218c36", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:32:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -70,7 +70,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:62:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -86,7 +86,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:68:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -192,7 +192,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:125:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocation N which has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n error: aborting due to 24 previous errors\n "}, {"sha": "cf70454b6bf9eb28399144cf5fa761b4f4d9c135", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in `unchecked_shl`\n+   |                             overflowing shift by 8 in `unchecked_shl`\n    |\n    = note: `#[deny(const_err)]` on by default\n \n@@ -14,335 +14,335 @@ error: any use of this value will cause an error\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in `unchecked_shl`\n+   |                               overflowing shift by 16 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:19:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in `unchecked_shl`\n+   |                               overflowing shift by 32 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:21:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in `unchecked_shl`\n+   |                               overflowing shift by 64 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:23:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in `unchecked_shl`\n+   |                                 overflowing shift by 128 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:28:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in `unchecked_shl`\n+   |                             overflowing shift by 8 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:30:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in `unchecked_shl`\n+   |                               overflowing shift by 16 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:32:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in `unchecked_shl`\n+   |                               overflowing shift by 32 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:34:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in `unchecked_shl`\n+   |                               overflowing shift by 64 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:36:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in `unchecked_shl`\n+   |                                 overflowing shift by 128 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:41:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 255 in `unchecked_shl`\n+   |                                 overflowing shift by 255 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:43:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 65535 in `unchecked_shl`\n+   |                                   overflowing shift by 65535 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:45:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 4294967295 in `unchecked_shl`\n+   |                                   overflowing shift by 4294967295 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:47:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 18446744073709551615 in `unchecked_shl`\n+   |                                   overflowing shift by 18446744073709551615 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:49:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n-   |                                     Overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n+   |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:55:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n-   |                                        Overflowing shift by 250 in `unchecked_shl`\n+   |                                        overflowing shift by 250 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:57:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 65523 in `unchecked_shl`\n+   |                                          overflowing shift by 65523 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:59:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 4294967271 in `unchecked_shl`\n+   |                                          overflowing shift by 4294967271 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:61:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 18446744073709551586 in `unchecked_shl`\n+   |                                          overflowing shift by 18446744073709551586 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:63:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n-   |                                            Overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n+   |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:70:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in `unchecked_shr`\n+   |                             overflowing shift by 8 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:72:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in `unchecked_shr`\n+   |                               overflowing shift by 16 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:74:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in `unchecked_shr`\n+   |                               overflowing shift by 32 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:76:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in `unchecked_shr`\n+   |                               overflowing shift by 64 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:78:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in `unchecked_shr`\n+   |                                 overflowing shift by 128 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:83:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in `unchecked_shr`\n+   |                             overflowing shift by 8 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:85:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in `unchecked_shr`\n+   |                               overflowing shift by 16 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:87:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in `unchecked_shr`\n+   |                               overflowing shift by 32 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:89:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in `unchecked_shr`\n+   |                               overflowing shift by 64 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:91:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in `unchecked_shr`\n+   |                                 overflowing shift by 128 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:96:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 255 in `unchecked_shr`\n+   |                                 overflowing shift by 255 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:98:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 65535 in `unchecked_shr`\n+   |                                   overflowing shift by 65535 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:100:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 4294967295 in `unchecked_shr`\n+   |                                   overflowing shift by 4294967295 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:102:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 18446744073709551615 in `unchecked_shr`\n+   |                                   overflowing shift by 18446744073709551615 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:104:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n-   |                                     Overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n+   |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:110:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n-   |                                        Overflowing shift by 250 in `unchecked_shr`\n+   |                                        overflowing shift by 250 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:112:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 65523 in `unchecked_shr`\n+   |                                          overflowing shift by 65523 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:114:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 4294967271 in `unchecked_shr`\n+   |                                          overflowing shift by 4294967271 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:116:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 18446744073709551586 in `unchecked_shr`\n+   |                                          overflowing shift by 18446744073709551586 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:118:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n-   |                                            Overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n+   |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:123:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n-   |                         Overflow executing `unchecked_add`\n+   |                         overflow executing `unchecked_add`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:126:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n-   |                         Overflow executing `unchecked_sub`\n+   |                         overflow executing `unchecked_sub`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:129:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n-   |                         Overflow executing `unchecked_mul`\n+   |                         overflow executing `unchecked_mul`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:132:25\n@@ -358,7 +358,7 @@ error: any use of this value will cause an error\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::min_value(), -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n-   |                         Overflow executing `unchecked_div`\n+   |                         overflow executing `unchecked_div`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:137:25\n@@ -374,7 +374,7 @@ error: any use of this value will cause an error\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::min_value(), -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n-   |                         Overflow executing `unchecked_rem`\n+   |                         overflow executing `unchecked_rem`\n \n error: aborting due to 47 previous errors\n "}, {"sha": "0e213555052c85f683416846a706c2754b3185f3", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@ LL | / const FOO: &() = {\n LL | |     let y = ();\n LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+   | |__^ encountered dangling pointer in final constant\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "4d4c2876c4598afad2d7ddd75fa4853c1ca724c1", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,7 +5,7 @@ LL | / const FOO: *const u32 = {\n LL | |     let x = 42;\n LL | |     &x\n LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+   | |__^ encountered dangling pointer in final constant\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c7e902132e91ad5a3d29d4c3f7378ab194383b2d", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -16,7 +16,7 @@ error: any use of this value will cause an error\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n-   |     tried to call a function with ABI C using caller ABI Rust\n+   |     calling a function with ABI C using caller ABI Rust\n    |     inside call to `call_rust_fn` at $DIR/abi-mismatch.rs:13:17\n ...\n LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });"}, {"sha": "8456e8ec6870dcd4c0d2204b8e8ac737bfb662d7", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -11,7 +11,7 @@ LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ tried to modify constant memory\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc1 which is read-only\n LL | |     }\n LL | | };\n    | |__-"}, {"sha": "217530740079f2c6af474bab77fe2d0d908056ce", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -26,7 +26,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           a memory access tried to interpret some bytes as a pointer\n+   |           unable to turn bytes into a pointer\n    |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:28:14\n    | \n   ::: $DIR/offset_from_ub.rs:26:1\n@@ -81,7 +81,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           a memory access tried to interpret some bytes as a pointer\n+   |           unable to turn bytes into a pointer\n    |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:49:14\n    | \n   ::: $DIR/offset_from_ub.rs:45:1"}, {"sha": "5a4777145962584d625b2f0067e8511e92630b9a", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -21,7 +21,7 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: source type: `usize` (word size)\n-   = note: target type: `&'static [u8]` (2 * word size)\n+   = note: target type: `&[u8]` (2 * word size)\n \n error: could not evaluate constant pattern\n   --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9"}, {"sha": "9cb159603a8c561c1ce76152d2475ab59269782e", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,7 +1,9 @@\n // Test that macro-expanded non-inline modules behave correctly\n \n macro_rules! mod_decl {\n-    ($i:ident) => { mod $i; } //~ ERROR Cannot declare a non-inline module inside a block\n+    ($i:ident) => {\n+        mod $i; //~ ERROR Cannot declare a non-inline module inside a block\n+    };\n }\n \n mod macro_expanded_mod_helper {"}, {"sha": "f90419247c92badae27794bd1690ebbdf6ef3164", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/macro-expanded-mod.rs:4:25\n+  --> $DIR/macro-expanded-mod.rs:5:9\n    |\n-LL |     ($i:ident) => { mod $i; }\n-   |                         ^^\n+LL |         mod $i;\n+   |         ^^^^^^^\n ...\n LL |     mod_decl!(foo);\n    |     --------------- in this macro invocation"}, {"sha": "d034942ca5d4cc7a50ab020eeecadca5ad3a5878", "filename": "src/test/ui/directory_ownership/non-inline-mod-restriction.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fnon-inline-mod-restriction.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/non-inline-mod-restriction.rs:4:9\n+  --> $DIR/non-inline-mod-restriction.rs:4:5\n    |\n LL |     mod foo;\n-   |         ^^^\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ad854837ae5bd678985e7f483a2fd97019929755", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,7 +14,7 @@ LL | static BAR: _ = \"test\";\n    |             ^\n    |             |\n    |             not allowed in type signatures\n-   |             help: replace `_` with the correct type: `&'static str`\n+   |             help: replace `_` with the correct type: `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "685055525627ee7a8436e0d2301cb988f59fc8ae", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    | ---------------------------^^^^^^^^^---\n    |                            |\n-   |                            a memory access tried to interpret some bytes as a pointer\n+   |                            unable to turn bytes into a pointer\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "dbe700355957b1ebe76edff13adb9d7108211fca", "filename": "src/test/ui/error-codes/E0583.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `module_that_doesnt_exist`\n-  --> $DIR/E0583.rs:1:5\n+  --> $DIR/E0583.rs:1:1\n    |\n LL | mod module_that_doesnt_exist;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: to create the module `module_that_doesnt_exist`, create file \"$DIR/module_that_doesnt_exist.rs\"\n "}, {"sha": "8a0f8a380ab597e11627920386b7b84cbb17cea1", "filename": "src/test/ui/generator/discriminant.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,134 @@\n+//! Tests that generator discriminant sizes and ranges are chosen optimally and that they are\n+//! reflected in the output of `mem::discriminant`.\n+\n+// run-pass\n+\n+#![feature(generators, generator_trait, core_intrinsics)]\n+\n+use std::intrinsics::discriminant_value;\n+use std::marker::Unpin;\n+use std::mem::size_of_val;\n+use std::{cmp, ops::*};\n+\n+macro_rules! yield25 {\n+    ($e:expr) => {\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+        yield $e;\n+    };\n+}\n+\n+/// Yields 250 times.\n+macro_rules! yield250 {\n+    () => {\n+        yield250!(())\n+    };\n+\n+    ($e:expr) => {\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+        yield25!($e);\n+    };\n+}\n+\n+fn cycle(gen: impl Generator<()> + Unpin, expected_max_discr: u64) {\n+    let mut gen = Box::pin(gen);\n+    let mut max_discr = 0;\n+    loop {\n+        max_discr = cmp::max(max_discr, discriminant_value(gen.as_mut().get_mut()));\n+        match gen.as_mut().resume(()) {\n+            GeneratorState::Yielded(_) => {}\n+            GeneratorState::Complete(_) => {\n+                assert_eq!(max_discr, expected_max_discr);\n+                return;\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    // Has only one invalid discr. value.\n+    let gen_u8_tiny_niche = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+        }\n+    };\n+\n+    // Uses all values in the u8 discriminant.\n+    let gen_u8_full = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+        }\n+    };\n+\n+    // Barely needs a u16 discriminant.\n+    let gen_u16 = || {\n+        || {\n+            // 3 reserved variants\n+\n+            yield250!(); // 253 variants\n+\n+            yield; // 254\n+            yield; // 255\n+            yield; // 256\n+            yield; // 257\n+        }\n+    };\n+\n+    assert_eq!(size_of_val(&gen_u8_tiny_niche()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_tiny_niche())), 1); // uses niche\n+    assert_eq!(size_of_val(&Some(Some(gen_u8_tiny_niche()))), 2); // cannot use niche anymore\n+    assert_eq!(size_of_val(&gen_u8_full()), 1);\n+    assert_eq!(size_of_val(&Some(gen_u8_full())), 2); // cannot use niche\n+    assert_eq!(size_of_val(&gen_u16()), 2);\n+    assert_eq!(size_of_val(&Some(gen_u16())), 2); // uses niche\n+\n+    cycle(gen_u8_tiny_niche(), 254);\n+    cycle(gen_u8_full(), 255);\n+    cycle(gen_u16(), 256);\n+}"}, {"sha": "4f08ac0702bdb85a221067b48ea779e5d4b0a403", "filename": "src/test/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -23,6 +23,6 @@ fn main() {\n \n     // Neither of these generators have the resume arg live across the `yield`, so they should be\n     // 4 Bytes in size (only storing the discriminant)\n-    assert_eq!(size_of_val(&gen_copy), 4);\n-    assert_eq!(size_of_val(&gen_move), 4);\n+    assert_eq!(size_of_val(&gen_copy), 1);\n+    assert_eq!(size_of_val(&gen_move), 1);\n }"}, {"sha": "74c60d98154dd3da107bb7672c5d40afa5129c65", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -58,7 +58,7 @@ fn overlap_move_points() -> impl Generator<Yield = (), Return = ()> {\n     }\n }\n \n-fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()>{\n+fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()> {\n     static || {\n         let x = Foo([0; FOO_SIZE]);\n         yield;\n@@ -70,8 +70,8 @@ fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()>{\n }\n \n fn main() {\n-    assert_eq!(1028, std::mem::size_of_val(&move_before_yield()));\n-    assert_eq!(1032, std::mem::size_of_val(&move_before_yield_with_noop()));\n-    assert_eq!(2056, std::mem::size_of_val(&overlap_move_points()));\n-    assert_eq!(1032, std::mem::size_of_val(&overlap_x_and_y()));\n+    assert_eq!(1025, std::mem::size_of_val(&move_before_yield()));\n+    assert_eq!(1026, std::mem::size_of_val(&move_before_yield_with_noop()));\n+    assert_eq!(2051, std::mem::size_of_val(&overlap_move_points()));\n+    assert_eq!(1026, std::mem::size_of_val(&overlap_x_and_y()));\n }"}, {"sha": "52296042eb4a73b80b129fdda944822d3ee7e1cd", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `baz`\n-  --> $DIR/auxiliary/foo/bar.rs:1:9\n+  --> $DIR/auxiliary/foo/bar.rs:1:1\n    |\n LL | pub mod baz;\n-   |         ^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: to create the module `baz`, create file \"$DIR/auxiliary/foo/bar/baz.rs\"\n "}, {"sha": "09402c3d814101610a67760d90df1148e9abe146", "filename": "src/test/ui/issues/issue-21174.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21174.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     let new: T::B = unsafe { std::mem::transmute(value) };\n    |                              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `<T as Trait<'a>>::A` (size can vary because of <T as Trait>::A)\n-   = note: target type: `<T as Trait<'a>>::B` (size can vary because of <T as Trait>::B)\n+   = note: source type: `<T as Trait>::A` (this type does not have a fixed size)\n+   = note: target type: `<T as Trait>::B` (this type does not have a fixed size)\n \n error: aborting due to previous error\n "}, {"sha": "026943669f82892617f9414f7437597664fbe6a4", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,6 @@\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -15,15 +11,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -34,15 +32,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -53,15 +53,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -72,6 +74,12 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n+variable. It can occur for several cases, the most common of which is a\n+mismatch in the expected type that the compiler inferred for a variable's\n+initializing expression, and the actual type explicitly assigned to the\n+variable.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "735a46b8c875a2736c06928e11647e0a02066df1", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,10 +1,6 @@\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -15,15 +11,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -34,15 +32,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -53,15 +53,17 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n-\"}\n-{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"This error occurs when the compiler was unable to infer the concrete type of a\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n+\"}\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0308\n let x: i32 = \\\"I am not a number!\\\";\n@@ -72,6 +74,12 @@ let x: i32 = \\\"I am not a number!\\\";\n //      |\n //    type `i32` assigned to variable `x`\n ```\n+\n+This error occurs when the compiler was unable to infer the concrete type of a\n+variable. It can occur for several cases, the most common of which is a\n+mismatch in the expected type that the compiler inferred for a variable's\n+initializing expression, and the actual type explicitly assigned to the\n+variable.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "30e2ed8b7a6233c31381c846ea2eb858f4688bbb", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+// compile-flags: -W rust-2018-compatibility\n+// error-pattern: `try` is a keyword in the 2018 edition\n+\n+fn main() {}\n+\n+mod lint_pre_expansion_extern_module_aux;"}, {"sha": "c683a3fa670ae36d0221836ce468b89fbdf57c12", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,10 @@\n+warning: `try` is a keyword in the 2018 edition\n+  --> $DIR/lint_pre_expansion_extern_module_aux.rs:3:8\n+   |\n+LL | pub fn try() {}\n+   |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n+   |\n+   = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+"}, {"sha": "71dec40ea44f0d67ed0a8f533753f8763541bb7b", "filename": "src/test/ui/lint/lint_pre_expansion_extern_module_aux.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,3 @@\n+// ignore-test: not a test\n+\n+pub fn try() {}"}, {"sha": "bf0562713a497f1667792a8a37d2e2a7c512f7cf", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-error: the type `&'static T` does not permit zero-initialization\n+error: the type `&T` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:29:32\n    |\n LL |         let _val: &'static T = mem::zeroed();\n@@ -14,7 +14,7 @@ LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n    = note: references must be non-null\n \n-error: the type `&'static T` does not permit being left uninitialized\n+error: the type `&T` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:30:32\n    |\n LL |         let _val: &'static T = mem::uninitialized();\n@@ -25,7 +25,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    |\n    = note: references must be non-null\n \n-error: the type `Wrap<&'static T>` does not permit zero-initialization\n+error: the type `Wrap<&T>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:32:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::zeroed();\n@@ -40,7 +40,7 @@ note: references must be non-null (in this struct field)\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n-error: the type `Wrap<&'static T>` does not permit being left uninitialized\n+error: the type `Wrap<&T>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:33:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n@@ -121,7 +121,7 @@ LL |         let _val: Void = mem::uninitialized();\n    |\n    = note: enums with no variants have no valid value\n \n-error: the type `&'static i32` does not permit zero-initialization\n+error: the type `&i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:49:34\n    |\n LL |         let _val: &'static i32 = mem::zeroed();\n@@ -132,7 +132,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    |\n    = note: references must be non-null\n \n-error: the type `&'static i32` does not permit being left uninitialized\n+error: the type `&i32` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:50:34\n    |\n LL |         let _val: &'static i32 = mem::uninitialized();\n@@ -366,7 +366,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |\n    = note: `NonBig` must be initialized inside its custom valid range\n \n-error: the type `&'static i32` does not permit zero-initialization\n+error: the type `&i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:84:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n@@ -377,7 +377,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |\n    = note: references must be non-null\n \n-error: the type `&'static [i32]` does not permit zero-initialization\n+error: the type `&[i32]` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:85:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));"}, {"sha": "6217decd8ef88598a80d40f65cbbf3d50304b32e", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print ($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n "}, {"sha": "91b3fe15c4be7a87a4b8525988378e29831eb974", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `missing`\n-  --> $DIR/foo.rs:4:5\n+  --> $DIR/foo.rs:4:1\n    |\n LL | mod missing;\n-   |     ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: to create the module `missing`, create file \"$DIR/foo/missing.rs\"\n "}, {"sha": "f519de46c767f9627419778a00845c35a4750ab1", "filename": "src/test/ui/missing_non_modrs_mod/missing_non_modrs_mod_inline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_non_modrs_mod%2Fmissing_non_modrs_mod_inline.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error[E0583]: file not found for module `missing`\n-  --> $DIR/foo_inline.rs:4:9\n+  --> $DIR/foo_inline.rs:4:5\n    |\n LL |     mod missing;\n-   |         ^^^^^^^\n+   |     ^^^^^^^^^^^^\n    |\n    = help: to create the module `missing`, create file \"$DIR/foo_inline/inline/missing.rs\"\n "}, {"sha": "7b182421d34e3c0b1d7f1f2ccf95e876ad1f2f23", "filename": "src/test/ui/mod/mod_file_disambig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -2,4 +2,5 @@ mod mod_file_disambig_aux; //~ ERROR file for module `mod_file_disambig_aux` fou\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);\n+    //~^ ERROR failed to resolve: use of undeclared type or module `mod_file_aux`\n }"}, {"sha": "490633a3fb0ab15b620d9b362251b724e403eb58", "filename": "src/test/ui/mod/mod_file_disambig.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,11 +1,18 @@\n error[E0584]: file for module `mod_file_disambig_aux` found at both mod_file_disambig_aux.rs and mod_file_disambig_aux/mod.rs\n-  --> $DIR/mod_file_disambig.rs:1:5\n+  --> $DIR/mod_file_disambig.rs:1:1\n    |\n LL | mod mod_file_disambig_aux;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: delete or rename one of them to remove the ambiguity\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: use of undeclared type or module `mod_file_aux`\n+  --> $DIR/mod_file_disambig.rs:4:16\n+   |\n+LL |     assert_eq!(mod_file_aux::bar(), 10);\n+   |                ^^^^^^^^^^^^ use of undeclared type or module `mod_file_aux`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0584`.\n+Some errors have detailed explanations: E0433, E0584.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "1ae36a1f7605eb1a47403e393af05314b6f02a7c", "filename": "src/test/ui/parser/circular_modules_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -6,5 +6,5 @@ pub fn hi_str() -> String {\n }\n \n fn main() {\n-    circular_modules_hello::say_hello();\n+    circular_modules_hello::say_hello(); //~ ERROR cannot find function `say_hello` in module\n }"}, {"sha": "90f81c64835b74ae0eca9f50703c1cf2b79b94be", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,20 @@\n error: circular modules: $DIR/circular_modules_hello.rs -> $DIR/circular_modules_main.rs -> $DIR/circular_modules_hello.rs\n-  --> $DIR/circular_modules_main.rs:2:5\n+  --> $DIR/circular_modules_main.rs:2:1\n    |\n LL | mod circular_modules_hello;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0425]: cannot find function `say_hello` in module `circular_modules_hello`\n+  --> $DIR/circular_modules_main.rs:9:29\n+   |\n+LL |     circular_modules_hello::say_hello();\n+   |                             ^^^^^^^^^ not found in `circular_modules_hello`\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use circular_modules_hello::say_hello;\n+   |\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "bdb5c91ff91eb084cee75f781937ef5eb2309be4", "filename": "src/test/ui/parser/issue-5806.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-5806.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error: couldn't read $DIR/../parser: $ACCESS_DENIED_MSG (os error $ACCESS_DENIED_CODE)\n-  --> $DIR/issue-5806.rs:5:5\n+  --> $DIR/issue-5806.rs:5:1\n    |\n LL | mod foo;\n-   |     ^^^\n+   | ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f4a27b52ec5b48f113221558dbe3aef4f62ac09a", "filename": "src/test/ui/parser/mod_file_not_exist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,9 @@\n // ignore-windows\n \n mod not_a_real_file; //~ ERROR file not found for module `not_a_real_file`\n-//~^ HELP to create the module `not_a_real_file`, create file \"\n+//~^ HELP to create the module `not_a_real_file`, create file\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);\n+    //~^ ERROR failed to resolve: use of undeclared type or module `mod_file_aux`\n }"}, {"sha": "087ae9fe3e016c92e9cc1ebfc0e3510b86f4dd0b", "filename": "src/test/ui/parser/mod_file_not_exist.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,11 +1,18 @@\n error[E0583]: file not found for module `not_a_real_file`\n-  --> $DIR/mod_file_not_exist.rs:3:5\n+  --> $DIR/mod_file_not_exist.rs:3:1\n    |\n LL | mod not_a_real_file;\n-   |     ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: use of undeclared type or module `mod_file_aux`\n+  --> $DIR/mod_file_not_exist.rs:7:16\n+   |\n+LL |     assert_eq!(mod_file_aux::bar(), 10);\n+   |                ^^^^^^^^^^^^ use of undeclared type or module `mod_file_aux`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0583`.\n+Some errors have detailed explanations: E0433, E0583.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "4b7d7a02bbe78cc468d605715b09cdda7c16f2bf", "filename": "src/test/ui/parser/mod_file_not_exist_windows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -5,4 +5,5 @@ mod not_a_real_file; //~ ERROR file not found for module `not_a_real_file`\n \n fn main() {\n     assert_eq!(mod_file_aux::bar(), 10);\n+    //~^ ERROR failed to resolve: use of undeclared type or module `mod_file_aux`\n }"}, {"sha": "d67205cfdf1007cf9959fb3ed835fea809f119d5", "filename": "src/test/ui/parser/mod_file_not_exist_windows.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_not_exist_windows.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,11 +1,18 @@\n error[E0583]: file not found for module `not_a_real_file`\n-  --> $DIR/mod_file_not_exist_windows.rs:3:5\n+  --> $DIR/mod_file_not_exist_windows.rs:3:1\n    |\n LL | mod not_a_real_file;\n-   |     ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: to create the module `not_a_real_file`, create file \"$DIR/not_a_real_file.rs\"\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: use of undeclared type or module `mod_file_aux`\n+  --> $DIR/mod_file_not_exist_windows.rs:7:16\n+   |\n+LL |     assert_eq!(mod_file_aux::bar(), 10);\n+   |                ^^^^^^^^^^^^ use of undeclared type or module `mod_file_aux`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0583`.\n+Some errors have detailed explanations: E0433, E0583.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "cd1add73d58400b7ea41d757995f34b334a1e831", "filename": "src/test/ui/parser/mod_file_with_path_attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmod_file_with_path_attr.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,8 +1,8 @@\n error: couldn't read $DIR/not_a_real_file.rs: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/mod_file_with_path_attr.rs:4:5\n+  --> $DIR/mod_file_with_path_attr.rs:4:1\n    |\n LL | mod m;\n-   |     ^\n+   | ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1b4669a439ffe0fa574d11fc406769f6d74c796f", "filename": "src/test/ui/parser/stripped-nested-outline-mod-pass.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fstripped-nested-outline-mod-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fparser%2Fstripped-nested-outline-mod-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstripped-nested-outline-mod-pass.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -0,0 +1,13 @@\n+// Expansion drives parsing, so conditional compilation will strip\n+// out outline modules and we will never attempt parsing them.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+mod foo {\n+    mod bar {\n+        mod baz; // This was an error before.\n+    }\n+}"}, {"sha": "7d1cac8a442f5eae819c049f52de8966fb3d0fe7", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -21,7 +21,7 @@ fn uninhab_union() -> Foo {\n \n fn match_on_uninhab() {\n     match uninhab_ref() {\n-        //~^ ERROR non-exhaustive patterns: type `&'static !` is non-empty\n+        //~^ ERROR non-exhaustive patterns: type `&!` is non-empty\n     }\n \n     match uninhab_union() {"}, {"sha": "e1079f912d076821d3d95434b4df0c6754f55b7d", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type `&'static !` is non-empty\n+error[E0004]: non-exhaustive patterns: type `&!` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:23:11\n    |\n LL |     match uninhab_ref() {"}, {"sha": "cf9a97491f03941ce9902ed181d1a848cfb8b364", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1 +1 @@\n-fn main () { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }\n+fn main() { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }"}, {"sha": "15433bebde967df2bfe250a52ab4f89ba4e2b5e0", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "73e407918ec8cf68b7585d7018eb5105c9ccdaff", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A (identity ! ($crate :: S)) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -55,7 +55,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct B (identity ! ($crate :: S)) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct B(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "e125a3e7f17370619ce2917e190fa6b5596d09a1", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -80,7 +80,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -120,7 +120,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n+PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -161,7 +161,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -202,7 +202,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "06e1b0f1ac262288cc384c6b59c8041037bce83e", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.stderr", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -1,32 +1,54 @@\n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'b &'a usize`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:11:12\n    |\n-LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     ---------\n-   |                     |\n-   |                     these two types are declared with different lifetimes...\n LL |     let z: Option<&'b &'a usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'b` as defined on the function body at 10:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:10:14\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n+note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 10:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:10:10\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n \n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'b Paramd<'a>`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:17:12\n    |\n-LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     ---------\n-   |                     |\n-   |                     these two types are declared with different lifetimes...\n-LL |     let y: Paramd<'a> = Paramd { x: a };\n LL |     let z: Option<&'b Paramd<'a>> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'b` as defined on the function body at 15:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:14\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n+note: but the referenced data is only valid for the lifetime `'a` as defined on the function body at 15:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:15:10\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n \n-error[E0623]: lifetime mismatch\n+error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n-LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |                     ---------     --------- these two types are declared with different lifetimes...\n LL |     let z: Option<&'a &'b usize> = None;\n-   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `b` flows into `a` here\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 21:10\n+  --> $DIR/regions-free-region-ordering-caller.rs:21:10\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 21:14\n+  --> $DIR/regions-free-region-ordering-caller.rs:21:14\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |              ^^\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0623`.\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "2bf4734cf73802137006e1cd64f2865447231f85", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -8,18 +8,18 @@\n struct Paramd<'a> { x: &'a usize }\n \n fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'b &'a usize> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'b &'a usize> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n     let y: Paramd<'a> = Paramd { x: a };\n-    let z: Option<&'b Paramd<'a>> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'b Paramd<'a>> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n \n fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'a &'b usize> = None;//[migrate]~ ERROR E0623\n+    let z: Option<&'a &'b usize> = None;//[migrate]~ ERROR E0491\n     //[nll]~^ ERROR lifetime may not live long enough\n }\n "}, {"sha": "6b79697e9839e1947c11e1a04e4f16285d4ff51e", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -43,4 +43,4 @@ static S = Vec::<String>::new();\n static mut SM = \"abc\";\n //~^ ERROR missing type for `static mut` item\n //~| HELP provide a type for the item\n-//~| SUGGESTION &'static str\n+//~| SUGGESTION &str"}, {"sha": "a7b5aa5e5b124397475ba3e421d4942d8427c6b0", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -14,7 +14,7 @@ error: missing type for `static mut` item\n   --> $DIR/const-no-type.rs:43:12\n    |\n LL | static mut SM = \"abc\";\n-   |            ^^ help: provide a type for the item: `SM: &'static str`\n+   |            ^^ help: provide a type for the item: `SM: &str`\n \n error: missing type for `const` item\n   --> $DIR/const-no-type.rs:14:7"}, {"sha": "4e781318329bf0dd0c4cf925b290d132269564df", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -4,8 +4,7 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     transmute(x)\n    |     ^^^^^^^^^\n    |\n-   = note: source type: `<C as TypeConstructor<'a>>::T` (size can vary because of <C as TypeConstructor>::T)\n-   = note: target type: `<C as TypeConstructor<'b>>::T` (size can vary because of <C as TypeConstructor>::T)\n+   = note: `<C as TypeConstructor>::T` does not have a fixed size\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/main.rs:20:17"}, {"sha": "dc86ab30dfe415a3a067627339659ae25c0a8a8f", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57e1da59cd0761330b4ea8d47b16340a78eeafa9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=57e1da59cd0761330b4ea8d47b16340a78eeafa9", "patch": "@@ -70,7 +70,7 @@ LL | static TEST3: _ = \"test\";\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct type: `&'static str`\n+   |               help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:15:15\n@@ -232,7 +232,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n-   |                      help: replace `_` with the correct type: `&'static str`\n+   |                      help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:88:22"}]}