{"sha": "086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "node_id": "C_kwDOAAsO6NoAKDA4NmIwNDU4MjJiMDA4YzViNGU2ZWIzNGJhYzEwYmZhOGQ1YTdlYTE", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-10T06:46:58Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-10T06:46:58Z"}, "message": "add checking for `x -> x` and `ref x -> x` and related test cases.", "tree": {"sha": "69f22274116cad38e5a563c1a0a0889f55851d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f22274116cad38e5a563c1a0a0889f55851d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "html_url": "https://github.com/rust-lang/rust/commit/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9116412ae48f28521d042cdf4244a28f0070a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9116412ae48f28521d042cdf4244a28f0070a5", "html_url": "https://github.com/rust-lang/rust/commit/ec9116412ae48f28521d042cdf4244a28f0070a5"}], "stats": {"total": 124, "additions": 105, "deletions": 19}, "files": [{"sha": "76131d307d777e10e262cba3971b4b890a6c8c49", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{eq_expr_value, get_parent_expr, higher, is_else_clause, is_lang_ctor, peel_blocks_with_stmt};\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, Pat, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, Pat, PatKind, Path, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n@@ -107,6 +107,7 @@ fn check_if_let(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n     false\n }\n \n+/// Strip `return` keyword if the expression type is `ExprKind::Ret`.\n fn strip_return<'hir>(expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n     if let ExprKind::Ret(Some(ret)) = expr.kind {\n         ret\n@@ -118,6 +119,7 @@ fn strip_return<'hir>(expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n     let expr = strip_return(expr);\n     match (&pat.kind, &expr.kind) {\n+        // Example: `Some(val) => Some(val)`\n         (\n             PatKind::TupleStruct(QPath::Resolved(_, path), [first_pat, ..], _),\n             ExprKind::Call(call_expr, [first_param, ..]),\n@@ -130,9 +132,34 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n                 }\n             }\n         },\n+        // Example: `val => val`, or `ref val => *val`\n+        (PatKind::Binding(annot, _, pat_ident, _), _) => {\n+            let new_expr = if let (\n+                BindingAnnotation::Ref | BindingAnnotation::RefMut,\n+                ExprKind::Unary(UnOp::Deref, operand_expr),\n+            ) = (annot, &expr.kind)\n+            {\n+                operand_expr\n+            } else {\n+                expr\n+            };\n+\n+            if let ExprKind::Path(QPath::Resolved(\n+                _,\n+                Path {\n+                    segments: [first_seg, ..],\n+                    ..\n+                },\n+            )) = new_expr.kind\n+            {\n+                return pat_ident.name == first_seg.ident.name;\n+            }\n+        },\n+        // Example: `Custom::TypeA => Custom::TypeB`, or `None => None`\n         (PatKind::Path(QPath::Resolved(_, p_path)), ExprKind::Path(QPath::Resolved(_, e_path))) => {\n             return has_identical_segments(p_path.segments, e_path.segments);\n         },\n+        // Example: `5 => 5`\n         (PatKind::Lit(pat_lit_expr), ExprKind::Lit(expr_spanned)) => {\n             if let ExprKind::Lit(pat_spanned) = &pat_lit_expr.kind {\n                 return pat_spanned.node == expr_spanned.node;"}, {"sha": "ece18ad737fdad5264a22085a2dcfb94003a83b8", "filename": "tests/ui/needless_match.fixed", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.fixed?ref=086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "patch": "@@ -11,8 +11,15 @@ enum Choice {\n     D,\n }\n \n-fn useless_match(x: i32) {\n-    let _: i32 = x;\n+#[allow(unused_mut)]\n+fn useless_match() {\n+    let mut i = 10;\n+    let _: i32 = i;\n+    let _: i32 = i;\n+    let mut _i_mut = i;\n+\n+    let s = \"test\";\n+    let _: &str = s;\n }\n \n fn custom_type_match(se: Choice) {"}, {"sha": "36649de35a6030f91a1716c9d23844689981fccf", "filename": "tests/ui/needless_match.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.rs?ref=086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "patch": "@@ -11,12 +11,31 @@ enum Choice {\n     D,\n }\n \n-fn useless_match(x: i32) {\n-    let _: i32 = match x {\n+#[allow(unused_mut)]\n+fn useless_match() {\n+    let mut i = 10;\n+    let _: i32 = match i {\n         0 => 0,\n         1 => 1,\n         2 => 2,\n-        _ => x,\n+        _ => i,\n+    };\n+    let _: i32 = match i {\n+        0 => 0,\n+        1 => 1,\n+        ref i => *i,\n+    };\n+    let mut _i_mut = match i {\n+        0 => 0,\n+        1 => 1,\n+        ref mut i => *i,\n+    };\n+\n+    let s = \"test\";\n+    let _: &str = match s {\n+        \"a\" => \"a\",\n+        \"b\" => \"b\",\n+        s => s,\n     };\n }\n "}, {"sha": "ad1525406ade7abd6029b8f85278520b478c768e", "filename": "tests/ui/needless_match.stderr", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/086b045822b008c5b4e6eb34bac10bfa8d5a7ea1/tests%2Fui%2Fneedless_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.stderr?ref=086b045822b008c5b4e6eb34bac10bfa8d5a7ea1", "patch": "@@ -1,19 +1,52 @@\n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:15:18\n+  --> $DIR/needless_match.rs:17:18\n    |\n-LL |       let _: i32 = match x {\n+LL |       let _: i32 = match i {\n    |  __________________^\n LL | |         0 => 0,\n LL | |         1 => 1,\n LL | |         2 => 2,\n-LL | |         _ => x,\n+LL | |         _ => i,\n LL | |     };\n-   | |_____^ help: replace it with: `x`\n+   | |_____^ help: replace it with: `i`\n    |\n    = note: `-D clippy::needless-match` implied by `-D warnings`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:24:21\n+  --> $DIR/needless_match.rs:23:18\n+   |\n+LL |       let _: i32 = match i {\n+   |  __________________^\n+LL | |         0 => 0,\n+LL | |         1 => 1,\n+LL | |         ref i => *i,\n+LL | |     };\n+   | |_____^ help: replace it with: `i`\n+\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:28:22\n+   |\n+LL |       let mut _i_mut = match i {\n+   |  ______________________^\n+LL | |         0 => 0,\n+LL | |         1 => 1,\n+LL | |         ref mut i => *i,\n+LL | |     };\n+   | |_____^ help: replace it with: `i`\n+\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:35:19\n+   |\n+LL |       let _: &str = match s {\n+   |  ___________________^\n+LL | |         \"a\" => \"a\",\n+LL | |         \"b\" => \"b\",\n+LL | |         s => s,\n+LL | |     };\n+   | |_____^ help: replace it with: `s`\n+\n+error: this match expression is unnecessary\n+  --> $DIR/needless_match.rs:43:21\n    |\n LL |       let _: Choice = match se {\n    |  _____________________^\n@@ -25,7 +58,7 @@ LL | |     };\n    | |_____^ help: replace it with: `se`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:46:26\n+  --> $DIR/needless_match.rs:65:26\n    |\n LL |       let _: Option<i32> = match x {\n    |  __________________________^\n@@ -35,7 +68,7 @@ LL | |     };\n    | |_____^ help: replace it with: `x`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:62:31\n+  --> $DIR/needless_match.rs:81:31\n    |\n LL |       let _: Result<i32, i32> = match Ok(1) {\n    |  _______________________________^\n@@ -45,7 +78,7 @@ LL | |     };\n    | |_____^ help: replace it with: `Ok(1)`\n \n error: this match expression is unnecessary\n-  --> $DIR/needless_match.rs:66:31\n+  --> $DIR/needless_match.rs:85:31\n    |\n LL |       let _: Result<i32, i32> = match func_ret_err(0_i32) {\n    |  _______________________________^\n@@ -55,25 +88,25 @@ LL | |     };\n    | |_____^ help: replace it with: `func_ret_err(0_i32)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:73:5\n+  --> $DIR/needless_match.rs:92:5\n    |\n LL |     if let Some(a) = Some(1) { Some(a) } else { None }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `Some(1)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:77:30\n+  --> $DIR/needless_match.rs:96:30\n    |\n LL |     let _: Result<(), i32> = if let Err(e) = x { Err(e) } else { x };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:78:30\n+  --> $DIR/needless_match.rs:97:30\n    |\n LL |     let _: Result<(), i32> = if let Ok(val) = x { Ok(val) } else { x };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/needless_match.rs:84:21\n+  --> $DIR/needless_match.rs:103:21\n    |\n LL |       let _: Choice = if let Choice::A = x {\n    |  _____________________^\n@@ -85,5 +118,5 @@ LL | |         x\n LL | |     };\n    | |_____^ help: replace it with: `x`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 12 previous errors\n "}]}