{"sha": "e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NmM1OGZhN2UwOTJlYjczMTZiZWU5NThkNGFkOTllNWVjMGE5YzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-29T20:09:54Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Fix tests and address review comments", "tree": {"sha": "1c7d4cac109109397c5a7318c15960797b07fb47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7d4cac109109397c5a7318c15960797b07fb47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "html_url": "https://github.com/rust-lang/rust/commit/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "html_url": "https://github.com/rust-lang/rust/commit/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf"}], "stats": {"total": 249, "additions": 47, "deletions": 202}, "files": [{"sha": "62a6198b9b402108b931b8bacfe1bc802ac5d871", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -3,7 +3,7 @@ use rustc_attr::{InlineAttr, OptimizeAttr};\n use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n \n-#[derive(Clone, Encodable, Decodable, HashStable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable)]\n pub struct CodegenFnAttrs {\n     pub flags: CodegenFnAttrFlags,\n     /// Parsed representation of the `#[inline]` attribute\n@@ -37,7 +37,7 @@ pub struct CodegenFnAttrs {\n }\n \n bitflags! {\n-    #[derive(Encodable, Decodable, HashStable)]\n+    #[derive(TyEncodable, TyDecodable, HashStable)]\n     pub struct CodegenFnAttrFlags: u32 {\n         /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n         /// the hot path."}, {"sha": "276e45ce99b29a7490b0ace989b6f5b232a4dd0d", "filename": "src/librustc_middle/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -8,7 +8,7 @@ use rustc_macros::HashStable;\n /// kind of crate, including cdylibs which export very few things.\n /// `Rust` will only be exported if the crate produced is a Rust\n /// dylib.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone, Encodable, Decodable, HashStable)]\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum SymbolExportLevel {\n     C,\n     Rust,"}, {"sha": "5081295ab3f741de677d234d0f6a16d9673bd20f", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -242,7 +242,7 @@ pub struct CodegenUnit<'tcx> {\n /// Specifies the linkage type for a `MonoItem`.\n ///\n /// See https://llvm.org/docs/LangRef.html#linkage-types for more details about these variants.\n-#[derive(Copy, Clone, PartialEq, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Linkage {\n     External,\n     AvailableExternally,"}, {"sha": "81e60a7fd3743371e6bec7e0912dffce8cf295f8", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -2098,7 +2098,7 @@ impl<'tcx> VariantDef {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Encodable, Decodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub enum VariantDiscr {\n     /// Explicit value for this variant, i.e., `X = 123`.\n     /// The `DefId` corresponds to the embedded constant."}, {"sha": "05cd1ae456b356b49a8011a55fe642d4d8c7a626", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -215,7 +215,7 @@ impl TyKind<'tcx> {\n /// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n /// except through `tcx.err*()`.\n #[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(Encodable, Decodable, HashStable)]\n+#[derive(TyEncodable, TyDecodable, HashStable)]\n pub struct DelaySpanBugEmitted(pub(super) ());\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "c0e23b89a60df3bc1cf64954116e18c931cb9c46", "filename": "src/librustc_serialize/serialize.rs", "status": "modified", "additions": 39, "deletions": 194, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_serialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Flibrustc_serialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fserialize.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -385,11 +385,11 @@ pub trait Decoder {\n /// `MetadataEncodable` macros.\n ///\n /// * `Encodable` should be used in crates that don't depend on\n-///   `librustc_middle`.\n+///   `rustc_middle`.\n+/// * `MetadataEncodable` is used in `rustc_metadata` for types that contain\n+///   `rustc_metadata::rmeta::Lazy`.\n /// * `TyEncodable` should be used for types that are only serialized in crate\n-///   metadata or the incremental cache, except for simple enums.where\n-/// * `MetadataEncodable` is used in `rustc_metadata` for types that are only\n-///   serialized in crate metadata.\n+///   metadata or the incremental cache. This is most types in `rustc_middle`.\n pub trait Encodable<S: Encoder> {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error>;\n }\n@@ -400,61 +400,50 @@ pub trait Encodable<S: Encoder> {\n /// `MetadataDecodable` macros.\n ///\n /// * `Decodable` should be used in crates that don't depend on\n-///   `librustc_middle`.\n+///   `rustc_middle`.\n+/// * `MetadataDecodable` is used in `rustc_metadata` for types that contain\n+///   `rustc_metadata::rmeta::Lazy`.\n /// * `TyDecodable` should be used for types that are only serialized in crate\n-///   metadata or the incremental cache, except for simple enums.where\n-/// * `MetadataDecodable` is used in `rustc_metadata` for types that are only\n-///   serialized in crate metadata.\n+///   metadata or the incremental cache. This is most types in `rustc_middle`.\n pub trait Decodable<D: Decoder>: Sized {\n     fn decode(d: &mut D) -> Result<Self, D::Error>;\n }\n \n-impl<S: Encoder> Encodable<S> for usize {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_usize(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for usize {\n-    fn decode(d: &mut D) -> Result<usize, D::Error> {\n-        d.read_usize()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for u8 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u8(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for u8 {\n-    fn decode(d: &mut D) -> Result<u8, D::Error> {\n-        d.read_u8()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for u16 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u16(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for u16 {\n-    fn decode(d: &mut D) -> Result<u16, D::Error> {\n-        d.read_u16()\n-    }\n-}\n+macro_rules! direct_serialize_impls {\n+    ($($ty:ident $emit_method:ident $read_method:ident),*) => {\n+        $(\n+            impl<S: Encoder> Encodable<S> for $ty {\n+                fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+                    s.$emit_method(*self)\n+                }\n+            }\n \n-impl<S: Encoder> Encodable<S> for u32 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(*self)\n+            impl<D: Decoder> Decodable<D> for $ty {\n+                fn decode(d: &mut D) -> Result<$ty, D::Error> {\n+                    d.$read_method()\n+                }\n+            }\n+        )*\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for u32 {\n-    fn decode(d: &mut D) -> Result<u32, D::Error> {\n-        d.read_u32()\n-    }\n+direct_serialize_impls! {\n+    usize emit_usize read_usize,\n+    u8 emit_u8 read_u8,\n+    u16 emit_u16 read_u16,\n+    u32 emit_u32 read_u32,\n+    u64 emit_u64 read_u64,\n+    u128 emit_u128 read_u128,\n+    isize emit_isize read_isize,\n+    i8 emit_i8 read_i8,\n+    i16 emit_i16 read_i16,\n+    i32 emit_i32 read_i32,\n+    i64 emit_i64 read_i64,\n+    i128 emit_i128 read_i128,\n+    f32 emit_f32 read_f32,\n+    f64 emit_f64 read_f64,\n+    bool emit_bool read_bool,\n+    char emit_char read_char\n }\n \n impl<S: Encoder> Encodable<S> for ::std::num::NonZeroU32 {\n@@ -469,102 +458,6 @@ impl<D: Decoder> Decodable<D> for ::std::num::NonZeroU32 {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for u64 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u64(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for u64 {\n-    fn decode(d: &mut D) -> Result<u64, D::Error> {\n-        d.read_u64()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for u128 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u128(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for u128 {\n-    fn decode(d: &mut D) -> Result<u128, D::Error> {\n-        d.read_u128()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for isize {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_isize(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for isize {\n-    fn decode(d: &mut D) -> Result<isize, D::Error> {\n-        d.read_isize()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for i8 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_i8(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for i8 {\n-    fn decode(d: &mut D) -> Result<i8, D::Error> {\n-        d.read_i8()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for i16 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_i16(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for i16 {\n-    fn decode(d: &mut D) -> Result<i16, D::Error> {\n-        d.read_i16()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for i32 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_i32(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for i32 {\n-    fn decode(d: &mut D) -> Result<i32, D::Error> {\n-        d.read_i32()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for i64 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_i64(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for i64 {\n-    fn decode(d: &mut D) -> Result<i64, D::Error> {\n-        d.read_i64()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for i128 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_i128(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for i128 {\n-    fn decode(d: &mut D) -> Result<i128, D::Error> {\n-        d.read_i128()\n-    }\n-}\n-\n impl<S: Encoder> Encodable<S> for str {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_str(self)\n@@ -589,54 +482,6 @@ impl<D: Decoder> Decodable<D> for String {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for f32 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_f32(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for f32 {\n-    fn decode(d: &mut D) -> Result<f32, D::Error> {\n-        d.read_f32()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for f64 {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_f64(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for f64 {\n-    fn decode(d: &mut D) -> Result<f64, D::Error> {\n-        d.read_f64()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for bool {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_bool(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for bool {\n-    fn decode(d: &mut D) -> Result<bool, D::Error> {\n-        d.read_bool()\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for char {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_char(*self)\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for char {\n-    fn decode(d: &mut D) -> Result<char, D::Error> {\n-        d.read_char()\n-    }\n-}\n-\n impl<S: Encoder> Encodable<S> for () {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_unit()"}, {"sha": "d0942f78bb86c7ec73caea9beb17ad804813b403", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "dc06fd74a4bb55a3468f17a68780e023f2a8a3b1", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}]}