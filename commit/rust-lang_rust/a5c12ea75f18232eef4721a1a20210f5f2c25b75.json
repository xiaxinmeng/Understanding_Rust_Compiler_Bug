{"sha": "a5c12ea75f18232eef4721a1a20210f5f2c25b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzEyZWE3NWYxODIzMmVlZjQ3MjFhMWEyMDIxMGY1ZjJjMjViNzU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-30T04:36:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T04:36:41Z"}, "message": "Rollup merge of #80562 - nagisa:nagisa/bools-are-unsigned, r=eddyb\n\nConsider Scalar to be a bool only if its unsigned\n\nThis seems right, given that conceptually bools are unsigned, but the\nimplications of this change may have more action at distance that I'm\nnot sure how to exhaustively consider.\n\nFor instance there are a number of cases where code attaches range\nmetadata if `scalar.is_bool()` holds. Supposedly it would no longer be\nattached to the `repr(i8)` enums? Though I'm not sure why booleans are\nbeing special-cased here in the first place...\n\nFixes #80556\n\ncc `@eddyb`", "tree": {"sha": "ece2235b8f05cfdb3c19abaf74aa3df073f7f44d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece2235b8f05cfdb3c19abaf74aa3df073f7f44d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c12ea75f18232eef4721a1a20210f5f2c25b75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFOJZCRBK7hj4Ov3rIwAAdHIIAJbd1KVzHzw8EReJFV+sDUHN\npQjpEv4WHPMmNUaSQQuEc4mIl7WCq04e6Ts7C7kL4S72Ih6ZPj4Vaud1tzWHUvx1\nNWKWwj5OVn5jvV7PJHcE+ZCb2gTA6FpZ/udv9naayUmPXgHDqtisrtnRyM3gPWuL\nqskWU/aph6xWJd+Thw6zzrTeyU7SFB2Nza8CNjLoY2xpp44mxBsMx48DxDTJGRtO\nnmRyk1DhvnMYNM/1OSYfRg397WBK1JlpAhbwpC10erPb41s7YQs9JDZ+km4Zrk/v\nIvuw8ybUwiIK36Qxyo194OQHOFduj7k1jwe3A9HaD1UuORfcUyFxvzivo78FT6Q=\n=e71I\n-----END PGP SIGNATURE-----\n", "payload": "tree ece2235b8f05cfdb3c19abaf74aa3df073f7f44d\nparent ecd7cb1c3ab5d7e7b10f934a561b8a6958bcd1b0\nparent 915a04e2a401919d8b0e152331c839df471577b7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611981401 +0900\ncommitter GitHub <noreply@github.com> 1611981401 +0900\n\nRollup merge of #80562 - nagisa:nagisa/bools-are-unsigned, r=eddyb\n\nConsider Scalar to be a bool only if its unsigned\n\nThis seems right, given that conceptually bools are unsigned, but the\nimplications of this change may have more action at distance that I'm\nnot sure how to exhaustively consider.\n\nFor instance there are a number of cases where code attaches range\nmetadata if `scalar.is_bool()` holds. Supposedly it would no longer be\nattached to the `repr(i8)` enums? Though I'm not sure why booleans are\nbeing special-cased here in the first place...\n\nFixes #80556\n\ncc `@eddyb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c12ea75f18232eef4721a1a20210f5f2c25b75", "html_url": "https://github.com/rust-lang/rust/commit/a5c12ea75f18232eef4721a1a20210f5f2c25b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c12ea75f18232eef4721a1a20210f5f2c25b75/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd7cb1c3ab5d7e7b10f934a561b8a6958bcd1b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd7cb1c3ab5d7e7b10f934a561b8a6958bcd1b0", "html_url": "https://github.com/rust-lang/rust/commit/ecd7cb1c3ab5d7e7b10f934a561b8a6958bcd1b0"}, {"sha": "915a04e2a401919d8b0e152331c839df471577b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/915a04e2a401919d8b0e152331c839df471577b7", "html_url": "https://github.com/rust-lang/rust/commit/915a04e2a401919d8b0e152331c839df471577b7"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "ce8e56b194980ee1f238558d70d314903fb89d7c", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c12ea75f18232eef4721a1a20210f5f2c25b75/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c12ea75f18232eef4721a1a20210f5f2c25b75/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=a5c12ea75f18232eef4721a1a20210f5f2c25b75", "patch": "@@ -103,7 +103,12 @@ impl ArgAttributes {\n     }\n \n     pub fn ext(&mut self, ext: ArgExtension) -> &mut Self {\n-        assert!(self.arg_ext == ArgExtension::None || self.arg_ext == ext);\n+        assert!(\n+            self.arg_ext == ArgExtension::None || self.arg_ext == ext,\n+            \"cannot set {:?} when {:?} is already set\",\n+            ext,\n+            self.arg_ext\n+        );\n         self.arg_ext = ext;\n         self\n     }"}, {"sha": "b14b1ef00db9148d7b3134556d7c74b8e3e2aa3f", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c12ea75f18232eef4721a1a20210f5f2c25b75/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c12ea75f18232eef4721a1a20210f5f2c25b75/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=a5c12ea75f18232eef4721a1a20210f5f2c25b75", "patch": "@@ -682,7 +682,7 @@ pub struct Scalar {\n \n impl Scalar {\n     pub fn is_bool(&self) -> bool {\n-        if let Int(I8, _) = self.value { self.valid_range == (0..=1) } else { false }\n+        matches!(self.value, Int(I8, false)) && self.valid_range == (0..=1)\n     }\n \n     /// Returns the valid range as a `x..y` range."}, {"sha": "f93ccd794117dffc46ad5bcdcdc3bc12d2975f04", "filename": "src/test/codegen/abi-repr-ext.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5c12ea75f18232eef4721a1a20210f5f2c25b75/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c12ea75f18232eef4721a1a20210f5f2c25b75/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs?ref=a5c12ea75f18232eef4721a1a20210f5f2c25b75", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type=\"lib\"]\n+\n+#[repr(i8)]\n+pub enum Type {\n+    Type1 = 0,\n+    Type2 = 1\n+}\n+\n+// CHECK: define signext i8 @test()\n+#[no_mangle]\n+pub extern \"C\" fn test() -> Type {\n+    Type::Type1\n+}"}]}