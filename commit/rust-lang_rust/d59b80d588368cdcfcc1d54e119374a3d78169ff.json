{"sha": "d59b80d588368cdcfcc1d54e119374a3d78169ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OWI4MGQ1ODgzNjhjZGNmY2MxZDU0ZTExOTM3NGEzZDc4MTY5ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-12T08:50:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-12T08:50:22Z"}, "message": "Auto merge of #86130 - BoxyUwU:abstract_const_as_cast, r=oli-obk\n\nconst_eval_checked: Support as casts in abstract consts", "tree": {"sha": "1309f0fe8d0bf49b50f1f07b0a7963344da43317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1309f0fe8d0bf49b50f1f07b0a7963344da43317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59b80d588368cdcfcc1d54e119374a3d78169ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59b80d588368cdcfcc1d54e119374a3d78169ff", "html_url": "https://github.com/rust-lang/rust/commit/d59b80d588368cdcfcc1d54e119374a3d78169ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59b80d588368cdcfcc1d54e119374a3d78169ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6ba39fd89cff295067d974c49fc64b0b52ad18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6ba39fd89cff295067d974c49fc64b0b52ad18", "html_url": "https://github.com/rust-lang/rust/commit/0f6ba39fd89cff295067d974c49fc64b0b52ad18"}, {"sha": "17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cd79090efdc8e41ee7535839b6ea0f6909c1d6", "html_url": "https://github.com/rust-lang/rust/commit/17cd79090efdc8e41ee7535839b6ea0f6909c1d6"}], "stats": {"total": 316, "additions": 313, "deletions": 3}, "files": [{"sha": "1ef10241143b83ed0ca19f0c51abff8f84ff0419", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -1,6 +1,6 @@\n //! A subset of a mir body used for const evaluatability checking.\n-use crate::mir;\n-use crate::ty;\n+use crate::mir::{self, CastKind};\n+use crate::ty::{self, Ty};\n \n rustc_index::newtype_index! {\n     /// An index into an `AbstractConst`.\n@@ -17,6 +17,7 @@ pub enum Node<'tcx> {\n     Binop(mir::BinOp, NodeId, NodeId),\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n+    Cast(CastKind, NodeId, Ty<'tcx>),\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]"}, {"sha": "5a79a9cc6ecfd1ffe1e4a1a4ca4a5439392b4f3b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -156,6 +156,7 @@ where\n                 let leaf = leaf.subst(tcx, ct.substs);\n                 self.visit_const(leaf)\n             }\n+            ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n             ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n                 ControlFlow::CONTINUE\n             }"}, {"sha": "b1a938836b70ee1fff62cf28941327e124a5080e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -97,6 +97,16 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n+                    Node::Cast(_, _, ty) => {\n+                        let ty = ty.subst(tcx, ct.substs);\n+                        if ty.has_infer_types_or_consts() {\n+                            failure_kind = FailureKind::MentionsInfer;\n+                        } else if ty.has_param_types_or_consts() {\n+                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n+                        }\n+\n+                        ControlFlow::CONTINUE\n+                    }\n                     Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n                         ControlFlow::CONTINUE\n                     }\n@@ -304,6 +314,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 self.nodes[func].used = true;\n                 nodes.iter().for_each(|&n| self.nodes[n].used = true);\n             }\n+            Node::Cast(_, operand, _) => {\n+                self.nodes[operand].used = true;\n+            }\n         }\n \n         // Nodes start as unused.\n@@ -408,11 +421,19 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                         self.locals[local] = self.add_node(Node::UnaryOp(op, operand), span);\n                         Ok(())\n                     }\n+                    Rvalue::Cast(cast_kind, ref operand, ty) => {\n+                        let operand = self.operand_to_node(span, operand)?;\n+                        self.locals[local] =\n+                            self.add_node(Node::Cast(cast_kind, operand, ty), span);\n+                        Ok(())\n+                    }\n                     _ => self.error(Some(span), \"unsupported rvalue\")?,\n                 }\n             }\n             // These are not actually relevant for us here, so we can ignore them.\n-            StatementKind::StorageLive(_) | StatementKind::StorageDead(_) => Ok(()),\n+            StatementKind::AscribeUserType(..)\n+            | StatementKind::StorageLive(_)\n+            | StatementKind::StorageDead(_) => Ok(()),\n             _ => self.error(Some(stmt.source_info.span), \"unsupported statement\")?,\n         }\n     }\n@@ -594,6 +615,7 @@ where\n                 recurse(tcx, ct.subtree(func), f)?;\n                 args.iter().try_for_each(|&arg| recurse(tcx, ct.subtree(arg), f))\n             }\n+            Node::Cast(_, operand, _) => recurse(tcx, ct.subtree(operand), f),\n         }\n     }\n \n@@ -676,6 +698,11 @@ pub(super) fn try_unify<'tcx>(\n                 && iter::zip(a_args, b_args)\n                     .all(|(&an, &bn)| try_unify(tcx, a.subtree(an), b.subtree(bn)))\n         }\n+        (Node::Cast(a_cast_kind, a_operand, a_ty), Node::Cast(b_cast_kind, b_operand, b_ty))\n+            if (a_ty == b_ty) && (a_cast_kind == b_cast_kind) =>\n+        {\n+            try_unify(tcx, a.subtree(a_operand), b.subtree(b_operand))\n+        }\n         _ => false,\n     }\n }"}, {"sha": "7ebef7f8883ae0902eca5df5eea3c5a409771b52", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -838,6 +838,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n                         self.visit_const(leaf)\n                     }\n+                    Node::Cast(_, _, ty) => self.visit_ty(ty),\n                     Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n                         ControlFlow::CONTINUE\n                     }\n@@ -859,6 +860,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                             let leaf = leaf.subst(self.tcx, ct.substs);\n                             self.visit_const(leaf)\n                         }\n+                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n                         Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n                             ControlFlow::CONTINUE\n                         }"}, {"sha": "744a1c4de48c0c75bf31f3a4450cb63e0a389a98", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-1.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: u8>([u8; N as usize])\n+where\n+    [(); N as usize]:;\n+\n+struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 2) as usize]:;\n+\n+// unifying with subtrees\n+struct Evaluatable<const N: u16>;\n+fn foo<const N: u8>() where Evaluatable<{N as usize as u16 }>: {\n+    let _ = Foo::<N>([1; N as usize]);\n+}\n+\n+\n+fn main() {}"}, {"sha": "543774649ed51c4868dedb064a752b40056219e1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Evaluatable<const N: u128> {}\n+\n+struct Foo<const N: u8>([u8; N as usize])\n+//~^ Error: unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n+where\n+    Evaluatable<{N as u128}>:;\n+\n+struct Foo2<const N: u8>(Evaluatable::<{N as u128}>) where Evaluatable<{N as usize as u128 }>:;\n+//~^ Error: unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); {N as u128}]:`\n+\n+struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 1) as usize]:;\n+//~^ Error: unconstrained generic constant\n+//~| help: try adding a `where` bound using this expression: `where [(); (N + 2) as usize]:`\n+\n+fn main() {}"}, {"sha": "5ca04d25e556e3a2f89298ca9da58410691b9ac1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-2.stderr?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,26 @@\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:6:25\n+   |\n+LL | struct Foo<const N: u8>([u8; N as usize])\n+   |                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N as usize]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:12:26\n+   |\n+LL | struct Foo2<const N: u8>(Evaluatable::<{N as u128}>) where Evaluatable<{N as usize as u128 }>:;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); {N as u128}]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-2.rs:16:25\n+   |\n+LL | struct Bar<const N: u8>([u8; (N + 2) as usize]) where [(); (N + 1) as usize]:;\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); (N + 2) as usize]:`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2ca06bd1cb713ed9bf7a34973fd4af07baf0b86f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,47 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {}\n+pub struct EvaluatableU128<const N: u128>;\n+\n+struct HasCastInTraitImpl<const N: usize, const M: u128>;\n+impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+\n+pub fn use_trait_impl<const N: usize>()\n+where\n+    [(); { N + 1}]:,\n+    EvaluatableU128<{N as u128}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    // errors are bad but seems to be pre-existing issue #86198\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+    //~^ Error: mismatched types\n+    assert_impl::<HasCastInTraitImpl<14, 13>>();\n+    //~^ Error: mismatched types\n+}\n+pub fn use_trait_impl_2<const N: usize>()\n+where\n+    [(); { N + 1}]:,\n+    EvaluatableU128<{N as _}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    // errors are bad but seems to be pre-existing issue #86198\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+    //~^ Error: mismatched types\n+    //~^^ Error: unconstrained generic constant\n+    assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+    //~^ Error: mismatched types\n+    assert_impl::<HasCastInTraitImpl<14, 13>>();\n+    //~^ Error: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "c5237fc6f2b31b796bf89b44cfe764b18f43f97e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.stderr", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,139 @@\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as u128 }`\n+              found type `{ O as u128 }`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as _ }`\n+              found type `{ O as u128 }`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:23:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |\n+   = note: expected type `12_u128`\n+              found type `13_u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:25:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |\n+   = note: expected type `13_u128`\n+              found type `14_u128`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as u128 }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as u128 }`\n+              found type `{ O as u128 }`\n+\n+error: unconstrained generic constant\n+  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n+...\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n+note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+  --> $DIR/abstract-const-as-cast-3.rs:8:22\n+   |\n+LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+   |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ N as _ }`, found `{ O as u128 }`\n+   |\n+   = note: expected type `{ N as _ }`\n+              found type `{ O as u128 }`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:41:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `12_u128`, found `13_u128`\n+   |\n+   = note: expected type `12_u128`\n+              found type `13_u128`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/abstract-const-as-cast-3.rs:43:5\n+   |\n+LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `13_u128`, found `14_u128`\n+   |\n+   = note: expected type `13_u128`\n+              found type `14_u128`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0bb4fcff4d0b57a1d751935cff9b1337882f6a81", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-4.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59b80d588368cdcfcc1d54e119374a3d78169ff/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-4.rs?ref=d59b80d588368cdcfcc1d54e119374a3d78169ff", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {}\n+pub struct EvaluatableU128<const N: u128>;\n+\n+struct HasCastInTraitImpl<const N: usize, const M: u128>;\n+impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n+\n+pub fn use_trait_impl<const N: usize>() where EvaluatableU128<{N as u128}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<N, { N as _ }>>();\n+    assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<13, 13>>();\n+}\n+pub fn use_trait_impl_2<const N: usize>() where EvaluatableU128<{N as _}>:, {\n+    fn assert_impl<T: Trait>() {}\n+\n+    assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<N, { N as _ }>>();\n+    assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>();\n+    assert_impl::<HasCastInTraitImpl<13, 13>>();\n+}\n+\n+\n+fn main() {}"}]}