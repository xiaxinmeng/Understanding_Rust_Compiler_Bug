{"sha": "7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOGY4M2E2ZTU5YWJiNTNhZGFhZmU3YTlmNzBmZjcwNjlmZWVmYWU=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:39:47Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:41:40Z"}, "message": "Clean up patch", "tree": {"sha": "d2dc260b97dd50b915e6a3aa823d50839ad7e94c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2dc260b97dd50b915e6a3aa823d50839ad7e94c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "html_url": "https://github.com/rust-lang/rust/commit/7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9faae6a5ca1c5579a8185138b1e534285324db87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9faae6a5ca1c5579a8185138b1e534285324db87", "html_url": "https://github.com/rust-lang/rust/commit/9faae6a5ca1c5579a8185138b1e534285324db87"}], "stats": {"total": 47, "additions": 14, "deletions": 33}, "files": [{"sha": "43be1beba91d04f02cf918f1b2a03b6e462532dc", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -1386,16 +1386,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                              .subst(self.tcx, substs);\n \n         if self.normalize {\n-            // NOTE: this flag is currently *always* set to false, we are slowly folding\n-            // normalization into this trait and will come back to remove this in the near\n-            // future.\n-\n-            // code from NormalizingClosureTyper:\n-            // the substitutions in `substs` are already monomorphized,\n-            // but we still must normalize associated types\n-            // normalize_associated_type(self.param_env.tcx, &closure_ty)\n             normalize_associated_type(&self.tcx, &closure_ty)\n-            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n         } else {\n             closure_ty\n         }\n@@ -1409,15 +1400,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let result = ty::ctxt::closure_upvars(self, def_id, substs);\n \n         if self.normalize {\n-            // NOTE: this flag is currently *always* set to false, we are slowly folding\n-            // normalization into this trait and will come back to remove this in the near\n-            // future.\n-\n-            // code from NormalizingClosureTyper:\n-            // the substitutions in `substs` are already monomorphized,\n-            // but we still must normalize associated types\n-            // monomorphize::normalize_associated_type(self.param_env.tcx, &result)\n-            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n             normalize_associated_type(&self.tcx, &result)\n         } else {\n             result"}, {"sha": "f506de525ff9c644e1761e460ab52c21cd04fc71", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -257,7 +257,6 @@ impl ast_node for ast::Pat {\n #[derive(Copy, Clone)]\n pub struct MemCategorizationContext<'t, 'a: 't, 'tcx : 'a> {\n     pub typer: &'t infer::InferCtxt<'a, 'tcx>,\n-    // pub monomorphize: bool,\n }\n \n pub type McResult<T> = Result<T, ()>;"}, {"sha": "47002497acca5c1d20dbda361f9597c24ff0b662", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -436,17 +436,20 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     debug!(\"normalize_param_env(value={:?})\", value);\n \n     let mut selcx = &mut SelectionContext::new(infcx);\n-    // FIXME (@jroesch): I'm not sure if this is a bug or not, needs\n-    // further investigation. It appears that by reusing the fulfillment_cx\n-    // here we incur more obligations and later trip an asssertion on\n-    // regionck.rs line 337. The two possibilities I see is that\n-    // normalization is not actually fully happening and we\n-    // have a bug else where or that we are adding a duplicate\n-    // bound into the list causing its size to change. I think\n-    // we should probably land this refactor and then come\n+    // FIXME (@jroesch):\n+    // I'm not sure if this is a bug or not, needs further investigation.\n+    // It appears that by reusing the fulfillment_cx here we incur more\n+    // obligations and later trip an asssertion on regionck.rs line 337.\n+    //\n+    // The two possibilities I see is:\n+    //      - normalization is not actually fully happening and we\n+    //        have a bug else where\n+    //      - we are adding a duplicate bound into the list causing\n+    //        its size to change.\n+    //\n+    // I think we should probably land this refactor and then come\n     // back to this is a follow-up patch.\n     let mut fulfill_cx = FulfillmentContext::new(false);\n-    // let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n \n     let Normalized { value: normalized_value, obligations } =\n         project::normalize(selcx, cause, value);\n@@ -456,6 +459,7 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     for obligation in obligations {\n         fulfill_cx.register_predicate_obligation(selcx.infcx(), obligation);\n     }\n+    \n     try!(fulfill_cx.select_all_or_error(infcx));\n     let resolved_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n     debug!(\"normalize_param_env: resolved_value={:?}\", resolved_value);"}, {"sha": "c80c48a96922dd7dd3c63df3b705918a86dcc1d6", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -16,7 +16,7 @@ use middle::ty_fold::TypeFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n \n-//FIME(@jroesch): Refactor this\n+//FIXME(@jroesch): Ideally we should be able to drop the fulfillment_cx argument.\n pub fn normalize_associated_types_in<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n                                                 fulfillment_cx: &mut FulfillmentContext<'tcx>,\n                                                 span: Span,"}, {"sha": "b7ebf1abd2d22cee14abdba13d66f87d49649f29", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -158,9 +158,6 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     // one is never copied into the tcx: it is only used by regionck.\n     fn_sig_map: RefCell<NodeMap<Vec<Ty<'tcx>>>>,\n \n-    // Tracks trait obligations incurred during this function body.\n-    // fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n-\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the"}, {"sha": "a1c5ad51dcdf74989e117be321c101e166e31e83", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f83a6e59abb53adaafe7a9f70ff7069feefae/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=7a8f83a6e59abb53adaafe7a9f70ff7069feefae", "patch": "@@ -631,7 +631,6 @@ fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n pub fn check_coherence(crate_context: &CrateCtxt) {\n     CoherenceChecker {\n         crate_context: crate_context,\n-        // XXXJAREDXXX: not sure if the bool is right here?\n         inference_context: new_infer_ctxt(crate_context.tcx, &crate_context.tcx.tables, None, true),\n         inherent_impls: RefCell::new(FnvHashMap()),\n     }.check(crate_context.tcx.map.krate());"}]}