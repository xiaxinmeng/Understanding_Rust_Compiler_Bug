{"sha": "01f2b530390eb3d850997015cdf3a4a4d41507f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZjJiNTMwMzkwZWIzZDg1MDk5NzAxNWNkZjNhNGE0ZDQxNTA3ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-01T07:24:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-01T07:24:32Z"}, "message": "Auto merge of #4303 - mikerite:dev-fmt-20190728, r=flip1995\n\nMake fmt test and command more robust\n\nchangelog: none", "tree": {"sha": "8483795ee981f9232088e7aa19c8583494243aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8483795ee981f9232088e7aa19c8583494243aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f2b530390eb3d850997015cdf3a4a4d41507f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f2b530390eb3d850997015cdf3a4a4d41507f1", "html_url": "https://github.com/rust-lang/rust/commit/01f2b530390eb3d850997015cdf3a4a4d41507f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f2b530390eb3d850997015cdf3a4a4d41507f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b4fc9853d80b3953dd5f2bae9d5d70ef7665ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b4fc9853d80b3953dd5f2bae9d5d70ef7665ab", "html_url": "https://github.com/rust-lang/rust/commit/d1b4fc9853d80b3953dd5f2bae9d5d70ef7665ab"}, {"sha": "be646ac0dff10f154855b9dc706294c2a4ee9059", "url": "https://api.github.com/repos/rust-lang/rust/commits/be646ac0dff10f154855b9dc706294c2a4ee9059", "html_url": "https://github.com/rust-lang/rust/commit/be646ac0dff10f154855b9dc706294c2a4ee9059"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "0a1bd0ea2750cbb78104cd4c4af1463e2ce5c68d", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -22,7 +22,7 @@ env:\n install:\n   - |\n     if [ -z ${INTEGRATION} ]; then\n-      # rustup component add rustfmt || cargo install --git https://github.com/rust-lang/rustfmt/ --force\n+      rustup component add rustfmt || cargo install --git https://github.com/rust-lang/rustfmt/ --force\n       if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then\n         . $HOME/.nvm/nvm.sh\n         nvm install stable"}, {"sha": "092a5c80a8eb4103b7098e531ec80d19708bf04b", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -22,7 +22,7 @@ install:\n     - del rust-toolchain\n     - cargo install rustup-toolchain-install-master --debug || echo \"rustup-toolchain-install-master already installed\"\n     - rustup-toolchain-install-master %RUSTC_HASH% -f -n master\n-    #- rustup component add rustfmt --toolchain nightly\n+    - rustup component add rustfmt --toolchain nightly || echo \"rustfmt nightly is unavailable\"\n     - rustup default master\n     - set PATH=%PATH%;C:\\Users\\appveyor\\.rustup\\toolchains\\master\\bin\n     - rustc -V"}, {"sha": "9f0b68baf9dbc1d9959f043fa92efa509aaa90f0", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -10,6 +10,7 @@ pub enum CliError {\n     CommandFailed(String),\n     IoError(io::Error),\n     ProjectRootNotFound,\n+    RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n }\n \n@@ -36,6 +37,8 @@ pub fn run(check: bool, verbose: bool) {\n \n         let project_root = project_root()?;\n \n+        rustfmt_test(context)?;\n+\n         success &= cargo_fmt(context, project_root.as_path())?;\n         success &= cargo_fmt(context, &project_root.join(\"clippy_dev\"))?;\n         success &= cargo_fmt(context, &project_root.join(\"rustc_tools_util\"))?;\n@@ -69,6 +72,9 @@ pub fn run(check: bool, verbose: bool) {\n             CliError::ProjectRootNotFound => {\n                 eprintln!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n             },\n+            CliError::RustfmtNotInstalled => {\n+                eprintln!(\"error: rustfmt nightly is not installed.\");\n+            },\n             CliError::WalkDirError(err) => {\n                 eprintln!(\"error: {}\", err);\n             },\n@@ -139,6 +145,29 @@ fn cargo_fmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n     Ok(success)\n }\n \n+fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n+    let program = \"rustfmt\";\n+    let dir = std::env::current_dir()?;\n+    let args = &[\"+nightly\", \"--version\"];\n+\n+    if context.verbose {\n+        println!(\"{}\", format_command(&program, &dir, args));\n+    }\n+\n+    let output = Command::new(&program).current_dir(&dir).args(args.iter()).output()?;\n+\n+    if output.status.success() {\n+        Ok(())\n+    } else if std::str::from_utf8(&output.stderr)\n+        .unwrap_or(\"\")\n+        .starts_with(\"error: 'rustfmt' is not installed\")\n+    {\n+        Err(CliError::RustfmtNotInstalled)\n+    } else {\n+        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+    }\n+}\n+\n fn rustfmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n     let mut args = vec![\"+nightly\".as_ref(), path.as_os_str()];\n     if context.check {"}, {"sha": "9d1cc110e5d4f584210039b42907d296610dbe29", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -65,9 +65,7 @@ impl PartialEq for Constant {\n                 f64::from(l).to_bits() == f64::from(r).to_bits()\n             },\n             (&Self::Bool(l), &Self::Bool(r)) => l == r,\n-            (&Self::Vec(ref l), &Self::Vec(ref r)) | (&Self::Tuple(ref l), &Self::Tuple(ref r)) => {\n-                l == r\n-            },\n+            (&Self::Vec(ref l), &Self::Vec(ref r)) | (&Self::Tuple(ref l), &Self::Tuple(ref r)) => l == r,\n             (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => ls == rs && lv == rv,\n             // TODO: are there inter-type equalities?\n             _ => false,"}, {"sha": "c9df436dae7e865701a46bfdb5b7afa7742428b3", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -305,7 +305,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                  name makes code comprehension and documentation more difficult\",\n                                 arg_name[1..].to_owned()\n                             ),\n-                        );;\n+                        );\n                     }\n                 } else {\n                     registered_names.insert(arg_name, arg.pat.span);"}, {"sha": "5a3af2c3773fdf31e1829778eca8de3eff665777", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -127,7 +127,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     create = true\n                 }\n-                create_arg = create_arg || (arg == Argument::True);;\n+                create_arg = create_arg || (arg == Argument::True);\n             },\n             (OpenOption::Append, arg) => {\n                 if append {\n@@ -140,7 +140,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     append = true\n                 }\n-                append_arg = append_arg || (arg == Argument::True);;\n+                append_arg = append_arg || (arg == Argument::True);\n             },\n             (OpenOption::Truncate, arg) => {\n                 if truncate {\n@@ -166,7 +166,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     read = true\n                 }\n-                read_arg = read_arg || (arg == Argument::True);;\n+                read_arg = read_arg || (arg == Argument::True);\n             },\n             (OpenOption::Write, arg) => {\n                 if write {\n@@ -179,7 +179,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     write = true\n                 }\n-                write_arg = write_arg || (arg == Argument::True);;\n+                write_arg = write_arg || (arg == Argument::True);\n             },\n         }\n     }"}, {"sha": "4d9fbbca83edf917f7bb0281db0a7d8ca0674eb7", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -81,7 +81,8 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         if !in_macro_or_desugar(item.span) {\n             if let ItemKind::Const(ref var_type, _) = item.node {\n                 self.visit_type(var_type, cx, \"Constants have by default a `'static` lifetime\");\n-                // Don't check associated consts because `'static` cannot be elided on those (issue #2438)\n+                // Don't check associated consts because `'static` cannot be elided on those (issue\n+                // #2438)\n             }\n \n             if let ItemKind::Static(ref var_type, _, _) = item.node {"}, {"sha": "4e2e97ddf95be79ba5a8fafff40b5971e5350b64", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -222,13 +222,12 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n             let last_but_one = &path.segments[path.segments.len() - 2];\n             if last_but_one.ident.name != kw::SelfUpper {\n                 let enum_def_id = match path.res {\n-                    Res::Def(DefKind::Variant, variant_def_id) =>\n-                        self.cx.tcx.parent(variant_def_id),\n+                    Res::Def(DefKind::Variant, variant_def_id) => self.cx.tcx.parent(variant_def_id),\n                     Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), ctor_def_id) => {\n                         let variant_def_id = self.cx.tcx.parent(ctor_def_id);\n                         variant_def_id.and_then(|def_id| self.cx.tcx.parent(def_id))\n-                    }\n-                    _ => None\n+                    },\n+                    _ => None,\n                 };\n \n                 if self.item_path.res.opt_def_id() == enum_def_id {"}, {"sha": "92b710614ecbe64f7b1d5ae1bca5e9e274a70a1b", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -154,5 +154,4 @@ mod test {\n             \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 2, patch: 0 }\"\n         );\n     }\n-\n }"}, {"sha": "bc37be84b433e1a3081c2012ef9a938e08e8de44", "filename": "tests/fmt.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -1,13 +1,25 @@\n+use std::process::Command;\n+\n #[test]\n-#[ignore]\n fn fmt() {\n     if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n         return;\n     }\n \n+    // Skip this test if rustup nightly is unavailable\n+    let rustup_output = Command::new(\"rustup\")\n+        .args(&[\"component\", \"list\", \"--toolchain\", \"nightly\"])\n+        .output()\n+        .unwrap();\n+    assert!(rustup_output.status.success());\n+    let component_output = String::from_utf8_lossy(&rustup_output.stdout);\n+    if !component_output.contains(\"rustfmt\") {\n+        return;\n+    }\n+\n     let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     let dev_dir = root_dir.join(\"clippy_dev\");\n-    let output = std::process::Command::new(\"cargo\")\n+    let output = Command::new(\"cargo\")\n         .current_dir(dev_dir)\n         .args(&[\"+nightly\", \"run\", \"--\", \"fmt\", \"--check\"])\n         .output()"}, {"sha": "c080ae82697a7aa3bdec15b269fb6af9e9c40bd7", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -31,10 +31,12 @@ fn main() {\n     if x.is_ok() {\n         x = Err(());\n         x.unwrap(); // not unnecessary because of mutation of x\n-                    // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n+                    // it will always panic but the lint is not smart enough to see this (it only\n+                    // checks if conditions).\n     } else {\n         x = Ok(());\n         x.unwrap_err(); // not unnecessary because of mutation of x\n-                        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n+                        // it will always panic but the lint is not smart enough to see this (it\n+                        // only checks if conditions).\n     }\n }"}, {"sha": "aad996c03762b694c61045e280ffbf75b41eb3dd", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -78,7 +78,6 @@ fn test_owl_result() -> Result<(), ()> {\n     Ok(())\n }\n \n-\n #[allow(dead_code)]\n fn test_owl_result_2() -> Result<u8, ()> {\n     produce_half_owl_error().map_err(|_| ())?;"}, {"sha": "86ed7ca26f94302b7cff6404ad45992e78f8db90", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -266,7 +266,7 @@ mod nesting {\n     enum Enum {\n         A,\n         B(u64),\n-        C { field: bool }\n+        C { field: bool },\n     }\n     impl Enum {\n         fn method() {"}, {"sha": "cabb9a7f82ac595ec0ca945d46e4e819c4f702c3", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f2b530390eb3d850997015cdf3a4a4d41507f1/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=01f2b530390eb3d850997015cdf3a4a4d41507f1", "patch": "@@ -266,7 +266,7 @@ mod nesting {\n     enum Enum {\n         A,\n         B(u64),\n-        C { field: bool }\n+        C { field: bool },\n     }\n     impl Enum {\n         fn method() {"}]}