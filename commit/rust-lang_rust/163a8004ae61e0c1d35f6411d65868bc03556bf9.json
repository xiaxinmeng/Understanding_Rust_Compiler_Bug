{"sha": "163a8004ae61e0c1d35f6411d65868bc03556bf9", "node_id": "C_kwDOAAsO6NoAKDE2M2E4MDA0YWU2MWUwYzFkMzVmNjQxMWQ2NTg2OGJjMDM1NTZiZjk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-08T00:30:01Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-09T19:39:13Z"}, "message": "Refactor sidebar printing code\n\nThe new code is much simpler and easier to understand. In fact, the old\ncode actually had a subtle bug where it excluded a few item types,\nincluding trait aliases, from the sidebar, even though they are rendered\non the page itself! Now, all sections should show up in the sidebar.", "tree": {"sha": "570fe8e3b595b4cdb346bac7fefe97038c29c91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570fe8e3b595b4cdb346bac7fefe97038c29c91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163a8004ae61e0c1d35f6411d65868bc03556bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163a8004ae61e0c1d35f6411d65868bc03556bf9", "html_url": "https://github.com/rust-lang/rust/commit/163a8004ae61e0c1d35f6411d65868bc03556bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163a8004ae61e0c1d35f6411d65868bc03556bf9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1115f69bf4bc96201a130c876f1a2e866f58c907", "url": "https://api.github.com/repos/rust-lang/rust/commits/1115f69bf4bc96201a130c876f1a2e866f58c907", "html_url": "https://github.com/rust-lang/rust/commit/1115f69bf4bc96201a130c876f1a2e866f58c907"}], "stats": {"total": 88, "additions": 48, "deletions": 40}, "files": [{"sha": "6dd730c3f886120d721ae53b771a9f2166143c25", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/163a8004ae61e0c1d35f6411d65868bc03556bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163a8004ae61e0c1d35f6411d65868bc03556bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=163a8004ae61e0c1d35f6411d65868bc03556bf9", "patch": "@@ -2412,22 +2412,22 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n enum ItemSection {\n     Reexports,\n+    PrimitiveTypes,\n     Modules,\n+    Macros,\n     Structs,\n-    Unions,\n     Enums,\n-    Functions,\n-    TypeDefinitions,\n-    Statics,\n     Constants,\n+    Statics,\n     Traits,\n+    Functions,\n+    TypeDefinitions,\n+    Unions,\n     Implementations,\n     TypeMethods,\n     Methods,\n     StructFields,\n     Variants,\n-    Macros,\n-    PrimitiveTypes,\n     AssociatedTypes,\n     AssociatedConstants,\n     ForeignTypes,\n@@ -2439,6 +2439,38 @@ enum ItemSection {\n }\n \n impl ItemSection {\n+    const ALL: &'static [Self] = {\n+        use ItemSection::*;\n+        // NOTE: The order here affects the order in the UI.\n+        &[\n+            Reexports,\n+            PrimitiveTypes,\n+            Modules,\n+            Macros,\n+            Structs,\n+            Enums,\n+            Constants,\n+            Statics,\n+            Traits,\n+            Functions,\n+            TypeDefinitions,\n+            Unions,\n+            Implementations,\n+            TypeMethods,\n+            Methods,\n+            StructFields,\n+            Variants,\n+            AssociatedTypes,\n+            AssociatedConstants,\n+            ForeignTypes,\n+            Keywords,\n+            OpaqueTypes,\n+            AttributeMacros,\n+            DeriveMacros,\n+            TraitAliases,\n+        ]\n+    };\n+\n     fn id(self) -> &'static str {\n         match self {\n             Self::Reexports => \"reexports\",\n@@ -2534,39 +2566,13 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    let mut already_emitted_sections = FxHashSet::default();\n-    // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n-    // to print its headings\n-    for &myty in &[\n-        ItemType::Import,\n-        ItemType::Primitive,\n-        ItemType::Module,\n-        ItemType::Macro,\n-        ItemType::Struct,\n-        ItemType::Enum,\n-        ItemType::Constant,\n-        ItemType::Static,\n-        ItemType::Trait,\n-        ItemType::Function,\n-        ItemType::Typedef,\n-        ItemType::Union,\n-        ItemType::Impl,\n-        ItemType::TyMethod,\n-        ItemType::Method,\n-        ItemType::StructField,\n-        ItemType::Variant,\n-        ItemType::AssocType,\n-        ItemType::AssocConst,\n-        ItemType::ForeignType,\n-        ItemType::Keyword,\n-    ] {\n-        if items.iter().any(|it| !it.is_stripped() && it.type_() == myty && it.name.is_some()) {\n-            let sec = item_ty_to_section(myty);\n-            if !already_emitted_sections.insert(sec) {\n-                continue;\n-            }\n-            sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n-        }\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| !it.is_stripped() && it.name.is_some())\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+    for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n+        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n     }\n \n     if !sidebar.is_empty() {"}, {"sha": "6e466ae8218c77ec1cd85e0a565c7be10c9e1b0d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/163a8004ae61e0c1d35f6411d65868bc03556bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163a8004ae61e0c1d35f6411d65868bc03556bf9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=163a8004ae61e0c1d35f6411d65868bc03556bf9", "patch": "@@ -222,7 +222,9 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n     ) -> Ordering {\n         let ty1 = i1.type_();\n         let ty2 = i2.type_();\n-        if ty1 != ty2 {\n+        if item_ty_to_section(ty1) != item_ty_to_section(ty2)\n+            || (ty1 != ty2 && (ty1 == ItemType::ExternCrate || ty2 == ItemType::ExternCrate))\n+        {\n             return (reorder(ty1), idx1).cmp(&(reorder(ty2), idx2));\n         }\n         let s1 = i1.stability(tcx).as_ref().map(|s| s.level);"}]}