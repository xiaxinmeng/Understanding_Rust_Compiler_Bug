{"sha": "ed17c6b1c3db652444cc43c0004fa45d311abdaa", "node_id": "C_kwDOAAsO6NoAKGVkMTdjNmIxYzNkYjY1MjQ0NGNjNDNjMDAwNGZhNDVkMzExYWJkYWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T00:54:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T04:26:43Z"}, "message": "Use TraitEngine in more places, make FulfillmentCtxt constructor more private", "tree": {"sha": "268e4e1f1318ecd5a9d915c7273dfc408e44d7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268e4e1f1318ecd5a9d915c7273dfc408e44d7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed17c6b1c3db652444cc43c0004fa45d311abdaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed17c6b1c3db652444cc43c0004fa45d311abdaa", "html_url": "https://github.com/rust-lang/rust/commit/ed17c6b1c3db652444cc43c0004fa45d311abdaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed17c6b1c3db652444cc43c0004fa45d311abdaa/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34115d040b43d9a0dcc313c6282520a86d1e6f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/34115d040b43d9a0dcc313c6282520a86d1e6f61", "html_url": "https://github.com/rust-lang/rust/commit/34115d040b43d9a0dcc313c6282520a86d1e6f61"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "71949b4211819b79d08c09b5b32872504294a3a7", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=ed17c6b1c3db652444cc43c0004fa45d311abdaa", "patch": "@@ -62,6 +62,7 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n+use rustc_trait_selection::traits::TraitEngineExt as _;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n use smallvec::{smallvec, SmallVec};\n@@ -1038,7 +1039,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let Ok(ok) = coerce.coerce(source, target) else {\n                 return false;\n             };\n-            let mut fcx = traits::FulfillmentContext::new_in_snapshot();\n+            let mut fcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n             fcx.register_predicate_obligations(self, ok.obligations);\n             fcx.select_where_possible(&self).is_empty()\n         })"}, {"sha": "54c738d8389759859103ae149b82fe915934ca59", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=ed17c6b1c3db652444cc43c0004fa45d311abdaa", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::{self, TraitEngine};\n+use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n+        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n         let normalized_ty = fulfillcx.normalize_projection_type(\n             &self.infcx,\n             self.param_env,"}, {"sha": "8f9d5eaac9d1d5ac9e35adb52ef62d7d9dfcc6b3", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=ed17c6b1c3db652444cc43c0004fa45d311abdaa", "patch": "@@ -19,7 +19,7 @@ pub struct FulfillmentContext<'tcx> {\n }\n \n impl FulfillmentContext<'_> {\n-    pub(crate) fn new() -> Self {\n+    pub(super) fn new() -> Self {\n         FulfillmentContext {\n             obligations: FxIndexSet::default(),\n             relationships: FxHashMap::default(),"}, {"sha": "98c13ffdafb029f12aa273587a287cc7f9c8977d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ed17c6b1c3db652444cc43c0004fa45d311abdaa", "patch": "@@ -3,13 +3,14 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    FulfillmentContext, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n-    Obligation, ObligationCause, ObligationCauseCode, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes, Obligation, ObligationCause,\n+    ObligationCauseCode, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n+    SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n+use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n@@ -352,7 +353,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     })\n                     .to_predicate(self.tcx),\n                 );\n-                let mut fulfill_cx = FulfillmentContext::new_in_snapshot();\n+                let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n                 if fulfill_cx.select_all_or_error(self).is_empty() {\n                     return Ok(("}, {"sha": "b486c07f354b93bbf26f57cf3e1f8ace88d89286", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed17c6b1c3db652444cc43c0004fa45d311abdaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=ed17c6b1c3db652444cc43c0004fa45d311abdaa", "patch": "@@ -85,15 +85,15 @@ static_assert_size!(PendingPredicateObligation<'_>, 72);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n-    pub fn new() -> FulfillmentContext<'tcx> {\n+    pub(super) fn new() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             relationships: FxHashMap::default(),\n             usable_in_snapshot: false,\n         }\n     }\n \n-    pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n+    pub(super) fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             predicates: ObligationForest::new(),\n             relationships: FxHashMap::default(),"}]}