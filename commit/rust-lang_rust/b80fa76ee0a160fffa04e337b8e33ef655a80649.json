{"sha": "b80fa76ee0a160fffa04e337b8e33ef655a80649", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGZhNzZlZTBhMTYwZmZmYTA0ZTMzN2I4ZTMzZWY2NTVhODA2NDk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-20T22:42:56Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-07T01:26:37Z"}, "message": "Implement ToOwned::clone_into for CStr\n\nIt can try to keep its allocation by converting the inner `Box` to\n`Vec`, using `clone_into` on the bytes, then convert back to `Box`.", "tree": {"sha": "a205766bb316383a2b1f50f6f6d3090f10aa3f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a205766bb316383a2b1f50f6f6d3090f10aa3f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80fa76ee0a160fffa04e337b8e33ef655a80649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80fa76ee0a160fffa04e337b8e33ef655a80649", "html_url": "https://github.com/rust-lang/rust/commit/b80fa76ee0a160fffa04e337b8e33ef655a80649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80fa76ee0a160fffa04e337b8e33ef655a80649/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8339e820b0c4e7c9a26a3e3495b7655e60bd102", "html_url": "https://github.com/rust-lang/rust/commit/e8339e820b0c4e7c9a26a3e3495b7655e60bd102"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "0a4802fb2c80dd7f8a87dfca09f8e179f0a03a0a", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b80fa76ee0a160fffa04e337b8e33ef655a80649/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80fa76ee0a160fffa04e337b8e33ef655a80649/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b80fa76ee0a160fffa04e337b8e33ef655a80649", "patch": "@@ -1329,6 +1329,12 @@ impl ToOwned for CStr {\n     fn to_owned(&self) -> CString {\n         CString { inner: self.to_bytes_with_nul().into() }\n     }\n+\n+    fn clone_into(&self, target: &mut CString) {\n+        let mut b = Vec::from(mem::take(&mut target.inner));\n+        self.to_bytes_with_nul().clone_into(&mut b);\n+        target.inner = b.into_boxed_slice();\n+    }\n }\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n@@ -1510,6 +1516,17 @@ mod tests {\n         assert_eq!(boxed.to_bytes_with_nul(), &[0]);\n     }\n \n+    #[test]\n+    fn test_c_str_clone_into() {\n+        let mut c_string = CString::new(\"lorem\").unwrap();\n+        let c_ptr = c_string.as_ptr();\n+        let c_str = CStr::from_bytes_with_nul(b\"ipsum\\0\").unwrap();\n+        c_str.clone_into(&mut c_string);\n+        assert_eq!(c_str, c_string.as_c_str());\n+        // The exact same size shouldn't have needed to move its allocation\n+        assert_eq!(c_ptr, c_string.as_ptr());\n+    }\n+\n     #[test]\n     fn into_rc() {\n         let orig: &[u8] = b\"Hello, world!\\0\";"}]}