{"sha": "7b555178aef4045685eb359204b565a4bb8d1a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTU1MTc4YWVmNDA0NTY4NWViMzU5MjA0YjU2NWE0YmI4ZDFhOWY=", "commit": {"author": {"name": "Matthias Prechtl", "email": "m.sleepypanda@gmail.com", "date": "2020-02-07T12:07:02Z"}, "committer": {"name": "Matthias Prechtl", "email": "m.sleepypanda@gmail.com", "date": "2020-02-09T19:43:49Z"}, "message": "--bless --compare-mode=nll", "tree": {"sha": "1e70243305ad8c731063a496d312b43e022a942e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e70243305ad8c731063a496d312b43e022a942e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b555178aef4045685eb359204b565a4bb8d1a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b555178aef4045685eb359204b565a4bb8d1a9f", "html_url": "https://github.com/rust-lang/rust/commit/7b555178aef4045685eb359204b565a4bb8d1a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b555178aef4045685eb359204b565a4bb8d1a9f/comments", "author": {"login": "matprec", "id": 20750283, "node_id": "MDQ6VXNlcjIwNzUwMjgz", "avatar_url": "https://avatars.githubusercontent.com/u/20750283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matprec", "html_url": "https://github.com/matprec", "followers_url": "https://api.github.com/users/matprec/followers", "following_url": "https://api.github.com/users/matprec/following{/other_user}", "gists_url": "https://api.github.com/users/matprec/gists{/gist_id}", "starred_url": "https://api.github.com/users/matprec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matprec/subscriptions", "organizations_url": "https://api.github.com/users/matprec/orgs", "repos_url": "https://api.github.com/users/matprec/repos", "events_url": "https://api.github.com/users/matprec/events{/privacy}", "received_events_url": "https://api.github.com/users/matprec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matprec", "id": 20750283, "node_id": "MDQ6VXNlcjIwNzUwMjgz", "avatar_url": "https://avatars.githubusercontent.com/u/20750283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matprec", "html_url": "https://github.com/matprec", "followers_url": "https://api.github.com/users/matprec/followers", "following_url": "https://api.github.com/users/matprec/following{/other_user}", "gists_url": "https://api.github.com/users/matprec/gists{/gist_id}", "starred_url": "https://api.github.com/users/matprec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matprec/subscriptions", "organizations_url": "https://api.github.com/users/matprec/orgs", "repos_url": "https://api.github.com/users/matprec/repos", "events_url": "https://api.github.com/users/matprec/events{/privacy}", "received_events_url": "https://api.github.com/users/matprec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35a7c38da65c9a006c0c7dbd73685b552b3cbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35a7c38da65c9a006c0c7dbd73685b552b3cbf9", "html_url": "https://github.com/rust-lang/rust/commit/f35a7c38da65c9a006c0c7dbd73685b552b3cbf9"}], "stats": {"total": 1374, "additions": 689, "deletions": 685}, "files": [{"sha": "61228034a689df41465001adf9e34a705a4e168c", "filename": "src/test/rustdoc-ui/deprecated-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -1,9 +1,9 @@\n warning: the `#![doc(no_default_passes)]` attribute is considered deprecated\n    |\n-   = warning: please see https://github.com/rust-lang/rust/issues/44136\n+   = warning: see issue #44136 <https://github.com/rust-lang/rust/issues/44136> for more information\n    = help: you may want to use `#![doc(document_private_items)]`\n \n warning: the `#![doc(passes = \"...\")]` attribute is considered deprecated\n    |\n-   = warning: please see https://github.com/rust-lang/rust/issues/44136\n+   = warning: see issue #44136 <https://github.com/rust-lang/rust/issues/44136> for more information\n "}, {"sha": "02c569073e9e71f370c6eda3b7f1851724074e56", "filename": "src/test/ui-fulldeps/feature-gate-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: compiler plugins are deprecated\n LL | #![plugin(empty_plugin)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n+   = note: see issue #29597 <https://github.com/rust-lang/rust/issues/29597> for more information\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675"}, {"sha": "df2de40a8c1b1d17f4459cf34330d08c0eaf7013", "filename": "src/test/ui-fulldeps/gated-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: compiler plugins are deprecated\n LL | #![plugin(empty_plugin)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n+   = note: see issue #29597 <https://github.com/rust-lang/rust/issues/29597> for more information\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675"}, {"sha": "bc5e2d8937858108cf7f651dd48108a8bdfbbf35", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | extern crate rustc_data_structures;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | extern crate rustc;\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n@@ -22,7 +22,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | extern crate rustc_macros;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n@@ -31,7 +31,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | use rustc_macros::HashStable;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n@@ -40,7 +40,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | #[derive(HashStable)]\n    |          ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "09f1e600b25d5da2a4db67d6f30bb2b0e7cead54", "filename": "src/test/ui-fulldeps/pathless-extern-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpathless-extern-unstable.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | pub use rustc;\n    |         ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8d0cd57fad4420348c843fbfe24c500b2ec11d76", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error: equality constraints are not yet supported in `where` clauses\n LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not supported\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:19:32"}, {"sha": "ba851ba7d29847c4f220b17f5bd54f9496016851", "filename": "src/test/ui/async-await/feature-async-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-async-closure.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: async closures are unstable\n LL |     let _ = async || {};\n    |             ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/62290\n+   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n    = help: add `#![feature(async_closure)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "48859fb676342db23c3c5c8564d7dcb53e321524", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `match` is not allowed in a `static`\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f523b14a98c00dac52140e64b0b59b27138ea9b3", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |         main as u32\n    |         ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable\n@@ -13,7 +13,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |         &Y as *const u32 as u32\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "66fe8646e1016c53f621c3f490f7a94bd0d02bdd", "filename": "src/test/ui/check-static-immutable-mut-slices.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-immutable-mut-slices.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static TEST: &'static mut [isize] = &mut [];\n    |                                     ^^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b9225e55fe5c7c31ebf7fa8ef6e0edbf7cdb153d", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0282]: type annotations needed"}, {"sha": "4997ca4db27cd96cb0ebe032b6972e8fb805f90a", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_core]` attribute is an experimental feature\n LL | #![cfg_attr(broken, no_core)]\n    |                     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29639\n+   = note: see issue #29639 <https://github.com/rust-lang/rust/issues/29639> for more information\n    = help: add `#![feature(no_core)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c8762d15d942af40bf9b0d863409ccce42bc0070", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_core]` attribute is an experimental feature\n LL | #![cfg_attr(broken, no_core, no_std)]\n    |                     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29639\n+   = note: see issue #29639 <https://github.com/rust-lang/rust/issues/29639> for more information\n    = help: add `#![feature(no_core)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "e75b1c5b4c87c69750a63169cd24408728c82ed2", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_core]` attribute is an experimental feature\n LL | #![cfg_attr(broken, no_std, no_core)]\n    |                             ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29639\n+   = note: see issue #29639 <https://github.com/rust-lang/rust/issues/29639> for more information\n    = help: add `#![feature(no_core)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bdae6bc362c4727f72850fd1877e1ca61aec65a6", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const generics are unstable\n LL | trait Trait<const T: ()> {}\n    |                   ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "14ade3f33fd9b888ddbde182644af76374921b84", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const generics are unstable\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    |                   ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0741]: the types of const generic parameters must derive `PartialEq` and `Eq`"}, {"sha": "7b50c442d2f41f44dc68ede5972d1a405f2808a6", "filename": "src/test/ui/const-generics/issues/issue-60263.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const generics are unstable\n LL | struct B<const I: u8>;\n    |                ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1d9a325b0c2a00866a0fe8cec3e7c3d5734768ed", "filename": "src/test/ui/consts/const-address-of-mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `&raw mut` is not allowed in constants\n LL | const A: () = { let mut x = 2; &raw mut x; };\n    |                                ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: `&raw mut` is not allowed in statics\n@@ -13,7 +13,7 @@ error[E0658]: `&raw mut` is not allowed in statics\n LL | static B: () = { let mut x = 2; &raw mut x; };\n    |                                 ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: `&raw mut` is not allowed in statics\n@@ -22,7 +22,7 @@ error[E0658]: `&raw mut` is not allowed in statics\n LL | static mut C: () = { let mut x = 2; &raw mut x; };\n    |                                     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: `&raw mut` is not allowed in constant functions\n@@ -31,7 +31,7 @@ error[E0658]: `&raw mut` is not allowed in constant functions\n LL |     let y = &raw mut x;\n    |             ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "61fcb524319d57227b133e665f70e7428f0ee36f", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: dereferencing raw pointers in statics is unstable\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "4c8492b22f62588eab51da7490d1c0f1a2b6480e", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: unions in const fn are unstable\n LL |     Foo { u }.i\n    |     ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51909\n+   = note: see issue #51909 <https://github.com/rust-lang/rust/issues/51909> for more information\n    = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "56746c04f5cd71d9ae51e57bc252962288d8b450", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: panicking in constants is unstable\n LL | const Z: () = panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0658]: panicking in constants is unstable\n LL | const X: () = unimplemented!();\n    |               ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,7 +24,7 @@ error[E0658]: panicking in constants is unstable\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e04c31cf397821d8463aa71ef786742f88e45e81", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -19,7 +19,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n warning: Constant evaluating a complex constant, this might take some time"}, {"sha": "eda2dbf0b6b1569ff8f412bf2436b78b325f2106", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |              ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable\n@@ -13,7 +13,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0080]: evaluation of constant value failed"}, {"sha": "31d87925b2cfcdd40414bb5d559b477591c7b8a7", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -8,7 +8,7 @@ LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n "}, {"sha": "380f68bee09ce939876b463717e89e69c4e22210", "filename": "src/test/ui/consts/const-eval/issue-62272.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL | const FOO: () = loop { break; };\n    |                 ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -13,7 +13,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     [FOO; { let x; loop { x = 5; break; } x }];\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "d85a1a1a3c32bff0d0c93d33b8dad06710b354dc", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL |     let r = &mut x;\n    |             ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time"}, {"sha": "b47f6d5f845feeab0e81fbd237a557ebbfbf939f", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ LL | |             n => n,\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable\n@@ -19,7 +19,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0080]: evaluation of constant value failed"}, {"sha": "7f6af051e1748b70ff7b43d1bd60015f00a6d679", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const reg\n LL |         regular_in_block();\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const regular` is not stable as `const fn`\n@@ -13,7 +13,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const reg\n LL |         regular();\n    |         ^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "f520bd358472c136dec601c46b2ea98b570dc23a", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: unsizing casts are not allowed in const fn\n LL | const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n    |                                                ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    |                                         ^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -22,7 +22,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    |                                      ^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n@@ -31,7 +31,7 @@ error[E0723]: casting pointers to ints is unstable in const fn\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "ed5e0c84a16aef8862437898521ad3a416c7d45d", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const extern fn foo1() {}\n    |               ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n@@ -13,7 +13,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const extern \"C\" fn foo2() {}\n    |               ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n@@ -22,7 +22,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const extern \"Rust\" fn foo3() {}\n    |               ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n@@ -31,7 +31,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const unsafe extern fn bar1() {}\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n@@ -40,7 +40,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const unsafe extern \"C\" fn bar2() {}\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error[E0658]: `const extern fn` definitions are unstable\n@@ -49,7 +49,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL | #[cfg(FALSE)] const unsafe extern \"Rust\" fn bar3() {}\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors"}, {"sha": "d36b781d292d2a3a4716e0ca77bd3928f1497201", "filename": "src/test/ui/consts/const-extern-fn/issue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fissue-68062-const-extern-fns-dont-need-fn-specifier.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0658]: `const extern fn` definitions are unstable\n LL |     const extern \"Rust\" PUT_ANYTHING_YOU_WANT_HERE bug() -> usize { 1 }\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64926\n+   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "ac845df227c4230a34c2a95ce1b9bd333494d97c", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL | const CRASH: () = 'a: while break 'a {};\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n "}, {"sha": "412e1609ccfab8c138a4f2ebd3455b8534122783", "filename": "src/test/ui/consts/const-match-pattern-arm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -8,7 +8,7 @@ LL | |     _ => false\n LL | | };\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -20,7 +20,7 @@ LL | |         _ => false\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "e01dd4e574738c119dad431d325423da226d2c65", "filename": "src/test/ui/consts/const-multi-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-multi-ref.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL |     let p = &mut a;\n    |             ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead"}, {"sha": "83e050c7a5c8aee45c04370ed3249865f4565877", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: mutable references in const fn are unstable\n LL | const fn foo(x: &mut i32) -> i32 {\n    |              ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5e2a85cc03d9faa7a92296592a25cb8bb0a3bffd", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL |     s.foo(3);\n    |     ^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: references in constants may only refer to immutable values\n@@ -19,7 +19,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL |     let y = &mut x;\n    |             ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type"}, {"sha": "0ba79e5f71a2ebd7f95c6e4c1a647a153f6fd0dd", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0723]: loops and conditional expressions are not stable in const fn\n LL | const fn slice(&[a, b]: &[i32]) -> i32 {\n    |                 ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "b020382af07c87621af056c72792b2cdc4d4915e", "filename": "src/test/ui/consts/const_short_circuit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_short_circuit.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error: new features like let bindings are not permitted in constants which also\n LL |     let mut x = true && false;\n    |         ^^^^^\n    |\n-note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See https://github.com/rust-lang/rust/issues/49146 for more information.\n+note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information.\n   --> $DIR/const_short_circuit.rs:4:22\n    |\n LL |     let mut x = true && false;\n@@ -16,7 +16,7 @@ error: new features like let bindings are not permitted in constants which also\n LL |     let x = true && false;\n    |         ^\n    |\n-note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See https://github.com/rust-lang/rust/issues/49146 for more information.\n+note: use of `&&` operator here does not actually short circuit due to the const evaluator presently not being able to do control flow. See issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information.\n   --> $DIR/const_short_circuit.rs:9:18\n    |\n LL |     let x = true && false;"}, {"sha": "466fb7c3ec5b1a1c28af9bf7ebb6a94bb83954a2", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: panicking in constants is unstable\n LL | const _: () = assert!(true);\n    |               ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0658]: panicking in constants is unstable\n LL | const _: () = assert!(false);\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "eafbdd84cc86ca0f0d8a98d305d04223696e8c5e", "filename": "src/test/ui/consts/control-flow/assert.panic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL | const _: () = assert!(true);\n    |               ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL | const _: () = assert!(false);\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "eafbdd84cc86ca0f0d8a98d305d04223696e8c5e", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL | const _: () = assert!(true);\n    |               ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL | const _: () = assert!(false);\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ca087b858868917cd4754b13ea6beead5c297e50", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.stock.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -9,7 +9,7 @@ LL | |     6\n LL | | };\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -23,7 +23,7 @@ LL | |     1\n LL | | };\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -37,7 +37,7 @@ LL | |     _ => 0,\n LL | | };\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static`\n@@ -46,7 +46,7 @@ error[E0658]: `if` is not allowed in a `static`\n LL |     let x = if true { 0 } else { 1 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `static`\n@@ -55,7 +55,7 @@ error[E0658]: `match` is not allowed in a `static`\n LL |     let x = match x { 0 => 1, _ => 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static`\n@@ -64,7 +64,7 @@ error[E0658]: `if` is not allowed in a `static`\n LL |     if let Some(x) = Some(x) { x } else { 1 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static mut`\n@@ -73,7 +73,7 @@ error[E0658]: `if` is not allowed in a `static mut`\n LL |     let x = if true { 0 } else { 1 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `static mut`\n@@ -82,7 +82,7 @@ error[E0658]: `match` is not allowed in a `static mut`\n LL |     let x = match x { 0 => 1, _ => 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `static mut`\n@@ -91,7 +91,7 @@ error[E0658]: `if` is not allowed in a `static mut`\n LL |     if let Some(x) = Some(x) { x } else { 1 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n@@ -100,7 +100,7 @@ error[E0658]: `if` is not allowed in a `const fn`\n LL |     if true { 5 } else { 6 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n@@ -113,7 +113,7 @@ LL | |         1\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const fn`\n@@ -126,7 +126,7 @@ LL | |         _ => 0\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n@@ -135,7 +135,7 @@ error[E0658]: `if` is not allowed in a `const fn`\n LL |         let x = if y { 0 } else { 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const fn`\n@@ -144,7 +144,7 @@ error[E0658]: `match` is not allowed in a `const fn`\n LL |         let x = match x { 0 => 1, _ => 0 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const fn`\n@@ -153,7 +153,7 @@ error[E0658]: `if` is not allowed in a `const fn`\n LL |         if let Some(x) = Some(x) { x } else { 1 }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -162,7 +162,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |         let x = if false { 0 } else { 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -171,7 +171,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         let x = match x { 0 => 1, _ => 0 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -180,7 +180,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |         if let Some(x) = Some(x) { x } else { 1 }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -189,7 +189,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |     const IF: i32 = if true { 5 } else { 6 };\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -198,7 +198,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -207,7 +207,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -216,7 +216,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |     const IF: i32 = if true { 5 } else { 6 };\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -225,7 +225,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -234,7 +234,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type"}, {"sha": "e4650da2075bdedcd56b287d621a77123fa67c8a", "filename": "src/test/ui/consts/control-flow/issue-46843.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ LL | |     Thing::That => 0\n LL | | };\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9d0d2831d9af3a996215fb08670000a913c63b5b", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0658]: `if` is not allowed in a `const`\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,7 +24,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e8ff3624b7720a38e9188013c2b1faad857b8ea2", "filename": "src/test/ui/consts/control-flow/loop.if_match.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL | const _: () = loop {};\n    |               ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `static`\n@@ -13,7 +13,7 @@ error[E0658]: `loop` is not allowed in a `static`\n LL | static FOO: i32 = loop { break 4; };\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const fn`\n@@ -22,7 +22,7 @@ error[E0658]: `loop` is not allowed in a `const fn`\n LL |     loop {}\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const fn`\n@@ -31,7 +31,7 @@ error[E0658]: `loop` is not allowed in a `const fn`\n LL |         loop {}\n    |         ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -40,7 +40,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -51,7 +51,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -62,7 +62,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0744]: `for` is not allowed in a `const`\n@@ -92,7 +92,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -106,7 +106,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -115,7 +115,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -124,7 +124,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -133,7 +133,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -142,7 +142,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 15 previous errors"}, {"sha": "3d739f4d2b41b0fade374313c71412f2a0ee0f21", "filename": "src/test/ui/consts/control-flow/loop.loop_.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n \n@@ -16,7 +16,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n \n@@ -28,7 +28,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n \n@@ -56,7 +56,7 @@ LL | |             break;\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -67,7 +67,7 @@ LL | |             break;\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -76,7 +76,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n \n@@ -86,7 +86,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n "}, {"sha": "987ced9655186c184471be3624d1b697e398ecb1", "filename": "src/test/ui/consts/control-flow/loop.stock.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL | const _: () = loop {};\n    |               ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `static`\n@@ -13,7 +13,7 @@ error[E0658]: `loop` is not allowed in a `static`\n LL | static FOO: i32 = loop { break 4; };\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const fn`\n@@ -22,7 +22,7 @@ error[E0658]: `loop` is not allowed in a `const fn`\n LL |     loop {}\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const fn`\n@@ -31,7 +31,7 @@ error[E0658]: `loop` is not allowed in a `const fn`\n LL |         loop {}\n    |         ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -40,7 +40,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -52,7 +52,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -64,7 +64,7 @@ LL | |         x += 1;\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -95,7 +95,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -106,7 +106,7 @@ LL | |             break;\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -120,7 +120,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n@@ -131,7 +131,7 @@ LL | |             break;\n LL | |         }\n    | |_________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `while` is not allowed in a `const`\n@@ -140,7 +140,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -150,7 +150,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n@@ -160,7 +160,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `loop` is not allowed in a `const`\n@@ -169,7 +169,7 @@ error[E0658]: `loop` is not allowed in a `const`\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 17 previous errors"}, {"sha": "4d9d1d79284a82f0510dfab245f134eb8609d274", "filename": "src/test/ui/consts/min_const_fn/address_of.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `&raw mut` is not allowed in constant functions\n LL |     let b = &raw mut a;\n    |             ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: `&raw mut` is not allowed in constant functions\n@@ -13,7 +13,7 @@ error[E0658]: `&raw mut` is not allowed in constant functions\n LL |         let b = &raw mut a;\n    |                 ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "9a14bcc2f733566c4cda0c8120136d3901c4ddf5", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn error(_: fn()) {}\n    |                ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c8d060f5cdcfe5fc78057264e825288d810c7b7b", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: internal implementation detail\n LL | #[rustc_allow_const_fn_ptr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "39b223062e9865fa140b75399420dda0e05cec5b", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: heap allocations are not allowed in const fn\n LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a6a05b522a5ae80693471635d3b504dea72bbda8", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: unsizing casts are not allowed in const fn\n LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n    |                                         ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -22,7 +22,7 @@ error[E0723]: function pointers in const fn are unstable\n LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -31,7 +31,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -40,7 +40,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "74e5228d0dc620e909abaaec4d30d87c4e024986", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    |              ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f48b7396e77c6ca4d064d184535a6c952416f890", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `loop` is not allowed in a `const fn`\n LL |     loop {}\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "927cdfae189d79d2d7094493191b844a1cdcf967", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -25,7 +25,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -40,7 +40,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n@@ -49,7 +49,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -58,7 +58,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -67,7 +67,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -76,7 +76,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -85,7 +85,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int and `bool` operations are stable in const fn\n@@ -94,7 +94,7 @@ error[E0723]: only int and `bool` operations are stable in const fn\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -103,7 +103,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n@@ -112,7 +112,7 @@ error[E0723]: cannot access `static` items in const fn\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n@@ -121,7 +121,7 @@ error[E0723]: cannot access `static` items in const fn\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n@@ -130,7 +130,7 @@ error[E0723]: casting pointers to ints is unstable in const fn\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n@@ -139,7 +139,7 @@ error[E0723]: casting pointers to ints is unstable in const fn\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n@@ -148,7 +148,7 @@ error[E0723]: casting pointers to ints is unstable in const fn\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n@@ -157,7 +157,7 @@ error[E0723]: casting pointers to ints is unstable in const fn\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n@@ -166,7 +166,7 @@ error[E0723]: loops and conditional expressions are not stable in const fn\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n@@ -175,7 +175,7 @@ error[E0723]: loops and conditional expressions are not stable in const fn\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n@@ -184,7 +184,7 @@ error[E0723]: mutable references in const fn are unstable\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -193,7 +193,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -202,7 +202,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -211,7 +211,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n@@ -220,7 +220,7 @@ error[E0723]: `impl Trait` in const fn is unstable\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -229,7 +229,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -238,7 +238,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n@@ -247,7 +247,7 @@ error[E0723]: `impl Trait` in const fn is unstable\n LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -256,7 +256,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -265,7 +265,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -274,7 +274,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -283,7 +283,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -292,7 +292,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 34 previous errors"}, {"sha": "17e171c2fc9534b640c16924a5c9fa5fe36c04cb", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -13,7 +13,7 @@ error[E0723]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "58acbb5339affda1a57a2ae57fb2fbea67281d6a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: function pointers in const fn are unstable\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0723]: function pointers in const fn are unstable\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "b82ae40d6876ebea5673811f5381f26d6f8d9e98", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n@@ -13,7 +13,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -22,7 +22,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n@@ -31,7 +31,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "97b0a778d2c72aa6ee1537c48de491e74e6874d3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: dereferencing raw pointers in constant functions is unstable\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n@@ -13,7 +13,7 @@ error[E0658]: dereferencing raw pointers in constant functions is unstable\n LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    |                                                                      ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n@@ -22,7 +22,7 @@ error[E0658]: dereferencing raw pointers in constant functions is unstable\n LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n    |                                                                                   ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0723]: accessing union fields is unstable\n@@ -31,7 +31,7 @@ error[E0723]: accessing union fields is unstable\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block"}, {"sha": "00975a80b2263f335545484b3375db91c8f9c5e9", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n@@ -13,7 +13,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n@@ -22,7 +22,7 @@ error[E0723]: only int, `bool` and `char` operations are stable in const fn\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n@@ -31,7 +31,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "5014eed06fac524db6b1fa7272b095579d712f9f", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n@@ -13,7 +13,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n@@ -22,7 +22,7 @@ error[E0723]: can only call other `const fn` within a `const fn`, but `const foo\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "f5a3c168a86d7c06a2d14fde938b0213e69592d7", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     let b = &mut a;\n    |         ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |         let b = &mut a;\n    |             ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "0945a23f3b123fc9b83c532c70f7c4690d34f4a1", "filename": "src/test/ui/consts/projection_qualif.mut_refs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.mut_refs.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: dereferencing raw pointers in constants is unstable\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "75625a4bd1bc354fce3f786e07bf492ff5ceaf15", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL |         let b: *mut u32 = &mut a;\n    |                           ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constants is unstable\n@@ -13,7 +13,7 @@ error[E0658]: dereferencing raw pointers in constants is unstable\n LL |         unsafe { *b = 5; }\n    |                  ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type"}, {"sha": "c70431886e868213aa69c8eac787a4e793cb3d69", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: static contains unimplemented expression type"}, {"sha": "b5f61e6e991d842efbe57f34b6f89a008ab2c3a3", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: discriminants on non-unit variants are experimental\n LL |   Tuple() = 2,\n    |             ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n    = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n \n error[E0658]: discriminants on non-unit variants are experimental\n@@ -13,7 +13,7 @@ error[E0658]: discriminants on non-unit variants are experimental\n LL |   Struct{} = 3,\n    |              ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n    = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n \n error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n@@ -28,7 +28,7 @@ LL |\n LL |   Struct{} = 3,\n    |   ------------ struct variant defined here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n    = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "2e687c18ed3ff76a9e07fa6e8506787141a852f5", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: static contains unimplemented expression type\n@@ -19,7 +19,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n@@ -34,7 +34,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: references in statics may only refer to immutable values\n@@ -43,7 +43,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n    |                                                    ^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors"}, {"sha": "52822ebdd9e67524dacedf84283b6feb35486cc7", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0019]: static contains unimplemented expression type\n@@ -19,7 +19,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0596]: cannot borrow immutable static item `X` as mutable\n@@ -34,7 +34,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "20c8622f33726c5cb7aac8a6fecf54247b403c25", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: comparing raw pointers inside static\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n    = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7d2544f939f7127c3eb78a201b2fda12f5575ed2", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: dereferencing raw pointers in constants is unstable\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n+   = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "4563b0e21940b4748731890392918a62d89c695e", "filename": "src/test/ui/error-codes/E0658.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,7 @@ LL | |     Bar(u64),\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/56071\n+   = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n    = help: add `#![feature(repr128)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "4c80989951abc79d9cfd6b816e75e1359de1e2ed", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     r.a_unstable_undeclared_pub;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `b_crate` of struct `pub_and_stability::Record` is private\n@@ -40,7 +40,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     t.2;\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `3` of struct `pub_and_stability::Tuple` is private\n@@ -67,7 +67,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     r.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n@@ -76,7 +76,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     r.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0624]: method `pub_crate` is private\n@@ -103,7 +103,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     t.unstable_undeclared_trait_method();\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n@@ -112,7 +112,7 @@ error[E0658]: use of unstable library feature 'unstable_undeclared'\n LL |     t.unstable_undeclared();\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38412\n+   = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0624]: method `pub_crate` is private"}, {"sha": "50ce6427e8b584cd497a51e58f7c5768d1514310", "filename": "src/test/ui/feature-gate-optimize_attribute.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optimize_attribute.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[optimize]` attribute is an experimental feature\n LL | #[optimize(size)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54882\n+   = note: see issue #54882 <https://github.com/rust-lang/rust/issues/54882> for more information\n    = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable\n \n error[E0658]: the `#[optimize]` attribute is an experimental feature\n@@ -13,7 +13,7 @@ error[E0658]: the `#[optimize]` attribute is an experimental feature\n LL | #[optimize(speed)]\n    | ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54882\n+   = note: see issue #54882 <https://github.com/rust-lang/rust/issues/54882> for more information\n    = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable\n \n error[E0658]: the `#[optimize]` attribute is an experimental feature\n@@ -22,7 +22,7 @@ error[E0658]: the `#[optimize]` attribute is an experimental feature\n LL | #[optimize(banana)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54882\n+   = note: see issue #54882 <https://github.com/rust-lang/rust/issues/54882> for more information\n    = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable\n \n error[E0658]: the `#[optimize]` attribute is an experimental feature\n@@ -31,7 +31,7 @@ error[E0658]: the `#[optimize]` attribute is an experimental feature\n LL | #[optimize(size)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54882\n+   = note: see issue #54882 <https://github.com/rust-lang/rust/issues/54882> for more information\n    = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable\n \n error[E0658]: the `#[optimize]` attribute is an experimental feature\n@@ -40,7 +40,7 @@ error[E0658]: the `#[optimize]` attribute is an experimental feature\n LL | #![optimize(speed)]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54882\n+   = note: see issue #54882 <https://github.com/rust-lang/rust/issues/54882> for more information\n    = help: add `#![feature(optimize_attribute)]` to the crate attributes to enable\n \n error[E0722]: invalid argument"}, {"sha": "7b3af8d994f620f5cc3434c9543c58566b57bd0f", "filename": "src/test/ui/feature-gate/feature-gate-c_variadic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: C-variadic functions are unstable\n LL | pub unsafe extern \"C\" fn test(_: i32, ap: ...) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44930\n+   = note: see issue #44930 <https://github.com/rust-lang/rust/issues/44930> for more information\n    = help: add `#![feature(c_variadic)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d96a48cde9f99dd10d3ce008f9d80d4457bc1768", "filename": "src/test/ui/feature-gate/feature-gate-static-nobundle-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-static-nobundle-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -1,6 +1,6 @@\n error[E0658]: kind=\"static-nobundle\" is unstable\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37403\n+   = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1a8536d37d6f769afc8ead43ee76be916383f1ba", "filename": "src/test/ui/feature-gate/rustc-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Frustc-private.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL | extern crate libc;\n    | ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "493b57f4303cb1e42fdc59f839df9bc26ea09928", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL | extern \"msp430-interrupt\" fn foo() {}\n    |        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "50cd8bc68a2a2928a4f45ffb3d745c535f79f5b1", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -12,7 +12,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -29,7 +29,7 @@ error[E0658]: rust-call ABI is subject to change\n LL | extern \"rust-call\" fn f4() {}\n    |        ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -38,7 +38,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL | extern \"msp430-interrupt\" fn f5() {}\n    |        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -47,7 +47,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL | extern \"ptx-kernel\" fn f6() {}\n    |        ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -56,7 +56,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL | extern \"x86-interrupt\" fn f7() {}\n    |        ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -73,7 +73,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    |        ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -82,7 +82,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL | extern \"efiapi\" fn f10() {}\n    |        ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -99,7 +99,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -116,7 +116,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn m4();\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -125,7 +125,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL |     extern \"msp430-interrupt\" fn m5();\n    |            ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -134,7 +134,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL |     extern \"ptx-kernel\" fn m6();\n    |            ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -143,7 +143,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL |     extern \"x86-interrupt\" fn m7();\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -160,7 +160,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -169,7 +169,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL |     extern \"efiapi\" fn m10();\n    |            ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -186,7 +186,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn dm4() {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -195,7 +195,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -204,7 +204,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |            ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -213,7 +213,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -230,7 +230,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -239,7 +239,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL |     extern \"efiapi\" fn dm10() {}\n    |            ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -256,7 +256,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -273,7 +273,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn m4() {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -282,7 +282,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -291,7 +291,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |            ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -300,7 +300,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -317,7 +317,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -326,7 +326,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL |     extern \"efiapi\" fn m10() {}\n    |            ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -343,7 +343,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -360,7 +360,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn im4() {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -369,7 +369,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |            ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -378,7 +378,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |            ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -387,7 +387,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -404,7 +404,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |            ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -413,7 +413,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL |     extern \"efiapi\" fn im10() {}\n    |            ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -430,7 +430,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -447,7 +447,7 @@ error[E0658]: rust-call ABI is subject to change\n LL | type A4 = extern \"rust-call\" fn();\n    |                  ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -456,7 +456,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -465,7 +465,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |                  ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -474,7 +474,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |                  ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -491,7 +491,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |                  ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -500,7 +500,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL | type A10 = extern \"efiapi\" fn();\n    |                   ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n@@ -517,7 +517,7 @@ error[E0658]: platform intrinsics are experimental and possibly buggy\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n@@ -534,7 +534,7 @@ error[E0658]: rust-call ABI is subject to change\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n@@ -543,7 +543,7 @@ error[E0658]: msp430-interrupt ABI is experimental and subject to change\n LL | extern \"msp430-interrupt\" {}\n    |        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n@@ -552,7 +552,7 @@ error[E0658]: PTX ABIs are experimental and subject to change\n LL | extern \"ptx-kernel\" {}\n    |        ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n@@ -561,7 +561,7 @@ error[E0658]: x86-interrupt ABI is experimental and subject to change\n LL | extern \"x86-interrupt\" {}\n    |        ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n@@ -578,7 +578,7 @@ error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n LL | extern \"amdgpu-kernel\" {}\n    |        ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n@@ -587,7 +587,7 @@ error[E0658]: efiapi ABI is experimental and subject to change\n LL | extern \"efiapi\" {}\n    |        ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block"}, {"sha": "03f31e53f4f2aa76261ecc28abbb9227dcca94aa", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[alloc_error_handler]` attribute is an experimental feature\n LL | #[alloc_error_handler]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51540\n+   = note: see issue #51540 <https://github.com/rust-lang/rust/issues/51540> for more information\n    = help: add `#![feature(alloc_error_handler)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "76115fb9698332502d0722020bcd0fad7690dcac", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[allow_fail]` attribute is an experimental feature\n LL | #[allow_fail]\n    | ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/46488\n+   = note: see issue #46488 <https://github.com/rust-lang/rust/issues/46488> for more information\n    = help: add `#![feature(allow_fail)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f5d74d7a84076ceb2611aa73fa358cf44ff3f9f3", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbi\n LL |     fn foo(self: Ptr<Self>);\n    |                  ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n@@ -14,7 +14,7 @@ error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbit\n LL |     fn foo(self: Ptr<Self>) {}\n    |                  ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n@@ -24,7 +24,7 @@ error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` w\n LL |     fn bar(self: Box<Ptr<Self>>) {}\n    |                  ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n "}, {"sha": "a80f9befcafdcdca85bd4f4e3ac107a95967d4c6", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `*const Self` cannot be used as the type of `self` without the `ar\n LL |     fn bar(self: *const Self);\n    |                  ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n@@ -14,7 +14,7 @@ error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arb\n LL |     fn foo(self: *const Self) {}\n    |                  ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n@@ -24,7 +24,7 @@ error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbi\n LL |     fn bar(self: *const Self) {}\n    |                  ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n "}, {"sha": "265d38f83f5407b5e0e09f481974a90d6666175c", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         asm!(\"\");\n    |         ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29722\n+   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7ea7bdac441832a5d46ae6bd6e29d8625628d356", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'asm': inline assembly is not stab\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29722\n+   = note: see issue #29722 <https://github.com/rust-lang/rust/issues/29722> for more information\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9edad615327352a253c5401fa21c7db159e838ed", "filename": "src/test/ui/feature-gates/feature-gate-assoc-type-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-assoc-type-defaults.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: associated type defaults are unstable\n LL |     type Bar = u8;\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29661\n+   = note: see issue #29661 <https://github.com/rust-lang/rust/issues/29661> for more information\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bfa59d83c82fa601286b065e5a4e7fd898b388d7", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: associated type bounds are unstable\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -13,7 +13,7 @@ error[E0658]: associated type bounds are unstable\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -22,7 +22,7 @@ error[E0658]: associated type bounds are unstable\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -31,7 +31,7 @@ error[E0658]: associated type bounds are unstable\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -40,7 +40,7 @@ error[E0658]: associated type bounds are unstable\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -49,7 +49,7 @@ error[E0658]: associated type bounds are unstable\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -58,7 +58,7 @@ error[E0658]: associated type bounds are unstable\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -67,7 +67,7 @@ error[E0658]: associated type bounds are unstable\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -76,7 +76,7 @@ error[E0658]: associated type bounds are unstable\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -85,7 +85,7 @@ error[E0658]: associated type bounds are unstable\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -94,7 +94,7 @@ error[E0658]: associated type bounds are unstable\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -103,7 +103,7 @@ error[E0658]: associated type bounds are unstable\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n@@ -112,7 +112,7 @@ error[E0658]: associated type bounds are unstable\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "af864b25f14bf601d34ecde1523322ab71ad8188", "filename": "src/test/ui/feature-gates/feature-gate-box-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: box expression syntax is experimental; you can call `Box::new` ins\n LL |     let x = box 'c';\n    |             ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49733\n+   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n    = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "601ec46a4439484d6cc749950bb3726e74587903", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: box pattern syntax is experimental\n LL |     let box x = Box::new('c');\n    |         ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29641\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n    = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "dcf8eeed7cfce3a8d8d4ca9cb211a46127e64c6f", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: box expression syntax is experimental; you can call `Box::new` ins\n LL |     let x = box 3;\n    |             ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49733\n+   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n    = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6132c5308787914eae64c2ae645056722b32eeb5", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -13,7 +13,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -22,7 +22,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -31,7 +31,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -40,7 +40,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -49,7 +49,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -58,7 +58,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -67,7 +67,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -76,7 +76,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -85,7 +85,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"128\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -94,7 +94,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -103,7 +103,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -112,7 +112,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"8\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -121,7 +121,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"16\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -130,7 +130,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"32\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -139,7 +139,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"64\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -148,7 +148,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"128\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n@@ -157,7 +157,7 @@ error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change\n LL |     cfg!(target_has_atomic = \"ptr\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32976\n+   = note: see issue #32976 <https://github.com/rust-lang/rust/issues/32976> for more information\n    = help: add `#![feature(cfg_target_has_atomic)]` to the crate attributes to enable\n \n error: aborting due to 18 previous errors"}, {"sha": "af59c714147731fd06df02e52473cbce34448108", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-thread-local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `cfg(target_thread_local)` is experimental and subject to change\n LL |     #[cfg_attr(target_thread_local, thread_local)]\n    |                ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29594\n+   = note: see issue #29594 <https://github.com/rust-lang/rust/issues/29594> for more information\n    = help: add `#![feature(cfg_target_thread_local)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8088585da8dd63e5e73abaef15bea0c6994b5dbb", "filename": "src/test/ui/feature-gates/feature-gate-cfg_sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg_sanitize.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `cfg(sanitize)` is experimental and subject to change\n LL | #[cfg(not(sanitize = \"thread\"))]\n    |           ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/39699\n+   = note: see issue #39699 <https://github.com/rust-lang/rust/issues/39699> for more information\n    = help: add `#![feature(cfg_sanitize)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "0454fd4945cd91e4de42c010f8067bd6ef8f118c", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n LL |     let a = concat_idents!(X, Y_1);\n    |             ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n+   = note: see issue #29599 <https://github.com/rust-lang/rust/issues/29599> for more information\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n LL |     let b = concat_idents!(X, Y_2);\n    |             ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n+   = note: see issue #29599 <https://github.com/rust-lang/rust/issues/29599> for more information\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "32c37806a87b5fb55af05d7a7d3e8121aed522b9", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n LL |     concat_idents!(a, b);\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n+   = note: see issue #29599 <https://github.com/rust-lang/rust/issues/29599> for more information\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n \n error[E0425]: cannot find value `ab` in this scope"}, {"sha": "1316107a3dca618edbcd67694b0e0ff28d6ba9d3", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n LL |     assert_eq!(10, concat_idents!(X, Y_1));\n    |                    ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n+   = note: see issue #29599 <https://github.com/rust-lang/rust/issues/29599> for more information\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` i\n LL |     assert_eq!(20, concat_idents!(X, Y_2));\n    |                    ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n+   = note: see issue #29599 <https://github.com/rust-lang/rust/issues/29599> for more information\n    = help: add `#![feature(concat_idents)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "6a44f079bfbb42333621ef557887b06a18a6813c", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -22,7 +22,7 @@ error[E0658]: const fn is unstable\n LL |     const fn foo() -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0658]: const fn is unstable\n@@ -31,7 +31,7 @@ error[E0658]: const fn is unstable\n LL |     const fn bar() -> u32 { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "dc7ef55e7ab997db81a8e954a027fd0a8b67f6ee", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const generics are unstable\n LL | struct ConstFn<const F: fn()>;\n    |                      ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n@@ -13,7 +13,7 @@ error[E0658]: const generics are unstable\n LL | struct ConstPtr<const P: *const u32>;\n    |                       ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: using function pointers as const generic parameters is unstable\n@@ -22,7 +22,7 @@ error[E0658]: using function pointers as const generic parameters is unstable\n LL | struct ConstFn<const F: fn()>;\n    |                         ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n    = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error[E0658]: using raw pointers as const generic parameters is unstable\n@@ -31,7 +31,7 @@ error[E0658]: using raw pointers as const generic parameters is unstable\n LL | struct ConstPtr<const P: *const u32>;\n    |                          ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n    = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "02aa1f5a4d843d9d99384cfc65cef64907d2a0e9", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const generics are unstable\n LL | fn foo<const X: ()>() {}\n    |              ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n@@ -13,7 +13,7 @@ error[E0658]: const generics are unstable\n LL | struct Foo<const X: usize>([(); X]);\n    |                  ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "632afb24aa55df1d41efcd7310877ed45d0ef781", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     let arr: [Option<String>; 2] = [None::<String>; 2];\n    = help: the following implementations were found:\n              <std::option::Option<T> as std::marker::Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = note: this array initializer can be evaluated at compile-time, for more information, see issue https://github.com/rust-lang/rust/issues/49147\n+   = note: this array initializer can be evaluated at compile-time, see issue #48147 <https://github.com/rust-lang/rust/issues/49147> for more information\n    = help: add `#![feature(const_in_array_repeat_expressions)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied"}, {"sha": "969606375c3e9cb918ab7d28bbf2d9fc4412a08c", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `crate` visibility modifier is experimental\n LL | crate struct Bender {\n    | ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53120\n+   = note: see issue #53120 <https://github.com/rust-lang/rust/issues/53120> for more information\n    = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b65b009a34228bd0a01bae0090fb2b289aadb257", "filename": "src/test/ui/feature-gates/feature-gate-custom_test_frameworks.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_test_frameworks.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'custom_test_frameworks': custom t\n LL | #[test_case]\n    |   ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50297\n+   = note: see issue #50297 <https://github.com/rust-lang/rust/issues/50297> for more information\n    = help: add `#![feature(custom_test_frameworks)]` to the crate attributes to enable\n \n error[E0658]: custom test frameworks are an unstable feature\n@@ -13,7 +13,7 @@ error[E0658]: custom test frameworks are an unstable feature\n LL | #![test_runner(main)]\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50297\n+   = note: see issue #50297 <https://github.com/rust-lang/rust/issues/50297> for more information\n    = help: add `#![feature(custom_test_frameworks)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "800caf25239503ac93c22c8aa8dfdfd8bd820d78", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `macro` is experimental\n LL | macro m() {}\n    | ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/39412\n+   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n    = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f66d1602ba253854407761c49ed65d42de056204", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(alias)]` is experimental\n LL | #[doc(alias = \"foo\")]\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50146\n+   = note: see issue #50146 <https://github.com/rust-lang/rust/issues/50146> for more information\n    = help: add `#![feature(doc_alias)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "fe88e08c12346b68f9ef4281b97f5274e95346cd", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(cfg)]` is experimental\n LL | #[doc(cfg(unix))]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/43781\n+   = note: see issue #43781 <https://github.com/rust-lang/rust/issues/43781> for more information\n    = help: add `#![feature(doc_cfg)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c5dc7d537fd887e0f87090ef165ab8b9a42a9242", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(keyword)]` is experimental\n LL | #[doc(keyword = \"match\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51315\n+   = note: see issue #51315 <https://github.com/rust-lang/rust/issues/51315> for more information\n    = help: add `#![feature(doc_keyword)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "80522b6eee526e07aac32b68c73bea6f6411fcd7", "filename": "src/test/ui/feature-gates/feature-gate-doc_masked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_masked.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(masked)]` is experimental\n LL | #[doc(masked)]\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44027\n+   = note: see issue #44027 <https://github.com/rust-lang/rust/issues/44027> for more information\n    = help: add `#![feature(doc_masked)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "010d74054a4120fa3b687afc2e8e9f21a0405164", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(spotlight)]` is experimental\n LL | #[doc(spotlight)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/45040\n+   = note: see issue #45040 <https://github.com/rust-lang/rust/issues/45040> for more information\n    = help: add `#![feature(doc_spotlight)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6d7f4844a993b85213890940540d25c3c09bb66d", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: exclusive range pattern syntax is experimental\n LL |         0 .. 3 => {}\n    |         ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "923fae400a91cfdbf7f6f006c1f810b7eda044cc", "filename": "src/test/ui/feature-gates/feature-gate-extern_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: extern types are experimental\n LL |     type T;\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/43467\n+   = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information\n    = help: add `#![feature(extern_types)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "bd2aefe90c1834151f6121952f9a8642f31998ed", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[doc(include)]` is experimental\n LL | #[doc(include=\"asdf.md\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44732\n+   = note: see issue #44732 <https://github.com/rust-lang/rust/issues/44732> for more information\n    = help: add `#![feature(external_doc)]` to the crate attributes to enable\n \n error[E0658]: `#[doc(include)]` is experimental\n@@ -13,7 +13,7 @@ error[E0658]: `#[doc(include)]` is experimental\n LL | #[doc(include=\"asdf.md\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44732\n+   = note: see issue #44732 <https://github.com/rust-lang/rust/issues/44732> for more information\n    = help: add `#![feature(external_doc)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "3585355ab77fc9ce46aa2e5748321305a0cdf9a6", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature\n LL |     #[ffi_returns_twice]\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/58314\n+   = note: see issue #58314 <https://github.com/rust-lang/rust/issues/58314> for more information\n    = help: add `#![feature(ffi_returns_twice)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1ae8d9128b1ff7470ccb9182d274b9c4b2cbdcdc", "filename": "src/test/ui/feature-gates/feature-gate-fundamental.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-fundamental.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[fundamental]` attribute is an experimental feature\n LL | #[fundamental]\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29635\n+   = note: see issue #29635 <https://github.com/rust-lang/rust/issues/29635> for more information\n    = help: add `#![feature(fundamental)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "dfea178a6372c851ae360340119630359806ad07", "filename": "src/test/ui/feature-gates/feature-gate-generators.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generators.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: yield syntax is experimental\n LL |     yield true;\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/43122\n+   = note: see issue #43122 <https://github.com/rust-lang/rust/issues/43122> for more information\n    = help: add `#![feature(generators)]` to the crate attributes to enable\n \n error[E0658]: yield syntax is experimental\n@@ -13,7 +13,7 @@ error[E0658]: yield syntax is experimental\n LL |     yield;\n    |     ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/43122\n+   = note: see issue #43122 <https://github.com/rust-lang/rust/issues/43122> for more information\n    = help: add `#![feature(generators)]` to the crate attributes to enable\n \n error[E0658]: yield syntax is experimental\n@@ -22,7 +22,7 @@ error[E0658]: yield syntax is experimental\n LL |     yield 0;\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/43122\n+   = note: see issue #43122 <https://github.com/rust-lang/rust/issues/43122> for more information\n    = help: add `#![feature(generators)]` to the crate attributes to enable\n \n error[E0627]: yield expression outside of generator literal"}, {"sha": "a0e06cb2b679530c8a88483c451b6e754cf5fa7c", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Pointer<T>: Deref<Target = T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n@@ -13,7 +13,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n@@ -22,7 +22,7 @@ error[E0658]: where clauses on associated types are unstable\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n@@ -31,7 +31,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n@@ -40,7 +40,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n@@ -49,7 +49,7 @@ error[E0658]: where clauses on associated types are unstable\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n@@ -58,7 +58,7 @@ error[E0658]: where clauses on associated types are unstable\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error: type-generic associated types are not yet implemented\n@@ -67,15 +67,15 @@ error: type-generic associated types are not yet implemented\n LL |     type Pointer<T>: Deref<Target = T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/feature-gate-generic_associated_types.rs:7:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e07fbf00d57c22ddb03fa994df2bad85e51bdb19", "filename": "src/test/ui/feature-gates/feature-gate-global_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'global_asm': `global_asm!` is not\n LL | global_asm!(\"\");\n    | ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35119\n+   = note: see issue #35119 <https://github.com/rust-lang/rust/issues/35119> for more information\n    = help: add `#![feature(global_asm)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ccac827076bc8464eb2c0366131f78a344810855", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'is_sorted': new API\n LL |     assert!([1, 2, 2, 9].iter().is_sorted());\n    |                                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53485\n+   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485> for more information\n    = help: add `#![feature(is_sorted)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'is_sorted': new API\n LL |     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53485\n+   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485> for more information\n    = help: add `#![feature(is_sorted)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API\n@@ -22,7 +22,7 @@ error[E0658]: use of unstable library feature 'is_sorted': new API\n LL |     assert!([1, 2, 2, 9].is_sorted());\n    |                          ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53485\n+   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485> for more information\n    = help: add `#![feature(is_sorted)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API\n@@ -31,7 +31,7 @@ error[E0658]: use of unstable library feature 'is_sorted': new API\n LL |     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n    |                                ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53485\n+   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485> for more information\n    = help: add `#![feature(is_sorted)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "4b43fdc593fa352a6ac212f0ad0a05087bdba82d", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: labels on blocks are unstable\n LL |     'a: {\n    |     ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/48594\n+   = note: see issue #48594 <https://github.com/rust-lang/rust/issues/48594> for more information\n    = help: add `#![feature(label_break_value)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "c75f762b908ffc2dcfdca305b51031e472112768", "filename": "src/test/ui/feature-gates/feature-gate-link_args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `link_args` attribute is experimental and not portable across\n LL | #[link_args = \"-l expected_use_case\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29596\n+   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n    = help: add `#![feature(link_args)]` to the crate attributes to enable\n \n error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n@@ -13,7 +13,7 @@ error[E0658]: the `link_args` attribute is experimental and not portable across\n LL | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29596\n+   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n    = help: add `#![feature(link_args)]` to the crate attributes to enable\n \n error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n@@ -22,7 +22,7 @@ error[E0658]: the `link_args` attribute is experimental and not portable across\n LL | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29596\n+   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n    = help: add `#![feature(link_args)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "10b151ffa75654cdcf0d74f3b79a70249439fd20", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: is unstable\n LL | #[link(name = \"foo\", cfg(foo))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37406\n+   = note: see issue #37406 <https://github.com/rust-lang/rust/issues/37406> for more information\n    = help: add `#![feature(link_cfg)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6bce5b823f3853e2651e99875c9337b2cb57e06c", "filename": "src/test/ui/feature-gates/feature-gate-link_llvm_intrinsics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: linking to LLVM intrinsics is experimental\n LL |     fn sqrt(x: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29602\n+   = note: see issue #29602 <https://github.com/rust-lang/rust/issues/29602> for more information\n    = help: add `#![feature(link_llvm_intrinsics)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3e5b79bfd417687e110bcc4dac046f347beb722e", "filename": "src/test/ui/feature-gates/feature-gate-linkage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `linkage` attribute is experimental and not portable across pl\n LL |     #[linkage = \"extern_weak\"] static foo: isize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29603\n+   = note: see issue #29603 <https://github.com/rust-lang/rust/issues/29603> for more information\n    = help: add `#![feature(linkage)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a7d5ea6b937585e7147a8aae9dea0ef86e144496", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: lint reasons are experimental\n LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n+   = note: see issue #54503 <https://github.com/rust-lang/rust/issues/54503> for more information\n    = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n \n error[E0658]: lint reasons are experimental\n@@ -13,7 +13,7 @@ error[E0658]: lint reasons are experimental\n LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n+   = note: see issue #54503 <https://github.com/rust-lang/rust/issues/54503> for more information\n    = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n \n error[E0658]: lint reasons are experimental\n@@ -22,7 +22,7 @@ error[E0658]: lint reasons are experimental\n LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54503\n+   = note: see issue #54503 <https://github.com/rust-lang/rust/issues/54503> for more information\n    = help: add `#![feature(lint_reasons)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "fdc1c8553476c20d9ef45b16df5d2cce34dc9aae", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not\n LL |     log_syntax!()\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(log_syntax)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6deb4a46cd53a49327c62a9018df112ebabc2421", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not\n LL |     println!(\"{:?}\", log_syntax!());\n    |                      ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(log_syntax)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "f0ef3b38c6209ce066d353fcdec051a937256b34", "filename": "src/test/ui/feature-gates/feature-gate-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-main.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: declaration of a non-standard `#[main]` function may change over t\n LL | fn foo() {}\n    | ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29634\n+   = note: see issue #29634 <https://github.com/rust-lang/rust/issues/29634> for more information\n    = help: add `#![feature(main)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "e3c3756fd21c902e81f9df4f5561d1c43b168bda", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[marker]` attribute is an experimental feature\n LL | #[marker] trait ExplicitMarker {}\n    | ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29864\n+   = note: see issue #29864 <https://github.com/rust-lang/rust/issues/29864> for more information\n    = help: add `#![feature(marker_trait_attr)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d47a76a50efb86f8fd22b40860a95819473d115c", "filename": "src/test/ui/feature-gates/feature-gate-may-dangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-may-dangle.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `may_dangle` has unstable semantics and may be removed in the futu\n LL | unsafe impl<#[may_dangle] A> Drop for Pt<A> {\n    |             ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/34761\n+   = note: see issue #34761 <https://github.com/rust-lang/rust/issues/34761> for more information\n    = help: add `#![feature(dropck_eyepatch)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7ab9d748b31f738093022874b7ac8ab57bdcbf91", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -22,7 +22,7 @@ error[E0658]: const fn is unstable\n LL |     const fn foo() -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0658]: const fn is unstable\n@@ -31,7 +31,7 @@ error[E0658]: const fn is unstable\n LL |     const fn bar() -> u32 { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "e24dde5429d51192071c9380c528f00e05176f5a", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[naked]` attribute is an experimental feature\n LL | #[naked]\n    | ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32408\n+   = note: see issue #32408 <https://github.com/rust-lang/rust/issues/32408> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n \n error[E0658]: the `#[naked]` attribute is an experimental feature\n@@ -13,7 +13,7 @@ error[E0658]: the `#[naked]` attribute is an experimental feature\n LL | #[naked]\n    | ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32408\n+   = note: see issue #32408 <https://github.com/rust-lang/rust/issues/32408> for more information\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "0a59cae9c8c46d2f4e0c3d96067af0ada1f32a32", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `!` type is experimental\n LL | type Ma = (u32, !, i32);\n    |                 ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = note: see issue #35121 <https://github.com/rust-lang/rust/issues/35121> for more information\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n error[E0658]: the `!` type is experimental\n@@ -13,7 +13,7 @@ error[E0658]: the `!` type is experimental\n LL | type Meeshka = Vec<!>;\n    |                    ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = note: see issue #35121 <https://github.com/rust-lang/rust/issues/35121> for more information\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n error[E0658]: the `!` type is experimental\n@@ -22,7 +22,7 @@ error[E0658]: the `!` type is experimental\n LL | type Mow = &'static fn(!) -> !;\n    |                        ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = note: see issue #35121 <https://github.com/rust-lang/rust/issues/35121> for more information\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n error[E0658]: the `!` type is experimental\n@@ -31,7 +31,7 @@ error[E0658]: the `!` type is experimental\n LL | type Skwoz = &'static mut !;\n    |                           ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = note: see issue #35121 <https://github.com/rust-lang/rust/issues/35121> for more information\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n error[E0658]: the `!` type is experimental\n@@ -40,7 +40,7 @@ error[E0658]: the `!` type is experimental\n LL |     type Wub = !;\n    |                ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n+   = note: see issue #35121 <https://github.com/rust-lang/rust/issues/35121> for more information\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors"}, {"sha": "e146d643bcbe309b246bffb4a4323fef6e3d6b0d", "filename": "src/test/ui/feature-gates/feature-gate-no-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_debug]` attribute was an experimental feature that has b\n LL | #[no_debug]\n    | ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29721\n+   = note: see issue #29721 <https://github.com/rust-lang/rust/issues/29721> for more information\n    = help: add `#![feature(no_debug)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8430a9ec6a7578d9e5e34ec5717653108c558a9b", "filename": "src/test/ui/feature-gates/feature-gate-no_core.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_core.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_core]` attribute is an experimental feature\n LL | #![no_core]\n    | ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29639\n+   = note: see issue #29639 <https://github.com/rust-lang/rust/issues/29639> for more information\n    = help: add `#![feature(no_core)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3993357006f4b5649d34e256ad07997394b3d337", "filename": "src/test/ui/feature-gates/feature-gate-no_sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[no_sanitize]` attribute is an experimental feature\n LL | #[no_sanitize(address)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/39699\n+   = note: see issue #39699 <https://github.com/rust-lang/rust/issues/39699> for more information\n    = help: add `#![feature(no_sanitize)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "e9392ace4ce258ee82473475d7b06a1276828994", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | extern crate core as b\u00e4z;\n    |                      ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -13,7 +13,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | use f\u00f6\u00f6::bar;\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -22,7 +22,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | mod f\u00f6\u00f6 {\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -31,7 +31,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | fn b\u00e4r(\n    |    ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -40,7 +40,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     b\u00e4z: isize\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -49,7 +49,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     let _\u00f6: isize;\n    |         ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -58,7 +58,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |         (_\u00e4, _) => {}\n    |          ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -67,7 +67,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | struct F\u00f6\u00f6 {\n    |        ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -76,7 +76,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     f\u00f6\u00f6: isize\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -85,7 +85,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL | enum B\u00e4r {\n    |      ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -94,7 +94,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     B\u00e4z {\n    |     ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -103,7 +103,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |         q\u00fcx: isize\n    |         ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -112,7 +112,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     fn q\u00fcx();\n    |        ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error: aborting due to 13 previous errors"}, {"sha": "d29c373a33c95f9bc92f38aa6fe8cd1284b0f16e", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: auto traits are experimental and possibly buggy\n LL | auto trait AutoDummyTrait {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/13231\n+   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n@@ -13,7 +13,7 @@ error[E0658]: negative trait bounds are not yet fully implemented; use marker ty\n LL | impl !AutoDummyTrait for DummyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/13231\n+   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "0847d77a85608c53579eb8e0f9746d54da22bce4", "filename": "src/test/ui/feature-gates/feature-gate-plugin_registrar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: compiler plugins are experimental and possibly buggy\n LL | pub fn registrar() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n+   = note: see issue #29597 <https://github.com/rust-lang/rust/issues/29597> for more information\n    = help: add `#![feature(plugin_registrar)]` to the crate attributes to enable\n \n error[E0658]: compiler plugins are deprecated\n@@ -13,7 +13,7 @@ error[E0658]: compiler plugins are deprecated\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n+   = note: see issue #29597 <https://github.com/rust-lang/rust/issues/29597> for more information\n    = help: add `#![feature(plugin_registrar)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675"}, {"sha": "8ca3845d28aa7f18994a4d84d3e5956dc249bf5e", "filename": "src/test/ui/feature-gates/feature-gate-register_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[register_attr]` attribute is an experimental feature\n LL | #![register_attr(attr)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/66080\n+   = note: see issue #66080 <https://github.com/rust-lang/rust/issues/66080> for more information\n    = help: add `#![feature(register_attr)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "9ffaaa8de7a06e5444b6deffca695d13d4a2bd4f", "filename": "src/test/ui/feature-gates/feature-gate-register_tool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[register_tool]` attribute is an experimental feature\n LL | #![register_tool(tool)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/66079\n+   = note: see issue #66079 <https://github.com/rust-lang/rust/issues/66079> for more information\n    = help: add `#![feature(register_tool)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "ae44b8020695e1fb635cb905fcc59cf7e4063d0f", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: SIMD types are experimental and possibly buggy\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n error[E0658]: SIMD types are experimental and possibly buggy\n@@ -13,7 +13,7 @@ error[E0658]: SIMD types are experimental and possibly buggy\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n error[E0566]: conflicting representation hints"}, {"sha": "3eb005acc33b801afa795f70095418f3df84f9c1", "filename": "src/test/ui/feature-gates/feature-gate-repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr128.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,7 @@ LL | |     A(u64)\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/56071\n+   = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n    = help: add `#![feature(repr128)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "082d897c01dc1c6f7555f55e939262f5be0e9c90", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit test\n LL | #[rustc_variance]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n@@ -13,7 +13,7 @@ error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests a\n LL | #[rustc_error]\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error[E0658]: the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable niche optimizations in libcore and will never be stable\n@@ -22,7 +22,7 @@ error[E0658]: the `#[rustc_nonnull_optimization_guaranteed]` attribute is just u\n LL | #[rustc_nonnull_optimization_guaranteed]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "58f8b4e7035134a89a11a2ba972b899dcdd31db9", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[rustc::unknown]\n    |   ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `rustc::unknown`\n@@ -19,7 +19,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[unknown::rustc]\n    |            ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `unknown::rustc`\n@@ -34,7 +34,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[rustc_unknown]\n    |   ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_unknown` in this scope\n@@ -49,7 +49,7 @@ error[E0658]: the `#[rustc_dummy]` attribute is just used for rustc unit tests a\n LL | #[rustc_dummy]\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to 7 previous errors"}, {"sha": "6e0e0b2703a34eecf6dd889c747c0e97219f0e0d", "filename": "src/test/ui/feature-gates/feature-gate-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: SIMD types are experimental and possibly buggy\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "eec9d1a29248bc2743256992e8e36ef3cd59cf26", "filename": "src/test/ui/feature-gates/feature-gate-start.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[start]` functions are experimental and their signature may chan\n LL | fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29633\n+   = note: see issue #29633 <https://github.com/rust-lang/rust/issues/29633> for more information\n    = help: add `#![feature(start)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "773ad8ff21760cf6e6e2ecf84aa88b43615f1ea7", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: kind=\"static-nobundle\" is unstable\n LL | #[link(name=\"foo\", kind=\"static-nobundle\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37403\n+   = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "57ffaed78f5e5b9dcb65a40bfc476eeccf5d10eb", "filename": "src/test/ui/feature-gates/feature-gate-stmt_expr_attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-stmt_expr_attributes.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes on expressions are experimental\n LL | const X: i32 = #[allow(dead_code)] 8;\n    |                ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6352e908708afae514a47aef4571528bf1b78b50", "filename": "src/test/ui/feature-gates/feature-gate-thread_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-thread_local.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[thread_local]` is an experimental feature, and does not current\n LL | #[thread_local]\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29594\n+   = note: see issue #29594 <https://github.com/rust-lang/rust/issues/29594> for more information\n    = help: add `#![feature(thread_local)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3978d4111bb05fd52d9d52372d5cd592ae532849", "filename": "src/test/ui/feature-gates/feature-gate-trace_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n LL |     trace_macros!(true);\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8ceab501617eec6539ad1ac93d31acea7b05fde7", "filename": "src/test/ui/feature-gates/feature-gate-track_caller.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[track_caller]` attribute is an experimental feature\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/47809\n+   = note: see issue #47809 <https://github.com/rust-lang/rust/issues/47809> for more information\n    = help: add `#![feature(track_caller)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "41cd6dbd8bc0ebc9bb287ae8b81e12dd8980144d", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: trait aliases are experimental\n LL | trait Foo = Default;\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/41517\n+   = note: see issue #41517 <https://github.com/rust-lang/rust/issues/41517> for more information\n    = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "65c8fe05229059af32bcbc86dc765f20f25a8e1b", "filename": "src/test/ui/feature-gates/feature-gate-transparent_unions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: transparent unions are unstable\n LL | union OkButUnstableUnion {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n+   = note: see issue #60405 <https://github.com/rust-lang/rust/issues/60405> for more information\n    = help: add `#![feature(transparent_unions)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "022409f95566b04527093a77b560720d3c60b5d6", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -8,7 +8,7 @@ LL | |         x\n LL | |     };\n    | |_____^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/31436\n+   = note: see issue #31436 <https://github.com/rust-lang/rust/issues/31436> for more information\n    = help: add `#![feature(try_blocks)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "4da9a23a1bd5ff02ce139806be8b149d1abfb34e", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'try_reserve': new API\n LL |     v.try_reserve(10);\n    |       ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/48043\n+   = note: see issue #48043 <https://github.com/rust-lang/rust/issues/48043> for more information\n    = help: add `#![feature(try_reserve)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "55cd2984ab665c3f6870c9fc05af30bdbbb4c773", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type Foo = impl Debug;\n    |            ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -13,7 +13,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Baa = impl Debug;\n    |                ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: associated type defaults are unstable\n@@ -22,7 +22,7 @@ error[E0658]: associated type defaults are unstable\n LL |     type Assoc = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29661\n+   = note: see issue #29661 <https://github.com/rust-lang/rust/issues/29661> for more information\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -31,7 +31,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -40,7 +40,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                        ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -49,7 +49,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -58,7 +58,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -67,7 +67,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                                      ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -76,7 +76,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -85,7 +85,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                  ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -94,7 +94,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -103,7 +103,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                                   ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "615d5b9a1e089f41b3ced5c8f9c82800bd69139a", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: type ascription is experimental\n LL |     let a = 10: u8;\n    |             ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n    = help: add `#![feature(type_ascription)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "892020332d7020fe63e93c82281c6ef03ec410b0", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n@@ -13,7 +13,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n@@ -22,7 +22,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n@@ -31,7 +31,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n@@ -40,7 +40,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | impl Fn<()> for Foo {\n    |      ^^^^^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n@@ -55,7 +55,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | impl FnMut<()> for Bar {\n    |      ^^^^^^^^^ help: use parenthetical notation instead: `FnMut() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n@@ -64,7 +64,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | impl FnOnce<()> for Baz {\n    |      ^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error: aborting due to 8 previous errors"}, {"sha": "c61382c64f5c0313c4a97e36c085a8bf8c12d207", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-method-calls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-method-calls.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     f.call(());\n    |       ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'fn_traits'\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     f.call_mut(());\n    |       ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'fn_traits'\n@@ -22,7 +22,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     f.call_once(());\n    |       ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "50eaeecde3d293b34503e88d91d4b21c0ce5ac6d", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-ufcs-calls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     Fn::call(&f, ());\n    |     ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'fn_traits'\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     FnMut::call_mut(&mut f, ());\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'fn_traits'\n@@ -22,7 +22,7 @@ error[E0658]: use of unstable library feature 'fn_traits'\n LL |     FnOnce::call_once(f, ());\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(fn_traits)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "feda2fe49f95cf837e532c7135ded742a2fea18e", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: rust-call ABI is subject to change\n LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n    |            ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n@@ -13,7 +13,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | impl FnOnce<(u32, u32)> for Test {\n    |      ^^^^^^^^^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce(u32, u32) -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "bea6cee0a89e875f7e862aa0ff327ed417ce7f41", "filename": "src/test/ui/feature-gates/feature-gate-unsized_tuple_coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: unsized tuple coercion is not stable enough for use and is subject\n LL |     let _ : &(dyn Send,) = &((),);\n    |                            ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/42877\n+   = note: see issue #42877 <https://github.com/rust-lang/rust/issues/42877> for more information\n    = help: add `#![feature(unsized_tuple_coercion)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "3a123ea1c939882aa2bc1536ce65e7840769b443", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,7 @@ LL | |     a: String,\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55149\n+   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0658]: unions with non-`Copy` fields are unstable\n@@ -17,7 +17,7 @@ LL | |     a: T,\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55149\n+   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0658]: unions with `Drop` implementations are unstable\n@@ -28,7 +28,7 @@ LL | |     a: u8,\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55149\n+   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0740]: unions may not contain fields that need dropping"}, {"sha": "8e7895555c7a3ba9b8808eb98b29b54881cf78fc", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[unwind]` attribute is an experimental feature\n LL |     #[unwind(allowed)]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/58760\n+   = note: see issue #58760 <https://github.com/rust-lang/rust/issues/58760> for more information\n    = help: add `#![feature(unwind_attributes)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "fc8064d8225bf5db7b665be067d8c1f8678fb56e", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -11,7 +11,8 @@ LL |     want_cyclic_generator_return(|| {\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n-           see https://github.com/rust-lang/rust/issues/46062 for more details\n+           see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n+           for more information\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n@@ -26,7 +27,8 @@ LL |     want_cyclic_generator_yield(|| {\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n-           see https://github.com/rust-lang/rust/issues/46062 for more details\n+           see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n+           for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb06d5e49a3916a2483989b7f646042eb0fde91a", "filename": "src/test/ui/generic-associated-types/collections.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -5,15 +5,15 @@ LL | /     type Sibling<U>: Collection<U> =\n LL | |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n    | |_________________________________________________________________________^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/collections.rs:25:5\n    |\n LL |     type Member<T>: Collection<T, Family = Self>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f3da27775adcf18de435375bb9e26c7ebc5f6ec0", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Item<T>;\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n@@ -13,7 +13,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Item<T> = T;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error: type-generic associated types are not yet implemented\n@@ -22,7 +22,7 @@ error: type-generic associated types are not yet implemented\n LL |     type Item<T>;\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ec36886f7b51fc7825ef80d5a4a344cc65dbae4c", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Item<'b> = &'b Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0195]: lifetime parameters or bounds on type `Item` do not match the trait declaration"}, {"sha": "fb29b377a16e3bd77c6ab73887dfb5736daec953", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,23 +4,23 @@ error: type-generic associated types are not yet implemented\n LL |     type Assoc2<T> where T: Display;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/generic-associated-types-where.rs:13:5\n    |\n LL |     type Assoc3<T>;\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/generic-associated-types-where.rs:15:5\n    |\n LL |     type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c9c1a4753b0dd4131b00addf78f7d70a10d1a057", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error: type-generic associated types are not yet implemented\n LL |     type Assoc3<T>;\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to previous error\n "}, {"sha": "8b08c71759bb998c630999935fd8e1b0059b3bfe", "filename": "src/test/ui/generic-associated-types/issue-67424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: generic associated types are unstable\n LL |     type Type1<B>: Trait1<A=B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error: type-generic associated types are not yet implemented\n@@ -13,7 +13,7 @@ error: type-generic associated types are not yet implemented\n LL |     type Type1<B>: Trait1<A=B>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "028ab72f48812cdb66c6f52bf1e5524b7120895b", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,31 +4,31 @@ error: type-generic associated types are not yet implemented\n LL |     type D<T>;\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/parameter_number_and_kind.rs:11:5\n    |\n LL |     type E<'a, T>;\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/parameter_number_and_kind.rs:14:5\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/parameter_number_and_kind.rs:19:5\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n   --> $DIR/parameter_number_and_kind.rs:16:35"}, {"sha": "83fe992fcb571dcff6fa1af506545a6614c22b9d", "filename": "src/test/ui/generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error: type-generic associated types are not yet implemented\n LL |     type Pointer<T>: Deref<Target = T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to previous error\n "}, {"sha": "3ae1e1a40c873f6bf83b501f2e45c2f352206eb4", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -20,15 +20,15 @@ error: type-generic associated types are not yet implemented\n LL |     type Bar<T>;\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: type-generic associated types are not yet implemented\n   --> $DIR/shadowing.rs:25:5\n    |\n LL |     type Bar<U>; // OK\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error: aborting due to 4 previous errors\n "}, {"sha": "62d54463a433ce95f11aa28fa88182d57aca57e8", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -26,7 +26,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let ..=5 = 0 {}\n    |            ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n@@ -35,7 +35,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let ...5 = 0 {}\n    |            ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n@@ -44,7 +44,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let ..5 = 0 {}\n    |            ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n@@ -53,7 +53,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let 5.. = 0 {}\n    |            ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n@@ -62,7 +62,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let 5..= = 0 {}\n    |            ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n@@ -71,7 +71,7 @@ error[E0658]: half-open range patterns are unstable\n LL |     if let 5... = 0 {}\n    |            ^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error: aborting due to 9 previous errors"}, {"sha": "5d9ae6a03018f18789b1efc0f3fc5ed50202ebca", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -22,7 +22,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -31,7 +31,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n@@ -40,7 +40,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "714c04add5f797a91bdc008bd888ce2588b1b64b", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL | exported!();\n LL |                 () => ( struct \u0411; )\n    |                                ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -20,7 +20,7 @@ LL |     panic!();\n LL |         () => ( struct \u0413; )\n    |                        ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -33,7 +33,7 @@ LL | include!();\n LL |         () => ( struct \u0414; )\n    |                        ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a1c4cd851cb94271534d8bda68444da523d62632", "filename": "src/test/ui/inference/inference_unstable_forced.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_forced.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'ipu_flatten'\n LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |                    ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/99999\n+   = note: see issue #99999 <https://github.com/rust-lang/rust/issues/99999> for more information\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "b2d97b981ba5dce9d3d6714f914641122bc3ea51", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: loops and conditional expressions are not stable in const fn\n LL |     if true { 4 } else { 5 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "68e86ea21bd963435501cf3df97b5083b236f530", "filename": "src/test/ui/issues/issue-17458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17458.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: casting pointers to integers in statics is unstable\n LL | static X: usize = unsafe { core::ptr::null::<usize>() as usize };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "688efcdd022eb57bc3a89e541b51b6accb99245b", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL | const C1: &'static mut [usize] = &mut [];\n    |                                  ^^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0013]: constants cannot refer to statics\n@@ -29,7 +29,7 @@ error[E0658]: references in constants may only refer to immutable values\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                         ^^^^^^ constants require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors"}, {"sha": "52df558bfce5e7c85628da8d428064524c581144", "filename": "src/test/ui/issues/issue-18294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18294.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |     const Y: usize = unsafe { &X as *const u32 as usize };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "7a0b344a5aa22b79d9b8be39e11919633e7deeea", "filename": "src/test/ui/issues/issue-20313.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20313.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: linking to LLVM intrinsics is experimental\n LL |     fn sqrt(x: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29602\n+   = note: see issue #29602 <https://github.com/rust-lang/rust/issues/29602> for more information\n    = help: add `#![feature(link_llvm_intrinsics)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "1be26949b25cb3f91294b69879d62c1d300fe805", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -94,7 +94,7 @@ LL |     println!(\"{}\", a: &mut 4);\n    |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 9 previous errors\n "}, {"sha": "f9403cd077dc367ebd22e12b4658c034a302bf37", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0107]: wrong number of type arguments: expected 1, found 0"}, {"sha": "325c28c15e2723566e4829c061863f5dba32fd1e", "filename": "src/test/ui/issues/issue-25439.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-25439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-25439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25439.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,8 @@ LL |     fix(|_, x| x);\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n-           see https://github.com/rust-lang/rust/issues/46062 for more details\n+           see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n+           for more information\n \n error: aborting due to previous error\n "}, {"sha": "3a5a6b509ba9dd05c6013503ade00cb794211458", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: comparing raw pointers inside constant\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53020\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n    = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "48e0880d5eda2750c9b26f53bdb6a78dd1df2bf5", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: panicking in statics is unstable\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c8bad3b3bb502bbda95299b31c68c6e06dea2d10", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     Test::Drill(field: 42);\n    |                      tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "35da6258016178a8e153a647a109346da42f80b2", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: function pointers in const fn are unstable\n LL |     let x = || t;\n    |         ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "944d544098ab4e07c081bdeefcc1b6f732b32bd4", "filename": "src/test/ui/issues/issue-37887.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37887.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0658]: use of unstable library feature 'rustc_private': this crate is bei\n LL |     extern crate libc;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n+   = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "701c32d6236b643ec173c7f33ef8fd0b7b0f470a", "filename": "src/test/ui/issues/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -19,7 +19,7 @@ LL |     foo!(true);\n    |          ^^^^ expected type\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "771e368a35d930a83d1da694d8bb10da01182f63", "filename": "src/test/ui/issues/issue-46604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: references in statics may only refer to immutable values\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/57349\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item"}, {"sha": "696030850436f744921399b133df0da6e52538dc", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `while` is not allowed in a `const`\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n "}, {"sha": "0108a37e8f5c2782780874c1d47a8f9a7bdf2dec", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: casting pointers to integers in constants is unstable\n LL |     let _ = [0; (&0 as *const i32) as usize];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0080]: evaluation of constant value failed"}, {"sha": "0d7980d60d62cc18242bdbc9e45400bdda0853fa", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -18,7 +18,7 @@ LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "30d4d2b7bbabf2daae98035459e729ec70eef90e", "filename": "src/test/ui/linkage-attr/linkage4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage4.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `linkage` attribute is experimental and not portable across pl\n LL | #[linkage = \"external\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29603\n+   = note: see issue #29603 <https://github.com/rust-lang/rust/issues/29603> for more information\n    = help: add `#![feature(linkage)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5f386ea045bf05a754a48c7abc0204110bb836da", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -26,7 +26,7 @@ note: the lint level is defined here\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/inline-trait-and-foreign-items.rs:11:5\n@@ -43,7 +43,7 @@ LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/inline-trait-and-foreign-items.rs:22:5"}, {"sha": "046d0c5fa19ff5226724b34bde3f415773e4e648", "filename": "src/test/ui/never_type/defaulted-never-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n-   = note: the trait is implemented for `()`. Possibly this error has been caused by changes to Rust's type-inference algorithm (see: https://github.com/rust-lang/rust/issues/48950 for more info). Consider whether you meant to use the type `()` here instead.\n+   = note: the trait is implemented for `()`. Possibly this error has been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information). Consider whether you meant to use the type `()` here instead.\n \n error: aborting due to previous error\n "}, {"sha": "71baf92b2d4097aa2c837efa274e1c13aead4437", "filename": "src/test/ui/on-unimplemented/feature-gate-on-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: this is an internal attribute that will never be stable\n LL | #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "38233a944cfacf353f56fabfe09fea214ff3f877", "filename": "src/test/ui/or-patterns/feature-gate-const-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-const-fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: or-pattern is not allowed in a `const fn`\n LL | const fn foo((Ok(a) | Err(a)): Result<i32, i32>) {\n    |               ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: or-pattern is not allowed in a `const fn`\n@@ -13,7 +13,7 @@ error[E0658]: or-pattern is not allowed in a `const fn`\n LL |     let Ok(y) | Err(y) = x;\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: or-pattern is not allowed in a `const`\n@@ -22,7 +22,7 @@ error[E0658]: or-pattern is not allowed in a `const`\n LL |     let Ok(y) | Err(y) = x;\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: or-pattern is not allowed in a `static`\n@@ -31,7 +31,7 @@ error[E0658]: or-pattern is not allowed in a `static`\n LL |     let Ok(y) | Err(y) = x;\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: or-pattern is not allowed in a `static mut`\n@@ -40,7 +40,7 @@ error[E0658]: or-pattern is not allowed in a `static mut`\n LL |     let Ok(y) | Err(y) = x;\n    |         ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: or-pattern is not allowed in a `const`\n@@ -49,7 +49,7 @@ error[E0658]: or-pattern is not allowed in a `const`\n LL |         let Ok(y) | Err(y) = x;\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type"}, {"sha": "abcee435530200f16ca28efa49e77381b9920106", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     for | A in 0 {}\n    |         ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "499f60dd545ff723ec8e4b9cb28ef1c63a72fd5e", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let | A;\n    |         ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a9e43a4575da09d7c6f97d9098d284161a96c99e", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |         Some(0 | 1 | 2) => {}\n    |              ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -13,7 +13,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let | A | B;\n    |           ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -22,7 +22,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let A | B;\n    |         ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -31,7 +31,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     for | A | B in 0 {}\n    |           ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -40,7 +40,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     for A | B in 0 {}\n    |         ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -49,7 +49,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     fn fun((A | B): _) {}\n    |             ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -58,7 +58,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let _ = |(A | B): u8| ();\n    |               ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -67,7 +67,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let (A | B);\n    |          ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -76,7 +76,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let (A | B,);\n    |          ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -85,7 +85,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let A(B | C);\n    |           ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -94,7 +94,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let E::V(B | C);\n    |              ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -103,7 +103,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let S { f1: B | C, f2 };\n    |                 ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -112,7 +112,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let E::V { f1: B | C, f2 };\n    |                    ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -121,7 +121,7 @@ error[E0658]: or-patterns syntax is experimental\n LL |     let [A | B];\n    |          ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -130,7 +130,7 @@ error[E0658]: or-patterns syntax is experimental\n LL | accept_pat!((p | q));\n    |              ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -139,7 +139,7 @@ error[E0658]: or-patterns syntax is experimental\n LL | accept_pat!((p | q,));\n    |              ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -148,7 +148,7 @@ error[E0658]: or-patterns syntax is experimental\n LL | accept_pat!(TS(p | q));\n    |                ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -157,7 +157,7 @@ error[E0658]: or-patterns syntax is experimental\n LL | accept_pat!(NS { f: p | q });\n    |                     ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n@@ -166,7 +166,7 @@ error[E0658]: or-patterns syntax is experimental\n LL | accept_pat!([p | q]);\n    |              ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error: aborting due to 19 previous errors"}, {"sha": "e067ccaebcf643d81947db5e9dd4582a48aa4e50", "filename": "src/test/ui/panic-runtime/needs-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneeds-gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[panic_runtime]` attribute is an experimental feature\n LL | #![panic_runtime]\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32837\n+   = note: see issue #32837 <https://github.com/rust-lang/rust/issues/32837> for more information\n    = help: add `#![feature(panic_runtime)]` to the crate attributes to enable\n \n error[E0658]: the `#[needs_panic_runtime]` attribute is an experimental feature\n@@ -13,7 +13,7 @@ error[E0658]: the `#[needs_panic_runtime]` attribute is an experimental feature\n LL | #![needs_panic_runtime]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/32837\n+   = note: see issue #32837 <https://github.com/rust-lang/rust/issues/32837> for more information\n    = help: add `#![feature(needs_panic_runtime)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "265d6e14866149a674cc7a6cb9818b7628463709", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     B(usize)\n    |     -------- tuple variant defined here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n    = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "0272326c7bc4fd033c896da823972846f4c9d2ef", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}, {"sha": "79f044a0675b7b075f3756eaf7d51be8fbdce74f", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -17,7 +17,7 @@ LL |     Other(usize),\n LL |     Other2(usize, usize),\n    |     -------------------- tuple variant defined here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n    = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "0a325ae9070e40daabce3c1bb1c325ef33d383fe", "filename": "src/test/ui/parser/underscore-suffix-for-string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -5,5 +5,5 @@ LL |     let _ = \"Foo\"_;\n    |                  ^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42326 <https://github.com/rust-lang/rust/issues/42326>\n+   = note: see issue #42326 <https://github.com/rust-lang/rust/issues/42326> for more information\n "}, {"sha": "b976ef4861e3729aa49ed7d5ba4928ee7881764d", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: pattern bindings after an `@` are unstable\n LL |     let x @ y = 0;\n    |             ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/65490\n+   = note: see issue #65490 <https://github.com/rust-lang/rust/issues/65490> for more information\n    = help: add `#![feature(bindings_after_at)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "eb5391a95de8e20e3095e923289ce27fe74cb802", "filename": "src/test/ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,7 @@ LL |         Some((y, ref z)) => {}\n    |               |\n    |               by-move pattern here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n    = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n \n error[E0658]: binding by-move and by-ref in the same pattern is unstable\n@@ -17,7 +17,7 @@ LL |     let (ref a, b) = tup.clone();\n    |          |\n    |          by-ref pattern here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n    = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n \n error[E0658]: binding by-move and by-ref in the same pattern is unstable\n@@ -28,7 +28,7 @@ LL |     let (a, mut b) = &tup;\n    |          |\n    |          by-ref pattern here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n    = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n \n error[E0658]: binding by-move and by-ref in the same pattern is unstable\n@@ -39,7 +39,7 @@ LL |     let (mut a, b) = &mut tup;\n    |          |\n    |          by-move pattern here\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/68354\n+   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n    = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n \n error[E0507]: cannot move out of a shared reference"}, {"sha": "0d6f247cf835975a251ac665f2d8383f5d62cc7a", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     #[expect_print_expr]\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -13,7 +13,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "f0ab107e151787383dde3708ec24093ce337dca6", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ error[E0658]: non-inline modules in proc macro input are unstable\n LL | mod module;\n    | ^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: non-inline modules in proc macro input are unstable\n@@ -19,7 +19,7 @@ error[E0658]: non-inline modules in proc macro input are unstable\n LL |     mod inner;\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: non-inline modules in proc macro input are unstable\n@@ -28,7 +28,7 @@ error[E0658]: non-inline modules in proc macro input are unstable\n LL |         mod inner;\n    |         ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: non-inline modules in proc macro input are unstable\n@@ -37,7 +37,7 @@ error[E0658]: non-inline modules in proc macro input are unstable\n LL |     mod inner;\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0412]: cannot find type `Y` in this scope"}, {"sha": "ff2e3af3777a15c854e2f519afa0c3b607216620", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a94274de9c134d884ab4662180b97c8ede23a570", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: non-builtin inner attributes are unstable\n LL |     #![empty_attr]\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n+   = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n error[E0658]: non-builtin inner attributes are unstable\n@@ -13,7 +13,7 @@ error[E0658]: non-builtin inner attributes are unstable\n LL |     #![empty_attr]\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n+   = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n error: key-value macro attributes are not supported\n@@ -28,7 +28,7 @@ error[E0658]: custom attributes cannot be applied to statements\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n@@ -37,7 +37,7 @@ error[E0658]: custom attributes cannot be applied to statements\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n@@ -46,7 +46,7 @@ error[E0658]: custom attributes cannot be applied to statements\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n@@ -55,7 +55,7 @@ error[E0658]: custom attributes cannot be applied to expressions\n LL |     let _x = #[identity_attr] 2;\n    |              ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n@@ -64,7 +64,7 @@ error[E0658]: custom attributes cannot be applied to expressions\n LL |     let _x = [#[identity_attr] 2];\n    |               ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n@@ -73,7 +73,7 @@ error[E0658]: custom attributes cannot be applied to expressions\n LL |     let _x = #[identity_attr] println!();\n    |              ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to patterns\n@@ -82,7 +82,7 @@ error[E0658]: procedural macros cannot be expanded to patterns\n LL |     if let identity!(Some(_x)) = Some(3) {}\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n@@ -91,7 +91,7 @@ error[E0658]: procedural macros cannot be expanded to statements\n LL |     empty!(struct S;);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n@@ -100,7 +100,7 @@ error[E0658]: procedural macros cannot be expanded to statements\n LL |     empty!(let _x = 3;);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n@@ -109,7 +109,7 @@ error[E0658]: procedural macros cannot be expanded to expressions\n LL |     let _x = identity!(3);\n    |              ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n@@ -118,7 +118,7 @@ error[E0658]: procedural macros cannot be expanded to expressions\n LL |     let _x = [empty!(3)];\n    |               ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = note: see issue #54727 <https://github.com/rust-lang/rust/issues/54727> for more information\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error: aborting due to 14 previous errors"}, {"sha": "1e5fd84ff71197bc725ebe7388099e40eb00d2e4", "filename": "src/test/ui/raw-ref-op/feature-raw-ref-op.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Ffeature-raw-ref-op.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: raw address of syntax is experimental\n LL |     &raw const a;\n    |     ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error[E0658]: raw address of syntax is experimental\n@@ -13,7 +13,7 @@ error[E0658]: raw address of syntax is experimental\n LL |     &raw mut a;\n    |     ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error[E0658]: raw address of syntax is experimental\n@@ -22,7 +22,7 @@ error[E0658]: raw address of syntax is experimental\n LL |     let x = &raw const y;\n    |             ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error[E0658]: raw address of syntax is experimental\n@@ -31,7 +31,7 @@ error[E0658]: raw address of syntax is experimental\n LL |     let x = &raw mut y;\n    |             ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error[E0658]: raw address of syntax is experimental\n@@ -40,7 +40,7 @@ error[E0658]: raw address of syntax is experimental\n LL | is_expr!(&raw const a);\n    |          ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error[E0658]: raw address of syntax is experimental\n@@ -49,7 +49,7 @@ error[E0658]: raw address of syntax is experimental\n LL | is_expr!(&raw mut a);\n    |          ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/64490\n+   = note: see issue #64490 <https://github.com/rust-lang/rust/issues/64490> for more information\n    = help: add `#![feature(raw_ref_op)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors"}, {"sha": "2870cb57e9cafeed65af5ec0a0107a87ebe53935", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot determine resolution for the macro `foo`"}, {"sha": "c475c7de4381baa6b6ede193206c8993824de7da", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |     [(); return match 0 { n => n }];\n    |                 ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -13,7 +13,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |     [(); return match 0 { 0 => 0 }];\n    |                 ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -22,7 +22,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0572]: return statement outside of function body"}, {"sha": "084f070989b6c5b72060130abe55801087c2dc9f", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -519,7 +519,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -528,7 +528,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `match` is not allowed in a `const`\n@@ -537,7 +537,7 @@ error[E0658]: `match` is not allowed in a `const`\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0308]: mismatched types"}, {"sha": "178e86272877d2bf0ce016d595d9f6ce732ef973", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -13,7 +13,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -22,7 +22,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -31,7 +31,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -40,7 +40,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -49,7 +49,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -58,7 +58,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -67,7 +67,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -76,7 +76,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -85,7 +85,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -94,7 +94,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                     ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -103,7 +103,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -112,7 +112,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -121,7 +121,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -130,7 +130,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -139,7 +139,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -148,7 +148,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -157,7 +157,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -166,7 +166,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -175,7 +175,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -184,7 +184,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -193,7 +193,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -202,7 +202,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -211,7 +211,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |           ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -220,7 +220,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -229,7 +229,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -238,7 +238,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -247,7 +247,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -256,7 +256,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -265,7 +265,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     #[cfg(FALSE)] (let 0 = 1);\n    |                    ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -274,7 +274,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     noop_expr!((let 0 = 1));\n    |                 ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -283,7 +283,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n@@ -292,7 +292,7 @@ error[E0658]: `let` expressions in this position are experimental\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53667\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error: `let` expressions are not supported here"}, {"sha": "dbee5f316b0a9559b13f3eb309744f89d184f013", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[link_ordinal]` attribute is an experimental feature\n LL |     #[link_ordinal(42)]\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n    = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a69f67795418d0f6cd4eda5ef9f86a6e77a43b57", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: kind=\"raw-dylib\" is unstable\n LL | #[link(name=\"foo\", kind=\"raw-dylib\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/58713\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n    = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "a1e1c3249af3670f302a20e38fad77a23c34261a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `?const` on trait bounds is experimental\n LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n    |                             ^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67794\n+   = note: see issue #67794 <https://github.com/rust-lang/rust/issues/67794> for more information\n    = help: add `#![feature(const_trait_bound_opt_out)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "6e1cdde08439617af08ec3716b87745337064e58", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: const trait impls are experimental\n LL | impl const T for S {}\n    |      ^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67792\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: const trait impls are not yet implemented"}, {"sha": "bd294047919f132e8d1332e942e71b9baaa24332", "filename": "src/test/ui/rfc1445/feature-gate.no_gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.no_gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'structural_match'\n LL | impl std::marker::StructuralPartialEq for Foo { }\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/31434\n+   = note: see issue #31434 <https://github.com/rust-lang/rust/issues/31434> for more information\n    = help: add `#![feature(structural_match)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'structural_match'\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'structural_match'\n LL | impl std::marker::StructuralEq for Foo { }\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/31434\n+   = note: see issue #31434 <https://github.com/rust-lang/rust/issues/31434> for more information\n    = help: add `#![feature(structural_match)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "541e49543221e41a17cb7845cf0a892ce10817f8", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `Wrap<&Struct, Struct>` cannot be used as the type of `self` witho\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                       ^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n "}, {"sha": "c8b8f346b9879859c23da163a801976cd4919295", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: SIMD types are experimental and possibly buggy\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n+   = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "79b12590fc53833edca03650fc51cfde97ee2f7d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: non-builtin inner attributes are unstable\n LL |     #![foo]\n    |     ^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n+   = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "64e14f5800f25380c806cd0870e09069484d7a96", "filename": "src/test/ui/specialization/defaultimpl/specialization-feature-gate-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-feature-gate-default.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,7 @@ LL | |     fn foo(&self) {}\n LL | | }\n    | |_^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/31844\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "42dbb200c247ed46bd481c9cfc6fbd2bfc3013aa", "filename": "src/test/ui/specialization/specialization-feature-gate-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-default.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: specialization is unstable\n LL |     default fn foo(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/31844\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "df4aec7e5c801467826dbb9116ac5d4990d0ef58", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'unstable_test_feature'\n LL |     unstable();\n    |     ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_test_feature': message\n@@ -13,7 +13,7 @@ error[E0658]: use of unstable library feature 'unstable_test_feature': message\n LL |     unstable_msg();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/2\n+   = note: see issue #2 <https://github.com/rust-lang/rust/issues/2> for more information\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "dc06521fe72a3f18947c48b3dbf836742db3bb4d", "filename": "src/test/ui/stmt_expr_attrs_no_feature.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     #[rustfmt::skip]\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -13,7 +13,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     fn y(a: [u8; #[rustc_dummy] 5]);\n    |                  ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -22,7 +22,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     const Y: u8 = #[rustc_dummy] 5;\n    |                   ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -31,7 +31,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     const Y: [u8; #[rustc_dummy] 5];\n    |                   ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -40,7 +40,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     field2: [u8; #[rustc_dummy] 5]\n    |                  ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -49,7 +49,7 @@ error[E0658]: attributes on expressions are experimental\n LL |     [u8; #[rustc_dummy] 5]\n    |          ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -58,7 +58,7 @@ error[E0658]: attributes on expressions are experimental\n LL |         [u8; #[rustc_dummy] 5]\n    |              ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -67,7 +67,7 @@ error[E0658]: attributes on expressions are experimental\n LL |         field2: [u8; #[rustc_dummy] 5]\n    |                      ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n@@ -76,7 +76,7 @@ error[E0658]: attributes on expressions are experimental\n LL |         6 => #[rustc_dummy] (),\n    |              ^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error: aborting due to 9 previous errors"}, {"sha": "10a119a628c704e19a8c51a6b7de96b449945051", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: attributes starting with `rustc` are reserved for use by the `rust\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_err` in this scope"}, {"sha": "4f75e2b8380d98f0a3c50d6577b97c8e5d8bcb3b", "filename": "src/test/ui/suggestions/missing-assoc-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: associated type bounds are unstable\n LL |     fn bat<T: TraitB<Item: Copy>>(_: T) -> Self;\n    |                      ^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0046]: not all trait items implemented, missing: `foo`, `bar`, `baz`, `bat`"}, {"sha": "998129ebd1d400d12e12af6ec8c701b10619a2b0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     Box:new(\"foo\".to_string())\n    |        help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "0dd1494414feef53575e31ed891e95312b617ae7", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n    |                                    help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "5b40e16a5143655184d65441e32395cb9f610e1a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     let _ = Option:Some(\"\");\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "ed76377278b8270220c6986ae82be3d16c367670", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: negative trait bounds are not yet fully implemented; use marker ty\n LL | impl !Send for TestType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/13231\n+   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n    = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "848538a4e92fdaf98bd35a922445bbfca554c738", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the target feature `avx512bw` is currently unstable\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44839\n+   = note: see issue #44839 <https://github.com/rust-lang/rust/issues/44839> for more information\n    = help: add `#![feature(avx512_target_feature)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "d12834084e7140fea0204913b644870c2731988b", "filename": "src/test/ui/tool-attributes/diagnostic_item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: diagnostic items compiler internal support for linting\n LL | #[rustc_diagnostic_item = \"foomp\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = note: see issue #29642 <https://github.com/rust-lang/rust/issues/29642> for more information\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "36d7dfdf8f84f2e8ef3d9a4cbf60c658a3d8a432", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n LL |     trace_macros!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n \n error: trace_macros! accepts only `true` or `false`\n@@ -19,7 +19,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n LL |     trace_macros!(true);\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n@@ -28,7 +28,7 @@ error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is\n LL |     trace_macros!(false);\n    |     ^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n@@ -40,7 +40,7 @@ LL |         ($x: ident) => { trace_macros!($x) }\n LL |     expando!(true);\n    |     --------------- in this macro invocation\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n+   = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2796c77baa1c42f1c4f20dbce94b669bbbe1f3c0", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `impl Trait` in type aliases is unstable\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied"}, {"sha": "f4c9240ab5372dafe491f9a2d6b6c0d9de52a36f", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -10,7 +10,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7127f67cd7dde71c3f7d7adcb34ee67b1566892f", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "7130767b6c6f3ee9ff7a81524660e8981d4adc1a", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     let u: usize = std::mem:size_of::<u32>();\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "521ebcdf1929c519b72d7ccbe1b48ebbd228e864", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -7,7 +7,7 @@ LL |     0;\n    |     ^ expected type\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: expected type, found `0`\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:23\n@@ -18,7 +18,7 @@ LL |     println!(\"test\"): 0;\n    |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7af9c57a8300ad21f689855f56747f25f0b43c6e", "filename": "src/test/ui/unboxed-closures/unboxed-closure-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: parenthetical notation is only stable when used with `Fn`-family t\n LL |     let x: Box<dyn Foo(isize)>;\n    |                    ^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "167479270b54675954ababd7c93061556452770f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-no-cyclic-sig.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-no-cyclic-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-no-cyclic-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-no-cyclic-sig.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -6,7 +6,8 @@ LL |     g(|_| {  });\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n-           see https://github.com/rust-lang/rust/issues/46062 for more details\n+           see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n+           for more information\n \n error: aborting due to previous error\n "}, {"sha": "9a3bdd2bd5ea40f3cce1f560d9ea86eba92358cc", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | fn bar1(x: &dyn Fn<(), Output=()>) {\n    |                 ^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n@@ -13,7 +13,7 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n LL | fn bar2<T>(x: &T) where T: Fn<()> {\n    |                            ^^ help: use parenthetical notation instead: `Fn() -> ()`\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "d508d07791de9e3ddee835ac876e95f453fc70a4", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     let y = &mut x.0;\n    |         ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0723]: mutable references in const fn are unstable\n LL |     let y = unsafe { &mut x.0 };\n    |         ^\n    |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block"}, {"sha": "8defb2c2983ef8b7de993ca313bba834248c6ae3", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,7 +4,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     '\u03b2,\n    |     ^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -13,7 +13,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     \u03b3\n    |     ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -22,7 +22,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     \u03b4: usize\n    |     ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported\n@@ -31,7 +31,7 @@ error[E0658]: non-ascii idents are not fully supported\n LL |     let \u03b1 = 0.00001f64;\n    |         ^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n warning: type parameter `\u03b3` should have an upper camel case name"}, {"sha": "9d8fac02ed33bbad55ec592d6ccc21a87fad8ed3", "filename": "src/test/ui/where-clauses/where-equality-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b555178aef4045685eb359204b565a4bb8d1a9f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr?ref=7b555178aef4045685eb359204b565a4bb8d1a9f", "patch": "@@ -4,15 +4,15 @@ error: equality constraints are not yet supported in `where` clauses\n LL | fn f() where u8 = u16 {}\n    |              ^^^^^^^^ not supported\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n \n error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/where-equality-constraints.rs:3:14\n    |\n LL | fn g() where for<'a> &'static (u8,) == u16, {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not supported\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n \n error: aborting due to 2 previous errors\n "}]}