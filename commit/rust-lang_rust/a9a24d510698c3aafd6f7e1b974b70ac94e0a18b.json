{"sha": "a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "node_id": "C_kwDOAAsO6NoAKGE5YTI0ZDUxMDY5OGMzYWFmZDZmN2UxYjk3NGI3MGFjOTRlMGExOGI", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-01T16:56:38Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-06T19:28:08Z"}, "message": "Don't destructure args tuple in format_args!", "tree": {"sha": "c57ada179e9470f96659f023e355957bb75a9f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57ada179e9470f96659f023e355957bb75a9f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "html_url": "https://github.com/rust-lang/rust/commit/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3326f19e8982ce033e04c163ddc520a76e42c737", "url": "https://api.github.com/repos/rust-lang/rust/commits/3326f19e8982ce033e04c163ddc520a76e42c737", "html_url": "https://github.com/rust-lang/rust/commit/3326f19e8982ce033e04c163ddc520a76e42c737"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "580c3724058edf67b32e51fce214bb059ba250da", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -763,13 +763,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         let mut locals =\n             Vec::with_capacity((0..self.args.len()).map(|i| self.arg_unique_types[i].len()).sum());\n         let mut counts = Vec::with_capacity(self.count_args.len());\n-        let mut pats = Vec::with_capacity(self.args.len());\n         let mut heads = Vec::with_capacity(self.args.len());\n \n-        let names_pos: Vec<_> = (0..self.args.len())\n-            .map(|i| Ident::from_str_and_span(&format!(\"arg{}\", i), self.macsp))\n-            .collect();\n-\n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n         let pieces = self.ecx.expr_vec_slice(self.fmtsp, self.str_pieces);\n@@ -787,11 +782,8 @@ impl<'a, 'b> Context<'a, 'b> {\n         // of each variable because we don't want to move out of the arguments\n         // passed to this function.\n         for (i, e) in self.args.into_iter().enumerate() {\n-            let name = names_pos[i];\n-            let span = self.ecx.with_def_site_ctxt(e.span);\n-            pats.push(self.ecx.pat_ident(span, name));\n             for arg_ty in self.arg_unique_types[i].iter() {\n-                locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n+                locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, i));\n             }\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -800,9 +792,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                 Exact(i) => i,\n                 _ => panic!(\"should never happen\"),\n             };\n-            let name = names_pos[index];\n             let span = spans_pos[index];\n-            counts.push(Context::format_arg(self.ecx, self.macsp, span, &Count, name));\n+            counts.push(Context::format_arg(self.ecx, self.macsp, span, &Count, index));\n         }\n \n         // Now create a vector containing all the arguments\n@@ -838,7 +829,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n         let args_match = {\n-            let pat = self.ecx.pat_tuple(self.macsp, pats);\n+            let pat = self.ecx.pat_ident(self.macsp, Ident::new(sym::_args, self.macsp));\n             let arm = self.ecx.arm(self.macsp, pat, args_array);\n             let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n             self.ecx.expr_match(self.macsp, head, vec![arm])\n@@ -877,10 +868,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         macsp: Span,\n         mut sp: Span,\n         ty: &ArgumentType,\n-        arg: Ident,\n+        arg_index: usize,\n     ) -> P<ast::Expr> {\n         sp = ecx.with_def_site_ctxt(sp);\n-        let arg = ecx.expr_ident(sp, arg);\n+        let arg = ecx.expr_ident(sp, Ident::new(sym::_args, sp));\n+        let arg = ecx.expr(sp, ast::ExprKind::Field(arg, Ident::new(sym::integer(arg_index), sp)));\n         let trait_ = match *ty {\n             Placeholder(trait_) if trait_ == \"<invalid>\" => return DummyResult::raw_expr(sp, true),\n             Placeholder(trait_) => trait_,"}, {"sha": "7bffe4f74d2ef30b4d8b0341193afc7946d135a0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -271,6 +271,7 @@ symbols! {\n         __S,\n         __next,\n         __try_var,\n+        _args,\n         _d,\n         _e,\n         _task_context,"}, {"sha": "84eda08d203bfcacfe288766a7c38bc13888e9ef", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -12,7 +12,7 @@\n     {\n         ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"],\n                                                          &match () {\n-                                                              () => [],\n+                                                              _args => [],\n                                                           }));\n     };\n }"}, {"sha": "529daab903887de6122e0cbb8eb4b0cb096d0f5b", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -45,7 +45,7 @@\n                                                                                                                                                                      as\n                                                                                                                                                                      ())\n                                                                                                                                                                {\n-                                                                                                                                                               ()\n+                                                                                                                                                               _args\n                                                                                                                                                                =>\n                                                                                                                                                                ([]\n                                                                                                                                                                    as"}, {"sha": "e59216fe902704879d0eed6b815942532b9ed004", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -19,8 +19,8 @@ error: unexpected token: `{\n     let res =\n         ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n                                                             &match (&\"u8\",) {\n-                                                                 (arg0,) =>\n-                                                                 [::core::fmt::ArgumentV1::new(arg0,\n+                                                                 _args =>\n+                                                                 [::core::fmt::ArgumentV1::new(_args.0,\n                                                                                                ::core::fmt::Display::fmt)],\n                                                              }));\n     res"}, {"sha": "ee394d64a1dc945d5c072cf2e64f7766771cf292", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#22t, extern \"rust-call\" fn(()), _#23t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "11b9fa7e40caa67f2d1a337f727b8c84a8dc60d4", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9a24d510698c3aafd6f7e1b974b70ac94e0a18b/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=a9a24d510698c3aafd6f7e1b974b70ac94e0a18b", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#25t, extern \"rust-call\" fn(()), _#26t]]`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#22t, extern \"rust-call\" fn(()), _#23t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}]}