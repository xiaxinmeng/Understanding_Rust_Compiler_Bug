{"sha": "0558df24af9d99894a8305a57303824d8b0c15ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NThkZjI0YWY5ZDk5ODk0YTgzMDVhNTczMDM4MjRkOGIwYzE1YmE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-26T23:48:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-27T00:01:04Z"}, "message": "Refactor `expand_expr`", "tree": {"sha": "e8d662cf8fa343df4743b64adbcfce5601a5668f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d662cf8fa343df4743b64adbcfce5601a5668f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0558df24af9d99894a8305a57303824d8b0c15ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0558df24af9d99894a8305a57303824d8b0c15ba", "html_url": "https://github.com/rust-lang/rust/commit/0558df24af9d99894a8305a57303824d8b0c15ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0558df24af9d99894a8305a57303824d8b0c15ba/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "html_url": "https://github.com/rust-lang/rust/commit/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb"}], "stats": {"total": 57, "additions": 22, "deletions": 35}, "files": [{"sha": "6cd5da9bc49636a031b4ea12544356bea7f47b77", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0558df24af9d99894a8305a57303824d8b0c15ba/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0558df24af9d99894a8305a57303824d8b0c15ba/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0558df24af9d99894a8305a57303824d8b0c15ba", "patch": "@@ -88,25 +88,24 @@ impl MacroGenerable for Option<P<ast::Expr>> {\n     }\n }\n \n-pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n-    return e.and_then(|ast::Expr {id, node, span, attrs}| match node {\n-\n+pub fn expand_expr(expr: ast::Expr, fld: &mut MacroExpander) -> P<ast::Expr> {\n+    match expr.node {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n         ast::ExprKind::Mac(mac) => {\n-            expand_mac_invoc(mac, None, attrs.into_attr_vec(), span, fld)\n+            expand_mac_invoc(mac, None, expr.attrs.into_attr_vec(), expr.span, fld)\n         }\n \n         ast::ExprKind::While(cond, body, opt_ident) => {\n             let cond = fld.fold_expr(cond);\n             let (body, opt_ident) = expand_loop_block(body, opt_ident, fld);\n-            fld.cx.expr(span, ast::ExprKind::While(cond, body, opt_ident))\n-                .with_attrs(fold_thin_attrs(attrs, fld))\n+            fld.cx.expr(expr.span, ast::ExprKind::While(cond, body, opt_ident))\n+                .with_attrs(fold_thin_attrs(expr.attrs, fld))\n         }\n \n-        ast::ExprKind::WhileLet(pat, expr, body, opt_ident) => {\n+        ast::ExprKind::WhileLet(pat, cond, body, opt_ident) => {\n             let pat = fld.fold_pat(pat);\n-            let expr = fld.fold_expr(expr);\n+            let cond = fld.fold_expr(cond);\n \n             // Hygienic renaming of the body.\n             let ((body, opt_ident), mut rewritten_pats) =\n@@ -118,14 +117,14 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             });\n             assert!(rewritten_pats.len() == 1);\n \n-            let wl = ast::ExprKind::WhileLet(rewritten_pats.remove(0), expr, body, opt_ident);\n-            fld.cx.expr(span, wl).with_attrs(fold_thin_attrs(attrs, fld))\n+            let wl = ast::ExprKind::WhileLet(rewritten_pats.remove(0), cond, body, opt_ident);\n+            fld.cx.expr(expr.span, wl).with_attrs(fold_thin_attrs(expr.attrs, fld))\n         }\n \n         ast::ExprKind::Loop(loop_block, opt_ident) => {\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n-            fld.cx.expr(span, ast::ExprKind::Loop(loop_block, opt_ident))\n-                .with_attrs(fold_thin_attrs(attrs, fld))\n+            fld.cx.expr(expr.span, ast::ExprKind::Loop(loop_block, opt_ident))\n+                .with_attrs(fold_thin_attrs(expr.attrs, fld))\n         }\n \n         ast::ExprKind::ForLoop(pat, head, body, opt_ident) => {\n@@ -143,7 +142,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             let head = fld.fold_expr(head);\n             let fl = ast::ExprKind::ForLoop(rewritten_pats.remove(0), head, body, opt_ident);\n-            fld.cx.expr(span, fl).with_attrs(fold_thin_attrs(attrs, fld))\n+            fld.cx.expr(expr.span, fl).with_attrs(fold_thin_attrs(expr.attrs, fld))\n         }\n \n         ast::ExprKind::IfLet(pat, sub_expr, body, else_opt) => {\n@@ -162,7 +161,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let else_opt = else_opt.map(|else_opt| fld.fold_expr(else_opt));\n             let sub_expr = fld.fold_expr(sub_expr);\n             let il = ast::ExprKind::IfLet(rewritten_pats.remove(0), sub_expr, body, else_opt);\n-            fld.cx.expr(span, il).with_attrs(fold_thin_attrs(attrs, fld))\n+            fld.cx.expr(expr.span, il).with_attrs(fold_thin_attrs(expr.attrs, fld))\n         }\n \n         ast::ExprKind::Closure(capture_clause, fn_decl, block, fn_decl_span) => {\n@@ -172,21 +171,14 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                                                   rewritten_fn_decl,\n                                                   rewritten_block,\n                                                   fn_decl_span);\n-            P(ast::Expr{ id:id,\n+            P(ast::Expr{ id: expr.id,\n                          node: new_node,\n-                         span: span,\n-                         attrs: fold_thin_attrs(attrs, fld) })\n+                         span: expr.span,\n+                         attrs: fold_thin_attrs(expr.attrs, fld) })\n         }\n \n-        _ => {\n-            P(noop_fold_expr(ast::Expr {\n-                id: id,\n-                node: node,\n-                span: span,\n-                attrs: attrs\n-            }, fld))\n-        }\n-    });\n+        _ => P(noop_fold_expr(expr, fld)),\n+    }\n }\n \n /// Expand a macro invocation. Returns the result of expansion.\n@@ -1015,19 +1007,14 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        expand_expr(expr, self)\n+        expr.and_then(|expr| expand_expr(expr, self))\n     }\n \n     fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n-        match expr.node {\n-            ast::ExprKind::Mac(_) => {}\n-            _ => return Some(expand_expr(expr, self)),\n-        }\n-\n-        expr.and_then(|ast::Expr {node, span, attrs, ..}| match node {\n+        expr.and_then(|expr| match expr.node {\n             ast::ExprKind::Mac(mac) =>\n-                expand_mac_invoc(mac, None, attrs.into_attr_vec(), span, self),\n-            _ => unreachable!(),\n+                expand_mac_invoc(mac, None, expr.attrs.into_attr_vec(), expr.span, self),\n+            _ => Some(expand_expr(expr, self)),\n         })\n     }\n "}]}