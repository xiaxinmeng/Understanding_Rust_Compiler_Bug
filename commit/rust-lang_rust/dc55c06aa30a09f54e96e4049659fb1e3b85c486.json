{"sha": "dc55c06aa30a09f54e96e4049659fb1e3b85c486", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNTVjMDZhYTMwYTA5ZjU0ZTk2ZTQwNDk2NTlmYjFlM2I4NWM0ODY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T15:01:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T15:03:43Z"}, "message": "Properly check enum types for recursion\n\nCloses #742", "tree": {"sha": "720b8a2426a1d9eb7fc2d00f87db5cf998d2d1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/720b8a2426a1d9eb7fc2d00f87db5cf998d2d1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc55c06aa30a09f54e96e4049659fb1e3b85c486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc55c06aa30a09f54e96e4049659fb1e3b85c486", "html_url": "https://github.com/rust-lang/rust/commit/dc55c06aa30a09f54e96e4049659fb1e3b85c486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc55c06aa30a09f54e96e4049659fb1e3b85c486/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e9dac09a737f47f1ce75b12826cebe320f2f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e9dac09a737f47f1ce75b12826cebe320f2f77", "html_url": "https://github.com/rust-lang/rust/commit/03e9dac09a737f47f1ce75b12826cebe320f2f77"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "944614ad03e864612ef774539ae24aed0d31b7d4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=dc55c06aa30a09f54e96e4049659fb1e3b85c486", "patch": "@@ -172,6 +172,7 @@ export type_is_str;\n export type_is_unique;\n export type_is_enum;\n export type_is_c_like_enum;\n+export type_structurally_contains;\n export type_structurally_contains_uniques;\n export type_autoderef;\n export type_param;"}, {"sha": "c1079466e731e6643d3a62eee2fe09e15ac50e61", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=dc55c06aa30a09f54e96e4049659fb1e3b85c486", "patch": "@@ -259,10 +259,9 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n     alt tcx.ast_ty_to_ty_cache.find(ast_ty) {\n       some(some(ty)) { ret ty; }\n       some(none) {\n-        tcx.sess.span_fatal(ast_ty.span,\n-                            \"illegal recursive type \\\n-                              insert a enum in the cycle, \\\n-                              if this is desired)\");\n+        tcx.sess.span_fatal(ast_ty.span, \"illegal recursive type. \\\n+                                          insert a enum in the cycle, \\\n+                                          if this is desired)\");\n       }\n       none { }\n     } /* go on */\n@@ -2490,7 +2489,7 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n     demand::simple(fcx, e.span, declty, cty);\n }\n \n-fn check_enum_variants(ccx: @crate_ctxt, _sp: span, vs: [ast::variant],\n+fn check_enum_variants(ccx: @crate_ctxt, sp: span, vs: [ast::variant],\n                       id: ast::node_id) {\n     // FIXME: this is kinda a kludge; we manufacture a fake function context\n     // and statement context for checking the initializer expression.\n@@ -2512,7 +2511,7 @@ fn check_enum_variants(ccx: @crate_ctxt, _sp: span, vs: [ast::variant],\n           some(e) {\n             check_expr(fcx, e);\n             let cty = expr_ty(fcx.ccx.tcx, e);\n-            let declty =ty::mk_int(fcx.ccx.tcx);\n+            let declty = ty::mk_int(fcx.ccx.tcx);\n             demand::simple(fcx, e.span, declty, cty);\n             // FIXME: issue #1417\n             // Also, check_expr (from check_const pass) doesn't guarantee that\n@@ -2537,6 +2536,20 @@ fn check_enum_variants(ccx: @crate_ctxt, _sp: span, vs: [ast::variant],\n         disr_vals += [disr_val];\n         disr_val += 1;\n     }\n+    let outer = true, did = local_def(id);\n+    if ty::type_structurally_contains(ccx.tcx, rty, {|sty|\n+        alt sty {\n+          ty::ty_enum(id, _) if id == did {\n+            if outer { outer = false; false }\n+            else { true }\n+          }\n+          _ { false }\n+        }\n+    }) {\n+        ccx.tcx.sess.span_fatal(sp, \"illegal recursive enum type. \\\n+                                     wrap the inner value in a box to \\\n+                                     make it represenable\");\n+    }\n }\n \n // A generic function for checking the pred in a check"}, {"sha": "b3764036b99f08647983fa005270bfc3adbfdd26", "filename": "src/test/compile-fail/recursive-enum.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc55c06aa30a09f54e96e4049659fb1e3b85c486/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs?ref=dc55c06aa30a09f54e96e4049659fb1e3b85c486", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: illegal recursive enum type\n+\n+enum list<T> { cons(T, list<T>), nil }\n+\n+fn main() {}"}]}