{"sha": "a90b3ba3011582616c5353ab160b0aa4dffd41c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MGIzYmEzMDExNTgyNjE2YzUzNTNhYjE2MGIwYWE0ZGZmZDQxYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-05T08:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-05T08:41:24Z"}, "message": "Auto merge of #4337 - flip1995:let_unit, r=phansch\n\n Make let_unit lint suggestion auto applicable\n\nchangelog: Make `let_unit` lint suggestion auto applicable", "tree": {"sha": "94000f978c9760251cdb9b262bff08552f465c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94000f978c9760251cdb9b262bff08552f465c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90b3ba3011582616c5353ab160b0aa4dffd41c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90b3ba3011582616c5353ab160b0aa4dffd41c2", "html_url": "https://github.com/rust-lang/rust/commit/a90b3ba3011582616c5353ab160b0aa4dffd41c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90b3ba3011582616c5353ab160b0aa4dffd41c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20021bb4c798fe081e45aba5f6b32fa05a2423fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/20021bb4c798fe081e45aba5f6b32fa05a2423fa", "html_url": "https://github.com/rust-lang/rust/commit/20021bb4c798fe081e45aba5f6b32fa05a2423fa"}, {"sha": "385f4474da199a0f21c93be454043b9bb25f2cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/385f4474da199a0f21c93be454043b9bb25f2cd7", "html_url": "https://github.com/rust-lang/rust/commit/385f4474da199a0f21c93be454043b9bb25f2cd7"}], "stats": {"total": 137, "additions": 120, "deletions": 17}, "files": [{"sha": "7faf1911775f65687d23d66f9ab18a60dca6bce7", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a90b3ba3011582616c5353ab160b0aa4dffd41c2/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90b3ba3011582616c5353ab160b0aa4dffd41c2/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=a90b3ba3011582616c5353ab160b0aa4dffd41c2", "patch": "@@ -25,7 +25,7 @@ use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro_or_desugar, int_bits, last_path_segment,\n     match_def_path, match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n-    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n+    snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -467,15 +467,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n                 if higher::is_from_for_desugar(local) {\n                     return;\n                 }\n-                span_lint(\n-                    cx,\n-                    LET_UNIT_VALUE,\n-                    stmt.span,\n-                    &format!(\n-                        \"this let-binding has unit value. Consider omitting `let {} =`\",\n-                        snippet(cx, local.pat.span, \"..\")\n-                    ),\n-                );\n+                span_lint_and_then(cx, LET_UNIT_VALUE, stmt.span, \"this let-binding has unit value\", |db| {\n+                    if let Some(expr) = &local.init {\n+                        let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n+                        db.span_suggestion(\n+                            stmt.span,\n+                            \"omit the `let` binding\",\n+                            format!(\"{};\", snip),\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n+                    }\n+                });\n             }\n         }\n     }"}, {"sha": "f398edc23cb5e0bdd019bfea348570872fb5d39d", "filename": "tests/ui/let_unit.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=a90b3ba3011582616c5353ab160b0aa4dffd41c2", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::let_unit_value)]\n+#![allow(clippy::no_effect)]\n+#![allow(unused_variables)]\n+\n+macro_rules! let_and_return {\n+    ($n:expr) => {{\n+        let ret = $n;\n+    }};\n+}\n+\n+fn main() {\n+    println!(\"x\");\n+    let _y = 1; // this is fine\n+    let _z = ((), 1); // this as well\n+    if true {\n+        ();\n+    }\n+\n+    consume_units_with_for_loop(); // should be fine as well\n+\n+    multiline_sugg();\n+\n+    let_and_return!(()) // should be fine\n+}\n+\n+// Related to issue #1964\n+fn consume_units_with_for_loop() {\n+    // `for_let_unit` lint should not be triggered by consuming them using for loop.\n+    let v = vec![(), (), ()];\n+    let mut count = 0;\n+    for _ in v {\n+        count += 1;\n+    }\n+    assert_eq!(count, 3);\n+\n+    // Same for consuming from some other Iterator<Item = ()>.\n+    let (tx, rx) = ::std::sync::mpsc::channel();\n+    tx.send(()).unwrap();\n+    drop(tx);\n+\n+    count = 0;\n+    for _ in rx.iter() {\n+        count += 1;\n+    }\n+    assert_eq!(count, 1);\n+}\n+\n+fn multiline_sugg() {\n+    let v: Vec<u8> = vec![2];\n+\n+    v\n+        .into_iter()\n+        .map(|i| i * 2)\n+        .filter(|i| i % 2 == 0)\n+        .map(|_| ())\n+        .next()\n+        .unwrap();\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ContainsUnit(()); // should be fine"}, {"sha": "af5b1fb2ac7e4d526eb6eaa47025d75db8a7992d", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=a90b3ba3011582616c5353ab160b0aa4dffd41c2", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::let_unit_value)]\n+#![allow(clippy::no_effect)]\n #![allow(unused_variables)]\n \n macro_rules! let_and_return {\n@@ -17,6 +20,8 @@ fn main() {\n \n     consume_units_with_for_loop(); // should be fine as well\n \n+    multiline_sugg();\n+\n     let_and_return!(()) // should be fine\n }\n \n@@ -42,5 +47,17 @@ fn consume_units_with_for_loop() {\n     assert_eq!(count, 1);\n }\n \n+fn multiline_sugg() {\n+    let v: Vec<u8> = vec![2];\n+\n+    let _ = v\n+        .into_iter()\n+        .map(|i| i * 2)\n+        .filter(|i| i % 2 == 0)\n+        .map(|_| ())\n+        .next()\n+        .unwrap();\n+}\n+\n #[derive(Copy, Clone)]\n pub struct ContainsUnit(()); // should be fine"}, {"sha": "7130fcd870e369cefdcc89766f3a57219eebc509", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a90b3ba3011582616c5353ab160b0aa4dffd41c2/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=a90b3ba3011582616c5353ab160b0aa4dffd41c2", "patch": "@@ -1,16 +1,37 @@\n-error: this let-binding has unit value. Consider omitting `let _x =`\n-  --> $DIR/let_unit.rs:11:5\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:14:5\n    |\n LL |     let _x = println!(\"x\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `println!(\"x\");`\n    |\n    = note: `-D clippy::let-unit-value` implied by `-D warnings`\n \n-error: this let-binding has unit value. Consider omitting `let _a =`\n-  --> $DIR/let_unit.rs:15:9\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:18:9\n    |\n LL |         let _a = ();\n-   |         ^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^ help: omit the `let` binding: `();`\n \n-error: aborting due to 2 previous errors\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:53:5\n+   |\n+LL | /     let _ = v\n+LL | |         .into_iter()\n+LL | |         .map(|i| i * 2)\n+LL | |         .filter(|i| i % 2 == 0)\n+LL | |         .map(|_| ())\n+LL | |         .next()\n+LL | |         .unwrap();\n+   | |__________________^\n+help: omit the `let` binding\n+   |\n+LL |     v\n+LL |         .into_iter()\n+LL |         .map(|i| i * 2)\n+LL |         .filter(|i| i % 2 == 0)\n+LL |         .map(|_| ())\n+LL |         .next()\n+ ...\n+\n+error: aborting due to 3 previous errors\n "}]}