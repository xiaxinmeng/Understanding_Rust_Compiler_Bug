{"sha": "37204027b609f9bd218641c764e692335597ff26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjA0MDI3YjYwOWY5YmQyMTg2NDFjNzY0ZTY5MjMzNTU5N2ZmMjY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-14T14:00:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:46Z"}, "message": "Rename ty_param_bound to trait_bound", "tree": {"sha": "5c0da5f25252801453b172c76193302167f28c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0da5f25252801453b172c76193302167f28c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37204027b609f9bd218641c764e692335597ff26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37204027b609f9bd218641c764e692335597ff26", "html_url": "https://github.com/rust-lang/rust/commit/37204027b609f9bd218641c764e692335597ff26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37204027b609f9bd218641c764e692335597ff26/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95f1866a4df85e815886901a7b64d8dd64709872", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f1866a4df85e815886901a7b64d8dd64709872", "html_url": "https://github.com/rust-lang/rust/commit/95f1866a4df85e815886901a7b64d8dd64709872"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "3b865e6ce0ff8638f9fbe2cb67e80d0f25b77867", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37204027b609f9bd218641c764e692335597ff26/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37204027b609f9bd218641c764e692335597ff26/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=37204027b609f9bd218641c764e692335597ff26", "patch": "@@ -1037,9 +1037,8 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         self.access_levels.is_public(trait_id)\n     }\n \n-    fn check_ty_param_bound(&mut self,\n-                            ty_param_bound: &hir::GenericBound) {\n-        if let hir::GenericBound::Trait(ref trait_ref, _) = *ty_param_bound {\n+    fn check_ty_param_bound(&mut self, bound: &hir::GenericBound) {\n+        if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n                 self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n             }"}, {"sha": "9044cab05d667f08d70b186d8aae85e569ec349a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=37204027b609f9bd218641c764e692335597ff26", "patch": "@@ -73,7 +73,7 @@ pub trait AstBuilder {\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;\n-    fn ty_param_bound(&self, path: ast::Path) -> ast::GenericBound;\n+    fn trait_bound(&self, path: ast::Path) -> ast::GenericBound;\n     fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime;\n     fn lifetime_def(&self,\n                     span: Span,\n@@ -464,7 +464,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    fn ty_param_bound(&self, path: ast::Path) -> ast::GenericBound {\n+    fn trait_bound(&self, path: ast::Path) -> ast::GenericBound {\n         ast::GenericBound::Trait(self.poly_trait_ref(path.span, path),\n                                  ast::TraitBoundModifier::None)\n     }"}, {"sha": "44a07f532a78a2969d84997dbd6c7397ed41badf", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=37204027b609f9bd218641c764e692335597ff26", "patch": "@@ -558,11 +558,11 @@ impl<'a> TraitDef<'a> {\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {\n-                        cx.ty_param_bound(p.to_path(cx, self.span, type_ident, generics))\n+                        cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n                     }).collect();\n \n                 // require the current trait\n-                bounds.push(cx.ty_param_bound(trait_path.clone()));\n+                bounds.push(cx.trait_bound(trait_path.clone()));\n \n                 // also add in any bounds from the declaration\n                 for declared_bound in &param.bounds {\n@@ -634,12 +634,12 @@ impl<'a> TraitDef<'a> {\n                         let mut bounds: Vec<_> = self.additional_bounds\n                             .iter()\n                             .map(|p| {\n-                                cx.ty_param_bound(p.to_path(cx, self.span, type_ident, generics))\n+                                cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n                             })\n                             .collect();\n \n                         // require the current trait\n-                        bounds.push(cx.ty_param_bound(trait_path.clone()));\n+                        bounds.push(cx.trait_bound(trait_path.clone()));\n \n                         let predicate = ast::WhereBoundPredicate {\n                             span: self.span,"}, {"sha": "0b809ab585cdcb9cd2e927e74640049e8bf4f94a", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37204027b609f9bd218641c764e692335597ff26/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=37204027b609f9bd218641c764e692335597ff26", "patch": "@@ -219,7 +219,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n     let bounds = bounds.iter()\n         .map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n-            cx.ty_param_bound(path)\n+            cx.trait_bound(path)\n         })\n         .collect();\n     cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)"}]}