{"sha": "f9b5859173c926c53fd40a371c6f39e226de56f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjU4NTkxNzNjOTI2YzUzZmQ0MGEzNzFjNmYzOWUyMjZkZTU2ZjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-10T11:36:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-10T11:48:47Z"}, "message": "resolve: Simplify built-in macro table", "tree": {"sha": "956dfe830befc02359f02913feed36a028bebff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956dfe830befc02359f02913feed36a028bebff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b5859173c926c53fd40a371c6f39e226de56f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b5859173c926c53fd40a371c6f39e226de56f6", "html_url": "https://github.com/rust-lang/rust/commit/f9b5859173c926c53fd40a371c6f39e226de56f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b5859173c926c53fd40a371c6f39e226de56f6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34628e5b533d35840b61c5db0665cf7633ed3c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34628e5b533d35840b61c5db0665cf7633ed3c5a", "html_url": "https://github.com/rust-lang/rust/commit/34628e5b533d35840b61c5db0665cf7633ed3c5a"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "635890644d067875b4792d7860064e01017dd966", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=f9b5859173c926c53fd40a371c6f39e226de56f6", "patch": "@@ -14,10 +14,9 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n-use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n-use rustc_span::edition::Edition;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::sym;\n \n mod asm;\n mod assert;\n@@ -44,13 +43,8 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n-pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Edition) {\n-    let mut register = |name, kind| {\n-        resolver.register_builtin_macro(\n-            Ident::with_dummy_span(name),\n-            SyntaxExtension::default(kind, edition),\n-        )\n-    };\n+pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n+    let mut register = |name, kind| resolver.register_builtin_macro(name, kind);\n     macro register_bang($($name:ident: $f:expr,)*) {\n         $(register(sym::$name, SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)));)*\n     }"}, {"sha": "2f43940a9dcbb1c7236b231c39f40a28bf0eb3fc", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=f9b5859173c926c53fd40a371c6f39e226de56f6", "patch": "@@ -868,7 +868,7 @@ pub trait ResolverExpand {\n \n     fn resolve_dollar_crates(&mut self);\n     fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n-    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension);\n+    fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind);\n \n     fn expansion_for_ast_pass(\n         &mut self,"}, {"sha": "b67704119bccc5696f4b5f1c5f1753a04c246bca", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f9b5859173c926c53fd40a371c6f39e226de56f6", "patch": "@@ -236,7 +236,7 @@ fn configure_and_expand_inner<'a>(\n     pre_expansion_lint(sess, lint_store, &krate);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n-    rustc_builtin_macros::register_builtin_macros(&mut resolver, sess.edition());\n+    rustc_builtin_macros::register_builtin_macros(&mut resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| Symbol::intern(s));"}, {"sha": "eb5206ee9fbfd753322ee6042873a05410bda15e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f9b5859173c926c53fd40a371c6f39e226de56f6", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_expand::base::SyntaxExtension;\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -870,7 +870,7 @@ pub struct ExternPreludeEntry<'a> {\n \n /// Used for better errors for E0773\n enum BuiltinMacroState {\n-    NotYetSeen(SyntaxExtension),\n+    NotYetSeen(SyntaxExtensionKind),\n     AlreadySeen(Span),\n }\n "}, {"sha": "6d99097b7d2b51497917fe981ef03262c3e4dad0", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b5859173c926c53fd40a371c6f39e226de56f6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=f9b5859173c926c53fd40a371c6f39e226de56f6", "patch": "@@ -14,7 +14,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n-use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n+use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand};\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n@@ -176,10 +177,11 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);\n     }\n \n-    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension) {\n-        if self.builtin_macros.insert(ident.name, BuiltinMacroState::NotYetSeen(ext)).is_some() {\n+    fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind) {\n+        if self.builtin_macros.insert(name, BuiltinMacroState::NotYetSeen(ext)).is_some() {\n             self.session\n-                .span_err(ident.span, &format!(\"built-in macro `{}` was already defined\", ident));\n+                .diagnostic()\n+                .bug(&format!(\"built-in macro `{}` was already registered\", name));\n         }\n     }\n \n@@ -1096,7 +1098,7 @@ impl<'a> Resolver<'a> {\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.\n                 match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n-                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext.kind,\n+                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,\n                     BuiltinMacroState::AlreadySeen(span) => {\n                         struct_span_err!(\n                             self.session,"}]}