{"sha": "c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Y2JkMzk4ZTRlNTQwNTliMTU5NGVmOTM0Y2U5NmQ2ZmMwYzgxMzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:48:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:48:25Z"}, "message": "Prepare for pat_field_shorthand", "tree": {"sha": "18086038741564f954619bc7457670d156e17d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18086038741564f954619bc7457670d156e17d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "html_url": "https://github.com/rust-lang/rust/commit/c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8cbd398e4e54059b1594ef934ce96d6fc0c8130/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d447a9a381ecf16ea010b9953159ed533d9ba509", "url": "https://api.github.com/repos/rust-lang/rust/commits/d447a9a381ecf16ea010b9953159ed533d9ba509", "html_url": "https://github.com/rust-lang/rust/commit/d447a9a381ecf16ea010b9953159ed533d9ba509"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "fb2a2fb280fadfc38a3d8a4733e53f8b462f99da", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8cbd398e4e54059b1594ef934ce96d6fc0c8130/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8cbd398e4e54059b1594ef934ce96d6fc0c8130/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=c8cbd398e4e54059b1594ef934ce96d6fc0c8130", "patch": "@@ -15,7 +15,7 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, AstNode},\n-    SyntaxNode, TextRange, T,\n+    match_ast, SyntaxNode, TextRange, T,\n };\n use text_edit::TextEdit;\n \n@@ -80,7 +80,7 @@ pub(crate) fn diagnostics(\n \n     for node in parse.tree().syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, &node);\n-        check_struct_shorthand_initialization(&mut res, file_id, &node);\n+        check_field_shorthand(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n     let sink_builder = DiagnosticSinkBuilder::new()\n@@ -188,12 +188,20 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n     None\n }\n \n-fn check_struct_shorthand_initialization(\n+fn check_field_shorthand(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n+    match_ast! {\n+        match node {\n+            ast::RecordExpr(it) => check_expr_field_shorthand(acc, file_id, it),\n+            _ => None\n+        }\n+    };\n+}\n+\n+fn check_expr_field_shorthand(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,\n-    node: &SyntaxNode,\n+    record_lit: ast::RecordExpr,\n ) -> Option<()> {\n-    let record_lit = ast::RecordExpr::cast(node.clone())?;\n     let record_field_list = record_lit.record_expr_field_list()?;\n     for record_field in record_field_list.fields() {\n         if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {"}]}