{"sha": "22714ed4e3954b3d60b3650bad743ec4b3d64d27", "node_id": "C_kwDOAAsO6NoAKDIyNzE0ZWQ0ZTM5NTRiM2Q2MGIzNjUwYmFkNzQzZWM0YjNkNjRkMjc", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-04T06:13:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T06:13:15Z"}, "message": "Rollup merge of #86434 - CDirkx:ipv6-benchmarking, r=joshtriplett\n\nAdd `Ipv6Addr::is_benchmarking`\n\nThis PR adds the unstable method `Ipv6Addr::is_benchmarking`. This method is added for parity with `Ipv4Addr::is_benchmarking`, and I intend to use it in a future rework of `Ipv6Addr::is_global` (edit: #86634) to more accurately follow the [IANA Special Address Registry](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml) (like is done in `Ipv4Addr::is_global`).\n\nWith `Ipv6Addr::is_benchmarking` and `Ipv4Addr::is_benchmarking` now both existing, `IpAddr::is_benchmarking` is also added.", "tree": {"sha": "7a226c67b9d0e7a3f5ba4c27e200085b2751d3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a226c67b9d0e7a3f5ba4c27e200085b2751d3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22714ed4e3954b3d60b3650bad743ec4b3d64d27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWpt7CRBK7hj4Ov3rIwAA3mIIABCnJU0B05LEoUhnf1juQDgb\nXHkkDgoqR4H7moxHurfTabIdN16EfTwsQzgEYBwfS5W9oIhHBInvHr3LgmSzBh41\nYWj1YfbxTgwToPWCWB9urVxo2SWvrzXP1FhsHR7Ak5LH/WQM/t09kTh7YfpUpJFt\nd1EJmMs7WU3C/PhoEpvyXDqelcXO+aqGOs13xMLBJFszYZhmEpmpNdXCBbooVBy+\negshHTjwgyPm1Gsl49B5VNSjM/Yl12VPTa+Lz1k8WMcr1YNRxPH9oo4xE+t4By5G\nYwkEEHhC1WzD1SIb8tjumxGFNbcSb8N5krNJ99LNScSVMKveC/ngczm5+XqLe9k=\n=3M4D\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a226c67b9d0e7a3f5ba4c27e200085b2751d3d6\nparent e737694a4d66b01308b73d4559a35b43e414faf9\nparent cbaccc12c700a2f4d4d22e2765c10b105497025e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633327995 -0700\ncommitter GitHub <noreply@github.com> 1633327995 -0700\n\nRollup merge of #86434 - CDirkx:ipv6-benchmarking, r=joshtriplett\n\nAdd `Ipv6Addr::is_benchmarking`\n\nThis PR adds the unstable method `Ipv6Addr::is_benchmarking`. This method is added for parity with `Ipv4Addr::is_benchmarking`, and I intend to use it in a future rework of `Ipv6Addr::is_global` (edit: #86634) to more accurately follow the [IANA Special Address Registry](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml) (like is done in `Ipv4Addr::is_global`).\n\nWith `Ipv6Addr::is_benchmarking` and `Ipv4Addr::is_benchmarking` now both existing, `IpAddr::is_benchmarking` is also added.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22714ed4e3954b3d60b3650bad743ec4b3d64d27", "html_url": "https://github.com/rust-lang/rust/commit/22714ed4e3954b3d60b3650bad743ec4b3d64d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22714ed4e3954b3d60b3650bad743ec4b3d64d27/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e737694a4d66b01308b73d4559a35b43e414faf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e737694a4d66b01308b73d4559a35b43e414faf9", "html_url": "https://github.com/rust-lang/rust/commit/e737694a4d66b01308b73d4559a35b43e414faf9"}, {"sha": "cbaccc12c700a2f4d4d22e2765c10b105497025e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbaccc12c700a2f4d4d22e2765c10b105497025e", "html_url": "https://github.com/rust-lang/rust/commit/cbaccc12c700a2f4d4d22e2765c10b105497025e"}], "stats": {"total": 135, "additions": 103, "deletions": 32}, "files": [{"sha": "e9c87689d234f57ff3e3e1f6d92e9057ba450123", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/22714ed4e3954b3d60b3650bad743ec4b3d64d27/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22714ed4e3954b3d60b3650bad743ec4b3d64d27/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=22714ed4e3954b3d60b3650bad743ec4b3d64d27", "patch": "@@ -340,6 +340,30 @@ impl IpAddr {\n         }\n     }\n \n+    /// Returns [`true`] if this address is in a range designated for benchmarking.\n+    ///\n+    /// See the documentation for [`Ipv4Addr::is_benchmarking()`] and\n+    /// [`Ipv6Addr::is_benchmarking()`] for more details.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(198, 19, 255, 255)).is_benchmarking(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0)).is_benchmarking(), true);\n+    /// ```\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_benchmarking(&self) -> bool {\n+        match self {\n+            IpAddr::V4(ip) => ip.is_benchmarking(),\n+            IpAddr::V6(ip) => ip.is_benchmarking(),\n+        }\n+    }\n+\n     /// Returns [`true`] if this address is an [`IPv4` address], and [`false`]\n     /// otherwise.\n     ///\n@@ -1449,6 +1473,28 @@ impl Ipv6Addr {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n+    /// Returns [`true`] if this is an address reserved for benchmarking (`2001:2::/48`).\n+    ///\n+    /// This property is defined in [IETF RFC 5180], where it is mistakenly specified as covering the range `2001:0200::/48`.\n+    /// This is corrected in [IETF RFC Errata 1752] to `2001:0002::/48`.\n+    ///\n+    /// [IETF RFC 5180]: https://tools.ietf.org/html/rfc5180\n+    /// [IETF RFC Errata 1752]: https://www.rfc-editor.org/errata_search.php?eid=1752\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc613, 0x0).is_benchmarking(), false);\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0x2, 0, 0, 0, 0, 0, 0).is_benchmarking(), true);\n+    /// ```\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_benchmarking(&self) -> bool {\n+        (self.segments()[0] == 0x2001) && (self.segments()[1] == 0x2) && (self.segments()[2] == 0)\n+    }\n+\n     /// Returns [`true`] if the address is a globally routable unicast address.\n     ///\n     /// The following return false:"}, {"sha": "babc854cd1d333e8dcf136197ada43dad24bdc3f", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 57, "deletions": 32, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/22714ed4e3954b3d60b3650bad743ec4b3d64d27/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22714ed4e3954b3d60b3650bad743ec4b3d64d27/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=22714ed4e3954b3d60b3650bad743ec4b3d64d27", "patch": "@@ -224,6 +224,7 @@ fn ip_properties() {\n             let global: u8 = 1 << 2;\n             let multicast: u8 = 1 << 3;\n             let doc: u8 = 1 << 4;\n+            let benchmarking: u8 = 1 << 5;\n \n             if ($mask & unspec) == unspec {\n                 assert!(ip!($s).is_unspecified());\n@@ -254,6 +255,12 @@ fn ip_properties() {\n             } else {\n                 assert!(!ip!($s).is_documentation());\n             }\n+\n+            if ($mask & benchmarking) == benchmarking {\n+                assert!(ip!($s).is_benchmarking());\n+            } else {\n+                assert!(!ip!($s).is_benchmarking());\n+            }\n         }};\n     }\n \n@@ -262,6 +269,7 @@ fn ip_properties() {\n     let global: u8 = 1 << 2;\n     let multicast: u8 = 1 << 3;\n     let doc: u8 = 1 << 4;\n+    let benchmarking: u8 = 1 << 5;\n \n     check!(\"0.0.0.0\", unspec);\n     check!(\"0.0.0.1\");\n@@ -280,9 +288,9 @@ fn ip_properties() {\n     check!(\"239.255.255.255\", global | multicast);\n     check!(\"255.255.255.255\");\n     // make sure benchmarking addresses are not global\n-    check!(\"198.18.0.0\");\n-    check!(\"198.18.54.2\");\n-    check!(\"198.19.255.255\");\n+    check!(\"198.18.0.0\", benchmarking);\n+    check!(\"198.18.54.2\", benchmarking);\n+    check!(\"198.19.255.255\", benchmarking);\n     // make sure addresses reserved for protocol assignment are not global\n     check!(\"192.0.0.0\");\n     check!(\"192.0.0.255\");\n@@ -313,6 +321,7 @@ fn ip_properties() {\n     check!(\"ff08::\", multicast);\n     check!(\"ff0e::\", global | multicast);\n     check!(\"2001:db8:85a3::8a2e:370:7334\", doc);\n+    check!(\"2001:2::ac32:23ff:21\", global | benchmarking);\n     check!(\"102:304:506:708:90a:b0c:d0e:f10\", global);\n }\n \n@@ -467,21 +476,22 @@ fn ipv6_properties() {\n             assert_eq!(&ip!($s).octets(), octets);\n             assert_eq!(Ipv6Addr::from(*octets), ip!($s));\n \n-            let unspecified: u16 = 1 << 0;\n-            let loopback: u16 = 1 << 1;\n-            let unique_local: u16 = 1 << 2;\n-            let global: u16 = 1 << 3;\n-            let unicast_link_local: u16 = 1 << 4;\n-            let unicast_global: u16 = 1 << 7;\n-            let documentation: u16 = 1 << 8;\n-            let multicast_interface_local: u16 = 1 << 9;\n-            let multicast_link_local: u16 = 1 << 10;\n-            let multicast_realm_local: u16 = 1 << 11;\n-            let multicast_admin_local: u16 = 1 << 12;\n-            let multicast_site_local: u16 = 1 << 13;\n-            let multicast_organization_local: u16 = 1 << 14;\n-            let multicast_global: u16 = 1 << 15;\n-            let multicast: u16 = multicast_interface_local\n+            let unspecified: u32 = 1 << 0;\n+            let loopback: u32 = 1 << 1;\n+            let unique_local: u32 = 1 << 2;\n+            let global: u32 = 1 << 3;\n+            let unicast_link_local: u32 = 1 << 4;\n+            let unicast_global: u32 = 1 << 7;\n+            let documentation: u32 = 1 << 8;\n+            let benchmarking: u32 = 1 << 16;\n+            let multicast_interface_local: u32 = 1 << 9;\n+            let multicast_link_local: u32 = 1 << 10;\n+            let multicast_realm_local: u32 = 1 << 11;\n+            let multicast_admin_local: u32 = 1 << 12;\n+            let multicast_site_local: u32 = 1 << 13;\n+            let multicast_organization_local: u32 = 1 << 14;\n+            let multicast_global: u32 = 1 << 15;\n+            let multicast: u32 = multicast_interface_local\n                 | multicast_admin_local\n                 | multicast_global\n                 | multicast_link_local\n@@ -524,6 +534,11 @@ fn ipv6_properties() {\n             } else {\n                 assert!(!ip!($s).is_documentation());\n             }\n+            if ($mask & benchmarking) == benchmarking {\n+                assert!(ip!($s).is_benchmarking());\n+            } else {\n+                assert!(!ip!($s).is_benchmarking());\n+            }\n             if ($mask & multicast) != 0 {\n                 assert!(ip!($s).multicast_scope().is_some());\n                 assert!(ip!($s).is_multicast());\n@@ -562,20 +577,21 @@ fn ipv6_properties() {\n         }\n     }\n \n-    let unspecified: u16 = 1 << 0;\n-    let loopback: u16 = 1 << 1;\n-    let unique_local: u16 = 1 << 2;\n-    let global: u16 = 1 << 3;\n-    let unicast_link_local: u16 = 1 << 4;\n-    let unicast_global: u16 = 1 << 7;\n-    let documentation: u16 = 1 << 8;\n-    let multicast_interface_local: u16 = 1 << 9;\n-    let multicast_link_local: u16 = 1 << 10;\n-    let multicast_realm_local: u16 = 1 << 11;\n-    let multicast_admin_local: u16 = 1 << 12;\n-    let multicast_site_local: u16 = 1 << 13;\n-    let multicast_organization_local: u16 = 1 << 14;\n-    let multicast_global: u16 = 1 << 15;\n+    let unspecified: u32 = 1 << 0;\n+    let loopback: u32 = 1 << 1;\n+    let unique_local: u32 = 1 << 2;\n+    let global: u32 = 1 << 3;\n+    let unicast_link_local: u32 = 1 << 4;\n+    let unicast_global: u32 = 1 << 7;\n+    let documentation: u32 = 1 << 8;\n+    let benchmarking: u32 = 1 << 16;\n+    let multicast_interface_local: u32 = 1 << 9;\n+    let multicast_link_local: u32 = 1 << 10;\n+    let multicast_realm_local: u32 = 1 << 11;\n+    let multicast_admin_local: u32 = 1 << 12;\n+    let multicast_site_local: u32 = 1 << 13;\n+    let multicast_organization_local: u32 = 1 << 14;\n+    let multicast_global: u32 = 1 << 15;\n \n     check!(\"::\", &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unspecified);\n \n@@ -671,6 +687,12 @@ fn ipv6_properties() {\n         documentation\n     );\n \n+    check!(\n+        \"2001:2::ac32:23ff:21\",\n+        &[0x20, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0xac, 0x32, 0x23, 0xff, 0, 0x21],\n+        global | unicast_global | benchmarking\n+    );\n+\n     check!(\n         \"102:304:506:708:90a:b0c:d0e:f10\",\n         &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n@@ -874,6 +896,9 @@ fn ipv6_const() {\n     const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n     assert!(!IS_DOCUMENTATION);\n \n+    const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n+    assert!(!IS_BENCHMARKING);\n+\n     const IS_UNICAST_GLOBAL: bool = IP_ADDRESS.is_unicast_global();\n     assert!(!IS_UNICAST_GLOBAL);\n "}]}