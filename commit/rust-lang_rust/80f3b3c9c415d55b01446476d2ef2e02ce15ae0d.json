{"sha": "80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZjNiM2M5YzQxNWQ1NWIwMTQ0NjQ3NmQyZWYyZTAyY2UxNWFlMGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T03:59:06Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T03:59:06Z"}, "message": "Remove multimap dep", "tree": {"sha": "ba32045b50e34cf326c0fdeb2cd8bc5fe933d07c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba32045b50e34cf326c0fdeb2cd8bc5fe933d07c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "html_url": "https://github.com/rust-lang/rust/commit/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f631de4336a3758519fb174b89deb62a442ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f631de4336a3758519fb174b89deb62a442ce2", "html_url": "https://github.com/rust-lang/rust/commit/08f631de4336a3758519fb174b89deb62a442ce2"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "688c29db4b89074de5a6d62b33d3c7f23c15e551", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "patch": "@@ -7,12 +7,11 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -58,7 +57,7 @@ version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -90,7 +89,7 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.22\"\n+version = \"0.2.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -103,14 +102,9 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"multimap\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"num-traits\"\n version = \"0.1.37\"\n@@ -123,19 +117,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"regex\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -154,12 +148,12 @@ dependencies = [\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.6\"\n+version = \"1.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.6\"\n+version = \"1.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -184,7 +178,7 @@ dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -218,7 +212,7 @@ name = \"syntex_errors\"\n version = \"0.58.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -261,7 +255,7 @@ version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -278,7 +272,7 @@ name = \"toml\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -340,18 +334,17 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4833d6978da405305126af4ac88569b5d71ff758581ce5a987dbfa3755f694fc\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n+\"checksum libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7eb6b826bfc1fdea7935d46556250d1799b7fe2d9f7951071f4291710665e3e\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n-\"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n \"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n-\"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n+\"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n+\"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n-\"checksum serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38a3db3a5757f68069aba764b793823ea9fb9717c42c016f8903f8add50f508a\"\n-\"checksum serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e46ef71ee001a4279a4513e79a6ebbb59da3a4987bf77a6df2e5534cd6f21d82\"\n+\"checksum serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0c3d79316a6051231925504f6ef893d45088e8823c77a8331a3dcf427ee9087\"\n+\"checksum serde_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0019cd5b9f0529a1a0e145a912e9a2d60c325c58f7f260fc36c71976e9d76aee\"\n \"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\""}, {"sha": "414c45c887a3309182b4de0b97f605a60897c14b", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "patch": "@@ -34,7 +34,6 @@ log = \"0.3\"\n env_logger = \"0.4\"\n getopts = \"0.2\"\n itertools = \"0.5.8\"\n-multimap = \"0.3\"\n \n [build-dependencies]\n walkdir = \"1.0.3\""}, {"sha": "9de427781fe9b7eda91c1c60eae5ad61492ffcd2", "filename": "src/file_lines.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "patch": "@@ -11,18 +11,17 @@\n //! This module contains types and functions to support formatting specific line ranges.\n \n use std::{cmp, iter, path, str};\n+use std::collections::HashMap;\n \n-use itertools::Itertools;\n-use multimap::MultiMap;\n use serde_json as json;\n \n use codemap::LineRange;\n \n /// A range that is inclusive of both ends.\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Deserialize)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, Deserialize)]\n struct Range {\n-    pub lo: usize,\n-    pub hi: usize,\n+    lo: usize,\n+    hi: usize,\n }\n \n impl<'a> From<&'a LineRange> for Range {\n@@ -82,18 +81,30 @@ impl Range {\n /// non-overlapping ranges sorted by their start point. An inner `None` is interpreted to mean all\n /// lines in all files.\n #[derive(Clone, Debug, Default)]\n-pub struct FileLines(Option<MultiMap<String, Range>>);\n+pub struct FileLines(Option<HashMap<String, Vec<Range>>>);\n \n /// Normalizes the ranges so that the invariants for `FileLines` hold: ranges are non-overlapping,\n /// and ordered by their start point.\n-fn normalize_ranges(map: &mut MultiMap<String, Range>) {\n-    for (_, ranges) in map.iter_all_mut() {\n-        ranges.sort_by_key(|x| x.lo);\n-        let merged = ranges\n-            .drain(..)\n-            .coalesce(|x, y| x.merge(y).ok_or((x, y)))\n-            .collect();\n-        *ranges = merged;\n+fn normalize_ranges(ranges: &mut HashMap<String, Vec<Range>>) {\n+    for ranges in ranges.values_mut() {\n+        ranges.sort();\n+        let mut result = vec![];\n+        {\n+            let mut iter = ranges.into_iter().peekable();\n+            while let Some(next) = iter.next() {\n+                let mut next = next.clone();\n+                while let Some(&&mut peek) = iter.peek() {\n+                    if let Some(merged) = next.merge(peek) {\n+                        iter.next().unwrap();\n+                        next = merged;\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                result.push(next)\n+            }\n+        }\n+        *ranges = result;\n     }\n }\n \n@@ -103,16 +114,14 @@ impl FileLines {\n         FileLines(None)\n     }\n \n-    /// Creates a `FileLines` from a `MultiMap`, ensuring that the invariants hold.\n-    fn from_multimap(map: MultiMap<String, Range>) -> FileLines {\n-        let mut map = map;\n-        normalize_ranges(&mut map);\n-        FileLines(Some(map))\n+    fn from_ranges(mut ranges: HashMap<String, Vec<Range>>) -> FileLines {\n+        normalize_ranges(&mut ranges);\n+        FileLines(Some(ranges))\n     }\n \n     /// Returns an iterator over the files contained in `self`.\n     pub fn files(&self) -> Files {\n-        Files(self.0.as_ref().map(MultiMap::keys))\n+        Files(self.0.as_ref().map(|m| m.keys()))\n     }\n \n     /// Returns true if `self` includes all lines in all files. Otherwise runs `f` on all ranges in\n@@ -127,9 +136,9 @@ impl FileLines {\n         };\n \n         match canonicalize_path_string(file_name)\n-                  .and_then(|file| map.get_vec(&file).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(f),\n-            Err(_) => false,\n+                  .and_then(|file| map.get(&file)) {\n+            Some(ranges) => ranges.iter().any(f),\n+            None => false,\n         }\n     }\n \n@@ -165,14 +174,14 @@ impl<'a> iter::Iterator for Files<'a> {\n     }\n }\n \n-fn canonicalize_path_string(s: &str) -> Result<String, ()> {\n+fn canonicalize_path_string(s: &str) -> Option<String> {\n     if s == \"stdin\" {\n-        return Ok(s.to_string());\n+        return Some(s.to_string());\n     }\n \n     match path::PathBuf::from(s).canonicalize() {\n-        Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()).ok_or(()),\n-        _ => Err(()),\n+        Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()),\n+        _ => None,\n     }\n }\n \n@@ -182,10 +191,12 @@ impl str::FromStr for FileLines {\n \n     fn from_str(s: &str) -> Result<FileLines, String> {\n         let v: Vec<JsonSpan> = json::from_str(s).map_err(|e| e.to_string())?;\n-        let m = v.into_iter()\n-            .map(JsonSpan::into_tuple)\n-            .collect::<Result<_, _>>()?;\n-        Ok(FileLines::from_multimap(m))\n+        let mut m = HashMap::new();\n+        for js in v.into_iter() {\n+            let (s, r) = JsonSpan::into_tuple(js)?;\n+            m.entry(s).or_insert(vec![]).push(r);\n+        }\n+        Ok(FileLines::from_ranges(m))\n     }\n }\n \n@@ -197,11 +208,10 @@ struct JsonSpan {\n }\n \n impl JsonSpan {\n-    // To allow `collect()`ing into a `MultiMap`.\n     fn into_tuple(self) -> Result<(String, Range), String> {\n         let (lo, hi) = self.range;\n         let canonical = canonicalize_path_string(&self.file)\n-            .map_err(|_| format!(\"Can't canonicalize {}\", &self.file))?;\n+            .ok_or_else(|| format!(\"Can't canonicalize {}\", &self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "477474df148c82282b46d2208a50f953cf0df1b6", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f3b3c9c415d55b01446476d2ef2e02ce15ae0d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=80f3b3c9c415d55b01446476d2ef2e02ce15ae0d", "patch": "@@ -30,7 +30,6 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n extern crate itertools;\n-extern crate multimap;\n \n use errors::{Handler, DiagnosticBuilder};\n use errors::emitter::{ColorConfig, EmitterWriter};"}]}