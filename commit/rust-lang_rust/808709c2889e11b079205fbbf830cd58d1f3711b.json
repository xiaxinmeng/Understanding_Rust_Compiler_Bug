{"sha": "808709c2889e11b079205fbbf830cd58d1f3711b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODcwOWMyODg5ZTExYjA3OTIwNWZiYmY4MzBjZDU4ZDFmMzcxMWI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-29T21:03:05Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-29T21:06:41Z"}, "message": "Add support for OpenOptions::create_new()/O_EXCL", "tree": {"sha": "5bfc22911dd33ea59cb7795d6e9a2dca4dd11397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bfc22911dd33ea59cb7795d6e9a2dca4dd11397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808709c2889e11b079205fbbf830cd58d1f3711b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808709c2889e11b079205fbbf830cd58d1f3711b", "html_url": "https://github.com/rust-lang/rust/commit/808709c2889e11b079205fbbf830cd58d1f3711b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808709c2889e11b079205fbbf830cd58d1f3711b/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3504d5266830e99f7cd2b978e91250bf1c35ee45", "url": "https://api.github.com/repos/rust-lang/rust/commits/3504d5266830e99f7cd2b978e91250bf1c35ee45", "html_url": "https://github.com/rust-lang/rust/commit/3504d5266830e99f7cd2b978e91250bf1c35ee45"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "04ca538f8b6bb751def00d4962055ba54172068c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/808709c2889e11b079205fbbf830cd58d1f3711b/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808709c2889e11b079205fbbf830cd58d1f3711b/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=808709c2889e11b079205fbbf830cd58d1f3711b", "patch": "@@ -288,8 +288,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let o_creat = this.eval_libc_i32(\"O_CREAT\")?;\n         if flag & o_creat != 0 {\n-            options.create(true);\n             mirror |= o_creat;\n+\n+            let o_excl = this.eval_libc_i32(\"O_EXCL\")?;\n+            if flag & o_excl != 0 {\n+                mirror |= o_excl;\n+                options.create_new(true);\n+            } else {\n+                options.create(true);\n+            }\n         }\n         let o_cloexec = this.eval_libc_i32(\"O_CLOEXEC\")?;\n         if flag & o_cloexec != 0 {"}, {"sha": "d8b6e5b4457554dd4f36809490242e581bce1b1d", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/808709c2889e11b079205fbbf830cd58d1f3711b/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808709c2889e11b079205fbbf830cd58d1f3711b/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=808709c2889e11b079205fbbf830cd58d1f3711b", "patch": "@@ -1,13 +1,16 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::fs::{File, create_dir, read_dir, remove_dir, remove_dir_all, remove_file, rename};\n+use std::fs::{\n+    File, create_dir, OpenOptions, read_dir, remove_dir, remove_dir_all, remove_file, rename,\n+};\n use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n fn main() {\n     test_file();\n     test_file_clone();\n+    test_file_create_new();\n     test_seek();\n     test_metadata();\n     test_symlink();\n@@ -85,6 +88,20 @@ fn test_file_clone() {\n     remove_file(&path).unwrap();\n }\n \n+fn test_file_create_new() {\n+    let path = prepare(\"miri_test_fs_file_create_new.txt\");\n+\n+    // Creating a new file that doesn't yet exist should succeed.\n+    OpenOptions::new().write(true).create_new(true).open(&path).unwrap();\n+    // Creating a new file that already exists should fail.\n+    assert_eq!(ErrorKind::AlreadyExists, OpenOptions::new().write(true).create_new(true).open(&path).unwrap_err().kind());\n+    // Optionally creating a new file that already exists should succeed.\n+    OpenOptions::new().write(true).create(true).open(&path).unwrap();\n+\n+    // Clean up\n+    remove_file(&path).unwrap();\n+}\n+\n fn test_seek() {\n     let bytes = b\"Hello, entire World!\\n\";\n     let path = prepare_with_content(\"miri_test_fs_seek.txt\", bytes);"}]}