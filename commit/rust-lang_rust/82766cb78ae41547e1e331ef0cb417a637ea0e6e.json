{"sha": "82766cb78ae41547e1e331ef0cb417a637ea0e6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzY2Y2I3OGFlNDE1NDdlMWUzMzFlZjBjYjQxN2E2MzdlYTBlNmU=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2020-07-29T10:25:38Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2020-07-29T10:25:38Z"}, "message": "Fix some typos in src/librustdoc/clean/auto_trait.rs", "tree": {"sha": "f04f751512934d9b49ee226771176d47ef9d228d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f04f751512934d9b49ee226771176d47ef9d228d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82766cb78ae41547e1e331ef0cb417a637ea0e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82766cb78ae41547e1e331ef0cb417a637ea0e6e", "html_url": "https://github.com/rust-lang/rust/commit/82766cb78ae41547e1e331ef0cb417a637ea0e6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82766cb78ae41547e1e331ef0cb417a637ea0e6e/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517385b31b0add8487ff3cc27e216cf3f867ab44", "url": "https://api.github.com/repos/rust-lang/rust/commits/517385b31b0add8487ff3cc27e216cf3f867ab44", "html_url": "https://github.com/rust-lang/rust/commit/517385b31b0add8487ff3cc27e216cf3f867ab44"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b170b4131464af2947f850c7ffd99ee989ad5109", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82766cb78ae41547e1e331ef0cb417a637ea0e6e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82766cb78ae41547e1e331ef0cb417a637ea0e6e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=82766cb78ae41547e1e331ef0cb417a637ea0e6e", "patch": "@@ -430,14 +430,14 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     }\n \n     // Converts the calculated ParamEnv and lifetime information to a clean::Generics, suitable for\n-    // display on the docs page. Cleaning the Predicates produces sub-optimal WherePredicate's,\n+    // display on the docs page. Cleaning the Predicates produces sub-optimal `WherePredicate`s,\n     // so we fix them up:\n     //\n     // * Multiple bounds for the same type are coalesced into one: e.g., 'T: Copy', 'T: Debug'\n     // becomes 'T: Copy + Debug'\n     // * Fn bounds are handled specially - instead of leaving it as 'T: Fn(), <T as Fn::Output> =\n     // K', we use the dedicated syntax 'T: Fn() -> K'\n-    // * We explcitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n+    // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -588,7 +588,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         .args;\n \n                                     match args {\n-                                        // Convert somethiung like '<T as Iterator::Item> = u8'\n+                                        // Convert something like '<T as Iterator::Item> = u8'\n                                         // to 'T: Iterator<Item=u8>'\n                                         GenericArgs::AngleBracketed {\n                                             ref mut bindings, ..\n@@ -712,7 +712,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n     //\n     // Obviously, it's extremely undesirable for documentation rendering\n-    // to be depndent on the platform it's run on. Apart from being confusing\n+    // to be dependent on the platform it's run on. Apart from being confusing\n     // to end users, it makes writing tests much more difficult, as predicates\n     // can appear in any order in the final result.\n     //"}]}