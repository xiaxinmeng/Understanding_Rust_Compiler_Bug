{"sha": "cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "node_id": "C_kwDOAAsO6NoAKGNkOGNjOTEwNDUyODFmN2YxOTI0ZWNjMTAxZjJjNjAwMmY2YTFlZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T16:24:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T16:24:36Z"}, "message": "Auto merge of #101989 - fee1-dead-contrib:const_trait_impl-assoc-caller-bounds, r=oli-obk\n\nmake projection bounds with const bounds satisfy const\n\nFixes #101982.", "tree": {"sha": "0182b7899fe870cda5f528f65dc9b2064651935d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0182b7899fe870cda5f528f65dc9b2064651935d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "html_url": "https://github.com/rust-lang/rust/commit/cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4136b59b7da8866762761ed29405a5c5f58a5e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4136b59b7da8866762761ed29405a5c5f58a5e3d", "html_url": "https://github.com/rust-lang/rust/commit/4136b59b7da8866762761ed29405a5c5f58a5e3d"}, {"sha": "ee96ae0a32d35b81103f666ea5ebd898714fa433", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee96ae0a32d35b81103f666ea5ebd898714fa433", "html_url": "https://github.com/rust-lang/rust/commit/ee96ae0a32d35b81103f666ea5ebd898714fa433"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "6bcdfd6394a946e3a295700eacb195942f19b3cf", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "patch": "@@ -119,8 +119,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// This is a trait matching with a projected type as `Self`, and we found\n     /// an applicable bound in the trait definition. The `usize` is an index\n-    /// into the list returned by `tcx.item_bounds`.\n-    ProjectionCandidate(usize),\n+    /// into the list returned by `tcx.item_bounds`. The constness is the\n+    /// constness of the bound in the trait.\n+    ProjectionCandidate(usize, ty::BoundConstness),\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous types\n     /// generated for an `||` expression."}, {"sha": "451427a69807d7ba4134f66c2c04584290df7974", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "patch": "@@ -362,7 +362,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .infcx\n             .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));\n \n-        candidates.vec.extend(result.into_iter().map(ProjectionCandidate));\n+        candidates\n+            .vec\n+            .extend(result.into_iter().map(|(idx, constness)| ProjectionCandidate(idx, constness)));\n     }\n \n     /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller"}, {"sha": "52bc8115fa02777887f120dfde414aa1073e2321", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "patch": "@@ -68,10 +68,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::AutoImpl(data)\n             }\n \n-            ProjectionCandidate(idx) => {\n+            ProjectionCandidate(idx, constness) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n-                // FIXME(jschievink): constness\n-                ImplSource::Param(obligations, ty::BoundConstness::NotConst)\n+                ImplSource::Param(obligations, constness)\n             }\n \n             ObjectCandidate(idx) => {"}, {"sha": "e4e02584561362de4974a97584b6bdfee62f9127", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "patch": "@@ -1192,6 +1192,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ImplCandidate(def_id) if tcx.constness(def_id) == hir::Constness::Const => {}\n                     // const param\n                     ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n+                    // const projection\n+                    ProjectionCandidate(_, ty::BoundConstness::ConstIfConst) => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places\n@@ -1399,7 +1401,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-    ) -> smallvec::SmallVec<[usize; 2]> {\n+    ) -> smallvec::SmallVec<[(usize, ty::BoundConstness); 2]> {\n         let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);\n         let placeholder_trait_predicate =\n             self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);\n@@ -1447,7 +1449,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             _ => false,\n                         }\n                     }) {\n-                        return Some(idx);\n+                        return Some((idx, pred.constness));\n                     }\n                 }\n                 None\n@@ -1683,9 +1685,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinCandidate { .. }\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n-                | ProjectionCandidate(_),\n+                | ProjectionCandidate(..),\n             ) => !is_global(cand),\n-            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n+            (ObjectCandidate(_) | ProjectionCandidate(..), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n                 is_global(cand)\n@@ -1707,20 +1709,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 is_global(cand) && other.evaluation.must_apply_modulo_regions()\n             }\n \n-            (ProjectionCandidate(i), ProjectionCandidate(j))\n+            (ProjectionCandidate(i, _), ProjectionCandidate(j, _))\n             | (ObjectCandidate(i), ObjectCandidate(j)) => {\n                 // Arbitrarily pick the lower numbered candidate for backwards\n                 // compatibility reasons. Don't let this affect inference.\n                 i < j && !needs_infer\n             }\n-            (ObjectCandidate(_), ProjectionCandidate(_))\n-            | (ProjectionCandidate(_), ObjectCandidate(_)) => {\n+            (ObjectCandidate(_), ProjectionCandidate(..))\n+            | (ProjectionCandidate(..), ObjectCandidate(_)) => {\n                 bug!(\"Have both object and projection candidate\")\n             }\n \n             // Arbitrarily give projection and object candidates priority.\n             (\n-                ObjectCandidate(_) | ProjectionCandidate(_),\n+                ObjectCandidate(_) | ProjectionCandidate(..),\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n@@ -1742,7 +1744,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n                 | TraitAliasCandidate(..),\n-                ObjectCandidate(_) | ProjectionCandidate(_),\n+                ObjectCandidate(_) | ProjectionCandidate(..),\n             ) => false,\n \n             (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {"}, {"sha": "780a510c500dc2634a55f75fa17fb4bc273e13ef", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type-const-bound-usage.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type-const-bound-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8cc91045281f7f1924ecc101f2c6002f6a1eee/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type-const-bound-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type-const-bound-usage.rs?ref=cd8cc91045281f7f1924ecc101f2c6002f6a1eee", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Foo {\n+    type Assoc: ~const Foo;\n+    fn foo() {}\n+}\n+\n+const fn foo<T: ~const Foo>() {\n+    <T as Foo>::Assoc::foo();\n+}\n+\n+fn main() {}"}]}