{"sha": "2e5723137b2b88368d018b262a0a823a1423131b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNTcyMzEzN2IyYjg4MzY4ZDAxOGIyNjJhMGE4MjNhMTQyMzEzMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T11:37:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T11:37:44Z"}, "message": "Auto merge of #77616 - jyn514:no-normalize, r=lcnr\n\nDon't run `resolve_vars_if_possible` in `normalize_erasing_regions`\n\nNeither `@eddyb` nor I could figure out what this was for. I changed it to `assert_eq!(normalized_value, infcx.resolve_vars_if_possible(&normalized_value));` and it passed the UI test suite.\n\n<details><summary>\n\nOutdated, I figured out the issue - `needs_infer()` needs to come _after_ erasing the lifetimes\n\n</summary>\n\nStrangely, if I change it to `assert!(!normalized_value.needs_infer())` it panics almost immediately:\n\n```\nquery stack during panic:\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `<str::IsWhitespace as str::pattern::Pattern>::Searcher`\n#1 [needs_drop_raw] computing whether `str::iter::Split<str::IsWhitespace>` needs drop\n#2 [mir_built] building MIR for `str::<impl str>::split_whitespace`\n#3 [unsafety_check_result] unsafety-checking `str::<impl str>::split_whitespace`\n#4 [mir_const] processing MIR for `str::<impl str>::split_whitespace`\n#5 [mir_promoted] processing `str::<impl str>::split_whitespace`\n#6 [mir_borrowck] borrow-checking `str::<impl str>::split_whitespace`\n#7 [analysis] running analysis passes on this crate\nend of query stack\n```\n\nI'm not entirely sure what's going on - maybe the two disagree?\n\n</details>\n\nFor context, this came up while reviewing https://github.com/rust-lang/rust/pull/77467/ (cc `@lcnr).`\n\nPossibly this needs a crater run?\n\nr? `@nikomatsakis`\ncc `@matthewjasper`", "tree": {"sha": "c42a79528d17f641eddb4047783149e945464134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c42a79528d17f641eddb4047783149e945464134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e5723137b2b88368d018b262a0a823a1423131b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5723137b2b88368d018b262a0a823a1423131b", "html_url": "https://github.com/rust-lang/rust/commit/2e5723137b2b88368d018b262a0a823a1423131b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e5723137b2b88368d018b262a0a823a1423131b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760430e6fdd70cdb09b5b6d696905c0ee0ea27c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/760430e6fdd70cdb09b5b6d696905c0ee0ea27c8", "html_url": "https://github.com/rust-lang/rust/commit/760430e6fdd70cdb09b5b6d696905c0ee0ea27c8"}, {"sha": "6354e85e8ff51effe520d358b0810b69f7ecc7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6354e85e8ff51effe520d358b0810b69f7ecc7cf", "html_url": "https://github.com/rust-lang/rust/commit/6354e85e8ff51effe520d358b0810b69f7ecc7cf"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "4841e4286a994741a5f94a52ae14fea8e119b068", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e5723137b2b88368d018b262a0a823a1423131b/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5723137b2b88368d018b262a0a823a1423131b/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=2e5723137b2b88368d018b262a0a823a1423131b", "patch": "@@ -2,7 +2,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n@@ -31,8 +31,14 @@ fn normalize_generic_arg_after_erasing_regions<'tcx>(\n                     None,\n                 );\n \n-                let normalized_value = infcx.resolve_vars_if_possible(normalized_value);\n-                infcx.tcx.erase_regions(normalized_value)\n+                let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n+                // It's unclear when `resolve_vars` would have an effect in a\n+                // fresh `InferCtxt`. If this assert does trigger, it will give\n+                // us a test case.\n+                debug_assert_eq!(normalized_value, resolved_value);\n+                let erased = infcx.tcx.erase_regions(resolved_value);\n+                debug_assert!(!erased.needs_infer(), \"{:?}\", erased);\n+                erased\n             }\n             Err(NoSolution) => bug!(\"could not fully normalize `{:?}`\", value),\n         }"}]}