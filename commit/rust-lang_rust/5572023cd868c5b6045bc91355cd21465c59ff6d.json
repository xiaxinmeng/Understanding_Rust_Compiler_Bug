{"sha": "5572023cd868c5b6045bc91355cd21465c59ff6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzIwMjNjZDg2OGM1YjYwNDViYzkxMzU1Y2QyMTQ2NWM1OWZmNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T05:16:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T05:16:28Z"}, "message": "auto merge of #7162 : thestinger/rust/iterator, r=brson", "tree": {"sha": "0929e1a81a4324b218ab1e8d8663f04ab313e20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0929e1a81a4324b218ab1e8d8663f04ab313e20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5572023cd868c5b6045bc91355cd21465c59ff6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5572023cd868c5b6045bc91355cd21465c59ff6d", "html_url": "https://github.com/rust-lang/rust/commit/5572023cd868c5b6045bc91355cd21465c59ff6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5572023cd868c5b6045bc91355cd21465c59ff6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9119edc55287bb1a9b5609bdef84001c3341e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9119edc55287bb1a9b5609bdef84001c3341e22", "html_url": "https://github.com/rust-lang/rust/commit/b9119edc55287bb1a9b5609bdef84001c3341e22"}, {"sha": "79cd2dbe72781e14adb321483cfed1d861a598ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/79cd2dbe72781e14adb321483cfed1d861a598ce", "html_url": "https://github.com/rust-lang/rust/commit/79cd2dbe72781e14adb321483cfed1d861a598ce"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "a505c5523598628ff2ff4e92c76cc421388f1688", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5572023cd868c5b6045bc91355cd21465c59ff6d/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5572023cd868c5b6045bc91355cd21465c59ff6d/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=5572023cd868c5b6045bc91355cd21465c59ff6d", "patch": "@@ -308,6 +308,12 @@ pub trait IteratorUtil<A> {\n     /// assert!(!it.any_(|&x| *x == 3));\n     /// ~~~\n     fn any_(&mut self, f: &fn(A) -> bool) -> bool;\n+\n+    /// Return the first element satisfying the specified predicate\n+    fn find_(&mut self, predicate: &fn(&A) -> bool) -> Option<A>;\n+\n+    /// Return the index of the first element satisfying the specified predicate\n+    fn position_(&mut self, predicate: &fn(A) -> bool) -> Option<uint>;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -421,7 +427,7 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n                 None    => { break; }\n             }\n         }\n-        return accum;\n+        accum\n     }\n \n     /// Count the number of items yielded by an iterator\n@@ -431,13 +437,35 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     #[inline(always)]\n     fn all(&mut self, f: &fn(A) -> bool) -> bool {\n         for self.advance |x| { if !f(x) { return false; } }\n-        return true;\n+        true\n     }\n \n     #[inline(always)]\n     fn any_(&mut self, f: &fn(A) -> bool) -> bool {\n         for self.advance |x| { if f(x) { return true; } }\n-        return false;\n+        false\n+    }\n+\n+    /// Return the first element satisfying the specified predicate\n+    #[inline(always)]\n+    fn find_(&mut self, predicate: &fn(&A) -> bool) -> Option<A> {\n+        for self.advance |x| {\n+            if predicate(&x) { return Some(x) }\n+        }\n+        None\n+    }\n+\n+    /// Return the index of the first element satisfying the specified predicate\n+    #[inline]\n+    fn position_(&mut self, predicate: &fn(A) -> bool) -> Option<uint> {\n+        let mut i = 0;\n+        for self.advance |x| {\n+            if predicate(x) {\n+                return Some(i);\n+            }\n+            i += 1;\n+        }\n+        None\n     }\n }\n \n@@ -1055,4 +1083,20 @@ mod tests {\n         assert!(!v.iter().any_(|&x| x > 100));\n         assert!(!v.slice(0, 0).iter().any_(|_| fail!()));\n     }\n+\n+    #[test]\n+    fn test_find() {\n+        let v = &[1, 3, 9, 27, 103, 14, 11];\n+        assert_eq!(*v.iter().find_(|x| *x & 1 == 0).unwrap(), 14);\n+        assert_eq!(*v.iter().find_(|x| *x % 3 == 0).unwrap(), 3);\n+        assert!(v.iter().find_(|x| *x % 12 == 0).is_none());\n+    }\n+\n+    #[test]\n+    fn test_position() {\n+        let v = &[1, 3, 9, 27, 103, 14, 11];\n+        assert_eq!(v.iter().position_(|x| *x & 1 == 0).unwrap(), 5);\n+        assert_eq!(v.iter().position_(|x| *x % 3 == 0).unwrap(), 1);\n+        assert!(v.iter().position_(|x| *x % 12 == 0).is_none());\n+    }\n }"}]}