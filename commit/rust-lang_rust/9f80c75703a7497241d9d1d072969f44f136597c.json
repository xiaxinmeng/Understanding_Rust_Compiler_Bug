{"sha": "9f80c75703a7497241d9d1d072969f44f136597c", "node_id": "C_kwDOAAsO6NoAKDlmODBjNzU3MDNhNzQ5NzI0MWQ5ZDFkMDcyOTY5ZjQ0ZjEzNjU5N2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T23:27:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-20T04:50:02Z"}, "message": "Walk un-shifted nested `impl Trait` in trait when setting up default trait method assumptions", "tree": {"sha": "aec3aa3c6a63691a95ae42bae97508191f34ebae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec3aa3c6a63691a95ae42bae97508191f34ebae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f80c75703a7497241d9d1d072969f44f136597c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f80c75703a7497241d9d1d072969f44f136597c", "html_url": "https://github.com/rust-lang/rust/commit/9f80c75703a7497241d9d1d072969f44f136597c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f80c75703a7497241d9d1d072969f44f136597c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7c50c089d5db2d3ebaf227fe075bb1346bfaec", "html_url": "https://github.com/rust-lang/rust/commit/da7c50c089d5db2d3ebaf227fe075bb1346bfaec"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "f53952d25fadd62aac5a7a9f0272def027208fe6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f80c75703a7497241d9d1d072969f44f136597c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80c75703a7497241d9d1d072969f44f136597c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=9f80c75703a7497241d9d1d072969f44f136597c", "patch": "@@ -7,7 +7,10 @@ use rustc_middle::ty::{\n     TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n-use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n+use rustc_span::{\n+    def_id::{DefId, CRATE_DEF_ID},\n+    DUMMY_SP,\n+};\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -275,16 +278,22 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n-        if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n-            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n-            && self.seen.insert(alias_ty.def_id)\n+        if let ty::Alias(ty::Projection, unshifted_alias_ty) = *ty.kind()\n+            && self.tcx.is_impl_trait_in_trait(unshifted_alias_ty.def_id)\n+            && self.tcx.impl_trait_in_trait_parent_fn(unshifted_alias_ty.def_id) == self.fn_def_id\n+            && self.seen.insert(unshifted_alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the\n             // bounds of the RPITIT. Shift these binders back out when\n             // constructing the top-level projection predicate.\n-            let alias_ty = self.tcx.fold_regions(alias_ty, |re, _| {\n+            let shifted_alias_ty = self.tcx.fold_regions(unshifted_alias_ty, |re, depth| {\n                 if let ty::ReLateBound(index, bv) = re.kind() {\n+                    if depth != ty::INNERMOST {\n+                        return self.tcx.mk_re_error_with_message(\n+                            DUMMY_SP,\n+                            \"we shouldn't walk non-predicate binders with `impl Trait`...\",\n+                        );\n+                    }\n                     self.tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n                 } else {\n                     re\n@@ -295,26 +304,27 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n             // the `type_of` of the trait's associated item. If we're using the old lowering\n             // strategy, then just reinterpret the associated type like an opaque :^)\n             let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n-                self\n-                    .tcx\n-                    .type_of(alias_ty.def_id)\n-                    .subst(self.tcx, alias_ty.substs)\n+                self.tcx.type_of(shifted_alias_ty.def_id).subst(self.tcx, shifted_alias_ty.substs)\n             } else {\n-                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+                self.tcx.mk_alias(ty::Opaque, shifted_alias_ty)\n             };\n \n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n-                    ty::ProjectionPredicate {\n-                        projection_ty: alias_ty,\n-                        term: default_ty.into(),\n-                    },\n+                    ty::ProjectionPredicate { projection_ty: shifted_alias_ty, term: default_ty.into() },\n                     self.bound_vars,\n                 )\n                 .to_predicate(self.tcx),\n             );\n \n-            for bound in self.tcx.item_bounds(alias_ty.def_id).subst_iter(self.tcx, alias_ty.substs)\n+            // We walk the *un-shifted* alias ty, because we're tracking the de bruijn\n+            // binder depth, and if we were to walk `shifted_alias_ty` instead, we'd\n+            // have to reset `self.depth` back to `ty::INNERMOST` or something. It's\n+            // easier to just do this.\n+            for bound in self\n+                .tcx\n+                .item_bounds(unshifted_alias_ty.def_id)\n+                .subst_iter(self.tcx, unshifted_alias_ty.substs)\n             {\n                 bound.visit_with(self);\n             }"}, {"sha": "de82544f29338ce529f16cd6dd5e321c25a9587c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f80c75703a7497241d9d1d072969f44f136597c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80c75703a7497241d9d1d072969f44f136597c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=9f80c75703a7497241d9d1d072969f44f136597c", "patch": "@@ -13,4 +13,10 @@ trait Trait {\n     fn method(&self) -> impl Trait<Type = impl Sized + '_>;\n }\n \n+trait Trait2 {\n+    type Type;\n+\n+    fn method(&self) -> impl Trait2<Type = impl Trait2<Type = impl Sized + '_> + '_>;\n+}\n+\n fn main() {}"}]}