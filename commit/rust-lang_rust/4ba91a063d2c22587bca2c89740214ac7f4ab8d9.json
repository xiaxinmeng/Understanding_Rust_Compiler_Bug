{"sha": "4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTkxYTA2M2QyYzIyNTg3YmNhMmM4OTc0MDIxNGFjN2Y0YWI4ZDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T21:40:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T21:40:25Z"}, "message": "rustc_span: Reorder some `ExpnData` fields in accordance with comments\n\nA drive-by change.", "tree": {"sha": "999bcf32648358498be9ab31a1bcac69064a2413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999bcf32648358498be9ab31a1bcac69064a2413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "html_url": "https://github.com/rust-lang/rust/commit/4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba91a063d2c22587bca2c89740214ac7f4ab8d9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece6f681861e45abec5f07d9418d06dc267845d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece6f681861e45abec5f07d9418d06dc267845d6", "html_url": "https://github.com/rust-lang/rust/commit/ece6f681861e45abec5f07d9418d06dc267845d6"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "78b181aa3300a55887aa9c0137baf582710d0137", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4ba91a063d2c22587bca2c89740214ac7f4ab8d9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba91a063d2c22587bca2c89740214ac7f4ab8d9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=4ba91a063d2c22587bca2c89740214ac7f4ab8d9", "patch": "@@ -709,31 +709,6 @@ pub struct ExpnData {\n     /// call_site span would have its own ExpnData, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n-\n-    // --- The part specific to the macro/desugaring definition.\n-    // --- It may be reasonable to share this part between expansions with the same definition,\n-    // --- but such sharing is known to bring some minor inconveniences without also bringing\n-    // --- noticeable perf improvements (PR #62898).\n-    /// The span of the macro definition (possibly dummy).\n-    /// This span serves only informational purpose and is not used for resolution.\n-    pub def_site: Span,\n-    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use\n-    /// internally without forcing the whole crate to opt-in\n-    /// to them.\n-    pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    /// Whether the macro is allowed to use `unsafe` internally\n-    /// even if the user crate has `#![forbid(unsafe_code)]`.\n-    pub allow_internal_unsafe: bool,\n-    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n-    /// for a given macro.\n-    pub local_inner_macros: bool,\n-    /// Edition of the crate in which the macro is defined.\n-    pub edition: Edition,\n-    /// The `DefId` of the macro being invoked,\n-    /// if this `ExpnData` corresponds to a macro invocation\n-    pub macro_def_id: Option<DefId>,\n-    /// The normal module (`mod`) in which the expanded macro was defined.\n-    pub parent_module: Option<DefId>,\n     /// The crate that originally created this `ExpnData`. During\n     /// metadata serialization, we only encode `ExpnData`s that were\n     /// created locally - when our serialized metadata is decoded,\n@@ -748,7 +723,6 @@ pub struct ExpnData {\n     // be considered equivalent.\n     #[stable_hasher(ignore)]\n     orig_id: Option<u32>,\n-\n     /// Used to force two `ExpnData`s to have different `Fingerprint`s.\n     /// Due to macro expansion, it's possible to end up with two `ExpnId`s\n     /// that have identical `ExpnData`s. This violates the contract of `HashStable`\n@@ -760,6 +734,31 @@ pub struct ExpnData {\n     /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes\n     /// a `krate` field, this value only needs to be unique within a single crate.\n     disambiguator: u32,\n+\n+    // --- The part specific to the macro/desugaring definition.\n+    // --- It may be reasonable to share this part between expansions with the same definition,\n+    // --- but such sharing is known to bring some minor inconveniences without also bringing\n+    // --- noticeable perf improvements (PR #62898).\n+    /// The span of the macro definition (possibly dummy).\n+    /// This span serves only informational purpose and is not used for resolution.\n+    pub def_site: Span,\n+    /// List of `#[unstable]`/feature-gated features that the macro is allowed to use\n+    /// internally without forcing the whole crate to opt-in\n+    /// to them.\n+    pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n+    /// Whether the macro is allowed to use `unsafe` internally\n+    /// even if the user crate has `#![forbid(unsafe_code)]`.\n+    pub allow_internal_unsafe: bool,\n+    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n+    /// for a given macro.\n+    pub local_inner_macros: bool,\n+    /// Edition of the crate in which the macro is defined.\n+    pub edition: Edition,\n+    /// The `DefId` of the macro being invoked,\n+    /// if this `ExpnData` corresponds to a macro invocation\n+    pub macro_def_id: Option<DefId>,\n+    /// The normal module (`mod`) in which the expanded macro was defined.\n+    pub parent_module: Option<DefId>,\n }\n \n // These would require special handling of `orig_id`."}]}