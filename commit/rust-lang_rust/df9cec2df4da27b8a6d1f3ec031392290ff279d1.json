{"sha": "df9cec2df4da27b8a6d1f3ec031392290ff279d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWNlYzJkZjRkYTI3YjhhNmQxZjNlYzAzMTM5MjI5MGZmMjc5ZDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T11:12:57Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:56Z"}, "message": "mbe::transcribe: defatalize errors.", "tree": {"sha": "a473a16a2a90919163cea5e0b59e4a02b9b4088c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a473a16a2a90919163cea5e0b59e4a02b9b4088c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9cec2df4da27b8a6d1f3ec031392290ff279d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9cec2df4da27b8a6d1f3ec031392290ff279d1", "html_url": "https://github.com/rust-lang/rust/commit/df9cec2df4da27b8a6d1f3ec031392290ff279d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9cec2df4da27b8a6d1f3ec031392290ff279d1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad26401dc133aa6db6aaa8631aa9bf54d81947f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad26401dc133aa6db6aaa8631aa9bf54d81947f6", "html_url": "https://github.com/rust-lang/rust/commit/ad26401dc133aa6db6aaa8631aa9bf54d81947f6"}], "stats": {"total": 105, "additions": 68, "deletions": 37}, "files": [{"sha": "518a214b4a510ca09897efcea1ca3658e295e018", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -1018,22 +1018,6 @@ impl<'a> ExtCtxt<'a> {\n         self.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n \n-    /// Emit `msg` attached to `sp`, and stop compilation immediately.\n-    ///\n-    /// `span_err` should be strongly preferred where-ever possible:\n-    /// this should *only* be used when:\n-    ///\n-    /// - continuing has a high risk of flow-on errors (e.g., errors in\n-    ///   declaring a macro would cause all uses of that macro to\n-    ///   complain about \"undefined macro\"), or\n-    /// - there is literally nothing else that can be done (however,\n-    ///   in most cases one can construct a dummy expression/item to\n-    ///   substitute; we never hit resolve/type-checking so the dummy\n-    ///   value doesn't have to match anything)\n-    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.parse_sess.span_diagnostic.span_fatal(sp, msg).raise();\n-    }\n-\n     /// Emit `msg` attached to `sp`, without immediately stopping\n     /// compilation.\n     ///"}, {"sha": "d4fe382b84b61909fc974d6668b1bab7f112a9a7", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -255,7 +255,13 @@ fn generic_extension<'cx>(\n \n                 let rhs_spans = rhs.iter().map(|t| t.span()).collect::<Vec<_>>();\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n-                let mut tts = transcribe(cx, &named_matches, rhs, transparency);\n+                let mut tts = match transcribe(cx, &named_matches, rhs, transparency) {\n+                    Ok(tts) => tts,\n+                    Err(mut err) => {\n+                        err.emit();\n+                        return DummyResult::any(arm_span);\n+                    }\n+                };\n \n                 // Replace all the tokens for the corresponding positions in the macro, to maintain\n                 // proper positions in error reporting, while maintaining the macro_backtrace."}, {"sha": "e2d3d5c4d644e04076ac1fbb31ac672bdfa7f29e", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::token::{self, NtTT, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::pluralize;\n+use rustc_errors::{pluralize, PResult};\n use rustc_span::hygiene::{ExpnId, Transparency};\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n@@ -80,15 +80,15 @@ impl Iterator for Frame {\n /// `transcribe` would return a `TokenStream` containing `println!(\"{}\", stringify!(bar));`.\n ///\n /// Along the way, we do some additional error checking.\n-pub(super) fn transcribe(\n-    cx: &ExtCtxt<'_>,\n+pub(super) fn transcribe<'a>(\n+    cx: &ExtCtxt<'a>,\n     interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,\n     src: Vec<mbe::TokenTree>,\n     transparency: Transparency,\n-) -> TokenStream {\n+) -> PResult<'a, TokenStream> {\n     // Nothing for us to transcribe...\n     if src.is_empty() {\n-        return TokenStream::default();\n+        return Ok(TokenStream::default());\n     }\n \n     // We descend into the RHS (`src`), expanding things as we go. This stack contains the things\n@@ -152,7 +152,7 @@ pub(super) fn transcribe(\n                 Frame::Delimited { forest, span, .. } => {\n                     if result_stack.is_empty() {\n                         // No results left to compute! We are back at the top-level.\n-                        return TokenStream::new(result);\n+                        return Ok(TokenStream::new(result));\n                     }\n \n                     // Step back into the parent Delimited.\n@@ -173,19 +173,19 @@ pub(super) fn transcribe(\n             seq @ mbe::TokenTree::Sequence(..) => {\n                 match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n-                        cx.span_fatal(\n+                        return Err(cx.struct_span_err(\n                             seq.span(), /* blame macro writer */\n                             \"attempted to repeat an expression containing no syntax variables \\\n                              matched as repeating at this depth\",\n-                        );\n+                        ));\n                     }\n \n                     LockstepIterSize::Contradiction(ref msg) => {\n                         // FIXME: this really ought to be caught at macro definition time... It\n                         // happens when two meta-variables are used in the same repetition in a\n                         // sequence, but they come from different sequence matchers and repeat\n                         // different amounts.\n-                        cx.span_fatal(seq.span(), &msg[..]);\n+                        return Err(cx.struct_span_err(seq.span(), &msg[..]));\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -203,7 +203,10 @@ pub(super) fn transcribe(\n                                 // FIXME: this really ought to be caught at macro definition\n                                 // time... It happens when the Kleene operator in the matcher and\n                                 // the body for the same meta-variable do not match.\n-                                cx.span_fatal(sp.entire(), \"this must repeat at least once\");\n+                                return Err(cx.struct_span_err(\n+                                    sp.entire(),\n+                                    \"this must repeat at least once\",\n+                                ));\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repretitions so far). `len`\n@@ -242,10 +245,10 @@ pub(super) fn transcribe(\n                         }\n                     } else {\n                         // We were unable to descend far enough. This is an error.\n-                        cx.span_fatal(\n+                        return Err(cx.struct_span_err(\n                             sp, /* blame the macro writer */\n                             &format!(\"variable '{}' is still repeating at this depth\", ident),\n-                        );\n+                        ));\n                     }\n                 } else {\n                     // If we aren't able to match the meta-var, we push it back into the result but"}, {"sha": "18df3f6ee94c1e173e46509f9d35d0ebf0971762", "filename": "src/test/ui/macros/issue-61033-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -1,9 +1,10 @@\n // Regression test for issue #61033.\n \n macro_rules! test1 {\n-    ($x:ident, $($tt:tt)*) => { $($tt)+ } //~ERROR this must repeat at least once\n+    ($x:ident, $($tt:tt)*) => { $($tt)+ } //~ ERROR this must repeat at least once\n }\n \n fn main() {\n     test1!(x,);\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n }"}, {"sha": "18205c3436b0b4f8ca9571dd03c176934b1e3d56", "filename": "src/test/ui/macros/issue-61033-1.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -4,5 +4,14 @@ error: this must repeat at least once\n LL |     ($x:ident, $($tt:tt)*) => { $($tt)+ }\n    |                                  ^^^^^\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61033-1.rs:9:33\n+   |\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1760ba1584d0b2e495346e3176d35fc6bdc9d826", "filename": "src/test/ui/macros/issue-61033-2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -5,7 +5,9 @@ macro_rules! test2 {\n         $(* $id1:ident)*\n         $(+ $id2:ident)*\n     ) => {\n-        $( //~ERROR meta-variable `id1` repeats 2 times\n+        $(\n+        //~^ ERROR meta-variable `id1` repeats 2 times\n+        //~| ERROR meta-variable `id1` repeats 2 times\n             $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n         )*\n     }\n@@ -16,4 +18,8 @@ fn main() {\n         * a * b\n         + a + b + c\n     }\n+    test2! {\n+        * a * b\n+        + a + b + c + d\n+    }\n }"}, {"sha": "cdfe7934a0cac26af019674778b0c16718d1fcd4", "filename": "src/test/ui/macros/issue-61033-2.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -3,9 +3,22 @@ error: meta-variable `id1` repeats 2 times, but `id2` repeats 3 times\n    |\n LL |           $(\n    |  __________^\n+LL | |\n+LL | |\n LL | |             $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n LL | |         )*\n    | |_________^\n \n-error: aborting due to previous error\n+error: meta-variable `id1` repeats 2 times, but `id2` repeats 4 times\n+  --> $DIR/issue-61033-2.rs:8:10\n+   |\n+LL |           $(\n+   |  __________^\n+LL | |\n+LL | |\n+LL | |             $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n+LL | |         )*\n+   | |_________^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "3ffbea217e79ebf9de92687367079a543f79239b", "filename": "src/test/ui/parser/macro/macro-repeat.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.rs?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -1,9 +1,12 @@\n macro_rules! mac {\n-    ( $($v:tt)* ) => (\n-        $v  //~ ERROR still repeating at this depth\n-    )\n+    ( $($v:tt)* ) => {\n+        $v\n+        //~^ ERROR still repeating at this depth\n+        //~| ERROR still repeating at this depth\n+    };\n }\n \n fn main() {\n     mac!(0);\n+    mac!(1);\n }"}, {"sha": "63554b197b91c19082cd28b8b9010a7e606b32cf", "filename": "src/test/ui/parser/macro/macro-repeat.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df9cec2df4da27b8a6d1f3ec031392290ff279d1/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-repeat.stderr?ref=df9cec2df4da27b8a6d1f3ec031392290ff279d1", "patch": "@@ -4,5 +4,11 @@ error: variable 'v' is still repeating at this depth\n LL |         $v\n    |         ^^\n \n-error: aborting due to previous error\n+error: variable 'v' is still repeating at this depth\n+  --> $DIR/macro-repeat.rs:3:9\n+   |\n+LL |         $v\n+   |         ^^\n+\n+error: aborting due to 2 previous errors\n "}]}