{"sha": "22d25f21dc008785f52e7c2833de4f4236b1066b", "node_id": "C_kwDOAAsO6NoAKDIyZDI1ZjIxZGMwMDg3ODVmNTJlN2MyODMzZGU0ZjQyMzZiMTA2NmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T12:48:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T12:48:29Z"}, "message": "Auto merge of #99521 - fee1-dead-contrib:const_fix_hax, r=oli-obk\n\nFix hack that remaps env constness.\n\nWARNING: might have perf implications.\n\nAre there any more problems with having a constness in the `ParamEnv` now? :)\n\nr? `@oli-obk`", "tree": {"sha": "a0889b431c8ff50d97957efce13bde8f21d91649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0889b431c8ff50d97957efce13bde8f21d91649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d25f21dc008785f52e7c2833de4f4236b1066b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d25f21dc008785f52e7c2833de4f4236b1066b", "html_url": "https://github.com/rust-lang/rust/commit/22d25f21dc008785f52e7c2833de4f4236b1066b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d25f21dc008785f52e7c2833de4f4236b1066b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41419e70366962c9a878bfe673ef4df38db6f7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/41419e70366962c9a878bfe673ef4df38db6f7f1", "html_url": "https://github.com/rust-lang/rust/commit/41419e70366962c9a878bfe673ef4df38db6f7f1"}, {"sha": "a0ebb2ed8b59e8eec9add6acda0673dcf468596f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ebb2ed8b59e8eec9add6acda0673dcf468596f", "html_url": "https://github.com/rust-lang/rust/commit/a0ebb2ed8b59e8eec9add6acda0673dcf468596f"}], "stats": {"total": 113, "additions": 46, "deletions": 67}, "files": [{"sha": "281a12655469494fce2d668a2132199e0615411a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -575,6 +575,19 @@ impl<'tcx> Predicate<'tcx> {\n \n         Some(tcx.mk_predicate(kind))\n     }\n+\n+    pub fn without_const(mut self, tcx: TyCtxt<'tcx>) -> Self {\n+        if let PredicateKind::Trait(TraitPredicate { trait_ref, constness, polarity }) = self.kind().skip_binder()\n+            && constness != BoundConstness::NotConst\n+        {\n+            self = tcx.mk_predicate(self.kind().rebind(PredicateKind::Trait(TraitPredicate {\n+                trait_ref,\n+                constness: BoundConstness::NotConst,\n+                polarity,\n+            })));\n+        }\n+        self\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {"}, {"sha": "8148e2b78719610b6d5cf4a1d901218b3dacb5e0", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -31,14 +31,14 @@ pub(crate) fn update<'tcx, T>(\n             obligation\n                 .predicate\n                 .kind()\n-                .map_bound(|_| {\n+                .rebind(\n                     // (*) binder moved here\n                     ty::PredicateKind::Trait(ty::TraitPredicate {\n                         trait_ref,\n                         constness: tpred.constness,\n                         polarity: tpred.polarity,\n                     })\n-                })\n+                )\n                 .to_predicate(infcx.tcx),\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold."}, {"sha": "d4c9fd1c5f9cd9abae3f9c334206b2c79a1ff43e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 27, "deletions": 46, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -42,115 +42,96 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidate: SelectionCandidate<'tcx>,\n     ) -> Result<Selection<'tcx>, SelectionError<'tcx>> {\n-        let mut obligation = obligation;\n-        let new_obligation;\n-\n-        // HACK(const_trait_impl): the surrounding environment is remapped to a non-const context\n-        // because nested obligations might be actually `~const` then (incorrectly) requiring\n-        // const impls. for example:\n-        // ```\n-        // pub trait Super {}\n-        // pub trait Sub: Super {}\n-        //\n-        // impl<A> const Super for &A where A: ~const Super {}\n-        // impl<A> const Sub for &A where A: ~const Sub {}\n-        // ```\n-        //\n-        // The procedure to check the code above without the remapping code is as follows:\n-        // ```\n-        // CheckWf(impl const Sub for &A where A: ~const Sub) // <- const env\n-        // CheckPredicate(&A: Super)\n-        // CheckPredicate(A: ~const Super) // <- still const env, failure\n-        // ```\n-        if obligation.param_env.is_const() && !obligation.predicate.is_const_if_const() {\n-            new_obligation = TraitObligation {\n-                cause: obligation.cause.clone(),\n-                param_env: obligation.param_env.without_const(),\n-                ..*obligation\n-            };\n-            obligation = &new_obligation;\n-        }\n-\n-        match candidate {\n+        let mut impl_src = match candidate {\n             BuiltinCandidate { has_nested } => {\n                 let data = self.confirm_builtin_candidate(obligation, has_nested);\n-                Ok(ImplSource::Builtin(data))\n+                ImplSource::Builtin(data)\n             }\n \n             ParamCandidate(param) => {\n                 let obligations =\n                     self.confirm_param_candidate(obligation, param.map_bound(|t| t.trait_ref));\n-                Ok(ImplSource::Param(obligations, param.skip_binder().constness))\n+                ImplSource::Param(obligations, param.skip_binder().constness)\n             }\n \n             ImplCandidate(impl_def_id) => {\n-                Ok(ImplSource::UserDefined(self.confirm_impl_candidate(obligation, impl_def_id)))\n+                ImplSource::UserDefined(self.confirm_impl_candidate(obligation, impl_def_id))\n             }\n \n             AutoImplCandidate(trait_def_id) => {\n                 let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n-                Ok(ImplSource::AutoImpl(data))\n+                ImplSource::AutoImpl(data)\n             }\n \n             ProjectionCandidate(idx) => {\n                 let obligations = self.confirm_projection_candidate(obligation, idx)?;\n                 // FIXME(jschievink): constness\n-                Ok(ImplSource::Param(obligations, ty::BoundConstness::NotConst))\n+                ImplSource::Param(obligations, ty::BoundConstness::NotConst)\n             }\n \n             ObjectCandidate(idx) => {\n                 let data = self.confirm_object_candidate(obligation, idx)?;\n-                Ok(ImplSource::Object(data))\n+                ImplSource::Object(data)\n             }\n \n             ClosureCandidate => {\n                 let vtable_closure = self.confirm_closure_candidate(obligation)?;\n-                Ok(ImplSource::Closure(vtable_closure))\n+                ImplSource::Closure(vtable_closure)\n             }\n \n             GeneratorCandidate => {\n                 let vtable_generator = self.confirm_generator_candidate(obligation)?;\n-                Ok(ImplSource::Generator(vtable_generator))\n+                ImplSource::Generator(vtable_generator)\n             }\n \n             FnPointerCandidate { .. } => {\n                 let data = self.confirm_fn_pointer_candidate(obligation)?;\n-                Ok(ImplSource::FnPointer(data))\n+                ImplSource::FnPointer(data)\n             }\n \n             DiscriminantKindCandidate => {\n-                Ok(ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData))\n+                ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             }\n \n-            PointeeCandidate => Ok(ImplSource::Pointee(ImplSourcePointeeData)),\n+            PointeeCandidate => ImplSource::Pointee(ImplSourcePointeeData),\n \n             TraitAliasCandidate(alias_def_id) => {\n                 let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n-                Ok(ImplSource::TraitAlias(data))\n+                ImplSource::TraitAlias(data)\n             }\n \n             BuiltinObjectCandidate => {\n                 // This indicates something like `Trait + Send: Send`. In this case, we know that\n                 // this holds because that's what the object type is telling us, and there's really\n                 // no additional obligations to prove and no types in particular to unify, etc.\n-                Ok(ImplSource::Param(Vec::new(), ty::BoundConstness::NotConst))\n+                ImplSource::Param(Vec::new(), ty::BoundConstness::NotConst)\n             }\n \n             BuiltinUnsizeCandidate => {\n                 let data = self.confirm_builtin_unsize_candidate(obligation)?;\n-                Ok(ImplSource::Builtin(data))\n+                ImplSource::Builtin(data)\n             }\n \n             TraitUpcastingUnsizeCandidate(idx) => {\n                 let data = self.confirm_trait_upcasting_unsize_candidate(obligation, idx)?;\n-                Ok(ImplSource::TraitUpcasting(data))\n+                ImplSource::TraitUpcasting(data)\n             }\n \n             ConstDestructCandidate(def_id) => {\n                 let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n-                Ok(ImplSource::ConstDestruct(data))\n+                ImplSource::ConstDestruct(data)\n             }\n+        };\n+\n+        if !obligation.predicate.is_const_if_const() {\n+            // normalize nested predicates according to parent predicate's constness.\n+            impl_src = impl_src.map(|mut o| {\n+                o.predicate = o.predicate.without_const(self.tcx());\n+                o\n+            });\n         }\n+\n+        Ok(impl_src)\n     }\n \n     fn confirm_projection_candidate("}, {"sha": "2005fc24ed09b1cbdd35dd315cf325849ef13358", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -182,9 +182,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ty::PredicateKind::Projection(proj_predicate) => self\n                             .deduce_sig_from_projection(\n                                 Some(span.0),\n-                                pred.0.kind().rebind(\n-                                    pred.map_bound(|_| proj_predicate).subst(self.tcx, substs),\n-                                ),\n+                                pred.0\n+                                    .kind()\n+                                    .rebind(pred.rebind(proj_predicate).subst(self.tcx, substs)),\n                             ),\n                         _ => None,\n                     });"}, {"sha": "6ff5b37f6e5b9e98494795eed720ddfbb8c97f93", "filename": "src/test/ui/unsized/issue-30355.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -4,7 +4,6 @@ pub static Y: &'static X = {\n     const Y: &'static [u8] = b\"\";\n     &X(*Y)\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n };\n \n fn main() {}"}, {"sha": "71bbdf5dec7696600f3a02ee2544624d0c097244", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22d25f21dc008785f52e7c2833de4f4236b1066b/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22d25f21dc008785f52e7c2833de4f4236b1066b/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=22d25f21dc008785f52e7c2833de4f4236b1066b", "patch": "@@ -8,20 +8,6 @@ LL |     &X(*Y)\n    = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n \n-error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/issue-30355.rs:5:6\n-   |\n-LL |     &X(*Y)\n-   |      ^ doesn't have a size known at compile-time\n-   |\n-   = help: within `X`, the trait `Sized` is not implemented for `[u8]`\n-note: required because it appears within the type `X`\n-  --> $DIR/issue-30355.rs:1:12\n-   |\n-LL | pub struct X([u8]);\n-   |            ^\n-   = note: the return type of a function must have a statically known size\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}]}