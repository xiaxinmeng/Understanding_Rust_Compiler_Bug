{"sha": "4963afdc7b6adeee74abd306d3933a58bbec522b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjNhZmRjN2I2YWRlZWU3NGFiZDMwNmQzOTMzYTU4YmJlYzUyMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-14T13:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-14T13:17:24Z"}, "message": "auto merge of #18891 : erickt/rust/deprecate-as-ref, r=alexcrichton\n\nIt seems odd that the `AsRefReader`/`AsRefWriter` have the single method `by_ref()`. This creates the new traits `ByRefReader`/`ByRefWriter` and deprecates the old traits.", "tree": {"sha": "374580e399c4c651bf3787d515fd8ca9c079d9d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374580e399c4c651bf3787d515fd8ca9c079d9d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4963afdc7b6adeee74abd306d3933a58bbec522b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4963afdc7b6adeee74abd306d3933a58bbec522b", "html_url": "https://github.com/rust-lang/rust/commit/4963afdc7b6adeee74abd306d3933a58bbec522b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4963afdc7b6adeee74abd306d3933a58bbec522b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2168c5252adeda1dd35ccf7050df89655233d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2168c5252adeda1dd35ccf7050df89655233d7", "html_url": "https://github.com/rust-lang/rust/commit/bb2168c5252adeda1dd35ccf7050df89655233d7"}, {"sha": "0ab861aa2dc972e13d98c24db603f125688d5e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab861aa2dc972e13d98c24db603f125688d5e43", "html_url": "https://github.com/rust-lang/rust/commit/0ab861aa2dc972e13d98c24db603f125688d5e43"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "9828c2092d3622e1045bbef8bbc1ab8641b8800c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4963afdc7b6adeee74abd306d3933a58bbec522b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963afdc7b6adeee74abd306d3933a58bbec522b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4963afdc7b6adeee74abd306d3933a58bbec522b", "patch": "@@ -849,6 +849,7 @@ pub trait Reader {\n }\n \n /// A reader which can be converted to a RefReader.\n+#[deprecated = \"use ByRefReader instead\"]\n pub trait AsRefReader {\n     /// Creates a wrapper around a mutable reference to the reader.\n     ///\n@@ -857,12 +858,28 @@ pub trait AsRefReader {\n     fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self>;\n }\n \n+#[allow(deprecated)]\n impl<T: Reader> AsRefReader for T {\n     fn by_ref<'a>(&'a mut self) -> RefReader<'a, T> {\n         RefReader { inner: self }\n     }\n }\n \n+/// A reader which can be converted to a RefReader.\n+pub trait ByRefReader {\n+    /// Creates a wrapper around a mutable reference to the reader.\n+    ///\n+    /// This is useful to allow applying adaptors while still\n+    /// retaining ownership of the original value.\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self>;\n+}\n+\n+impl<T: Reader> ByRefReader for T {\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, T> {\n+        RefReader { inner: self }\n+    }\n+}\n+\n /// A reader which can be converted to bytes.\n pub trait BytesReader {\n     /// Create an iterator that reads a single byte on\n@@ -925,7 +942,7 @@ unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -\n /// # fn process_input<R: Reader>(r: R) {}\n /// # fn foo() {\n /// use std::io;\n-/// use std::io::AsRefReader;\n+/// use std::io::ByRefReader;\n /// use std::io::util::LimitReader;\n ///\n /// let mut stream = io::stdin();\n@@ -1211,6 +1228,7 @@ pub trait Writer {\n }\n \n /// A writer which can be converted to a RefWriter.\n+#[deprecated = \"use ByRefWriter instead\"]\n pub trait AsRefWriter {\n     /// Creates a wrapper around a mutable reference to the writer.\n     ///\n@@ -1220,12 +1238,29 @@ pub trait AsRefWriter {\n     fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self>;\n }\n \n+#[allow(deprecated)]\n impl<T: Writer> AsRefWriter for T {\n     fn by_ref<'a>(&'a mut self) -> RefWriter<'a, T> {\n         RefWriter { inner: self }\n     }\n }\n \n+/// A writer which can be converted to a RefWriter.\n+pub trait ByRefWriter {\n+    /// Creates a wrapper around a mutable reference to the writer.\n+    ///\n+    /// This is useful to allow applying wrappers while still\n+    /// retaining ownership of the original value.\n+    #[inline]\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self>;\n+}\n+\n+impl<T: Writer> ByRefWriter for T {\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, T> {\n+        RefWriter { inner: self }\n+    }\n+}\n+\n impl<'a> Writer for Box<Writer+'a> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n@@ -1256,7 +1291,7 @@ impl<'a> Writer for &'a mut Writer+'a {\n /// # fn process_input<R: Reader>(r: R) {}\n /// # fn foo () {\n /// use std::io::util::TeeReader;\n-/// use std::io::{stdin, MemWriter, AsRefWriter};\n+/// use std::io::{stdin, MemWriter, ByRefWriter};\n ///\n /// let mut output = MemWriter::new();\n ///"}, {"sha": "765af0dfbc0d9bcb6b256647156ca45dc84d7073", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4963afdc7b6adeee74abd306d3933a58bbec522b/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963afdc7b6adeee74abd306d3933a58bbec522b/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=4963afdc7b6adeee74abd306d3933a58bbec522b", "patch": "@@ -265,7 +265,7 @@ impl<T: Iterator<u8>> Reader for IterReader<T> {\n \n #[cfg(test)]\n mod test {\n-    use io::{MemReader, MemWriter, BufReader, AsRefReader};\n+    use io::{MemReader, MemWriter, BufReader, ByRefReader};\n     use io;\n     use boxed::Box;\n     use super::*;"}]}