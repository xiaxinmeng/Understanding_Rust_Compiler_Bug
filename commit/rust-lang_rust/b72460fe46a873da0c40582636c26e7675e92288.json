{"sha": "b72460fe46a873da0c40582636c26e7675e92288", "node_id": "C_kwDOAAsO6NoAKGI3MjQ2MGZlNDZhODczZGEwYzQwNTgyNjM2YzI2ZTc2NzVlOTIyODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T13:51:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T13:51:04Z"}, "message": "Auto merge of #110672 - Ezrashaw:allow-array-simd-in-inline-asm, r=workingjubilee\n\nallow array-style simd in inline asm\n\nRequired for [MCP#621](https://github.com/rust-lang/compiler-team/issues/621) to be implemented.\n\nr? `@workingjubilee`", "tree": {"sha": "ebd31e4385b48fe348fe027b945c699a602362c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd31e4385b48fe348fe027b945c699a602362c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b72460fe46a873da0c40582636c26e7675e92288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b72460fe46a873da0c40582636c26e7675e92288", "html_url": "https://github.com/rust-lang/rust/commit/b72460fe46a873da0c40582636c26e7675e92288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b72460fe46a873da0c40582636c26e7675e92288/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bcb326516ef7490db46de88b87a4c0990097fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bcb326516ef7490db46de88b87a4c0990097fe", "html_url": "https://github.com/rust-lang/rust/commit/64bcb326516ef7490db46de88b87a4c0990097fe"}, {"sha": "d31e8a499bdab8b70295580c288e5aa8d7f080dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31e8a499bdab8b70295580c288e5aa8d7f080dc", "html_url": "https://github.com/rust-lang/rust/commit/d31e8a499bdab8b70295580c288e5aa8d7f080dc"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "a28814681dbf66a9a0e728a7a3a4662bfc5d65fe", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -84,33 +84,45 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n             ty::Adt(adt, substs) if adt.repr().simd() => {\n                 let fields = &adt.non_enum_variant().fields;\n                 let elem_ty = fields[FieldIdx::from_u32(0)].ty(self.tcx, substs);\n-                match elem_ty.kind() {\n-                    ty::Never | ty::Error(_) => return None,\n-                    ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => {\n-                        Some(InlineAsmType::VecI8(fields.len() as u64))\n+\n+                let (size, ty) = match elem_ty.kind() {\n+                    ty::Array(ty, len) => {\n+                        if let Some(len) =\n+                            len.try_eval_target_usize(self.tcx, self.tcx.param_env(adt.did()))\n+                        {\n+                            (len, *ty)\n+                        } else {\n+                            return None;\n+                        }\n                     }\n+                    _ => (fields.len() as u64, elem_ty),\n+                };\n+\n+                match ty.kind() {\n+                    ty::Never | ty::Error(_) => return None,\n+                    ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => Some(InlineAsmType::VecI8(size)),\n                     ty::Int(IntTy::I16) | ty::Uint(UintTy::U16) => {\n-                        Some(InlineAsmType::VecI16(fields.len() as u64))\n+                        Some(InlineAsmType::VecI16(size))\n                     }\n                     ty::Int(IntTy::I32) | ty::Uint(UintTy::U32) => {\n-                        Some(InlineAsmType::VecI32(fields.len() as u64))\n+                        Some(InlineAsmType::VecI32(size))\n                     }\n                     ty::Int(IntTy::I64) | ty::Uint(UintTy::U64) => {\n-                        Some(InlineAsmType::VecI64(fields.len() as u64))\n+                        Some(InlineAsmType::VecI64(size))\n                     }\n                     ty::Int(IntTy::I128) | ty::Uint(UintTy::U128) => {\n-                        Some(InlineAsmType::VecI128(fields.len() as u64))\n+                        Some(InlineAsmType::VecI128(size))\n                     }\n                     ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize) => {\n                         Some(match self.tcx.sess.target.pointer_width {\n-                            16 => InlineAsmType::VecI16(fields.len() as u64),\n-                            32 => InlineAsmType::VecI32(fields.len() as u64),\n-                            64 => InlineAsmType::VecI64(fields.len() as u64),\n+                            16 => InlineAsmType::VecI16(size),\n+                            32 => InlineAsmType::VecI32(size),\n+                            64 => InlineAsmType::VecI64(size),\n                             _ => unreachable!(),\n                         })\n                     }\n-                    ty::Float(FloatTy::F32) => Some(InlineAsmType::VecF32(fields.len() as u64)),\n-                    ty::Float(FloatTy::F64) => Some(InlineAsmType::VecF64(fields.len() as u64)),\n+                    ty::Float(FloatTy::F32) => Some(InlineAsmType::VecF32(size)),\n+                    ty::Float(FloatTy::F64) => Some(InlineAsmType::VecF64(size)),\n                     _ => None,\n                 }\n             }"}, {"sha": "c2875f3e0a44446b541799a37d74240a0667e41c", "filename": "tests/assembly/asm/inline-asm-avx.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fassembly%2Fasm%2Finline-asm-avx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fassembly%2Fasm%2Finline-asm-avx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fasm%2Finline-asm-avx.rs?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -0,0 +1,25 @@\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type=lib\n+// only-x86_64\n+// ignore-sgx\n+\n+#![feature(portable_simd)]\n+\n+use std::simd::Simd;\n+use std::arch::asm;\n+\n+#[target_feature(enable = \"avx\")]\n+#[no_mangle]\n+// CHECK-LABEL: convert:\n+pub unsafe fn convert(a: *const f32) -> Simd<f32, 8> {\n+    // CHECK: vbroadcastss (%{{[er][a-ds0-9][xpi0-9]?}}), {{%ymm[0-7]}}\n+    let b: Simd<f32, 8>;\n+    unsafe {\n+        asm!(\n+            \"vbroadcastss {b}, [{a}]\",\n+            a = in(reg) a,\n+            b = out(ymm_reg) b,\n+        );\n+    }\n+    b\n+}"}]}