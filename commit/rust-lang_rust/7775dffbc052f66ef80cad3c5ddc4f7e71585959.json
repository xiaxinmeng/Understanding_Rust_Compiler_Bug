{"sha": "7775dffbc052f66ef80cad3c5ddc4f7e71585959", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzVkZmZiYzA1MmY2NmVmODBjYWQzYzVkZGM0ZjdlNzE1ODU5NTk=", "commit": {"author": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-07-02T12:55:20Z"}, "committer": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-07-02T12:55:20Z"}, "message": "alloc: `no_global_oom_handling`: disable `new()`s, `pin()`s, etc.\n\nThey are infallible, and could not be actually used because\nthey will trigger an error when monomorphized, but it is better\nto just remove them.\n\nLink: https://github.com/Rust-for-Linux/linux/pull/402\nSuggested-by: Gary Guo <gary@garyguo.net>\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>", "tree": {"sha": "f286fe0e6254982b95c8191da65d1c71e3e4c105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f286fe0e6254982b95c8191da65d1c71e3e4c105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7775dffbc052f66ef80cad3c5ddc4f7e71585959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7775dffbc052f66ef80cad3c5ddc4f7e71585959", "html_url": "https://github.com/rust-lang/rust/commit/7775dffbc052f66ef80cad3c5ddc4f7e71585959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7775dffbc052f66ef80cad3c5ddc4f7e71585959/comments", "author": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9fa13f705bb8b1c57c6b6fe95055ec4995a40f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fa13f705bb8b1c57c6b6fe95055ec4995a40f0", "html_url": "https://github.com/rust-lang/rust/commit/f9fa13f705bb8b1c57c6b6fe95055ec4995a40f0"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "e116ab6483c9b3638dc14ccf3d048a386a39e892", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7775dffbc052f66ef80cad3c5ddc4f7e71585959/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7775dffbc052f66ef80cad3c5ddc4f7e71585959/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7775dffbc052f66ef80cad3c5ddc4f7e71585959", "patch": "@@ -262,6 +262,7 @@ use core::marker::{self, PhantomData, Unpin, Unsize};\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw, forget};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n+#[cfg(not(no_global_oom_handling))]\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n #[cfg(not(no_global_oom_handling))]\n@@ -346,6 +347,7 @@ impl<T> Rc<T> {\n     ///\n     /// let five = Rc::new(5);\n     /// ```\n+    #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(value: T) -> Rc<T> {\n         // There is an implicit weak pointer owned by all the strong\n@@ -381,6 +383,7 @@ impl<T> Rc<T> {\n     ///     }\n     /// }\n     /// ```\n+    #[cfg(not(no_global_oom_handling))]\n     #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n         // Construct the inner in the \"uninitialized\" state with a single\n@@ -577,6 +580,7 @@ impl<T> Rc<T> {\n     }\n     /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n     /// `value` will be pinned in memory and unable to be moved.\n+    #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn pin(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n@@ -1473,6 +1477,7 @@ impl<T: ?Sized> Clone for Rc<T> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Rc<T> {\n     /// Creates a new `Rc<T>`, with the `Default` value for `T`.\n@@ -1731,6 +1736,7 @@ impl<T: ?Sized> fmt::Pointer for Rc<T> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Rc<T> {\n     /// Converts a generic type `T` into a `Rc<T>`"}, {"sha": "4b34a7dc894ae327d426b41a81c59502a25b4189", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7775dffbc052f66ef80cad3c5ddc4f7e71585959/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7775dffbc052f66ef80cad3c5ddc4f7e71585959/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7775dffbc052f66ef80cad3c5ddc4f7e71585959", "patch": "@@ -19,6 +19,7 @@ use core::marker::{PhantomData, Unpin, Unsize};\n use core::mem::size_of_val;\n use core::mem::{self, align_of_val_raw};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n+#[cfg(not(no_global_oom_handling))]\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n #[cfg(not(no_global_oom_handling))]\n@@ -332,6 +333,7 @@ impl<T> Arc<T> {\n     ///\n     /// let five = Arc::new(5);\n     /// ```\n+    #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(data: T) -> Arc<T> {\n@@ -365,6 +367,7 @@ impl<T> Arc<T> {\n     ///     me: me.clone(),\n     /// });\n     /// ```\n+    #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Arc<T> {\n@@ -485,6 +488,7 @@ impl<T> Arc<T> {\n \n     /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n     /// `data` will be pinned in memory and unable to be moved.\n+    #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn pin(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n@@ -2274,6 +2278,7 @@ impl<T: ?Sized> fmt::Pointer for Arc<T> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Default> Default for Arc<T> {\n     /// Creates a new `Arc<T>`, with the `Default` value for `T`.\n@@ -2298,6 +2303,7 @@ impl<T: ?Sized + Hash> Hash for Arc<T> {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Arc<T> {\n     /// Converts a `T` into an `Arc<T>`"}]}