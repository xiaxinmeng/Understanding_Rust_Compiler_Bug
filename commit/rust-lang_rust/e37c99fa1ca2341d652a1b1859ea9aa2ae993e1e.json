{"sha": "e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2M5OWZhMWNhMjM0MWQ2NTJhMWIxODU5ZWE5YWEyYWU5OTNlMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T17:50:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T17:50:26Z"}, "message": "Auto merge of #77224 - RalfJung:rollup-hdvb96c, r=RalfJung\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #75454 (Explicitly document the size guarantees that Option makes.)\n - #76631 (Add `x.py setup`)\n - #77076 (Add missing code examples on slice iter types)\n - #77093 (merge `need_type_info_err(_const)`)\n - #77122 (Add `#![feature(const_fn_floating_point_arithmetic)]`)\n - #77127 (Update mdBook)\n - #77161 (Remove TrustedLen requirement from BuilderMethods::switch)\n - #77166 (update Miri)\n - #77181 (Add doc alias for pointer primitive)\n - #77204 (Remove stray word from `ClosureKind::extends` docs)\n - #77207 (Rename `whence` to `span`)\n - #77211 (Remove unused #[allow(...)] statements from compiler/)\n\nFailed merges:\n\n - #77170 (Remove `#[rustc_allow_const_fn_ptr]` and add `#![feature(const_fn_fn_ptr_basics)]`)\n\nr? `@ghost`", "tree": {"sha": "b9e095a23ea81994bc8aaeffe492b6cd4aa5c7b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e095a23ea81994bc8aaeffe492b6cd4aa5c7b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "html_url": "https://github.com/rust-lang/rust/commit/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "html_url": "https://github.com/rust-lang/rust/commit/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52"}, {"sha": "9e02642fb3f1f78793c24bbad9c39368e2024968", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e02642fb3f1f78793c24bbad9c39368e2024968", "html_url": "https://github.com/rust-lang/rust/commit/9e02642fb3f1f78793c24bbad9c39368e2024968"}], "stats": {"total": 1152, "additions": 809, "deletions": 343}, "files": [{"sha": "05d77ec0c8fc9954806269ceff9908f8db290a94", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1848,9 +1848,9 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.2\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b75e31ae4eaa0e45e17ee2b6b9e3ed969c3c6ff12bb4c2e352c42493f4ebb706\"\n+checksum = \"29be448fcafb00c5a8966c4020c2a5ffbbc333e5b96d0bb5ef54b5bd0524d9ff\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\","}, {"sha": "166f7f53c41ac103c7226a4f65c21e3bc361be5b", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -15,7 +15,6 @@\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n #![cfg_attr(test, feature(test))]\n-#![allow(deprecated)]\n \n use rustc_data_structures::cold_path;\n use smallvec::SmallVec;"}, {"sha": "0c172dc33baf00c27b419e0c05ab50b3e55112c2", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -21,7 +21,6 @@ use rustc_target::abi::{self, Align, Size};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n-use std::iter::TrustedLen;\n use std::ops::{Deref, Range};\n use std::ptr;\n use tracing::debug;\n@@ -179,7 +178,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         v: &'ll Value,\n         else_llbb: &'ll BasicBlock,\n-        cases: impl ExactSizeIterator<Item = (u128, &'ll BasicBlock)> + TrustedLen,\n+        cases: impl ExactSizeIterator<Item = (u128, &'ll BasicBlock)>,\n     ) {\n         let switch =\n             unsafe { llvm::LLVMBuildSwitch(self.llbuilder, v, else_llbb, cases.len() as c_uint) };\n@@ -931,7 +930,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildSelect(self.llbuilder, cond, then_val, else_val, UNNAMED) }\n     }\n \n-    #[allow(dead_code)]\n     fn va_arg(&mut self, list: &'ll Value, ty: &'ll Type) -> &'ll Value {\n         unsafe { llvm::LLVMBuildVAArg(self.llbuilder, list, ty, UNNAMED) }\n     }"}, {"sha": "0992410a728bdac420428421d783add0e2bc3e91", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,5 +1,3 @@\n-#![allow(non_camel_case_types, non_snake_case)]\n-\n //! Code that is useful in various codegen modules.\n \n use crate::consts::{self, const_alloc_to_llvm};"}, {"sha": "987149cb4c25c53ac587ea1c6d97fcbf920522bc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1845,7 +1845,6 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         None\n     }\n \n-    #[allow(dead_code)]\n     fn is_artificial(&self) -> bool {\n         match self {\n             VariantInfo::Generator { .. } => true,"}, {"sha": "f14493e604368664f49e96ced4aae627f2184099", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -12,7 +12,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![feature(trusted_len)]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}, {"sha": "22ed4dd7576b594374e427c5fa0a51a5062eb840", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size};\n \n-#[allow(dead_code)]\n fn round_pointer_up_to_alignment(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n     addr: &'ll Value,"}, {"sha": "780b1d2cd9433cc698a4d85061084bf888fe238b", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,4 +1,4 @@\n-#![allow(non_camel_case_types, non_snake_case)]\n+#![allow(non_camel_case_types)]\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -25,7 +25,6 @@ pub enum IntPredicate {\n     IntSLE,\n }\n \n-#[allow(dead_code)]\n pub enum RealPredicate {\n     RealPredicateFalse,\n     RealOEQ,\n@@ -60,7 +59,6 @@ pub enum AtomicRmwBinOp {\n }\n \n pub enum AtomicOrdering {\n-    #[allow(dead_code)]\n     NotAtomic,\n     Unordered,\n     Monotonic,"}, {"sha": "d4f3bf377978462e60628781b6dba534fa1369a5", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -6,7 +6,6 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n-#![feature(trusted_len)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "b35b0f24208b267b4957c362fbd0b8e44e122389", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::Ty;\n use rustc_target::abi::{Abi, Align, Scalar, Size};\n use rustc_target::spec::HasTargetSpec;\n \n-use std::iter::TrustedLen;\n use std::ops::Range;\n \n #[derive(Copy, Clone)]\n@@ -60,7 +59,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n         &mut self,\n         v: Self::Value,\n         else_llbb: Self::BasicBlock,\n-        cases: impl ExactSizeIterator<Item = (u128, Self::BasicBlock)> + TrustedLen,\n+        cases: impl ExactSizeIterator<Item = (u128, Self::BasicBlock)>,\n     );\n     fn invoke(\n         &mut self,"}, {"sha": "90b0f25475181ecf5888e48632f6a948e4db649e", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -7,7 +7,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![allow(incomplete_features)]\n #![feature(array_windows)]\n #![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]"}, {"sha": "17b9e1ee7e8ba0ad1bbcb7e799ebaeb4ff184a5e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -584,6 +584,9 @@ declare_features! (\n     /// Allows non trivial generic constants which have to be manually propageted upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n+    /// Allows basic arithmetic on floating point types in a `const fn`.\n+    (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "820d664c07d924eda931c4a8f0859a6b621162a4", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -256,7 +256,6 @@ pub trait Visitor<'v>: Sized {\n     /// patterns described on `itemlikevisit::ItemLikeVisitor`. The only\n     /// reason to override this method is if you want a nested pattern\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n-    #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.item(id.id));\n         walk_list!(self, visit_item, opt_item);\n@@ -265,7 +264,6 @@ pub trait Visitor<'v>: Sized {\n     /// Like `visit_nested_item()`, but for trait items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n-    #[allow(unused_variables)]\n     fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n         walk_list!(self, visit_trait_item, opt_item);\n@@ -274,7 +272,6 @@ pub trait Visitor<'v>: Sized {\n     /// Like `visit_nested_item()`, but for impl items. See\n     /// `visit_nested_item()` for advice on when to override this\n     /// method.\n-    #[allow(unused_variables)]\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n         walk_list!(self, visit_impl_item, opt_item);"}, {"sha": "2f3089f1a92c10d9e7c9b5ad40c03e5cb16c2868", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 174, "deletions": 103, "changes": 277, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -176,7 +176,10 @@ fn closure_return_type_suggestion(\n         suggestion,\n         Applicability::HasPlaceholders,\n     );\n-    err.span_label(span, InferCtxt::missing_type_msg(&name, &descr, parent_name, parent_descr));\n+    err.span_label(\n+        span,\n+        InferCtxt::cannot_infer_msg(\"type\", &name, &descr, parent_name, parent_descr),\n+    );\n }\n \n /// Given a closure signature, return a `String` containing a list of all its argument types.\n@@ -217,65 +220,151 @@ impl Into<rustc_errors::DiagnosticId> for TypeAnnotationNeeded {\n     }\n }\n \n+/// Information about a constant or a type containing inference variables.\n+pub struct InferenceDiagnosticsData {\n+    pub name: String,\n+    pub span: Option<Span>,\n+    pub description: Cow<'static, str>,\n+    pub parent_name: Option<String>,\n+    pub parent_description: Option<&'static str>,\n+}\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn extract_type_name(\n+    /// Extracts data used by diagnostic for either types or constants\n+    /// which were stuck during inference.\n+    pub fn extract_inference_diagnostics_data(\n         &self,\n-        ty: Ty<'tcx>,\n+        arg: GenericArg<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n-    ) -> (String, Option<Span>, Cow<'static, str>, Option<String>, Option<&'static str>) {\n-        if let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind() {\n-            let mut inner = self.inner.borrow_mut();\n-            let ty_vars = &inner.type_variables();\n-            let var_origin = ty_vars.var_origin(ty_vid);\n-            if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) = var_origin.kind {\n-                let parent_def_id = def_id.and_then(|def_id| self.tcx.parent(def_id));\n-                let (parent_name, parent_desc) = if let Some(parent_def_id) = parent_def_id {\n-                    let parent_name = self\n-                        .tcx\n-                        .def_key(parent_def_id)\n-                        .disambiguated_data\n-                        .data\n-                        .get_opt_name()\n-                        .map(|parent_symbol| parent_symbol.to_string());\n-\n-                    (parent_name, Some(self.tcx.def_kind(parent_def_id).descr(parent_def_id)))\n-                } else {\n-                    (None, None)\n-                };\n+    ) -> InferenceDiagnosticsData {\n+        match arg.unpack() {\n+            GenericArgKind::Type(ty) => {\n+                if let ty::Infer(ty::TyVar(ty_vid)) = *ty.kind() {\n+                    let mut inner = self.inner.borrow_mut();\n+                    let ty_vars = &inner.type_variables();\n+                    let var_origin = ty_vars.var_origin(ty_vid);\n+                    if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n+                        var_origin.kind\n+                    {\n+                        let parent_def_id = def_id.and_then(|def_id| self.tcx.parent(def_id));\n+                        let (parent_name, parent_description) =\n+                            if let Some(parent_def_id) = parent_def_id {\n+                                let parent_name = self\n+                                    .tcx\n+                                    .def_key(parent_def_id)\n+                                    .disambiguated_data\n+                                    .data\n+                                    .get_opt_name()\n+                                    .map(|parent_symbol| parent_symbol.to_string());\n+\n+                                (\n+                                    parent_name,\n+                                    Some(self.tcx.def_kind(parent_def_id).descr(parent_def_id)),\n+                                )\n+                            } else {\n+                                (None, None)\n+                            };\n+\n+                        if name != kw::SelfUpper {\n+                            return InferenceDiagnosticsData {\n+                                name: name.to_string(),\n+                                span: Some(var_origin.span),\n+                                description: \"type parameter\".into(),\n+                                parent_name,\n+                                parent_description,\n+                            };\n+                        }\n+                    }\n+                }\n \n-                if name != kw::SelfUpper {\n-                    return (\n-                        name.to_string(),\n-                        Some(var_origin.span),\n-                        \"type parameter\".into(),\n-                        parent_name,\n-                        parent_desc,\n-                    );\n+                let mut s = String::new();\n+                let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+                if let Some(highlight) = highlight {\n+                    printer.region_highlight_mode = highlight;\n+                }\n+                let _ = ty.print(printer);\n+                InferenceDiagnosticsData {\n+                    name: s,\n+                    span: None,\n+                    description: ty.prefix_string(),\n+                    parent_name: None,\n+                    parent_description: None,\n                 }\n             }\n-        }\n+            GenericArgKind::Const(ct) => {\n+                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n+                    let origin =\n+                        self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n+                    if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n+                        origin.kind\n+                    {\n+                        let parent_def_id = self.tcx.parent(def_id);\n+                        let (parent_name, parent_description) =\n+                            if let Some(parent_def_id) = parent_def_id {\n+                                let parent_name = self\n+                                    .tcx\n+                                    .def_key(parent_def_id)\n+                                    .disambiguated_data\n+                                    .data\n+                                    .get_opt_name()\n+                                    .map(|parent_symbol| parent_symbol.to_string());\n+\n+                                (\n+                                    parent_name,\n+                                    Some(self.tcx.def_kind(parent_def_id).descr(parent_def_id)),\n+                                )\n+                            } else {\n+                                (None, None)\n+                            };\n+\n+                        return InferenceDiagnosticsData {\n+                            name: name.to_string(),\n+                            span: Some(origin.span),\n+                            description: \"const parameter\".into(),\n+                            parent_name,\n+                            parent_description,\n+                        };\n+                    }\n \n-        let mut s = String::new();\n-        let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n-        if let Some(highlight) = highlight {\n-            printer.region_highlight_mode = highlight;\n+                    debug_assert!(!origin.span.is_dummy());\n+                    let mut s = String::new();\n+                    let mut printer =\n+                        ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n+                    if let Some(highlight) = highlight {\n+                        printer.region_highlight_mode = highlight;\n+                    }\n+                    let _ = ct.print(printer);\n+                    InferenceDiagnosticsData {\n+                        name: s,\n+                        span: Some(origin.span),\n+                        description: \"the constant\".into(),\n+                        parent_name: None,\n+                        parent_description: None,\n+                    }\n+                } else {\n+                    bug!(\"unexpect const: {:?}\", ct);\n+                }\n+            }\n+            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n         }\n-        let _ = ty.print(printer);\n-        (s, None, ty.prefix_string(), None, None)\n     }\n \n-    // FIXME(eddyb) generalize all of this to handle `ty::Const` inference variables as well.\n-    pub fn need_type_info_err(\n+    pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n         span: Span,\n-        ty: Ty<'tcx>,\n+        arg: GenericArg<'tcx>,\n         error_code: TypeAnnotationNeeded,\n     ) -> DiagnosticBuilder<'tcx> {\n-        let ty = self.resolve_vars_if_possible(&ty);\n-        let (name, name_sp, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n+        let arg = self.resolve_vars_if_possible(&arg);\n+        let arg_data = self.extract_inference_diagnostics_data(arg, None);\n+        let kind_str = match arg.unpack() {\n+            GenericArgKind::Type(_) => \"type\",\n+            GenericArgKind::Const(_) => \"the value\",\n+            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n+        };\n \n-        let mut local_visitor = FindHirNodeVisitor::new(&self, ty.into(), span);\n+        let mut local_visitor = FindHirNodeVisitor::new(&self, arg, span);\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n             let mut s = String::new();\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n@@ -305,7 +394,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n         let err_span = if let Some(pattern) = local_visitor.found_arg_pattern {\n             pattern.span\n-        } else if let Some(span) = name_sp {\n+        } else if let Some(span) = arg_data.span {\n             // `span` here lets us point at `sum` instead of the entire right hand side expr:\n             // error[E0282]: type annotations needed\n             //  --> file2.rs:3:15\n@@ -352,7 +441,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => String::new(),\n         };\n \n-        // When `name` corresponds to a type argument, show the path of the full type we're\n+        // When `arg_data.name` corresponds to a type argument, show the path of the full type we're\n         // trying to infer. In the following example, `ty_msg` contains\n         // \" in `std::result::Result<i32, E>`\":\n         // ```\n@@ -391,11 +480,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         &mut err,\n                         &decl.output,\n                         self.tcx.hir().body(body_id),\n-                        &descr,\n-                        &name,\n+                        &arg_data.description,\n+                        &arg_data.name,\n                         &ret,\n-                        parent_name,\n-                        parent_descr,\n+                        arg_data.parent_name,\n+                        arg_data.parent_description,\n                     );\n                     // We don't want to give the other suggestions when the problem is the\n                     // closure return type.\n@@ -409,15 +498,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // nudge them in the right direction.\n                 format!(\"a boxed closure type like `Box<dyn Fn({}) -> {}>`\", args, ret)\n             }\n-            Some(ty) if is_named_and_not_impl_trait(ty) && name == \"_\" => {\n+            Some(ty) if is_named_and_not_impl_trait(ty) && arg_data.name == \"_\" => {\n                 let ty = ty_to_string(ty);\n                 format!(\"the explicit type `{}`, with the type parameters specified\", ty)\n             }\n-            Some(ty) if is_named_and_not_impl_trait(ty) && ty.to_string() != name => {\n+            Some(ty) if is_named_and_not_impl_trait(ty) && ty.to_string() != arg_data.name => {\n                 let ty = ty_to_string(ty);\n                 format!(\n                     \"the explicit type `{}`, where the type parameter `{}` is specified\",\n-                    ty, name,\n+                    ty, arg_data.name,\n                 )\n             }\n             _ => \"a type\".to_string(),\n@@ -534,7 +623,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         //   |               ^^^ cannot infer type for `S`\n         //   |\n         //   = note: type must be known at this point\n-        let span = name_sp.unwrap_or(err_span);\n+        let span = arg_data.span.unwrap_or(err_span);\n         if !err\n             .span\n             .span_labels()\n@@ -545,55 +634,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // Avoid multiple labels pointing at `span`.\n             err.span_label(\n                 span,\n-                InferCtxt::missing_type_msg(&name, &descr, parent_name, parent_descr),\n+                InferCtxt::cannot_infer_msg(\n+                    kind_str,\n+                    &arg_data.name,\n+                    &arg_data.description,\n+                    arg_data.parent_name,\n+                    arg_data.parent_description,\n+                ),\n             );\n         }\n \n         err\n     }\n \n-    // FIXME(const_generics): We should either try and merge this with `need_type_info_err`\n-    // or improve the errors created here.\n-    //\n-    // Unlike for type inference variables, we don't yet store the origin of const inference variables.\n-    // This is needed for to get a more relevant error span.\n-    pub fn need_type_info_err_const(\n-        &self,\n-        body_id: Option<hir::BodyId>,\n-        span: Span,\n-        ct: &'tcx ty::Const<'tcx>,\n-        error_code: TypeAnnotationNeeded,\n-    ) -> DiagnosticBuilder<'tcx> {\n-        let mut local_visitor = FindHirNodeVisitor::new(&self, ct.into(), span);\n-        if let Some(body_id) = body_id {\n-            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n-            local_visitor.visit_expr(expr);\n-        }\n-\n-        let mut param_name = None;\n-        let span = if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n-            let origin = self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n-            if let ConstVariableOriginKind::ConstParameterDefinition(param) = origin.kind {\n-                param_name = Some(param);\n-            }\n-            origin.span\n-        } else {\n-            local_visitor.target_span\n-        };\n-\n-        let error_code = error_code.into();\n-        let mut err =\n-            self.tcx.sess.struct_span_err_with_code(span, \"type annotations needed\", error_code);\n-\n-        if let Some(param_name) = param_name {\n-            err.note(&format!(\"cannot infer the value of the const parameter `{}`\", param_name));\n-        } else {\n-            err.note(\"unable to infer the value of a const parameter\");\n-        }\n-\n-        err\n-    }\n-\n     /// If the `FnSig` for the method call can be found and type arguments are identified as\n     /// needed, suggest annotating the call, otherwise point out the resulting type of the call.\n     fn annotate_method_call(\n@@ -647,7 +700,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let (name, _, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n+        let data = self.extract_inference_diagnostics_data(ty.into(), None);\n \n         let mut err = struct_span_err!(\n             self.tcx.sess,\n@@ -656,18 +709,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             \"type inside {} must be known in this context\",\n             kind,\n         );\n-        err.span_label(span, InferCtxt::missing_type_msg(&name, &descr, parent_name, parent_descr));\n+        err.span_label(\n+            span,\n+            InferCtxt::cannot_infer_msg(\n+                \"type\",\n+                &data.name,\n+                &data.description,\n+                data.parent_name,\n+                data.parent_description,\n+            ),\n+        );\n         err\n     }\n \n-    fn missing_type_msg(\n+    fn cannot_infer_msg(\n+        kind_str: &str,\n         type_name: &str,\n         descr: &str,\n         parent_name: Option<String>,\n         parent_descr: Option<&str>,\n-    ) -> Cow<'static, str> {\n+    ) -> String {\n         if type_name == \"_\" {\n-            \"cannot infer type\".into()\n+            format!(\"cannot infer {}\", kind_str)\n         } else {\n             let parent_desc = if let Some(parent_name) = parent_name {\n                 let parent_type_descr = if let Some(parent_descr) = parent_descr {\n@@ -681,7 +744,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 \"\".to_string()\n             };\n \n-            format!(\"cannot infer type for {} `{}`{}\", descr, type_name, parent_desc).into()\n+            // FIXME: We really shouldn't be dealing with strings here\n+            // but instead use a sensible enum for cases like this.\n+            let preposition = if \"the value\" == kind_str { \"of\" } else { \"for\" };\n+            // For example: \"cannot infer type for type parameter `T`\"\n+            format!(\n+                \"cannot infer {} {} {} `{}`{}\",\n+                kind_str, preposition, descr, type_name, parent_desc\n+            )\n+            .into()\n         }\n     }\n }"}, {"sha": "07a55c7f859c34f08dc6ee173edebbf92550baf0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1163,7 +1163,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             GenericParamDefKind::Const { .. } => {\n                 let origin = ConstVariableOrigin {\n-                    kind: ConstVariableOriginKind::ConstParameterDefinition(param.name),\n+                    kind: ConstVariableOriginKind::ConstParameterDefinition(\n+                        param.name,\n+                        param.def_id,\n+                    ),\n                     span,\n                 };\n                 let const_var_id =\n@@ -1275,7 +1278,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Gives temporary access to the region constraint data.\n-    #[allow(non_camel_case_types)] // bug with impl trait\n     pub fn with_region_constraints<R>(\n         &self,\n         op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,"}, {"sha": "9925444b869f95a8730a6c455c7db51a49ddfd50", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,5 +1,3 @@\n-#![allow(non_snake_case)]\n-\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_attr as attr;"}, {"sha": "a381290d46f97362974270c4409b8685f60715e2", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -21,7 +21,6 @@ impl RustString {\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n #[no_mangle]\n-#[allow(improper_ctypes_definitions)]\n pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     sr: &RustString,\n     ptr: *const c_char,"}, {"sha": "e7c054653accbd81de47e37af896a3cb0d71cd8d", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -9,7 +9,6 @@ use syn::{\n     ReturnType, Token, Type,\n };\n \n-#[allow(non_camel_case_types)]\n mod kw {\n     syn::custom_keyword!(query);\n }"}, {"sha": "94d4ad78e8d90373d748e8adaa1476e1002f1453", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -4,7 +4,6 @@ use std::collections::HashSet;\n use syn::parse::{Parse, ParseStream, Result};\n use syn::{braced, parse_macro_input, Ident, LitStr, Token};\n \n-#[allow(non_camel_case_types)]\n mod kw {\n     syn::custom_keyword!(Keywords);\n     syn::custom_keyword!(Symbols);"}, {"sha": "4d884dde393876d5680f00b84269b1b5bc6dfebb", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -4,8 +4,9 @@ use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify::{\n     self, EqUnifyValue, InPlace, NoError, UnificationTable, UnifyKey, UnifyValue,\n };\n+use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cmp;\n use std::marker::PhantomData;\n@@ -124,8 +125,7 @@ pub struct ConstVariableOrigin {\n pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n-    // FIXME(const_generics): Consider storing the `DefId` of the param here.\n-    ConstParameterDefinition(Symbol),\n+    ConstParameterDefinition(Symbol, DefId),\n     SubstitutionPlaceholder,\n }\n \n@@ -176,17 +176,17 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, Self::Error> {\n-        let val = match (value1.val, value2.val) {\n+        let (val, span) = match (value1.val, value2.val) {\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {\n                 bug!(\"equating two const variables, both of which have known values\")\n             }\n \n             // If one side is known, prefer that one.\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => {\n-                Ok(value1.val)\n+                (value1.val, value1.origin.span)\n             }\n             (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => {\n-                Ok(value2.val)\n+                (value2.val, value2.origin.span)\n             }\n \n             // If both sides are *unknown*, it hardly matters, does it?\n@@ -200,14 +200,14 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n                 // universe is the minimum of the two universes, because that is\n                 // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n-                Ok(ConstVariableValue::Unknown { universe })\n+                (ConstVariableValue::Unknown { universe }, value1.origin.span)\n             }\n-        }?;\n+        };\n \n         Ok(ConstVarValue {\n             origin: ConstVariableOrigin {\n                 kind: ConstVariableOriginKind::ConstInference,\n-                span: DUMMY_SP,\n+                span: span,\n             },\n             val,\n         })"}, {"sha": "492afa54445bc6df7fc0502787074617cb144c2b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2675,7 +2675,7 @@ impl<'tcx> ClosureKind {\n         }\n     }\n \n-    /// Returns `true` if this a type that impls this closure kind\n+    /// Returns `true` if a type that impls this closure kind\n     /// must also implement `other`.\n     pub fn extends(self, other: ty::ClosureKind) -> bool {\n         match (self, other) {"}, {"sha": "da857b0a403b4f909e8d0d9a332a7c5714577516", "filename": "compiler/rustc_middle/src/util/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcommon.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,5 +1,3 @@\n-#![allow(non_camel_case_types)]\n-\n use rustc_data_structures::sync::Lock;\n \n use std::fmt::Debug;"}, {"sha": "5f64eb3dba8ac4b4b442db830657404bb5af144a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -396,15 +396,15 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ) -> Option<RegionNameHighlight> {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, counter);\n-        let type_name = self.infcx.extract_type_name(&ty, Some(highlight)).0;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(ty.into(), Some(highlight)).name;\n \n         debug!(\n             \"highlight_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n             type_name, needle_fr\n         );\n         if type_name.find(&format!(\"'{}\", counter)).is_some() {\n             // Only add a label if we can confirm that a region was labelled.\n-\n             Some(RegionNameHighlight::CannotMatchHirTy(span, type_name))\n         } else {\n             None\n@@ -646,7 +646,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n-        let type_name = self.infcx.extract_type_name(&return_ty, Some(highlight)).0;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(return_ty.into(), Some(highlight)).name;\n \n         let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n \n@@ -698,7 +699,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n-        let type_name = self.infcx.extract_type_name(&yield_ty, Some(highlight)).0;\n+        let type_name =\n+            self.infcx.extract_inference_diagnostics_data(yield_ty.into(), Some(highlight)).name;\n \n         let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n "}, {"sha": "6c5d42296f72bdb7dcf6b00170fd14bab0f99b5e", "filename": "compiler/rustc_mir/src/borrow_check/prefixes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -33,7 +33,6 @@ pub(super) struct Prefixes<'cx, 'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-#[allow(dead_code)]\n pub(super) enum PrefixSet {\n     /// Doesn't stop until it returns the base case (a Local or\n     /// Static prefix)."}, {"sha": "7c630259186032e245999763c8184d41b68214ce", "filename": "compiler/rustc_mir/src/dataflow/move_paths/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -144,7 +144,6 @@ impl<'tcx> fmt::Display for MovePath<'tcx> {\n     }\n }\n \n-#[allow(unused)]\n struct MovePathLinearIter<'a, 'tcx, F> {\n     next: Option<(MovePathIndex, &'a MovePath<'tcx>)>,\n     fetch_next: F,"}, {"sha": "1d741085853609e926d7f997f5190b94431a95f0", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -112,6 +112,30 @@ impl NonConstOp for Abort {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct FloatingPointOp;\n+impl NonConstOp for FloatingPointOp {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        if ccx.const_kind() == hir::ConstContext::ConstFn {\n+            Status::Unstable(sym::const_fn_floating_point_arithmetic)\n+        } else {\n+            Status::Allowed\n+        }\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_fn_floating_point_arithmetic,\n+            span,\n+            &format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n+        )\n+        .emit();\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct NonPrimitiveOp;\n impl NonConstOp for NonPrimitiveOp {"}, {"sha": "73725c7b98eeee87f4b0a3a9dbf0a7feaf28b65e", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -540,8 +540,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n             Rvalue::UnaryOp(_, ref operand) => {\n                 let ty = operand.ty(self.body, self.tcx);\n-                if !(ty.is_integral() || ty.is_bool()) {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                if is_int_bool_or_char(ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(self.span, \"non-primitive type in `Rvalue::UnaryOp`: {:?}\", ty);\n                 }\n             }\n \n@@ -550,7 +554,9 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 let lhs_ty = lhs.ty(self.body, self.tcx);\n                 let rhs_ty = rhs.ty(self.body, self.tcx);\n \n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs_ty.kind() {\n+                if is_int_bool_or_char(lhs_ty) && is_int_bool_or_char(rhs_ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if lhs_ty.is_fn_ptr() || lhs_ty.is_unsafe_ptr() {\n                     assert_eq!(lhs_ty, rhs_ty);\n                     assert!(\n                         op == BinOp::Eq\n@@ -563,12 +569,15 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     );\n \n                     self.check_op(ops::RawPtrComparison);\n-                }\n-\n-                if !(lhs_ty.is_integral() || lhs_ty.is_bool() || lhs_ty.is_char())\n-                    || !(rhs_ty.is_integral() || rhs_ty.is_bool() || rhs_ty.is_char())\n-                {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                } else if lhs_ty.is_floating_point() || rhs_ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(\n+                        self.span,\n+                        \"non-primitive type in `Rvalue::BinaryOp`: {:?} \u26ac {:?}\",\n+                        lhs_ty,\n+                        rhs_ty\n+                    );\n                 }\n             }\n         }\n@@ -867,3 +876,7 @@ fn place_as_reborrow(\n         }\n     })\n }\n+\n+fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n+    ty.is_bool() || ty.is_integral() || ty.is_char()\n+}"}, {"sha": "12a268d5b1dda15a1204bbd88afb89c6b90aedd3", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,5 +1,3 @@\n-#![allow(non_camel_case_types)]\n-\n pub use self::FileMatch::*;\n \n use std::borrow::Cow;"}, {"sha": "12134a85f45c5924c954cb355471aded2d596a70", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -352,6 +352,7 @@ symbols! {\n         const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n+        const_fn_floating_point_arithmetic,\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,"}, {"sha": "e40067202e112c40c5aed680bc8fe9874799d273", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -32,6 +32,7 @@ pub enum AutoTraitResult<A> {\n     NegativeImpl,\n }\n \n+#[allow(dead_code)]\n impl<A> AutoTraitResult<A> {\n     fn is_auto(&self) -> bool {\n         match *self {"}, {"sha": "1b234a1535c978be426d12666fbc7b9bd67863e0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -20,7 +20,6 @@ use rustc_hir::Node;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, fast_reject, AdtKind, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n     TypeFoldable, WithConstness,\n@@ -1513,10 +1512,21 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0282).emit();\n+                    self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        self_ty.into(),\n+                        ErrorCode::E0282,\n+                    )\n+                    .emit();\n                     return;\n                 }\n-                let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n+                let mut err = self.emit_inference_failure_err(\n+                    body_id,\n+                    span,\n+                    self_ty.into(),\n+                    ErrorCode::E0283,\n+                );\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n@@ -1580,17 +1590,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                match arg.unpack() {\n-                    GenericArgKind::Lifetime(lt) => {\n-                        span_bug!(span, \"unexpected well formed predicate: {:?}\", lt)\n-                    }\n-                    GenericArgKind::Type(ty) => {\n-                        self.need_type_info_err(body_id, span, ty, ErrorCode::E0282)\n-                    }\n-                    GenericArgKind::Const(ct) => {\n-                        self.need_type_info_err_const(body_id, span, ct, ErrorCode::E0282)\n-                    }\n-                }\n+                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282)\n             }\n \n             ty::PredicateAtom::Subtype(data) => {\n@@ -1601,7 +1601,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.need_type_info_err(body_id, span, a, ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282)\n             }\n             ty::PredicateAtom::Projection(data) => {\n                 let trait_ref = ty::Binder::bind(data).to_poly_trait_ref(self.tcx);\n@@ -1612,7 +1612,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 if self_ty.needs_infer() && ty.needs_infer() {\n                     // We do this for the `foo.collect()?` case to produce a suggestion.\n-                    let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n+                    let mut err = self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        self_ty.into(),\n+                        ErrorCode::E0284,\n+                    );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 } else {"}, {"sha": "c93087a18cf04575340da0d5a5b7b4727da5e012", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,7 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n \n-#[allow(dead_code)]\n pub mod auto_trait;\n mod chalk_fulfill;\n pub mod codegen;"}, {"sha": "57f1fedacbe5a38d6fc12633990c28f46e405414", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2148,7 +2148,6 @@ trait TraitObligationExt<'tcx> {\n }\n \n impl<'tcx> TraitObligationExt<'tcx> for TraitObligation<'tcx> {\n-    #[allow(unused_comparisons)]\n     fn derived_cause(\n         &self,\n         variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,"}, {"sha": "79d6c7dbfdae264e980b88b96c498bb6fb5e4ddf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2991,7 +2991,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.need_type_info_err((**self).body_id, sp, ty, E0282)\n+                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282)\n                     .note(\"type must be known at this point\")\n                     .emit();\n             }"}, {"sha": "6fd7277a1c332df50cfed0aef3b7d1482f9c498e", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -653,18 +653,23 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     fn report_type_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t, E0282)\n+                .emit_inference_failure_err(\n+                    Some(self.body.id()),\n+                    self.span.to_span(self.tcx),\n+                    t.into(),\n+                    E0282,\n+                )\n                 .emit();\n         }\n     }\n \n     fn report_const_error(&self, c: &'tcx ty::Const<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err_const(\n+                .emit_inference_failure_err(\n                     Some(self.body.id()),\n                     self.span.to_span(self.tcx),\n-                    c,\n+                    c.into(),\n                     E0282,\n                 )\n                 .emit();"}, {"sha": "e8fa2b13a9f24fe3e84e4722431daa6de0ba72db", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -56,7 +56,6 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![allow(non_camel_case_types)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "30fb87b0226455a7a2fb7bf50cf4b1caad4464bc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -82,6 +82,7 @@\n #![feature(const_pin)]\n #![feature(const_fn_union)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]"}, {"sha": "0cfb4af59b956203b160c031fd7e05e7732847c5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -70,10 +70,23 @@\n //! }\n //! ```\n //!\n-//! This usage of [`Option`] to create safe nullable pointers is so\n-//! common that Rust does special optimizations to make the\n-//! representation of [`Option`]`<`[`Box<T>`]`>` a single pointer. Optional pointers\n-//! in Rust are stored as efficiently as any other pointer type.\n+//! # Representation\n+//!\n+//! Rust guarantees to optimize the following types `T` such that\n+//! [`Option<T>`] has the same size as `T`:\n+//!\n+//! * [`Box<U>`]\n+//! * `&U`\n+//! * `&mut U`\n+//! * `fn`, `extern \"C\" fn`\n+//! * [`num::NonZero*`]\n+//! * [`ptr::NonNull<U>`]\n+//! * `#[repr(transparent)]` struct around one of the types in this list.\n+//!\n+//! It is further guaranteed that, for the cases above, one can\n+//! [`mem::transmute`] from all valid values of `T` to `Option<T>` and\n+//! from `Some::<T>(_)` to `T` (but transmuting `None::<T>` to `T`\n+//! is undefined behaviour).\n //!\n //! # Examples\n //!"}, {"sha": "793cbf994956f695dda6a8ce4c8b402cee91f59b", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -319,6 +319,13 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n ///\n /// This struct is created by the [`split`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split`]: ../../std/primitive.slice.html#method.split\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -434,6 +441,15 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let slice = [10, 40, 33, 20];\n+/// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -539,6 +555,13 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n ///\n /// This struct is created by the [`split_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -661,6 +684,15 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`split_inclusive_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(split_inclusive)]\n+///\n+/// let mut v = [10, 40, 30, 20, 60, 50];\n+/// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n+/// ```\n+///\n /// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n /// [slices]: ../../std/primitive.slice.html\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n@@ -775,6 +807,13 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n ///\n /// This struct is created by the [`rsplit`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -854,6 +893,13 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// This struct is created by the [`rsplit_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [11, 22, 33, 0, 44, 55];\n+/// let iter = slice.rsplit_mut(|num| *num == 0);\n+/// ```\n+///\n /// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -966,6 +1012,13 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n ///\n /// This struct is created by the [`splitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -999,6 +1052,13 @@ where\n ///\n /// This struct is created by the [`rsplitn`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1031,6 +1091,13 @@ where\n ///\n /// This struct is created by the [`splitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.splitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1064,6 +1131,13 @@ where\n ///\n /// This struct is created by the [`rsplitn_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = [10, 40, 30, 20, 60, 50];\n+/// let iter = slice.rsplitn_mut(2, |num| *num % 3 == 0);\n+/// ```\n+///\n /// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n /// [slices]: ../../std/primitive.slice.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1100,6 +1174,13 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n ///\n /// This struct is created by the [`windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['r', 'u', 's', 't'];\n+/// let iter = slice.windows(2);\n+/// ```\n+///\n /// [`windows`]: ../../std/primitive.slice.html#method.windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1239,6 +1320,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n ///\n /// This struct is created by the [`chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks(2);\n+/// ```\n+///\n /// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1400,6 +1488,13 @@ unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n ///\n /// This struct is created by the [`chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_mut(2);\n+/// ```\n+///\n /// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -1559,6 +1654,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact(2);\n+/// ```\n+///\n /// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1708,6 +1810,13 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n ///\n /// This struct is created by the [`chunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.chunks_exact_mut(2);\n+/// ```\n+///\n /// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -1850,6 +1959,15 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n ///\n /// This struct is created by the [`array_windows`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_windows)]\n+///\n+/// let slice = [0, 1, 2, 3];\n+/// let iter = slice.array_windows::<2>();\n+/// ```\n+///\n /// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug, Clone, Copy)]\n@@ -1962,6 +2080,15 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n ///\n /// This struct is created by the [`array_chunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks::<2>();\n+/// ```\n+///\n /// [`array_chunks`]: ../../std/primitive.slice.html#method.array_chunks\n /// [`remainder`]: ArrayChunks::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2080,6 +2207,15 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N>\n ///\n /// This struct is created by the [`array_chunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(array_chunks)]\n+///\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.array_chunks_mut::<2>();\n+/// ```\n+///\n /// [`array_chunks_mut`]: ../../std/primitive.slice.html#method.array_chunks_mut\n /// [`into_remainder`]: ../../std/slice/struct.ArrayChunksMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2190,6 +2326,13 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T,\n ///\n /// This struct is created by the [`rchunks`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks(2);\n+/// ```\n+///\n /// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2347,6 +2490,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n ///\n /// This struct is created by the [`rchunks_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_mut(2);\n+/// ```\n+///\n /// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n@@ -2504,6 +2654,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact(2);\n+/// ```\n+///\n /// [`rchunks_exact`]: ../../std/primitive.slice.html#method.rchunks_exact\n /// [`remainder`]: ChunksExact::remainder\n /// [slices]: ../../std/primitive.slice.html\n@@ -2657,6 +2814,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n ///\n /// This struct is created by the [`rchunks_exact_mut`] method on [slices].\n ///\n+/// # Example\n+///\n+/// ```\n+/// let mut slice = ['l', 'o', 'r', 'e', 'm'];\n+/// let iter = slice.rchunks_exact_mut(2);\n+/// ```\n+///\n /// [`rchunks_exact_mut`]: ../../std/primitive.slice.html#method.rchunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n /// [slices]: ../../std/primitive.slice.html"}, {"sha": "d03428dd0828293720e287dc401f9d286807f4cf", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -236,6 +236,7 @@\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n #![feature(const_ip)]"}, {"sha": "81bbf37637875e000762b3f9176c1d60d3269cdd", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -384,6 +384,7 @@ mod prim_char {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_unit {}\n \n+#[doc(alias = \"ptr\")]\n #[doc(primitive = \"pointer\")]\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`."}, {"sha": "dfb39c54c17235dc4556fc198606e5dd520182af", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -6,6 +6,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n+- Add `x.py setup` [#76631](https://github.com/rust-lang/rust/pull/76631)\n - Add a changelog for x.py [#76626](https://github.com/rust-lang/rust/pull/76626)\n - Optionally, download LLVM from CI on Linux and NixOS\n   + [#76439](https://github.com/rust-lang/rust/pull/76349)"}, {"sha": "637083e08d510e2f4023fe6b7b5f64b44bb6cc0d", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -7,21 +7,34 @@\n \n use std::env;\n \n-use bootstrap::{Build, Config};\n+use bootstrap::{Build, Config, Subcommand};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     let config = Config::parse(&args);\n \n     let changelog_suggestion = check_version(&config);\n-    if let Some(suggestion) = &changelog_suggestion {\n+\n+    // NOTE: Since `./configure` generates a `config.toml`, distro maintainers will see the\n+    // changelog warning, not the `x.py setup` message.\n+    let suggest_setup = !config.config.exists() && !matches!(config.cmd, Subcommand::Setup { .. });\n+    if suggest_setup {\n+        println!(\"warning: you have not made a `config.toml`\");\n+        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+    } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n     }\n \n     Build::new(config).build();\n \n-    if let Some(suggestion) = changelog_suggestion {\n+    if suggest_setup {\n+        println!(\"warning: you have not made a `config.toml`\");\n+        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+    } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n+    }\n+\n+    if suggest_setup || changelog_suggestion.is_some() {\n         println!(\"note: this message was printed twice to make it more likely to be seen\");\n     }\n }"}, {"sha": "4aaaeb8a93bda903e799b25317cc762b0677a001", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -549,7 +549,9 @@ impl<'a> Builder<'a> {\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n-            Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n+            Subcommand::Format { .. } | Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n+                panic!()\n+            }\n         };\n \n         Self::new_internal(build, kind, paths.to_owned())"}, {"sha": "b14746dabb93a83eff5cdf9caea130b602668bd9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -73,6 +73,8 @@ pub struct Config {\n     pub keep_stage: Vec<u32>,\n     pub keep_stage_std: Vec<u32>,\n     pub src: PathBuf,\n+    // defaults to `config.toml`\n+    pub config: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -513,6 +515,7 @@ impl Config {\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.deny_warnings = true;\n         config.missing_tools = false;\n+        config.config = PathBuf::from(\"config.toml\");\n \n         // set by bootstrap.py\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -558,7 +561,7 @@ impl Config {\n         let get_toml = |file: PathBuf| {\n             use std::process;\n \n-            let contents = t!(fs::read_to_string(&file), \"configuration file did not exist\");\n+            let contents = t!(fs::read_to_string(&file), \"`include` config not found\");\n             match toml::from_str(&contents) {\n                 Ok(table) => table,\n                 Err(err) => {\n@@ -644,6 +647,7 @@ impl Config {\n             | Subcommand::Clippy { .. }\n             | Subcommand::Fix { .. }\n             | Subcommand::Run { .. }\n+            | Subcommand::Setup { .. }\n             | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n         };\n \n@@ -668,6 +672,7 @@ impl Config {\n                 | Subcommand::Clippy { .. }\n                 | Subcommand::Fix { .. }\n                 | Subcommand::Run { .. }\n+                | Subcommand::Setup { .. }\n                 | Subcommand::Format { .. } => {}\n             }\n         }"}, {"sha": "a12fc50afad587cc10be1d2e58c1bf065e8d5c98", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -7,6 +7,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n+use build_helper::t;\n use getopts::Options;\n \n use crate::builder::Builder;\n@@ -89,6 +90,9 @@ pub enum Subcommand {\n     Run {\n         paths: Vec<PathBuf>,\n     },\n+    Setup {\n+        path: String,\n+    },\n }\n \n impl Default for Subcommand {\n@@ -199,6 +203,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 || (s == \"install\")\n                 || (s == \"run\")\n                 || (s == \"r\")\n+                || (s == \"setup\")\n         });\n         let subcommand = match subcommand {\n             Some(s) => s,\n@@ -453,10 +458,21 @@ Arguments:\n     At least a tool needs to be called.\",\n                 );\n             }\n+            \"setup\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand accepts a 'profile' to use for builds. For example:\n+\n+        ./x.py setup library\n+\n+    The profile is optional and you will be prompted interactively if it is not given.\",\n+                );\n+            }\n             _ => {}\n         };\n         // Get any optional paths which occur after the subcommand\n-        let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n+        let mut paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n         let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n         let verbose = matches.opt_present(\"verbose\");\n@@ -508,6 +524,20 @@ Arguments:\n                 }\n                 Subcommand::Run { paths }\n             }\n+            \"setup\" => {\n+                let path = if paths.len() > 1 {\n+                    println!(\"\\nat most one profile can be passed to setup\\n\");\n+                    usage(1, &opts, verbose, &subcommand_help)\n+                } else if let Some(path) = paths.pop() {\n+                    t!(path.into_os_string().into_string().map_err(|path| format!(\n+                        \"{} is not a valid UTF8 string\",\n+                        path.to_string_lossy()\n+                    )))\n+                } else {\n+                    t!(crate::setup::interactive_path())\n+                };\n+                Subcommand::Setup { path }\n+            }\n             _ => {\n                 usage(1, &opts, verbose, &subcommand_help);\n             }"}, {"sha": "4cc72f5f39c979755994039162804cf76071c107", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -141,6 +141,7 @@ mod metadata;\n mod native;\n mod run;\n mod sanity;\n+mod setup;\n mod test;\n mod tool;\n mod toolstate;\n@@ -165,7 +166,7 @@ mod job {\n \n use crate::cache::{Interned, INTERNER};\n pub use crate::config::Config;\n-use crate::flags::Subcommand;\n+pub use crate::flags::Subcommand;\n \n const LLVM_TOOLS: &[&str] = &[\n     \"llvm-nm\", // used to inspect binaries; it shows symbol names, their sizes and visibility\n@@ -470,6 +471,10 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n+        if let Subcommand::Setup { path: include_name } = &self.config.cmd {\n+            return setup::setup(&self.config.src, include_name);\n+        }\n+\n         {\n             let builder = builder::Builder::new(&self);\n             if let Some(path) = builder.paths.get(0) {"}, {"sha": "ba593cadbad817a490e14675f33864d40fca5aa7", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -10,7 +10,7 @@ impl Step for ExpandYamlAnchors {\n \n     /// Runs the `expand-yaml_anchors` tool.\n     ///\n-    /// This tool in `src/tools` read the CI configuration files written in YAML and expands the\n+    /// This tool in `src/tools` reads the CI configuration files written in YAML and expands the\n     /// anchors in them, since GitHub Actions doesn't support them.\n     fn run(self, builder: &Builder<'_>) {\n         builder.info(\"Expanding YAML anchors in the GitHub Actions configuration\");"}, {"sha": "9d3a889aa008ef5d0e5e93e1b891e9ac457d83b6", "filename": "src/bootstrap/setup.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,88 @@\n+use crate::t;\n+use std::path::{Path, PathBuf};\n+use std::{\n+    env, fs,\n+    io::{self, Write},\n+};\n+\n+pub fn setup(src_path: &Path, include_name: &str) {\n+    let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n+\n+    if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n+        let file = cfg_file.unwrap();\n+        println!(\n+            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n+            file.display()\n+        );\n+        println!(\n+            \"help: try adding `profile = \\\"{}\\\"` at the top of {}\",\n+            include_name,\n+            file.display()\n+        );\n+        println!(\n+            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.toml.{}\",\n+            src_path.display(),\n+            include_name\n+        );\n+        std::process::exit(1);\n+    }\n+\n+    let path = cfg_file.unwrap_or_else(|| src_path.join(\"config.toml\"));\n+    let settings = format!(\n+        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n+    profile = \\\"{}\\\"\\n\",\n+        include_name\n+    );\n+    t!(fs::write(path, settings));\n+\n+    let include_path =\n+        format!(\"{}/src/bootstrap/defaults/config.toml.{}\", src_path.display(), include_name);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path);\n+\n+    let suggestions = match include_name {\n+        \"codegen\" | \"compiler\" => &[\"check\", \"build\", \"test\"][..],\n+        \"library\" => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n+        \"user\" => &[\"dist\", \"build\"],\n+        _ => return,\n+    };\n+\n+    println!(\"To get started, try one of the following commands:\");\n+    for cmd in suggestions {\n+        println!(\"- `x.py {}`\", cmd);\n+    }\n+\n+    if include_name != \"user\" {\n+        println!(\n+            \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n+        );\n+    }\n+}\n+\n+// Used to get the path for `Subcommand::Setup`\n+pub fn interactive_path() -> io::Result<String> {\n+    let mut input = String::new();\n+    println!(\n+        \"Welcome to the Rust project! What do you want to do with x.py?\n+a) Contribute to the standard library\n+b) Contribute to the compiler\n+c) Contribute to the compiler, and also modify LLVM or codegen\n+d) Install Rust from source\"\n+    );\n+    let template = loop {\n+        print!(\"Please choose one (a/b/c/d): \");\n+        io::stdout().flush()?;\n+        io::stdin().read_line(&mut input)?;\n+        break match input.trim().to_lowercase().as_str() {\n+            \"a\" | \"lib\" | \"library\" => \"library\",\n+            \"b\" | \"compiler\" => \"compiler\",\n+            \"c\" | \"llvm\" => \"llvm\",\n+            \"d\" | \"user\" | \"maintainer\" => \"maintainer\",\n+            _ => {\n+                println!(\"error: unrecognized option '{}'\", input.trim());\n+                println!(\"note: press Ctrl+C to exit\");\n+                continue;\n+            }\n+        };\n+    };\n+    Ok(template.to_owned())\n+}"}, {"sha": "788bb5e787b829d937ccc6dbd43f85d86b431d25", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -256,7 +256,7 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n-        let whence = {\n+        let span = {\n             let sm = cx.sess().source_map();\n             let outer = sm.lookup_char_pos(self.where_outer.lo());\n             let inner = sm.lookup_char_pos(self.where_inner.lo());\n@@ -272,7 +272,7 @@ impl Clean<Item> for doctree::Module<'_> {\n         Item {\n             name: Some(name),\n             attrs,\n-            source: whence.clean(cx),\n+            source: span.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -912,7 +912,7 @@ impl Clean<Item> for doctree::Function<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -1020,7 +1020,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1044,7 +1044,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1830,7 +1830,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1850,7 +1850,7 @@ impl Clean<Item> for doctree::Union<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1880,7 +1880,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1899,7 +1899,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Inherited,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -2047,7 +2047,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2062,7 +2062,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2093,7 +2093,7 @@ impl Clean<Item> for doctree::Static<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2114,7 +2114,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2168,7 +2168,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n         let make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2219,7 +2219,7 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n         vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: DefId { krate: self.cnum, index: CRATE_DEF_INDEX },\n             visibility: self.vis.clean(cx),\n             stability: None,\n@@ -2284,7 +2284,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n         vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: DefId::local(CRATE_DEF_INDEX),\n             visibility: self.vis.clean(cx),\n             stability: None,\n@@ -2326,7 +2326,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2342,7 +2342,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n         Item {\n             name: Some(name.clone()),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Public,\n             stability: cx.stability(self.hid).clean(cx),\n             deprecation: cx.deprecation(self.hid).clean(cx),\n@@ -2367,7 +2367,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Public,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),"}, {"sha": "cfa51dcf4f1d198833b8614d38a88fc41c54cf76", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -89,7 +89,7 @@ pub struct Struct<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Union<'hir> {\n@@ -100,7 +100,7 @@ pub struct Union<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Enum<'hir> {\n@@ -109,7 +109,7 @@ pub struct Enum<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub name: Symbol,\n }\n \n@@ -118,7 +118,7 @@ pub struct Variant<'hir> {\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n     pub def: &'hir hir::VariantData<'hir>,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Function<'hir> {\n@@ -128,7 +128,7 @@ pub struct Function<'hir> {\n     pub name: Symbol,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub header: hir::FnHeader,\n-    pub whence: Span,\n+    pub span: Span,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub body: hir::BodyId,\n }\n@@ -139,7 +139,7 @@ pub struct Typedef<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -148,7 +148,7 @@ pub struct OpaqueTy<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -161,7 +161,7 @@ pub struct Static<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Constant<'hir> {\n@@ -171,7 +171,7 @@ pub struct Constant<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Trait<'hir> {\n@@ -183,7 +183,7 @@ pub struct Trait<'hir> {\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -193,7 +193,7 @@ pub struct TraitAlias<'hir> {\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -208,7 +208,7 @@ pub struct Impl<'hir> {\n     pub for_: &'hir hir::Ty<'hir>,\n     pub items: Vec<&'hir hir::ImplItem<'hir>>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n }\n@@ -219,7 +219,7 @@ pub struct ForeignItem<'hir> {\n     pub name: Symbol,\n     pub kind: &'hir hir::ForeignItemKind<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n // For Macro we store the DefId instead of the NodeId, since we also create\n@@ -229,7 +229,7 @@ pub struct Macro<'hir> {\n     pub hid: hir::HirId,\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub matchers: Vec<Span>,\n     pub imported_from: Option<Symbol>,\n }\n@@ -240,7 +240,7 @@ pub struct ExternCrate<'hir> {\n     pub path: Option<String>,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Import<'hir> {\n@@ -250,7 +250,7 @@ pub struct Import<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub path: &'hir hir::Path<'hir>,\n     pub glob: bool,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct ProcMacro<'hir> {\n@@ -259,7 +259,7 @@ pub struct ProcMacro<'hir> {\n     pub kind: MacroKind,\n     pub helpers: Vec<Symbol>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {"}, {"sha": "33578dc0619d11f34f4dc45a3a51cbb65d46ae2a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n-            whence: item.span,\n+            span: item.span,\n         }\n     }\n \n@@ -120,7 +120,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n-            whence: item.span,\n+            span: item.span,\n         }\n     }\n \n@@ -142,14 +142,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     id: v.id,\n                     attrs: &v.attrs,\n                     def: &v.data,\n-                    whence: v.span,\n+                    span: v.span,\n                 })\n                 .collect(),\n             vis: &it.vis,\n             generics,\n             attrs: &it.attrs,\n             id: it.hir_id,\n-            whence: it.span,\n+            span: it.span,\n         }\n     }\n \n@@ -208,7 +208,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     kind,\n                     helpers,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                 });\n             }\n             None => {\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     decl,\n                     name,\n-                    whence: item.span,\n+                    span: item.span,\n                     generics,\n                     header,\n                     body,\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     path: orig_name.map(|x| x.to_string()),\n                     vis: &item.vis,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                 })\n             }\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n@@ -444,7 +444,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     path,\n                     glob: is_glob,\n-                    whence: item.span,\n+                    span: item.span,\n                 });\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -476,7 +476,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: ident.name,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.typedefs.push(t);\n@@ -487,7 +487,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: ident.name,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.opaque_tys.push(t);\n@@ -500,7 +500,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     id: item.hir_id,\n                     name: ident.name,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.statics.push(s);\n@@ -515,7 +515,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         id: item.hir_id,\n                         name: ident.name,\n                         attrs: &item.attrs,\n-                        whence: item.span,\n+                        span: item.span,\n                         vis: &item.vis,\n                     };\n                     om.constants.push(s);\n@@ -532,7 +532,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     bounds,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.traits.push(t);\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     bounds,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.trait_aliases.push(t);\n@@ -577,7 +577,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         items,\n                         attrs: &item.attrs,\n                         id: item.hir_id,\n-                        whence: item.span,\n+                        span: item.span,\n                         vis: &item.vis,\n                     };\n                     om.impls.push(i);\n@@ -603,7 +603,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             kind: &item.kind,\n             vis: &item.vis,\n             attrs: &item.attrs,\n-            whence: item.span,\n+            span: item.span,\n         });\n     }\n \n@@ -623,7 +623,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id(),\n             attrs: &def.attrs,\n             name: renamed.unwrap_or(def.ident.name),\n-            whence: def.span,\n+            span: def.span,\n             matchers,\n             imported_from: None,\n         }"}, {"sha": "b438ed3ad6508cb2100bc1ea060ba5f56368b264", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:12:5\n    |\n LL |     foo();\n-   |     ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `X`\n+   |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "b438ed3ad6508cb2100bc1ea060ba5f56368b264", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:12:5\n    |\n LL |     foo();\n-   |     ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `X`\n+   |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "9a1dd1a825895166d48281ebf29acf9d6e1c1637", "filename": "src/test/ui/const-generics/infer/issue-77092.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,16 @@\n+#![feature(min_const_generics)]\n+\n+use std::convert::TryInto;\n+\n+fn take_array_from_mut<T, const N: usize>(data: &mut [T], start: usize) -> &mut [T; N] {\n+    (&mut data[start .. start + N]).try_into().unwrap()\n+}\n+\n+fn main() {\n+    let mut arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n+\n+    for i in 1 .. 4 {\n+        println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n+        //~^ ERROR type annotations needed\n+    }\n+}"}, {"sha": "e84ff8baeea53ef03f818aaacbe769f88e1de463", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-77092.rs:13:26\n+   |\n+LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n+   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of the constant `{_: usize}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "1fb0b23cf11574d7e997fea6e607e4ac12c00a83", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/method-chain.rs:21:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `N`\n+   |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n \n error: aborting due to previous error\n "}, {"sha": "1fb0b23cf11574d7e997fea6e607e4ac12c00a83", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/method-chain.rs:21:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `N`\n+   |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n \n error: aborting due to previous error\n "}, {"sha": "7a451903e9630581760706173e315db758c6dfce", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `N`\n+   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "7a451903e9630581760706173e315db758c6dfce", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -2,9 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^\n-   |\n-   = note: cannot infer the value of the const parameter `N`\n+   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n \n error: aborting due to previous error\n "}, {"sha": "094ae7378bce827e4c5c88931f8477701bc7843c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -4,7 +4,7 @@ const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n //~^ ERROR function pointers in const fn are unstable\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n-//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+//~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n //~^ ERROR casting pointers to integers\n "}, {"sha": "fcc34f358f9f9d044a1b64b9bf81b1cf032f7418", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -7,14 +7,14 @@ LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n    |\n LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    |                                      ^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/const-extern-fn-min-const-fn.rs:8:48"}, {"sha": "ae24f8f65009adf85bb099f6b0de13c25510f809", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.gated.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:20:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5e32482b21a52376e8ebf601681c52f3e22270b4", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,20 @@\n+// gate-test-const_fn_floating_point_arithmetic\n+\n+// revisions: stock gated\n+\n+#![feature(rustc_attrs)]\n+#![cfg_attr(gated, feature(const_fn_floating_point_arithmetic))]\n+\n+const fn add(f: f32) -> f32 { f + 2.0 }\n+//[stock]~^ floating point arithmetic\n+const fn sub(f: f32) -> f32 { 2.0 - f }\n+//[stock]~^ floating point arithmetic\n+const fn mul(f: f32, g: f32) -> f32 { f * g }\n+//[stock]~^ floating point arithmetic\n+const fn div(f: f32, g: f32) -> f32 { f / g }\n+//[stock]~^ floating point arithmetic\n+const fn neg(f: f32) -> f32 { -f }\n+//[stock]~^ floating point arithmetic\n+\n+#[rustc_error]\n+fn main() {} //[gated]~ fatal error triggered by #[rustc_error]"}, {"sha": "ef7a60faf3f5c8fdeeec5feda0a762d9eae09465", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.stock.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -0,0 +1,48 @@\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:8:31\n+   |\n+LL | const fn add(f: f32) -> f32 { f + 2.0 }\n+   |                               ^^^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:10:31\n+   |\n+LL | const fn sub(f: f32) -> f32 { 2.0 - f }\n+   |                               ^^^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:12:39\n+   |\n+LL | const fn mul(f: f32, g: f32) -> f32 { f * g }\n+   |                                       ^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:14:39\n+   |\n+LL | const fn div(f: f32, g: f32) -> f32 { f / g }\n+   |                                       ^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:16:31\n+   |\n+LL | const fn neg(f: f32) -> f32 { -f }\n+   |                               ^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e15f4b804f716ddcd31f3adc9424117e7e2f4eaf", "filename": "src/test/ui/consts/const_let_eq_float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1,6 +1,6 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n-#![feature(const_fn)]\n+#![feature(const_fn_floating_point_arithmetic)]\n \n struct Foo<T>(T);\n struct Bar<T> { x: T }"}, {"sha": "55a999d5cdc040699c569574e1bbc4301be8f0b3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -77,14 +77,6 @@ const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n //~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n const fn foo11_2<T: Send>(t: T) -> T { t }\n //~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n-const fn foo19(f: f32) -> f32 { f * 2.0 }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_3(f: f32) -> f32 { -f }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-//~^ ERROR int, `bool` and `char` operations\n \n static BAR: u32 = 42;\n const fn foo25() -> u32 { BAR } //~ ERROR cannot refer to statics"}, {"sha": "a37e5203eeef4b62c06fc159ccb123c0133c0449", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -76,60 +76,24 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:80:33\n-   |\n-LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n-   |                                 ^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:82:35\n-   |\n-LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-   |                                   ^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:84:35\n-   |\n-LL | const fn foo19_3(f: f32) -> f32 { -f }\n-   |                                   ^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:86:43\n-   |\n-LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-   |                                           ^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:90:27\n+  --> $DIR/min_const_fn.rs:82:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:91:37\n+  --> $DIR/min_const_fn.rs:83:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:92:42\n+  --> $DIR/min_const_fn.rs:84:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -138,7 +102,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:94:63\n+  --> $DIR/min_const_fn.rs:86:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -147,7 +111,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:96:42\n+  --> $DIR/min_const_fn.rs:88:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -156,7 +120,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:98:63\n+  --> $DIR/min_const_fn.rs:90:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -165,7 +129,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:101:14\n+  --> $DIR/min_const_fn.rs:93:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -174,7 +138,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:110:6\n+  --> $DIR/min_const_fn.rs:102:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -183,7 +147,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:115:6\n+  --> $DIR/min_const_fn.rs:107:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -192,7 +156,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:120:6\n+  --> $DIR/min_const_fn.rs:112:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -201,7 +165,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:126:34\n+  --> $DIR/min_const_fn.rs:118:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -210,7 +174,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:128:22\n+  --> $DIR/min_const_fn.rs:120:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n@@ -219,7 +183,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:129:23\n+  --> $DIR/min_const_fn.rs:121:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -228,7 +192,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:130:32\n+  --> $DIR/min_const_fn.rs:122:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -237,7 +201,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:135:41\n+  --> $DIR/min_const_fn.rs:127:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -246,7 +210,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:138:21\n+  --> $DIR/min_const_fn.rs:130:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -255,15 +219,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:140:27\n+  --> $DIR/min_const_fn.rs:132:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 26 previous errors\n \n Some errors have detailed explanations: E0013, E0493, E0658, E0723.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "292e2dd167c919d0800887e0b77ec632489fefdf", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, foo, foo2)]\n+#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -25,9 +25,9 @@ const fn bar2() -> u32 { foo2() } //~ ERROR not yet stable as a const fn\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-// conformity is required, even with `const_fn` feature gate\n+// Const-stable functions cannot rely on unstable const-eval features.\n const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n-//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]"}, {"sha": "fa2260b40d19fe03a9207ba1bc707b50c971e88c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -14,7 +14,7 @@ LL | const fn bar2() -> u32 { foo2() }\n    |\n    = help: Const-stable functions can only call other const-stable functions\n \n-error: const-stable function cannot use `#[feature(const_fn)]`\n+error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_fn_libstd_stability.rs:29:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }"}, {"sha": "0f48341ddf3eccd4dd2ac79e3cdabad3927c7b91", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, foo, foo2)]\n+#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -27,7 +27,7 @@ const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR not yet stable as\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n-//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]"}, {"sha": "1ca5964ce0fc4355b90451693e077ece36d1e28a", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -14,7 +14,7 @@ LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |\n    = help: Const-stable functions can only call other const-stable functions\n \n-error: const-stable function cannot use `#[feature(const_fn)]`\n+error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:29:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }"}, {"sha": "2f84bfc57dd0ef22269bb84dae10f71e5e23e85d", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -1 +1 @@\n-Subproject commit 02a33d411d8e385942776760a99535d69826349b\n+Subproject commit 2f84bfc57dd0ef22269bb84dae10f71e5e23e85d"}, {"sha": "f5e5c0867b48aaeae5f2cc278bab95d21292f8b1", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "patch": "@@ -9,6 +9,6 @@ edition = \"2018\"\n clap = \"2.25.0\"\n \n [dependencies.mdbook]\n-version = \"0.4.0\"\n+version = \"0.4.3\"\n default-features = false\n features = [\"search\"]"}]}