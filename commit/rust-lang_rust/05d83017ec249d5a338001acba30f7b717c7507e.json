{"sha": "05d83017ec249d5a338001acba30f7b717c7507e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDgzMDE3ZWMyNDlkNWEzMzgwMDFhY2JhMzBmN2I3MTdjNzUwN2U=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-01-20T20:28:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:24Z"}, "message": "Added char::from_digit(), char::is_digit_radix() and an argument check to char::to_digit().", "tree": {"sha": "afb31327c1850ca54bc310906985d01d85677e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb31327c1850ca54bc310906985d01d85677e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d83017ec249d5a338001acba30f7b717c7507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d83017ec249d5a338001acba30f7b717c7507e", "html_url": "https://github.com/rust-lang/rust/commit/05d83017ec249d5a338001acba30f7b717c7507e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d83017ec249d5a338001acba30f7b717c7507e/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13b23f37e014d1ac63e937e69d4d8b1ed7b68b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13b23f37e014d1ac63e937e69d4d8b1ed7b68b0", "html_url": "https://github.com/rust-lang/rust/commit/d13b23f37e014d1ac63e937e69d4d8b1ed7b68b0"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "8f1f0b3666b0a7efe91895fac9ee9a1a0c558f20", "filename": "src/libcore/char.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05d83017ec249d5a338001acba30f7b717c7507e/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d83017ec249d5a338001acba30f7b717c7507e/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=05d83017ec249d5a338001acba30f7b717c7507e", "patch": "@@ -118,6 +118,26 @@ pub pure fn is_digit(c: char) -> bool {\n         unicode::general_category::No(c);\n }\n \n+/**\n+ * Checks if a character parses as a numeric digit in the given radix.\n+ * Compared to `is_digit()`, this function only recognizes the ascii\n+ * characters `0-9`, `a-z` and `A-Z`.\n+ *\n+ * Returns `true` if `c` is a valid digit under `radix`, and `false`\n+ * otherwise.\n+ *\n+ * Fails if given a `radix` > 36.\n+ *\n+ * Note: This just wraps `to_digit()`.\n+ */\n+#[inline(always)]\n+pub pure fn is_digit_radix(c: char, radix: uint) -> bool {\n+    match to_digit(c, radix) {\n+        Some(_) => true,\n+        None    => false\n+    }\n+}\n+\n /**\n  * Convert a char to the corresponding digit.\n  *\n@@ -127,9 +147,15 @@ pub pure fn is_digit(c: char) -> bool {\n  * between 0 and 9. If `c` is 'a' or 'A', 10. If `c` is\n  * 'b' or 'B', 11, etc. Returns none if the char does not\n  * refer to a digit in the given radix.\n+ *\n+ * # Failure\n+ * Fails if given a `radix` outside the range `[0..36]`.\n  */\n #[inline]\n pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n+    if radix > 36 {\n+        fail fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix)\n+    }\n     let val = match c {\n       '0' .. '9' => c as uint - ('0' as uint),\n       'a' .. 'z' => c as uint + 10u - ('a' as uint),\n@@ -140,6 +166,30 @@ pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n     else { None }\n }\n \n+/**\n+ * Converts a number to the ascii character representing it.\n+ *\n+ * Returns `Some(char)` if `num` represents one digit under `radix`,\n+ * using one character of `0-9` or `a-z`, or `None` if it doesn't.\n+ *\n+ * Fails if given an `radix` > 36.\n+ */\n+#[inline]\n+pub pure fn from_digit(num: uint, radix: uint) -> Option<char> {\n+    if radix > 36 {\n+        fail fmt!(\"from_digit: radix %? is to high (maximum 36)\", num)\n+    }\n+    if num < radix {\n+        if num < 10 {\n+            Some(('0' as uint + num) as char)\n+        } else {\n+            Some(('a' as uint + num - 10u) as char)\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n /**\n  * Return the hexadecimal unicode escape of a char.\n  *"}]}