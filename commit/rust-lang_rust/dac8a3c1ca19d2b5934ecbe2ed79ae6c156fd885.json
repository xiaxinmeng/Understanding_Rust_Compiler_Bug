{"sha": "dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzhhM2MxY2ExOWQyYjU5MzRlY2JlMmVkNzlhZTZjMTU2ZmQ4ODU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-06T22:30:39Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-07T18:53:38Z"}, "message": "let_and_return: do not lint if last statement borrows", "tree": {"sha": "26697ecac71b095e186ce0b6b6590ee525bc015e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26697ecac71b095e186ce0b6b6590ee525bc015e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "html_url": "https://github.com/rust-lang/rust/commit/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c205d7b1baa982ae7063d57b18088ecf28df83b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c205d7b1baa982ae7063d57b18088ecf28df83b", "html_url": "https://github.com/rust-lang/rust/commit/9c205d7b1baa982ae7063d57b18088ecf28df83b"}], "stats": {"total": 131, "additions": 129, "deletions": 2}, "files": [{"sha": "6d3fb317bcfc5fa0f0a612780bb798b6ecab9112", "filename": "clippy_lints/src/let_and_return.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "patch": "@@ -1,8 +1,12 @@\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, ExprKind, PatKind, StmtKind};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, Expr, ExprKind, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{in_macro, match_qpath, snippet_opt, span_lint_and_then};\n@@ -49,6 +53,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetReturn {\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             if let ExprKind::Path(qpath) = &retexpr.kind;\n             if match_qpath(qpath, &[&*ident.name.as_str()]);\n+            if !last_statement_borrows(cx, initexpr);\n             if !in_external_macro(cx.sess(), initexpr.span);\n             if !in_external_macro(cx.sess(), retexpr.span);\n             if !in_external_macro(cx.sess(), local.span);\n@@ -80,3 +85,57 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetReturn {\n         }\n     }\n }\n+\n+fn last_statement_borrows<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+    let mut visitor = BorrowVisitor { cx, borrows: false };\n+    walk_expr(&mut visitor, expr);\n+    visitor.borrows\n+}\n+\n+struct BorrowVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    borrows: bool,\n+}\n+\n+impl BorrowVisitor<'_, '_> {\n+    fn fn_def_id(&self, expr: &Expr<'_>) -> Option<DefId> {\n+        match &expr.kind {\n+            ExprKind::MethodCall(..) => self.cx.tables.type_dependent_def_id(expr.hir_id),\n+            ExprKind::Call(\n+                Expr {\n+                    kind: ExprKind::Path(qpath),\n+                    ..\n+                },\n+                ..,\n+            ) => self.cx.tables.qpath_res(qpath, expr.hir_id).opt_def_id(),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.borrows {\n+            return;\n+        }\n+\n+        if let Some(def_id) = self.fn_def_id(expr) {\n+            self.borrows = self\n+                .cx\n+                .tcx\n+                .fn_sig(def_id)\n+                .output()\n+                .skip_binder()\n+                .walk()\n+                .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "39410acea4e70fd20fbe6e03eee6506d990b999c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "patch": "@@ -400,7 +400,7 @@ pub fn method_calls<'tcx>(\n /// Matches an `Expr` against a chain of methods, and return the matched `Expr`s.\n ///\n /// For example, if `expr` represents the `.baz()` in `foo.bar().baz()`,\n-/// `matched_method_chain(expr, &[\"bar\", \"baz\"])` will return a `Vec`\n+/// `method_chain_args(expr, &[\"bar\", \"baz\"])` will return a `Vec`\n /// containing the `Expr`s for\n /// `.bar()` and `.baz()`\n pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec<&'a [Expr<'a>]>> {"}, {"sha": "09614b8c1ad787d98975f9c800279a1817a7d3b3", "filename": "tests/ui/let_and_return.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/tests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885/tests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.rs?ref=dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "patch": "@@ -67,4 +67,72 @@ macro_rules! tuple_encode {\n \n tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);\n \n+mod no_lint_if_stmt_borrows {\n+    mod issue_3792 {\n+        use std::io::{self, BufRead, Stdin};\n+\n+        fn read_line() -> String {\n+            let stdin = io::stdin();\n+            let line = stdin.lock().lines().next().unwrap().unwrap();\n+            line\n+        }\n+    }\n+\n+    mod issue_3324 {\n+        use std::cell::RefCell;\n+        use std::rc::{Rc, Weak};\n+\n+        fn test(value: Weak<RefCell<Bar>>) -> u32 {\n+            let value = value.upgrade().unwrap();\n+            let ret = value.borrow().baz();\n+            ret\n+        }\n+\n+        struct Bar {}\n+\n+        impl Bar {\n+            fn new() -> Self {\n+                Bar {}\n+            }\n+            fn baz(&self) -> u32 {\n+                0\n+            }\n+        }\n+\n+        fn main() {\n+            let a = Rc::new(RefCell::new(Bar::new()));\n+            let b = Rc::downgrade(&a);\n+            test(b);\n+        }\n+    }\n+\n+    mod free_function {\n+        struct Inner;\n+\n+        struct Foo<'a> {\n+            inner: &'a Inner,\n+        }\n+\n+        impl Drop for Foo<'_> {\n+            fn drop(&mut self) {}\n+        }\n+\n+        impl Foo<'_> {\n+            fn value(&self) -> i32 {\n+                42\n+            }\n+        }\n+\n+        fn some_foo(inner: &Inner) -> Foo<'_> {\n+            Foo { inner }\n+        }\n+\n+        fn test() -> i32 {\n+            let x = Inner {};\n+            let value = some_foo(&x).value();\n+            value\n+        }\n+    }\n+}\n+\n fn main() {}"}]}