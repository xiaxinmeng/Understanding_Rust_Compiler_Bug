{"sha": "ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNmUwMzdhYzU1MjdjN2RkMjE1M2E5MjlmMmNlOGJkYTJjMmJiMWE=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-01-07T11:35:45Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-01-07T13:23:33Z"}, "message": "Implement `unused_io_amount` lint", "tree": {"sha": "4963c08ec962e0f7050c4058eedfaaf023a5da4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4963c08ec962e0f7050c4058eedfaaf023a5da4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "html_url": "https://github.com/rust-lang/rust/commit/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7727119e8f159648c7c35567f908637190b9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7727119e8f159648c7c35567f908637190b9c5", "html_url": "https://github.com/rust-lang/rust/commit/5e7727119e8f159648c7c35567f908637190b9c5"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "d5f7c47fb6891070d7ff000b9cfaf3f5193f2a81", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -414,6 +414,7 @@ All notable changes to this project will be documented in this file.\n [`unstable_as_mut_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice\n [`unstable_as_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice\n [`unused_collect`]: https://github.com/Manishearth/rust-clippy/wiki#unused_collect\n+[`unused_io_amount`]: https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount\n [`unused_label`]: https://github.com/Manishearth/rust-clippy/wiki#unused_label\n [`unused_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes\n [`use_debug`]: https://github.com/Manishearth/rust-clippy/wiki#use_debug"}, {"sha": "37bd3db944d749dae4c174d6c43969d78afc6744", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -179,7 +179,7 @@ transparently:\n \n ## Lints\n \n-There are 183 lints included in this crate:\n+There are 184 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -349,6 +349,7 @@ name\n [unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                   | warn    | `unsafe` removed from API names on import\n [unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)               | allow   | literals whose suffix is not separated by an underscore\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[unused_io_amount](https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount)                                   | deny    | unused written/read amount\n [unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                           | warn    | unused labels\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                   | warn    | unused lifetimes in function definitions\n [use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                                 | allow   | use of `Debug`-based formatting"}, {"sha": "b88b62040cec6880047abe5c911e5c93943e5041", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -131,6 +131,7 @@ pub mod transmute;\n pub mod types;\n pub mod unicode;\n pub mod unsafe_removed_from_name;\n+pub mod unused_io_amount;\n pub mod unused_label;\n pub mod vec;\n pub mod zero_div_zero;\n@@ -287,6 +288,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n     reg.register_early_lint_pass(box reference::Pass);\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n+    reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -480,6 +482,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,"}, {"sha": "eef8751cd0b3ead8eb8093257147fc11a8e9a942", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -0,0 +1,138 @@\n+use rustc::lint::*;\n+use rustc::hir;\n+use utils::{span_lint, match_path, match_trait_method, paths};\n+\n+/// **What it does:** Checks for unused written/read amount.\n+///\n+/// **Why is this bad?** `io::Write::write` and `io::Read::read` are not guaranteed to\n+/// process the entire buffer. They return how many bytes were processed, which might be smaller\n+/// than a given buffer's length. If you don't need to deal with partial-write/read, use\n+/// `write_all`/`read_exact` instead.\n+///\n+/// **Known problems:** Detects only common patterns.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// use std::io;\n+/// fn foo<W: io::Write>(w: &mut W) -> io::Result<()> {\n+///     // must be `w.write_all(b\"foo\")?;`\n+///     w.write(b\"foo\")?;\n+///     Ok(())\n+/// }\n+/// ```\n+declare_lint! {\n+    pub UNUSED_IO_AMOUNT,\n+    Deny,\n+    \"unused written/read amount\"\n+}\n+\n+pub struct UnusedIoAmount;\n+\n+impl LintPass for UnusedIoAmount {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNUSED_IO_AMOUNT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n+    fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n+        let expr = match s.node {\n+            hir::StmtSemi(ref expr, _) |\n+            hir::StmtExpr(ref expr, _) => &**expr,\n+            _ => return,\n+        };\n+\n+        if let hir::ExprRet(..) = expr.node {\n+            return;\n+        }\n+\n+        match expr.node {\n+            hir::ExprMatch(ref expr, ref arms, _) if is_try(arms) => {\n+                if let hir::ExprCall(ref func, ref args) = expr.node {\n+                    if let hir::ExprPath(ref path) = func.node {\n+                        if match_path(path, &paths::CARRIER_TRANSLATE) && args.len() == 1 {\n+                            check_method_call(cx, &args[0], expr);\n+                        }\n+                    }\n+                } else {\n+                    check_method_call(cx, expr, expr);\n+                }\n+            },\n+\n+            hir::ExprMethodCall(ref symbol, _, ref args) => {\n+                let symbol = &*symbol.node.as_str();\n+                match symbol {\n+                    \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n+                        check_method_call(cx, &args[0], expr);\n+                    },\n+                    _ => (),\n+                }\n+            },\n+\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn check_method_call(cx: &LateContext, call: &hir::Expr, expr: &hir::Expr) {\n+    if let hir::ExprMethodCall(ref symbol, _, _) = call.node {\n+        let symbol = &*symbol.node.as_str();\n+        if match_trait_method(cx, call, &paths::IO_READ) && symbol == \"read\" {\n+            span_lint(cx,\n+                      UNUSED_IO_AMOUNT,\n+                      expr.span,\n+                      \"handle read amount returned or use `Read::read_exact` instead\");\n+        } else if match_trait_method(cx, call, &paths::IO_WRITE) && symbol == \"write\" {\n+            span_lint(cx,\n+                      UNUSED_IO_AMOUNT,\n+                      expr.span,\n+                      \"handle written amount returned or use `Write::write_all` instead\");\n+        }\n+    }\n+}\n+\n+fn is_try(arms: &[hir::Arm]) -> bool {\n+    // `Ok(x) => x` or `Ok(_) => ...`\n+    fn is_ok(arm: &hir::Arm) -> bool {\n+        if let hir::PatKind::TupleStruct(ref path, ref pat, ref dotdot) = arm.pats[0].node {\n+            // cut off `core`\n+            if match_path(path, &paths::RESULT_OK[1..]) {\n+                if *dotdot == Some(0) {\n+                    return true;\n+                }\n+\n+                match pat[0].node {\n+                    hir::PatKind::Wild => {\n+                        return true;\n+                    },\n+                    hir::PatKind::Binding(_, defid, _, None) => {\n+                        if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = arm.body.node {\n+                            if path.def.def_id() == defid {\n+                                return true;\n+                            }\n+                        }\n+                    },\n+                    _ => (),\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n+    /// Detects `_ => ...` or `Err(x) => ...`\n+    fn is_err_or_wild(arm: &hir::Arm) -> bool {\n+        match arm.pats[0].node {\n+            hir::PatKind::Wild => true,\n+            hir::PatKind::TupleStruct(ref path, _, _) => match_path(path, &paths::RESULT_ERR[1..]),\n+            _ => false,\n+        }\n+    }\n+\n+    if arms.len() == 2 && arms[0].pats.len() == 1 && arms[0].guard.is_none() && arms[1].pats.len() == 1 &&\n+       arms[1].guard.is_none() {\n+        (is_ok(&arms[0]) && is_err_or_wild(&arms[1])) || (is_ok(&arms[1]) && is_err_or_wild(&arms[0]))\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "5edff76d9969e277fcb47e71d20be6f1a85a7b2a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -7,6 +7,7 @@ pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&'static str; 4] = [\"collections\", \"btree\", \"set\", \"BTreeSet\"];\n+pub const CARRIER_TRANSLATE: [&'static str; 4] = [\"std\", \"ops\", \"Carrier\", \"translate\"];\n pub const CLONE: [&'static str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT: [&'static str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CMP_MAX: [&'static str; 3] = [\"core\", \"cmp\", \"max\"];\n@@ -25,6 +26,8 @@ pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n+pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];\n+pub const IO_WRITE: [&'static str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n pub const LINKED_LIST: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];"}, {"sha": "1436605a1ba50065d73b0a8958fff06500f85f0b", "filename": "tests/compile-fail/unused_io_amount.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/tests%2Fcompile-fail%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a/tests%2Fcompile-fail%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funused_io_amount.rs?ref=ce6e037ac5527c7dd2153a929f2ce8bda2c2bb1a", "patch": "@@ -0,0 +1,35 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+\n+use std::io;\n+\n+fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n+    try!(s.write(b\"test\"));\n+    //~^ ERROR handle written amount returned\n+    let mut buf = [0u8; 4];\n+    try!(s.read(&mut buf));\n+    //~^ ERROR handle read amount returned\n+    Ok(())\n+}\n+\n+fn question_mark<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n+    s.write(b\"test\")?;\n+    //~^ ERROR handle written amount returned\n+    let mut buf = [0u8; 4];\n+    s.read(&mut buf)?;\n+    //~^ ERROR handle read amount returned\n+    Ok(())\n+}\n+\n+fn unwrap<T: io::Read + io::Write>(s: &mut T) {\n+    s.write(b\"test\").unwrap();\n+    //~^ ERROR handle written amount returned\n+    let mut buf = [0u8; 4];\n+    s.read(&mut buf).unwrap();\n+    //~^ ERROR handle read amount returned\n+}\n+\n+fn main() {\n+}"}]}