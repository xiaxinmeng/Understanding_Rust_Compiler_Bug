{"sha": "06819512877bc65ee6571709a32ec26d42ad510e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODE5NTEyODc3YmM2NWVlNjU3MTcwOWEzMmVjMjZkNDJhZDUxMGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-08T12:13:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T12:13:21Z"}, "message": "Rollup merge of #82613 - CraftSpider:fix-de, r=aDotInTheVoid\n\nRemove Item::kind, use tagged enum. Rename variants to match\n\nFixes #82299, by making the ItemEnum tagged. Doesn't remove ItemKind as it's still used in other places.\n\nr? `````@jyn514`````\n`````@rustbot````` label: +A-rustdoc-json +T-rustdoc", "tree": {"sha": "1de1aeb2f79f263ee4e74b48179db3e4da49e7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de1aeb2f79f263ee4e74b48179db3e4da49e7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06819512877bc65ee6571709a32ec26d42ad510e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRhTiCRBK7hj4Ov3rIwAAdHIIAHznizOnu8TGxQkgMuZgt2PW\nojyxQYMuLiCETu+qCCRrn+poczFx8fYSnxnoqR20/XATlj7aO3JuFcrGfLA0w6tz\nOvn1e/tKASN+VaK6fWtqpJsub8UWa4UUTdTpncDYf545VN8sHL/70Hmgdh+be0WK\n4NKecvNrCZ5cxIp3izcM0eDHSaGrP3Pl68PxE3ysyLChiyLoza09+Or+3MAk3I3m\nWGjVh5+PpPbnZcnLZebPTw+zqSNOAkIhBK2ZsJXA5hJ+Ls7lDqvdJAM4ww4Nqu4r\nW1dn0MrRRJlnyCIDHd+vrRSE1BUIGBvGOpOykJMaJRS+prq9i741WfE/5pkf6o4=\n=m9/X\n-----END PGP SIGNATURE-----\n", "payload": "tree 1de1aeb2f79f263ee4e74b48179db3e4da49e7fc\nparent 298c31b04a6d4959a957e24bc9f08ab4742283b0\nparent 18841ec342def87006b0535bbaa658d5fa43ba28\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615205601 +0100\ncommitter GitHub <noreply@github.com> 1615205601 +0100\n\nRollup merge of #82613 - CraftSpider:fix-de, r=aDotInTheVoid\n\nRemove Item::kind, use tagged enum. Rename variants to match\n\nFixes #82299, by making the ItemEnum tagged. Doesn't remove ItemKind as it's still used in other places.\n\nr? `````@jyn514`````\n`````@rustbot````` label: +A-rustdoc-json +T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06819512877bc65ee6571709a32ec26d42ad510e", "html_url": "https://github.com/rust-lang/rust/commit/06819512877bc65ee6571709a32ec26d42ad510e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06819512877bc65ee6571709a32ec26d42ad510e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298c31b04a6d4959a957e24bc9f08ab4742283b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/298c31b04a6d4959a957e24bc9f08ab4742283b0", "html_url": "https://github.com/rust-lang/rust/commit/298c31b04a6d4959a957e24bc9f08ab4742283b0"}, {"sha": "18841ec342def87006b0535bbaa658d5fa43ba28", "url": "https://api.github.com/repos/rust-lang/rust/commits/18841ec342def87006b0535bbaa658d5fa43ba28", "html_url": "https://github.com/rust-lang/rust/commit/18841ec342def87006b0535bbaa658d5fa43ba28"}], "stats": {"total": 222, "additions": 166, "deletions": 56}, "files": [{"sha": "328a220430601b11d9119cdf3baad16a3cf703f4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -4568,6 +4568,7 @@ name = \"rustdoc-json-types\"\n version = \"0.1.0\"\n dependencies = [\n  \"serde\",\n+ \"serde_json\",\n ]\n \n [[package]]"}, {"sha": "22a1eb63702357d5ceb0aab2c459ebdd5feba64b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -397,6 +397,7 @@ impl<'a> Builder<'a> {\n                 test::Crate,\n                 test::CrateLibrustc,\n                 test::CrateRustdoc,\n+                test::CrateRustdocJsonTypes,\n                 test::Linkcheck,\n                 test::TierCheck,\n                 test::Cargotest,"}, {"sha": "03ae684e23fedb0a23d765824769f5484b24f93b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -1922,6 +1922,77 @@ impl Step for CrateRustdoc {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CrateRustdocJsonTypes {\n+    host: TargetSelection,\n+    test_kind: TestKind,\n+}\n+\n+impl Step for CrateRustdocJsonTypes {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/rustdoc-json-types\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let builder = run.builder;\n+\n+        let test_kind = builder.kind.into();\n+\n+        builder.ensure(CrateRustdocJsonTypes { host: run.target, test_kind });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let test_kind = self.test_kind;\n+        let target = self.host;\n+\n+        // Use the previous stage compiler to reuse the artifacts that are\n+        // created when running compiletest for src/test/rustdoc. If this used\n+        // `compiler`, then it would cause rustdoc to be built *again*, which\n+        // isn't really necessary.\n+        let compiler = builder.compiler_for(builder.top_stage, target, target);\n+        builder.ensure(compile::Rustc { compiler, target });\n+\n+        let mut cargo = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolRustc,\n+            target,\n+            test_kind.subcommand(),\n+            \"src/rustdoc-json-types\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n+            cargo.arg(\"--no-fail-fast\");\n+        }\n+\n+        cargo.arg(\"-p\").arg(\"rustdoc-json-types\");\n+\n+        cargo.arg(\"--\");\n+        cargo.args(&builder.config.cmd.test_args());\n+\n+        if self.host.contains(\"musl\") {\n+            cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n+        }\n+\n+        if !builder.config.verbose_tests {\n+            cargo.arg(\"--quiet\");\n+        }\n+\n+        builder.info(&format!(\n+            \"{} rustdoc-json-types stage{} ({} -> {})\",\n+            test_kind, compiler.stage, &compiler.host, target\n+        ));\n+        let _time = util::timeit(&builder);\n+\n+        try_run(builder, &mut cargo.into());\n+    }\n+}\n+\n /// Some test suites are run inside emulators or on remote devices, and most\n /// of our test binaries are linked dynamically which means we need to ship\n /// the standard library and such to the emulator ahead of time. This step"}, {"sha": "063d8aab1ec3e4206f1de8b5d04e3f6cd734b8c8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -23,7 +23,6 @@ use std::collections::HashSet;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n-        let item_type = ItemType::from(&item);\n         let deprecation = item.deprecation(self.tcx);\n         let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n         let inner = match *kind {\n@@ -50,7 +49,6 @@ impl JsonRenderer<'_> {\n                 .map(rustc_ast_pretty::pprust::attribute_to_string)\n                 .collect(),\n             deprecation: deprecation.map(from_deprecation),\n-            kind: item_type.into(),\n             inner,\n         })\n     }\n@@ -154,38 +152,38 @@ crate fn from_def_id(did: DefId) -> Id {\n fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Symbol>) -> ItemEnum {\n     use clean::ItemKind::*;\n     match item {\n-        ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n-        ImportItem(i) => ItemEnum::ImportItem(i.into()),\n-        StructItem(s) => ItemEnum::StructItem(s.into()),\n-        UnionItem(u) => ItemEnum::UnionItem(u.into()),\n-        StructFieldItem(f) => ItemEnum::StructFieldItem(f.into()),\n-        EnumItem(e) => ItemEnum::EnumItem(e.into()),\n-        VariantItem(v) => ItemEnum::VariantItem(v.into()),\n-        FunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-        ForeignFunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-        TraitItem(t) => ItemEnum::TraitItem(t.into()),\n-        TraitAliasItem(t) => ItemEnum::TraitAliasItem(t.into()),\n-        MethodItem(m, _) => ItemEnum::MethodItem(from_function_method(m, true)),\n-        TyMethodItem(m) => ItemEnum::MethodItem(from_function_method(m, false)),\n-        ImplItem(i) => ItemEnum::ImplItem(i.into()),\n-        StaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n-        ForeignStaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n-        ForeignTypeItem => ItemEnum::ForeignTypeItem,\n-        TypedefItem(t, _) => ItemEnum::TypedefItem(t.into()),\n-        OpaqueTyItem(t) => ItemEnum::OpaqueTyItem(t.into()),\n-        ConstantItem(c) => ItemEnum::ConstantItem(c.into()),\n-        MacroItem(m) => ItemEnum::MacroItem(m.source),\n-        ProcMacroItem(m) => ItemEnum::ProcMacroItem(m.into()),\n-        AssocConstItem(t, s) => ItemEnum::AssocConstItem { type_: t.into(), default: s },\n-        AssocTypeItem(g, t) => ItemEnum::AssocTypeItem {\n+        ModuleItem(m) => ItemEnum::Module(m.into()),\n+        ImportItem(i) => ItemEnum::Import(i.into()),\n+        StructItem(s) => ItemEnum::Struct(s.into()),\n+        UnionItem(u) => ItemEnum::Union(u.into()),\n+        StructFieldItem(f) => ItemEnum::StructField(f.into()),\n+        EnumItem(e) => ItemEnum::Enum(e.into()),\n+        VariantItem(v) => ItemEnum::Variant(v.into()),\n+        FunctionItem(f) => ItemEnum::Function(f.into()),\n+        ForeignFunctionItem(f) => ItemEnum::Function(f.into()),\n+        TraitItem(t) => ItemEnum::Trait(t.into()),\n+        TraitAliasItem(t) => ItemEnum::TraitAlias(t.into()),\n+        MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true)),\n+        TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false)),\n+        ImplItem(i) => ItemEnum::Impl(i.into()),\n+        StaticItem(s) => ItemEnum::Static(from_clean_static(s, tcx)),\n+        ForeignStaticItem(s) => ItemEnum::Static(from_clean_static(s, tcx)),\n+        ForeignTypeItem => ItemEnum::ForeignType,\n+        TypedefItem(t, _) => ItemEnum::Typedef(t.into()),\n+        OpaqueTyItem(t) => ItemEnum::OpaqueTy(t.into()),\n+        ConstantItem(c) => ItemEnum::Constant(c.into()),\n+        MacroItem(m) => ItemEnum::Macro(m.source),\n+        ProcMacroItem(m) => ItemEnum::ProcMacro(m.into()),\n+        AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into(), default: s },\n+        AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(Into::into).collect(),\n             default: t.map(Into::into),\n         },\n         StrippedItem(inner) => from_clean_item_kind(*inner, tcx, name),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }\n-        ExternCrateItem { ref src } => ItemEnum::ExternCrateItem {\n+        ExternCrateItem { ref src } => ItemEnum::ExternCrate {\n             name: name.as_ref().unwrap().to_string(),\n             rename: src.map(|x| x.to_string()),\n         },"}, {"sha": "8b0c049c05bc7186962364946b0355d45f2c1e7a", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -108,8 +108,7 @@ impl JsonRenderer<'tcx> {\n                                 .last()\n                                 .map(Clone::clone),\n                             visibility: types::Visibility::Public,\n-                            kind: types::ItemKind::Trait,\n-                            inner: types::ItemEnum::TraitItem(trait_item.clone().into()),\n+                            inner: types::ItemEnum::Trait(trait_item.clone().into()),\n                             source: None,\n                             docs: Default::default(),\n                             links: Default::default(),\n@@ -158,11 +157,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let id = item.def_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n-            if let types::ItemEnum::TraitItem(ref mut t) = new_item.inner {\n+            if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n                 t.implementors = self.get_trait_implementors(id)\n-            } else if let types::ItemEnum::StructItem(ref mut s) = new_item.inner {\n+            } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n                 s.impls = self.get_impls(id)\n-            } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n+            } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n                 e.impls = self.get_impls(id)\n             }\n             let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());"}, {"sha": "9c02d5e645bfe405b5346dcc37e877d88f986d39", "filename": "src/rustdoc-json-types/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FCargo.toml?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -9,3 +9,6 @@ path = \"lib.rs\"\n \n [dependencies]\n serde = { version = \"1.0\", features = [\"derive\"] }\n+\n+[dev-dependencies]\n+serde_json = \"1.0\""}, {"sha": "4e7794fe610646e43e577aa42a044fa9624a4456", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -76,7 +76,7 @@ pub struct Item {\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,\n-    pub kind: ItemKind,\n+    #[serde(flatten)]\n     pub inner: ItemEnum,\n }\n \n@@ -185,48 +185,48 @@ pub enum ItemKind {\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n-#[serde(untagged)]\n+#[serde(tag = \"kind\", content = \"inner\", rename_all = \"snake_case\")]\n pub enum ItemEnum {\n-    ModuleItem(Module),\n-    ExternCrateItem {\n+    Module(Module),\n+    ExternCrate {\n         name: String,\n         rename: Option<String>,\n     },\n-    ImportItem(Import),\n+    Import(Import),\n \n-    UnionItem(Union),\n-    StructItem(Struct),\n-    StructFieldItem(Type),\n-    EnumItem(Enum),\n-    VariantItem(Variant),\n+    Union(Union),\n+    Struct(Struct),\n+    StructField(Type),\n+    Enum(Enum),\n+    Variant(Variant),\n \n-    FunctionItem(Function),\n+    Function(Function),\n \n-    TraitItem(Trait),\n-    TraitAliasItem(TraitAlias),\n-    MethodItem(Method),\n-    ImplItem(Impl),\n+    Trait(Trait),\n+    TraitAlias(TraitAlias),\n+    Method(Method),\n+    Impl(Impl),\n \n-    TypedefItem(Typedef),\n-    OpaqueTyItem(OpaqueTy),\n-    ConstantItem(Constant),\n+    Typedef(Typedef),\n+    OpaqueTy(OpaqueTy),\n+    Constant(Constant),\n \n-    StaticItem(Static),\n+    Static(Static),\n \n     /// `type`s from an extern block\n-    ForeignTypeItem,\n+    ForeignType,\n \n     /// Declarative macro_rules! macro\n-    MacroItem(String),\n-    ProcMacroItem(ProcMacro),\n+    Macro(String),\n+    ProcMacro(ProcMacro),\n \n-    AssocConstItem {\n+    AssocConst {\n         #[serde(rename = \"type\")]\n         type_: Type,\n         /// e.g. `const X: usize = 5;`\n         default: Option<String>,\n     },\n-    AssocTypeItem {\n+    AssocType {\n         bounds: Vec<GenericBound>,\n         /// e.g. `type X = usize;`\n         default: Option<Type>,\n@@ -508,3 +508,6 @@ pub struct Static {\n     pub mutable: bool,\n     pub expr: String,\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "e7f6447ed87531dc944188e5a3fdf24ba90023ca", "filename": "src/rustdoc-json-types/tests.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06819512877bc65ee6571709a32ec26d42ad510e/src%2Frustdoc-json-types%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Ftests.rs?ref=06819512877bc65ee6571709a32ec26d42ad510e", "patch": "@@ -0,0 +1,34 @@\n+use super::*;\n+\n+#[test]\n+fn test_struct_info_roundtrip() {\n+    let s = ItemEnum::Struct(Struct {\n+        struct_type: StructType::Plain,\n+        generics: Generics { params: vec![], where_predicates: vec![] },\n+        fields_stripped: false,\n+        fields: vec![],\n+        impls: vec![],\n+    });\n+\n+    let struct_json = serde_json::to_string(&s).unwrap();\n+\n+    let de_s = serde_json::from_str(&struct_json).unwrap();\n+\n+    assert_eq!(s, de_s);\n+}\n+\n+#[test]\n+fn test_union_info_roundtrip() {\n+    let u = ItemEnum::Union(Union {\n+        generics: Generics { params: vec![], where_predicates: vec![] },\n+        fields_stripped: false,\n+        fields: vec![],\n+        impls: vec![],\n+    });\n+\n+    let union_json = serde_json::to_string(&u).unwrap();\n+\n+    let de_u = serde_json::from_str(&union_json).unwrap();\n+\n+    assert_eq!(u, de_u);\n+}"}]}