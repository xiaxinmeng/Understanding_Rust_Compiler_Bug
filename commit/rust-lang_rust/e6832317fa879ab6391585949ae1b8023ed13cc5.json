{"sha": "e6832317fa879ab6391585949ae1b8023ed13cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ODMyMzE3ZmE4NzlhYjYzOTE1ODU5NDlhZTFiODAyM2VkMTNjYzU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-06-09T22:04:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-09T22:04:50Z"}, "message": "Merge pull request #999 from Manishearth/whitelist\n\nSome small fixes", "tree": {"sha": "b8d2ec34720a21210c1184b55a8c9c24d5f0e60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d2ec34720a21210c1184b55a8c9c24d5f0e60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6832317fa879ab6391585949ae1b8023ed13cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6832317fa879ab6391585949ae1b8023ed13cc5", "html_url": "https://github.com/rust-lang/rust/commit/e6832317fa879ab6391585949ae1b8023ed13cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6832317fa879ab6391585949ae1b8023ed13cc5/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e50e500a6778b012259821748f2bb271d5d39ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e50e500a6778b012259821748f2bb271d5d39ea", "html_url": "https://github.com/rust-lang/rust/commit/8e50e500a6778b012259821748f2bb271d5d39ea"}, {"sha": "e9360f76751b8b60ec14520d23f1edb8263963cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9360f76751b8b60ec14520d23f1edb8263963cd", "html_url": "https://github.com/rust-lang/rust/commit/e9360f76751b8b60ec14520d23f1edb8263963cd"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "2f98d10dee0bb68c07c02e6f8852b563c23a7201", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -150,6 +150,7 @@ impl<'a, 'tcx, 'v> hir::intravisit::Visitor<'v> for UsedVisitor<'a, 'tcx> {\n \n fn check_assign<'e>(cx: &LateContext, decl: hir::def_id::DefId, block: &'e hir::Block) -> Option<&'e hir::Expr> {\n     if_let_chain! {[\n+        block.expr.is_none(),\n         let Some(expr) = block.stmts.iter().last(),\n         let hir::StmtSemi(ref expr, _) = expr.node,\n         let hir::ExprAssign(ref var, ref value) = expr.node,"}, {"sha": "5d431e47465f0934b9a6bce74b1477cfccf17aca", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -444,6 +444,11 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                 if sup {\n                     let start_snippet = snippet(cx, start.span, \"_\");\n                     let end_snippet = snippet(cx, end.span, \"_\");\n+                    let dots = if limits == ast::RangeLimits::Closed {\n+                        \"...\"\n+                    } else {\n+                        \"..\"\n+                    };\n \n                     span_lint_and_then(cx,\n                                        REVERSE_RANGE_LOOP,\n@@ -454,7 +459,10 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                                                               \"consider using the following if \\\n                                                                you are attempting to iterate \\\n                                                                over this range in reverse\",\n-                                                              format!(\"({}..{}).rev()\", end_snippet, start_snippet));\n+                                                              format!(\"({end}{dots}{start}).rev()\",\n+                                                                      end=end_snippet,\n+                                                                      dots=dots,\n+                                                                      start=start_snippet));\n                                        });\n                 } else if eq && limits != ast::RangeLimits::Closed {\n                     // if they are equal, it's also problematic - this loop"}, {"sha": "7bb468166b8634f25918c9ff84477b444676eed6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n \n-use utils::{span_lint, span_lint_and_then, snippet_opt, match_path_ast, in_external_macro};\n+use utils::{span_note_and_lint, span_lint_and_then, snippet_opt, match_path_ast, in_external_macro};\n \n /// **What it does:** This lint checks for return statements at the end of a block.\n ///\n@@ -95,29 +95,23 @@ impl ReturnPass {\n                 let Some(ref retexpr) = block.expr,\n                 let StmtKind::Decl(ref decl, _) = stmt.node,\n                 let DeclKind::Local(ref local) = decl.node,\n+                local.ty.is_none(),\n                 let Some(ref initexpr) = local.init,\n                 let PatKind::Ident(_, Spanned { node: id, .. }, _) = local.pat.node,\n                 let ExprKind::Path(_, ref path) = retexpr.node,\n-                match_path_ast(path, &[&id.name.as_str()])\n+                match_path_ast(path, &[&id.name.as_str()]),\n+                !in_external_macro(cx, initexpr.span),\n             ], {\n-                self.emit_let_lint(cx, retexpr.span, initexpr.span);\n+                span_note_and_lint(cx,\n+                                   LET_AND_RETURN,\n+                                   retexpr.span,\n+                                   \"returning the result of a let binding from a block. \\\n+                                   Consider returning the expression directly.\",\n+                                   initexpr.span,\n+                                   \"this expression can be directly returned\");\n             }\n         }\n     }\n-\n-    fn emit_let_lint(&mut self, cx: &EarlyContext, lint_span: Span, note_span: Span) {\n-        if in_external_macro(cx, note_span) {\n-            return;\n-        }\n-        let mut db = span_lint(cx,\n-                               LET_AND_RETURN,\n-                               lint_span,\n-                               \"returning the result of a let binding from a block. Consider returning the \\\n-                                expression directly.\");\n-        if cx.current_level(LET_AND_RETURN) != Level::Allow {\n-            db.span_note(note_span, \"this expression can be directly returned\");\n-        }\n-    }\n }\n \n impl LintPass for ReturnPass {"}, {"sha": "851764edc2880010e177472c762d385ecde2fd19", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -151,7 +151,7 @@ define_Conf! {\n     /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n     (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n-    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"GitHub\"] => Vec<String>),\n+    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"GitHub\", \"NaN\"] => Vec<String>),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n     (\"too-many-arguments-threshold\", too_many_arguments_threshold, 7 => u64),\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have"}, {"sha": "415bcb2e661ff662e871e4480adf7885bd01cea0", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -46,6 +46,7 @@ fn test_emphasis() {\n /// 32kib 32Mib 32Gib 32Tib 32Pib 32Eib\n /// 32kB 32MB 32GB 32TB 32PB 32EB\n /// 32kb 32Mb 32Gb 32Tb 32Pb 32Eb\n+/// NaN\n /// be_sure_we_got_to_the_end_of_it\n //~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n fn test_units() {"}, {"sha": "411a4b11c17a064a442461c96b694d81fd1f2987", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -169,7 +169,7 @@ fn main() {\n     for i in 10...0 {\n         //~^ERROR this range is empty so this for loop will never run\n         //~|HELP consider\n-        //~|SUGGESTION (0..10).rev()\n+        //~|SUGGESTION (0...10).rev()\n         println!(\"{}\", i);\n     }\n "}, {"sha": "b49e5a2612239bb08cb7eb609c7af2b8d54e186b", "filename": "tests/compile-fail/let_if_seq.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6832317fa879ab6391585949ae1b8023ed13cc5/tests%2Fcompile-fail%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_if_seq.rs?ref=e6832317fa879ab6391585949ae1b8023ed13cc5", "patch": "@@ -98,6 +98,15 @@ fn main() {\n         toto = 2;\n     }\n \n+    // found in libcore, the inner if is not a statement but the block's expr\n+    let mut ch = b'x';\n+    if f() {\n+        ch = b'*';\n+        if f() {\n+            ch = b'?';\n+        }\n+    }\n+\n     // baz needs to be mut\n     let mut baz = 0;\n     //~^ ERROR `if _ { .. } else { .. }` is an expression"}]}