{"sha": "7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOGRhNzkwOGY1YTliMmFkMWQ5YWNmN2FlNmZiOTA4MTdiMGQxMTQ=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-23T21:43:59Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:15Z"}, "message": "Add utilities for creating generic types", "tree": {"sha": "331fe5676afa54e265b3a6e3b8c9cc8890ec0f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331fe5676afa54e265b3a6e3b8c9cc8890ec0f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "html_url": "https://github.com/rust-lang/rust/commit/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7362442cb16902aec489b4536a81573ab4a35f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7362442cb16902aec489b4536a81573ab4a35f", "html_url": "https://github.com/rust-lang/rust/commit/ec7362442cb16902aec489b4536a81573ab4a35f"}], "stats": {"total": 146, "additions": 87, "deletions": 59}, "files": [{"sha": "e660e0df7479444149944c1e2ac4e6a07e2eb3dc", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 19, "deletions": 51, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "patch": "@@ -15,6 +15,7 @@ use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n use super::ChalkInferenceContext;\n use crate::lowering::Lower;\n+use crate::generic_types;\n use std::iter;\n \n fn assemble_clauses_from_impls<'tcx>(\n@@ -47,24 +48,19 @@ fn assemble_clauses_from_assoc_ty_values<'tcx>(\n     });\n }\n \n-fn program_clauses_for_raw_ptr<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n-    let ty = ty::Bound(\n-        ty::INNERMOST,\n-        ty::BoundVar::from_u32(0).into()\n-    );\n-    let ty = tcx.mk_ty(ty);\n \n-    let ptr_ty = tcx.mk_ptr(ty::TypeAndMut {\n-        ty,\n-        mutbl: hir::Mutability::MutImmutable,\n-    });\n+fn program_clauses_for_raw_ptr<'tcx>(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    mutbl: hir::Mutability\n+) -> Clauses<'tcx> {\n+    let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n \n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ptr_ty)),\n         hypotheses: ty::List::empty(),\n         category: ProgramClauseCategory::WellFormed,\n     };\n-    let wf_clause = Clause::ForAll(ty::Binder::bind(wf_clause));\n+    let wf_clause = Clause::Implies(wf_clause);\n \n     // `forall<T> { WellFormed(*const T). }`\n     tcx.mk_clauses(iter::once(wf_clause))\n@@ -77,20 +73,7 @@ fn program_clauses_for_fn_ptr<'tcx>(\n     unsafety: hir::Unsafety,\n     abi: abi::Abi\n ) -> Clauses<'tcx> {\n-    let inputs_and_output = tcx.mk_type_list(\n-        (0..arity_and_output).into_iter()\n-            .map(|i| ty::BoundVar::from(i))\n-            // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n-            .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into())))\n-    );\n-\n-    let fn_sig = ty::Binder::bind(ty::FnSig {\n-        inputs_and_output,\n-        variadic,\n-        unsafety,\n-        abi,\n-    });\n-    let fn_ptr = tcx.mk_fn_ptr(fn_sig);\n+    let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, variadic, unsafety, abi);\n \n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(fn_ptr)),\n@@ -105,12 +88,7 @@ fn program_clauses_for_fn_ptr<'tcx>(\n }\n \n fn program_clauses_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n-    let ty = ty::Bound(\n-        ty::INNERMOST,\n-        ty::BoundVar::from_u32(0).into()\n-    );\n-    let ty = tcx.mk_ty(ty);\n-\n+    let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n     let sized_trait = match tcx.lang_items().sized_trait() {\n@@ -142,12 +120,7 @@ fn program_clauses_for_array<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n-    let ty = ty::Bound(\n-        ty::INNERMOST,\n-        ty::BoundVar::from_u32(0).into()\n-    );\n-    let ty = tcx.mk_ty(ty);\n-\n+    let ty = generic_types::bound(tcx, 0);\n     let array_ty = tcx.mk_ty(ty::Array(ty, length));\n \n     let sized_trait = match tcx.lang_items().sized_trait() {\n@@ -179,12 +152,7 @@ fn program_clauses_for_tuple<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     arity: usize\n ) -> Clauses<'tcx> {\n-    let type_list = tcx.mk_type_list(\n-        (0..arity).into_iter()\n-            .map(|i| ty::BoundVar::from(i))\n-            .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n-    );\n-\n+    let type_list = generic_types::type_list(tcx, arity);\n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n \n     let sized_trait = match tcx.lang_items().sized_trait() {\n@@ -221,17 +189,17 @@ fn program_clauses_for_tuple<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-fn program_clauses_for_ref<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n+fn program_clauses_for_ref<'tcx>(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    mutbl: hir::Mutability\n+) -> Clauses<'tcx> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n-    let ty = tcx.mk_ty(\n-        ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n-    );\n-\n+    let ty = generic_types::bound(tcx, 1);\n     let ref_ty = tcx.mk_ref(region, ty::TypeAndMut {\n         ty,\n-        mutbl: hir::Mutability::MutImmutable,\n+        mutbl,\n     });\n \n     let outlives: DomainGoal = ty::OutlivesPredicate(ty, region).lower();\n@@ -367,7 +335,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     }\n \n                     // Always WF (recall that we do not check for parameters to be WF).\n-                    ty::RawPtr(..) => program_clauses_for_raw_ptr(self.infcx.tcx),\n+                    ty::RawPtr(ptr) => program_clauses_for_raw_ptr(self.infcx.tcx, ptr.mutbl),\n \n                     // Always WF (recall that we do not check for parameters to be WF).\n                     ty::FnPtr(fn_ptr) => {\n@@ -394,7 +362,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     ),\n \n                     // WF if `sub_ty` outlives `region`.\n-                    ty::Ref(..) => program_clauses_for_ref(self.infcx.tcx),\n+                    ty::Ref(_, _, mutbl) => program_clauses_for_ref(self.infcx.tcx, mutbl),\n \n                     ty::Dynamic(..) => {\n                         // FIXME: no rules yet for trait objects"}, {"sha": "15d6d6c51682d7b69cde88c5427dfd44529c9d55", "filename": "src/librustc_traits/generic_types.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "patch": "@@ -0,0 +1,62 @@\n+//! Utilities for creating generic types with bound vars in place of parameter values.\n+\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::hir;\n+use rustc_target::spec::abi;\n+\n+crate fn bound(tcx: ty::TyCtxt<'_, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n+    let ty = ty::Bound(\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(index).into()\n+    );\n+    tcx.mk_ty(ty)\n+}\n+\n+crate fn raw_ptr(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+    tcx.mk_ptr(ty::TypeAndMut {\n+        ty: bound(tcx, 0),\n+        mutbl,\n+    })\n+}\n+\n+crate fn fn_ptr(\n+    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    arity_and_output: usize,\n+    variadic: bool,\n+    unsafety: hir::Unsafety,\n+    abi: abi::Abi\n+) -> Ty<'tcx> {\n+    let inputs_and_output = tcx.mk_type_list(\n+        (0..arity_and_output).into_iter()\n+            .map(|i| ty::BoundVar::from(i))\n+            // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into())))\n+    );\n+\n+    let fn_sig = ty::Binder::bind(ty::FnSig {\n+        inputs_and_output,\n+        variadic,\n+        unsafety,\n+        abi,\n+    });\n+    tcx.mk_fn_ptr(fn_sig)\n+}\n+\n+crate fn type_list(tcx: ty::TyCtxt<'_, '_, 'tcx>, arity: usize) -> &'tcx ty::List<Ty<'tcx>> {\n+    tcx.mk_type_list(\n+        (0..arity).into_iter()\n+            .map(|i| ty::BoundVar::from(i))\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n+    )\n+}\n+\n+crate fn _ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+    let region = tcx.mk_region(\n+        ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n+    );\n+\n+    tcx.mk_ref(region, ty::TypeAndMut {\n+        ty: bound(tcx, 1),\n+        mutbl,\n+    })\n+}"}, {"sha": "d4548efdb6348f1e26db9136871aea3aee8c5932", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "patch": "@@ -25,6 +25,7 @@ mod implied_outlives_bounds;\n mod normalize_projection_ty;\n mod normalize_erasing_regions;\n pub mod lowering;\n+mod generic_types;\n mod type_op;\n \n use rustc::ty::query::Providers;"}, {"sha": "abd776fab862fbceda8f52b562d487b806439a5b", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=7b8da7908f5a9b2ad1d9acf7ae6fb90817b0d114", "patch": "@@ -11,6 +11,7 @@ use rustc::ty::{self, TyCtxt, Ty};\n use rustc::hir::def_id::DefId;\n use rustc_data_structures::fx::FxHashSet;\n use super::Lower;\n+use crate::generic_types;\n use std::iter;\n \n struct ClauseVisitor<'set, 'a, 'tcx: 'a + 'set> {\n@@ -38,20 +39,16 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             }\n \n             // forall<'a, T> { `Outlives(T: 'a) :- FromEnv(&'a T)` }\n-            ty::Ref(..) => {\n-                use rustc::hir;\n-\n+            ty::Ref(_, _, mutbl) => {\n                 let region = self.tcx.mk_region(\n                     ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n                 );\n-                let ty = self.tcx.mk_ty(\n-                    ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n-                );\n-\n+                let ty = generic_types::bound(self.tcx, 1);\n                 let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut {\n                     ty,\n-                    mutbl: hir::Mutability::MutImmutable,\n+                    mutbl,\n                 });\n+\n                 let from_env = DomainGoal::FromEnv(FromEnv::Ty(ref_ty));\n \n                 let clause = ProgramClause {"}]}