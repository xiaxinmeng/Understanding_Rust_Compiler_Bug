{"sha": "278b487cabcbe52b301a8023cd1362045b1a7132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OGI0ODdjYWJjYmU1MmIzMDFhODAyM2NkMTM2MjA0NWIxYTcxMzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-07T02:29:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:04:00Z"}, "message": "test: Fix tests and the pipe compiler", "tree": {"sha": "d72884e73791fcb1dc015db22e92569764ebae6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72884e73791fcb1dc015db22e92569764ebae6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/278b487cabcbe52b301a8023cd1362045b1a7132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/278b487cabcbe52b301a8023cd1362045b1a7132", "html_url": "https://github.com/rust-lang/rust/commit/278b487cabcbe52b301a8023cd1362045b1a7132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/278b487cabcbe52b301a8023cd1362045b1a7132/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4573a7760bd2014b2eca2537b6af15a9803e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4573a7760bd2014b2eca2537b6af15a9803e3d", "html_url": "https://github.com/rust-lang/rust/commit/db4573a7760bd2014b2eca2537b6af15a9803e3d"}], "stats": {"total": 277, "additions": 151, "deletions": 126}, "files": [{"sha": "c7e20d2b21f7edf328bec90266ca976e1147a7cb", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -448,10 +448,15 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n-    fn visit_enter_enum(&self, _n_variants: uint,\n+    fn visit_enter_enum(&self,\n+                        _n_variants: uint,\n                         get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                        _sz: uint, _align: uint) -> bool {\n-        let disr = unsafe { get_disr(transmute(self.ptr)) };\n+                        _sz: uint,\n+                        _align: uint) -> bool {\n+        let var_stk: &mut ~[VariantState] = self.var_stk;\n+        let disr = unsafe {\n+            get_disr(transmute(*self.ptr))\n+        };\n         self.var_stk.push(SearchingFor(disr));\n         true\n     }\n@@ -484,31 +489,12 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n-<<<<<<< HEAD\n-    fn visit_enum_variant_field(&self, i: uint, _offset: uint, inner: *TyDesc) -> bool {\n-        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n-=======\n-    #[cfg(stage0)]\n-    fn visit_enum_variant_field(&self, i: uint, inner: *TyDesc) -> bool {\n-        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n-            Degenerate | TagMatch => {\n-                if i != 0 {\n-                    self.writer.write_str(\", \");\n-                }\n-                if ! self.visit_inner(inner) {\n-                    return false;\n-                }\n-            }\n-            TagMismatch => ()\n-        }\n-        true\n-    }\n-\n-    #[cfg(not(stage0))]\n-    fn visit_enum_variant_field(&self, i: uint, _: uint, inner: *TyDesc)\n+    fn visit_enum_variant_field(&self,\n+                                i: uint,\n+                                _offset: uint,\n+                                inner: *TyDesc)\n                                 -> bool {\n-        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n->>>>>>> libcore: Remove mutable fields from repr\n+        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n             Matched => {\n                 if i != 0 {\n                     self.writer.write_str(\", \");\n@@ -522,26 +508,6 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n-<<<<<<< HEAD\n-=======\n-    #[cfg(stage0)]\n-    fn visit_leave_enum_variant(&self, _variant: uint,\n-                                _disr_val: int,\n-                                n_fields: uint,\n-                                _name: &str) -> bool {\n-        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n-            Degenerate | TagMatch => {\n-                if n_fields > 0 {\n-                    self.writer.write_char(')');\n-                }\n-            }\n-            TagMismatch => ()\n-        }\n-        true\n-    }\n-\n-    #[cfg(not(stage0))]\n->>>>>>> libcore: Remove mutable fields from repr\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 n_fields: uint,\n@@ -557,9 +523,13 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n-    fn visit_leave_enum(&self, _n_variants: uint,\n+    fn visit_leave_enum(&self,\n+                        _n_variants: uint,\n                         _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                        _sz: uint, _align: uint) -> bool {\n+                        _sz: uint,\n+                        _align: uint)\n+                        -> bool {\n+        let var_stk: &mut ~[VariantState] = self.var_stk;\n         match self.var_stk.pop() {\n             SearchingFor(*) => fail!(~\"enum value matched no variant\"),\n             _ => true"}, {"sha": "ce1969a14a183ab8c2ca4fe3807ea31d4f3d13b4", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -230,12 +230,14 @@ pub impl TaskBuilder {\n     /// the child.\n     fn supervised(&mut self) {\n         self.opts.supervised = true;\n+        self.opts.linked = false;\n     }\n \n     /// Link the child task's and parent task's failures. If either fails, the\n     /// other will be killed.\n     fn linked(&mut self) {\n         self.opts.linked = true;\n+        self.opts.supervised = false;\n     }\n \n     /**"}, {"sha": "7ac3ea4789d63680ca263ee31c27c5b43626bd6e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -64,6 +64,7 @@ impl gen_send for message {\n \n             let mut body = ~\"{\\n\";\n             body += fmt!(\"use super::%s;\\n\", name);\n+            body += ~\"let mut pipe = pipe;\\n\";\n \n             if this.proto.is_bounded() {\n                 let (sp, rp) = match (this.dir, next.dir) {\n@@ -73,12 +74,12 @@ impl gen_send for message {\n                   (recv, recv) => (~\"c\", ~\"s\")\n                 };\n \n-                body += ~\"let b = pipe.reuse_buffer();\\n\";\n+                body += ~\"let mut b = pipe.reuse_buffer();\\n\";\n                 body += fmt!(\"let %s = ::core::pipes::SendPacketBuffered(\\\n-                              &(b.buffer.data.%s));\\n\",\n+                              &mut (b.buffer.data.%s));\\n\",\n                              sp, next.name);\n                 body += fmt!(\"let %s = ::core::pipes::RecvPacketBuffered(\\\n-                              &(b.buffer.data.%s));\\n\",\n+                              &mut (b.buffer.data.%s));\\n\",\n                              rp, next.name);\n             }\n             else {\n@@ -366,7 +367,7 @@ impl gen_init for protocol {\n                         fmt!(\"data.%s.set_buffer(buffer)\",\n                              s.name))),\n                 ext_cx.parse_expr(fmt!(\n-                    \"::core::ptr::to_unsafe_ptr(&(data.%s))\",\n+                    \"::core::ptr::to_mut_unsafe_ptr(&mut (data.%s))\",\n                     self.states[0].name))));\n \n         quote_expr!({"}, {"sha": "cb494ec9d206ae03a8728be8260be7dbd8f4d725", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -103,7 +103,7 @@ fn main() {\n     let mut rand = vec::with_capacity(n_keys);\n \n     {\n-        let rng = core::rand::IsaacRng::new_seeded([1, 1, 1, 1, 1, 1, 1]);\n+        let mut rng = core::rand::IsaacRng::new_seeded([1, 1, 1, 1, 1, 1, 1]);\n         let mut set = HashSet::new();\n         while set.len() != n_keys {\n             let next = rng.next() as uint;"}, {"sha": "bae21c6d4a325ef092650e4cf77f9e82f470335b", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -31,8 +31,13 @@ fn timed(result: &mut float, op: &fn()) {\n }\n \n pub impl Results {\n-    fn bench_int<T:Set<uint>, R: rand::Rng>(&mut self, rng: &R, num_keys: uint,\n-                               rand_cap: uint, f: &fn() -> T) {\n+    fn bench_int<T:Set<uint>,\n+                 R: rand::Rng>(\n+                 &mut self,\n+                 rng: &mut R,\n+                 num_keys: uint,\n+                 rand_cap: uint,\n+                 f: &fn() -> T) {\n         {\n             let mut set = f();\n             do timed(&mut self.sequential_ints) {\n@@ -69,8 +74,12 @@ pub impl Results {\n         }\n     }\n \n-    fn bench_str<T:Set<~str>, R: rand::Rng>(&mut self, rng: &R, num_keys: uint,\n-                                            f: &fn() -> T) {\n+    fn bench_str<T:Set<~str>,\n+                 R:rand::Rng>(\n+                 &mut self,\n+                 rng: &mut R,\n+                 num_keys: uint,\n+                 f: &fn() -> T) {\n         {\n             let mut set = f();\n             do timed(&mut self.sequential_strings) {\n@@ -155,25 +164,25 @@ fn main() {\n     let max = 200000;\n \n     {\n-        let rng = rand::IsaacRng::new_seeded(seed);\n+        let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n-        results.bench_int(&rng, num_keys, max, || HashSet::new::<uint>());\n-        results.bench_str(&rng, num_keys, || HashSet::new::<~str>());\n+        results.bench_int(&mut rng, num_keys, max, || HashSet::new::<uint>());\n+        results.bench_str(&mut rng, num_keys, || HashSet::new::<~str>());\n         write_results(\"core::hashmap::HashSet\", &results);\n     }\n \n     {\n-        let rng = rand::IsaacRng::new_seeded(seed);\n+        let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n-        results.bench_int(&rng, num_keys, max, || TreeSet::new::<uint>());\n-        results.bench_str(&rng, num_keys, || TreeSet::new::<~str>());\n+        results.bench_int(&mut rng, num_keys, max, || TreeSet::new::<uint>());\n+        results.bench_str(&mut rng, num_keys, || TreeSet::new::<~str>());\n         write_results(\"std::treemap::TreeSet\", &results);\n     }\n \n     {\n-        let rng = rand::IsaacRng::new_seeded(seed);\n+        let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n-        results.bench_int(&rng, num_keys, max, || BitvSet::new());\n+        results.bench_int(&mut rng, num_keys, max, || BitvSet::new());\n         write_results(\"std::bitv::BitvSet\", &results);\n     }\n }"}, {"sha": "95a83af93d5412843884034b35aacd49c1d3d9be", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -33,12 +33,15 @@ fn main() {\n fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n     let mut run_test = false;\n \n-    if os::getenv(~\"RUST_BENCH\").is_some() { run_test = true }\n-    else if argv.len() > 0 {\n+    if os::getenv(~\"RUST_BENCH\").is_some() {\n+        run_test = true\n+    } else if argv.len() > 0 {\n         run_test = argv.contains(&~\"all\") || argv.contains(&name)\n     }\n \n-    if !run_test { return }\n+    if !run_test {\n+        return\n+    }\n \n     let start = precise_time_s();\n     test();\n@@ -69,7 +72,7 @@ fn read_line() {\n }\n \n fn vec_plus() {\n-    let r = rand::rng();\n+    let mut r = rand::rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -86,7 +89,7 @@ fn vec_plus() {\n }\n \n fn vec_append() {\n-    let r = rand::rng();\n+    let mut r = rand::rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -103,7 +106,7 @@ fn vec_append() {\n }\n \n fn vec_push_all() {\n-    let r = rand::rng();\n+    let mut r = rand::rng();\n \n     let mut v = ~[];\n     for uint::range(0, 1500) |i| {"}, {"sha": "83855b142feb762eabbd262dd3a963f0d157e25f", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -32,19 +32,20 @@ type graph = ~[~[node_id]];\n type bfs_result = ~[node_id];\n \n fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n-    let r = rand::XorShiftRng::new();\n-\n-    fn choose_edge<R: rand::Rng>(i: node_id, j: node_id, scale: uint, r: &R)\n-        -> (node_id, node_id) {\n+    let mut r = rand::XorShiftRng::new();\n \n+    fn choose_edge<R: rand::Rng>(i: node_id,\n+                                 j: node_id,\n+                                 scale: uint,\n+                                 r: &mut R)\n+                                 -> (node_id, node_id) {\n         let A = 0.57;\n         let B = 0.19;\n         let C = 0.19;\n \n         if scale == 0u {\n             (i, j)\n-        }\n-        else {\n+        } else {\n             let i = i * 2i64;\n             let j = j * 2i64;\n             let scale = scale - 1u;\n@@ -73,7 +74,7 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n     }\n \n     do vec::from_fn((1u << scale) * edgefactor) |_i| {\n-        choose_edge(0i64, 0i64, scale, &r)\n+        choose_edge(0i64, 0i64, scale, &mut r)\n     }\n }\n \n@@ -103,7 +104,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n \n fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n     let mut keys = HashSet::new();\n-    let r = rand::rng();\n+    let mut r = rand::rng();\n \n     while keys.len() < n {\n         let k = r.gen_uint_range(0u, graph.len());"}, {"sha": "95758b3fe64063c0bf7c19f8dd436008ef8b2f97", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -65,15 +65,15 @@ fn run(args: &[~str]) {\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n         let to_child = to_child.clone();\n-        do task::task().future_result(|+r| {\n-            worker_results.push(r);\n-        }).spawn || {\n+        let mut builder = task::task();\n+        builder.future_result(|r| worker_results.push(r));\n+        do builder.spawn {\n             for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker %? exiting\", i);\n-        };\n+        }\n     }\n     do task::spawn || {\n         server(&from_parent, &to_parent);"}, {"sha": "e213a44b49ae7133b7e08a67f0a484f012e2f860", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -62,9 +62,9 @@ fn run(args: &[~str]) {\n     for uint::range(0, workers) |_i| {\n         let (from_parent_, to_child) = stream();\n         from_parent.add(from_parent_);\n-        do task::task().future_result(|+r| {\n-            worker_results.push(r);\n-        }).spawn || {\n+        let mut builder = task::task();\n+        builder.future_result(|r| worker_results.push(r));\n+        do builder.spawn {\n             for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));"}, {"sha": "ed08297ab3fe30b118f83b37ca761f523a359ee4", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -103,7 +103,9 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each |f| { f.get() };\n+    for futures.each_mut |f| {\n+        f.get()\n+    }\n \n     let stop = time::precise_time_s();\n "}, {"sha": "22d58730f58f33a0b2f8f86354449caf1306acc5", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -96,7 +96,9 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each |f| { f.get() };\n+    for futures.each_mut |f| {\n+        let _ = f.get();\n+    }\n \n     let stop = time::precise_time_s();\n "}, {"sha": "221177b9dd9a8b76eebfa8ee84f207eb1cd9e296", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -104,7 +104,9 @@ fn main() {\n     thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n-    for futures.each |f| { f.get() };\n+    for futures.each_mut |f| {\n+        let _ = f.get();\n+    }\n \n     let stop = time::precise_time_s();\n "}, {"sha": "992ce73a4bff7473591ae6ffdc7503ce79c3bdbe", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -13,7 +13,7 @@ fn lerp(a: f32, b: f32, v: f32) -> f32 { a * (1.0 - v) + b * v }\n #[inline(always)]\n fn smooth(v: f32) -> f32 { v * v * (3.0 - 2.0 * v) }\n \n-fn random_gradient<R:Rng>(r: &R) -> Vec2 {\n+fn random_gradient<R:Rng>(r: &mut R) -> Vec2 {\n     let v = 2.0 * float::consts::pi * r.gen();\n     Vec2 {\n         x: float::cos(v) as f32,\n@@ -33,11 +33,15 @@ struct Noise2DContext {\n \n pub impl Noise2DContext {\n     fn new() -> Noise2DContext {\n-        let r = rand::rng();\n+        let mut r = rand::rng();\n         let mut rgradients = [ Vec2 { x: 0.0, y: 0.0 }, ..256 ];\n-        for int::range(0, 256) |i| { rgradients[i] = random_gradient(&r); }\n+        for int::range(0, 256) |i| {\n+            rgradients[i] = random_gradient(&mut r);\n+        }\n         let mut permutations = [ 0, ..256 ];\n-        for int::range(0, 256) |i| { permutations[i] = i; }\n+        for int::range(0, 256) |i| {\n+            permutations[i] = i;\n+        }\n         r.shuffle_mut(permutations);\n \n         Noise2DContext {\n@@ -53,7 +57,11 @@ pub impl Noise2DContext {\n     }\n \n     #[inline]\n-    fn get_gradients(&self, gradients: &mut [Vec2, ..4], origins: &mut [Vec2, ..4], x: f32, y: f32) {\n+    fn get_gradients(&self,\n+                     gradients: &mut [Vec2, ..4],\n+                     origins: &mut [Vec2, ..4],\n+                     x: f32,\n+                     y: f32) {\n         let x0f = f32::floor(x);\n         let y0f = f32::floor(y);\n         let x0 = x0f as int;"}, {"sha": "7316b68f8bd420976bbe2892b7f69caadaa8e632", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -63,7 +63,10 @@ fn make_random_fasta(wr: @io::Writer,\n                      genelist: ~[AminoAcids],\n                      n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n-    let rng = @mut MyRandom {last: rand::rng().next()};\n+    let mut rng = rand::rng();\n+    let rng = @mut MyRandom {\n+        last: rng.next()\n+    };\n     let mut op: ~str = ~\"\";\n     for uint::range(0u, n as uint) |_i| {\n         str::push_char(&mut op, select_random(myrandom_next(rng, 100u32),"}, {"sha": "27a59feedd0a31a766dac358144cc74f776c6733", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -26,7 +26,6 @@ use core::int::range;\n use core::comm::*;\n use core::io::WriterUtil;\n \n-use core::result;\n use core::result::{Ok, Err};\n \n fn fib(n: int) -> int {\n@@ -80,13 +79,15 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let mut results = ~[];\n     for range(0, num_tasks) |i| {\n-        do task::task().future_result(|+r| {\n-            results.push(r);\n-        }).spawn {\n+        let mut builder = task::task();\n+        builder.future_result(|r| results.push(r));\n+        do builder.spawn {\n             stress_task(i);\n         }\n     }\n-    for results.each |r| { r.recv(); }\n+    for results.each |r| {\n+        r.recv();\n+    }\n }\n \n fn main() {"}, {"sha": "99e7de307279fe0e5c1df5946197981421965e2c", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -48,7 +48,10 @@ fn grandchild_group(num_tasks: uint) {\n \n fn spawn_supervised_blocking(myname: &str, +f: ~fn()) {\n     let mut res = None;\n-    task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n+    let mut builder = task::task();\n+    builder.future_result(|r| res = Some(r));\n+    builder.supervised();\n+    builder.spawn(f);\n     error!(\"%s group waiting\", myname);\n     let x = res.unwrap().recv();\n     assert!(x == task::Success);"}, {"sha": "d22c7e82ad5de456b8925d062c0cec42d200ce52", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -26,7 +26,8 @@ pub fn main() {\n         c2.send(());\n         error!(\"child blocks\");\n         let (p, c) = comm::stream();\n-        (p, p3).select();\n+        let mut tuple = (p, p3);\n+        tuple.select();\n         c.send(());\n     };\n     error!(\"parent tries\");"}, {"sha": "dafdd0fba48c37606454b93a191dca2052bffba3", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n         calllink09,\n         calllink10\n     ];\n-    let rng = rand::rng();\n+    let mut rng = rand::rng();\n     for fns.each |f| {\n         let f = *f;\n         let sz = rng.next() % 256u32 + 256u32;"}, {"sha": "985eaecdc781b28275776cdd6d28561498f610f6", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -22,11 +22,11 @@ proto! oneshot (\n )\n \n pub fn main() {\n-    let (c, p) = oneshot::init();\n+    let mut (c, p) = oneshot::init();\n \n-    assert!(!pipes::peek(&p));\n+    assert!(!pipes::peek(&mut p));\n \n     oneshot::client::signal(c);\n \n-    assert!(pipes::peek(&p));\n+    assert!(pipes::peek(&mut p));\n }"}, {"sha": "d11d5eb47bbb91ccc219b51656f37b8db8eb9004", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -40,7 +40,7 @@ mod pingpong {\n         do pipes::entangle_buffer(buffer) |buffer, data| {\n             data.ping.set_buffer(buffer);\n             data.pong.set_buffer(buffer);\n-            ptr::to_unsafe_ptr(&(data.ping))\n+            ptr::to_mut_unsafe_ptr(&mut (data.ping))\n         }\n     }\n     pub struct ping(server::pong);\n@@ -50,11 +50,11 @@ mod pingpong {\n         use core::pipes::*;\n         use core::ptr;\n \n-        pub fn ping(+pipe: ping) -> pong {\n+        pub fn ping(mut pipe: ping) -> pong {\n             {\n-                let b = pipe.reuse_buffer();\n-                let s = SendPacketBuffered(&b.buffer.data.pong);\n-                let c = RecvPacketBuffered(&b.buffer.data.pong);\n+                let mut b = pipe.reuse_buffer();\n+                let s = SendPacketBuffered(&mut b.buffer.data.pong);\n+                let c = RecvPacketBuffered(&mut b.buffer.data.pong);\n                 let message = ::pingpong::ping(s);\n                 send(pipe, message);\n                 c\n@@ -72,11 +72,11 @@ mod pingpong {\n \n         pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,\n         ::pingpong::Packets>;\n-        pub fn pong(+pipe: pong) -> ping {\n+        pub fn pong(mut pipe: pong) -> ping {\n             {\n-                let b = pipe.reuse_buffer();\n-                let s = SendPacketBuffered(&b.buffer.data.ping);\n-                let c = RecvPacketBuffered(&b.buffer.data.ping);\n+                let mut b = pipe.reuse_buffer();\n+                let s = SendPacketBuffered(&mut b.buffer.data.ping);\n+                let c = RecvPacketBuffered(&mut b.buffer.data.ping);\n                 let message = ::pingpong::pong(s);\n                 send(pipe, message);\n                 c"}, {"sha": "fcfd77dab0aa3f88296d562f01147b1cc49c8dde", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -1,4 +1,8 @@\n // xfail-fast\n+// xfail-test\n+\n+// XFAIL'd because this is going to be revamped, and it's not compatible as\n+// written with the new mutability rules.\n \n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at"}, {"sha": "774f2470b3cd33be6718433bd150e792f0596104", "filename": "src/test/run-pass/platform_thread.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplatform_thread.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -24,9 +24,15 @@ fn run(i: int) {\n         return;\n     }\n \n-    do task::task().sched_mode(task::PlatformThread).unlinked().spawn {\n+    let mut builder = task::task();\n+    builder.sched_mode(task::PlatformThread);\n+    builder.unlinked();\n+    do builder.spawn {\n         task::yield();\n-        do task::task().sched_mode(task::SingleThreaded).unlinked().spawn {\n+        let mut builder = task::task();\n+        builder.sched_mode(task::SingleThreaded);\n+        builder.unlinked();\n+        do builder.spawn {\n             task::yield();\n             run(i - 1);\n             task::yield();"}, {"sha": "e61a855b42941efd0468d39e6df56b8e72b92007", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -17,7 +17,9 @@ fn start(&&task_number: int) { debug!(\"Started / Finished task.\"); }\n fn test00() {\n     let i: int = 0;\n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(r); }).spawn {\n+    let mut builder = task::task();\n+    builder.future_result(|r| result = Some(r));\n+    do builder.spawn {\n         start(i)\n     }\n "}, {"sha": "fd700475988cfe670f793e16218c866dcb735d40", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -40,9 +40,9 @@ fn test00() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         let ch = po.chan();\n-        task::task().future_result(|+r| {\n-            results.push(r);\n-        }).spawn({\n+        let mut builder = task::task();\n+        builder.future_result(|r| results.push(r));\n+        builder.spawn({\n             let i = i;\n             || test00_start(&ch, i, number_of_messages)\n         });"}, {"sha": "798e9d37b553469bf11f106167101ff74622918b", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -27,8 +27,9 @@ fn test00() {\n     let ch = p.chan();\n \n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(r); }).spawn\n-          || {\n+    let mut builder = task::task();\n+    builder.future_result(|r| result = Some(r));\n+    do builder.spawn {\n         test00_start(&ch, number_of_messages);\n     }\n "}, {"sha": "8ed269099520a3fe064e43602b57950117a9d9e7", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -11,7 +11,9 @@\n \n pub fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n+    let mut builder = task::task();\n+    builder.future_result(|+r| { result = Some(r); });\n+    builder.spawn(child);\n     error!(\"1\");\n     task::yield();\n     error!(\"2\");"}, {"sha": "278ce1c37666f6082c5f0be783a651ddad1721a8", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278b487cabcbe52b301a8023cd1362045b1a7132/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=278b487cabcbe52b301a8023cd1362045b1a7132", "patch": "@@ -11,7 +11,9 @@\n \n pub fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n+    let mut builder = task::task();\n+    builder.future_result(|+r| { result = Some(r); });\n+    builder.spawn(child);\n     error!(\"1\");\n     task::yield();\n     result.unwrap().recv();"}]}