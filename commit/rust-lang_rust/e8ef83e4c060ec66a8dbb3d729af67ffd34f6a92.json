{"sha": "e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "node_id": "C_kwDOAAsO6NoAKGU4ZWY4M2U0YzA2MGVjNjZhOGRiYjNkNzI5YWY2N2ZmZDM0ZjZhOTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-12T05:52:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T05:52:39Z"}, "message": "Rollup merge of #106748 - clubby789:on-unimplemented-fmt-verify, r=compiler-errors\n\nClean up `OnUnimplementedFormatString::verify`\n\nLift the always-allowed symbols to a static array and replace a `match iter().find(...)` with `iter().any(...)`", "tree": {"sha": "59fa9288665addefe4813066e207348fc0fe9ed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59fa9288665addefe4813066e207348fc0fe9ed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6AnCRBK7hj4Ov3rIwAA670IAHdYjpjCerEtdpHV5C2yMR4n\nTyzF8c5UsrkO3aCdcefBDl3JTPNRVvrdO7YPOZsWBS7KxvYULLbPzUa64ibtI0HI\nVinJcVnk1IB2CLillmJ0xtyWmCf3muPv6jyJQjCXc7kRmcWf3X5sfqChqVrNua6c\nG0Cz+wxTjH/8k45sGsDiENrwWN8W7D3c+BF662MAUeMNmYpJqu6ELlzGAhLMhSkl\nnlVTGgLqITSZ1fAT//B03HTpbFET4NPfonJfmoN9NKoNsetKoQoY8GrIzeZPeEow\n6sgO1vteS8V7EUp/tnMvGcbY0G+0HBojut+2P8wxypa/dAuHpO8V8khoOiV7Tpw=\n=GvyN\n-----END PGP SIGNATURE-----\n", "payload": "tree 59fa9288665addefe4813066e207348fc0fe9ed3\nparent be76526707a0b7ba73e7bf47dcf060559ed352b1\nparent b78a571ce1f293aab990c98a86db3b2084a9a794\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673502759 +0100\ncommitter GitHub <noreply@github.com> 1673502759 +0100\n\nRollup merge of #106748 - clubby789:on-unimplemented-fmt-verify, r=compiler-errors\n\nClean up `OnUnimplementedFormatString::verify`\n\nLift the always-allowed symbols to a static array and replace a `match iter().find(...)` with `iter().any(...)`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "html_url": "https://github.com/rust-lang/rust/commit/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be76526707a0b7ba73e7bf47dcf060559ed352b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/be76526707a0b7ba73e7bf47dcf060559ed352b1", "html_url": "https://github.com/rust-lang/rust/commit/be76526707a0b7ba73e7bf47dcf060559ed352b1"}, {"sha": "b78a571ce1f293aab990c98a86db3b2084a9a794", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78a571ce1f293aab990c98a86db3b2084a9a794", "html_url": "https://github.com/rust-lang/rust/commit/b78a571ce1f293aab990c98a86db3b2084a9a794"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "e599996230f51691b87c4a97c34d2195d2307739", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "patch": "@@ -37,6 +37,21 @@ pub trait TypeErrCtxtExt<'tcx> {\n     ) -> OnUnimplementedNote;\n }\n \n+/// The symbols which are always allowed in a format string\n+static ALLOWED_FORMAT_SYMBOLS: &[Symbol] = &[\n+    kw::SelfUpper,\n+    sym::ItemContext,\n+    sym::from_method,\n+    sym::from_desugaring,\n+    sym::direct,\n+    sym::cause,\n+    sym::integral,\n+    sym::integer_,\n+    sym::float,\n+    sym::_Self,\n+    sym::crate_local,\n+];\n+\n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn impl_similar_to(\n         &self,\n@@ -543,38 +558,26 @@ impl<'tcx> OnUnimplementedFormatString {\n                 Piece::NextArgument(a) => match a.position {\n                     Position::ArgumentNamed(s) => {\n                         match Symbol::intern(s) {\n-                            // `{Self}` is allowed\n-                            kw::SelfUpper => (),\n                             // `{ThisTraitsName}` is allowed\n                             s if s == trait_name => (),\n-                            // `{from_method}` is allowed\n-                            sym::from_method => (),\n-                            // `{from_desugaring}` is allowed\n-                            sym::from_desugaring => (),\n-                            // `{ItemContext}` is allowed\n-                            sym::ItemContext => (),\n-                            // `{integral}` and `{integer}` and `{float}` are allowed\n-                            sym::integral | sym::integer_ | sym::float => (),\n+                            s if ALLOWED_FORMAT_SYMBOLS.contains(&s) => (),\n                             // So is `{A}` if A is a type parameter\n-                            s => match generics.params.iter().find(|param| param.name == s) {\n-                                Some(_) => (),\n-                                None => {\n-                                    let reported = struct_span_err!(\n-                                        tcx.sess,\n-                                        span,\n-                                        E0230,\n-                                        \"there is no parameter `{}` on {}\",\n-                                        s,\n-                                        if trait_def_id == item_def_id {\n-                                            format!(\"trait `{}`\", trait_name)\n-                                        } else {\n-                                            \"impl\".to_string()\n-                                        }\n-                                    )\n-                                    .emit();\n-                                    result = Err(reported);\n-                                }\n-                            },\n+                            s if generics.params.iter().any(|param| param.name == s) => (),\n+                            s => {\n+                                result = Err(struct_span_err!(\n+                                    tcx.sess,\n+                                    span,\n+                                    E0230,\n+                                    \"there is no parameter `{}` on {}\",\n+                                    s,\n+                                    if trait_def_id == item_def_id {\n+                                        format!(\"trait `{}`\", trait_name)\n+                                    } else {\n+                                        \"impl\".to_string()\n+                                    }\n+                                )\n+                                .emit());\n+                            }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used"}]}