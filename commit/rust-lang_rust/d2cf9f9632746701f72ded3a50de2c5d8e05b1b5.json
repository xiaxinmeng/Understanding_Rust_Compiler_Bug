{"sha": "d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyY2Y5Zjk2MzI3NDY3MDFmNzJkZWQzYTUwZGUyYzVkOGUwNWIxYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-01T19:28:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-01T19:28:15Z"}, "message": "Auto merge of #26658 - alexcrichton:windows-net-no-inherit, r=aturon\n\nThis was added after Windows 7 SP1, so it's not always available. Instead use\r\nthe `SetHandleInformation` function to flag a socket as not inheritable. This is\r\nnot atomic with respect to creating new processes, but it mirrors what Unix does\r\nwith respect to possibly using the atomic option in the future.\r\n\r\nCloses #26543", "tree": {"sha": "0edbfd1e57a8bc2a7404692d8f7136ef8d0b1b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0edbfd1e57a8bc2a7404692d8f7136ef8d0b1b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "html_url": "https://github.com/rust-lang/rust/commit/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a599c8cef871d842eea0a6217cfce23093d09cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a599c8cef871d842eea0a6217cfce23093d09cf", "html_url": "https://github.com/rust-lang/rust/commit/8a599c8cef871d842eea0a6217cfce23093d09cf"}, {"sha": "88900895562e0ab5e0642724fe9dd71eeda79a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88900895562e0ab5e0642724fe9dd71eeda79a7a", "html_url": "https://github.com/rust-lang/rust/commit/88900895562e0ab5e0642724fe9dd71eeda79a7a"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "2ddf685729bcba2d013997c660013b46d66e1815", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "patch": "@@ -64,6 +64,8 @@ pub const STD_INPUT_HANDLE: libc::DWORD = -10i32 as libc::DWORD;\n pub const STD_OUTPUT_HANDLE: libc::DWORD = -11i32 as libc::DWORD;\n pub const STD_ERROR_HANDLE: libc::DWORD = -12i32 as libc::DWORD;\n \n+pub const HANDLE_FLAG_INHERIT: libc::DWORD = 0x00000001;\n+\n #[repr(C)]\n #[cfg(target_arch = \"x86\")]\n pub struct WSADATA {\n@@ -408,6 +410,9 @@ extern \"system\" {\n     pub fn GetUserProfileDirectoryW(hToken: libc::HANDLE,\n                                     lpProfileDir: libc::LPCWSTR,\n                                     lpcchSize: *mut libc::DWORD) -> libc::BOOL;\n+    pub fn SetHandleInformation(hObject: libc::HANDLE,\n+                                dwMask: libc::DWORD,\n+                                dwFlags: libc::DWORD) -> libc::BOOL;\n }\n \n // Functions that aren't available on Windows XP, but we still use them and just"}, {"sha": "b765bc6e50085c174da39fe8a8f085b4829e929d", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cf9f9632746701f72ded3a50de2c5d8e05b1b5/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=d2cf9f9632746701f72ded3a50de2c5d8e05b1b5", "patch": "@@ -82,26 +82,31 @@ impl Socket {\n             SocketAddr::V4(..) => libc::AF_INET,\n             SocketAddr::V6(..) => libc::AF_INET6,\n         };\n-        let socket = unsafe {\n-            c::WSASocketW(fam, ty, 0, 0 as *mut _, 0,\n-                          c::WSA_FLAG_OVERLAPPED | c::WSA_FLAG_NO_HANDLE_INHERIT)\n-        };\n-        match socket {\n-            INVALID_SOCKET => Err(last_error()),\n-            n => Ok(Socket(n)),\n-        }\n+        let socket = try!(unsafe {\n+            match c::WSASocketW(fam, ty, 0, 0 as *mut _, 0,\n+                                c::WSA_FLAG_OVERLAPPED) {\n+                INVALID_SOCKET => Err(last_error()),\n+                n => Ok(Socket(n)),\n+            }\n+        });\n+        try!(socket.set_no_inherit());\n+        Ok(socket)\n     }\n \n     pub fn accept(&self, storage: *mut libc::sockaddr,\n                   len: *mut libc::socklen_t) -> io::Result<Socket> {\n-        match unsafe { libc::accept(self.0, storage, len) } {\n-            INVALID_SOCKET => Err(last_error()),\n-            n => Ok(Socket(n)),\n-        }\n+        let socket = try!(unsafe {\n+            match libc::accept(self.0, storage, len) {\n+                INVALID_SOCKET => Err(last_error()),\n+                n => Ok(Socket(n)),\n+            }\n+        });\n+        try!(socket.set_no_inherit());\n+        Ok(socket)\n     }\n \n     pub fn duplicate(&self) -> io::Result<Socket> {\n-        unsafe {\n+        let socket = try!(unsafe {\n             let mut info: c::WSAPROTOCOL_INFO = mem::zeroed();\n             try!(cvt(c::WSADuplicateSocketW(self.0,\n                                             c::GetCurrentProcessId(),\n@@ -110,12 +115,13 @@ impl Socket {\n                                 info.iSocketType,\n                                 info.iProtocol,\n                                 &mut info, 0,\n-                                c::WSA_FLAG_OVERLAPPED |\n-                                    c::WSA_FLAG_NO_HANDLE_INHERIT) {\n+                                c::WSA_FLAG_OVERLAPPED) {\n                 INVALID_SOCKET => Err(last_error()),\n                 n => Ok(Socket(n)),\n             }\n-        }\n+        });\n+        try!(socket.set_no_inherit());\n+        Ok(socket)\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -156,6 +162,13 @@ impl Socket {\n             Ok(Some(Duration::new(secs as u64, nsec as u32)))\n         }\n     }\n+\n+    fn set_no_inherit(&self) -> io::Result<()> {\n+        sys::cvt(unsafe {\n+            c::SetHandleInformation(self.0 as libc::HANDLE,\n+                                    c::HANDLE_FLAG_INHERIT, 0)\n+        }).map(|_| ())\n+    }\n }\n \n impl Drop for Socket {"}]}