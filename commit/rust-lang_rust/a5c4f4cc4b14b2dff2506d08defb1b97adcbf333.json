{"sha": "a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "node_id": "C_kwDOAAsO6NoAKGE1YzRmNGNjNGIxNGIyZGZmMjUwNmQwOGRlZmIxYjk3YWRjYmYzMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-05T05:59:13Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-18T03:21:54Z"}, "message": "Suggest deref non-lvalue mutable reference", "tree": {"sha": "c04d82a4d30d2856726dc5078528963892583260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04d82a4d30d2856726dc5078528963892583260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "html_url": "https://github.com/rust-lang/rust/commit/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "html_url": "https://github.com/rust-lang/rust/commit/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "9015868b49992ddd5b840aae1094281933270bad", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -836,6 +836,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         lhs: &'tcx hir::Expr<'tcx>,\n         err_code: &'static str,\n         op_span: Span,\n+        adjust_err: impl FnOnce(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n     ) {\n         if lhs.is_syntactic_place_expr() {\n             return;\n@@ -858,6 +859,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         });\n \n+        adjust_err(&mut err);\n+\n         err.emit();\n     }\n \n@@ -1050,9 +1053,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.ty_error();\n         }\n \n-        self.check_lhs_assignable(lhs, \"E0070\", span);\n-\n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n+\n+        self.check_lhs_assignable(lhs, \"E0070\", span, |err| {\n+            let rhs_ty = self.check_expr(&rhs);\n+\n+            if let ty::Ref(_, lhs_inner_ty, hir::Mutability::Mut) = lhs_ty.kind() {\n+                if self.can_coerce(rhs_ty, *lhs_inner_ty) {\n+                    err.span_suggestion_verbose(\n+                        lhs.span.shrink_to_lo(),\n+                        \"consider dereferencing here to assign to the mutable \\\n+                    borrowed piece of memory\",\n+                        \"*\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+        });\n+\n         let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n \n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);"}, {"sha": "5066e21dc8d85c8b487b9c585e604b42254734d0", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return_ty\n             };\n \n-        self.check_lhs_assignable(lhs, \"E0067\", op.span);\n+        self.check_lhs_assignable(lhs, \"E0067\", op.span, |_| {});\n \n         ty\n     }"}, {"sha": "76e2afc672a1aad893a50712749f32ee381e766c", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut x = vec![1usize];\n+    *x.last_mut().unwrap() = 2usize;\n+    //~^ ERROR invalid left-hand side of assignment\n+}"}, {"sha": "ff91f2297c814f591a8eceb04356249c1b81dcb6", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut x = vec![1usize];\n+    x.last_mut().unwrap() = 2usize;\n+    //~^ ERROR invalid left-hand side of assignment\n+}"}, {"sha": "745ada5de0bc3d5e4c2df6ae6b0c1110df45f1d9", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -0,0 +1,16 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/assign-non-lval-mut-ref.rs:5:27\n+   |\n+LL |     x.last_mut().unwrap() = 2usize;\n+   |     --------------------- ^\n+   |     |\n+   |     cannot assign to this expression\n+   |\n+help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+   |\n+LL |     *x.last_mut().unwrap() = 2usize;\n+   |     +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "95eb021965f4db39548ddc14ae0df832ef2bcfc6", "filename": "src/test/ui/typeck/issue-93486.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-93486.stderr?ref=a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "patch": "@@ -5,6 +5,11 @@ LL |         vec![].last_mut().unwrap() = 3_u8;\n    |         -------------------------- ^\n    |         |\n    |         cannot assign to this expression\n+   |\n+help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+   |\n+LL |         *vec![].last_mut().unwrap() = 3_u8;\n+   |         +\n \n error: aborting due to previous error\n "}]}