{"sha": "5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MzZhNWM1NWFjNmIwOGJkMGJiNzI5YjdkYTU1OTE1ZTZlNzhmZTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-27T23:27:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-28T18:12:42Z"}, "message": "Point to lifetime in fn definition on lifetime error note", "tree": {"sha": "4fde2ac606684d1f96cfbdad8e046f18b19ab314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fde2ac606684d1f96cfbdad8e046f18b19ab314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "html_url": "https://github.com/rust-lang/rust/commit/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8ca262570d856d354d4ea28632197ca8be15b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8ca262570d856d354d4ea28632197ca8be15b9", "html_url": "https://github.com/rust-lang/rust/commit/cd8ca262570d856d354d4ea28632197ca8be15b9"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "c71d4e90ed389f1163e258131569b09ccad1cfd8", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -189,6 +189,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self,\n         region: ty::Region<'tcx>,\n     ) -> (String, Option<Span>) {\n+        let cm = self.sess.codemap();\n+\n         let scope = region.free_region_binding_scope(self);\n         let node = self.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n         let unknown;\n@@ -219,10 +221,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n         let (prefix, span) = match *region {\n-            ty::ReEarlyBound(ref br) => (\n-                format!(\"the lifetime {} as defined on\", br.name),\n-                self.sess.codemap().def_span(self.hir.span(node)),\n-            ),\n+            ty::ReEarlyBound(ref br) => {\n+                let mut sp = cm.def_span(self.hir.span(node));\n+                if let Some(generics) = self.hir.get_generics(scope) {\n+                    for param in &generics.params {\n+                        if param.name.name().as_str() == br.name.as_str() {\n+                            sp = param.span;\n+                        }\n+                    }\n+                }\n+                (format!(\"the lifetime {} as defined on\", br.name), sp)\n+            }\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n@@ -234,7 +243,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", fr.bound_region),\n-                    self.sess.codemap().def_span(self.hir.span(node)),\n+                    cm.def_span(self.hir.span(node)),\n                 ),\n             },\n             _ => bug!(),"}, {"sha": "9ed07d1c8e92f4f27c2b4d3cfd8c8f95d68cb82b", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -36,6 +36,7 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n \n     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n         //~^ ERROR method not compatible with trait\n+        //~| ERROR method not compatible with trait\n         //\n         // Note: This is a terrible error message. It is caused\n         // because, in the trait, 'b is early bound, and in the impl,"}, {"sha": "deab39b99246c7ff72af890eff6b263060bbb26c", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -29,6 +29,25 @@ note: the lifetime 'c as defined on the method body at 37:5...\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:24\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |                        ^^\n+\n+error[E0308]: method not compatible with trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n+              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+note: the lifetime 'c as defined on the method body at 37:24...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n+   |\n+LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |                        ^^\n note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:5\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n    |\n@@ -53,7 +72,7 @@ LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0195, E0276, E0308.\n For more information about an error, try `rustc --explain E0195`."}, {"sha": "92464a2430169379aee84065f76b77ca002384c7", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -4,16 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 26:1\n-  --> $DIR/region-escape-via-bound.rs:26:1\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 28:7\n+  --> $DIR/region-escape-via-bound.rs:28:7\n    |\n-LL | / fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n-LL | |     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n-LL | | where 'x: 'y\n-LL | | {\n-LL | |     x\n-LL | | }\n-   | |_^\n+LL | where 'x: 'y\n+   |       ^^\n \n error: aborting due to previous error\n "}, {"sha": "9e5acf56d26ca97286a39cf5389d2d241add2fde", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -7,11 +7,11 @@ LL |     &mut 4\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n-  --> $DIR/issue-46472.rs:13:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n+  --> $DIR/issue-46472.rs:13:8\n    |\n LL | fn bar<'a>() -> &'a mut u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error[E0597]: borrowed value does not live long enough (Mir)\n   --> $DIR/issue-46472.rs:14:10\n@@ -22,11 +22,11 @@ LL |     &mut 4\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n-  --> $DIR/issue-46472.rs:13:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n+  --> $DIR/issue-46472.rs:13:8\n    |\n LL | fn bar<'a>() -> &'a mut u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3548219361fc74876a361ed4047ad8a1cb85779f", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5436a5c55ac6b08bd0bb729b7da55915e6e78fe6/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=5436a5c55ac6b08bd0bb729b7da55915e6e78fe6", "patch": "@@ -4,16 +4,16 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` d\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 23:1...\n-  --> $DIR/normalization-bounds-error.rs:23:1\n+note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 23:14...\n+  --> $DIR/normalization-bounds-error.rs:23:14\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 23:1...\n-  --> $DIR/normalization-bounds-error.rs:23:1\n+   |              ^^\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 23:18...\n+  --> $DIR/normalization-bounds-error.rs:23:18\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^\n    = note: ...so that the types are compatible:\n            expected Visitor<'d>\n               found Visitor<'_>"}]}