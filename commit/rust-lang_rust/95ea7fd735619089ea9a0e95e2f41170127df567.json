{"sha": "95ea7fd735619089ea9a0e95e2f41170127df567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZWE3ZmQ3MzU2MTkwODllYTlhMGU5NWUyZjQxMTcwMTI3ZGY1Njc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-29T22:59:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-29T22:59:22Z"}, "message": "Add `HygieneData::{outer,expn_info,is_descendant_of}` methods.\n\nThis commit factors out some repeated code.", "tree": {"sha": "0978e91207320f2a31ea0c0ee08a52a7e0618f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0978e91207320f2a31ea0c0ee08a52a7e0618f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ea7fd735619089ea9a0e95e2f41170127df567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ea7fd735619089ea9a0e95e2f41170127df567", "html_url": "https://github.com/rust-lang/rust/commit/95ea7fd735619089ea9a0e95e2f41170127df567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ea7fd735619089ea9a0e95e2f41170127df567/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2232321ac7d03ed8c1d191de0653d1c32db877d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2232321ac7d03ed8c1d191de0653d1c32db877d6", "html_url": "https://github.com/rust-lang/rust/commit/2232321ac7d03ed8c1d191de0653d1c32db877d6"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "445d4271d890553c8bd58beb8f0e36cb16314b4c", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/95ea7fd735619089ea9a0e95e2f41170127df567/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ea7fd735619089ea9a0e95e2f41170127df567/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=95ea7fd735619089ea9a0e95e2f41170127df567", "patch": "@@ -112,31 +112,14 @@ impl Mark {\n         HygieneData::with(|data| data.marks[self.0 as usize].default_transparency = transparency)\n     }\n \n-    pub fn is_descendant_of(mut self, ancestor: Mark) -> bool {\n-        HygieneData::with(|data| {\n-            while self != ancestor {\n-                if self == Mark::root() {\n-                    return false;\n-                }\n-                self = data.marks[self.0 as usize].parent;\n-            }\n-            true\n-        })\n+    pub fn is_descendant_of(self, ancestor: Mark) -> bool {\n+        HygieneData::with(|data| data.is_descendant_of(self, ancestor))\n     }\n \n     /// `mark.outer_is_descendant_of(ctxt)` is equivalent to but faster than\n     /// `mark.is_descendant_of(ctxt.outer())`.\n-    pub fn outer_is_descendant_of(mut self, ctxt: SyntaxContext) -> bool {\n-        HygieneData::with(|data| {\n-            let outer = data.syntax_contexts[ctxt.0 as usize].outer_mark;\n-            while self != outer {\n-                if self == Mark::root() {\n-                    return false;\n-                }\n-                self = data.marks[self.0 as usize].parent;\n-            }\n-            true\n-        })\n+    pub fn outer_is_descendant_of(self, ctxt: SyntaxContext) -> bool {\n+        HygieneData::with(|data| data.is_descendant_of(self, data.outer(ctxt)))\n     }\n \n     /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n@@ -216,6 +199,24 @@ impl HygieneData {\n     fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {\n         GLOBALS.with(|globals| f(&mut *globals.hygiene_data.borrow_mut()))\n     }\n+\n+    fn outer(&self, ctxt: SyntaxContext) -> Mark {\n+        self.syntax_contexts[ctxt.0 as usize].outer_mark\n+    }\n+\n+    fn expn_info(&self, mark: Mark) -> Option<ExpnInfo> {\n+        self.marks[mark.0 as usize].expn_info.clone()\n+    }\n+\n+    fn is_descendant_of(&self, mut mark: Mark, ancestor: Mark) -> bool {\n+        while mark != ancestor {\n+            if mark == Mark::root() {\n+                return false;\n+            }\n+            mark = self.marks[mark.0 as usize].parent;\n+        }\n+        true\n+    }\n }\n \n pub fn clear_markings() {\n@@ -514,17 +515,14 @@ impl SyntaxContext {\n \n     #[inline]\n     pub fn outer(self) -> Mark {\n-        HygieneData::with(|data| data.syntax_contexts[self.0 as usize].outer_mark)\n+        HygieneData::with(|data| data.outer(self))\n     }\n \n     /// `ctxt.outer_expn_info()` is equivalent to but faster than\n     /// `ctxt.outer().expn_info()`.\n     #[inline]\n     pub fn outer_expn_info(self) -> Option<ExpnInfo> {\n-        HygieneData::with(|data| {\n-            let outer = data.syntax_contexts[self.0 as usize].outer_mark;\n-            data.marks[outer.0 as usize].expn_info.clone()\n-        })\n+        HygieneData::with(|data| data.expn_info(data.outer(self)))\n     }\n \n     pub fn dollar_crate_name(self) -> Symbol {"}]}