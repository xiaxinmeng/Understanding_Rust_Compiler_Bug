{"sha": "1e840f8893ff620d4da161414b70d2ce037f3842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODQwZjg4OTNmZjYyMGQ0ZGExNjE0MTRiNzBkMmNlMDM3ZjM4NDI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-14T17:16:08Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-15T18:33:52Z"}, "message": "Use `mir::QualifSet` to store qualifs", "tree": {"sha": "61f14ae45b57b130fc5debbe62ab7ef31a75db9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f14ae45b57b130fc5debbe62ab7ef31a75db9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e840f8893ff620d4da161414b70d2ce037f3842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e840f8893ff620d4da161414b70d2ce037f3842", "html_url": "https://github.com/rust-lang/rust/commit/1e840f8893ff620d4da161414b70d2ce037f3842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e840f8893ff620d4da161414b70d2ce037f3842/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056edc0d48ae19f9f458742e18b3e6f6f6042865", "url": "https://api.github.com/repos/rust-lang/rust/commits/056edc0d48ae19f9f458742e18b3e6f6f6042865", "html_url": "https://github.com/rust-lang/rust/commit/056edc0d48ae19f9f458742e18b3e6f6f6042865"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "367e0e710c834e9b03f2497695f15a781eaaaec9", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1e840f8893ff620d4da161414b70d2ce037f3842/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e840f8893ff620d4da161414b70d2ce037f3842/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1e840f8893ff620d4da161414b70d2ce037f3842", "patch": "@@ -6,12 +6,10 @@ use syntax_pos::DUMMY_SP;\n \n use super::{ConstKind, Item as ConstCx};\n \n-#[derive(Clone, Copy)]\n-pub struct QualifSet(u8);\n-\n-impl QualifSet {\n-    fn contains<Q: ?Sized + Qualif>(self) -> bool {\n-        self.0 & (1 << Q::IDX) != 0\n+pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> QualifSet {\n+    QualifSet {\n+        has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n     }\n }\n \n@@ -22,14 +20,14 @@ impl QualifSet {\n ///\n /// The default implementations proceed structurally.\n pub trait Qualif {\n-    const IDX: usize;\n-\n     /// The name of the file used to debug the dataflow analysis that computes this qualif.\n     const ANALYSIS_NAME: &'static str;\n \n     /// Whether this `Qualif` is cleared when a local is moved from.\n     const IS_CLEARED_ON_MOVE: bool = false;\n \n+    fn in_qualif_set(set: &QualifSet) -> bool;\n+\n     /// Return the qualification that is (conservatively) correct for any value\n     /// of the type.\n     fn in_any_value_of_ty(_cx: &ConstCx<'_, 'tcx>, _ty: Ty<'tcx>) -> bool;\n@@ -122,9 +120,8 @@ pub trait Qualif {\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     } else {\n-                        let bits = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n-\n-                        let qualif = QualifSet(bits).contains::<Self>();\n+                        let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n+                        let qualif = Self::in_qualif_set(&qualifs);\n \n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n@@ -210,9 +207,12 @@ pub trait Qualif {\n pub struct HasMutInterior;\n \n impl Qualif for HasMutInterior {\n-    const IDX: usize = 0;\n     const ANALYSIS_NAME: &'static str = \"flow_has_mut_interior\";\n \n+    fn in_qualif_set(set: &QualifSet) -> bool {\n+        set.has_mut_interior\n+    }\n+\n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n         !ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP)\n     }\n@@ -275,10 +275,13 @@ impl Qualif for HasMutInterior {\n pub struct NeedsDrop;\n \n impl Qualif for NeedsDrop {\n-    const IDX: usize = 1;\n     const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n+    fn in_qualif_set(set: &QualifSet) -> bool {\n+        set.needs_drop\n+    }\n+\n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n         ty.needs_drop(cx.tcx, cx.param_env)\n     }"}, {"sha": "2f2c65b8469a3f4dcb72d65ead81434580dd8e8a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e840f8893ff620d4da161414b70d2ce037f3842/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e840f8893ff620d4da161414b70d2ce037f3842/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=1e840f8893ff620d4da161414b70d2ce037f3842", "patch": "@@ -19,9 +19,9 @@ use std::ops::Deref;\n use crate::dataflow::{self as old_dataflow, generic as dataflow};\n use self::old_dataflow::IndirectlyMutableLocals;\n use super::ops::{self, NonConstOp};\n-use super::qualifs::{HasMutInterior, NeedsDrop};\n+use super::qualifs::{self, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n-use super::{ConstKind, Item, Qualif, QualifSet, is_lang_panic_fn};\n+use super::{ConstKind, Item, Qualif, is_lang_panic_fn};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum CheckOpResult {\n@@ -130,18 +130,16 @@ impl Qualifs<'a, 'mir, 'tcx> {\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {\n-            None => return QualifSet::in_any_value_of_ty(item, item.body.return_ty()),\n+            None => return qualifs::in_any_value_of_ty(item, item.body.return_ty()),\n             Some(bb) => bb,\n         };\n \n         let return_loc = item.body.terminator_loc(return_block);\n \n-        let mut qualifs = QualifSet::default();\n-\n-        qualifs.set::<NeedsDrop>(self.needs_drop_lazy_seek(RETURN_PLACE, return_loc));\n-        qualifs.set::<HasMutInterior>(self.has_mut_interior_lazy_seek(RETURN_PLACE, return_loc));\n-\n-        qualifs\n+        QualifSet {\n+            needs_drop: self.needs_drop_lazy_seek(RETURN_PLACE, return_loc),\n+            has_mut_interior: self.has_mut_interior_lazy_seek(RETURN_PLACE, return_loc),\n+        }\n     }\n }\n "}]}