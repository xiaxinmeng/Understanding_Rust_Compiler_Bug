{"sha": "63dd00b97b0f46e901af7d9299534c2e66f311b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZGQwMGI5N2IwZjQ2ZTkwMWFmN2Q5Mjk5NTM0YzJlNjZmMzExYjE=", "commit": {"author": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-01-05T07:27:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T07:27:10Z"}, "message": "Add code spans to docs in intrinsics.rs", "tree": {"sha": "544588e34de75100fba4ef4fe2a24d3aad893b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544588e34de75100fba4ef4fe2a24d3aad893b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63dd00b97b0f46e901af7d9299534c2e66f311b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9BTOCRBK7hj4Ov3rIwAAdHIIAFR1LWVBB3vY6jzM4sfswXFe\nayGRbOdMTIXWxpw/40Ixw1tMfCBCRpJZQI+sq/WiHobLkGV8Y9JKceYEEQqmIHxm\n38tYTR716KjApjM7GuwnqKfOkTd9B3lsJ2xvg0gooOEcX8oiUywzzyq8yPbBaHUa\n/8sx7RHXNaJIa9src28OjjmsyTkg23m8Fns717L/8PmB/JaVgq/eZfWqBzwcNzBw\nYXBPGvoYRb2aUG7sJr5cFpOm5QWGPwWeJU8O56EG5SG7lxNOF/jgJ3kjWoz2y+yq\nwdBuOIQ5RUsMCYmdPPNpSkGgxsjPbPbAJYTJ/A4UfLEZZZdQL8Tn4og7xgA8KVA=\n=XDaG\n-----END PGP SIGNATURE-----\n", "payload": "tree 544588e34de75100fba4ef4fe2a24d3aad893b34\nparent f412fb56b8d11c168e7ee49ee74e79c4ab2e5637\nauthor mbartlett21 <29034492+mbartlett21@users.noreply.github.com> 1609831630 +1000\ncommitter GitHub <noreply@github.com> 1609831630 +1000\n\nAdd code spans to docs in intrinsics.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63dd00b97b0f46e901af7d9299534c2e66f311b1", "html_url": "https://github.com/rust-lang/rust/commit/63dd00b97b0f46e901af7d9299534c2e66f311b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63dd00b97b0f46e901af7d9299534c2e66f311b1/comments", "author": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "url": "https://api.github.com/repos/rust-lang/rust/commits/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637", "html_url": "https://github.com/rust-lang/rust/commit/f412fb56b8d11c168e7ee49ee74e79c4ab2e5637"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2225339d27d6059545b426331439972ce1f3988d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63dd00b97b0f46e901af7d9299534c2e66f311b1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dd00b97b0f46e901af7d9299534c2e66f311b1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=63dd00b97b0f46e901af7d9299534c2e66f311b1", "patch": "@@ -712,8 +712,8 @@ extern \"rust-intrinsic\" {\n     /// [`std::process::abort`](../../std/process/fn.abort.html).\n     pub fn abort() -> !;\n \n-    /// Tells LLVM that this point in the code is not reachable, enabling\n-    /// further optimizations.\n+    /// Informs the optimizer that this point in the code is not reachable,\n+    /// enabling further optimizations.\n     ///\n     /// N.B., this is very different from the `unreachable!()` macro: Unlike the\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n@@ -1133,7 +1133,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic does not have a stable counterpart.\n     pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n     /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n-    /// a size of `count` * `size_of::<T>()` and an alignment of\n+    /// a size of `count * size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n     /// The volatile parameter is set to `true`, so it will not be optimized out\n@@ -1142,7 +1142,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic does not have a stable counterpart.\n     pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n     /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n-    /// size of `count` * `size_of::<T>()` and an alignment of\n+    /// size of `count * size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`.\n     ///\n     /// The volatile parameter is set to `true`, so it will not be optimized out\n@@ -1588,15 +1588,15 @@ extern \"rust-intrinsic\" {\n     pub fn exact_div<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n-    /// where y = 0 or x = `T::MIN` and y = -1\n+    /// where `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`u32::checked_div`]\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n-    /// undefined behavior where y = 0 or x = `T::MIN` and y = -1\n+    /// undefined behavior when `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n@@ -1605,15 +1605,15 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n-    /// y < 0 or y >= N, where N is the width of T in bits.\n+    /// `y < 0` or `y >= N`, where N is the width of T in bits.\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shl` method. For example,\n     /// [`u32::checked_shl`]\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T: Copy>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n-    /// y < 0 or y >= N, where N is the width of T in bits.\n+    /// `y < 0` or `y >= N`, where N is the width of T in bits.\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shr` method. For example,\n@@ -1680,14 +1680,14 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n \n-    /// Computes `a + b`, while saturating at numeric bounds.\n+    /// Computes `a + b`, saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n     /// [`u32::saturating_add`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n-    /// Computes `a - b`, while saturating at numeric bounds.\n+    /// Computes `a - b`, saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n@@ -1696,14 +1696,14 @@ extern \"rust-intrinsic\" {\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',\n-    /// cast to a `u64`; if `T` has no discriminant, returns 0.\n+    /// cast to a `u64`; if `T` has no discriminant, returns `0`.\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::discriminant`](crate::mem::discriminant).\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n     /// Returns the number of variants of the type `T` cast to a `usize`;\n-    /// if `T` has no variants, returns 0. Uninhabited variants will be counted.\n+    /// if `T` has no variants, returns `0`. Uninhabited variants will be counted.\n     ///\n     /// The to-be-stabilized version of this intrinsic is [`mem::variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]"}]}