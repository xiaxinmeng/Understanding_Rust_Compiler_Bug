{"sha": "62ebaa822b0770558ffc3b8fba291996e2c4a5b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWJhYTgyMmIwNzcwNTU4ZmZjM2I4ZmJhMjkxOTk2ZTJjNGE1YjA=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-24T10:19:14Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-24T10:19:14Z"}, "message": "Don't mess with messy temp dir and just download into extension dir\n\nTemp dirs are messy. Dealing with them requires handling quite a bunch of\nedge cases. As proposed by lnicola this seems better to just put the temp files\nin the extension dir and not care much about suddenly leaving garbage.\nInstead we get shorter and less platform-caveat-y code.\nWe will also assume users don't try to issue a download in different vscode windows simultaneously", "tree": {"sha": "e519095d84ea717801c9ae23ab5ff5c24a1c8ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e519095d84ea717801c9ae23ab5ff5c24a1c8ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ebaa822b0770558ffc3b8fba291996e2c4a5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ebaa822b0770558ffc3b8fba291996e2c4a5b0", "html_url": "https://github.com/rust-lang/rust/commit/62ebaa822b0770558ffc3b8fba291996e2c4a5b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ebaa822b0770558ffc3b8fba291996e2c4a5b0/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d84e27ba961e03c3f394b9a6ef2a035dcc183be", "html_url": "https://github.com/rust-lang/rust/commit/5d84e27ba961e03c3f394b9a6ef2a035dcc183be"}], "stats": {"total": 80, "additions": 23, "deletions": 57}, "files": [{"sha": "7c77530b81fa3a86e38d90f1770ac91225e3270f", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 23, "deletions": 57, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/62ebaa822b0770558ffc3b8fba291996e2c4a5b0/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/62ebaa822b0770558ffc3b8fba291996e2c4a5b0/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=62ebaa822b0770558ffc3b8fba291996e2c4a5b0", "patch": "@@ -2,8 +2,6 @@ import fetch from \"node-fetch\";\n import * as vscode from \"vscode\";\n import * as stream from \"stream\";\n import * as fs from \"fs\";\n-import * as os from \"os\";\n-import * as path from \"path\";\n import * as util from \"util\";\n import { log, assert } from \"./util\";\n \n@@ -68,32 +66,31 @@ interface DownloadOpts {\n }\n \n export async function download(opts: DownloadOpts) {\n-    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n-    await withTempDir(async tempDir => {\n-        const tempFile = path.join(tempDir, path.basename(opts.dest));\n-\n-        await vscode.window.withProgress(\n-            {\n-                location: vscode.ProgressLocation.Notification,\n-                cancellable: false,\n-                title: opts.progressTitle\n-            },\n-            async (progress, _cancellationToken) => {\n-                let lastPercentage = 0;\n-                await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n-                    const newPercentage = (readBytes / totalBytes) * 100;\n-                    progress.report({\n-                        message: newPercentage.toFixed(0) + \"%\",\n-                        increment: newPercentage - lastPercentage\n-                    });\n-\n-                    lastPercentage = newPercentage;\n+    // Put artifact into a temporary file (in the same dir for simplicity)\n+    // to prevent partially downloaded files when user kills vscode\n+    const tempFile = `${opts.dest}.tmp`;\n+\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false,\n+            title: opts.progressTitle\n+        },\n+        async (progress, _cancellationToken) => {\n+            let lastPercentage = 0;\n+            await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+                const newPercentage = (readBytes / totalBytes) * 100;\n+                progress.report({\n+                    message: newPercentage.toFixed(0) + \"%\",\n+                    increment: newPercentage - lastPercentage\n                 });\n-            }\n-        );\n \n-        await moveFile(tempFile, opts.dest);\n-    });\n+                lastPercentage = newPercentage;\n+            });\n+        }\n+    );\n+\n+    await fs.promises.rename(tempFile, opts.dest);\n }\n \n /**\n@@ -137,34 +134,3 @@ async function downloadFile(\n         // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n     });\n }\n-\n-async function withTempDir(scope: (tempDirPath: string) => Promise<void>) {\n-    // Based on the great article: https://advancedweb.hu/secure-tempfiles-in-nodejs-without-dependencies/\n-\n-    // `.realpath()` should handle the cases where os.tmpdir() contains symlinks\n-    const osTempDir = await fs.promises.realpath(os.tmpdir());\n-\n-    const tempDir = await fs.promises.mkdtemp(path.join(osTempDir, \"rust-analyzer\"));\n-\n-    try {\n-        return await scope(tempDir);\n-    } finally {\n-        // We are good citizens :D\n-        void fs.promises.rmdir(tempDir, { recursive: true }).catch(log.error);\n-    }\n-};\n-\n-async function moveFile(src: fs.PathLike, dest: fs.PathLike) {\n-    try {\n-        await fs.promises.rename(src, dest);\n-    } catch (err) {\n-        if (err.code === 'EXDEV') {\n-            // We are probably moving the file across partitions/devices\n-            await fs.promises.copyFile(src, dest);\n-            await fs.promises.unlink(src);\n-        } else {\n-            log.error(`Failed to rename the file ${src} -> ${dest}`, err);\n-            throw err;\n-        }\n-    }\n-}"}]}