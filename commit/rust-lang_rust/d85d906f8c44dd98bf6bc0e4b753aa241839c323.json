{"sha": "d85d906f8c44dd98bf6bc0e4b753aa241839c323", "node_id": "C_kwDOAAsO6NoAKGQ4NWQ5MDZmOGM0NGRkOThiZjZiYzBlNGI3NTNhYTI0MTgzOWMzMjM", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-01-29T01:00:57Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-05T07:24:54Z"}, "message": "emit `ConstEquate` in `TypeRelating<D>`", "tree": {"sha": "2304fe8c3bff131573b1cd5e6de1b3fb1c0ce7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2304fe8c3bff131573b1cd5e6de1b3fb1c0ce7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d85d906f8c44dd98bf6bc0e4b753aa241839c323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d85d906f8c44dd98bf6bc0e4b753aa241839c323", "html_url": "https://github.com/rust-lang/rust/commit/d85d906f8c44dd98bf6bc0e4b753aa241839c323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d85d906f8c44dd98bf6bc0e4b753aa241839c323/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "html_url": "https://github.com/rust-lang/rust/commit/50d3ba5bcbf5c7e13d4ce068d3339710701dd603"}], "stats": {"total": 113, "additions": 92, "deletions": 21}, "files": [{"sha": "a2cfe8d88816cb076d97005521da1f0796e0047e", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -817,12 +817,13 @@ impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn const_equate_obligation(&mut self, _a: ty::Const<'tcx>, _b: ty::Const<'tcx>) {\n-        // We don't have to worry about the equality of consts during borrow checking\n-        // as consts always have a static lifetime.\n-        // FIXME(oli-obk): is this really true? We can at least have HKL and with\n-        // inline consts we may have further lifetimes that may be unsound to treat as\n-        // 'static.\n+    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n+        self.delegate.register_obligations(vec![Obligation::new(\n+            self.tcx(),\n+            ObligationCause::dummy(),\n+            self.param_env(),\n+            ty::Binder::dummy(ty::PredicateKind::ConstEquate(a, b)),\n+        )]);\n     }\n }\n "}, {"sha": "890dabde1f73d4fe2967aec911a9f3ac469019a0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -629,6 +629,8 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         b = tcx.expand_abstract_consts(b);\n     }\n \n+    debug!(\"{}.super_relate_consts(normed_a = {:?}, normed_b = {:?})\", relation.tag(), a, b);\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n@@ -665,30 +667,28 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n \n             // FIXME(generic_const_exprs): is it possible to relate two consts which are not identical\n             // exprs? Should we care about that?\n+            // FIXME(generic_const_exprs): relating the `ty()`s is a little weird since it is supposed to\n+            // ICE If they mismatch. Unfortunately `ConstKind::Expr` is a little special and can be thought\n+            // of as being generic over the argument types, however this is implicit so these types don't get\n+            // related when we relate the substs of the item this const arg is for.\n             let expr = match (ae, be) {\n-                (Expr::Binop(a_op, al, ar), Expr::Binop(b_op, bl, br))\n-                    if a_op == b_op && al.ty() == bl.ty() && ar.ty() == br.ty() =>\n-                {\n+                (Expr::Binop(a_op, al, ar), Expr::Binop(b_op, bl, br)) if a_op == b_op => {\n+                    r.relate(al.ty(), bl.ty())?;\n+                    r.relate(ar.ty(), br.ty())?;\n                     Expr::Binop(a_op, r.consts(al, bl)?, r.consts(ar, br)?)\n                 }\n-                (Expr::UnOp(a_op, av), Expr::UnOp(b_op, bv))\n-                    if a_op == b_op && av.ty() == bv.ty() =>\n-                {\n+                (Expr::UnOp(a_op, av), Expr::UnOp(b_op, bv)) if a_op == b_op => {\n+                    r.relate(av.ty(), bv.ty())?;\n                     Expr::UnOp(a_op, r.consts(av, bv)?)\n                 }\n-                (Expr::Cast(ak, av, at), Expr::Cast(bk, bv, bt))\n-                    if ak == bk && av.ty() == bv.ty() =>\n-                {\n+                (Expr::Cast(ak, av, at), Expr::Cast(bk, bv, bt)) if ak == bk => {\n+                    r.relate(av.ty(), bv.ty())?;\n                     Expr::Cast(ak, r.consts(av, bv)?, r.tys(at, bt)?)\n                 }\n                 (Expr::FunctionCall(af, aa), Expr::FunctionCall(bf, ba))\n-                    if aa.len() == ba.len()\n-                        && af.ty() == bf.ty()\n-                        && aa\n-                            .iter()\n-                            .zip(ba.iter())\n-                            .all(|(a_arg, b_arg)| a_arg.ty() == b_arg.ty()) =>\n+                    if aa.len() == ba.len() =>\n                 {\n+                    r.relate(af.ty(), bf.ty())?;\n                     let func = r.consts(af, bf)?;\n                     let mut related_args = Vec::with_capacity(aa.len());\n                     for (a_arg, b_arg) in aa.iter().zip(ba.iter()) {"}, {"sha": "fd52fc35541293dd18db159bd7b0dede43a45db0", "filename": "tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_binop_arg_tys.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.rs?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -0,0 +1,18 @@\n+// checks that when we relate a `Expr::Binop` we also relate the types of the\n+// const arguments.\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct Bar<const B: bool>;\n+\n+const fn make_generic(_: usize, a: bool) -> bool {\n+    a\n+}\n+\n+fn foo<const N: usize>() -> Bar<{ make_generic(N, true == false) }> {\n+    Bar::<{ make_generic(N, 1_u8 == 0_u8) }>\n+    //~^ error: mismatched types\n+    //~| error: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "ba824e84a5acaf34a416573c2733b8e2a0185d41", "filename": "tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_binop_arg_tys.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_binop_arg_tys.stderr?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/relate_binop_arg_tys.rs:13:5\n+   |\n+LL |     Bar::<{ make_generic(N, 1_u8 == 0_u8) }>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{ make_generic(N, true == false) }`, found `{ make_generic(N, 1_u8 == 0_u8) }`\n+   |\n+   = note: expected constant `{ make_generic(N, true == false) }`\n+              found constant `{ make_generic(N, 1_u8 == 0_u8) }`\n+\n+error: unconstrained generic constant\n+  --> $DIR/relate_binop_arg_tys.rs:13:11\n+   |\n+LL |     Bar::<{ make_generic(N, 1_u8 == 0_u8) }>\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { make_generic(N, 1_u8 == 0_u8) }]:`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bef9d4b9e996f135ed81478f82b378c8c2ef448e", "filename": "tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_cast_arg_ty.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.rs?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -0,0 +1,12 @@\n+// checks that when we relate a `Expr::Cast` we also relate the type of the\n+// const argument.\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>() -> [(); (true as usize) + N] {\n+    [(); (1_u8 as usize) + N]\n+    //~^ error: mismatched types\n+    //~| error: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "d3ba870a2d7cfb019df2f7dd2c2d0bceacdb5604", "filename": "tests/ui/const-generics/generic_const_exprs/const_kind_expr/relate_cast_arg_ty.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d85d906f8c44dd98bf6bc0e4b753aa241839c323/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Frelate_cast_arg_ty.stderr?ref=d85d906f8c44dd98bf6bc0e4b753aa241839c323", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/relate_cast_arg_ty.rs:7:5\n+   |\n+LL |     [(); (1_u8 as usize) + N]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(true as usize) + N`, found `(1_u8 as usize) + N`\n+   |\n+   = note: expected constant `(true as usize) + N`\n+              found constant `(1_u8 as usize) + N`\n+\n+error: unconstrained generic constant\n+  --> $DIR/relate_cast_arg_ty.rs:7:10\n+   |\n+LL |     [(); (1_u8 as usize) + N]\n+   |          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); (1_u8 as usize) + N]:`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}