{"sha": "2b362768ff3cab2c966f1f18cf119b21fc96ea30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMzYyNzY4ZmYzY2FiMmM5NjZmMWYxOGNmMTE5YjIxZmM5NmVhMzA=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T03:49:43Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:17Z"}, "message": "Modified list::from_vec() to return List<T>", "tree": {"sha": "ecdad4b17ce6a6e9c98d4d033a1654218a500fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecdad4b17ce6a6e9c98d4d033a1654218a500fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b362768ff3cab2c966f1f18cf119b21fc96ea30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b362768ff3cab2c966f1f18cf119b21fc96ea30", "html_url": "https://github.com/rust-lang/rust/commit/2b362768ff3cab2c966f1f18cf119b21fc96ea30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b362768ff3cab2c966f1f18cf119b21fc96ea30/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8846970bba8d529f4361eec65d39254060483e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/8846970bba8d529f4361eec65d39254060483e03", "html_url": "https://github.com/rust-lang/rust/commit/8846970bba8d529f4361eec65d39254060483e03"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "8be06bc9afea0c9783cb05f601f59905cc68f753", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2b362768ff3cab2c966f1f18cf119b21fc96ea30/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b362768ff3cab2c966f1f18cf119b21fc96ea30/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=2b362768ff3cab2c966f1f18cf119b21fc96ea30", "patch": "@@ -17,11 +17,6 @@ pub enum List<T> {\n     Nil,\n }\n \n-/// Create a list from a vector\n-pub fn from_vec<T:Clone + 'static>(v: &[T]) -> @List<T> {\n-    v.rev_iter().fold(@Nil::<T>, |t, h| @Cons((*h).clone(), t))\n-}\n-\n /**\n  * Left fold\n  *\n@@ -133,6 +128,16 @@ pub fn append<T:Clone + 'static>(list: @List<T>, other: @List<T>) -> @List<T> {\n     }\n }\n \n+impl<T:'static + Clone> List<T> {\n+    /// Create a list from a vector\n+    pub fn from_vec(v: &[T]) -> List<T> {\n+        match v.len() {\n+            0 => Nil,\n+            _ => v.rev_iter().fold(Nil, |tail, value: &T| Cons(value.clone(), @tail))\n+        }\n+    }\n+}\n+\n /*\n /// Push one element into the front of a list, returning a new list\n /// THIS VERSION DOESN'T ACTUALLY WORK\n@@ -171,16 +176,16 @@ pub fn each<T>(list: @List<T>, f: |&T| -> bool) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use list::{List, Nil, from_vec, head, is_empty, tail};\n+    use list::{List, Nil, head, is_empty, tail};\n     use list;\n \n     use std::option;\n \n     #[test]\n     fn test_is_empty() {\n-        let empty : @list::List<int> = from_vec([]);\n-        let full1 = from_vec([1]);\n-        let full2 = from_vec(['r', 'u']);\n+        let empty : @list::List<int> = @List::from_vec([]);\n+        let full1 = @List::from_vec([1]);\n+        let full2 = @List::from_vec(['r', 'u']);\n \n         assert!(is_empty(empty));\n         assert!(!is_empty(full1));\n@@ -189,7 +194,7 @@ mod tests {\n \n     #[test]\n     fn test_from_vec() {\n-        let list = from_vec([0, 1, 2]);\n+        let list = @List::from_vec([0, 1, 2]);\n \n         assert_eq!(head(list), 0);\n \n@@ -202,14 +207,14 @@ mod tests {\n \n     #[test]\n     fn test_from_vec_empty() {\n-        let empty : @list::List<int> = from_vec([]);\n-        assert_eq!(empty, @list::Nil::<int>);\n+        let empty : list::List<int> = List::from_vec([]);\n+        assert_eq!(empty, Nil::<int>);\n     }\n \n     #[test]\n     fn test_foldl() {\n         fn add(a: &uint, b: &int) -> uint { return *a + (*b as uint); }\n-        let list = from_vec([0, 1, 2, 3, 4]);\n+        let list = @List::from_vec([0, 1, 2, 3, 4]);\n         let empty = @list::Nil::<int>;\n         assert_eq!(list::foldl(0u, list, add), 10u);\n         assert_eq!(list::foldl(0u, empty, add), 0u);\n@@ -220,21 +225,21 @@ mod tests {\n         fn sub(a: &int, b: &int) -> int {\n             *a - *b\n         }\n-        let list = from_vec([1, 2, 3, 4]);\n+        let list = @List::from_vec([1, 2, 3, 4]);\n         assert_eq!(list::foldl(0, list, sub), -10);\n     }\n \n     #[test]\n     fn test_find_success() {\n         fn match_(i: &int) -> bool { return *i == 2; }\n-        let list = from_vec([0, 1, 2]);\n+        let list = @List::from_vec([0, 1, 2]);\n         assert_eq!(list::find(list, match_), option::Some(2));\n     }\n \n     #[test]\n     fn test_find_fail() {\n         fn match_(_i: &int) -> bool { return false; }\n-        let list = from_vec([0, 1, 2]);\n+        let list = @List::from_vec([0, 1, 2]);\n         let empty = @list::Nil::<int>;\n         assert_eq!(list::find(list, match_), option::None::<int>);\n         assert_eq!(list::find(empty, match_), option::None::<int>);\n@@ -243,15 +248,15 @@ mod tests {\n     #[test]\n     fn test_any() {\n         fn match_(i: &int) -> bool { return *i == 2; }\n-        let list = from_vec([0, 1, 2]);\n+        let list = @List::from_vec([0, 1, 2]);\n         let empty = @list::Nil::<int>;\n         assert_eq!(list::any(list, match_), true);\n         assert_eq!(list::any(empty, match_), false);\n     }\n \n     #[test]\n     fn test_has() {\n-        let list = from_vec([5, 8, 6]);\n+        let list = @List::from_vec([5, 8, 6]);\n         let empty = @list::Nil::<int>;\n         assert!((list::has(list, 5)));\n         assert!((!list::has(list, 7)));\n@@ -261,15 +266,15 @@ mod tests {\n \n     #[test]\n     fn test_len() {\n-        let list = from_vec([0, 1, 2]);\n+        let list = @List::from_vec([0, 1, 2]);\n         let empty = @list::Nil::<int>;\n         assert_eq!(list::len(list), 3u);\n         assert_eq!(list::len(empty), 0u);\n     }\n \n     #[test]\n     fn test_append() {\n-        assert!(from_vec([1,2,3,4])\n-            == list::append(list::from_vec([1,2]), list::from_vec([3,4])));\n+        assert!(@List::from_vec([1,2,3,4])\n+            == list::append(@List::from_vec([1,2]), @List::from_vec([3,4])));\n     }\n }"}, {"sha": "0129740252ca1293b3f98d4f3e673f29829b8f98", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b362768ff3cab2c966f1f18cf119b21fc96ea30/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b362768ff3cab2c966f1f18cf119b21fc96ea30/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=2b362768ff3cab2c966f1f18cf119b21fc96ea30", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n extern crate collections;\n-use collections::list;\n+use collections::list::List;\n \n #[deriving(Clone)]\n enum foo {\n@@ -24,8 +24,8 @@ fn check_log<T>(exp: ~str, v: T) {\n }\n \n pub fn main() {\n-    let x = list::from_vec([a(22u), b(~\"hi\")]);\n-    let exp = ~\"@Cons(a(22u), @Cons(b(~\\\"hi\\\"), @Nil))\";\n+    let x = List::from_vec([a(22u), b(~\"hi\")]);\n+    let exp = ~\"Cons(a(22u), @Cons(b(~\\\"hi\\\"), @Nil))\";\n     let act = format!(\"{:?}\", x);\n     assert!(act == exp);\n     check_log(exp, x);"}]}