{"sha": "2577bd9df312a4002222570a86676192b6026d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzdiZDlkZjMxMmE0MDAyMjIyNTcwYTg2Njc2MTkyYjYwMjZkNjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T01:31:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T03:53:16Z"}, "message": "rustc: Don't assume that all crates with the same name are the same", "tree": {"sha": "a5c2d686fe624e94892d5e64a5be18d970eb1354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c2d686fe624e94892d5e64a5be18d970eb1354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2577bd9df312a4002222570a86676192b6026d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2577bd9df312a4002222570a86676192b6026d64", "html_url": "https://github.com/rust-lang/rust/commit/2577bd9df312a4002222570a86676192b6026d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2577bd9df312a4002222570a86676192b6026d64/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13c0c77a2f41d5798f947638e19076a445cd260", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13c0c77a2f41d5798f947638e19076a445cd260", "html_url": "https://github.com/rust-lang/rust/commit/d13c0c77a2f41d5798f947638e19076a445cd260"}], "stats": {"total": 134, "additions": 113, "deletions": 21}, "files": [{"sha": "76f98ad2f061a0849cbcbf6b250e86adb3430c59", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 59, "deletions": 21, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -20,7 +20,7 @@ export list_file_metadata;\n // libraries necessary for later resolving, typechecking, linking, etc.\n fn read_crates(sess: session::session, crate: ast::crate) {\n     let e = @{sess: sess,\n-              crate_cache: std::map::str_hash::<int>(),\n+              mut crate_cache: [],\n               mut next_crate_num: 1};\n     let v =\n         visit::mk_simple_visitor(@{visit_view_item:\n@@ -31,7 +31,7 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n }\n \n type env = @{sess: session::session,\n-             crate_cache: hashmap<str, int>,\n+             mut crate_cache: [(int, @[@ast::meta_item])],\n              mut next_crate_num: ast::crate_num};\n \n fn visit_view_item(e: env, i: @ast::view_item) {\n@@ -100,21 +100,26 @@ fn list_file_metadata(sess: session::session, path: str, out: io::writer) {\n     }\n }\n \n-fn metadata_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n+fn crate_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n     let linkage_metas = attr::find_linkage_metas(attrs);\n+    metadata_matches(linkage_metas, metas)\n+}\n+\n+fn metadata_matches(extern_metas: [@ast::meta_item],\n+                    local_metas: [@ast::meta_item]) -> bool {\n \n     #debug(\"matching %u metadata requirements against %u items\",\n-           vec::len(metas), vec::len(linkage_metas));\n+           vec::len(local_metas), vec::len(extern_metas));\n \n     #debug(\"crate metadata:\");\n-    for have: @ast::meta_item in linkage_metas {\n+    for have: @ast::meta_item in extern_metas {\n         #debug(\"  %s\", pprust::meta_item_to_str(*have));\n     }\n \n-    for needed: @ast::meta_item in metas {\n+    for needed: @ast::meta_item in local_metas {\n         #debug(\"looking for %s\", pprust::meta_item_to_str(*needed));\n-        if !attr::contains(linkage_metas, needed) {\n+        if !attr::contains(extern_metas, needed) {\n             #debug(\"missing %s\", pprust::meta_item_to_str(*needed));\n             ret false;\n         }\n@@ -133,7 +138,7 @@ fn default_native_lib_naming(sess: session::session, static: bool) ->\n     }\n }\n \n-fn find_library_crate(sess: session::session, ident: ast::ident,\n+fn find_library_crate(sess: session::session,\n                       metas: [@ast::meta_item])\n    -> option<{ident: str, data: @[u8]}> {\n \n@@ -149,10 +154,10 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n                   some(n) { n }\n                   // FIXME: Probably want a warning here since the user\n                   // is using the wrong type of meta item\n-                  _ { ident }\n+                  _ { fail }\n                 }\n               }\n-              none { ident }\n+              none { fail }\n             }\n         };\n \n@@ -186,7 +191,7 @@ fn find_library_crate_aux(sess: session::session,\n             #debug(\"%s is a candidate\", path);\n             alt get_metadata_section(sess, path) {\n               option::some(cvec) {\n-                if !metadata_matches(cvec, metas) {\n+                if !crate_matches(cvec, metas) {\n                     #debug(\"skipping %s, metadata doesn't match\", path);\n                     option::none\n                 } else {\n@@ -230,31 +235,55 @@ fn get_metadata_section(sess: session::session,\n     ret option::none::<@[u8]>;\n }\n \n-fn load_library_crate(sess: session::session, span: span, ident: ast::ident,\n+fn load_library_crate(sess: session::session, ident: ast::ident, span: span,\n                       metas: [@ast::meta_item])\n    -> {ident: str, data: @[u8]} {\n \n \n-    alt find_library_crate(sess, ident, metas) {\n+    alt find_library_crate(sess, metas) {\n       some(t) { ret t; }\n       none {\n         sess.span_fatal(span, #fmt[\"can't find crate for '%s'\", ident]);\n       }\n     }\n }\n \n+fn metas_with_ident(ident: ast::ident,\n+                    metas: [@ast::meta_item]) -> [@ast::meta_item] {\n+    let name_items = attr::find_meta_items_by_name(metas, \"name\");\n+    if name_items.is_empty() {\n+        metas + [attr::mk_name_value_item_str(\"name\", ident)]\n+    } else {\n+        metas\n+    }\n+}\n+\n+fn existing_match(e: env, metas: [@ast::meta_item]) -> option<int> {\n+    let maybe_entry = e.crate_cache.find {|c|\n+        metadata_matches(*tuple::second(c), metas)\n+    };\n+\n+    maybe_entry.map {|c| tuple::first(c) }\n+}\n+\n fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n                  span: span) -> ast::crate_num {\n-    if !e.crate_cache.contains_key(ident) {\n+    let metas = metas_with_ident(ident, metas);\n+\n+    alt existing_match(e, metas) {\n+      none {\n         let cinfo =\n-            load_library_crate(e.sess, span, ident, metas);\n+            load_library_crate(e.sess, ident, span, metas);\n \n         let cfilename = cinfo.ident;\n         let cdata = cinfo.data;\n \n+        let attrs = decoder::get_crate_attributes(cdata);\n+        let linkage_metas = attr::find_linkage_metas(attrs);\n+\n         // Claim this crate number and cache it\n         let cnum = e.next_crate_num;\n-        e.crate_cache.insert(ident, cnum);\n+        e.crate_cache += [(cnum, @linkage_metas)];\n         e.next_crate_num += 1;\n \n         // Now resolve the crates referenced by this crate\n@@ -267,7 +296,11 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n         cstore::set_crate_data(cstore, cnum, cmeta);\n         cstore::add_used_crate_file(cstore, cfilename);\n         ret cnum;\n-    } else { ret e.crate_cache.get(ident); }\n+      }\n+      some(cnum) {\n+        ret cnum;\n+      }\n+    }\n }\n \n // Go through the crate metadata and load any crates that it references\n@@ -279,19 +312,24 @@ fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n     for dep: decoder::crate_dep in decoder::get_crate_deps(cdata) {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.ident;\n+        // FIXME: We really need to know the linkage metas of our transitive\n+        // dependencies in order to resolve them correctly.\n+        let cmetas = [];\n         #debug(\"resolving dep %s\", cname);\n-        if e.crate_cache.contains_key(cname) {\n+        alt existing_match(e, metas_with_ident(cname, cmetas)) {\n+          some(local_cnum) {\n             #debug(\"already have it\");\n             // We've already seen this crate\n-            let local_cnum = e.crate_cache.get(cname);\n             cnum_map.insert(extrn_cnum, local_cnum);\n-        } else {\n+          }\n+          none {\n             #debug(\"need to load it\");\n             // This is a new one so we've got to load it\n             // FIXME: Need better error reporting than just a bogus span\n             let fake_span = ast_util::dummy_sp();\n-            let local_cnum = resolve_crate(e, cname, [], fake_span);\n+            let local_cnum = resolve_crate(e, cname, cmetas, fake_span);\n             cnum_map.insert(extrn_cnum, local_cnum);\n+          }\n         }\n     }\n     ret cnum_map;"}, {"sha": "70651951f3e65dd253125f5a82a17a9bf8693e5c", "filename": "src/test/auxiliary/crateresolve-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve-1.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -0,0 +1,6 @@\n+#[link(name = \"crateresolve\",\n+       vers = \"0.1\")];\n+\n+#[crate_type = \"lib\"];\n+\n+fn f() -> int { 10 }"}, {"sha": "aeee716979364061174dcfa9406fb3e99887700a", "filename": "src/test/auxiliary/crateresolve-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve-2.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -0,0 +1,6 @@\n+#[link(name = \"crateresolve\",\n+       vers = \"0.2\")];\n+\n+#[crate_type = \"lib\"];\n+\n+fn f() -> int { 20 }"}, {"sha": "2c38cbc8a9c2730b7a471b2ad0b967fd398c7a7e", "filename": "src/test/auxiliary/crateresolve-3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Fauxiliary%2Fcrateresolve-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve-3.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -0,0 +1,6 @@\n+#[link(name = \"crateresolve\",\n+       vers = \"0.3\")];\n+\n+#[crate_type = \"lib\"];\n+\n+fn f() -> int { 30 }"}, {"sha": "4eda67eebece6fe72713c4b4d92ae0cc7e08cef3", "filename": "src/test/run-pass/crateresolve.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Frun-pass%2Fcrateresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Frun-pass%2Fcrateresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -0,0 +1,10 @@\n+// xfail-fast\n+// aux-build:crateresolve-1.rs\n+// aux-build:crateresolve-2.rs\n+// aux-build:crateresolve-3.rs\n+\n+use crateresolve(vers = \"0.2\");\n+\n+fn main() {\n+    assert crateresolve::f() == 20;\n+}"}, {"sha": "de1852a5f973d75762c5f2b7f16d0a96f6d02091", "filename": "src/test/run-pass/crateresolve2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577bd9df312a4002222570a86676192b6026d64/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=2577bd9df312a4002222570a86676192b6026d64", "patch": "@@ -0,0 +1,26 @@\n+// xfail-fast\n+// xfail-test\n+// aux-build:crateresolve-1.rs\n+// aux-build:crateresolve-2.rs\n+// aux-build:crateresolve-3.rs\n+\n+mod a {\n+    use crateresolve(vers = \"0.1\");\n+    fn f() { assert crateresolve::f() == 10; }\n+}\n+\n+mod b {\n+    use crateresolve(vers = \"0.2\");\n+    fn f() { assert crateresolve::f() == 20; }\n+}\n+\n+mod c {\n+    use crateresolve(vers = \"0.3\");\n+    fn f() { assert crateresolve::f() == 30; }\n+}\n+\n+fn main() {\n+    a::f();\n+    b::f();\n+    c::f();\n+}"}]}