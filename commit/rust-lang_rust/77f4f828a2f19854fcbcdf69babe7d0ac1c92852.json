{"sha": "77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "node_id": "C_kwDOAAsO6NoAKDc3ZjRmODI4YTJmMTk4NTRmY2JjZGY2OWJhYmU3ZDBhYzFjOTI4NTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T18:56:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T18:56:52Z"}, "message": "Auto merge of #111799 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "3315283d82a9f9689f6289b06bccace04581c161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3315283d82a9f9689f6289b06bccace04581c161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "html_url": "https://github.com/rust-lang/rust/commit/77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bacf5a54468f8db33b6077405652f0ab0059174", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bacf5a54468f8db33b6077405652f0ab0059174", "html_url": "https://github.com/rust-lang/rust/commit/6bacf5a54468f8db33b6077405652f0ab0059174"}, {"sha": "d780efc46019d66643ee50551b236937c7b26a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/d780efc46019d66643ee50551b236937c7b26a74", "html_url": "https://github.com/rust-lang/rust/commit/d780efc46019d66643ee50551b236937c7b26a74"}], "stats": {"total": 3749, "additions": 2632, "deletions": 1117}, "files": [{"sha": "04c804d19a4f24aca4a0da07ec261950276143c8", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -635,7 +635,7 @@ dependencies = [\n  \"itertools\",\n  \"pulldown-cmark\",\n  \"quine-mc_cluskey\",\n- \"regex-syntax\",\n+ \"regex-syntax 0.7.1\",\n  \"rustc-semver\",\n  \"semver\",\n  \"serde\",\n@@ -2882,7 +2882,7 @@ checksum = \"d83f127d94bdbcda4c8cc2e50f6f84f4b611f69c902699ca385a39c3a75f9ff1\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n- \"regex-syntax\",\n+ \"regex-syntax 0.6.26\",\n ]\n \n [[package]]\n@@ -2891,7 +2891,7 @@ version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n dependencies = [\n- \"regex-syntax\",\n+ \"regex-syntax 0.6.26\",\n ]\n \n [[package]]\n@@ -2909,6 +2909,12 @@ version = \"0.6.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n \n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a5996294f19bd3aae0453a862ad728f60e6600695733dd5df01da90c54363a3c\"\n+\n [[package]]\n name = \"remote-test-client\"\n version = \"0.1.0\""}, {"sha": "a9d42159c4bac5c70d8dbe79a211360fa006cf44", "filename": "src/tools/clippy/.github/workflows/clippy.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy.yml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -39,7 +39,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Install toolchain\n       run: rustup show active-toolchain"}, {"sha": "30a156c925b07a6b435aeca9a788f63e12eddbde", "filename": "src/tools/clippy/.github/workflows/clippy_bors.yml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_bors.yml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -27,7 +27,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n       with:\n         ref: ${{ github.ref }}\n \n@@ -83,7 +83,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Install toolchain\n       run: rustup show active-toolchain\n@@ -149,7 +149,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Install toolchain\n       run: rustup show active-toolchain\n@@ -173,7 +173,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Install toolchain\n       run: rustup show active-toolchain\n@@ -233,7 +233,7 @@ jobs:\n         github_token: \"${{ secrets.github_token }}\"\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Install toolchain\n       run: rustup show active-toolchain"}, {"sha": "514706d64c8c0db45ec754bbaa6c983457bcad91", "filename": "src/tools/clippy/.github/workflows/clippy_dev.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fclippy_dev.yml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -25,7 +25,7 @@ jobs:\n     steps:\n     # Setup\n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     # Run\n     - name: Build"}, {"sha": "f42928c2cd1169c13c76651111297393e223c5ef", "filename": "src/tools/clippy/.github/workflows/deploy.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fdeploy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fdeploy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fdeploy.yml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -21,10 +21,10 @@ jobs:\n     steps:\n     # Setup\n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n       with:\n         ref: ${{ env.TARGET_BRANCH }}\n         path: 'out'"}, {"sha": "7d25b6a2b79e77303324b0e4e45259a7c55bba07", "filename": "src/tools/clippy/.github/workflows/remark.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fremark.yml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fremark.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fworkflows%2Fremark.yml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -16,10 +16,10 @@ jobs:\n     steps:\n     # Setup\n     - name: Checkout\n-      uses: actions/checkout@v3.0.2\n+      uses: actions/checkout@v3\n \n     - name: Setup Node.js\n-      uses: actions/setup-node@v1.4.4\n+      uses: actions/setup-node@v3\n       with:\n         node-version: '14.x'\n "}, {"sha": "79f2a47110b9e6cf9494aaeeba1d07cd25ca6ea6", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -4620,6 +4620,7 @@ Released 2018-09-13\n [`else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n [`empty_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_drop\n [`empty_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum\n+[`empty_line_after_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n [`empty_line_after_outer_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n [`empty_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n [`empty_structs_with_brackets`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_structs_with_brackets\n@@ -4785,6 +4786,7 @@ Released 2018-09-13\n [`manual_main_separator_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_main_separator_str\n [`manual_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n+[`manual_next_back`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_next_back\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n [`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n@@ -4897,6 +4899,7 @@ Released 2018-09-13\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n [`no_mangle_with_rust_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n+[`non_minimal_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n@@ -4978,6 +4981,7 @@ Released 2018-09-13\n [`ref_binding_to_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_binding_to_reference\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref\n+[`ref_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_patterns\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`repeat_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts"}, {"sha": "d712d3e675074131cb5abe470b2d547c6acaf6c5", "filename": "src/tools/clippy/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FREADME.md?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -278,7 +278,7 @@ If you want to contribute to Clippy, you can find more information in [CONTRIBUT\n \n <!-- REUSE-IgnoreStart -->\n \n-Copyright 2014-2022 The Rust Project Developers\n+Copyright 2014-2023 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n [https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license"}, {"sha": "d7c2775b89690383552bdd82031655d52e567029", "filename": "src/tools/clippy/book/src/development/type_checking.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Ftype_checking.md", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Ftype_checking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Ftype_checking.md?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -133,7 +133,7 @@ in this chapter:\n - [Type checking](https://rustc-dev-guide.rust-lang.org/type-checking.html)\n - [Ty module](https://rustc-dev-guide.rust-lang.org/ty.html)\n \n-[Adt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Adt\n+[Adt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_type_ir/sty/enum.TyKind.html#variant.Adt\n [AdtDef]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/adt/struct.AdtDef.html\n [expr_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.expr_ty\n [node_type]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.node_type\n@@ -142,9 +142,9 @@ in this chapter:\n [kind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html#method.kind\n [LateContext]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LateContext.html\n [LateLintPass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n-[pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.pat_ty\n+[pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/typeck_results/struct.TypeckResults.html#method.pat_ty\n [Ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html\n-[TyKind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\n+[TyKind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_type_ir/sty/enum.TyKind.html\n [TypeckResults]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html\n [middle_ty]: https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/struct.Ty.html\n [hir_ty]: https://doc.rust-lang.org/beta/nightly-rustc/rustc_hir/struct.Ty.html"}, {"sha": "98e69c7fd264a1656dc8aceed060cd9a75ec1b18", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -17,7 +17,7 @@ if_chain = \"1.0\"\n itertools = \"0.10.1\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n quine-mc_cluskey = \"0.2\"\n-regex-syntax = \"0.6\"\n+regex-syntax = \"0.7\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n tempfile = { version = \"3.2\", optional = true }"}, {"sha": "a8dc0cb3b58150c9458ff2701fda4d2ae89f033c", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnConstants {\n             _ => return,\n         };\n         let Some((condition, panic_expn)) = find_assert_args(cx, e, macro_call.expn) else { return };\n-        let Some((Constant::Bool(val), _)) = constant(cx, cx.typeck_results(), condition) else { return };\n+        let Some(Constant::Bool(val)) = constant(cx, cx.typeck_results(), condition) else { return };\n         if val {\n             span_lint_and_help(\n                 cx,"}, {"sha": "897495ba1087473fb538394426282f5c8d99065b", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 136, "deletions": 8, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -176,6 +176,52 @@ declare_clippy_lint! {\n     \"empty line after outer attribute\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for empty lines after documenation comments.\n+    ///\n+    /// ### Why is this bad?\n+    /// The documentation comment was most likely meant to be an inner attribute or regular comment.\n+    /// If it was intended to be a documentation comment, then the empty line should be removed to\n+    /// be more idiomatic.\n+    ///\n+    /// ### Known problems\n+    /// Only detects empty lines immediately following the documentation. If the doc comment is followed\n+    /// by an attribute and then an empty line, this lint will not trigger. Use `empty_line_after_outer_attr`\n+    /// in combination with this lint to detect both cases.\n+    ///\n+    /// Does not detect empty lines after doc attributes (e.g. `#[doc = \"\"]`).\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// /// Some doc comment with a blank line after it.\n+    ///\n+    /// fn not_quite_good_code() { }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// /// Good (no blank line)\n+    /// fn this_is_fine() { }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// // Good (convert to a regular comment)\n+    ///\n+    /// fn this_is_fine_too() { }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// //! Good (convert to a comment on an inner attribute)\n+    ///\n+    /// fn this_is_fine_as_well() { }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub EMPTY_LINE_AFTER_DOC_COMMENTS,\n+    nursery,\n+    \"empty line after documentation comments\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for `warn`/`deny`/`forbid` attributes targeting the whole clippy::restriction category.\n@@ -292,6 +338,30 @@ declare_clippy_lint! {\n     \"ensures that all `allow` and `expect` attributes have a reason\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `any` and `all` combinators in `cfg` with only one condition.\n+    ///\n+    /// ### Why is this bad?\n+    /// If there is only one condition, no need to wrap it into `any` or `all` combinators.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[cfg(any(unix))]\n+    /// pub struct Bar;\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// #[cfg(unix)]\n+    /// pub struct Bar;\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub NON_MINIMAL_CFG,\n+    style,\n+    \"ensure that all `cfg(any())` and `cfg(all())` have more than one condition\"\n+}\n+\n declare_lint_pass!(Attributes => [\n     ALLOW_ATTRIBUTES_WITHOUT_REASON,\n     INLINE_ALWAYS,\n@@ -604,6 +674,8 @@ impl_lint_pass!(EarlyAttributes => [\n     DEPRECATED_CFG_ATTR,\n     MISMATCHED_TARGET_OS,\n     EMPTY_LINE_AFTER_OUTER_ATTR,\n+    EMPTY_LINE_AFTER_DOC_COMMENTS,\n+    NON_MINIMAL_CFG,\n ]);\n \n impl EarlyLintPass for EarlyAttributes {\n@@ -614,15 +686,22 @@ impl EarlyLintPass for EarlyAttributes {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n         check_deprecated_cfg_attr(cx, attr, &self.msrv);\n         check_mismatched_target_os(cx, attr);\n+        check_minimal_cfg_condition(cx, attr);\n     }\n \n     extract_msrv_attr!(EarlyContext);\n }\n \n+/// Check for empty lines after outer attributes.\n+///\n+/// Attributes and documenation comments are both considered outer attributes\n+/// by the AST. However, the average user likely considers them to be different.\n+/// Checking for empty lines after each of these attributes is split into two different\n+/// lints but can share the same logic.\n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n     let mut iter = item.attrs.iter().peekable();\n     while let Some(attr) = iter.next() {\n-        if matches!(attr.kind, AttrKind::Normal(..))\n+        if (matches!(attr.kind, AttrKind::Normal(..)) || matches!(attr.kind, AttrKind::DocComment(..)))\n             && attr.style == AttrStyle::Outer\n             && is_present_in_source(cx, attr.span)\n         {\n@@ -639,13 +718,20 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n                 let lines = without_block_comments(lines);\n \n                 if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n-                    span_lint(\n-                        cx,\n-                        EMPTY_LINE_AFTER_OUTER_ATTR,\n-                        begin_of_attr_to_item,\n-                        \"found an empty line after an outer attribute. \\\n-                        Perhaps you forgot to add a `!` to make it an inner attribute?\",\n-                    );\n+                    let (lint_msg, lint_type) = match attr.kind {\n+                        AttrKind::DocComment(..) => (\n+                            \"found an empty line after a doc comment. \\\n+                            Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\",\n+                            EMPTY_LINE_AFTER_DOC_COMMENTS,\n+                        ),\n+                        AttrKind::Normal(..) => (\n+                            \"found an empty line after an outer attribute. \\\n+                            Perhaps you forgot to add a `!` to make it an inner attribute?\",\n+                            EMPTY_LINE_AFTER_OUTER_ATTR,\n+                        ),\n+                    };\n+\n+                    span_lint(cx, lint_type, begin_of_attr_to_item, lint_msg);\n                 }\n             }\n         }\n@@ -690,6 +776,48 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: &Msr\n     }\n }\n \n+fn check_nested_cfg(cx: &EarlyContext<'_>, items: &[NestedMetaItem]) {\n+    for item in items.iter() {\n+        if let NestedMetaItem::MetaItem(meta) = item {\n+            if !meta.has_name(sym::any) && !meta.has_name(sym::all) {\n+                continue;\n+            }\n+            if let MetaItemKind::List(list) = &meta.kind {\n+                check_nested_cfg(cx, list);\n+                if list.len() == 1 {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_MINIMAL_CFG,\n+                        meta.span,\n+                        \"unneeded sub `cfg` when there is only one condition\",\n+                        |diag| {\n+                            if let Some(snippet) = snippet_opt(cx, list[0].span()) {\n+                                diag.span_suggestion(meta.span, \"try\", snippet, Applicability::MaybeIncorrect);\n+                            }\n+                        },\n+                    );\n+                } else if list.is_empty() && meta.has_name(sym::all) {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_MINIMAL_CFG,\n+                        meta.span,\n+                        \"unneeded sub `cfg` when there is no condition\",\n+                        |_| {},\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_minimal_cfg_condition(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    if attr.has_name(sym::cfg) &&\n+        let Some(items) = attr.meta_item_list()\n+    {\n+        check_nested_cfg(cx, &items);\n+    }\n+}\n+\n fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n     fn find_os(name: &str) -> Option<&'static str> {\n         UNIX_SYSTEMS"}, {"sha": "814108ed8a7c2b1ef60c4e9888b7dc26ebae757d", "filename": "src/tools/clippy/clippy_lints/src/borrow_deref_ref.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,6 @@\n use crate::reference::DEREF_ADDROF;\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_from_proc_macro;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{get_parent_expr, is_lint_allowed};\n@@ -47,8 +48,8 @@ declare_clippy_lint! {\n \n declare_lint_pass!(BorrowDerefRef => [BORROW_DEREF_REF]);\n \n-impl LateLintPass<'_> for BorrowDerefRef {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, e: &rustc_hir::Expr<'_>) {\n+impl<'tcx> LateLintPass<'tcx> for BorrowDerefRef {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &rustc_hir::Expr<'tcx>) {\n         if_chain! {\n             if !e.span.from_expansion();\n             if let ExprKind::AddrOf(_, Mutability::Not, addrof_target) = e.kind;\n@@ -58,6 +59,7 @@ impl LateLintPass<'_> for BorrowDerefRef {\n             if !matches!(deref_target.kind, ExprKind::Unary(UnOp::Deref, ..) );\n             let ref_ty = cx.typeck_results().expr_ty(deref_target);\n             if let ty::Ref(_, inner_ty, Mutability::Not) = ref_ty.kind();\n+            if !is_from_proc_macro(cx, e);\n             then{\n \n                 if let Some(parent_expr) = get_parent_expr(cx, e){"}, {"sha": "e42c3fe24325694e8e75d5ac77086084f563e9db", "filename": "src/tools/clippy/clippy_lints/src/box_default.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -8,7 +8,9 @@ use rustc_hir::{\n     Block, Expr, ExprKind, Local, Node, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::{lint::in_external_macro, ty::print::with_forced_trimmed_paths};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n+use rustc_middle::ty::IsSuggestable;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -49,7 +51,6 @@ impl LateLintPass<'_> for BoxDefault {\n             && path_def_id(cx, ty).map_or(false, |id| Some(id) == cx.tcx.lang_items().owned_box())\n             && is_default_equivalent(cx, arg)\n         {\n-            let arg_ty = cx.typeck_results().expr_ty(arg);\n             span_lint_and_sugg(\n                 cx,\n                 BOX_DEFAULT,\n@@ -58,8 +59,10 @@ impl LateLintPass<'_> for BoxDefault {\n                 \"try\",\n                 if is_plain_default(arg_path) || given_type(cx, expr) {\n                     \"Box::default()\".into()\n-                } else {\n+                } else if let Some(arg_ty) = cx.typeck_results().expr_ty(arg).make_suggestable(cx.tcx, true) {\n                     with_forced_trimmed_paths!(format!(\"Box::<{arg_ty}>::default()\"))\n+                } else {\n+                    return\n                 },\n                 Applicability::MachineApplicable\n             );"}, {"sha": "da756129db3ae34ed85720ee79b55109e922f7c3", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_nan_to_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_nan_to_int.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -21,8 +21,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n \n fn is_known_nan(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     match constant(cx, cx.typeck_results(), e) {\n-        Some((Constant::F64(n), _)) => n.is_nan(),\n-        Some((Constant::F32(n), _)) => n.is_nan(),\n+        Some(Constant::F64(n)) => n.is_nan(),\n+        Some(Constant::F32(n)) => n.is_nan(),\n         _ => false,\n     }\n }"}, {"sha": "84b99ad5c243dd42ce19837b7cbd073774234c98", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -15,7 +15,7 @@ use rustc_target::abi::IntegerType;\n use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n \n fn constant_int(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n-    if let Some((Constant::Int(c), _)) = constant(cx, cx.typeck_results(), expr) {\n+    if let Some(Constant::Int(c)) = constant(cx, cx.typeck_results(), expr) {\n         Some(c)\n     } else {\n         None"}, {"sha": "a83dfd94dc2268b9727a3d6dea33c1570562de97", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_sign_loss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -29,7 +29,7 @@ fn should_lint(cx: &LateContext<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast\n             // Don't lint for positive constants.\n             let const_val = constant(cx, cx.typeck_results(), cast_op);\n             if_chain! {\n-                if let Some((Constant::Int(n), _)) = const_val;\n+                if let Some(Constant::Int(n)) = const_val;\n                 if let ty::Int(ity) = *cast_from.kind();\n                 if sext(cx.tcx, n, ity) >= 0;\n                 then {"}, {"sha": "ea17e7a6071046349a56dbc8a4dabf253f2da95e", "filename": "src/tools/clippy/clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_hir::{Expr, ExprKind, Node};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::sym;\n+use rustc_span::{sym, BytePos, Pos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -31,6 +31,31 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n+/// Gets the span of the statement up to the next semicolon, if and only if the next\n+/// non-whitespace character actually is a semicolon.\n+/// E.g.\n+/// ```rust,ignore\n+/// \n+///    dbg!();\n+///    ^^^^^^^  this span is returned\n+///\n+///   foo!(dbg!());\n+///             no span is returned\n+/// ```\n+fn span_including_semi(cx: &LateContext<'_>, span: Span) -> Option<Span> {\n+    let sm = cx.sess().source_map();\n+    let sf = sm.lookup_source_file(span.hi());\n+    let src = sf.src.as_ref()?.get(span.hi().to_usize()..)?;\n+    let first_non_whitespace = src.find(|c: char| !c.is_whitespace())?;\n+\n+    if src.as_bytes()[first_non_whitespace] == b';' {\n+        let hi = span.hi() + BytePos::from_usize(first_non_whitespace + 1);\n+        Some(span.with_hi(hi))\n+    } else {\n+        None\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub struct DbgMacro {\n     allow_dbg_in_tests: bool,\n@@ -55,13 +80,25 @@ impl LateLintPass<'_> for DbgMacro {\n                 return;\n             }\n             let mut applicability = Applicability::MachineApplicable;\n-            let suggestion = match expr.peel_drop_temps().kind {\n+\n+            let (sugg_span, suggestion) = match expr.peel_drop_temps().kind {\n                 // dbg!()\n-                ExprKind::Block(_, _) => String::new(),\n-                // dbg!(1)\n-                ExprKind::Match(val, ..) => {\n-                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string()\n+                ExprKind::Block(..) => {\n+                    // If the `dbg!` macro is a \"free\" statement and not contained within other expressions,\n+                    // remove the whole statement.\n+                    if let Some(Node::Stmt(stmt)) = cx.tcx.hir().find_parent(expr.hir_id)\n+                        && let Some(span) = span_including_semi(cx, stmt.span.source_callsite())\n+                    {\n+                        (span, String::new())\n+                    } else {\n+                        (macro_call.span, String::from(\"()\"))\n+                    }\n                 },\n+                // dbg!(1)\n+                ExprKind::Match(val, ..) => (\n+                    macro_call.span,\n+                    snippet_with_applicability(cx, val.span.source_callsite(), \"..\", &mut applicability).to_string(),\n+                ),\n                 // dbg!(2, 3)\n                 ExprKind::Tup(\n                     [\n@@ -82,15 +119,15 @@ impl LateLintPass<'_> for DbgMacro {\n                         \"..\",\n                         &mut applicability,\n                     );\n-                    format!(\"({snippet})\")\n+                    (macro_call.span, format!(\"({snippet})\"))\n                 },\n                 _ => return,\n             };\n \n             span_lint_and_sugg(\n                 cx,\n                 DBG_MACRO,\n-                macro_call.span,\n+                sugg_span,\n                 \"the `dbg!` macro is intended as a debugging tool\",\n                 \"remove the invocation before committing it to a version control system\",\n                 suggestion,"}, {"sha": "423eee47742e00d9057d341befe1f0c730a8a605", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -48,9 +48,11 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::attrs::BLANKET_CLIPPY_RESTRICTION_LINTS_INFO,\n     crate::attrs::DEPRECATED_CFG_ATTR_INFO,\n     crate::attrs::DEPRECATED_SEMVER_INFO,\n+    crate::attrs::EMPTY_LINE_AFTER_DOC_COMMENTS_INFO,\n     crate::attrs::EMPTY_LINE_AFTER_OUTER_ATTR_INFO,\n     crate::attrs::INLINE_ALWAYS_INFO,\n     crate::attrs::MISMATCHED_TARGET_OS_INFO,\n+    crate::attrs::NON_MINIMAL_CFG_INFO,\n     crate::attrs::USELESS_ATTRIBUTE_INFO,\n     crate::await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE_INFO,\n     crate::await_holding_invalid::AWAIT_HOLDING_LOCK_INFO,\n@@ -347,6 +349,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::ITER_WITH_DRAIN_INFO,\n     crate::methods::MANUAL_FILTER_MAP_INFO,\n     crate::methods::MANUAL_FIND_MAP_INFO,\n+    crate::methods::MANUAL_NEXT_BACK_INFO,\n     crate::methods::MANUAL_OK_OR_INFO,\n     crate::methods::MANUAL_SATURATING_ARITHMETIC_INFO,\n     crate::methods::MANUAL_SPLIT_ONCE_INFO,\n@@ -485,7 +488,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::operators::FLOAT_EQUALITY_WITHOUT_ABS_INFO,\n     crate::operators::IDENTITY_OP_INFO,\n     crate::operators::INEFFECTIVE_BIT_MASK_INFO,\n-    crate::operators::INTEGER_ARITHMETIC_INFO,\n     crate::operators::INTEGER_DIVISION_INFO,\n     crate::operators::MISREFACTORED_ASSIGN_OP_INFO,\n     crate::operators::MODULO_ARITHMETIC_INFO,\n@@ -535,6 +537,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::redundant_slicing::REDUNDANT_SLICING_INFO,\n     crate::redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES_INFO,\n     crate::ref_option_ref::REF_OPTION_REF_INFO,\n+    crate::ref_patterns::REF_PATTERNS_INFO,\n     crate::reference::DEREF_ADDROF_INFO,\n     crate::regex::INVALID_REGEX_INFO,\n     crate::regex::TRIVIAL_REGEX_INFO,"}, {"sha": "9bd7a0dc0f3b88f01abbbeba191239051ecedde4", "filename": "src/tools/clippy/clippy_lints/src/default_constructed_unit_structs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, is_from_proc_macro, match_def_path, paths};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, match_def_path, paths};\n use hir::{def::Res, ExprKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -55,7 +55,8 @@ impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n             if let ty::Adt(def, ..) = cx.typeck_results().expr_ty(expr).kind();\n             if def.is_struct();\n             if let var @ ty::VariantDef { ctor: Some((hir::def::CtorKind::Const, _)), .. } = def.non_enum_variant();\n-            if !var.is_field_list_non_exhaustive() && !is_from_proc_macro(cx, expr);\n+            if !var.is_field_list_non_exhaustive();\n+            if !expr.span.from_expansion() && !qpath.span().from_expansion();\n             then {\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "3c55a563af455e9b5ea96ca42e2ffb49edd1174f", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -114,7 +114,7 @@ declare_lint_pass!(FloatingPointArithmetic => [\n // Returns the specialized log method for a given base if base is constant\n // and is one of 2, 10 and e\n fn get_specialized_log_method(cx: &LateContext<'_>, base: &Expr<'_>) -> Option<&'static str> {\n-    if let Some((value, _)) = constant(cx, cx.typeck_results(), base) {\n+    if let Some(value) = constant(cx, cx.typeck_results(), base) {\n         if F32(2.0) == value || F64(2.0) == value {\n             return Some(\"log2\");\n         } else if F32(10.0) == value || F64(10.0) == value {\n@@ -193,8 +193,8 @@ fn check_ln1p(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>) {\n             constant(cx, cx.typeck_results(), lhs),\n             constant(cx, cx.typeck_results(), rhs),\n         ) {\n-            (Some((value, _)), _) if F32(1.0) == value || F64(1.0) == value => rhs,\n-            (_, Some((value, _))) if F32(1.0) == value || F64(1.0) == value => lhs,\n+            (Some(value), _) if F32(1.0) == value || F64(1.0) == value => rhs,\n+            (_, Some(value)) if F32(1.0) == value || F64(1.0) == value => lhs,\n             _ => return,\n         };\n \n@@ -237,7 +237,7 @@ fn get_integer_from_float_constant(value: &Constant) -> Option<i32> {\n \n fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check receiver\n-    if let Some((value, _)) = constant(cx, cx.typeck_results(), receiver) {\n+    if let Some(value) = constant(cx, cx.typeck_results(), receiver) {\n         if let Some(method) = if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n             Some(\"exp\")\n         } else if F32(2.0) == value || F64(2.0) == value {\n@@ -258,7 +258,7 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n     }\n \n     // Check argument\n-    if let Some((value, _)) = constant(cx, cx.typeck_results(), &args[0]) {\n+    if let Some(value) = constant(cx, cx.typeck_results(), &args[0]) {\n         let (lint, help, suggestion) = if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n             (\n                 SUBOPTIMAL_FLOPS,\n@@ -298,7 +298,7 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n }\n \n fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args: &[Expr<'_>]) {\n-    if let Some((value, _)) = constant(cx, cx.typeck_results(), &args[0]) {\n+    if let Some(value) = constant(cx, cx.typeck_results(), &args[0]) {\n         if value == Int(2) {\n             if let Some(parent) = get_parent_expr(cx, expr) {\n                 if let Some(grandparent) = get_parent_expr(cx, parent) {\n@@ -384,8 +384,8 @@ fn detect_hypot(cx: &LateContext<'_>, receiver: &Expr<'_>) -> Option<String> {\n                 _\n             ) = &add_rhs.kind;\n             if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n-            if let Some((lvalue, _)) = constant(cx, cx.typeck_results(), largs_1);\n-            if let Some((rvalue, _)) = constant(cx, cx.typeck_results(), rargs_1);\n+            if let Some(lvalue) = constant(cx, cx.typeck_results(), largs_1);\n+            if let Some(rvalue) = constant(cx, cx.typeck_results(), rargs_1);\n             if Int(2) == lvalue && Int(2) == rvalue;\n             then {\n                 return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, largs_0, \"..\").maybe_par(), Sugg::hir(cx, rargs_0, \"..\")));\n@@ -416,7 +416,7 @@ fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Binary(Spanned { node: BinOpKind::Sub, .. }, lhs, rhs) = expr.kind;\n         if cx.typeck_results().expr_ty(lhs).is_floating_point();\n-        if let Some((value, _)) = constant(cx, cx.typeck_results(), rhs);\n+        if let Some(value) = constant(cx, cx.typeck_results(), rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n         if let ExprKind::MethodCall(path, self_arg, ..) = &lhs.kind;\n         if cx.typeck_results().expr_ty(self_arg).is_floating_point();\n@@ -669,8 +669,8 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             mul_lhs,\n             mul_rhs,\n         ) = &div_lhs.kind;\n-        if let Some((rvalue, _)) = constant(cx, cx.typeck_results(), div_rhs);\n-        if let Some((lvalue, _)) = constant(cx, cx.typeck_results(), mul_rhs);\n+        if let Some(rvalue) = constant(cx, cx.typeck_results(), div_rhs);\n+        if let Some(lvalue) = constant(cx, cx.typeck_results(), mul_rhs);\n         then {\n             // TODO: also check for constant values near PI/180 or 180/PI\n             if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&"}, {"sha": "521045a9fed8fb0f53dfd27253e70164aba508cf", "filename": "src/tools/clippy/clippy_lints/src/fn_null_check.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffn_null_check.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -89,11 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n \n                     // Catching:\n                     // (fn_ptr as *<const/mut> <ty>) == <const that evaluates to null_ptr>\n-                    _ if matches!(\n-                        constant(cx, cx.typeck_results(), to_check),\n-                        Some((Constant::RawPtr(0), _))\n-                    ) =>\n-                    {\n+                    _ if matches!(constant(cx, cx.typeck_results(), to_check), Some(Constant::RawPtr(0))) => {\n                         lint_expr(cx, expr);\n                     },\n "}, {"sha": "ee7973b82ab9708860f6bbec696fb39141a99e2e", "filename": "src/tools/clippy/clippy_lints/src/implicit_saturating_add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_saturating_add.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -101,10 +101,10 @@ fn get_int_max(ty: Ty<'_>) -> Option<u128> {\n fn get_const<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<(u128, BinOpKind, &'tcx Expr<'tcx>)> {\n     if let ExprKind::Binary(op, l, r) = expr.kind {\n         let tr = cx.typeck_results();\n-        if let Some((Constant::Int(c), _)) = constant(cx, tr, r) {\n+        if let Some(Constant::Int(c)) = constant(cx, tr, r) {\n             return Some((c, op.node, l));\n         };\n-        if let Some((Constant::Int(c), _)) = constant(cx, tr, l) {\n+        if let Some(Constant::Int(c)) = constant(cx, tr, l) {\n             return Some((c, invert_op(op.node)?, r));\n         }\n     }"}, {"sha": "7a269e98ff13b8674bfb11069bed70568202a911", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n                 let parent_id = map.parent_id(expr.hir_id);\n                 if let Some(hir::Node::Expr(parent_expr)) = map.find(parent_id);\n                 if let hir::ExprKind::Index(_, index_expr) = parent_expr.kind;\n-                if let Some((Constant::Int(index_value), _)) = constant(cx, cx.typeck_results(), index_expr);\n+                if let Some(Constant::Int(index_value)) = constant(cx, cx.typeck_results(), index_expr);\n                 if let Ok(index_value) = index_value.try_into();\n                 if index_value < max_suggested_slice;\n "}, {"sha": "22c14d9b04dd13d4df26776c14633deeb4b9fa0d", "filename": "src/tools/clippy/clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -191,18 +191,14 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n /// Returns a tuple of options with the start and end (exclusive) values of\n /// the range. If the start or end is not constant, None is returned.\n fn to_const_range(cx: &LateContext<'_>, range: higher::Range<'_>, array_size: u128) -> (Option<u128>, Option<u128>) {\n-    let s = range\n-        .start\n-        .map(|expr| constant(cx, cx.typeck_results(), expr).map(|(c, _)| c));\n+    let s = range.start.map(|expr| constant(cx, cx.typeck_results(), expr));\n     let start = match s {\n         Some(Some(Constant::Int(x))) => Some(x),\n         Some(_) => None,\n         None => Some(0),\n     };\n \n-    let e = range\n-        .end\n-        .map(|expr| constant(cx, cx.typeck_results(), expr).map(|(c, _)| c));\n+    let e = range.end.map(|expr| constant(cx, cx.typeck_results(), expr));\n     let end = match e {\n         Some(Some(Constant::Int(x))) => {\n             if range.limits == RangeLimits::Closed {"}, {"sha": "e661418092080f015e13189ca0494c956e470c0e", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,10 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_from_proc_macro;\n use clippy_utils::ty::{implements_trait, is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n-use rustc_hir::{ExprKind, Local, PatKind};\n+use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::IsSuggestable;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -138,7 +140,7 @@ const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &Local<'tcx>) {\n         if !in_external_macro(cx.tcx.sess, local.span)\n             && let PatKind::Wild = local.pat.kind\n             && let Some(init) = local.init\n@@ -191,15 +193,17 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if local.pat.default_binding_modes && local.ty.is_none() {\n                 // When `default_binding_modes` is true, the `let` keyword is present.\n \n-\t\t\t\t// Ignore function calls that return impl traits...\n-\t\t\t\tif let Some(init) = local.init &&\n-\t\t\t\tmatches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n-\t\t\t\t\tlet expr_ty = cx.typeck_results().expr_ty(init);\n-\t\t\t\t\tif expr_ty.is_impl_trait() {\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+                // Ignore unnameable types\n+                if let Some(init) = local.init\n+                    && !cx.typeck_results().expr_ty(init).is_suggestable(cx.tcx, true)\n+                {\n+                    return;\n+                }\n \n+                // Ignore if it is from a procedural macro...\n+                if is_from_proc_macro(cx, init) {\n+                    return;\n+                }\n \n \t\t\t\tspan_lint_and_help(\n                     cx,"}, {"sha": "b442a4ac5f611065c4c8e8f227fb9559d2bd5d43", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -266,6 +266,7 @@ mod redundant_pub_crate;\n mod redundant_slicing;\n mod redundant_static_lifetimes;\n mod ref_option_ref;\n+mod ref_patterns;\n mod reference;\n mod regex;\n mod return_self_not_must_use;\n@@ -331,8 +332,11 @@ mod zero_div_zero;\n mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n-use crate::utils::conf::{format_error, TryConf};\n pub use crate::utils::conf::{lookup_conf_file, Conf};\n+use crate::utils::{\n+    conf::{format_error, metadata::get_configuration_metadata, TryConf},\n+    FindAll,\n+};\n \n /// Register all pre expansion lints\n ///\n@@ -471,7 +475,22 @@ pub(crate) struct LintInfo {\n pub fn explain(name: &str) {\n     let target = format!(\"clippy::{}\", name.to_ascii_uppercase());\n     match declared_lints::LINTS.iter().find(|info| info.lint.name == target) {\n-        Some(info) => print!(\"{}\", info.explanation),\n+        Some(info) => {\n+            println!(\"{}\", info.explanation);\n+            // Check if the lint has configuration\n+            let mdconf = get_configuration_metadata();\n+            if let Some(config_vec_positions) = mdconf\n+                .iter()\n+                .find_all(|cconf| cconf.lints.contains(&info.lint.name_lower()[8..].to_owned()))\n+            {\n+                // If it has, print it\n+                println!(\"### Configuration for {}:\\n\", info.lint.name_lower());\n+                for position in config_vec_positions {\n+                    let conf = &mdconf[position];\n+                    println!(\"  - {}: {} (default: {})\", conf.name, conf.doc, conf.default);\n+                }\n+            }\n+        },\n         None => println!(\"unknown lint: {name}\"),\n     }\n }\n@@ -971,6 +990,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(manual_slice_size_calculation::ManualSliceSizeCalculation));\n     store.register_early_pass(|| Box::new(suspicious_doc_comments::SuspiciousDocComments));\n     store.register_late_pass(|_| Box::new(items_after_test_module::ItemsAfterTestModule));\n+    store.register_early_pass(|| Box::new(ref_patterns::RefPatterns));\n     store.register_late_pass(|_| Box::new(default_constructed_unit_structs::DefaultConstructedUnitStructs));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }"}, {"sha": "09b2032e20fbe51ca21f3fc6cead521644a801f8", "filename": "src/tools/clippy/clippy_lints/src/lines_filter_map_ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flines_filter_map_ok.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// This lint suggests replacing `filter_map()` or `flat_map()` applied to a `Lines`\n-    /// instance in all cases. There two cases where the suggestion might not be\n+    /// instance in all cases. There are two cases where the suggestion might not be\n     /// appropriate or necessary:\n     ///\n     /// - If the `Lines` instance can never produce any error, or if an error is produced"}, {"sha": "3f8b42ffe80532f44850730bfe149a5bec459b8b", "filename": "src/tools/clippy/clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -38,7 +38,6 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n-    /// # #![feature(let_else)]\n     /// # fn main () {\n     /// # let w = Some(0);\n     /// let Some(v) = w else { return };\n@@ -69,29 +68,23 @@ impl_lint_pass!(ManualLetElse => [MANUAL_LET_ELSE]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &'tcx Stmt<'tcx>) {\n-        let if_let_or_match = if_chain! {\n-            if self.msrv.meets(msrvs::LET_ELSE);\n-            if !in_external_macro(cx.sess(), stmt.span);\n-            if let StmtKind::Local(local) = stmt.kind;\n-            if let Some(init) = local.init;\n-            if local.els.is_none();\n-            if local.ty.is_none();\n-            if init.span.ctxt() == stmt.span.ctxt();\n-            if let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init);\n-            then {\n-                if_let_or_match\n-            } else {\n-                return;\n-            }\n-        };\n+        if !self.msrv.meets(msrvs::LET_ELSE) || in_external_macro(cx.sess(), stmt.span) {\n+            return;\n+        }\n \n+        if let StmtKind::Local(local) = stmt.kind &&\n+            let Some(init) = local.init &&\n+            local.els.is_none() &&\n+            local.ty.is_none() &&\n+            init.span.ctxt() == stmt.span.ctxt() &&\n+            let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init) {\n         match if_let_or_match {\n             IfLetOrMatch::IfLet(if_let_expr, let_pat, if_then, if_else) => if_chain! {\n                 if expr_is_simple_identity(let_pat, if_then);\n                 if let Some(if_else) = if_else;\n                 if expr_diverges(cx, if_else);\n                 then {\n-                    emit_manual_let_else(cx, stmt.span, if_let_expr, let_pat, if_else);\n+                    emit_manual_let_else(cx, stmt.span, if_let_expr, local.pat, let_pat, if_else);\n                 }\n             },\n             IfLetOrMatch::Match(match_expr, arms, source) => {\n@@ -128,15 +121,23 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     return;\n                 }\n \n-                emit_manual_let_else(cx, stmt.span, match_expr, pat_arm.pat, diverging_arm.body);\n+                emit_manual_let_else(cx, stmt.span, match_expr, local.pat, pat_arm.pat, diverging_arm.body);\n             },\n         }\n+        };\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n-fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat: &Pat<'_>, else_body: &Expr<'_>) {\n+fn emit_manual_let_else(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    expr: &Expr<'_>,\n+    local: &Pat<'_>,\n+    pat: &Pat<'_>,\n+    else_body: &Expr<'_>,\n+) {\n     span_lint_and_then(\n         cx,\n         MANUAL_LET_ELSE,\n@@ -145,12 +146,11 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n         |diag| {\n             // This is far from perfect, for example there needs to be:\n             // * mut additions for the bindings\n-            // * renamings of the bindings\n+            // * renamings of the bindings for `PatKind::Or`\n             // * unused binding collision detection with existing ones\n             // * putting patterns with at the top level | inside ()\n             // for this to be machine applicable.\n             let mut app = Applicability::HasPlaceholders;\n-            let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n             let (sn_expr, _) = snippet_with_context(cx, expr.span, span.ctxt(), \"\", &mut app);\n             let (sn_else, _) = snippet_with_context(cx, else_body.span, span.ctxt(), \"\", &mut app);\n \n@@ -159,10 +159,21 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n             } else {\n                 format!(\"{{ {sn_else} }}\")\n             };\n-            let sn_bl = if matches!(pat.kind, PatKind::Or(..)) {\n-                format!(\"({sn_pat})\")\n-            } else {\n-                sn_pat.into_owned()\n+            let sn_bl = match pat.kind {\n+                PatKind::Or(..) => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"({sn_pat})\")\n+                },\n+                // Replace the variable name iff `TupleStruct` has one argument like `Variant(v)`.\n+                PatKind::TupleStruct(ref w, args, ..) if args.len() == 1 => {\n+                    let sn_wrapper = cx.sess().source_map().span_to_snippet(w.span()).unwrap_or_default();\n+                    let (sn_inner, _) = snippet_with_context(cx, local.span, span.ctxt(), \"\", &mut app);\n+                    format!(\"{sn_wrapper}({sn_inner})\")\n+                },\n+                _ => {\n+                    let (sn_pat, _) = snippet_with_context(cx, pat.span, span.ctxt(), \"\", &mut app);\n+                    sn_pat.into_owned()\n+                },\n             };\n             let sugg = format!(\"let {sn_bl} = {sn_expr} else {else_bl};\");\n             diag.span_suggestion(span, \"consider writing\", sugg, app);"}, {"sha": "93d977a5c96b82a20b13ba66582a1c2aaddaa403", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -144,7 +144,7 @@ fn len_arg<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx E\n \n // Returns the length of the `expr` if it's a constant string or char.\n fn constant_length(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n-    let (value, _) = constant(cx, cx.typeck_results(), expr)?;\n+    let value = constant(cx, cx.typeck_results(), expr)?;\n     match value {\n         Constant::Str(value) => Some(value.len() as u128),\n         Constant::Char(value) => Some(value.len_utf8() as u128),"}, {"sha": "0064619ef89d1bb4ec78d14abb972600e8f5b854", "filename": "src/tools/clippy/clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,10 +1,12 @@\n+use super::REDUNDANT_PATTERN_MATCHING;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::is_wild;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::span_contains_comment;\n use rustc_ast::{Attribute, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat};\n+use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat, PatKind, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty;\n use rustc_span::source_map::Spanned;\n@@ -99,6 +101,14 @@ where\n                 }\n             }\n \n+            for arm in iter_without_last.clone() {\n+                if let Some(pat) = arm.1 {\n+                    if !is_lint_allowed(cx, REDUNDANT_PATTERN_MATCHING, pat.hir_id) && is_some(pat.kind) {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n             // The suggestion may be incorrect, because some arms can have `cfg` attributes\n             // evaluated into `false` and so such arms will be stripped before.\n             let mut applicability = Applicability::MaybeIncorrect;\n@@ -170,3 +180,13 @@ fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n         _ => None,\n     }\n }\n+\n+fn is_some(path_kind: PatKind<'_>) -> bool {\n+    match path_kind {\n+        PatKind::TupleStruct(QPath::Resolved(_, path), [first, ..], _) if is_wild(first) => {\n+            let name = path.segments[0].ident;\n+            name.name == rustc_span::sym::Some\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "ae8262ace96874a4254e145fdca4cc95fdb139b7", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -282,9 +282,8 @@ impl<'a> NormalizedPat<'a> {\n                 // TODO: Handle negative integers. They're currently treated as a wild match.\n                 ExprKind::Lit(lit) => match lit.node {\n                     LitKind::Str(sym, _) => Self::LitStr(sym),\n-                    LitKind::ByteStr(ref bytes, _) => Self::LitBytes(bytes),\n+                    LitKind::ByteStr(ref bytes, _) | LitKind::CStr(ref bytes, _) => Self::LitBytes(bytes),\n                     LitKind::Byte(val) => Self::LitInt(val.into()),\n-                    LitKind::CStr(ref bytes, _) => Self::LitBytes(bytes),\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),\n                     LitKind::Bool(val) => Self::LitBool(val),"}, {"sha": "55ec9d4474f59de08eef3a39d1c7ed28c296e581", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -25,9 +25,9 @@ mod wild_in_or_pats;\n \n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_opt, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, is_span_match};\n+use clippy_utils::{higher, in_constant, is_span_match, tokenize_with_text};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n-use rustc_lexer::{tokenize, TokenKind};\n+use rustc_lexer::TokenKind;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -1147,12 +1147,7 @@ fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n         // Assume true. This would require either an invalid span, or one which crosses file boundaries.\n         return true;\n     };\n-    let mut pos = 0usize;\n-    let mut iter = tokenize(&snip).map(|t| {\n-        let start = pos;\n-        pos += t.len as usize;\n-        (t.kind, start..pos)\n-    });\n+    let mut iter = tokenize_with_text(&snip);\n \n     // Search for the token sequence [`#`, `[`, `cfg`]\n     while iter.any(|(t, _)| matches!(t, TokenKind::Pound)) {\n@@ -1163,7 +1158,7 @@ fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n             )\n         });\n         if matches!(iter.next(), Some((TokenKind::OpenBracket, _)))\n-            && matches!(iter.next(), Some((TokenKind::Ident, range)) if &snip[range.clone()] == \"cfg\")\n+            && matches!(iter.next(), Some((TokenKind::Ident, \"cfg\")))\n         {\n             return true;\n         }"}, {"sha": "abf2525a61c68520b9511732e6f44d91645166b6", "filename": "src/tools/clippy/clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -34,7 +34,7 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n             if let Arm { pat, guard: None, .. } = *arm {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n                     let lhs_const = match lhs {\n-                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n+                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?,\n                         None => {\n                             let min_val_const = ty.numeric_min_val(cx.tcx)?;\n                             let min_constant = mir::ConstantKind::from_value(\n@@ -45,7 +45,7 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n                         },\n                     };\n                     let rhs_const = match rhs {\n-                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n+                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?,\n                         None => {\n                             let max_val_const = ty.numeric_max_val(cx.tcx)?;\n                             let max_constant = mir::ConstantKind::from_value("}, {"sha": "e81e09da42547a5be77f0d6841d5e7887cdd73b2", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 148, "deletions": 67, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -189,73 +189,7 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n-        let found_good_method = match node_pair {\n-            (\n-                PatKind::TupleStruct(ref path_left, patterns_left, _),\n-                PatKind::TupleStruct(ref path_right, patterns_right, _),\n-            ) if patterns_left.len() == 1 && patterns_right.len() == 1 => {\n-                if let (PatKind::Wild, PatKind::Wild) = (&patterns_left[0].kind, &patterns_right[0].kind) {\n-                    find_good_method_for_match(\n-                        cx,\n-                        arms,\n-                        path_left,\n-                        path_right,\n-                        Item::Lang(ResultOk),\n-                        Item::Lang(ResultErr),\n-                        \"is_ok()\",\n-                        \"is_err()\",\n-                    )\n-                    .or_else(|| {\n-                        find_good_method_for_match(\n-                            cx,\n-                            arms,\n-                            path_left,\n-                            path_right,\n-                            Item::Diag(sym::IpAddr, sym!(V4)),\n-                            Item::Diag(sym::IpAddr, sym!(V6)),\n-                            \"is_ipv4()\",\n-                            \"is_ipv6()\",\n-                        )\n-                    })\n-                } else {\n-                    None\n-                }\n-            },\n-            (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Path(ref path_right))\n-            | (PatKind::Path(ref path_left), PatKind::TupleStruct(ref path_right, patterns, _))\n-                if patterns.len() == 1 =>\n-            {\n-                if let PatKind::Wild = patterns[0].kind {\n-                    find_good_method_for_match(\n-                        cx,\n-                        arms,\n-                        path_left,\n-                        path_right,\n-                        Item::Lang(OptionSome),\n-                        Item::Lang(OptionNone),\n-                        \"is_some()\",\n-                        \"is_none()\",\n-                    )\n-                    .or_else(|| {\n-                        find_good_method_for_match(\n-                            cx,\n-                            arms,\n-                            path_left,\n-                            path_right,\n-                            Item::Lang(PollReady),\n-                            Item::Lang(PollPending),\n-                            \"is_ready()\",\n-                            \"is_pending()\",\n-                        )\n-                    })\n-                } else {\n-                    None\n-                }\n-            },\n-            _ => None,\n-        };\n-\n-        if let Some(good_method) = found_good_method {\n+        if let Some(good_method) = found_good_method(cx, arms, node_pair) {\n             let span = expr.span.to(op.span);\n             let result_expr = match &op.kind {\n                 ExprKind::AddrOf(_, _, borrowed) => borrowed,\n@@ -279,6 +213,127 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n+fn found_good_method<'a>(\n+    cx: &LateContext<'_>,\n+    arms: &[Arm<'_>],\n+    node: (&PatKind<'_>, &PatKind<'_>),\n+) -> Option<&'a str> {\n+    match node {\n+        (\n+            PatKind::TupleStruct(ref path_left, patterns_left, _),\n+            PatKind::TupleStruct(ref path_right, patterns_right, _),\n+        ) if patterns_left.len() == 1 && patterns_right.len() == 1 => {\n+            if let (PatKind::Wild, PatKind::Wild) = (&patterns_left[0].kind, &patterns_right[0].kind) {\n+                find_good_method_for_match(\n+                    cx,\n+                    arms,\n+                    path_left,\n+                    path_right,\n+                    Item::Lang(ResultOk),\n+                    Item::Lang(ResultErr),\n+                    \"is_ok()\",\n+                    \"is_err()\",\n+                )\n+                .or_else(|| {\n+                    find_good_method_for_match(\n+                        cx,\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        Item::Diag(sym::IpAddr, sym!(V4)),\n+                        Item::Diag(sym::IpAddr, sym!(V6)),\n+                        \"is_ipv4()\",\n+                        \"is_ipv6()\",\n+                    )\n+                })\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Path(ref path_right))\n+        | (PatKind::Path(ref path_left), PatKind::TupleStruct(ref path_right, patterns, _))\n+            if patterns.len() == 1 =>\n+        {\n+            if let PatKind::Wild = patterns[0].kind {\n+                find_good_method_for_match(\n+                    cx,\n+                    arms,\n+                    path_left,\n+                    path_right,\n+                    Item::Lang(OptionSome),\n+                    Item::Lang(OptionNone),\n+                    \"is_some()\",\n+                    \"is_none()\",\n+                )\n+                .or_else(|| {\n+                    find_good_method_for_match(\n+                        cx,\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        Item::Lang(PollReady),\n+                        Item::Lang(PollPending),\n+                        \"is_ready()\",\n+                        \"is_pending()\",\n+                    )\n+                })\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Wild) if patterns.len() == 1 => {\n+            if let PatKind::Wild = patterns[0].kind {\n+                get_good_method(cx, arms, path_left)\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::Path(ref path_left), PatKind::Wild) => get_good_method(cx, arms, path_left),\n+        _ => None,\n+    }\n+}\n+\n+fn get_ident(path: &QPath<'_>) -> Option<rustc_span::symbol::Ident> {\n+    match path {\n+        QPath::Resolved(_, path) => {\n+            let name = path.segments[0].ident;\n+            Some(name)\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn get_good_method<'a>(cx: &LateContext<'_>, arms: &[Arm<'_>], path_left: &QPath<'_>) -> Option<&'a str> {\n+    if let Some(name) = get_ident(path_left) {\n+        return match name.as_str() {\n+            \"Ok\" => {\n+                find_good_method_for_matches_macro(cx, arms, path_left, Item::Lang(ResultOk), \"is_ok()\", \"is_err()\")\n+            },\n+            \"Err\" => {\n+                find_good_method_for_matches_macro(cx, arms, path_left, Item::Lang(ResultErr), \"is_err()\", \"is_ok()\")\n+            },\n+            \"Some\" => find_good_method_for_matches_macro(\n+                cx,\n+                arms,\n+                path_left,\n+                Item::Lang(OptionSome),\n+                \"is_some()\",\n+                \"is_none()\",\n+            ),\n+            \"None\" => find_good_method_for_matches_macro(\n+                cx,\n+                arms,\n+                path_left,\n+                Item::Lang(OptionNone),\n+                \"is_none()\",\n+                \"is_some()\",\n+            ),\n+            _ => None,\n+        };\n+    }\n+    None\n+}\n+\n #[derive(Clone, Copy)]\n enum Item {\n     Lang(LangItem),\n@@ -346,3 +401,29 @@ fn find_good_method_for_match<'a>(\n         _ => None,\n     }\n }\n+\n+fn find_good_method_for_matches_macro<'a>(\n+    cx: &LateContext<'_>,\n+    arms: &[Arm<'_>],\n+    path_left: &QPath<'_>,\n+    expected_item_left: Item,\n+    should_be_left: &'a str,\n+    should_be_right: &'a str,\n+) -> Option<&'a str> {\n+    let first_pat = arms[0].pat;\n+\n+    let body_node_pair = if is_pat_variant(cx, first_pat, path_left, expected_item_left) {\n+        (&arms[0].body.kind, &arms[1].body.kind)\n+    } else {\n+        return None;\n+    };\n+\n+    match body_node_pair {\n+        (ExprKind::Lit(lit_left), ExprKind::Lit(lit_right)) => match (&lit_left.node, &lit_right.node) {\n+            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}"}, {"sha": "d1609eebfdca9dd5a66aa9ad3da342336762194a", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -13,7 +13,7 @@ use super::ITER_NTH_ZERO;\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, expr, sym::Iterator);\n-        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), arg);\n+        if let Some(Constant::Int(0)) = constant(cx, cx.typeck_results(), arg);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg("}, {"sha": "b631cd00cda4349c5c8f6d7f598558345efb9dae", "filename": "src/tools/clippy/clippy_lints/src/methods/iterator_step_by_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -9,7 +9,7 @@ use super::ITERATOR_STEP_BY_ZERO;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &'tcx hir::Expr<'_>) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), arg) {\n+        if let Some(Constant::Int(0)) = constant(cx, cx.typeck_results(), arg) {\n             span_lint(\n                 cx,\n                 ITERATOR_STEP_BY_ZERO,"}, {"sha": "5f3fec53827a9bae6f44e7504b2ea84ad05af633", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_next_back.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_next_back.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_next_back.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_next_back.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::ty::implements_trait;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    rev_call: &'tcx Expr<'_>,\n+    rev_recv: &'tcx Expr<'_>,\n+) {\n+    let rev_recv_ty = cx.typeck_results().expr_ty(rev_recv);\n+\n+    // check that the receiver of `rev` implements `DoubleEndedIterator` and\n+    // that `rev` and `next` come from `Iterator`\n+    if cx\n+        .tcx\n+        .get_diagnostic_item(sym::DoubleEndedIterator)\n+        .map_or(false, |double_ended_iterator| {\n+            implements_trait(cx, rev_recv_ty, double_ended_iterator, &[])\n+        })\n+        && is_trait_method(cx, rev_call, sym::Iterator)\n+        && is_trait_method(cx, expr, sym::Iterator)\n+    {\n+        span_lint_and_sugg(\n+            cx,\n+            super::MANUAL_NEXT_BACK,\n+            expr.span.with_lo(rev_recv.span.hi()),\n+            \"manual backwards iteration\",\n+            \"use\",\n+            String::from(\".next_back()\"),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}"}, {"sha": "9a594d964ab22ea7bf7c64b9f4683df9998a9979", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -45,6 +45,7 @@ mod iter_overeager_cloned;\n mod iter_skip_next;\n mod iter_with_drain;\n mod iterator_step_by_zero;\n+mod manual_next_back;\n mod manual_ok_or;\n mod manual_saturating_arithmetic;\n mod manual_str_repeat;\n@@ -3132,8 +3133,11 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let iterator = vec![1].into_iter();\n-    /// let len = iterator.clone().collect::<Vec<_>>().len();\n-    /// // should be\n+    /// let len = iterator.collect::<Vec<_>>().len();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let iterator = vec![1].into_iter();\n     /// let len = iterator.count();\n     /// ```\n     #[clippy::version = \"1.30.0\"]\n@@ -3193,6 +3197,29 @@ declare_clippy_lint! {\n     \"calling `drain` in order to `clear` a container\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `.rev().next()` on a `DoubleEndedIterator`\n+    ///\n+    /// ### Why is this bad?\n+    /// `.next_back()` is cleaner.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let foo = [0; 10];\n+    /// foo.iter().rev().next();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let foo = [0; 10];\n+    /// foo.iter().next_back();\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub MANUAL_NEXT_BACK,\n+    style,\n+    \"manual reverse iteration of `DoubleEndedIterator`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Msrv,\n@@ -3321,6 +3348,7 @@ impl_lint_pass!(Methods => [\n     NEEDLESS_COLLECT,\n     SUSPICIOUS_COMMAND_ARG_SPACE,\n     CLEAR_WITH_DRAIN,\n+    MANUAL_NEXT_BACK,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3677,6 +3705,7 @@ impl Methods {\n                             (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n                             (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n                             (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n+                            (\"rev\", [])=> manual_next_back::check(cx, expr, recv, recv2),\n                             _ => {},\n                         }\n                     }\n@@ -3741,13 +3770,13 @@ impl Methods {\n                     unnecessary_sort_by::check(cx, expr, recv, arg, true);\n                 },\n                 (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n-                    if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n+                    if let Some(Constant::Int(count)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);\n                         str_splitn::check(cx, name, expr, recv, pat_arg, count, &self.msrv);\n                     }\n                 },\n                 (\"splitn_mut\" | \"rsplitn_mut\", [count_arg, _]) => {\n-                    if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n+                    if let Some(Constant::Int(count)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);\n                     }\n                 },"}, {"sha": "6841aaf626ca53b2264edf31febdd28250264b9b", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,13 +1,13 @@\n use super::NEEDLESS_COLLECT;\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n-use clippy_utils::higher;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, make_normalized_projection, make_projection};\n use clippy_utils::{\n     can_move_expr_to_closure, get_enclosing_block, get_parent_node, is_trait_method, path_to_local, path_to_local_id,\n     CaptureKind,\n };\n+use clippy_utils::{fn_def_id, higher};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n@@ -16,7 +16,7 @@ use rustc_hir::{\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, AssocKind, EarlyBinder, GenericArg, GenericArgKind, Ty};\n+use rustc_middle::ty::{self, AssocKind, Clause, EarlyBinder, GenericArg, GenericArgKind, PredicateKind, Ty};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol};\n \n@@ -32,6 +32,8 @@ pub(super) fn check<'tcx>(\n     if let Some(parent) = get_parent_node(cx.tcx, collect_expr.hir_id) {\n         match parent {\n             Node::Expr(parent) => {\n+                check_collect_into_intoiterator(cx, parent, collect_expr, call_span, iter_expr);\n+\n                 if let ExprKind::MethodCall(name, _, args @ ([] | [_]), _) = parent.kind {\n                     let mut app = Applicability::MachineApplicable;\n                     let name = name.ident.as_str();\n@@ -134,6 +136,68 @@ pub(super) fn check<'tcx>(\n     }\n }\n \n+/// checks for for collecting into a (generic) method or function argument\n+/// taking an `IntoIterator`\n+fn check_collect_into_intoiterator<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    parent: &'tcx Expr<'tcx>,\n+    collect_expr: &'tcx Expr<'tcx>,\n+    call_span: Span,\n+    iter_expr: &'tcx Expr<'tcx>,\n+) {\n+    if let Some(id) = fn_def_id(cx, parent) {\n+        let args = match parent.kind {\n+            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => args,\n+            _ => &[],\n+        };\n+        // find the argument index of the `collect_expr` in the\n+        // function / method call\n+        if let Some(arg_idx) = args.iter().position(|e| e.hir_id == collect_expr.hir_id).map(|i| {\n+            if matches!(parent.kind, ExprKind::MethodCall(_, _, _, _)) {\n+                i + 1\n+            } else {\n+                i\n+            }\n+        }) {\n+            // extract the input types of the function/method call\n+            // that contains `collect_expr`\n+            let inputs = cx\n+                .tcx\n+                .liberate_late_bound_regions(id, cx.tcx.fn_sig(id).subst_identity())\n+                .inputs();\n+\n+            // map IntoIterator generic bounds to their signature\n+            // types and check whether the argument type is an\n+            // `IntoIterator`\n+            if cx\n+                .tcx\n+                .param_env(id)\n+                .caller_bounds()\n+                .into_iter()\n+                .filter_map(|p| {\n+                    if let PredicateKind::Clause(Clause::Trait(t)) = p.kind().skip_binder()\n+                            && cx.tcx.is_diagnostic_item(sym::IntoIterator,t.trait_ref.def_id) {\n+                                Some(t.self_ty())\n+                            } else {\n+                                None\n+                            }\n+                })\n+                .any(|ty| ty == inputs[arg_idx])\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_COLLECT,\n+                    call_span.with_lo(iter_expr.span.hi()),\n+                    NEEDLESS_COLLECT_MSG,\n+                    \"remove this call\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n /// Checks if the given method call matches the expected signature of `([&[mut]] self) -> bool`\n fn is_is_empty_sig(cx: &LateContext<'_>, call_id: HirId) -> bool {\n     cx.typeck_results().type_dependent_def_id(call_id).map_or(false, |id| {"}, {"sha": "bb4cdd2a6fa10c7264c1eb89c7761ee23caf2e30", "filename": "src/tools/clippy/clippy_lints/src/methods/repeat_once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Frepeat_once.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant_context, Constant};\n+use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_lang_item;\n@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx Expr<'_>,\n     repeat_arg: &'tcx Expr<'_>,\n ) {\n-    if constant_context(cx, cx.typeck_results()).expr(repeat_arg) == Some(Constant::Int(1)) {\n+    if constant(cx, cx.typeck_results(), repeat_arg) == Some(Constant::Int(1)) {\n         let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n         if ty.is_str() {\n             span_lint_and_sugg("}, {"sha": "5ea12c441840dfd91da132ef583445ca3f84142b", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -316,7 +316,7 @@ fn parse_iter_usage<'tcx>(\n                     };\n                 },\n                 (\"nth\" | \"skip\", [idx_expr]) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n-                    if let Some((Constant::Int(idx), _)) = constant(cx, cx.typeck_results(), idx_expr) {\n+                    if let Some(Constant::Int(idx)) = constant(cx, cx.typeck_results(), idx_expr) {\n                         let span = if name.ident.as_str() == \"nth\" {\n                             e.span\n                         } else {"}, {"sha": "303f0125690873570d17a251409d024a4fc1bdc0", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -16,9 +16,12 @@ use rustc_span::source_map::{ExpnKind, Span};\n \n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    get_parent_expr, in_constant, is_integer_literal, is_no_std_crate, iter_input_pats, last_path_segment, SpanlessEq,\n+    get_parent_expr, in_constant, is_integer_literal, is_lint_allowed, is_no_std_crate, iter_input_pats,\n+    last_path_segment, SpanlessEq,\n };\n \n+use crate::ref_patterns::REF_PATTERNS;\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for function arguments and let bindings denoted as\n@@ -162,6 +165,10 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n             return;\n         }\n         for arg in iter_input_pats(decl, body) {\n+            // Do not emit if clippy::ref_patterns is not allowed to avoid having two lints for the same issue.\n+            if !is_lint_allowed(cx, REF_PATTERNS, arg.pat.hir_id) {\n+                return;\n+            }\n             if let PatKind::Binding(BindingAnnotation(ByRef::Yes, _), ..) = arg.pat.kind {\n                 span_lint(\n                     cx,\n@@ -180,6 +187,8 @@ impl<'tcx> LateLintPass<'tcx> for LintPass {\n             if let StmtKind::Local(local) = stmt.kind;\n             if let PatKind::Binding(BindingAnnotation(ByRef::Yes, mutabl), .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n+            // Do not emit if clippy::ref_patterns is not allowed to avoid having two lints for the same issue.\n+            if is_lint_allowed(cx, REF_PATTERNS, local.pat.hir_id);\n             then {\n                 let ctxt = local.span.ctxt();\n                 let mut app = Applicability::MachineApplicable;"}, {"sha": "62af42a3961f8383c1bd1e6dd203cdf66f788ab1", "filename": "src/tools/clippy/clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -146,7 +146,7 @@ fn is_parent_stmt(cx: &LateContext<'_>, id: HirId) -> bool {\n impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use self::Expression::{Bool, RetBool};\n-        if e.span.from_expansion() {\n+        if e.span.from_expansion() || !span_extract_comment(cx.tcx.sess.source_map(), e.span).is_empty() {\n             return;\n         }\n         if let Some(higher::If {\n@@ -209,8 +209,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n             }\n             if let Some((lhs_a, a)) = fetch_assign(then) &&\n                 let Some((lhs_b, b)) = fetch_assign(r#else) &&\n-                SpanlessEq::new(cx).eq_expr(lhs_a, lhs_b) &&\n-                span_extract_comment(cx.tcx.sess.source_map(), e.span).is_empty()\n+                SpanlessEq::new(cx).eq_expr(lhs_a, lhs_b)\n             {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let cond = Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability);"}, {"sha": "f4863600ccc04c9bc2a15dc1df8fced9dc790b10", "filename": "src/tools/clippy/clippy_lints/src/operators/absurd_extreme_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -121,7 +121,7 @@ fn detect_absurd_comparison<'tcx>(\n fn detect_extreme_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<ExtremeExpr<'tcx>> {\n     let ty = cx.typeck_results().expr_ty(expr);\n \n-    let cv = constant(cx, cx.typeck_results(), expr)?.0;\n+    let cv = constant(cx, cx.typeck_results(), expr)?;\n \n     let which = match (ty.kind(), cv) {\n         (&ty::Bool, Constant::Bool(false)) | (&ty::Uint(_), Constant::Int(0)) => ExtremeType::Minimum,"}, {"sha": "5c240276b76d195f4e62edbe907bd34028a89c68", "filename": "src/tools/clippy/clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -21,7 +21,7 @@ const HARD_CODED_ALLOWED_BINARY: &[[&str; 2]] = &[\n     [\"f64\", \"f64\"],\n     [\"std::num::Saturating\", \"std::num::Saturating\"],\n     [\"std::num::Wrapping\", \"std::num::Wrapping\"],\n-    [\"std::string::String\", \"&str\"],\n+    [\"std::string::String\", \"str\"],\n ];\n const HARD_CODED_ALLOWED_UNARY: &[&str] = &[\"f32\", \"f64\", \"std::num::Saturating\", \"std::num::Wrapping\"];\n const INTEGER_METHODS: &[&str] = &[\"saturating_div\", \"wrapping_div\", \"wrapping_rem\", \"wrapping_rem_euclid\"];\n@@ -113,7 +113,7 @@ impl ArithmeticSideEffects {\n         if let hir::ExprKind::Lit(lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n             return Some(n)\n         }\n-        if let Some((Constant::Int(n), _)) = constant(cx, cx.typeck_results(), expr) {\n+        if let Some(Constant::Int(n)) = constant(cx, cx.typeck_results(), expr) {\n             return Some(n);\n         }\n         None\n@@ -144,8 +144,10 @@ impl ArithmeticSideEffects {\n         ) {\n             return;\n         };\n-        let lhs_ty = cx.typeck_results().expr_ty(lhs);\n-        let rhs_ty = cx.typeck_results().expr_ty(rhs);\n+        let (actual_lhs, lhs_ref_counter) = peel_hir_expr_refs(lhs);\n+        let (actual_rhs, rhs_ref_counter) = peel_hir_expr_refs(rhs);\n+        let lhs_ty = cx.typeck_results().expr_ty(actual_lhs).peel_refs();\n+        let rhs_ty = cx.typeck_results().expr_ty(actual_rhs).peel_refs();\n         if self.has_allowed_binary(lhs_ty, rhs_ty) {\n             return;\n         }\n@@ -154,8 +156,6 @@ impl ArithmeticSideEffects {\n                 // At least for integers, shifts are already handled by the CTFE\n                 return;\n             }\n-            let (actual_lhs, lhs_ref_counter) = peel_hir_expr_refs(lhs);\n-            let (actual_rhs, rhs_ref_counter) = peel_hir_expr_refs(rhs);\n             match (\n                 Self::literal_integer(cx, actual_lhs),\n                 Self::literal_integer(cx, actual_rhs),"}, {"sha": "1fddf0f50e322513d4599900e5316fdbd31c174d", "filename": "src/tools/clippy/clippy_lints/src/operators/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -166,7 +166,7 @@ fn check_ineffective_gt(cx: &LateContext<'_>, span: Span, m: u128, c: u128, op:\n }\n \n fn fetch_int_literal(cx: &LateContext<'_>, lit: &Expr<'_>) -> Option<u128> {\n-    match constant(cx, cx.typeck_results(), lit)?.0 {\n+    match constant(cx, cx.typeck_results(), lit)? {\n         Constant::Int(n) => Some(n),\n         _ => None,\n     }"}, {"sha": "e18064b7061bf3d6344571a2a77fd7d240a3bc17", "filename": "src/tools/clippy/clippy_lints/src/operators/cmp_nan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, op: BinOpKind, lhs: &Exp\n }\n \n fn is_nan(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    if let Some((value, _)) = constant(cx, cx.typeck_results(), e) {\n+    if let Some(value) = constant(cx, cx.typeck_results(), e) {\n         match value {\n             Constant::F32(num) => num.is_nan(),\n             Constant::F64(num) => num.is_nan(),"}, {"sha": "f120be13836d87c2d715a3490f98520b82196215", "filename": "src/tools/clippy/clippy_lints/src/operators/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn check<'tcx>(\n     if op == BinOpKind::Div\n         && let ExprKind::MethodCall(method_path, self_arg, [], _) = left.kind\n         && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_arg).peel_refs(), sym::Duration)\n-        && let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right)\n+        && let Some(Constant::Int(divisor)) = constant(cx, cx.typeck_results(), right)\n     {\n         let suggested_fn = match (method_path.ident.as_str(), divisor) {\n             (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\","}, {"sha": "15dff126be76e5eabd7ed88517806c489a7de969", "filename": "src/tools/clippy/clippy_lints/src/operators/float_cmp.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Ffloat_cmp.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::consts::{constant_with_source, Constant};\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::get_item_name;\n use clippy_utils::sugg::Sugg;\n@@ -18,9 +18,16 @@ pub(crate) fn check<'tcx>(\n     right: &'tcx Expr<'_>,\n ) {\n     if (op == BinOpKind::Eq || op == BinOpKind::Ne) && (is_float(cx, left) || is_float(cx, right)) {\n-        if is_allowed(cx, left) || is_allowed(cx, right) {\n-            return;\n-        }\n+        let left_is_local = match constant_with_source(cx, cx.typeck_results(), left) {\n+            Some((c, s)) if !is_allowed(&c) => s.is_local(),\n+            Some(_) => return,\n+            None => true,\n+        };\n+        let right_is_local = match constant_with_source(cx, cx.typeck_results(), right) {\n+            Some((c, s)) if !is_allowed(&c) => s.is_local(),\n+            Some(_) => return,\n+            None => true,\n+        };\n \n         // Allow comparing the results of signum()\n         if is_signum(cx, left) && is_signum(cx, right) {\n@@ -34,10 +41,7 @@ pub(crate) fn check<'tcx>(\n             }\n         }\n         let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n-        let (lint, msg) = get_lint_and_message(\n-            is_named_constant(cx, left) || is_named_constant(cx, right),\n-            is_comparing_arrays,\n-        );\n+        let (lint, msg) = get_lint_and_message(left_is_local && right_is_local, is_comparing_arrays);\n         span_lint_and_then(cx, lint, expr.span, msg, |diag| {\n             let lhs = Sugg::hir(cx, left, \"..\");\n             let rhs = Sugg::hir(cx, right, \"..\");\n@@ -59,44 +63,33 @@ pub(crate) fn check<'tcx>(\n     }\n }\n \n-fn get_lint_and_message(\n-    is_comparing_constants: bool,\n-    is_comparing_arrays: bool,\n-) -> (&'static rustc_lint::Lint, &'static str) {\n-    if is_comparing_constants {\n+fn get_lint_and_message(is_local: bool, is_comparing_arrays: bool) -> (&'static rustc_lint::Lint, &'static str) {\n+    if is_local {\n         (\n-            FLOAT_CMP_CONST,\n+            FLOAT_CMP,\n             if is_comparing_arrays {\n-                \"strict comparison of `f32` or `f64` constant arrays\"\n+                \"strict comparison of `f32` or `f64` arrays\"\n             } else {\n-                \"strict comparison of `f32` or `f64` constant\"\n+                \"strict comparison of `f32` or `f64`\"\n             },\n         )\n     } else {\n         (\n-            FLOAT_CMP,\n+            FLOAT_CMP_CONST,\n             if is_comparing_arrays {\n-                \"strict comparison of `f32` or `f64` arrays\"\n+                \"strict comparison of `f32` or `f64` constant arrays\"\n             } else {\n-                \"strict comparison of `f32` or `f64`\"\n+                \"strict comparison of `f32` or `f64` constant\"\n             },\n         )\n     }\n }\n \n-fn is_named_constant<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n-    if let Some((_, res)) = constant(cx, cx.typeck_results(), expr) {\n-        res\n-    } else {\n-        false\n-    }\n-}\n-\n-fn is_allowed<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n-    match constant(cx, cx.typeck_results(), expr) {\n-        Some((Constant::F32(f), _)) => f == 0.0 || f.is_infinite(),\n-        Some((Constant::F64(f), _)) => f == 0.0 || f.is_infinite(),\n-        Some((Constant::Vec(vec), _)) => vec.iter().all(|f| match f {\n+fn is_allowed(val: &Constant) -> bool {\n+    match val {\n+        &Constant::F32(f) => f == 0.0 || f.is_infinite(),\n+        &Constant::F64(f) => f == 0.0 || f.is_infinite(),\n+        Constant::Vec(vec) => vec.iter().all(|f| match f {\n             Constant::F32(f) => *f == 0.0 || (*f).is_infinite(),\n             Constant::F64(f) => *f == 0.0 || (*f).is_infinite(),\n             _ => false,"}, {"sha": "d63a836e73d6fcc8964baf8e775906e1e4c55884", "filename": "src/tools/clippy/clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -96,32 +96,6 @@ declare_clippy_lint! {\n     \"any arithmetic expression that can cause side effects like overflows or panics\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for integer arithmetic operations which could overflow or panic.\n-    ///\n-    /// Specifically, checks for any operators (`+`, `-`, `*`, `<<`, etc) which are capable\n-    /// of overflowing according to the [Rust\n-    /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n-    /// or which can panic (`/`, `%`). No bounds analysis or sophisticated reasoning is\n-    /// attempted.\n-    ///\n-    /// ### Why is this bad?\n-    /// Integer overflow will trigger a panic in debug builds or will wrap in\n-    /// release mode. Division by zero will cause a panic in either mode. In some applications one\n-    /// wants explicitly checked, wrapping or saturating arithmetic.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let a = 0;\n-    /// a + 1;\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub INTEGER_ARITHMETIC,\n-    restriction,\n-    \"any integer arithmetic expression which could overflow or panic\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for float arithmetic.\n@@ -787,7 +761,6 @@ pub struct Operators {\n impl_lint_pass!(Operators => [\n     ABSURD_EXTREME_COMPARISONS,\n     ARITHMETIC_SIDE_EFFECTS,\n-    INTEGER_ARITHMETIC,\n     FLOAT_ARITHMETIC,\n     ASSIGN_OP_PATTERN,\n     MISREFACTORED_ASSIGN_OP,"}, {"sha": "a2c3a4d8ba7752d794d7656dfdecb12131bdfa6c", "filename": "src/tools/clippy/clippy_lints/src/operators/modulo_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -40,7 +40,7 @@ struct OperandInfo {\n \n fn analyze_operand(operand: &Expr<'_>, cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<OperandInfo> {\n     match constant(cx, cx.typeck_results(), operand) {\n-        Some((Constant::Int(v), _)) => match *cx.typeck_results().expr_ty(expr).kind() {\n+        Some(Constant::Int(v)) => match *cx.typeck_results().expr_ty(expr).kind() {\n             ty::Int(ity) => {\n                 let value = sext(cx.tcx, v, ity);\n                 return Some(OperandInfo {\n@@ -58,10 +58,10 @@ fn analyze_operand(operand: &Expr<'_>, cx: &LateContext<'_>, expr: &Expr<'_>) ->\n             },\n             _ => {},\n         },\n-        Some((Constant::F32(f), _)) => {\n+        Some(Constant::F32(f)) => {\n             return Some(floating_point_operand_info(&f));\n         },\n-        Some((Constant::F64(f), _)) => {\n+        Some(Constant::F64(f)) => {\n             return Some(floating_point_operand_info(&f));\n         },\n         _ => {},"}, {"sha": "102845ceed095a16a4109293de18e13894581f21", "filename": "src/tools/clippy/clippy_lints/src/operators/numeric_arithmetic.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,8 +1,6 @@\n-use super::{FLOAT_ARITHMETIC, INTEGER_ARITHMETIC};\n+use super::FLOAT_ARITHMETIC;\n use clippy_utils::consts::constant_simple;\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_from_proc_macro;\n-use clippy_utils::is_integer_literal;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n@@ -45,31 +43,8 @@ impl Context {\n             _ => (),\n         }\n \n-        let (l_ty, r_ty) = (cx.typeck_results().expr_ty(l), cx.typeck_results().expr_ty(r));\n-        if l_ty.peel_refs().is_integral() && r_ty.peel_refs().is_integral() {\n-            if is_from_proc_macro(cx, expr) {\n-                return;\n-            }\n-            match op {\n-                hir::BinOpKind::Div | hir::BinOpKind::Rem => match &r.kind {\n-                    hir::ExprKind::Lit(_lit) => (),\n-                    hir::ExprKind::Unary(hir::UnOp::Neg, expr) => {\n-                        if is_integer_literal(expr, 1) {\n-                            span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                            self.expr_id = Some(expr.hir_id);\n-                        }\n-                    },\n-                    _ => {\n-                        span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                        self.expr_id = Some(expr.hir_id);\n-                    },\n-                },\n-                _ => {\n-                    span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                    self.expr_id = Some(expr.hir_id);\n-                },\n-            }\n-        } else if r_ty.peel_refs().is_floating_point() && r_ty.peel_refs().is_floating_point() {\n+        let (_, r_ty) = (cx.typeck_results().expr_ty(l), cx.typeck_results().expr_ty(r));\n+        if r_ty.peel_refs().is_floating_point() && r_ty.peel_refs().is_floating_point() {\n             span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n             self.expr_id = Some(expr.hir_id);\n         }\n@@ -80,17 +55,9 @@ impl Context {\n             return;\n         }\n         let ty = cx.typeck_results().expr_ty(arg);\n-        if constant_simple(cx, cx.typeck_results(), expr).is_none() {\n-            if ty.is_integral() {\n-                if is_from_proc_macro(cx, expr) {\n-                    return;\n-                }\n-                span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                self.expr_id = Some(expr.hir_id);\n-            } else if ty.is_floating_point() {\n-                span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n-                self.expr_id = Some(expr.hir_id);\n-            }\n+        if constant_simple(cx, cx.typeck_results(), expr).is_none() && ty.is_floating_point() {\n+            span_lint(cx, FLOAT_ARITHMETIC, expr.span, \"floating-point arithmetic detected\");\n+            self.expr_id = Some(expr.hir_id);\n         }\n     }\n "}, {"sha": "aa6d40042688d55fa056663d63c31e8ea4aadd62", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -122,7 +122,7 @@ fn try_get_option_occurrence<'tcx>(\n         ExprKind::Unary(UnOp::Deref, inner_expr) | ExprKind::AddrOf(_, _, inner_expr) => inner_expr,\n         _ => expr,\n     };\n-    let inner_pat = try_get_inner_pat(cx, pat)?;\n+    let (inner_pat, is_result) = try_get_inner_pat_and_is_result(cx, pat)?;\n     if_chain! {\n         if let PatKind::Binding(bind_annotation, _, id, None) = inner_pat.kind;\n         if let Some(some_captures) = can_move_expr_to_closure(cx, if_then);\n@@ -176,7 +176,7 @@ fn try_get_option_occurrence<'tcx>(\n                 ),\n                 none_expr: format!(\n                     \"{}{}\",\n-                    if method_sugg == \"map_or\" { \"\" } else { \"|| \" },\n+                    if method_sugg == \"map_or\" { \"\" } else if is_result { \"|_| \" } else { \"|| \"},\n                     Sugg::hir_with_context(cx, none_body, ctxt, \"..\", &mut app),\n                 ),\n             });\n@@ -186,11 +186,13 @@ fn try_get_option_occurrence<'tcx>(\n     None\n }\n \n-fn try_get_inner_pat<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<&'tcx Pat<'tcx>> {\n+fn try_get_inner_pat_and_is_result<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<(&'tcx Pat<'tcx>, bool)> {\n     if let PatKind::TupleStruct(ref qpath, [inner_pat], ..) = pat.kind {\n         let res = cx.qpath_res(qpath, pat.hir_id);\n-        if is_res_lang_ctor(cx, res, OptionSome) || is_res_lang_ctor(cx, res, ResultOk) {\n-            return Some(inner_pat);\n+        if is_res_lang_ctor(cx, res, OptionSome) {\n+            return Some((inner_pat, false));\n+        } else if is_res_lang_ctor(cx, res, ResultOk) {\n+            return Some((inner_pat, true));\n         }\n     }\n     None"}, {"sha": "dd7ded491e792383cfb973c009f921dc1fca5997", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -319,7 +319,7 @@ fn check_range_bounds<'a>(cx: &'a LateContext<'_>, ex: &'a Expr<'_>) -> Option<R\n             _ => return None,\n         };\n         if let Some(id) = path_to_local(l) {\n-            if let Some((c, _)) = constant(cx, cx.typeck_results(), r) {\n+            if let Some(c) = constant(cx, cx.typeck_results(), r) {\n                 return Some(RangeBounds {\n                     val: c,\n                     expr: r,\n@@ -331,7 +331,7 @@ fn check_range_bounds<'a>(cx: &'a LateContext<'_>, ex: &'a Expr<'_>) -> Option<R\n                 });\n             }\n         } else if let Some(id) = path_to_local(r) {\n-            if let Some((c, _)) = constant(cx, cx.typeck_results(), l) {\n+            if let Some(c) = constant(cx, cx.typeck_results(), l) {\n                 return Some(RangeBounds {\n                     val: c,\n                     expr: l,\n@@ -451,8 +451,8 @@ fn check_reversed_empty_range(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::Range::hir(expr);\n         let ty = cx.typeck_results().expr_ty(start);\n         if let ty::Int(_) | ty::Uint(_) = ty.kind();\n-        if let Some((start_idx, _)) = constant(cx, cx.typeck_results(), start);\n-        if let Some((end_idx, _)) = constant(cx, cx.typeck_results(), end);\n+        if let Some(start_idx) = constant(cx, cx.typeck_results(), start);\n+        if let Some(end_idx) = constant(cx, cx.typeck_results(), end);\n         if let Some(ordering) = Constant::partial_cmp(cx.tcx, ty, &start_idx, &end_idx);\n         if is_empty_range(limits, ordering);\n         then {"}, {"sha": "b1530eed1c11fe5183457e220e20d00ad558b71b", "filename": "src/tools/clippy/clippy_lints/src/ref_patterns.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_patterns.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_ast::ast::{BindingAnnotation, Pat, PatKind};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of the `ref` keyword.\n+    /// ### Why is this bad?\n+    /// The `ref` keyword can be confusing for people unfamiliar with it, and often\n+    /// it is more concise to use `&` instead.\n+    /// ### Example\n+    /// ```rust\n+    /// let opt = Some(5);\n+    /// if let Some(ref foo) = opt {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let opt = Some(5);\n+    /// if let Some(foo) = &opt {}\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub REF_PATTERNS,\n+    restriction,\n+    \"use of a ref pattern, e.g. Some(ref value)\"\n+}\n+declare_lint_pass!(RefPatterns => [REF_PATTERNS]);\n+\n+impl EarlyLintPass for RefPatterns {\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &Pat) {\n+        if let PatKind::Ident(BindingAnnotation::REF, _, _) = pat.kind\n+                && !pat.span.from_expansion()\n+        {\n+            span_lint_and_help(\n+                cx,\n+                REF_PATTERNS,\n+                pat.span,\n+                \"usage of ref pattern\",\n+                None,\n+                \"consider using `&` for clarity instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "ef19c6f4617295a4cef75847ee64064bc9a7550f", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -122,37 +122,39 @@ fn lint_syntax_error(cx: &LateContext<'_>, error: &regex_syntax::Error, unescape\n }\n \n fn const_str<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> Option<String> {\n-    constant(cx, cx.typeck_results(), e).and_then(|(c, _)| match c {\n+    constant(cx, cx.typeck_results(), e).and_then(|c| match c {\n         Constant::Str(s) => Some(s),\n         _ => None,\n     })\n }\n \n fn is_trivial_regex(s: &regex_syntax::hir::Hir) -> Option<&'static str> {\n-    use regex_syntax::hir::Anchor::{EndText, StartText};\n-    use regex_syntax::hir::HirKind::{Alternation, Anchor, Concat, Empty, Literal};\n+    use regex_syntax::hir::HirKind::{Alternation, Concat, Empty, Literal, Look};\n+    use regex_syntax::hir::Look as HirLook;\n \n     let is_literal = |e: &[regex_syntax::hir::Hir]| e.iter().all(|e| matches!(*e.kind(), Literal(_)));\n \n     match *s.kind() {\n-        Empty | Anchor(_) => Some(\"the regex is unlikely to be useful as it is\"),\n+        Empty | Look(_) => Some(\"the regex is unlikely to be useful as it is\"),\n         Literal(_) => Some(\"consider using `str::contains`\"),\n         Alternation(ref exprs) => {\n-            if exprs.iter().all(|e| e.kind().is_empty()) {\n+            if exprs.iter().all(|e| matches!(e.kind(), Empty)) {\n                 Some(\"the regex is unlikely to be useful as it is\")\n             } else {\n                 None\n             }\n         },\n         Concat(ref exprs) => match (exprs[0].kind(), exprs[exprs.len() - 1].kind()) {\n-            (&Anchor(StartText), &Anchor(EndText)) if exprs[1..(exprs.len() - 1)].is_empty() => {\n+            (&Look(HirLook::Start), &Look(HirLook::End)) if exprs[1..(exprs.len() - 1)].is_empty() => {\n                 Some(\"consider using `str::is_empty`\")\n             },\n-            (&Anchor(StartText), &Anchor(EndText)) if is_literal(&exprs[1..(exprs.len() - 1)]) => {\n+            (&Look(HirLook::Start), &Look(HirLook::End)) if is_literal(&exprs[1..(exprs.len() - 1)]) => {\n                 Some(\"consider using `==` on `str`s\")\n             },\n-            (&Anchor(StartText), &Literal(_)) if is_literal(&exprs[1..]) => Some(\"consider using `str::starts_with`\"),\n-            (&Literal(_), &Anchor(EndText)) if is_literal(&exprs[1..(exprs.len() - 1)]) => {\n+            (&Look(HirLook::Start), &Literal(_)) if is_literal(&exprs[1..]) => {\n+                Some(\"consider using `str::starts_with`\")\n+            },\n+            (&Literal(_), &Look(HirLook::End)) if is_literal(&exprs[1..(exprs.len() - 1)]) => {\n                 Some(\"consider using `str::ends_with`\")\n             },\n             _ if is_literal(exprs) => Some(\"consider using `str::contains`\"),\n@@ -175,10 +177,7 @@ fn check_set<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n }\n \n fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n-    let mut parser = regex_syntax::ParserBuilder::new()\n-        .unicode(true)\n-        .allow_invalid_utf8(!utf8)\n-        .build();\n+    let mut parser = regex_syntax::ParserBuilder::new().unicode(true).utf8(!utf8).build();\n \n     if let ExprKind::Lit(lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {"}, {"sha": "a2c3465cde4a3c4344f6db8e647f97745b0245cd", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -15,6 +15,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n+    (\"clippy::integer_arithmetic\", \"clippy::arithmetic_side_effects\"),\n     (\"clippy::logic_bug\", \"clippy::overly_complex_bool_expr\"),\n     (\"clippy::new_without_default_derive\", \"clippy::new_without_default\"),\n     (\"clippy::option_and_then_some\", \"clippy::bind_instead_of_map\"),"}, {"sha": "483f860a8b5e2c66360779ee94defeca531e00cc", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -132,7 +132,7 @@ declare_clippy_lint! {\n     /// Probably lots of false positives. If an index comes from a known valid position (e.g.\n     /// obtained via `char_indices` over the same string), it is totally OK.\n     ///\n-    /// # Example\n+    /// ### Example\n     /// ```rust,should_panic\n     /// &\"\u00d6lkanne\"[1..];\n     /// ```"}, {"sha": "4ccda15068bbbb5c7cceabb0d8db1b9a5f73d8f4", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -37,12 +37,12 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.38.0\"]\n     pub TYPE_REPETITION_IN_BOUNDS,\n     nursery,\n-    \"types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+    \"types are repeated unnecessarily in trait bounds, use `+` instead of using `T: _, T: _`\"\n }\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for cases where generics are being used and multiple\n+    /// Checks for cases where generics or trait objects are being used and multiple\n     /// syntax specifications for trait bounds are used simultaneously.\n     ///\n     /// ### Why is this bad?\n@@ -167,6 +167,61 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n             }\n         }\n     }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n+        if_chain! {\n+            if let TyKind::Ref(.., mut_ty) = &ty.kind;\n+            if let TyKind::TraitObject(bounds, ..) = mut_ty.ty.kind;\n+            if bounds.len() > 2;\n+            then {\n+\n+                // Build up a hash of every trait we've seen\n+                // When we see a trait for the first time, add it to unique_traits\n+                // so we can later use it to build a string of all traits exactly once, without duplicates\n+\n+                let mut seen_def_ids = FxHashSet::default();\n+                let mut unique_traits = Vec::new();\n+\n+                // Iterate the bounds and add them to our seen hash\n+                // If we haven't yet seen it, add it to the fixed traits\n+                for bound in bounds.iter() {\n+                    let Some(def_id) = bound.trait_ref.trait_def_id() else { continue; };\n+\n+                    let new_trait = seen_def_ids.insert(def_id);\n+\n+                    if new_trait {\n+                        unique_traits.push(bound);\n+                    }\n+                }\n+\n+                // If the number of unique traits isn't the same as the number of traits in the bounds,\n+                // there must be 1 or more duplicates\n+                if bounds.len() != unique_traits.len() {\n+                    let mut bounds_span = bounds[0].span;\n+\n+                    for bound in bounds.iter().skip(1) {\n+                        bounds_span = bounds_span.to(bound.span);\n+                    }\n+\n+                    let fixed_trait_snippet = unique_traits\n+                        .iter()\n+                        .filter_map(|b| snippet_opt(cx, b.span))\n+                        .collect::<Vec<_>>()\n+                        .join(\" + \");\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TRAIT_DUPLICATION_IN_BOUNDS,\n+                        bounds_span,\n+                        \"this trait bound is already specified in trait declaration\",\n+                        \"try\",\n+                        fixed_trait_snippet,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        }\n+    }\n }\n \n impl TraitBounds {"}, {"sha": "4944381da24d59350effe1fbeab37eba24842bb7", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -31,9 +31,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     match arg.kind {\n         // Catching:\n         // transmute over constants that resolve to `null`.\n-        ExprKind::Path(ref _qpath)\n-            if matches!(constant(cx, cx.typeck_results(), arg), Some((Constant::RawPtr(0), _))) =>\n-        {\n+        ExprKind::Path(ref _qpath) if matches!(constant(cx, cx.typeck_results(), arg), Some(Constant::RawPtr(0))) => {\n             lint_expr(cx, expr);\n             true\n         },"}, {"sha": "770914e99e1689c193651a09efc0d33cad08d614", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmuting_null.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant_context, Constant};\n+use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n use rustc_hir::{Expr, ExprKind};\n@@ -16,9 +16,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     }\n \n     // Catching transmute over constants that resolve to `null`.\n-    let mut const_eval_context = constant_context(cx, cx.typeck_results());\n     if let ExprKind::Path(ref _qpath) = arg.kind &&\n-        let Some(Constant::RawPtr(0)) = const_eval_context.expr(arg)\n+        let Some(Constant::RawPtr(0)) = constant(cx, cx.typeck_results(), arg)\n     {\n         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n         return true;"}, {"sha": "28c3fc859e33227394bede57c02982234438519a", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::is_ty_alias;\n use clippy_utils::source::{snippet, snippet_with_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n@@ -138,6 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if_chain! {\n                     if let ExprKind::Path(ref qpath) = path.kind;\n                     if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n+                    if !is_ty_alias(qpath);\n                     then {\n                         let a = cx.typeck_results().expr_ty(e);\n                         let b = cx.typeck_results().expr_ty(arg);"}, {"sha": "3c2bf5abab2b5783d2685cc7000b5ce4402d541e", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 bind!(self, vec);\n                 kind!(\"CStr(ref {vec})\");\n                 chain!(self, \"let [{:?}] = **{vec}\", vec.value);\n-            }\n+            },\n             LitKind::Str(s, _) => {\n                 bind!(self, s);\n                 kind!(\"Str({s}, _)\");"}, {"sha": "f6de66bb5145b5c2d6c2692b96c55c0e6b204829", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -174,16 +174,15 @@ macro_rules! define_Conf {\n             }\n         }\n \n-        #[cfg(feature = \"internal\")]\n         pub mod metadata {\n-            use crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n+            use crate::utils::ClippyConfiguration;\n \n             macro_rules! wrap_option {\n                 () => (None);\n                 ($x:literal) => (Some($x));\n             }\n \n-            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n+            pub fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n                 vec![\n                     $(\n                         {"}, {"sha": "7a1cd3effaef2ae79f48d1cf34734098f9b437fc", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 5, "deletions": 106, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -8,7 +8,11 @@\n //! a simple mistake)\n \n use crate::renamed_lints::RENAMED_LINTS;\n-use crate::utils::internal_lints::lint_without_lint_pass::{extract_clippy_version_value, is_lint_ref_type};\n+use crate::utils::{\n+    collect_configs,\n+    internal_lints::lint_without_lint_pass::{extract_clippy_version_value, is_lint_ref_type},\n+    ClippyConfiguration,\n+};\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{match_type, walk_ptrs_ty_depth};\n@@ -520,111 +524,6 @@ impl Serialize for ApplicabilityInfo {\n     }\n }\n \n-// ==================================================================\n-// Configuration\n-// ==================================================================\n-#[derive(Debug, Clone, Default)]\n-pub struct ClippyConfiguration {\n-    name: String,\n-    config_type: &'static str,\n-    default: String,\n-    lints: Vec<String>,\n-    doc: String,\n-    #[allow(dead_code)]\n-    deprecation_reason: Option<&'static str>,\n-}\n-\n-impl ClippyConfiguration {\n-    pub fn new(\n-        name: &'static str,\n-        config_type: &'static str,\n-        default: String,\n-        doc_comment: &'static str,\n-        deprecation_reason: Option<&'static str>,\n-    ) -> Self {\n-        let (lints, doc) = parse_config_field_doc(doc_comment)\n-            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n-\n-        Self {\n-            name: to_kebab(name),\n-            lints,\n-            doc,\n-            config_type,\n-            default,\n-            deprecation_reason,\n-        }\n-    }\n-\n-    fn to_markdown_paragraph(&self) -> String {\n-        format!(\n-            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n-            self.name,\n-            self.doc\n-                .lines()\n-                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n-                .join(\"\\n\"),\n-            self.default,\n-            self.config_type,\n-            self.lints\n-                .iter()\n-                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n-                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n-                .join(\"\\n\"),\n-        )\n-    }\n-\n-    fn to_markdown_table_entry(&self) -> String {\n-        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n-    }\n-}\n-\n-fn collect_configs() -> Vec<ClippyConfiguration> {\n-    crate::utils::conf::metadata::get_configuration_metadata()\n-}\n-\n-/// This parses the field documentation of the config struct.\n-///\n-/// ```rust, ignore\n-/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n-/// ```\n-///\n-/// Would yield:\n-/// ```rust, ignore\n-/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n-/// ```\n-fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n-    const DOC_START: &str = \" Lint: \";\n-    if_chain! {\n-        if doc_comment.starts_with(DOC_START);\n-        if let Some(split_pos) = doc_comment.find('.');\n-        then {\n-            let mut doc_comment = doc_comment.to_string();\n-            let mut documentation = doc_comment.split_off(split_pos);\n-\n-            // Extract lints\n-            doc_comment.make_ascii_lowercase();\n-            let lints: Vec<String> = doc_comment\n-                .split_off(DOC_START.len())\n-                .split(\", \")\n-                .map(str::to_string)\n-                .collect();\n-\n-            // Format documentation correctly\n-            // split off leading `.` from lint name list and indent for correct formatting\n-            documentation = documentation.trim_start_matches('.').trim().replace(\"\\n \", \"\\n    \");\n-\n-            Some((lints, documentation))\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n-fn to_kebab(config_name: &str) -> String {\n-    config_name.replace('_', \"-\")\n-}\n-\n impl fmt::Display for ClippyConfiguration {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n         writeln!("}, {"sha": "d3ea7cafa80c2f57b44db3d1b7f1d095c8b4e85e", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -4,3 +4,143 @@ pub mod dump_hir;\n pub mod format_args_collector;\n #[cfg(feature = \"internal\")]\n pub mod internal_lints;\n+#[cfg(feature = \"internal\")]\n+use itertools::Itertools;\n+\n+/// Transforms a given `snake_case_string` to a tasty `kebab-case-string`\n+fn to_kebab(config_name: &str) -> String {\n+    config_name.replace('_', \"-\")\n+}\n+\n+// ==================================================================\n+// Configuration\n+// ==================================================================\n+#[derive(Debug, Clone, Default)] //~ ERROR no such field\n+pub struct ClippyConfiguration {\n+    pub name: String,\n+    #[allow(dead_code)]\n+    config_type: &'static str,\n+    pub default: String,\n+    pub lints: Vec<String>,\n+    pub doc: String,\n+    #[allow(dead_code)]\n+    deprecation_reason: Option<&'static str>,\n+}\n+\n+impl ClippyConfiguration {\n+    pub fn new(\n+        name: &'static str,\n+        config_type: &'static str,\n+        default: String,\n+        doc_comment: &'static str,\n+        deprecation_reason: Option<&'static str>,\n+    ) -> Self {\n+        let (lints, doc) = parse_config_field_doc(doc_comment)\n+            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n+\n+        Self {\n+            name: to_kebab(name),\n+            lints,\n+            doc,\n+            config_type,\n+            default,\n+            deprecation_reason,\n+        }\n+    }\n+\n+    #[cfg(feature = \"internal\")]\n+    fn to_markdown_paragraph(&self) -> String {\n+        format!(\n+            \"### {}\\n{}\\n\\n**Default Value:** `{}` (`{}`)\\n\\n{}\\n\\n\",\n+            self.name,\n+            self.doc\n+                .lines()\n+                .map(|line| line.strip_prefix(\"    \").unwrap_or(line))\n+                .join(\"\\n\"),\n+            self.default,\n+            self.config_type,\n+            self.lints\n+                .iter()\n+                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n+                .map(|name| format!(\"* [{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n+                .join(\"\\n\"),\n+        )\n+    }\n+\n+    #[cfg(feature = \"internal\")]\n+    fn to_markdown_table_entry(&self) -> String {\n+        format!(\"| [{}](#{}) | `{}` |\", self.name, self.name, self.default)\n+    }\n+}\n+\n+#[cfg(feature = \"internal\")]\n+fn collect_configs() -> Vec<ClippyConfiguration> {\n+    crate::utils::conf::metadata::get_configuration_metadata()\n+}\n+\n+/// This parses the field documentation of the config struct.\n+///\n+/// ```rust, ignore\n+/// parse_config_field_doc(cx, \"Lint: LINT_NAME_1, LINT_NAME_2. Papa penguin, papa penguin\")\n+/// ```\n+///\n+/// Would yield:\n+/// ```rust, ignore\n+/// Some([\"lint_name_1\", \"lint_name_2\"], \"Papa penguin, papa penguin\")\n+/// ```\n+fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n+    const DOC_START: &str = \" Lint: \";\n+    if_chain! {\n+        if doc_comment.starts_with(DOC_START);\n+        if let Some(split_pos) = doc_comment.find('.');\n+        then {\n+            let mut doc_comment = doc_comment.to_string();\n+            let mut documentation = doc_comment.split_off(split_pos);\n+\n+            // Extract lints\n+            doc_comment.make_ascii_lowercase();\n+            let lints: Vec<String> = doc_comment\n+                .split_off(DOC_START.len())\n+                .split(\", \")\n+                .map(str::to_string)\n+                .collect();\n+\n+            // Format documentation correctly\n+            // split off leading `.` from lint name list and indent for correct formatting\n+            documentation = documentation.trim_start_matches('.').trim().replace(\"\\n \", \"\\n    \");\n+\n+            Some((lints, documentation))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+// Shamelessly stolen from find_all (https://github.com/nectariner/find_all)\n+pub trait FindAll: Iterator + Sized {\n+    fn find_all<P>(&mut self, predicate: P) -> Option<Vec<usize>>\n+    where\n+        P: FnMut(&Self::Item) -> bool;\n+}\n+\n+impl<I> FindAll for I\n+where\n+    I: Iterator,\n+{\n+    fn find_all<P>(&mut self, mut predicate: P) -> Option<Vec<usize>>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        let mut occurences = Vec::<usize>::default();\n+        for (index, element) in self.enumerate() {\n+            if predicate(&element) {\n+                occurences.push(index);\n+            }\n+        }\n+\n+        match occurences.len() {\n+            0 => None,\n+            _ => Some(occurences),\n+        }\n+    }\n+}"}, {"sha": "7329e508106d988053af17c9549df8c110594d88", "filename": "src/tools/clippy/clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -84,7 +84,7 @@ impl UselessVec {\n         let mut applicability = Applicability::MachineApplicable;\n         let snippet = match *vec_args {\n             higher::VecArgs::Repeat(elem, len) => {\n-                if let Some((Constant::Int(len_constant), _)) = constant(cx, cx.typeck_results(), len) {\n+                if let Some(Constant::Int(len_constant)) = constant(cx, cx.typeck_results(), len) {\n                     #[expect(clippy::cast_possible_truncation)]\n                     if len_constant as u64 * size_of(cx, elem) > self.too_large_for_stack {\n                         return;"}, {"sha": "a9089fba3c539764961f47f2c826ad2c281a4284", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{\n     def::{DefKind, Res},\n     Item, ItemKind, PathSegment, UseKind,\n };\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::kw;\n@@ -117,6 +117,10 @@ impl_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n \n impl LateLintPass<'_> for WildcardImports {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if cx.sess().is_test_crate() {\n+            return;\n+        }\n+\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }"}, {"sha": "fb772644c0d64f4483cdf2da094fd959f550c4fe", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 75, "deletions": 35, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,18 +1,21 @@\n #![allow(clippy::float_cmp)]\n \n+use crate::source::{get_source_text, walk_span_to_context};\n use crate::{clip, is_direct_expn_of, sext, unsext};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind, Node, QPath, UnOp};\n+use rustc_lexer::tokenize;\n use rustc_lint::LateContext;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::Scalar;\n-use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{List, SubstsRef};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n+use rustc_span::SyntaxContext;\n use std::cmp::Ordering::{self, Equal};\n use std::hash::{Hash, Hasher};\n use std::iter;\n@@ -210,8 +213,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n-        LitKind::CStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n+        LitKind::ByteStr(ref s, _) | LitKind::CStr(ref s, _) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {\n@@ -228,27 +230,46 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     }\n }\n \n+/// The source of a constant value.\n+pub enum ConstantSource {\n+    /// The value is determined solely from the expression.\n+    Local,\n+    /// The value is dependent on a defined constant.\n+    Constant,\n+}\n+impl ConstantSource {\n+    pub fn is_local(&self) -> bool {\n+        matches!(self, Self::Local)\n+    }\n+}\n+\n+/// Attempts to evaluate the expression as a constant.\n pub fn constant<'tcx>(\n     lcx: &LateContext<'tcx>,\n     typeck_results: &ty::TypeckResults<'tcx>,\n     e: &Expr<'_>,\n-) -> Option<(Constant, bool)> {\n-    let mut cx = ConstEvalLateContext {\n-        lcx,\n-        typeck_results,\n-        param_env: lcx.param_env,\n-        needed_resolution: false,\n-        substs: ty::List::empty(),\n-    };\n-    cx.expr(e).map(|cst| (cst, cx.needed_resolution))\n+) -> Option<Constant> {\n+    ConstEvalLateContext::new(lcx, typeck_results).expr(e)\n+}\n+\n+/// Attempts to evaluate the expression as a constant.\n+pub fn constant_with_source<'tcx>(\n+    lcx: &LateContext<'tcx>,\n+    typeck_results: &ty::TypeckResults<'tcx>,\n+    e: &Expr<'_>,\n+) -> Option<(Constant, ConstantSource)> {\n+    let mut ctxt = ConstEvalLateContext::new(lcx, typeck_results);\n+    let res = ctxt.expr(e);\n+    res.map(|x| (x, ctxt.source))\n }\n \n+/// Attempts to evaluate an expression only if it's value is not dependent on other items.\n pub fn constant_simple<'tcx>(\n     lcx: &LateContext<'tcx>,\n     typeck_results: &ty::TypeckResults<'tcx>,\n     e: &Expr<'_>,\n ) -> Option<Constant> {\n-    constant(lcx, typeck_results, e).and_then(|(cst, res)| if res { None } else { Some(cst) })\n+    constant_with_source(lcx, typeck_results, e).and_then(|(c, s)| s.is_local().then_some(c))\n }\n \n pub fn constant_full_int<'tcx>(\n@@ -297,29 +318,25 @@ impl Ord for FullInt {\n     }\n }\n \n-/// Creates a `ConstEvalLateContext` from the given `LateContext` and `TypeckResults`.\n-pub fn constant_context<'a, 'tcx>(\n-    lcx: &'a LateContext<'tcx>,\n-    typeck_results: &'a ty::TypeckResults<'tcx>,\n-) -> ConstEvalLateContext<'a, 'tcx> {\n-    ConstEvalLateContext {\n-        lcx,\n-        typeck_results,\n-        param_env: lcx.param_env,\n-        needed_resolution: false,\n-        substs: ty::List::empty(),\n-    }\n-}\n-\n pub struct ConstEvalLateContext<'a, 'tcx> {\n     lcx: &'a LateContext<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    needed_resolution: bool,\n+    source: ConstantSource,\n     substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n+    fn new(lcx: &'a LateContext<'tcx>, typeck_results: &'a ty::TypeckResults<'tcx>) -> Self {\n+        Self {\n+            lcx,\n+            typeck_results,\n+            param_env: lcx.param_env,\n+            source: ConstantSource::Local,\n+            substs: List::empty(),\n+        }\n+    }\n+\n     /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr<'_>) -> Option<Constant> {\n         match e.kind {\n@@ -454,11 +471,9 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .const_eval_resolve(self.param_env, mir::UnevaluatedConst::new(def_id, substs), None)\n                     .ok()\n                     .map(|val| rustc_middle::mir::ConstantKind::from_value(val, ty))?;\n-                let result = miri_to_const(self.lcx.tcx, result);\n-                if result.is_some() {\n-                    self.needed_resolution = true;\n-                }\n-                result\n+                let result = miri_to_const(self.lcx.tcx, result)?;\n+                self.source = ConstantSource::Constant;\n+                Some(result)\n             },\n             // FIXME: cover all usable cases.\n             _ => None,\n@@ -492,8 +507,33 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n \n     /// A block can only yield a constant if it only has one constant expression.\n     fn block(&mut self, block: &Block<'_>) -> Option<Constant> {\n-        if block.stmts.is_empty() {\n-            block.expr.as_ref().and_then(|b| self.expr(b))\n+        if block.stmts.is_empty()\n+            && let Some(expr) = block.expr\n+        {\n+            // Try to detect any `cfg`ed statements or empty macro expansions.\n+            let span = block.span.data();\n+            if span.ctxt == SyntaxContext::root() {\n+                if let Some(expr_span) = walk_span_to_context(expr.span, span.ctxt)\n+                    && let expr_lo = expr_span.lo()\n+                    && expr_lo >= span.lo\n+                    && let Some(src) = get_source_text(self.lcx, span.lo..expr_lo)\n+                    && let Some(src) = src.as_str()\n+                {\n+                    use rustc_lexer::TokenKind::{Whitespace, LineComment, BlockComment, Semi, OpenBrace};\n+                    if !tokenize(src)\n+                        .map(|t| t.kind)\n+                        .filter(|t| !matches!(t, Whitespace | LineComment { .. } | BlockComment { .. } | Semi))\n+                        .eq([OpenBrace])\n+                    {\n+                        self.source = ConstantSource::Constant;\n+                    }\n+                } else {\n+                    // Unable to access the source. Assume a non-local dependency.\n+                    self.source = ConstantSource::Constant;\n+                }\n+            }\n+\n+            self.expr(expr)\n         } else {\n             None\n         }"}, {"sha": "a49246a7832727a6c4c1d5d8854e71d5318f8b19", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 159, "deletions": 47, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,6 +1,7 @@\n use crate::consts::constant_simple;\n use crate::macros::macro_backtrace;\n-use crate::source::snippet_opt;\n+use crate::source::{get_source_text, snippet_opt, walk_span_to_context, SpanRange};\n+use crate::tokenize_with_text;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n@@ -13,8 +14,9 @@ use rustc_hir::{\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::TypeckResults;\n-use rustc_span::{sym, Symbol};\n+use rustc_span::{sym, BytePos, ExpnKind, MacroKind, Symbol, SyntaxContext};\n use std::hash::{Hash, Hasher};\n+use std::ops::Range;\n \n /// Callback that is called when two expressions are not equal in the sense of `SpanlessEq`, but\n /// other conditions would make them equal.\n@@ -65,6 +67,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn inter_expr(&mut self) -> HirEqInterExpr<'_, 'a, 'tcx> {\n         HirEqInterExpr {\n             inner: self,\n+            left_ctxt: SyntaxContext::root(),\n+            right_ctxt: SyntaxContext::root(),\n             locals: HirIdMap::default(),\n         }\n     }\n@@ -92,6 +96,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n     inner: &'a mut SpanlessEq<'b, 'tcx>,\n+    left_ctxt: SyntaxContext,\n+    right_ctxt: SyntaxContext,\n \n     // When binding are declared, the binding ID in the left expression is mapped to the one on the\n     // right. For example, when comparing `{ let x = 1; x + 2 }` and `{ let y = 1; y + 2 }`,\n@@ -126,52 +132,88 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     /// Checks whether two blocks are the same.\n+    #[expect(clippy::similar_names)]\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n-        match (left.stmts, left.expr, right.stmts, right.expr) {\n-            ([], None, [], None) => {\n-                // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n-                // expanded to nothing, or the cfg attribute was used.\n-                let (Some(left), Some(right)) = (\n-                    snippet_opt(self.inner.cx, left.span),\n-                    snippet_opt(self.inner.cx, right.span),\n-                ) else { return true };\n-                let mut left_pos = 0;\n-                let left = tokenize(&left)\n-                    .map(|t| {\n-                        let end = left_pos + t.len as usize;\n-                        let s = &left[left_pos..end];\n-                        left_pos = end;\n-                        (t, s)\n-                    })\n-                    .filter(|(t, _)| {\n-                        !matches!(\n-                            t.kind,\n-                            TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n-                        )\n-                    })\n-                    .map(|(_, s)| s);\n-                let mut right_pos = 0;\n-                let right = tokenize(&right)\n-                    .map(|t| {\n-                        let end = right_pos + t.len as usize;\n-                        let s = &right[right_pos..end];\n-                        right_pos = end;\n-                        (t, s)\n-                    })\n-                    .filter(|(t, _)| {\n-                        !matches!(\n-                            t.kind,\n-                            TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n-                        )\n-                    })\n-                    .map(|(_, s)| s);\n-                left.eq(right)\n-            },\n-            _ => {\n-                over(left.stmts, right.stmts, |l, r| self.eq_stmt(l, r))\n-                    && both(&left.expr, &right.expr, |l, r| self.eq_expr(l, r))\n-            },\n+        use TokenKind::{BlockComment, LineComment, Semi, Whitespace};\n+        if left.stmts.len() != right.stmts.len() {\n+            return false;\n+        }\n+        let lspan = left.span.data();\n+        let rspan = right.span.data();\n+        if lspan.ctxt != SyntaxContext::root() && rspan.ctxt != SyntaxContext::root() {\n+            // Don't try to check in between statements inside macros.\n+            return over(left.stmts, right.stmts, |left, right| self.eq_stmt(left, right))\n+                && both(&left.expr, &right.expr, |left, right| self.eq_expr(left, right));\n+        }\n+        if lspan.ctxt != rspan.ctxt {\n+            return false;\n         }\n+\n+        let mut lstart = lspan.lo;\n+        let mut rstart = rspan.lo;\n+\n+        for (left, right) in left.stmts.iter().zip(right.stmts) {\n+            if !self.eq_stmt(left, right) {\n+                return false;\n+            }\n+\n+            // Try to detect any `cfg`ed statements or empty macro expansions.\n+            let Some(lstmt_span) = walk_span_to_context(left.span, lspan.ctxt) else {\n+                return false;\n+            };\n+            let Some(rstmt_span) = walk_span_to_context(right.span, rspan.ctxt) else {\n+                return false;\n+            };\n+            let lstmt_span = lstmt_span.data();\n+            let rstmt_span = rstmt_span.data();\n+\n+            if lstmt_span.lo < lstart && rstmt_span.lo < rstart {\n+                // Can happen when macros expand to multiple statements, or rearrange statements.\n+                // Nothing in between the statements to check in this case.\n+                continue;\n+            }\n+            if lstmt_span.lo < lstart || rstmt_span.lo < rstart {\n+                // Only one of the blocks had a weird macro.\n+                return false;\n+            }\n+            if !eq_span_tokens(self.inner.cx, lstart..lstmt_span.lo, rstart..rstmt_span.lo, |t| {\n+                !matches!(t, Whitespace | LineComment { .. } | BlockComment { .. } | Semi)\n+            }) {\n+                return false;\n+            }\n+\n+            lstart = lstmt_span.hi;\n+            rstart = rstmt_span.hi;\n+        }\n+\n+        let (lend, rend) = match (left.expr, right.expr) {\n+            (Some(left), Some(right)) => {\n+                if !self.eq_expr(left, right) {\n+                    return false;\n+                }\n+                let Some(lexpr_span) = walk_span_to_context(left.span, lspan.ctxt) else {\n+                    return false;\n+                };\n+                let Some(rexpr_span) = walk_span_to_context(right.span, rspan.ctxt) else {\n+                    return false;\n+                };\n+                (lexpr_span.lo(), rexpr_span.lo())\n+            },\n+            (None, None) => (lspan.hi, rspan.hi),\n+            (Some(_), None) | (None, Some(_)) => return false,\n+        };\n+\n+        if lend < lstart && rend < rstart {\n+            // Can happen when macros rearrange the input.\n+            // Nothing in between the statements to check in this case.\n+            return true;\n+        } else if lend < lstart || rend < rstart {\n+            // Only one of the blocks had a weird macro\n+            return false;\n+        }\n+        eq_span_tokens(self.inner.cx, lstart..lend, rstart..rend, |t| {\n+            !matches!(t, Whitespace | LineComment { .. } | BlockComment { .. } | Semi)\n+        })\n     }\n \n     fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n@@ -207,7 +249,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     #[expect(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-        if !self.inner.allow_side_effects && left.span.ctxt() != right.span.ctxt() {\n+        if !self.check_ctxt(left.span.ctxt(), right.span.ctxt()) {\n             return false;\n         }\n \n@@ -440,6 +482,45 @@ impl HirEqInterExpr<'_, '_, '_> {\n     fn eq_type_binding(&mut self, left: &TypeBinding<'_>, right: &TypeBinding<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_ty(left.ty(), right.ty())\n     }\n+\n+    fn check_ctxt(&mut self, left: SyntaxContext, right: SyntaxContext) -> bool {\n+        if self.left_ctxt == left && self.right_ctxt == right {\n+            return true;\n+        } else if self.left_ctxt == left || self.right_ctxt == right {\n+            // Only one context has changed. This can only happen if the two nodes are written differently.\n+            return false;\n+        } else if left != SyntaxContext::root() {\n+            let mut left_data = left.outer_expn_data();\n+            let mut right_data = right.outer_expn_data();\n+            loop {\n+                use TokenKind::{BlockComment, LineComment, Whitespace};\n+                if left_data.macro_def_id != right_data.macro_def_id\n+                    || (matches!(left_data.kind, ExpnKind::Macro(MacroKind::Bang, name) if name == sym::cfg)\n+                        && !eq_span_tokens(self.inner.cx, left_data.call_site, right_data.call_site, |t| {\n+                            !matches!(t, Whitespace | LineComment { .. } | BlockComment { .. })\n+                        }))\n+                {\n+                    // Either a different chain of macro calls, or different arguments to the `cfg` macro.\n+                    return false;\n+                }\n+                let left_ctxt = left_data.call_site.ctxt();\n+                let right_ctxt = right_data.call_site.ctxt();\n+                if left_ctxt == SyntaxContext::root() && right_ctxt == SyntaxContext::root() {\n+                    break;\n+                }\n+                if left_ctxt == SyntaxContext::root() || right_ctxt == SyntaxContext::root() {\n+                    // Different lengths for the expansion stack. This can only happen if nodes are written differently,\n+                    // or shouldn't be compared to start with.\n+                    return false;\n+                }\n+                left_data = left_ctxt.outer_expn_data();\n+                right_data = right_ctxt.outer_expn_data();\n+            }\n+        }\n+        self.left_ctxt = left;\n+        self.right_ctxt = right;\n+        true\n+    }\n }\n \n /// Some simple reductions like `{ return }` => `return`\n@@ -1038,3 +1119,34 @@ pub fn hash_expr(cx: &LateContext<'_>, e: &Expr<'_>) -> u64 {\n     h.hash_expr(e);\n     h.finish()\n }\n+\n+#[expect(clippy::similar_names)]\n+fn eq_span_tokens(\n+    cx: &LateContext<'_>,\n+    left: impl SpanRange,\n+    right: impl SpanRange,\n+    pred: impl Fn(TokenKind) -> bool,\n+) -> bool {\n+    fn f(cx: &LateContext<'_>, left: Range<BytePos>, right: Range<BytePos>, pred: impl Fn(TokenKind) -> bool) -> bool {\n+        if let Some(lsrc) = get_source_text(cx, left)\n+            && let Some(lsrc) = lsrc.as_str()\n+            && let Some(rsrc) = get_source_text(cx, right)\n+            && let Some(rsrc) = rsrc.as_str()\n+        {\n+            let pred = |t: &(_, _)| pred(t.0);\n+            let map = |(_, x)| x;\n+\n+            let ltok = tokenize_with_text(lsrc)\n+                .filter(pred)\n+                .map(map);\n+            let rtok = tokenize_with_text(rsrc)\n+                .filter(pred)\n+                .map(map);\n+            ltok.eq(rtok)\n+        } else {\n+            // Unable to access the source. Conservatively assume the blocks aren't equal.\n+            false\n+        }\n+    }\n+    f(cx, left.into_range(), right.into_range(), pred)\n+}"}, {"sha": "575c29a6b6f97f3b6783ab84bd5c26daf53e338a", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,6 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n+#![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n@@ -76,6 +77,7 @@ use std::sync::OnceLock;\n use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_ast::ast::{self, LitKind, RangeLimits};\n use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n@@ -282,6 +284,15 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n+/// Checks if the given `QPath` belongs to a type alias.\n+pub fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n+    match *qpath {\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => { is_ty_alias(&qpath) },\n+        _ => false,\n+    }\n+}\n+\n /// Checks if the method call given in `expr` belongs to the given trait.\n /// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {\n@@ -1488,7 +1499,7 @@ pub fn is_range_full(cx: &LateContext<'_>, expr: &Expr<'_>, container_path: Opti\n                 && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, min_val.to_valtree()))\n                 && let min_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n                 && let Some(min_const) = miri_to_const(cx.tcx, min_const_kind)\n-                && let Some((start_const, _)) = constant(cx, cx.typeck_results(), start)\n+                && let Some(start_const) = constant(cx, cx.typeck_results(), start)\n             {\n                 start_const == min_const\n             } else {\n@@ -1504,7 +1515,7 @@ pub fn is_range_full(cx: &LateContext<'_>, expr: &Expr<'_>, container_path: Opti\n                         && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, max_val.to_valtree()))\n                         && let max_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n                         && let Some(max_const) = miri_to_const(cx.tcx, max_const_kind)\n-                        && let Some((end_const, _)) = constant(cx, cx.typeck_results(), end)\n+                        && let Some(end_const) = constant(cx, cx.typeck_results(), end)\n                     {\n                         end_const == max_const\n                     } else {\n@@ -1536,7 +1547,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n         return true;\n     }\n     let enclosing_body = cx.tcx.hir().enclosing_body_owner(e.hir_id);\n-    if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n+    if let Some(Constant::Int(v)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         return value == v;\n     }\n     false\n@@ -2480,6 +2491,17 @@ pub fn walk_to_expr_usage<'tcx, T>(\n     None\n }\n \n+/// Tokenizes the input while keeping the text associated with each token.\n+pub fn tokenize_with_text(s: &str) -> impl Iterator<Item = (TokenKind, &str)> {\n+    let mut pos = 0;\n+    tokenize(s).map(move |t| {\n+        let end = pos + t.len;\n+        let range = pos as usize..end as usize;\n+        pos = end;\n+        (t.kind, s.get(range).unwrap_or_default())\n+    })\n+}\n+\n /// Checks whether a given span has any comment token\n /// This checks for all types of comment: line \"//\", block \"/**\", doc \"///\" \"//!\"\n pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n@@ -2496,23 +2518,11 @@ pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n /// Comments are returned wrapped with their relevant delimiters\n pub fn span_extract_comment(sm: &SourceMap, span: Span) -> String {\n     let snippet = sm.span_to_snippet(span).unwrap_or_default();\n-    let mut comments_buf: Vec<String> = Vec::new();\n-    let mut index: usize = 0;\n-\n-    for token in tokenize(&snippet) {\n-        let token_range = index..(index + token.len as usize);\n-        index += token.len as usize;\n-        match token.kind {\n-            TokenKind::BlockComment { .. } | TokenKind::LineComment { .. } => {\n-                if let Some(comment) = snippet.get(token_range) {\n-                    comments_buf.push(comment.to_string());\n-                }\n-            },\n-            _ => (),\n-        }\n-    }\n-\n-    comments_buf.join(\"\\n\")\n+    let res = tokenize_with_text(&snippet)\n+        .filter(|(t, _)| matches!(t, TokenKind::BlockComment { .. } | TokenKind::LineComment { .. }))\n+        .map(|(_, s)| s)\n+        .join(\"\\n\");\n+    res\n }\n \n pub fn span_find_starting_semi(sm: &SourceMap, span: Span) -> Span {"}, {"sha": "0f60290644a18daba5232f76b4502961756e57d5", "filename": "src/tools/clippy/clippy_utils/src/source.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -2,14 +2,64 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_session::Session;\n-use rustc_span::hygiene;\n use rustc_span::source_map::{original_sp, SourceMap};\n+use rustc_span::{hygiene, SourceFile};\n use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext, DUMMY_SP};\n use std::borrow::Cow;\n+use std::ops::Range;\n+\n+/// A type which can be converted to the range portion of a `Span`.\n+pub trait SpanRange {\n+    fn into_range(self) -> Range<BytePos>;\n+}\n+impl SpanRange for Span {\n+    fn into_range(self) -> Range<BytePos> {\n+        let data = self.data();\n+        data.lo..data.hi\n+    }\n+}\n+impl SpanRange for SpanData {\n+    fn into_range(self) -> Range<BytePos> {\n+        self.lo..self.hi\n+    }\n+}\n+impl SpanRange for Range<BytePos> {\n+    fn into_range(self) -> Range<BytePos> {\n+        self\n+    }\n+}\n+\n+pub struct SourceFileRange {\n+    pub sf: Lrc<SourceFile>,\n+    pub range: Range<usize>,\n+}\n+impl SourceFileRange {\n+    /// Attempts to get the text from the source file. This can fail if the source text isn't\n+    /// loaded.\n+    pub fn as_str(&self) -> Option<&str> {\n+        self.sf.src.as_ref().and_then(|x| x.get(self.range.clone()))\n+    }\n+}\n+\n+/// Gets the source file, and range in the file, of the given span. Returns `None` if the span\n+/// extends through multiple files, or is malformed.\n+pub fn get_source_text(cx: &impl LintContext, sp: impl SpanRange) -> Option<SourceFileRange> {\n+    fn f(sm: &SourceMap, sp: Range<BytePos>) -> Option<SourceFileRange> {\n+        let start = sm.lookup_byte_offset(sp.start);\n+        let end = sm.lookup_byte_offset(sp.end);\n+        if !Lrc::ptr_eq(&start.sf, &end.sf) || start.pos > end.pos {\n+            return None;\n+        }\n+        let range = start.pos.to_usize()..end.pos.to_usize();\n+        Some(SourceFileRange { sf: start.sf, range })\n+    }\n+    f(cx.sess().source_map(), sp.into_range())\n+}\n \n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n pub fn expr_block<T: LintContext>("}, {"sha": "bc7fb711ed8b8f8ee63c995f52c49dde2ecf8318", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-05-05\"\n+channel = \"nightly-2023-05-20\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "99ce7028390943396480e23b7a7439625bd76524", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -3,6 +3,7 @@\n //@normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n //@normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n //@normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n+//@normalize-stderr-test: \"running on .*\" -> \"running on <target>\"\n //@normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]"}, {"sha": "0fc385cd6935aa7a5fdedf85cab2e87f24f908d0", "filename": "src/tools/clippy/tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcustom_ice_message.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,12 +1,14 @@\n thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n-error: internal compiler error: unexpected panic\n-\n-note: the compiler unexpectedly panicked. this is a bug.\n+error: the compiler unexpectedly panicked. this is a bug.\n \n note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new\n \n+note: rustc 1.71.0-nightly (521f4dae1 2023-05-19) running on <target>\n+\n+note: compiler flags: -C prefer-dynamic -Z ui-testing\n+\n note: Clippy version: foo\n \n thread panicked while panicking. aborting."}, {"sha": "f95af1017bcbbfc01efcd64fa1466a0dd915d6ac", "filename": "src/tools/clippy/tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -458,4 +458,12 @@ pub fn issue_10583(a: u16) -> u16 {\n     10 / a\n }\n \n+pub fn issue_10767() {\n+    let n = &1.0;\n+    n + n;\n+    3.1_f32 + &1.2_f32;\n+    &3.4_f32 + 1.5_f32;\n+    &3.5_f32 + &1.3_f32;\n+}\n+\n fn main() {}"}, {"sha": "755264617920eb5385523b0e93a5bb918f3a3e6c", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,7 +1,11 @@\n //@run-rustfix\n+//@aux-build: proc_macros.rs\n \n #![allow(dead_code, unused_variables)]\n \n+extern crate proc_macros;\n+use proc_macros::with_span;\n+\n fn main() {}\n \n mod should_lint {\n@@ -47,6 +51,17 @@ mod should_not_lint2 {\n     }\n }\n \n+with_span!(\n+    span\n+\n+    fn just_returning(x: &u32) -> &u32 {\n+        x\n+    }\n+\n+    fn dont_lint_proc_macro() {\n+        let a = &mut &*just_returning(&12);\n+    }\n+);\n // this mod explains why we should not lint `& &* (&T)`\n mod false_negative {\n     fn foo() {"}, {"sha": "e319d365f7e77f283ca9e43f3f8989c75cd35138", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,7 +1,11 @@\n //@run-rustfix\n+//@aux-build: proc_macros.rs\n \n #![allow(dead_code, unused_variables)]\n \n+extern crate proc_macros;\n+use proc_macros::with_span;\n+\n fn main() {}\n \n mod should_lint {\n@@ -47,6 +51,17 @@ mod should_not_lint2 {\n     }\n }\n \n+with_span!(\n+    span\n+\n+    fn just_returning(x: &u32) -> &u32 {\n+        x\n+    }\n+\n+    fn dont_lint_proc_macro() {\n+        let a = &mut &*just_returning(&12);\n+    }\n+);\n // this mod explains why we should not lint `& &* (&T)`\n mod false_negative {\n     fn foo() {"}, {"sha": "1e47cda6796019d05627f364a9fc2a78f5b623d6", "filename": "src/tools/clippy/tests/ui/borrow_deref_ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fborrow_deref_ref.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,19 +1,19 @@\n error: deref on an immutable reference\n-  --> $DIR/borrow_deref_ref.rs:10:17\n+  --> $DIR/borrow_deref_ref.rs:14:17\n    |\n LL |         let b = &*a;\n    |                 ^^^ help: if you would like to reborrow, try removing `&*`: `a`\n    |\n    = note: `-D clippy::borrow-deref-ref` implied by `-D warnings`\n \n error: deref on an immutable reference\n-  --> $DIR/borrow_deref_ref.rs:12:22\n+  --> $DIR/borrow_deref_ref.rs:16:22\n    |\n LL |         let b = &mut &*bar(&12);\n    |                      ^^^^^^^^^^ help: if you would like to reborrow, try removing `&*`: `bar(&12)`\n \n error: deref on an immutable reference\n-  --> $DIR/borrow_deref_ref.rs:55:23\n+  --> $DIR/borrow_deref_ref.rs:70:23\n    |\n LL |         let addr_y = &&*x as *const _ as usize; // assert ok\n    |                       ^^^ help: if you would like to reborrow, try removing `&*`: `x`"}, {"sha": "840902b5323e771aa9468e6e86a36b35e46737e9", "filename": "src/tools/clippy/tests/ui/box_default.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -35,6 +35,13 @@ fn main() {\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::default());\n     issue_10381();\n+\n+    // `Box::<Option<_>>::default()` would be valid here, but not `Box::default()` or\n+    // `Box::<Option<[closure@...]>::default()`\n+    //\n+    // Would have a suggestion after https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler/rustc_middle/src/ty/diagnostics.rs#L554-L563\n+    let mut unnameable = Box::new(Option::default());\n+    let _ = unnameable.insert(|| {});\n }\n \n fn ret_ty_fn() -> Box<bool> {"}, {"sha": "3618486a4732e531f0f34d38cad76800feef531b", "filename": "src/tools/clippy/tests/ui/box_default.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -35,6 +35,13 @@ fn main() {\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::new(u8::default()));\n     issue_10381();\n+\n+    // `Box::<Option<_>>::default()` would be valid here, but not `Box::default()` or\n+    // `Box::<Option<[closure@...]>::default()`\n+    //\n+    // Would have a suggestion after https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler/rustc_middle/src/ty/diagnostics.rs#L554-L563\n+    let mut unnameable = Box::new(Option::default());\n+    let _ = unnameable.insert(|| {});\n }\n \n fn ret_ty_fn() -> Box<bool> {"}, {"sha": "13dfc5ae48a22f7e9acf1bfb9aa99d1e91406ef1", "filename": "src/tools/clippy/tests/ui/box_default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -73,25 +73,25 @@ LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:41:5\n+  --> $DIR/box_default.rs:48:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:58:28\n+  --> $DIR/box_default.rs:65:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:67:17\n+  --> $DIR/box_default.rs:74:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:79:18\n+  --> $DIR/box_default.rs:86:18\n    |\n LL |             Some(Box::new(Foo::default()))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`"}, {"sha": "c6514a559340ceeb61e54aa43b1f4c32ba8b7451", "filename": "src/tools/clippy/tests/ui/collapsible_if.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,10 @@\n //@run-rustfix\n-#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n+#![allow(\n+    clippy::assertions_on_constants,\n+    clippy::equatable_if_let,\n+    clippy::nonminimal_bool,\n+    clippy::eq_op\n+)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "2c85b68df632c8209cd1b56104d59c3ddcf4bdf4", "filename": "src/tools/clippy/tests/ui/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,10 @@\n //@run-rustfix\n-#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n+#![allow(\n+    clippy::assertions_on_constants,\n+    clippy::equatable_if_let,\n+    clippy::nonminimal_bool,\n+    clippy::eq_op\n+)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "c687bae1acc524b033abda01444080b19958b9b1", "filename": "src/tools/clippy/tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcollapsible_if.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,5 @@\n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:9:5\n+  --> $DIR/collapsible_if.rs:14:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" {\n@@ -17,7 +17,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:15:5\n+  --> $DIR/collapsible_if.rs:20:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -34,7 +34,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:21:5\n+  --> $DIR/collapsible_if.rs:26:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -51,7 +51,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:27:5\n+  --> $DIR/collapsible_if.rs:32:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -68,7 +68,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:33:5\n+  --> $DIR/collapsible_if.rs:38:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -85,7 +85,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:39:5\n+  --> $DIR/collapsible_if.rs:44:5\n    |\n LL | /     if 42 == 1337 {\n LL | |         if 'a' != 'A' {\n@@ -102,7 +102,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:95:5\n+  --> $DIR/collapsible_if.rs:100:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" { // Collapsible\n@@ -119,15 +119,15 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:154:5\n+  --> $DIR/collapsible_if.rs:159:5\n    |\n LL | /     if matches!(true, true) {\n LL | |         if matches!(true, true) {}\n LL | |     }\n    | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:159:5\n+  --> $DIR/collapsible_if.rs:164:5\n    |\n LL | /     if matches!(true, true) && truth() {\n LL | |         if matches!(true, true) {}"}, {"sha": "10788d4048164576db1953db18cc8fb1c26ab5b4", "filename": "src/tools/clippy/tests/ui/dbg_macro.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -4,6 +4,7 @@\n fn foo(n: u32) -> u32 {\n     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n }\n+fn bar(_: ()) {}\n \n fn factorial(n: u32) -> u32 {\n     if dbg!(n <= 1) {\n@@ -21,6 +22,32 @@ fn main() {\n     dbg!(1, 2, 3, 4, 5);\n }\n \n+fn issue9914() {\n+    macro_rules! foo {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! foo2 {\n+        ($x:expr) => {\n+            $x;\n+        };\n+    }\n+    macro_rules! expand_to_dbg {\n+        () => {\n+            dbg!();\n+        };\n+    }\n+\n+    dbg!();\n+    #[allow(clippy::let_unit_value)]\n+    let _ = dbg!();\n+    bar(dbg!());\n+    foo!(dbg!());\n+    foo2!(foo!(dbg!()));\n+    expand_to_dbg!();\n+}\n+\n mod issue7274 {\n     trait Thing<'b> {\n         fn foo(&self);"}, {"sha": "530e766331777dd24c074c129ec962e8289953ba", "filename": "src/tools/clippy/tests/ui/dbg_macro.stderr", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -11,7 +11,7 @@ LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n    |                      ~~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:9:8\n+  --> $DIR/dbg_macro.rs:10:8\n    |\n LL |     if dbg!(n <= 1) {\n    |        ^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     if n <= 1 {\n    |        ~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:10:9\n+  --> $DIR/dbg_macro.rs:11:9\n    |\n LL |         dbg!(1)\n    |         ^^^^^^^\n@@ -33,7 +33,7 @@ LL |         1\n    |\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:12:9\n+  --> $DIR/dbg_macro.rs:13:9\n    |\n LL |         dbg!(n * factorial(n - 1))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         n * factorial(n - 1)\n    |\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:17:5\n+  --> $DIR/dbg_macro.rs:18:5\n    |\n LL |     dbg!(42);\n    |     ^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     42;\n    |     ~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:18:5\n+  --> $DIR/dbg_macro.rs:19:5\n    |\n LL |     dbg!(dbg!(dbg!(42)));\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     dbg!(dbg!(42));\n    |     ~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:19:14\n+  --> $DIR/dbg_macro.rs:20:14\n    |\n LL |     foo(3) + dbg!(factorial(4));\n    |              ^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:20:5\n+  --> $DIR/dbg_macro.rs:21:5\n    |\n LL |     dbg!(1, 2, dbg!(3, 4));\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ LL |     (1, 2, dbg!(3, 4));\n    |     ~~~~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:21:5\n+  --> $DIR/dbg_macro.rs:22:5\n    |\n LL |     dbg!(1, 2, 3, 4, 5);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,63 @@ LL |     (1, 2, 3, 4, 5);\n    |     ~~~~~~~~~~~~~~~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:41:9\n+  --> $DIR/dbg_macro.rs:42:5\n+   |\n+LL |     dbg!();\n+   |     ^^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL -     dbg!();\n+LL +     \n+   |\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:44:13\n+   |\n+LL |     let _ = dbg!();\n+   |             ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     let _ = ();\n+   |             ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:45:9\n+   |\n+LL |     bar(dbg!());\n+   |         ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     bar(());\n+   |         ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:46:10\n+   |\n+LL |     foo!(dbg!());\n+   |          ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo!(());\n+   |          ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:47:16\n+   |\n+LL |     foo2!(foo!(dbg!()));\n+   |                ^^^^^^\n+   |\n+help: remove the invocation before committing it to a version control system\n+   |\n+LL |     foo2!(foo!(()));\n+   |                ~~\n+\n+error: the `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:68:9\n    |\n LL |         dbg!(2);\n    |         ^^^^^^^\n@@ -110,7 +166,7 @@ LL |         2;\n    |         ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:47:5\n+  --> $DIR/dbg_macro.rs:74:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -121,7 +177,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:52:5\n+  --> $DIR/dbg_macro.rs:79:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n@@ -132,7 +188,7 @@ LL |     1;\n    |     ~\n \n error: the `dbg!` macro is intended as a debugging tool\n-  --> $DIR/dbg_macro.rs:58:9\n+  --> $DIR/dbg_macro.rs:85:9\n    |\n LL |         dbg!(1);\n    |         ^^^^^^^\n@@ -142,5 +198,5 @@ help: remove the invocation before committing it to a version control system\n LL |         1;\n    |         ~\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "e1012f38bba2adafee4cad0adb715e37e02ff2da", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.fixed", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -105,6 +105,7 @@ fn main() {\n     // should lint\n     let _ = PhantomData::<usize>;\n     let _: PhantomData<i32> = PhantomData;\n+    let _: PhantomData<i32> = std::marker::PhantomData;\n     let _ = UnitStruct;\n \n     // should not lint\n@@ -116,4 +117,21 @@ fn main() {\n     let _ = EmptyStruct::default();\n     let _ = FakeDefault::default();\n     let _ = <FakeDefault as Default>::default();\n+\n+    macro_rules! in_macro {\n+        ($i:ident) => {{\n+            let _ = UnitStruct::default();\n+            let _ = $i::default();\n+        }};\n+    }\n+\n+    in_macro!(UnitStruct);\n+\n+    macro_rules! struct_from_macro {\n+        () => {\n+            UnitStruct\n+        };\n+    }\n+\n+    let _ = <struct_from_macro!()>::default();\n }"}, {"sha": "c7b4313dbf0c92fdb9d5222acba3a19f78516b37", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -105,6 +105,7 @@ fn main() {\n     // should lint\n     let _ = PhantomData::<usize>::default();\n     let _: PhantomData<i32> = PhantomData::default();\n+    let _: PhantomData<i32> = std::marker::PhantomData::default();\n     let _ = UnitStruct::default();\n \n     // should not lint\n@@ -116,4 +117,21 @@ fn main() {\n     let _ = EmptyStruct::default();\n     let _ = FakeDefault::default();\n     let _ = <FakeDefault as Default>::default();\n+\n+    macro_rules! in_macro {\n+        ($i:ident) => {{\n+            let _ = UnitStruct::default();\n+            let _ = $i::default();\n+        }};\n+    }\n+\n+    in_macro!(UnitStruct);\n+\n+    macro_rules! struct_from_macro {\n+        () => {\n+            UnitStruct\n+        };\n+    }\n+\n+    let _ = <struct_from_macro!()>::default();\n }"}, {"sha": "61a32fb10e53b0ca39568d4ffc49e8f4f20983e2", "filename": "src/tools/clippy/tests/ui/default_constructed_unit_structs.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -25,10 +25,16 @@ LL |     let _: PhantomData<i32> = PhantomData::default();\n    |                                          ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:108:23\n+  --> $DIR/default_constructed_unit_structs.rs:108:55\n+   |\n+LL |     let _: PhantomData<i32> = std::marker::PhantomData::default();\n+   |                                                       ^^^^^^^^^^^ help: remove this call to `default`\n+\n+error: use of `default` to create a unit struct\n+  --> $DIR/default_constructed_unit_structs.rs:109:23\n    |\n LL |     let _ = UnitStruct::default();\n    |                       ^^^^^^^^^^^ help: remove this call to `default`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "e843770f578543465a47b900709493647e758b6b", "filename": "src/tools/clippy/tests/ui/empty_line_after_doc_comments.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,132 @@\n+//@aux-build:proc_macro_attr.rs\n+#![warn(clippy::empty_line_after_doc_comments)]\n+#![allow(clippy::assertions_on_constants)]\n+#![feature(custom_inner_attributes)]\n+#![rustfmt::skip]\n+\n+#[macro_use]\n+extern crate proc_macro_attr;\n+\n+mod some_mod {\n+    //! This doc comment should *NOT* produce a warning\n+\n+    mod some_inner_mod {\n+        fn some_noop() {}\n+    }\n+}\n+\n+/// This should produce a warning\n+\n+fn with_doc_and_newline() { assert!(true)}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+/// some comment\n+fn with_one_newline_and_comment() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+/// some comment\n+fn with_no_newline_and_comment() { assert!(true) }\n+\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+fn with_one_newline() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+\n+fn with_two_newlines() { assert!(true) }\n+\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+enum Baz {\n+    One,\n+    Two\n+}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+struct Foo {\n+    one: isize,\n+    two: isize\n+}\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+\n+mod foo {\n+}\n+\n+/// This doc comment should produce a warning\n+\n+/** This is also a doc comment and should produce a warning\n+ */\n+\n+// This should *NOT* produce a warning\n+#[allow(non_camel_case_types)]\n+#[allow(missing_docs)]\n+#[allow(missing_docs)]\n+fn three_attributes() { assert!(true) }\n+\n+// This should *NOT* produce a warning\n+#[doc = \"\n+Returns the escaped value of the textual representation of\n+\n+\"]\n+pub fn function() -> bool {\n+    true\n+}\n+\n+// This should *NOT* produce a warning\n+#[derive(Clone, Copy)]\n+pub enum FooFighter {\n+    Bar1,\n+\n+    Bar2,\n+\n+    Bar3,\n+\n+    Bar4\n+}\n+\n+// This should *NOT* produce a warning because the empty line is inside a block comment\n+#[crate_type = \"lib\"]\n+/*\n+\n+*/\n+pub struct S;\n+\n+// This should *NOT* produce a warning\n+#[crate_type = \"lib\"]\n+/* test */\n+pub struct T;\n+\n+// This should *NOT* produce a warning\n+// See https://github.com/rust-lang/rust-clippy/issues/5567\n+#[fake_async_trait]\n+pub trait Bazz {\n+    fn foo() -> Vec<u8> {\n+        let _i = \"\";\n+\n+\n+\n+        vec![]\n+    }\n+}\n+\n+#[derive(Clone, Copy)]\n+#[dummy(string = \"first line\n+\n+second line\n+\")]\n+pub struct Args;\n+\n+fn main() {}"}, {"sha": "2ca1b51679ed132e4f1c362f5d14d9adf022dfb1", "filename": "src/tools/clippy/tests/ui/empty_line_after_doc_comments.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_line_after_doc_comments.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,36 @@\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:18:1\n+   |\n+LL | / /// This should produce a warning\n+LL | |\n+LL | | fn with_doc_and_newline() { assert!(true)}\n+   | |_\n+   |\n+   = note: `-D clippy::empty-line-after-doc-comments` implied by `-D warnings`\n+\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:68:1\n+   |\n+LL | / /// This doc comment should produce a warning\n+LL | |\n+LL | | /** This is also a doc comment and should produce a warning\n+LL | |  */\n+...  |\n+LL | | #[allow(missing_docs)]\n+LL | | fn three_attributes() { assert!(true) }\n+   | |_\n+\n+error: found an empty line after a doc comment. Perhaps you need to use `//!` to make a comment on a module, remove the empty line, or make a regular comment with `//`?\n+  --> $DIR/empty_line_after_doc_comments.rs:70:1\n+   |\n+LL | / /** This is also a doc comment and should produce a warning\n+LL | |  */\n+LL | |\n+LL | | // This should *NOT* produce a warning\n+...  |\n+LL | | #[allow(missing_docs)]\n+LL | | fn three_attributes() { assert!(true) }\n+   | |_\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a928c35e8bc9934c7c8b54885e760dee1b1ec0b7", "filename": "src/tools/clippy/tests/ui/float_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffloat_arithmetic.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n+#![warn(clippy::arithmetic_side_effects, clippy::float_arithmetic)]\n #![allow(\n     unused,\n     clippy::shadow_reuse,"}, {"sha": "ab9b6094c2c1d153adab746cee20e995ece8cf86", "filename": "src/tools/clippy/tests/ui/integer_arithmetic.rs", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6bacf5a54468f8db33b6077405652f0ab0059174/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bacf5a54468f8db33b6077405652f0ab0059174/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.rs?ref=6bacf5a54468f8db33b6077405652f0ab0059174", "patch": "@@ -1,109 +0,0 @@\n-//@aux-build:proc_macro_derive.rs\n-\n-#![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, clippy::op_ref)]\n-\n-extern crate proc_macro_derive;\n-\n-#[derive(proc_macro_derive::ShadowDerive)]\n-pub struct Nothing;\n-\n-#[rustfmt::skip]\n-fn main() {\n-    let mut i = 1i32;\n-    let mut var1 = 13i32;\n-    let mut var2 = -1i32;\n-    1 + i;\n-    i * 2;\n-    1 %\n-    i / 2; // no error, this is part of the expression in the preceding line\n-    i - 2 + 2 - i;\n-    -i;\n-    i >> 1;\n-    i << 1;\n-\n-    // no error, overflows are checked by `overflowing_literals`\n-    -1;\n-    -(-1);\n-\n-    i & 1; // no wrapping\n-    i | 1;\n-    i ^ 1;\n-\n-    i += 1;\n-    i -= 1;\n-    i *= 2;\n-    i /= 2;\n-    i /= 0;\n-    i /= -1;\n-    i /= var1;\n-    i /= var2;\n-    i %= 2;\n-    i %= 0;\n-    i %= -1;\n-    i %= var1;\n-    i %= var2;\n-    i <<= 3;\n-    i >>= 2;\n-\n-    // no errors\n-    i |= 1;\n-    i &= 1;\n-    i ^= i;\n-\n-    // No errors for the following items because they are constant expressions\n-    enum Foo {\n-        Bar = -2,\n-    }\n-    struct Baz([i32; 1 + 1]);\n-    union Qux {\n-        field: [i32; 1 + 1],\n-    }\n-    type Alias = [i32; 1 + 1];\n-\n-    const FOO: i32 = -2;\n-    static BAR: i32 = -2;\n-\n-    let _: [i32; 1 + 1] = [0, 0];\n-\n-    let _: [i32; 1 + 1] = {\n-        let a: [i32; 1 + 1] = [0, 0];\n-        a\n-    };\n-\n-    trait Trait {\n-        const ASSOC: i32 = 1 + 1;\n-    }\n-\n-    impl Trait for Foo {\n-        const ASSOC: i32 = {\n-            let _: [i32; 1 + 1];\n-            fn foo() {}\n-            1 + 1\n-        };\n-    }\n-}\n-\n-// warn on references as well! (#5328)\n-pub fn int_arith_ref() {\n-    3 + &1;\n-    &3 + 1;\n-    &3 + &1;\n-}\n-\n-pub fn foo(x: &i32) -> i32 {\n-    let a = 5;\n-    a + x\n-}\n-\n-pub fn bar(x: &i32, y: &i32) -> i32 {\n-    x + y\n-}\n-\n-pub fn baz(x: i32, y: &i32) -> i32 {\n-    x + y\n-}\n-\n-pub fn qux(x: i32, y: i32) -> i32 {\n-    (&x + &y)\n-}"}, {"sha": "add3b6b90fa26108cb534a9f93e11cc8b167582c", "filename": "src/tools/clippy/tests/ui/integer_arithmetic.stderr", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/6bacf5a54468f8db33b6077405652f0ab0059174/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bacf5a54468f8db33b6077405652f0ab0059174/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finteger_arithmetic.stderr?ref=6bacf5a54468f8db33b6077405652f0ab0059174", "patch": "@@ -1,169 +0,0 @@\n-error: this operation will panic at runtime\n-  --> $DIR/integer_arithmetic.rs:37:5\n-   |\n-LL |     i /= 0;\n-   |     ^^^^^^ attempt to divide `_` by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n-\n-error: this operation will panic at runtime\n-  --> $DIR/integer_arithmetic.rs:42:5\n-   |\n-LL |     i %= 0;\n-   |     ^^^^^^ attempt to calculate the remainder of `_` with a divisor of zero\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n-   |\n-LL |     1 + i;\n-   |     ^^^^^\n-   |\n-   = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:17:5\n-   |\n-LL |     i * 2;\n-   |     ^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:18:5\n-   |\n-LL | /     1 %\n-LL | |     i / 2; // no error, this is part of the expression in the preceding line\n-   | |_____^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n-   |\n-LL |     i - 2 + 2 - i;\n-   |     ^^^^^^^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:21:5\n-   |\n-LL |     -i;\n-   |     ^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:22:5\n-   |\n-LL |     i >> 1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:23:5\n-   |\n-LL |     i << 1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n-   |\n-LL |     i += 1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n-   |\n-LL |     i -= 1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n-   |\n-LL |     i *= 2;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:38:11\n-   |\n-LL |     i /= -1;\n-   |           ^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:39:5\n-   |\n-LL |     i /= var1;\n-   |     ^^^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:40:5\n-   |\n-LL |     i /= var2;\n-   |     ^^^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:43:11\n-   |\n-LL |     i %= -1;\n-   |           ^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:44:5\n-   |\n-LL |     i %= var1;\n-   |     ^^^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:45:5\n-   |\n-LL |     i %= var2;\n-   |     ^^^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:46:5\n-   |\n-LL |     i <<= 3;\n-   |     ^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:47:5\n-   |\n-LL |     i >>= 2;\n-   |     ^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:89:5\n-   |\n-LL |     3 + &1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:90:5\n-   |\n-LL |     &3 + 1;\n-   |     ^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:91:5\n-   |\n-LL |     &3 + &1;\n-   |     ^^^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:96:5\n-   |\n-LL |     a + x\n-   |     ^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:100:5\n-   |\n-LL |     x + y\n-   |     ^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:104:5\n-   |\n-LL |     x + y\n-   |     ^^^^^\n-\n-error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:108:5\n-   |\n-LL |     (&x + &y)\n-   |     ^^^^^^^^^\n-\n-error: aborting due to 27 previous errors\n-"}, {"sha": "2c313ff35d59dd114213d614f7e7a611e868bc91", "filename": "src/tools/clippy/tests/ui/let_underscore_untyped.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,6 +1,12 @@\n+//@aux-build: proc_macros.rs\n+\n #![allow(unused)]\n #![warn(clippy::let_underscore_untyped)]\n \n+extern crate proc_macros;\n+use proc_macros::with_span;\n+\n+use clippy_utils::is_from_proc_macro;\n use std::future::Future;\n use std::{boxed::Box, fmt::Display};\n \n@@ -32,6 +38,14 @@ fn g() -> impl Fn() {\n     || {}\n }\n \n+with_span!(\n+    span\n+\n+    fn dont_lint_proc_macro() {\n+        let _ = a();\n+    }\n+);\n+\n fn main() {\n     let _ = a();\n     let _ = b(1);\n@@ -40,6 +54,7 @@ fn main() {\n     let _ = e();\n     let _ = f();\n     let _ = g();\n+    let closure = || {};\n \n     _ = a();\n     _ = b(1);"}, {"sha": "bbf2508af10b7439bf6e8cd7cda3b5bc73511125", "filename": "src/tools/clippy/tests/ui/let_underscore_untyped.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_underscore_untyped.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,60 +1,60 @@\n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:36:5\n+  --> $DIR/let_underscore_untyped.rs:50:5\n    |\n LL |     let _ = a();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:36:10\n+  --> $DIR/let_underscore_untyped.rs:50:10\n    |\n LL |     let _ = a();\n    |          ^\n    = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:37:5\n+  --> $DIR/let_underscore_untyped.rs:51:5\n    |\n LL |     let _ = b(1);\n    |     ^^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:37:10\n+  --> $DIR/let_underscore_untyped.rs:51:10\n    |\n LL |     let _ = b(1);\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:39:5\n+  --> $DIR/let_underscore_untyped.rs:53:5\n    |\n LL |     let _ = d(&1);\n    |     ^^^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:39:10\n+  --> $DIR/let_underscore_untyped.rs:53:10\n    |\n LL |     let _ = d(&1);\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:40:5\n+  --> $DIR/let_underscore_untyped.rs:54:5\n    |\n LL |     let _ = e();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:40:10\n+  --> $DIR/let_underscore_untyped.rs:54:10\n    |\n LL |     let _ = e();\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:41:5\n+  --> $DIR/let_underscore_untyped.rs:55:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:41:10\n+  --> $DIR/let_underscore_untyped.rs:55:10\n    |\n LL |     let _ = f();\n    |          ^"}, {"sha": "3996d775f55f47e263b31a21fc61907a419643f0", "filename": "src/tools/clippy/tests/ui/manual_let_else.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -8,6 +8,12 @@\n )]\n #![warn(clippy::manual_let_else)]\n \n+enum Variant {\n+    A(usize, usize),\n+    B(usize),\n+    C,\n+}\n+\n fn g() -> Option<()> {\n     None\n }\n@@ -135,6 +141,15 @@ fn fire() {\n         };\n     }\n     create_binding_if_some!(w, g());\n+\n+    fn e() -> Variant {\n+        Variant::A(0, 0)\n+    }\n+\n+    // Should not be renamed\n+    let v = if let Variant::A(a, 0) = e() { a } else { return };\n+    // Should be renamed\n+    let v = if let Variant::B(b) = e() { b } else { return };\n }\n \n fn not_fire() {"}, {"sha": "f6f56f7b00e5127facad2405fdd0ae479d21228a", "filename": "src/tools/clippy/tests/ui/manual_let_else.stderr", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,13 +1,13 @@\n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:18:5\n+  --> $DIR/manual_let_else.rs:24:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:19:5\n+  --> $DIR/manual_let_else.rs:25:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -18,13 +18,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         return;\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:25:5\n+  --> $DIR/manual_let_else.rs:31:5\n    |\n LL | /     let v = if let Some(v) = g() {\n LL | |         // Blocks around the identity should have no impact\n@@ -45,25 +45,25 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:38:9\n+  --> $DIR/manual_let_else.rs:44:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { continue };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { continue };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { continue };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:39:9\n+  --> $DIR/manual_let_else.rs:45:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { break };\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { break };`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { break };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:43:5\n+  --> $DIR/manual_let_else.rs:49:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { panic!() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { panic!() };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { panic!() };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:46:5\n+  --> $DIR/manual_let_else.rs:52:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -74,13 +74,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         std::process::abort()\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:53:5\n+  --> $DIR/manual_let_else.rs:59:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -91,13 +91,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true { return } else { panic!() }\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:60:5\n+  --> $DIR/manual_let_else.rs:66:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -109,14 +109,14 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         if true {}\n LL +         panic!();\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:70:5\n+  --> $DIR/manual_let_else.rs:76:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -129,7 +129,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match () {\n LL +             _ if panic!() => {},\n LL +             _ => panic!(),\n@@ -138,13 +138,13 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:80:5\n+  --> $DIR/manual_let_else.rs:86:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { if panic!() {} };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { if panic!() {} };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { if panic!() {} };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:83:5\n+  --> $DIR/manual_let_else.rs:89:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -157,15 +157,15 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match panic!() {\n LL +             _ => {},\n LL +         }\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:92:5\n+  --> $DIR/manual_let_else.rs:98:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -178,15 +178,15 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else { if true {\n+LL ~     let Some(v) = g() else { if true {\n LL +         return;\n LL +     } else {\n LL +         panic!(\"diverge\");\n LL +     } };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:101:5\n+  --> $DIR/manual_let_else.rs:107:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -199,7 +199,7 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g() else {\n+LL ~     let Some(v) = g() else {\n LL +         match (g(), g()) {\n LL +             (Some(_), None) => return,\n LL +             (None, Some(_)) => {\n@@ -215,7 +215,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:118:5\n+  --> $DIR/manual_let_else.rs:124:5\n    |\n LL | /     let (v, w) = if let Some(v_some) = g().map(|v| (v, 42)) {\n LL | |         v_some\n@@ -226,13 +226,13 @@ LL | |     };\n    |\n help: consider writing\n    |\n-LL ~     let Some(v_some) = g().map(|v| (v, 42)) else {\n+LL ~     let Some((v, w)) = g().map(|v| (v, 42)) else {\n LL +         return;\n LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:125:5\n+  --> $DIR/manual_let_else.rs:131:5\n    |\n LL | /     let v = if let (Some(v_some), w_some) = (g(), 0) {\n LL | |         (w_some, v_some)\n@@ -249,24 +249,36 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:134:13\n+  --> $DIR/manual_let_else.rs:140:13\n    |\n LL |             let $n = if let Some(v) = $e { v } else { return };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some($n) = g() else { return };`\n ...\n LL |     create_binding_if_some!(w, g());\n    |     ------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:247:5\n+  --> $DIR/manual_let_else.rs:150:5\n+   |\n+LL |     let v = if let Variant::A(a, 0) = e() { a } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::A(a, 0) = e() else { return };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:152:5\n+   |\n+LL |     let v = if let Variant::B(b) = e() { b } else { return };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Variant::B(v) = e() else { return };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:262:5\n    |\n LL | /     let _ = match ff {\n LL | |         Some(value) => value,\n LL | |         _ => macro_call!(),\n LL | |     };\n-   | |______^ help: consider writing: `let Some(value) = ff else { macro_call!() };`\n+   | |______^ help: consider writing: `let Some(_) = ff else { macro_call!() };`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "bacc14dc967203f321818083baf01124f93439c4", "filename": "src/tools/clippy/tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_let_else_match.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -5,7 +5,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         None => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n@@ -16,7 +16,7 @@ LL | /     let v = match g() {\n LL | |         Some(v_some) => v_some,\n LL | |         _ => return,\n LL | |     };\n-   | |______^ help: consider writing: `let Some(v_some) = g() else { return };`\n+   | |______^ help: consider writing: `let Some(v) = g() else { return };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:44:9"}, {"sha": "e8a47063ad61343a8ed691eedee1ba3e6b8e9b2a", "filename": "src/tools/clippy/tests/ui/manual_next_back.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,36 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_next_back)]\n+\n+struct FakeIter(std::ops::Range<i32>);\n+\n+impl FakeIter {\n+    fn rev(self) -> Self {\n+        self\n+    }\n+\n+    fn next(&self) {}\n+}\n+\n+impl DoubleEndedIterator for FakeIter {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.0.next_back()\n+    }\n+}\n+\n+impl Iterator for FakeIter {\n+    type Item = i32;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+}\n+\n+fn main() {\n+    // should not lint\n+    FakeIter(0..10).rev().next();\n+\n+    // should lint\n+    let _ = (0..10).next_back().unwrap();\n+    let _ = \"something\".bytes().next_back();\n+}"}, {"sha": "9ec89242241c82ae5d9b5b67aa8408340e6cfcac", "filename": "src/tools/clippy/tests/ui/manual_next_back.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,36 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::manual_next_back)]\n+\n+struct FakeIter(std::ops::Range<i32>);\n+\n+impl FakeIter {\n+    fn rev(self) -> Self {\n+        self\n+    }\n+\n+    fn next(&self) {}\n+}\n+\n+impl DoubleEndedIterator for FakeIter {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.0.next_back()\n+    }\n+}\n+\n+impl Iterator for FakeIter {\n+    type Item = i32;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+}\n+\n+fn main() {\n+    // should not lint\n+    FakeIter(0..10).rev().next();\n+\n+    // should lint\n+    let _ = (0..10).rev().next().unwrap();\n+    let _ = \"something\".bytes().rev().next();\n+}"}, {"sha": "94ccaa9e4cc3fcbcb3e7728c3a208024251b8f16", "filename": "src/tools/clippy/tests/ui/manual_next_back.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_next_back.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,16 @@\n+error: manual backwards iteration\n+  --> $DIR/manual_next_back.rs:34:20\n+   |\n+LL |     let _ = (0..10).rev().next().unwrap();\n+   |                    ^^^^^^^^^^^^^ help: use: `.next_back()`\n+   |\n+   = note: `-D clippy::manual-next-back` implied by `-D warnings`\n+\n+error: manual backwards iteration\n+  --> $DIR/manual_next_back.rs:35:32\n+   |\n+LL |     let _ = \"something\".bytes().rev().next();\n+   |                                ^^^^^^^^^^^^^ help: use: `.next_back()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "60f590661735cc0d20a117bb73f1be3d614db7c1", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let _y = matches!(x, Some(0));\n \n     // Lint\n-    let _w = matches!(x, Some(_));\n+    let _w = x.is_some();\n \n     // Turn into is_none\n     let _z = x.is_none();"}, {"sha": "b72fe10b748042a0965eec5a086051fea7219090", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -10,15 +10,17 @@ LL | |     };\n    |\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n-error: match expression looks like `matches!` macro\n+error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/match_expr_like_matches_macro.rs:21:14\n    |\n LL |       let _w = match x {\n    |  ______________^\n LL | |         Some(_) => true,\n LL | |         _ => false,\n LL | |     };\n-   | |_____^ help: try this: `matches!(x, Some(_))`\n+   | |_____^ help: try this: `x.is_some()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_none()`\n   --> $DIR/match_expr_like_matches_macro.rs:27:14\n@@ -29,8 +31,6 @@ LL | |         Some(_) => false,\n LL | |         None => true,\n LL | |     };\n    | |_____^ help: try this: `x.is_none()`\n-   |\n-   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n   --> $DIR/match_expr_like_matches_macro.rs:33:15"}, {"sha": "3914b45464c719f3b3b48627f347a3292a75f489", "filename": "src/tools/clippy/tests/ui/match_same_arms.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -53,4 +53,84 @@ mod issue4244 {\n     }\n }\n \n-fn main() {}\n+macro_rules! m {\n+    (foo) => {};\n+    (bar) => {};\n+}\n+macro_rules! foo {\n+    () => {\n+        1\n+    };\n+}\n+macro_rules! bar {\n+    () => {\n+        1\n+    };\n+}\n+\n+fn main() {\n+    let x = 0;\n+    let _ = match 0 {\n+        0 => {\n+            m!(foo);\n+            x\n+        },\n+        1 => {\n+            m!(bar);\n+            x\n+        },\n+        _ => 1,\n+    };\n+\n+    let _ = match 0 {\n+        0 => {\n+            m!(foo);\n+            0\n+        },\n+        1 => {\n+            m!(bar);\n+            0\n+        },\n+        _ => 1,\n+    };\n+\n+    let _ = match 0 {\n+        0 => {\n+            let mut x = 0;\n+            #[cfg(not_enabled)]\n+            {\n+                x = 5;\n+            }\n+            #[cfg(not(not_enabled))]\n+            {\n+                x = 6;\n+            }\n+            x\n+        },\n+        1 => {\n+            let mut x = 0;\n+            #[cfg(also_not_enabled)]\n+            {\n+                x = 5;\n+            }\n+            #[cfg(not(also_not_enabled))]\n+            {\n+                x = 6;\n+            }\n+            x\n+        },\n+        _ => 0,\n+    };\n+\n+    let _ = match 0 {\n+        0 => foo!(),\n+        1 => bar!(),\n+        _ => 1,\n+    };\n+\n+    let _ = match 0 {\n+        0 => cfg!(not_enabled),\n+        1 => cfg!(also_not_enabled),\n+        _ => false,\n+    };\n+}"}, {"sha": "60b2975be04543f9649fde236d3a9c30cd257491", "filename": "src/tools/clippy/tests/ui/match_same_arms2.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -239,4 +239,10 @@ fn main() {\n         3 => core::convert::identity::<u32>(todo!()),\n         _ => 5,\n     };\n+\n+    let _ = match 0 {\n+        0 => cfg!(not_enable),\n+        1 => cfg!(not_enable),\n+        _ => false,\n+    };\n }"}, {"sha": "8fb461bd28667e65f60981eccb6b49ef407a3e87", "filename": "src/tools/clippy/tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -192,5 +192,20 @@ note: other arm here\n LL |         Some(Bar { x: 0, y: 5, .. }) => 1,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:245:9\n+   |\n+LL |         1 => cfg!(not_enable),\n+   |         -^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `1 | 0`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:244:9\n+   |\n+LL |         0 => cfg!(not_enable),\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "bf1911881c8a9434e5c6086edf60ea338da4547d", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -63,6 +63,13 @@ fn main() {\n     needless_bool2(x);\n     needless_bool3(x);\n     needless_bool_condition();\n+\n+    if a == b {\n+        true\n+    } else {\n+        // Do not lint as this comment might be important\n+        false\n+    };\n }\n \n fn bool_ret3(x: bool) -> bool {"}, {"sha": "a6c465d4fbd11c16b41cde966c0757a0a104d402", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -99,6 +99,13 @@ fn main() {\n     needless_bool2(x);\n     needless_bool3(x);\n     needless_bool_condition();\n+\n+    if a == b {\n+        true\n+    } else {\n+        // Do not lint as this comment might be important\n+        false\n+    };\n }\n \n fn bool_ret3(x: bool) -> bool {"}, {"sha": "fa906374fb3ba1d503a4cddf469e967e672e5c6b", "filename": "src/tools/clippy/tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -91,7 +91,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `a < b`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:105:5\n+  --> $DIR/fixable.rs:112:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -101,7 +101,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:113:5\n+  --> $DIR/fixable.rs:120:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -111,7 +111,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:121:5\n+  --> $DIR/fixable.rs:128:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:129:5\n+  --> $DIR/fixable.rs:136:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -131,33 +131,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:137:8\n+  --> $DIR/fixable.rs:144:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:141:8\n+  --> $DIR/fixable.rs:148:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:151:8\n+  --> $DIR/fixable.rs:158:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:152:8\n+  --> $DIR/fixable.rs:159:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:161:12\n+  --> $DIR/fixable.rs:168:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^\n@@ -168,7 +168,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `{ !returns_bool() }`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:174:5\n+  --> $DIR/fixable.rs:181:5\n    |\n LL | /     if unsafe { no(4) } & 1 != 0 {\n LL | |         true\n@@ -178,13 +178,13 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:179:30\n+  --> $DIR/fixable.rs:186:30\n    |\n LL |     let _brackets_unneeded = if unsafe { no(4) } & 1 != 0 { true } else { false };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `unsafe { no(4) } & 1 != 0`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:182:9\n+  --> $DIR/fixable.rs:189:9\n    |\n LL |         if unsafe { no(4) } & 1 != 0 { true } else { false }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `(unsafe { no(4) } & 1 != 0)`"}, {"sha": "b7e80af501547e6f896d736d4f921a63557174f7", "filename": "src/tools/clippy/tests/ui/needless_collect.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -62,4 +62,16 @@ fn main() {\n \n     let _ = sample.iter().next().is_none();\n     let _ = sample.iter().any(|x| x == &0);\n+\n+    #[allow(clippy::double_parens)]\n+    {\n+        Vec::<u8>::new().extend((0..10));\n+        foo((0..10));\n+        bar((0..10).collect::<Vec<_>>(), (0..10));\n+        baz((0..10), (), ('a'..='z'))\n+    }\n }\n+\n+fn foo(_: impl IntoIterator<Item = usize>) {}\n+fn bar<I: IntoIterator<Item = usize>>(_: Vec<usize>, _: I) {}\n+fn baz<I: IntoIterator<Item = usize>>(_: I, _: (), _: impl IntoIterator<Item = char>) {}"}, {"sha": "680b6fa5b55f53b0684fbceffa3a9b38fb18b6f1", "filename": "src/tools/clippy/tests/ui/needless_collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -62,4 +62,16 @@ fn main() {\n \n     let _ = sample.iter().collect::<VecWrapper<_>>().is_empty();\n     let _ = sample.iter().collect::<VecWrapper<_>>().contains(&&0);\n+\n+    #[allow(clippy::double_parens)]\n+    {\n+        Vec::<u8>::new().extend((0..10).collect::<Vec<_>>());\n+        foo((0..10).collect::<Vec<_>>());\n+        bar((0..10).collect::<Vec<_>>(), (0..10).collect::<Vec<_>>());\n+        baz((0..10), (), ('a'..='z').collect::<Vec<_>>())\n+    }\n }\n+\n+fn foo(_: impl IntoIterator<Item = usize>) {}\n+fn bar<I: IntoIterator<Item = usize>>(_: Vec<usize>, _: I) {}\n+fn baz<I: IntoIterator<Item = usize>>(_: I, _: (), _: impl IntoIterator<Item = char>) {}"}, {"sha": "ad22a7b057e0f9898c863efb63c6b1837f5f2d51", "filename": "src/tools/clippy/tests/ui/needless_collect.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_collect.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -90,5 +90,29 @@ error: avoid using `collect()` when not needed\n LL |     let _ = sample.iter().collect::<VecWrapper<_>>().contains(&&0);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `any(|x| x == &0)`\n \n-error: aborting due to 15 previous errors\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:68:40\n+   |\n+LL |         Vec::<u8>::new().extend((0..10).collect::<Vec<_>>());\n+   |                                        ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:69:20\n+   |\n+LL |         foo((0..10).collect::<Vec<_>>());\n+   |                    ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:70:49\n+   |\n+LL |         bar((0..10).collect::<Vec<_>>(), (0..10).collect::<Vec<_>>());\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: avoid using `collect()` when not needed\n+  --> $DIR/needless_collect.rs:71:37\n+   |\n+LL |         baz((0..10), (), ('a'..='z').collect::<Vec<_>>())\n+   |                                     ^^^^^^^^^^^^^^^^^^^^ help: remove this call\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "d49ae5d8636f50ce43dbd34141bcee5dca2d5edf", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -231,8 +231,9 @@ fn needless_return_macro() -> String {\n }\n \n fn issue_9361() -> i32 {\n-    #[allow(clippy::integer_arithmetic)]\n-    return 1 + 2;\n+    let n = 1;\n+    #[allow(clippy::arithmetic_side_effects)]\n+    return n + n;\n }\n \n fn issue8336(x: i32) -> bool {"}, {"sha": "367638261746ccdc0a464d8c9524283338a40420", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -239,8 +239,9 @@ fn needless_return_macro() -> String {\n }\n \n fn issue_9361() -> i32 {\n-    #[allow(clippy::integer_arithmetic)]\n-    return 1 + 2;\n+    let n = 1;\n+    #[allow(clippy::arithmetic_side_effects)]\n+    return n + n;\n }\n \n fn issue8336(x: i32) -> bool {"}, {"sha": "05f6038cd255342ebf30b8edd3ce6669d4aa4bba", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -328,63 +328,63 @@ LL |     return format!(\"Hello {}\", \"world!\");\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:249:9\n+  --> $DIR/needless_return.rs:250:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:251:9\n+  --> $DIR/needless_return.rs:252:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:258:13\n+  --> $DIR/needless_return.rs:259:13\n    |\n LL |             return 10;\n    |             ^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:261:13\n+  --> $DIR/needless_return.rs:262:13\n    |\n LL |             return 100;\n    |             ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:269:9\n+  --> $DIR/needless_return.rs:270:9\n    |\n LL |         return 0;\n    |         ^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:276:13\n+  --> $DIR/needless_return.rs:277:13\n    |\n LL |             return *(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:278:13\n+  --> $DIR/needless_return.rs:279:13\n    |\n LL |             return !*(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:285:20\n+  --> $DIR/needless_return.rs:286:20\n    |\n LL |           let _ = 42;\n    |  ____________________^\n@@ -395,39 +395,39 @@ LL | |         return;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:292:20\n+  --> $DIR/needless_return.rs:293:20\n    |\n LL |         let _ = 42; return;\n    |                    ^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:304:9\n+  --> $DIR/needless_return.rs:305:9\n    |\n LL |         return Ok(format!(\"ok!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:306:9\n+  --> $DIR/needless_return.rs:307:9\n    |\n LL |         return Err(format!(\"err!\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:312:9\n+  --> $DIR/needless_return.rs:313:9\n    |\n LL |         return if true { 1 } else { 2 };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:316:9\n+  --> $DIR/needless_return.rs:317:9\n    |\n LL |         return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "430caafb33e12fb0814cc30b927864f2218da6f9", "filename": "src/tools/clippy/tests/ui/non_minimal_cfg.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,17 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+\n+#[cfg(windows)]\n+fn hermit() {}\n+\n+#[cfg(windows)]\n+fn wasi() {}\n+\n+#[cfg(all(unix, not(windows)))]\n+fn the_end() {}\n+\n+#[cfg(any())]\n+fn any() {}\n+\n+fn main() {}"}, {"sha": "a38ce1c21d6e3528b32dac35afcfe64e0743e75e", "filename": "src/tools/clippy/tests/ui/non_minimal_cfg.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,17 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+\n+#[cfg(all(windows))]\n+fn hermit() {}\n+\n+#[cfg(any(windows))]\n+fn wasi() {}\n+\n+#[cfg(all(any(unix), all(not(windows))))]\n+fn the_end() {}\n+\n+#[cfg(any())]\n+fn any() {}\n+\n+fn main() {}"}, {"sha": "cdfd728aa6115122aca56e4c625d04844ce1b66a", "filename": "src/tools/clippy/tests/ui/non_minimal_cfg.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,28 @@\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:5:7\n+   |\n+LL | #[cfg(all(windows))]\n+   |       ^^^^^^^^^^^^ help: try: `windows`\n+   |\n+   = note: `-D clippy::non-minimal-cfg` implied by `-D warnings`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:8:7\n+   |\n+LL | #[cfg(any(windows))]\n+   |       ^^^^^^^^^^^^ help: try: `windows`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:11:11\n+   |\n+LL | #[cfg(all(any(unix), all(not(windows))))]\n+   |           ^^^^^^^^^ help: try: `unix`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:11:22\n+   |\n+LL | #[cfg(all(any(unix), all(not(windows))))]\n+   |                      ^^^^^^^^^^^^^^^^^ help: try: `not(windows)`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a4c6abce3876449de135ec42e71aaf966e05b944", "filename": "src/tools/clippy/tests/ui/non_minimal_cfg2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,6 @@\n+#![allow(unused)]\n+\n+#[cfg(all())]\n+fn all() {}\n+\n+fn main() {}"}, {"sha": "2a9a36fbcef315fed291e970acaac0641ec27046", "filename": "src/tools/clippy/tests/ui/non_minimal_cfg2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnon_minimal_cfg2.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,10 @@\n+error: unneeded sub `cfg` when there is no condition\n+  --> $DIR/non_minimal_cfg2.rs:3:7\n+   |\n+LL | #[cfg(all())]\n+   |       ^^^^^\n+   |\n+   = note: `-D clippy::non-minimal-cfg` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b8ce5477cc6d2461c00ea462bd791d971a9d7e2", "filename": "src/tools/clippy/tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -92,6 +92,15 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+// #10335\n+fn test_result_impure_else(variable: Result<u32, &str>) {\n+    variable.map_or_else(|_| {\n+        println!(\"Err\");\n+    }, |binding| {\n+        println!(\"Ok {binding}\");\n+    })\n+}\n+\n enum DummyEnum {\n     One(u8),\n     Two,\n@@ -113,6 +122,7 @@ fn main() {\n     unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n+    test_result_impure_else(Ok(42));\n     let _ = negative_tests(None);\n     let _ = impure_else(None);\n "}, {"sha": "cfbec8cb27da140c7643699c7fa7411a6606a6f3", "filename": "src/tools/clippy/tests/ui/option_if_let_else.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -115,6 +115,15 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+// #10335\n+fn test_result_impure_else(variable: Result<u32, &str>) {\n+    if let Ok(binding) = variable {\n+        println!(\"Ok {binding}\");\n+    } else {\n+        println!(\"Err\");\n+    }\n+}\n+\n enum DummyEnum {\n     One(u8),\n     Two,\n@@ -136,6 +145,7 @@ fn main() {\n     unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n+    test_result_impure_else(Ok(42));\n     let _ = negative_tests(None);\n     let _ = impure_else(None);\n "}, {"sha": "91d52fc79b810185998eb3da515dca0dcd590214", "filename": "src/tools/clippy/tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Foption_if_let_else.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -152,14 +152,33 @@ LL | |                 vec![s.to_string()]\n LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n+error: use Option::map_or_else instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:120:5\n+   |\n+LL | /     if let Ok(binding) = variable {\n+LL | |         println!(\"Ok {binding}\");\n+LL | |     } else {\n+LL | |         println!(\"Err\");\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     variable.map_or_else(|_| {\n+LL +         println!(\"Err\");\n+LL +     }, |binding| {\n+LL +         println!(\"Ok {binding}\");\n+LL +     })\n+   |\n+\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:133:13\n+  --> $DIR/option_if_let_else.rs:142:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:142:13\n+  --> $DIR/option_if_let_else.rs:152:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +200,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:170:13\n+  --> $DIR/option_if_let_else.rs:180:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:174:13\n+  --> $DIR/option_if_let_else.rs:184:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -207,7 +226,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:213:13\n+  --> $DIR/option_if_let_else.rs:223:13\n    |\n LL |       let _ = match s {\n    |  _____________^\n@@ -217,7 +236,7 @@ LL | |     };\n    | |_____^ help: try: `s.map_or(1, |string| string.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:217:13\n+  --> $DIR/option_if_let_else.rs:227:13\n    |\n LL |       let _ = match Some(10) {\n    |  _____________^\n@@ -227,7 +246,7 @@ LL | |     };\n    | |_____^ help: try: `Some(10).map_or(5, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:223:13\n+  --> $DIR/option_if_let_else.rs:233:13\n    |\n LL |       let _ = match res {\n    |  _____________^\n@@ -237,7 +256,7 @@ LL | |     };\n    | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:227:13\n+  --> $DIR/option_if_let_else.rs:237:13\n    |\n LL |       let _ = match res {\n    |  _____________^\n@@ -247,10 +266,10 @@ LL | |     };\n    | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:231:13\n+  --> $DIR/option_if_let_else.rs:241:13\n    |\n LL |     let _ = if let Ok(a) = res { a + 1 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `res.map_or(5, |a| a + 1)`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "2df87a26d6d150ebda1e88b9630384527a639c05", "filename": "src/tools/clippy/tests/ui/partialeq_to_none.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::partialeq_to_none)]\n+#![allow(clippy::eq_op)]\n \n struct Foobar;\n "}, {"sha": "df6233b9afd6387ada1f2941cf3450f554a1aee8", "filename": "src/tools/clippy/tests/ui/partialeq_to_none.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::partialeq_to_none)]\n+#![allow(clippy::eq_op)]\n \n struct Foobar;\n "}, {"sha": "4f84862a22b8f092f8b87eeeaff9fa57beed3191", "filename": "src/tools/clippy/tests/ui/partialeq_to_none.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fpartialeq_to_none.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,61 +1,61 @@\n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:14:8\n+  --> $DIR/partialeq_to_none.rs:15:8\n    |\n LL |     if f != None { \"yay\" } else { \"nay\" }\n    |        ^^^^^^^^^ help: use `Option::is_some()` instead: `f.is_some()`\n    |\n    = note: `-D clippy::partialeq-to-none` implied by `-D warnings`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:44:13\n+  --> $DIR/partialeq_to_none.rs:45:13\n    |\n LL |     let _ = x == None;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:45:13\n+  --> $DIR/partialeq_to_none.rs:46:13\n    |\n LL |     let _ = x != None;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:46:13\n+  --> $DIR/partialeq_to_none.rs:47:13\n    |\n LL |     let _ = None == x;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:47:13\n+  --> $DIR/partialeq_to_none.rs:48:13\n    |\n LL |     let _ = None != x;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:49:8\n+  --> $DIR/partialeq_to_none.rs:50:8\n    |\n LL |     if foobar() == None {}\n    |        ^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `foobar().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:51:8\n+  --> $DIR/partialeq_to_none.rs:52:8\n    |\n LL |     if bar().ok() != None {}\n    |        ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `bar().ok().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:53:13\n+  --> $DIR/partialeq_to_none.rs:54:13\n    |\n LL |     let _ = Some(1 + 2) != None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `Some(1 + 2).is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:55:13\n+  --> $DIR/partialeq_to_none.rs:56:13\n    |\n LL |     let _ = { Some(0) } == None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `{ Some(0) }.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:57:13\n+  --> $DIR/partialeq_to_none.rs:58:13\n    |\n LL |       let _ = {\n    |  _____________^\n@@ -77,31 +77,31 @@ LL ~     }.is_some();\n    |\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:67:13\n+  --> $DIR/partialeq_to_none.rs:68:13\n    |\n LL |     let _ = optref() == &&None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:68:13\n+  --> $DIR/partialeq_to_none.rs:69:13\n    |\n LL |     let _ = &&None != optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:69:13\n+  --> $DIR/partialeq_to_none.rs:70:13\n    |\n LL |     let _ = **optref() == None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:70:13\n+  --> $DIR/partialeq_to_none.rs:71:13\n    |\n LL |     let _ = &None != *optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:73:13\n+  --> $DIR/partialeq_to_none.rs:74:13\n    |\n LL |     let _ = None != *x;\n    |             ^^^^^^^^^^ help: use `Option::is_some()` instead: `(*x).is_some()`"}, {"sha": "accdf1da9ddc9ec50888387e4ab529801b0f3176", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -46,6 +46,7 @@ fn main() {\n     let _ = if opt.is_some() { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -88,3 +89,21 @@ fn issue7921() {\n     if (&None::<()>).is_none() {}\n     if (&None::<()>).is_none() {}\n }\n+\n+fn issue10726() {\n+    let x = Some(42);\n+\n+    x.is_some();\n+\n+    x.is_none();\n+\n+    x.is_none();\n+\n+    x.is_some();\n+\n+    // Don't lint\n+    match x {\n+        Some(21) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "ec684bdf71c11b5136358de1f28d7cf338f82795", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     let _ = if let Some(_) = opt { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -103,3 +104,33 @@ fn issue7921() {\n     if let None = *(&None::<()>) {}\n     if let None = *&None::<()> {}\n }\n+\n+fn issue10726() {\n+    let x = Some(42);\n+\n+    match x {\n+        Some(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        None => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Some(_) => false,\n+        _ => true,\n+    };\n+\n+    match x {\n+        None => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Some(21) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "a69eb3905205f49ffc5d9c689d23a9ceab730db2", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -77,49 +77,49 @@ LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:59:20\n+  --> $DIR/redundant_pattern_matching_option.rs:60:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:61:19\n+  --> $DIR/redundant_pattern_matching_option.rs:62:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:67:12\n+  --> $DIR/redundant_pattern_matching_option.rs:68:12\n    |\n LL |     if let Some(..) = gen_opt() {}\n    |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:82:12\n+  --> $DIR/redundant_pattern_matching_option.rs:83:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:84:12\n+  --> $DIR/redundant_pattern_matching_option.rs:85:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:86:15\n+  --> $DIR/redundant_pattern_matching_option.rs:87:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:88:15\n+  --> $DIR/redundant_pattern_matching_option.rs:89:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:90:5\n+  --> $DIR/redundant_pattern_matching_option.rs:91:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:95:5\n+  --> $DIR/redundant_pattern_matching_option.rs:96:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -137,16 +137,52 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:103:12\n+  --> $DIR/redundant_pattern_matching_option.rs:104:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:104:12\n+  --> $DIR/redundant_pattern_matching_option.rs:105:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:111:5\n+   |\n+LL | /     match x {\n+LL | |         Some(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:116:5\n+   |\n+LL | /     match x {\n+LL | |         None => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:121:5\n+   |\n+LL | /     match x {\n+LL | |         Some(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:126:5\n+   |\n+LL | /     match x {\n+LL | |         None => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_some()`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "e4032ae44b71509a9dfc17690cc2692cf4389944", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -43,6 +43,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if gen_res().is_ok() {\n         1\n@@ -107,3 +108,28 @@ const fn issue6067() {\n \n     Err::<i32, i32>(42).is_err();\n }\n+\n+fn issue10726() {\n+    // This is optional, but it makes the examples easier\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    x.is_ok();\n+\n+    x.is_err();\n+\n+    x.is_err();\n+\n+    x.is_ok();\n+\n+    // Don't lint\n+    match x {\n+        Err(16) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Ok(16) => false,\n+        _ => true,\n+    };\n+}"}, {"sha": "39eb10df8789ed5f0fbe613282e42b531cb37fc2", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if let Ok(_) = gen_res() {\n         1\n@@ -125,3 +126,40 @@ const fn issue6067() {\n         Err(_) => true,\n     };\n }\n+\n+fn issue10726() {\n+    // This is optional, but it makes the examples easier\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    match x {\n+        Ok(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Ok(_) => false,\n+        _ => true,\n+    };\n+\n+    match x {\n+        Err(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Err(_) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Err(16) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Ok(16) => false,\n+        _ => true,\n+    };\n+}"}, {"sha": "5893ae4dcc492ddef8bc14d59ce78394d36159e5", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -73,67 +73,67 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:59:20\n+  --> $DIR/redundant_pattern_matching_result.rs:60:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:61:19\n+  --> $DIR/redundant_pattern_matching_result.rs:62:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:84:19\n+  --> $DIR/redundant_pattern_matching_result.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:85:16\n+  --> $DIR/redundant_pattern_matching_result.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:91:12\n+  --> $DIR/redundant_pattern_matching_result.rs:92:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:92:15\n+  --> $DIR/redundant_pattern_matching_result.rs:93:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:110:12\n+  --> $DIR/redundant_pattern_matching_result.rs:111:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:112:12\n+  --> $DIR/redundant_pattern_matching_result.rs:113:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:114:15\n+  --> $DIR/redundant_pattern_matching_result.rs:115:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:116:15\n+  --> $DIR/redundant_pattern_matching_result.rs:117:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:118:5\n+  --> $DIR/redundant_pattern_matching_result.rs:119:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,13 +142,49 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:123:5\n+  --> $DIR/redundant_pattern_matching_result.rs:124:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:134:5\n+   |\n+LL | /     match x {\n+LL | |         Ok(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:139:5\n+   |\n+LL | /     match x {\n+LL | |         Ok(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_err()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:144:5\n+   |\n+LL | /     match x {\n+LL | |         Err(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:149:5\n+   |\n+LL | /     match x {\n+LL | |         Err(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_ok()`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "c51e0bc76efdab9862deaf47f93235af5aac2669", "filename": "src/tools/clippy/tests/ui/ref_patterns.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,19 @@\n+#![allow(unused)]\n+#![warn(clippy::ref_patterns)]\n+\n+fn use_in_pattern() {\n+    let opt = Some(5);\n+    match opt {\n+        None => {},\n+        Some(ref opt) => {},\n+    }\n+}\n+\n+fn use_in_binding() {\n+    let x = 5;\n+    let ref y = x;\n+}\n+\n+fn use_in_parameter(ref x: i32) {}\n+\n+fn main() {}"}, {"sha": "aa007782683a650081b90d100a921b4b93fd6119", "filename": "src/tools/clippy/tests/ui/ref_patterns.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fref_patterns.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,27 @@\n+error: usage of ref pattern\n+  --> $DIR/ref_patterns.rs:8:14\n+   |\n+LL |         Some(ref opt) => {},\n+   |              ^^^^^^^\n+   |\n+   = help: consider using `&` for clarity instead\n+   = note: `-D clippy::ref-patterns` implied by `-D warnings`\n+\n+error: usage of ref pattern\n+  --> $DIR/ref_patterns.rs:14:9\n+   |\n+LL |     let ref y = x;\n+   |         ^^^^^\n+   |\n+   = help: consider using `&` for clarity instead\n+\n+error: usage of ref pattern\n+  --> $DIR/ref_patterns.rs:17:21\n+   |\n+LL | fn use_in_parameter(ref x: i32) {}\n+   |                     ^^^^^\n+   |\n+   = help: consider using `&` for clarity instead\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a5f79b139bc2aec9968adf086c98f39967ea4534", "filename": "src/tools/clippy/tests/ui/regex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -34,8 +34,10 @@ fn syntax_error() {\n     let set_error = RegexSet::new(&[OPENING_PAREN, r\"[a-z]+\\.(com|org|net)\"]);\n     let bset_error = BRegexSet::new(&[OPENING_PAREN, r\"[a-z]+\\.(com|org|net)\"]);\n \n+    // These following three cases are considering valid since regex-1.8.0\n     let raw_string_error = Regex::new(r\"[...\\/...]\");\n     let raw_string_error = Regex::new(r#\"[...\\/...]\"#);\n+    let _ = Regex::new(r\"(?<hi>hi)\").unwrap();\n \n     let escaped_string_span = Regex::new(\"\\\\b\\\\c\");\n "}, {"sha": "6b8a772e7f0d50582f3a6b9535e8ae1790cb72c8", "filename": "src/tools/clippy/tests/ui/regex.stderr", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fregex.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -82,122 +82,110 @@ error: regex parse error:\n LL |     let bset_error = BRegexSet::new(&[OPENING_PAREN, r\"[a-z]+/.(com|org|net)\"]);\n    |                                       ^^^^^^^^^^^^^\n \n-error: regex syntax error: unrecognized escape sequence\n-  --> $DIR/regex.rs:37:45\n-   |\n-LL |     let raw_string_error = Regex::new(r\"[...//...]\");\n-   |                                             ^^\n-\n-error: regex syntax error: unrecognized escape sequence\n-  --> $DIR/regex.rs:38:46\n-   |\n-LL |     let raw_string_error = Regex::new(r#\"[...//...]\"#);\n-   |                                              ^^\n-\n error: regex parse error:\n            /b/c\n              ^^\n        error: unrecognized escape sequence\n-  --> $DIR/regex.rs:40:42\n+  --> $DIR/regex.rs:42:42\n    |\n LL |     let escaped_string_span = Regex::new(\"/b/c\");\n    |                                          ^^^^^^^^\n    |\n    = help: consider using a raw string literal: `r\"..\"`\n \n error: regex syntax error: duplicate flag\n-  --> $DIR/regex.rs:42:34\n+  --> $DIR/regex.rs:44:34\n    |\n LL |     let aux_span = Regex::new(\"(?ixi)\");\n    |                                  ^ ^\n \n error: trivial regex\n-  --> $DIR/regex.rs:46:33\n+  --> $DIR/regex.rs:48:33\n    |\n LL |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:48:48\n+  --> $DIR/regex.rs:50:48\n    |\n LL |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:50:42\n+  --> $DIR/regex.rs:52:42\n    |\n LL |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:52:40\n+  --> $DIR/regex.rs:54:40\n    |\n LL |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:54:39\n+  --> $DIR/regex.rs:56:39\n    |\n LL |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:56:39\n+  --> $DIR/regex.rs:58:39\n    |\n LL |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:58:40\n+  --> $DIR/regex.rs:60:40\n    |\n LL |     let trivial_backslash = Regex::new(\"a/.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:61:36\n+  --> $DIR/regex.rs:63:36\n    |\n LL |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:63:36\n+  --> $DIR/regex.rs:65:36\n    |\n LL |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:65:36\n+  --> $DIR/regex.rs:67:36\n    |\n LL |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n error: trivial regex\n-  --> $DIR/regex.rs:67:44\n+  --> $DIR/regex.rs:69:44\n    |\n LL |     let binary_trivial_empty = BRegex::new(\"^$\");\n    |                                            ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "7c2acf43fe836ecba24303d16fc7bcd965a27cdd", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -16,6 +16,7 @@\n #![allow(clippy::mixed_read_write_in_expression)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n+#![allow(clippy::arithmetic_side_effects)]\n #![allow(clippy::overly_complex_bool_expr)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::bind_instead_of_map)]\n@@ -58,6 +59,7 @@\n #![warn(clippy::mixed_read_write_in_expression)]\n #![warn(clippy::useless_conversion)]\n #![warn(clippy::match_result_ok)]\n+#![warn(clippy::arithmetic_side_effects)]\n #![warn(clippy::overly_complex_bool_expr)]\n #![warn(clippy::new_without_default)]\n #![warn(clippy::bind_instead_of_map)]"}, {"sha": "8d334b0d0501a644be3c8561e6827bc1820f9294", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -16,6 +16,7 @@\n #![allow(clippy::mixed_read_write_in_expression)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n+#![allow(clippy::arithmetic_side_effects)]\n #![allow(clippy::overly_complex_bool_expr)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::bind_instead_of_map)]\n@@ -58,6 +59,7 @@\n #![warn(clippy::eval_order_dependence)]\n #![warn(clippy::identity_conversion)]\n #![warn(clippy::if_let_some_result)]\n+#![warn(clippy::integer_arithmetic)]\n #![warn(clippy::logic_bug)]\n #![warn(clippy::new_without_default_derive)]\n #![warn(clippy::option_and_then_some)]"}, {"sha": "fbf8d3d7e4e8b88cf7dd486e279929e8ba009171", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 54, "deletions": 48, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,286 +1,292 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n+error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n+  --> $DIR/rename.rs:62:9\n+   |\n+LL | #![warn(clippy::integer_arithmetic)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n+\n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n \n error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n \n error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 47 previous errors\n+error: aborting due to 48 previous errors\n "}, {"sha": "fdac0e4cb1e83a19a5381add24d58d020d765309", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -2,6 +2,8 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n #![allow(unused)]\n \n+use std::any::Any;\n+\n fn bad_foo<T: Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n     unimplemented!();\n }\n@@ -109,4 +111,12 @@ fn qualified_path<T: std::clone::Clone + foo::Clone>(arg0: T) {\n     unimplemented!();\n }\n \n+fn good_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n+fn bad_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n fn main() {}"}, {"sha": "a0300da555588d110fe8f77388acd1f10a01a303", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -2,6 +2,8 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n #![allow(unused)]\n \n+use std::any::Any;\n+\n fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n     unimplemented!();\n }\n@@ -109,4 +111,12 @@ fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n     unimplemented!();\n }\n \n+fn good_trait_object(arg0: &(dyn Any + Send)) {\n+    unimplemented!();\n+}\n+\n+fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {\n+    unimplemented!();\n+}\n+\n fn main() {}"}, {"sha": "539b6114ca3aea8bb925fa78854902b6fd21e9a2", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -1,5 +1,5 @@\n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:5:15\n+  --> $DIR/trait_duplication_in_bounds.rs:7:15\n    |\n LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n@@ -11,46 +11,52 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:11:8\n+  --> $DIR/trait_duplication_in_bounds.rs:13:8\n    |\n LL |     T: Clone + Clone + Clone + Copy,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:39:26\n+  --> $DIR/trait_duplication_in_bounds.rs:41:26\n    |\n LL | trait BadSelfTraitBound: Clone + Clone + Clone {\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:46:15\n+  --> $DIR/trait_duplication_in_bounds.rs:48:15\n    |\n LL |         Self: Clone + Clone + Clone;\n    |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:60:24\n+  --> $DIR/trait_duplication_in_bounds.rs:62:24\n    |\n LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:67:12\n+  --> $DIR/trait_duplication_in_bounds.rs:69:12\n    |\n LL |         T: Clone + Clone + Clone + Copy,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:100:19\n+  --> $DIR/trait_duplication_in_bounds.rs:102:19\n    |\n LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:108:22\n+  --> $DIR/trait_duplication_in_bounds.rs:110:22\n    |\n LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`\n \n-error: aborting due to 8 previous errors\n+error: this trait bound is already specified in trait declaration\n+  --> $DIR/trait_duplication_in_bounds.rs:118:33\n+   |\n+LL | fn bad_trait_object(arg0: &(dyn Any + Send + Send)) {\n+   |                                 ^^^^^^^^^^^^^^^^^ help: try: `Any + Send`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "c16caa38fe93ecbc46bddec79855a9d5e95e9b29", "filename": "src/tools/clippy/tests/ui/useless_conversion.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "c75a2bce4ca23e19b3197a12cfb4d58d558f597d", "filename": "src/tools/clippy/tests/ui/useless_conversion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "4dca3aac5336124a3f16f27d8a3ad4a42bf379ff", "filename": "src/tools/clippy/tests/ui/useless_conversion.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.stderr?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -23,97 +23,97 @@ LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:45:22\n+  --> $DIR/useless_conversion.rs:50:22\n    |\n LL |     if Some(\"ok\") == lines.into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `lines`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:50:21\n+  --> $DIR/useless_conversion.rs:55:21\n    |\n LL |     let mut lines = text.lines().into_iter();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:56:22\n+  --> $DIR/useless_conversion.rs:61:22\n    |\n LL |     if Some(\"ok\") == text.lines().into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:67:13\n    |\n LL |     let _ = NUMBERS.into_iter().next();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:67:17\n+  --> $DIR/useless_conversion.rs:72:17\n    |\n LL |     let mut n = NUMBERS.into_iter();\n    |                 ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:128:21\n+  --> $DIR/useless_conversion.rs:134:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:129:21\n+  --> $DIR/useless_conversion.rs:135:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:130:13\n+  --> $DIR/useless_conversion.rs:136:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:131:13\n+  --> $DIR/useless_conversion.rs:137:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:132:13\n+  --> $DIR/useless_conversion.rs:138:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:133:13\n+  --> $DIR/useless_conversion.rs:139:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:134:21\n+  --> $DIR/useless_conversion.rs:140:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:139:13\n+  --> $DIR/useless_conversion.rs:145:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:145:23\n+  --> $DIR/useless_conversion.rs:151:23\n    |\n LL |     let _: Foo<'a'> = s2.into();\n    |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:147:13\n+  --> $DIR/useless_conversion.rs:153:13\n    |\n LL |     let _ = Foo::<'a'>::from(s3);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n \n error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n-  --> $DIR/useless_conversion.rs:149:13\n+  --> $DIR/useless_conversion.rs:155:13\n    |\n LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`"}, {"sha": "203c4e15b50c385a3583a5262b5dd54a36bf4468", "filename": "src/tools/clippy/tests/ui/wildcard_imports_cfgtest.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports_cfgtest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports_cfgtest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_imports_cfgtest.rs?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -0,0 +1,19 @@\n+//@compile-flags: --test\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+\n+// Test for #10580, the lint should ignore it because of the crate's cfg test flag.\n+\n+fn foofoo() {}\n+\n+mod outer {\n+    mod inner {\n+        use super::super::*;\n+        fn barbar() {\n+            let _ = foofoo();\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c40b71f6ca7d469b973ea4b892ff2f0d718a669e", "filename": "src/tools/clippy/triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftriagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77f4f828a2f19854fcbcdf69babe7d0ac1c92852/src%2Ftools%2Fclippy%2Ftriagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftriagebot.toml?ref=77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "patch": "@@ -17,9 +17,9 @@ contributing_url = \"https://github.com/rust-lang/rust-clippy/blob/master/CONTRIB\n \n [assign.owners]\n \"/.github\" = [\"@flip1995\"]\n+\"/book\" = [\"@flip1995\"]\n \"/util/gh-pages\" = [\"@xFrednet\"]\n \"*\" = [\n-    \"@flip1995\",\n     \"@Manishearth\",\n     \"@llogiq\",\n     \"@giraffate\","}]}