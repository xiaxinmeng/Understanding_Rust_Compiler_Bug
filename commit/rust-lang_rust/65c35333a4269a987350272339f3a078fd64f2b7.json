{"sha": "65c35333a4269a987350272339f3a078fd64f2b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YzM1MzMzYTQyNjlhOTg3MzUwMjcyMzM5ZjNhMDc4ZmQ2NGYyYjc=", "commit": {"author": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-19T19:55:01Z"}, "committer": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-19T19:55:01Z"}, "message": "Only print out question_mark lint when it actually triggered", "tree": {"sha": "6c74f4930d9f45bdef1b43e53cef3d49d5ac4c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c74f4930d9f45bdef1b43e53cef3d49d5ac4c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c35333a4269a987350272339f3a078fd64f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c35333a4269a987350272339f3a078fd64f2b7", "html_url": "https://github.com/rust-lang/rust/commit/65c35333a4269a987350272339f3a078fd64f2b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c35333a4269a987350272339f3a078fd64f2b7/comments", "author": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18584698eebfe1f0e51349de352a53179735cf52", "url": "https://api.github.com/repos/rust-lang/rust/commits/18584698eebfe1f0e51349de352a53179735cf52", "html_url": "https://github.com/rust-lang/rust/commit/18584698eebfe1f0e51349de352a53179735cf52"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "76fb63506818510b9dd76c53d3c2aaab89235b0a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/65c35333a4269a987350272339f3a078fd64f2b7/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c35333a4269a987350272339f3a078fd64f2b7/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=65c35333a4269a987350272339f3a078fd64f2b7", "patch": "@@ -73,36 +73,39 @@ impl Pass {\n \n             then {\n                 let receiver_str = &Sugg::hir(cx, subject, \"..\");\n-                let mut replacement_str = String::new();\n+                let mut replacement: Option<String> = None;\n                 if let Some(else_) = else_ {\n                     if_chain! {\n                         if let ExprKind::Block(block, None) = &else_.node;\n                         if block.stmts.len() == 0;\n                         if let Some(block_expr) = &block.expr;\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(subject, block_expr);\n                         then {\n-                            replacement_str = format!(\"Some({}?)\", receiver_str);\n+                            replacement = Some(format!(\"Some({}?)\", receiver_str));\n                         }\n                     }\n                 } else if Self::moves_by_default(cx, subject) {\n-                        replacement_str = format!(\"{}.as_ref()?;\", receiver_str);\n+                        replacement = Some(format!(\"{}.as_ref()?;\", receiver_str));\n                 } else {\n-                        replacement_str = format!(\"{}?;\", receiver_str);\n+                        replacement = Some(format!(\"{}?;\", receiver_str));\n                 }\n-                span_lint_and_then(\n-                    cx,\n-                    QUESTION_MARK,\n-                    expr.span,\n-                    \"this block may be rewritten with the `?` operator\",\n-                    |db| {\n-                        db.span_suggestion_with_applicability(\n-                            expr.span,\n-                            \"replace_it_with\",\n-                            replacement_str,\n-                            Applicability::MaybeIncorrect, // snippet\n-                        );\n-                    }\n-                )\n+\n+                if let Some(replacement_str) = replacement {\n+                    span_lint_and_then(\n+                        cx,\n+                        QUESTION_MARK,\n+                        expr.span,\n+                        \"this block may be rewritten with the `?` operator\",\n+                        |db| {\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"replace_it_with\",\n+                                replacement_str,\n+                                Applicability::MaybeIncorrect, // snippet\n+                            );\n+                        }\n+                    )\n+               }\n             }\n         }\n     }"}]}