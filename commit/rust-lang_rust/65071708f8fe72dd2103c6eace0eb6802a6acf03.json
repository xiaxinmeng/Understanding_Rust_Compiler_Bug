{"sha": "65071708f8fe72dd2103c6eace0eb6802a6acf03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDcxNzA4ZjhmZTcyZGQyMTAzYzZlYWNlMGViNjgwMmE2YWNmMDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-08T19:10:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-26T10:52:26Z"}, "message": "make a custom error for overlap with negative impls", "tree": {"sha": "912d748e82574d835e72d9d69d4cd3b5a5f1d6a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912d748e82574d835e72d9d69d4cd3b5a5f1d6a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65071708f8fe72dd2103c6eace0eb6802a6acf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65071708f8fe72dd2103c6eace0eb6802a6acf03", "html_url": "https://github.com/rust-lang/rust/commit/65071708f8fe72dd2103c6eace0eb6802a6acf03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65071708f8fe72dd2103c6eace0eb6802a6acf03/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "html_url": "https://github.com/rust-lang/rust/commit/e8a05e201ee6cea12fe05e4271e91fd40c2fb235"}], "stats": {"total": 458, "additions": 271, "deletions": 187}, "files": [{"sha": "fdcf3d639574bb3c89356095b8e1227f922d0a7a", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -427,6 +427,7 @@ E0747: include_str!(\"./error_codes/E0747.md\"),\n E0748: include_str!(\"./error_codes/E0748.md\"),\n E0749: include_str!(\"./error_codes/E0749.md\"),\n E0750: include_str!(\"./error_codes/E0750.md\"),\n+E0751: include_str!(\"./error_codes/E0751.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "a440f82e4b6b3e89751b79734b5c2d59b4a2601b", "filename": "src/librustc_error_codes/error_codes/E0751.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -0,0 +1,12 @@\n+There are both a positive and negative trait implementation for the same type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0748\n+trait MyTrait {}\n+impl MyTrait for i32 { }\n+impl !MyTrait for i32 { }\n+```\n+\n+Negative implementations are a promise that the trait will never be\n+implemented for the given types."}, {"sha": "732716ef86577e316d9949fdcf102dac70d2e671", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 165, "deletions": 80, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -324,86 +324,7 @@ pub(super) fn specialization_graph_provider(\n             };\n \n             if let Some(overlap) = overlap {\n-                let impl_span =\n-                    tcx.sess.source_map().guess_head_span(tcx.span_of_impl(impl_def_id).unwrap());\n-\n-                // Work to be done after we've built the DiagnosticBuilder. We have to define it\n-                // now because the struct_lint methods don't return back the DiagnosticBuilder\n-                // that's passed in.\n-                let decorate = |err: LintDiagnosticBuilder<'_>| {\n-                    let msg = format!(\n-                        \"conflicting implementations of trait `{}`{}:{}\",\n-                        overlap.trait_desc,\n-                        overlap\n-                            .self_desc\n-                            .clone()\n-                            .map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n-                        match used_to_be_allowed {\n-                            Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n-                            _ => \"\",\n-                        }\n-                    );\n-                    let mut err = err.build(&msg);\n-                    match tcx.span_of_impl(overlap.with_impl) {\n-                        Ok(span) => {\n-                            err.span_label(\n-                                tcx.sess.source_map().guess_head_span(span),\n-                                \"first implementation here\".to_string(),\n-                            );\n-\n-                            err.span_label(\n-                                impl_span,\n-                                format!(\n-                                    \"conflicting implementation{}\",\n-                                    overlap\n-                                        .self_desc\n-                                        .map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n-                                ),\n-                            );\n-                        }\n-                        Err(cname) => {\n-                            let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n-                                Some(s) => format!(\n-                                    \"conflicting implementation in crate `{}`:\\n- {}\",\n-                                    cname, s\n-                                ),\n-                                None => format!(\"conflicting implementation in crate `{}`\", cname),\n-                            };\n-                            err.note(&msg);\n-                        }\n-                    }\n-\n-                    for cause in &overlap.intercrate_ambiguity_causes {\n-                        cause.add_intercrate_ambiguity_hint(&mut err);\n-                    }\n-\n-                    if overlap.involves_placeholder {\n-                        coherence::add_placeholder_note(&mut err);\n-                    }\n-                    err.emit()\n-                };\n-\n-                match used_to_be_allowed {\n-                    None => {\n-                        sg.has_errored = true;\n-                        let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                        decorate(LintDiagnosticBuilder::new(err));\n-                    }\n-                    Some(kind) => {\n-                        let lint = match kind {\n-                            FutureCompatOverlapErrorKind::Issue33140 => {\n-                                ORDER_DEPENDENT_TRAIT_OBJECTS\n-                            }\n-                            FutureCompatOverlapErrorKind::LeakCheck => COHERENCE_LEAK_CHECK,\n-                        };\n-                        tcx.struct_span_lint_hir(\n-                            lint,\n-                            tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n-                            impl_span,\n-                            decorate,\n-                        )\n-                    }\n-                };\n+                report_overlap_conflict(tcx, overlap, impl_def_id, used_to_be_allowed, &mut sg);\n             }\n         } else {\n             let parent = tcx.impl_parent(impl_def_id).unwrap_or(trait_id);\n@@ -414,6 +335,170 @@ pub(super) fn specialization_graph_provider(\n     tcx.arena.alloc(sg)\n }\n \n+fn report_overlap_conflict(\n+    tcx: TyCtxt<'_>,\n+    overlap: OverlapError,\n+    impl_def_id: DefId,\n+    used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_polarity = tcx.impl_polarity(impl_def_id);\n+    let other_polarity = tcx.impl_polarity(overlap.with_impl);\n+    match (impl_polarity, other_polarity) {\n+        (ty::ImplPolarity::Negative, ty::ImplPolarity::Positive) => {\n+            report_negative_positive_conflict(\n+                tcx,\n+                &overlap,\n+                impl_def_id,\n+                impl_def_id,\n+                overlap.with_impl,\n+                sg,\n+            );\n+        }\n+\n+        (ty::ImplPolarity::Positive, ty::ImplPolarity::Negative) => {\n+            report_negative_positive_conflict(\n+                tcx,\n+                &overlap,\n+                impl_def_id,\n+                overlap.with_impl,\n+                impl_def_id,\n+                sg,\n+            );\n+        }\n+\n+        _ => {\n+            report_conflicting_impls(tcx, overlap, impl_def_id, used_to_be_allowed, sg);\n+        }\n+    }\n+}\n+\n+fn report_negative_positive_conflict(\n+    tcx: TyCtxt<'_>,\n+    overlap: &OverlapError,\n+    local_impl_def_id: DefId,\n+    negative_impl_def_id: DefId,\n+    positive_impl_def_id: DefId,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_span =\n+        tcx.sess.source_map().guess_head_span(tcx.span_of_impl(local_impl_def_id).unwrap());\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0748,\n+        \"found both positive and negative implementation of trait `{}`{}:\",\n+        overlap.trait_desc,\n+        overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))\n+    );\n+\n+    match tcx.span_of_impl(negative_impl_def_id) {\n+        Ok(span) => {\n+            err.span_label(\n+                tcx.sess.source_map().guess_head_span(span),\n+                \"negative implementation here\".to_string(),\n+            );\n+        }\n+        Err(cname) => {\n+            err.note(&format!(\"negative implementation in crate `{}`\", cname));\n+        }\n+    }\n+\n+    match tcx.span_of_impl(positive_impl_def_id) {\n+        Ok(span) => {\n+            err.span_label(\n+                tcx.sess.source_map().guess_head_span(span),\n+                \"positive implementation here\".to_string(),\n+            );\n+        }\n+        Err(cname) => {\n+            err.note(&format!(\"positive implementation in crate `{}`\", cname));\n+        }\n+    }\n+\n+    sg.has_errored = true;\n+    err.emit();\n+}\n+\n+fn report_conflicting_impls(\n+    tcx: TyCtxt<'_>,\n+    overlap: OverlapError,\n+    impl_def_id: DefId,\n+    used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+    sg: &mut specialization_graph::Graph,\n+) {\n+    let impl_span = tcx.sess.source_map().guess_head_span(tcx.span_of_impl(impl_def_id).unwrap());\n+\n+    // Work to be done after we've built the DiagnosticBuilder. We have to define it\n+    // now because the struct_lint methods don't return back the DiagnosticBuilder\n+    // that's passed in.\n+    let decorate = |err: LintDiagnosticBuilder<'_>| {\n+        let msg = format!(\n+            \"conflicting implementations of trait `{}`{}:{}\",\n+            overlap.trait_desc,\n+            overlap.self_desc.clone().map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n+            match used_to_be_allowed {\n+                Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n+                _ => \"\",\n+            }\n+        );\n+        let mut err = err.build(&msg);\n+        match tcx.span_of_impl(overlap.with_impl) {\n+            Ok(span) => {\n+                err.span_label(\n+                    tcx.sess.source_map().guess_head_span(span),\n+                    \"first implementation here\".to_string(),\n+                );\n+\n+                err.span_label(\n+                    impl_span,\n+                    format!(\n+                        \"conflicting implementation{}\",\n+                        overlap.self_desc.map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n+                    ),\n+                );\n+            }\n+            Err(cname) => {\n+                let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n+                    Some(s) => format!(\"conflicting implementation in crate `{}`:\\n- {}\", cname, s),\n+                    None => format!(\"conflicting implementation in crate `{}`\", cname),\n+                };\n+                err.note(&msg);\n+            }\n+        }\n+\n+        for cause in &overlap.intercrate_ambiguity_causes {\n+            cause.add_intercrate_ambiguity_hint(&mut err);\n+        }\n+\n+        if overlap.involves_placeholder {\n+            coherence::add_placeholder_note(&mut err);\n+        }\n+        err.emit()\n+    };\n+\n+    match used_to_be_allowed {\n+        None => {\n+            sg.has_errored = true;\n+            let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n+            decorate(LintDiagnosticBuilder::new(err));\n+        }\n+        Some(kind) => {\n+            let lint = match kind {\n+                FutureCompatOverlapErrorKind::Issue33140 => ORDER_DEPENDENT_TRAIT_OBJECTS,\n+                FutureCompatOverlapErrorKind::LeakCheck => COHERENCE_LEAK_CHECK,\n+            };\n+            tcx.struct_span_lint_hir(\n+                lint,\n+                tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n+                impl_span,\n+                decorate,\n+            )\n+        }\n+    };\n+}\n+\n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a\n /// string.\n fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {"}, {"sha": "0fabb5ec91d31552203e56a50a51ef69f90c2c21", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -6,13 +6,11 @@ trait MyTrait {}\n \n struct TestType<T>(::std::marker::PhantomData<T>);\n \n-unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n \n-impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and negative implementation\n \n-unsafe impl<T:'static> Send for TestType<T> {}\n-//~^ ERROR conflicting implementations\n+unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n "}, {"sha": "5081536b702451d8a843fdb7a301fbea6a9b6e2b", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,21 +1,22 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ positive implementation here\n LL | \n LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n-  --> $DIR/coherence-conflicting-negative-trait-impl.rs:14:1\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n-LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n-   | ---------------------------------------------------- first implementation here\n+LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n+   | ------------------------------------------------------ first implementation here\n ...\n-LL | unsafe impl<T:'static> Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+LL | unsafe impl<T: 'static> Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+Some errors have detailed explanations: E0119, E0748.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "5aba886273f7b332d6bac1256d02db4c0d9e8e06", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -4,8 +4,7 @@\n // Check that the issue #33140 hack does not allow unintended things.\n \n // OK\n-trait Trait0 {\n-}\n+trait Trait0 {}\n \n impl Trait0 for dyn Send {}\n impl Trait0 for dyn Send {}\n@@ -20,58 +19,49 @@ impl Trait1 for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 2: negative impl\n-trait Trait2 {\n-}\n+trait Trait2 {}\n \n impl Trait2 for dyn Send {}\n impl !Trait2 for dyn Send {}\n-//~^ ERROR E0119\n-\n+//~^ ERROR E0748\n \n // Problem 3: type parameter\n-trait Trait3<T: ?Sized> {\n-}\n+trait Trait3<T: ?Sized> {}\n \n impl Trait3<dyn Sync> for dyn Send {}\n impl Trait3<dyn Sync> for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 4a: not a trait object - generic\n-trait Trait4a {\n-}\n+trait Trait4a {}\n \n impl<T: ?Sized> Trait4a for T {}\n impl Trait4a for dyn Send {}\n //~^ ERROR E0119\n \n // Problem 4b: not a trait object - misc\n-trait Trait4b {\n-}\n+trait Trait4b {}\n \n impl Trait4b for () {}\n impl Trait4b for () {}\n //~^ ERROR E0119\n \n // Problem 4c: not a principal-less trait object\n-trait Trait4c {\n-}\n+trait Trait4c {}\n \n impl Trait4c for dyn Trait1 + Send {}\n impl Trait4c for dyn Trait1 + Send {}\n //~^ ERROR E0119\n \n // Problem 4d: lifetimes\n-trait Trait4d {\n-}\n+trait Trait4d {}\n \n impl<'a> Trait4d for dyn Send + 'a {}\n impl<'a> Trait4d for dyn Send + 'a {}\n //~^ ERROR E0119\n \n-\n // Problem 5: where-clauses\n-trait Trait5 {\n-}\n+trait Trait5 {}\n \n impl Trait5 for dyn Send {}\n impl Trait5 for dyn Send where u32: Copy {}"}, {"sha": "b3bf34a2a90315f8a4dda2b44ca6614ecdd5f62a", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,61 +1,61 @@\n error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:19:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:18:1\n    |\n LL | impl Trait1 for dyn Send {}\n    | ------------------------ first implementation here\n LL | impl Trait1 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:27:1\n+error[E0748]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+  --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n-   | ------------------------ first implementation here\n+   | ------------------------ positive implementation here\n LL | impl !Trait2 for dyn Send {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:36:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:32:1\n    |\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:44:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:39:1\n    |\n LL | impl<T: ?Sized> Trait4a for T {}\n    | ----------------------------- first implementation here\n LL | impl Trait4a for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4b` for type `()`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:52:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:46:1\n    |\n LL | impl Trait4b for () {}\n    | ------------------- first implementation here\n LL | impl Trait4b for () {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:60:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:53:1\n    |\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n \n error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:68:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:60:1\n    |\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ---------------------------------- first implementation here\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n \n error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`:\n-  --> $DIR/issue-33140-hack-boundaries.rs:77:1\n+  --> $DIR/issue-33140-hack-boundaries.rs:67:1\n    |\n LL | impl Trait5 for dyn Send {}\n    | ------------------------ first implementation here\n@@ -64,4 +64,5 @@ LL | impl Trait5 for dyn Send where u32: Copy {}\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+Some errors have detailed explanations: E0119, E0748.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "4f5f65dafaa2e16f64cb92ef20556cb80db27e26", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -6,6 +6,6 @@ trait MyTrait {}\n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: Clone> Send for TestType<T> {}\n-impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0119\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0748\n \n fn main() {}"}, {"sha": "cbc7271b199a68237cc7057b32dc31c42555f430", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}\n-   | ------------------------------------------ first implementation here\n+   | ------------------------------------------ positive implementation here\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "fd0671ad09e32b86a67c7dc875beb5aae1d9e999", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -6,11 +6,11 @@\n auto trait Foo {}\n \n impl<T> Foo for T {}\n-impl !Foo for u8 {} //~ ERROR E0119\n+impl !Foo for u8 {} //~ ERROR E0748\n \n auto trait Bar {}\n \n impl<T> !Bar for T {}\n-impl Bar for u8 {} //~ ERROR E0119\n+impl Bar for u8 {} //~ ERROR E0748\n \n fn main() {}"}, {"sha": "c6e7f193d013220c1523b52e63802017166ff678", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,19 +1,19 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n+error[E0748]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:9:1\n    |\n LL | impl<T> Foo for T {}\n-   | ----------------- first implementation here\n+   | ----------------- positive implementation here\n LL | impl !Foo for u8 {}\n-   | ^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+   | ^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `Bar` for type `u8`:\n+error[E0748]: found both positive and negative implementation of trait `Bar` for type `u8`:\n   --> $DIR/specialization-polarity.rs:14:1\n    |\n LL | impl<T> !Bar for T {}\n-   | ------------------ first implementation here\n+   | ------------------ negative implementation here\n LL | impl Bar for u8 {}\n-   | ^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+   | ^^^^^^^^^^^^^^^ positive implementation here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "c7009430eae998e3271d82d9145a37b81afeb42c", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -6,8 +6,8 @@ trait MyTrait {\n     fn foo();\n }\n impl<T> MyTrait for T {\n-    default fn foo() { }\n+    default fn foo() {}\n }\n-impl !MyTrait for u32 { } //~ ERROR conflicting implementations\n+impl !MyTrait for u32 {} //~ ERROR E0748\n \n-fn main() { }\n+fn main() {}"}, {"sha": "21fd08251d474dd1c921047680a8f80b9b0ad7c9", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,12 +1,12 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1\n    |\n LL | impl<T> MyTrait for T {\n-   | --------------------- first implementation here\n+   | --------------------- positive implementation here\n ...\n-LL | impl !MyTrait for u32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+LL | impl !MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "25301c696e13f43432c9c27dcb2ecab3b46c8b29", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -2,13 +2,13 @@\n #![feature(optin_builtin_traits)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl.\n-trait MyTrait { }\n-impl<T> MyTrait for T { }\n-impl !MyTrait for u32 { } //~ ERROR conflicting implementations\n+trait MyTrait {}\n+impl<T> MyTrait for T {}\n+impl !MyTrait for u32 {} //~ ERROR E0748\n \n // The second impl specializes the first, no error.\n-trait MyTrait2 { }\n-impl<T> MyTrait2 for T { }\n-impl MyTrait2 for u32 { }\n+trait MyTrait2 {}\n+impl<T> MyTrait2 for T {}\n+impl MyTrait2 for u32 {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "0e7426c82602872053f59d1ae9ff33cd1e8665a0", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1\n    |\n-LL | impl<T> MyTrait for T { }\n-   | --------------------- first implementation here\n-LL | impl !MyTrait for u32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+LL | impl<T> MyTrait for T {}\n+   | --------------------- positive implementation here\n+LL | impl !MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "d9c498fca6645ede2921d1824116cbe315b78a8d", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -4,13 +4,13 @@ use std::pin::Pin;\n \n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n-impl<'a> Clone for &'a mut MyType<'a> { //~ ERROR conflicting implementations\n+impl<'a> Clone for &'a mut MyType<'a> {\n+    //~^ ERROR E0748\n     fn clone(&self) -> &'a mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }\n }\n \n-\n fn main() {\n     let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n     let bad_addr = &unpinned as *const MyType<'_> as usize;"}, {"sha": "f3305722cf2d32b768af934b5f4131af113a9188", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,13 +1,11 @@\n-error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n    |\n LL | impl<'a> Clone for &'a mut MyType<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ positive implementation here\n    |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::clone::Clone for &mut T\n-             where T: ?Sized;\n+   = note: negative implementation in crate `core`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "cc27c301ffa9d7ed6e0d0407268bb1c6b50b4f48", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -9,13 +9,13 @@ use std::pin::Pin;\n \n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n-impl<'a> DerefMut for &'a MyType<'a> { //~ ERROR conflicting implementations\n+impl<'a> DerefMut for &'a MyType<'a> {\n+    //~^ ERROR E0748\n     fn deref_mut(&mut self) -> &mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }\n }\n \n-\n fn main() {\n     let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n     let bad_addr = &unpinned as *const MyType<'_> as usize;"}, {"sha": "4e71c2468246b9d109033248bbddda0ec4a1ce64", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,13 +1,11 @@\n-error[E0119]: conflicting implementations of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+error[E0748]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n    |\n LL | impl<'a> DerefMut for &'a MyType<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ positive implementation here\n    |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<T> std::ops::DerefMut for &T\n-             where T: ?Sized;\n+   = note: negative implementation in crate `core`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}, {"sha": "8a8ee70370feac99b3eca7fc00fcd28eefdbbd90", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,9 +1,9 @@\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n \n-trait MyTrait { }\n+trait MyTrait {}\n \n-impl<T> !MyTrait for T { }\n-impl MyTrait for u32 { } //~ ERROR conflicting implementations\n+impl<T> !MyTrait for T {}\n+impl MyTrait for u32 {} //~ ERROR E0748\n \n-fn main() { }\n+fn main() {}"}, {"sha": "ab371945a7eab9c39889375800e41cebb32bbcd8", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65071708f8fe72dd2103c6eace0eb6802a6acf03/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=65071708f8fe72dd2103c6eace0eb6802a6acf03", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1\n    |\n-LL | impl<T> !MyTrait for T { }\n-   | ---------------------- first implementation here\n-LL | impl MyTrait for u32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+LL | impl<T> !MyTrait for T {}\n+   | ---------------------- negative implementation here\n+LL | impl MyTrait for u32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^ positive implementation here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0119`.\n+For more information about this error, try `rustc --explain E0748`."}]}