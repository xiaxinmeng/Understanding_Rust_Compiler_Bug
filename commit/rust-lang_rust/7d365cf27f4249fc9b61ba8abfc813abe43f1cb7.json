{"sha": "7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzY1Y2YyN2Y0MjQ5ZmM5YjYxYmE4YWJmYzgxM2FiZTQzZjFjYjc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2019-03-25T21:50:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2019-03-25T21:50:07Z"}, "message": "compile all crates under test w/ -Zemit-stack-sizes", "tree": {"sha": "83e5bd92939c8d5ff7a07ba2acc85d720ead202a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83e5bd92939c8d5ff7a07ba2acc85d720ead202a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "html_url": "https://github.com/rust-lang/rust/commit/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8488ce8fc047282e7159343f30609417f9fa39", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8488ce8fc047282e7159343f30609417f9fa39", "html_url": "https://github.com/rust-lang/rust/commit/8b8488ce8fc047282e7159343f30609417f9fa39"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "28c8a75a13ab4a5a94f7e379330b33d79ec736d6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "patch": "@@ -181,28 +181,31 @@ fn main() {\n             cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n         }\n \n-        // Build `compiler_builtins` with `-Z emit-stack-sizes` to add stack usage information.\n+        // Build all crates in the `std` facade with `-Z emit-stack-sizes` to add stack usage\n+        // information.\n         //\n-        // When you use this flag with Cargo you get stack usage information on all crates compiled\n-        // from source, and when you are using LTO you also get information on pre-compiled crates\n-        // like `core` and `std`. However, there's an exception: `compiler_builtins`. This crate\n-        // is special and doesn't participate in LTO because it's always linked as a separate object\n-        // file. Due to this it's impossible to get information about this crate using `RUSTFLAGS`\n-        // + Cargo, or `cargo rustc`.\n+        // When you use this `-Z` flag with Cargo you get stack usage information on all crates\n+        // compiled from source, and when you are using LTO you also get information on pre-compiled\n+        // crates like `core` and `std`, even if they were not compiled with `-Z emit-stack-sizes`.\n+        // However, there's an exception: `compiler_builtins`. This crate is special and doesn't\n+        // participate in LTO because it's always linked as a separate object file. For this reason\n+        // it's impossible to get stack usage information about `compiler-builtins` using\n+        // `RUSTFLAGS` + Cargo, or `cargo rustc`.\n         //\n-        // To make the stack usage information of this crate available to Cargo based stack usage\n-        // analysis tools we compile `compiler_builtins` with the `-Z emit-stack-sizes` flag. The\n-        // flag is known to currently work with targets that produce ELF files so we limit the use\n-        // of the flag to those targets.\n+        // To make the stack usage information of all crates under the `std` facade available to\n+        // Cargo based stack usage analysis tools, in both LTO and non-LTO mode, we compile them\n+        // with the `-Z emit-stack-sizes` flag. The `RUSTC_EMIT_STACK_SIZES` var helps us apply this\n+        // flag only to the crates in the `std` facade. The `-Z` flag is known to currently work\n+        // with targets that produce ELF files so we limit its use flag to those targets.\n         //\n         // NOTE(japaric) if this ever causes problem with an LLVM upgrade or any PR feel free to\n         // remove it or comment it out\n-        if crate_name == \"compiler_builtins\"\n+        if env::var_os(\"RUSTC_EMIT_STACK_SIZES\").is_some()\n             && (target.contains(\"-linux-\")\n                 || target.contains(\"-none-eabi\")\n                 || target.ends_with(\"-none-elf\"))\n         {\n-            cmd.arg(\"-Z\").arg(\"emit-stack-sizes\");\n+            cmd.arg(\"-Zemit-stack-sizes\");\n         }\n \n         if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {"}, {"sha": "0d51d7c5ef3b8543952bea083da98cd457cbbdbd", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "patch": "@@ -97,6 +97,8 @@ impl Step for Std {\n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n+        // compile with `-Z emit-stack-sizes`; see bootstrap/src/rustc.rs for more details\n+        cargo.env(\"RUSTC_EMIT_STACK_SIZES\", \"1\");\n         run_cargo(builder,\n                   &mut cargo,\n                   &libstd_stamp(builder, compiler, target),\n@@ -382,6 +384,8 @@ impl Step for Test {\n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n+        // compile with `-Z emit-stack-sizes`; see bootstrap/src/rustc.rs for more details\n+        cargo.env(\"RUSTC_EMIT_STACK_SIZES\", \"1\");\n         run_cargo(builder,\n                   &mut cargo,\n                   &libtest_stamp(builder, compiler, target),"}]}