{"sha": "c3fed9fabd182a9479ada08d21313a9ed942436c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmVkOWZhYmQxODJhOTQ3OWFkYTA4ZDIxMzEzYTllZDk0MjQzNmM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-17T04:46:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T04:46:52Z"}, "message": "Rollup merge of #68701 - amosonn:patch-2, r=RalfJung\n\nImprove #Safety of various methods in core::ptr\n\nFor `read`, `read_unaligned`,`read_volatile`, `replace`, and `drop_in_place`:\n\n- The value they point to must be properly initialized\n\nFor `replace`, additionally:\n\n- The pointer must be readable", "tree": {"sha": "df8fcb9793b01ba754b0ad67f7dd1ef7f65da67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8fcb9793b01ba754b0ad67f7dd1ef7f65da67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fed9fabd182a9479ada08d21313a9ed942436c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeShq8CRBK7hj4Ov3rIwAAdHIIAAxdql0DdNdCPgpH7F9LMhU5\nM/JWCQm10DeLyjTFVVvoxIPbhi2XJ/wOUizxgNSeEamOWn+goUDL2sCFmjl9wRbL\nVbK83P8NBxnh/4M/siXn8gcGxzInSn+RLcIwA8u/4sKb9NG9XfvgqvrgWLZ7N/6a\n850SHiVk4AfbH45qysQu8JaaVjTChQ7czPdiLaUebDv9ok4bOOW2bXFqmhjLigS+\n5309B3YnDQUNu0CpbjBrPbP18V1XiuXClHSdmDesXYXK0DBu+YXU1pEahXv7+JVR\ncDcve5dBvecUkfAS8Gbkx+Q/yB12CKhHQseLnyzDPdQvkId7D50A4KFhOSIz1Kk=\n=gZ/p\n-----END PGP SIGNATURE-----\n", "payload": "tree df8fcb9793b01ba754b0ad67f7dd1ef7f65da67d\nparent 5f818f94e762a6a371b3ecc5261facf4952bf432\nparent 943e65396d7bc7b91bcc30407d323d06f4b20a22\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581914812 +0900\ncommitter GitHub <noreply@github.com> 1581914812 +0900\n\nRollup merge of #68701 - amosonn:patch-2, r=RalfJung\n\nImprove #Safety of various methods in core::ptr\n\nFor `read`, `read_unaligned`,`read_volatile`, `replace`, and `drop_in_place`:\n\n- The value they point to must be properly initialized\n\nFor `replace`, additionally:\n\n- The pointer must be readable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fed9fabd182a9479ada08d21313a9ed942436c", "html_url": "https://github.com/rust-lang/rust/commit/c3fed9fabd182a9479ada08d21313a9ed942436c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fed9fabd182a9479ada08d21313a9ed942436c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f818f94e762a6a371b3ecc5261facf4952bf432", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f818f94e762a6a371b3ecc5261facf4952bf432", "html_url": "https://github.com/rust-lang/rust/commit/5f818f94e762a6a371b3ecc5261facf4952bf432"}, {"sha": "943e65396d7bc7b91bcc30407d323d06f4b20a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/943e65396d7bc7b91bcc30407d323d06f4b20a22", "html_url": "https://github.com/rust-lang/rust/commit/943e65396d7bc7b91bcc30407d323d06f4b20a22"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "88b490a25d5ddcaf6efdf53f1da17f5436325d13", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3fed9fabd182a9479ada08d21313a9ed942436c/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fed9fabd182a9479ada08d21313a9ed942436c/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=c3fed9fabd182a9479ada08d21313a9ed942436c", "patch": "@@ -119,10 +119,13 @@ mod mut_ptr;\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `to_drop` must be [valid] for reads.\n+/// * `to_drop` must be [valid] for both reads and writes.\n ///\n /// * `to_drop` must be properly aligned.\n ///\n+/// * The value `to_drop` points to must be valid for dropping, which may mean it must uphold\n+///   additional invariants - this is type-dependent.\n+///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n /// foo` counts as a use because it will cause the value to be dropped\n@@ -289,7 +292,7 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * Both `x` and `y` must be [valid] for reads and writes.\n+/// * Both `x` and `y` must be [valid] for both reads and writes.\n ///\n /// * Both `x` and `y` must be properly aligned.\n ///\n@@ -355,7 +358,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * Both `x` and `y` must be [valid] for reads and writes of `count *\n+/// * Both `x` and `y` must be [valid] for both reads and writes of `count *\n ///   size_of::<T>()` bytes.\n ///\n /// * Both `x` and `y` must be properly aligned.\n@@ -471,10 +474,12 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `dst` must be [valid] for writes.\n+/// * `dst` must be [valid] for both reads and writes.\n ///\n /// * `dst` must be properly aligned.\n ///\n+/// * `dst` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// [valid]: ../ptr/index.html#safety\n@@ -514,6 +519,8 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// * `src` must be properly aligned. Use [`read_unaligned`] if this is not the\n ///   case.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n /// # Examples\n@@ -628,6 +635,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// * `src` must be [valid] for reads.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_unaligned` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership].\n@@ -922,6 +931,8 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// * `src` must be properly aligned.\n ///\n+/// * `src` must point to a properly initialized value of type `T`.\n+///\n /// Like [`read`], `read_volatile` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership]."}]}