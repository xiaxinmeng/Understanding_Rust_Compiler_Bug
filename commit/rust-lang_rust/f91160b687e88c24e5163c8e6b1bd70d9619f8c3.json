{"sha": "f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTE2MGI2ODdlODhjMjRlNTE2M2M4ZTZiMWJkNzBkOTYxOWY4YzM=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-08T01:06:26Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-09T21:37:04Z"}, "message": "json add enum encoder test case", "tree": {"sha": "3ee470b6e0629ba1e2e648523335d324cacb7ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee470b6e0629ba1e2e648523335d324cacb7ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "html_url": "https://github.com/rust-lang/rust/commit/f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91160b687e88c24e5163c8e6b1bd70d9619f8c3/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9495b980363eab634ec54bb177443e874d2508", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9495b980363eab634ec54bb177443e874d2508", "html_url": "https://github.com/rust-lang/rust/commit/0e9495b980363eab634ec54bb177443e874d2508"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "dce4f421caa48d3908c43d3299b0e38076277920", "filename": "src/libstd/json.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f91160b687e88c24e5163c8e6b1bd70d9619f8c3/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91160b687e88c24e5163c8e6b1bd70d9619f8c3/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=f91160b687e88c24e5163c8e6b1bd70d9619f8c3", "patch": "@@ -133,7 +133,8 @@ pub impl Encoder: serialize::Encoder {\n         f();\n         self.wr.write_char(']');\n     }\n-    fn emit_enum_variant_arg(&self, idx: uint, f: fn()) {\n+\n+    fn emit_enum_variant_arg(&self, _idx: uint, f: fn()) {\n         self.wr.write_char(',');\n         f();\n     }\n@@ -1182,6 +1183,8 @@ mod tests {\n \n     use core::result;\n     use core::hashmap::linear::LinearMap;\n+    use core::cmp;\n+\n \n     fn mk_object(items: &[(~str, Json)]) -> Json {\n         let mut d = ~LinearMap::new();\n@@ -1249,6 +1252,43 @@ mod tests {\n         assert a == b;\n     }\n \n+    // two fns copied from libsyntax/util/testing.rs.\n+    // Should they be in their own crate?\n+    pub pure fn check_equal_ptr<T : cmp::Eq> (given : &T, expected: &T) {\n+        if !((given == expected) && (expected == given )) {\n+            die!(fmt!(\"given %?, expected %?\",given,expected));\n+        }\n+    }\n+\n+    pub pure fn check_equal<T : cmp::Eq> (given : T, expected: T) {\n+        if !((given == expected) && (expected == given )) {\n+            die!(fmt!(\"given %?, expected %?\",given,expected));\n+        }\n+    }\n+\n+    // testing both auto_encode's calling patterns\n+    // and json... not sure where to put these tests.\n+    #[test]\n+    fn test_write_enum () {\n+        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bww : @io::Writer = (bw as @io::Writer);\n+        let encoder = (@Encoder(bww) as @serialize::Encoder);\n+        do encoder.emit_enum(~\"animal\") {\n+            do encoder.emit_enum_variant (~\"frog\",37,1242) {\n+                // name of frog:\n+                do encoder.emit_enum_variant_arg (0) {\n+                    encoder.emit_owned_str(~\"Henry\")\n+                }\n+                // mass of frog in grams:\n+                do encoder.emit_enum_variant_arg (1) {\n+                    encoder.emit_int(349);\n+                }\n+            }\n+        }\n+        check_equal(str::from_bytes(bw.bytes.data),\n+                    ~\"[\\\"frog\\\",\\\"Henry\\\",349]\");\n+    }\n+\n     #[test]\n     fn test_trailing_characters() {\n         assert from_str(~\"nulla\") =="}]}