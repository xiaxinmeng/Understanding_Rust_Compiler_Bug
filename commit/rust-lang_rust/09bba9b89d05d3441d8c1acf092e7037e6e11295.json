{"sha": "09bba9b89d05d3441d8c1acf092e7037e6e11295", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YmJhOWI4OWQwNWQzNDQxZDhjMWFjZjA5MmU3MDM3ZTZlMTEyOTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-03T22:25:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "introduce `QueryRegionConstraints` struct", "tree": {"sha": "141740b83ea1dbdb58f8c335d3b452938323ff2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141740b83ea1dbdb58f8c335d3b452938323ff2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09bba9b89d05d3441d8c1acf092e7037e6e11295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09bba9b89d05d3441d8c1acf092e7037e6e11295", "html_url": "https://github.com/rust-lang/rust/commit/09bba9b89d05d3441d8c1acf092e7037e6e11295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09bba9b89d05d3441d8c1acf092e7037e6e11295/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e66a96d586f2f0e25088ef19b455ea56c8aca17", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e66a96d586f2f0e25088ef19b455ea56c8aca17", "html_url": "https://github.com/rust-lang/rust/commit/7e66a96d586f2f0e25088ef19b455ea56c8aca17"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "f18eeca36102859f7c3f070c3f29614f4bb4facd", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -196,7 +196,15 @@ pub struct QueryResponse<'tcx, R> {\n \n #[derive(Clone, Debug, Default, HashStable)]\n pub struct QueryRegionConstraints<'tcx> {\n-    outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n+    pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n+}\n+\n+impl QueryRegionConstraints<'_> {\n+    /// Represents an empty (trivially true) set of region\n+    /// constraints.\n+    pub fn is_empty(&self) -> bool {\n+        self.outlives.is_empty()\n+    }\n }\n \n pub type Canonicalized<'tcx, V> = Canonical<'tcx, V>;"}, {"sha": "b4c46e71b16d290fb8d0d12b27144bbe62c29e6b", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -173,8 +173,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         debug!(\"ambig_errors = {:#?}\", ambig_errors);\n \n         let region_obligations = self.take_registered_region_obligations();\n-        let outlives_constraints = self.with_region_constraints(|region_constraints| {\n-            make_query_outlives(\n+        let region_constraints = self.with_region_constraints(|region_constraints| {\n+            make_query_region_constraints(\n                 tcx,\n                 region_obligations\n                     .iter()\n@@ -191,9 +191,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         Ok(QueryResponse {\n             var_values: inference_vars,\n-            region_constraints: QueryRegionConstraints {\n-                outlives: outlives_constraints,\n-            },\n+            region_constraints,\n             certainty,\n             value: answer,\n         })\n@@ -647,11 +645,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n /// Given the region obligations and constraints scraped from the infcx,\n /// creates query region constraints.\n-pub fn make_query_outlives<'tcx>(\n+pub fn make_query_region_constraints<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n-) -> Vec<QueryOutlivesConstraint<'tcx>> {\n+) -> QueryRegionConstraints<'tcx> {\n     let RegionConstraintData {\n         constraints,\n         verifys,\n@@ -690,5 +688,5 @@ pub fn make_query_outlives<'tcx>(\n         )\n         .collect();\n \n-    outlives\n+    QueryRegionConstraints { outlives }\n }"}, {"sha": "a2a5f3f950c7ac022186769fc0406f77f558d654", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use crate::traits::query::Fallible;\n \n use crate::infer::canonical::query_response;\n-use crate::infer::canonical::QueryOutlivesConstraint;\n+use crate::infer::canonical::QueryRegionConstraints;\n use std::rc::Rc;\n use syntax::source_map::DUMMY_SP;\n use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n@@ -39,7 +39,7 @@ where\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n+    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n         if cfg!(debug_assertions) {\n             info!(\"fully_perform({:?})\", self);\n         }\n@@ -62,7 +62,7 @@ where\n fn scrape_region_constraints<'tcx, R>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n-) -> Fallible<(R, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n+) -> Fallible<(R, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n     let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n     let dummy_body_id = ObligationCause::dummy().body_id;\n \n@@ -92,7 +92,7 @@ fn scrape_region_constraints<'tcx, R>(\n \n     let region_constraint_data = infcx.take_and_reset_region_constraints();\n \n-    let outlives = query_response::make_query_outlives(\n+    let region_constraints = query_response::make_query_region_constraints(\n         infcx.tcx,\n         region_obligations\n             .iter()\n@@ -101,9 +101,9 @@ fn scrape_region_constraints<'tcx, R>(\n         &region_constraint_data,\n     );\n \n-    if outlives.is_empty() {\n+    if region_constraints.is_empty() {\n         Ok((value, None))\n     } else {\n-        Ok((value, Some(Rc::new(outlives))))\n+        Ok((value, Some(Rc::new(region_constraints))))\n     }\n }"}, {"sha": "bf8cace3a1bb446097d70d63628dd92f127ca9c3", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n-    QueryOutlivesConstraint, QueryResponse,\n+    QueryRegionConstraints, QueryOutlivesConstraint, QueryResponse,\n };\n use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n@@ -32,7 +32,7 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)>;\n+    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)>;\n }\n \n /// \"Query type ops\" are type ops that are implemented using a\n@@ -140,16 +140,16 @@ where\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n-        let mut qrc = vec![];\n-        let r = Q::fully_perform_into(self, infcx, &mut qrc)?;\n+    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n+        let mut outlives = vec![];\n+        let r = Q::fully_perform_into(self, infcx, &mut outlives)?;\n \n         // Promote the final query-region-constraints into a\n         // (optional) ref-counted vector:\n-        let opt_qrc = if qrc.is_empty() {\n+        let opt_qrc = if outlives.is_empty() {\n             None\n         } else {\n-            Some(Rc::new(qrc))\n+            Some(Rc::new(QueryRegionConstraints { outlives }))\n         };\n \n         Ok((r, opt_qrc))"}, {"sha": "2a21da064fa13e400e66b39d440f54faca8baebf", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -2,7 +2,7 @@ use crate::borrow_check::nll::type_check::constraint_conversion;\n use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use crate::borrow_check::nll::ToRegionVid;\n-use rustc::infer::canonical::QueryOutlivesConstraint;\n+use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::InferCtxt;\n@@ -288,6 +288,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         }\n \n         for data in constraint_sets {\n+            let QueryRegionConstraints { outlives } = &*data;\n             constraint_conversion::ConstraintConversion::new(\n                 self.infcx,\n                 &self.universal_regions,\n@@ -297,7 +298,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                 Locations::All(DUMMY_SP),\n                 ConstraintCategory::Internal,\n                 &mut self.constraints,\n-            ).convert_all(&data);\n+            ).convert_all(outlives);\n         }\n \n         CreateResult {\n@@ -311,7 +312,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n     /// either the return type of the MIR or one of its arguments. At\n     /// the same time, compute and add any implied bounds that come\n     /// from this local.\n-    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>> {\n+    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<QueryRegionConstraints<'tcx>>> {\n         debug!(\"add_implied_bounds(ty={:?})\", ty);\n         let (bounds, constraints) =\n             self.param_env"}, {"sha": "f160f658f557640e68731c9b211cf29e19e6025d", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -6,7 +6,7 @@ use crate::borrow_check::nll::type_check::TypeChecker;\n use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n-use rustc::infer::canonical::QueryOutlivesConstraint;\n+use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Body};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n@@ -88,7 +88,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n \n struct DropData<'tcx> {\n     dropck_result: DropckOutlivesResult<'tcx>,\n-    region_constraint_data: Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>,\n+    region_constraint_data: Option<Rc<QueryRegionConstraints<'tcx>>>,\n }\n \n struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {"}, {"sha": "758c8df1d186aa840a488fe125984fe7992e77ea", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bba9b89d05d3441d8c1acf092e7037e6e11295/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=09bba9b89d05d3441d8c1acf092e7037e6e11295", "patch": "@@ -23,7 +23,7 @@ use crate::dataflow::MaybeInitializedPlaces;\n use either::Either;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::canonical::QueryOutlivesConstraint;\n+use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1093,13 +1093,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         locations: Locations,\n         category: ConstraintCategory,\n-        data: &[QueryOutlivesConstraint<'tcx>],\n+        data: &QueryRegionConstraints<'tcx>,\n     ) {\n         debug!(\n             \"push_region_constraints: constraints generated at {:?} are {:#?}\",\n             locations, data\n         );\n \n+        let QueryRegionConstraints { outlives } = data;\n+\n         constraint_conversion::ConstraintConversion::new(\n             self.infcx,\n             self.borrowck_context.universal_regions,\n@@ -1109,7 +1111,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             locations,\n             category,\n             &mut self.borrowck_context.constraints,\n-        ).convert_all(&data);\n+        ).convert_all(outlives);\n     }\n \n     /// Convenient wrapper around `relate_tys::relate_types` -- see\n@@ -2508,10 +2510,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         location: Location,\n     ) -> ty::InstantiatedPredicates<'tcx> {\n         if let Some(closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements {\n-            let closure_constraints =\n-                closure_region_requirements.apply_requirements(tcx, def_id, substs);\n+            let closure_constraints = QueryRegionConstraints {\n+                outlives: closure_region_requirements.apply_requirements(tcx, def_id, substs)\n+            };\n \n             let bounds_mapping = closure_constraints\n+                .outlives\n                 .iter()\n                 .enumerate()\n                 .filter_map(|(idx, constraint)| {"}]}