{"sha": "8741770471d08c78780fd6c22c18c0cf28fcf074", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDE3NzA0NzFkMDhjNzg3ODBmZDZjMjJjMThjMGNmMjhmY2YwNzQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-19T04:47:43Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-19T05:33:32Z"}, "message": "Update size_hint()s on std::iterator Iterators\n\nAdd size_hint() to a few Iterators that were missing it.\n\nUpdate a couple of existing size_hint()s to use checked_add() instead of\nsaturating_add() for the upper bound.", "tree": {"sha": "a0910f8d1689131289eba3fe363041047a6e6664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0910f8d1689131289eba3fe363041047a6e6664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8741770471d08c78780fd6c22c18c0cf28fcf074", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8741770471d08c78780fd6c22c18c0cf28fcf074", "html_url": "https://github.com/rust-lang/rust/commit/8741770471d08c78780fd6c22c18c0cf28fcf074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8741770471d08c78780fd6c22c18c0cf28fcf074/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "html_url": "https://github.com/rust-lang/rust/commit/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "7425da973688b6d964da35853dbd2ee92380fffc", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8741770471d08c78780fd6c22c18c0cf28fcf074/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8741770471d08c78780fd6c22c18c0cf28fcf074/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=8741770471d08c78780fd6c22c18c0cf28fcf074", "patch": "@@ -18,7 +18,7 @@ implementing the `Iterator` trait.\n */\n \n use cmp;\n-use num::{Zero, One, Integer, Saturating};\n+use num::{Zero, One, Integer, CheckedAdd, Saturating};\n use option::{Option, Some, None};\n use ops::{Add, Mul, Sub};\n use cmp::Ord;\n@@ -817,7 +817,7 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n         let lower = a_lower.saturating_add(b_lower);\n \n         let upper = match (a_upper, b_upper) {\n-            (Some(x), Some(y)) => Some(x.saturating_add(y)),\n+            (Some(x), Some(y)) => x.checked_add(&y),\n             _ => None\n         };\n \n@@ -1094,22 +1094,34 @@ impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n         if self.peeked.is_some() { self.peeked.take() }\n         else { self.iter.next() }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (lo, hi) = self.iter.size_hint();\n+        if self.peeked.is_some() {\n+            let lo = lo.saturating_add(1);\n+            let hi = match hi {\n+                Some(x) => x.checked_add(&1),\n+                None => None\n+            };\n+            (lo, hi)\n+        } else {\n+            (lo, hi)\n+        }\n+    }\n }\n \n impl<'self, A, T: Iterator<A>> Peekable<A, T> {\n     /// Return a reference to the next element of the iterator with out advancing it,\n     /// or None if the iterator is exhausted.\n     #[inline]\n     pub fn peek(&'self mut self) -> Option<&'self A> {\n+        if self.peeked.is_none() {\n+            self.peeked = self.iter.next();\n+        }\n         match self.peeked {\n             Some(ref value) => Some(value),\n-            None => {\n-                self.peeked = self.iter.next();\n-                match self.peeked {\n-                    Some(ref value) => Some(value),\n-                    None => None,\n-                }\n-            },\n+            None => None,\n         }\n     }\n }\n@@ -1355,7 +1367,7 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n         let (blo, bhi) = self.backiter.map_default((0, Some(0)), |it| it.size_hint());\n         let lo = flo.saturating_add(blo);\n         match (self.iter.size_hint(), fhi, bhi) {\n-            ((0, Some(0)), Some(a), Some(b)) => (lo, Some(a.saturating_add(b))),\n+            ((0, Some(0)), Some(a), Some(b)) => (lo, a.checked_add(&b)),\n             _ => (lo, None)\n         }\n     }\n@@ -1461,6 +1473,12 @@ impl<'self, A, St> Iterator<A> for Unfoldr<'self, A, St> {\n     fn next(&mut self) -> Option<A> {\n         (self.f)(&mut self.state)\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        // no possible known bounds at this point\n+        (0, None)\n+    }\n }\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n@@ -1504,6 +1522,9 @@ impl<A: Add<A, A> + Ord + Clone> Iterator<A> for Range<A> {\n             None\n         }\n     }\n+\n+    // FIXME: #8606 Implement size_hint() on Range\n+    // Blocked on #8605 Need numeric trait for converting to `Option<uint>`\n }\n \n impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {"}]}