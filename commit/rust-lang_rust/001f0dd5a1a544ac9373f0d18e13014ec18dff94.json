{"sha": "001f0dd5a1a544ac9373f0d18e13014ec18dff94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMWYwZGQ1YTFhNTQ0YWM5MzczZjBkMThlMTMwMTRlYzE4ZGZmOTQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-22T02:21:45Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T16:55:31Z"}, "message": "rustdoc: Show basic type layout information\n\nRight now it just shows the size.", "tree": {"sha": "c2ee9c403d1a3c505ccd4f72fb3daee4edcf35f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ee9c403d1a3c505ccd4f72fb3daee4edcf35f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001f0dd5a1a544ac9373f0d18e13014ec18dff94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001f0dd5a1a544ac9373f0d18e13014ec18dff94", "html_url": "https://github.com/rust-lang/rust/commit/001f0dd5a1a544ac9373f0d18e13014ec18dff94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001f0dd5a1a544ac9373f0d18e13014ec18dff94/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bafe96272bf22cd191c6a01741184b60063292d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bafe96272bf22cd191c6a01741184b60063292d", "html_url": "https://github.com/rust-lang/rust/commit/2bafe96272bf22cd191c6a01741184b60063292d"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "9b7006150b7f10b813525fb48c6d00a8627011f5", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/001f0dd5a1a544ac9373f0d18e13014ec18dff94/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001f0dd5a1a544ac9373f0d18e13014ec18dff94/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=001f0dd5a1a544ac9373f0d18e13014ec18dff94", "patch": "@@ -846,6 +846,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     });\n \n     document(w, cx, it, None);\n+\n     let mut fields = s\n         .fields\n         .iter()\n@@ -880,7 +881,9 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             document(w, cx, field, Some(it));\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_ty_layout(w, cx, def_id);\n }\n \n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n@@ -940,6 +943,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n     });\n \n     document(w, cx, it, None);\n+\n     if !e.variants.is_empty() {\n         write!(\n             w,\n@@ -1014,7 +1018,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             render_stability_since(w, variant, it, cx.tcx());\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_ty_layout(w, cx, def_id);\n }\n \n fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Macro) {\n@@ -1114,6 +1120,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n     });\n \n     document(w, cx, it, None);\n+\n     let mut fields = s\n         .fields\n         .iter()\n@@ -1152,7 +1159,9 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             }\n         }\n     }\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    let def_id = it.def_id.expect_real();\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+    document_ty_layout(w, cx, def_id);\n }\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n@@ -1522,3 +1531,27 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n         w.write_str(\"</div></details>\");\n     }\n }\n+\n+fn document_ty_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n+    let param_env = cx.tcx().param_env(ty_def_id);\n+    let ty = cx.tcx().type_of(ty_def_id);\n+    match cx.tcx().layout_of(param_env.and(ty)) {\n+        Ok(ty_layout) => {\n+            writeln!(w, r#\"<h2 class=\"small-section-header\">Layout</h2>\"#);\n+            writeln!(w, \"<div>\");\n+            if ty_layout.layout.abi.is_unsized() {\n+                writeln!(w, \"<strong>Sized:</strong> (unsized)\");\n+            } else {\n+                writeln!(\n+                    w,\n+                    \"<strong>Size:</strong> {size} byte{pl}\",\n+                    size = ty_layout.layout.size.bytes(),\n+                    pl = if ty_layout.layout.size.bytes() == 1 { \"\" } else { \"s\" },\n+                );\n+            }\n+            writeln!(w, \"</div>\");\n+        }\n+        // FIXME: should we crash instead? or report an error?\n+        Err(_layout_err) => {}\n+    }\n+}"}]}