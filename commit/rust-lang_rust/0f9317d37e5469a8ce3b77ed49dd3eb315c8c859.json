{"sha": "0f9317d37e5469a8ce3b77ed49dd3eb315c8c859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTMxN2QzN2U1NDY5YThjZTNiNzdlZDQ5ZGQzZWIzMTVjOGM4NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-09T01:30:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-09T01:30:02Z"}, "message": "Auto merge of #43595 - oyvindln:master, r=aturon\n\nAdd an overflow check in the Iter::next() impl for Range<_> to help with vectorization.\n\nThis helps with vectorization in some cases, such as (0..u16::MAX).collect::<Vec<u16>>(),\n as LLVM is able to change the loop condition to use equality instead of less than and should help with #43124. (See also my [last comment](https://github.com/rust-lang/rust/issues/43124#issuecomment-319098625) there.) This PR makes collect on ranges of u16, i16, i8, and u8 **significantly** faster (at least on x86-64 and i686), and pretty close, though not quite equivalent to a [manual unsafe implementation](https://is.gd/nkoecB). 32 ( and 64-bit values on x86-64) bit values were already vectorized without this change, and they still are. This PR doesn't seem to help with 64-bit values on i686, as they still don't vectorize well compared to doing a manual loop.\n\nI'm a bit unsure if this was the best way of implementing this, I tried to do it with as little changes as possible and avoided changing the step trait and the behavior in RangeFrom (I'll leave that for others like #43127 to discuss wider changes to the trait). I tried simply changing the comparison to `self.start != self.end` though that made the compiler segfault when compiling stage0, so I went with this method instead for now.\n\nAs for `next_back()`, reverse ranges seem to optimise properly already.", "tree": {"sha": "14608f3a3286b745c8f7f0691cf8004829c282f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14608f3a3286b745c8f7f0691cf8004829c282f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859", "html_url": "https://github.com/rust-lang/rust/commit/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78efb23586407878606e6582b7a23486c099d35e", "url": "https://api.github.com/repos/rust-lang/rust/commits/78efb23586407878606e6582b7a23486c099d35e", "html_url": "https://github.com/rust-lang/rust/commit/78efb23586407878606e6582b7a23486c099d35e"}, {"sha": "4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "html_url": "https://github.com/rust-lang/rust/commit/4bb9a8b4ac27b48fb7989ef2900ec12a0face475"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "73d518b570a113df576e597c906efa6068499d3d", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9317d37e5469a8ce3b77ed49dd3eb315c8c859/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=0f9317d37e5469a8ce3b77ed49dd3eb315c8c859", "patch": "@@ -214,9 +214,16 @@ impl<A: Step> Iterator for ops::Range<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            let mut n = self.start.add_one();\n-            mem::swap(&mut n, &mut self.start);\n-            Some(n)\n+            // We check for overflow here, even though it can't actually\n+            // happen. Adding this check does however help llvm vectorize loops\n+            // for some ranges that don't get vectorized otherwise,\n+            // and this won't actually result in an extra check in an optimized build.\n+            if let Some(mut n) = self.start.add_usize(1) {\n+                mem::swap(&mut n, &mut self.start);\n+                Some(n)\n+            } else {\n+                None\n+            }\n         } else {\n             None\n         }"}]}