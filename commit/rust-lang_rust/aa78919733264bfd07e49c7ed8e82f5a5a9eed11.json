{"sha": "aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzg5MTk3MzMyNjRiZmQwN2U0OWM3ZWQ4ZTgyZjVhNWE5ZWVkMTE=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-02T17:36:58Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-06T15:44:50Z"}, "message": "mir-borrowck: print values in error messages in the same way that the AST borrowck\n\n- Print fields with `.name` rather than `.<num>`\n- Autoderef values if followed by a field or an index", "tree": {"sha": "eae9cff90f3253a0fa9f0e6c9e596dec8145ff90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae9cff90f3253a0fa9f0e6c9e596dec8145ff90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "html_url": "https://github.com/rust-lang/rust/commit/aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa78919733264bfd07e49c7ed8e82f5a5a9eed11/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c", "html_url": "https://github.com/rust-lang/rust/commit/a8feaee5b6b54c03f49481fe04a9ad9e8f659f7c"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "f4bf280cd25ce8522cd087ba878f3a75043c57ba", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/aa78919733264bfd07e49c7ed8e82f5a5a9eed11/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa78919733264bfd07e49c7ed8e82f5a5a9eed11/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=aa78919733264bfd07e49c7ed8e82f5a5a9eed11", "patch": "@@ -1053,12 +1053,12 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     // End-user visible description of `lvalue`\n     fn describe_lvalue(&self, lvalue: &Lvalue) -> String {\n         let mut buf = String::new();\n-        self.append_lvalue_to_string(lvalue, &mut buf);\n+        self.append_lvalue_to_string(lvalue, &mut buf, None);\n         buf\n     }\n \n     // Appends end-user visible description of `lvalue` to `buf`.\n-    fn append_lvalue_to_string(&self, lvalue: &Lvalue, buf: &mut String) {\n+    fn append_lvalue_to_string(&self, lvalue: &Lvalue, buf: &mut String, autoderef: Option<bool>) {\n         match *lvalue {\n             Lvalue::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n@@ -1071,15 +1071,25 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                 buf.push_str(&format!(\"{}\", &self.tcx.item_name(static_.def_id)));\n             }\n             Lvalue::Projection(ref proj) => {\n+                let mut autoderef = autoderef.unwrap_or(false);\n                 let (prefix, suffix, index_operand) = match proj.elem {\n-                    ProjectionElem::Deref =>\n-                        (\"(*\", format!(\")\"), None),\n+                    ProjectionElem::Deref => {\n+                        if autoderef {\n+                            (\"\", format!(\"\"), None)\n+                        } else {\n+                            (\"(*\", format!(\")\"), None)\n+                        }\n+                    },\n                     ProjectionElem::Downcast(..) =>\n                         (\"\",   format!(\"\"), None), // (dont emit downcast info)\n-                    ProjectionElem::Field(field, _ty) =>\n-                        (\"\",   format!(\".{}\", field.index()), None), // FIXME: report name of field\n-                    ProjectionElem::Index(index) =>\n-                        (\"\",   format!(\"\"), Some(index)),\n+                    ProjectionElem::Field(field, _ty) => {\n+                        autoderef = true;\n+                        (\"\", format!(\".{}\", self.describe_field(&proj.base, field.index())), None)\n+                    },\n+                    ProjectionElem::Index(index) => {\n+                        autoderef = true;\n+                        (\"\",   format!(\"\"), Some(index))\n+                    },\n                     ProjectionElem::ConstantIndex { offset, min_length, from_end: true } =>\n                         (\"\",   format!(\"[{} of {}]\", offset, min_length), None),\n                     ProjectionElem::ConstantIndex { offset, min_length, from_end: false } =>\n@@ -1092,10 +1102,10 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                         (\"\",   format!(\"[{}:-{}]\", from, to), None),\n                 };\n                 buf.push_str(prefix);\n-                self.append_lvalue_to_string(&proj.base, buf);\n+                self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n                 if let Some(index) = index_operand {\n                     buf.push_str(\"[\");\n-                    self.append_lvalue_to_string(&Lvalue::Local(index), buf);\n+                    self.append_lvalue_to_string(&Lvalue::Local(index), buf, None);\n                     buf.push_str(\"]\");\n                 } else {\n                     buf.push_str(&suffix);\n@@ -1104,6 +1114,77 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         }\n     }\n \n+    // End-user visible description of the `field_index`nth field of `base`\n+    fn describe_field(&self, base: &Lvalue, field_index: usize) -> String {\n+        match *base {\n+            Lvalue::Local(local) => {\n+                let local = &self.mir.local_decls[local];\n+                self.describe_field_from_ty(&local.ty, field_index)\n+            },\n+            Lvalue::Static(ref static_) => {\n+                self.describe_field_from_ty(&static_.ty, field_index)\n+            },\n+            Lvalue::Projection(ref proj) => {\n+                match proj.elem {\n+                    ProjectionElem::Deref =>\n+                        self.describe_field(&proj.base, field_index),\n+                    ProjectionElem::Downcast(..) => {\n+                        debug!(\"End-user description not implemented for field of projection {:?}\",\n+                               proj);\n+                        format!(\"<downcast>{}\", field_index)\n+                    },\n+                    ProjectionElem::Field(..) => {\n+                        debug!(\"End-user description not implemented for field of projection {:?}\",\n+                               proj);\n+                        format!(\"<field>{}\", field_index)\n+                    },\n+                    ProjectionElem::Index(..) => {\n+                        debug!(\"End-user description not implemented for field of projection {:?}\",\n+                               proj);\n+                        format!(\"<index>{}\", field_index)\n+                    },\n+                    ProjectionElem::ConstantIndex { .. } => {\n+                        debug!(\"End-user description not implemented for field of projection {:?}\",\n+                               proj);\n+                        format!(\"<constant_index>{}\", field_index)\n+                    },\n+                    ProjectionElem::Subslice { .. } => {\n+                        debug!(\"End-user description not implemented for field of projection {:?}\",\n+                               proj);\n+                        format!(\"<subslice>{}\", field_index)\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // End-user visible description of the `field_index`nth field of `ty`\n+    fn describe_field_from_ty(&self, ty: &ty::Ty, field_index: usize) -> String {\n+        if ty.is_box() {\n+            // If the type is a box, the field is described from the boxed type\n+            self.describe_field_from_ty(&ty.boxed_ty(), field_index)\n+        }\n+        else {\n+            match ty.sty {\n+                ty::TyAdt(def, _) => {\n+                    if def.is_enum() {\n+                        format!(\"{}\", field_index)\n+                    }\n+                    else {\n+                        format!(\"{}\", def.struct_variant().fields[field_index].name)\n+                    }\n+                },\n+                ty::TyTuple(_, _) => {\n+                    format!(\"{}\", field_index)\n+                },\n+                _ => {\n+                    debug!(\"End-user description not implemented for field of type {:?}\", ty.sty);\n+                    format!(\"<ty>{}\", field_index)\n+                }\n+            }\n+        }\n+    }\n+\n     // Retrieve span of given borrow from the current MIR representation\n     fn retrieve_borrow_span(&self, borrow: &BorrowData) -> Span {\n         self.mir.basic_blocks()[borrow.location.block]"}]}