{"sha": "b9c21078c5d738c12c9ae33491414b06907ebb48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzIxMDc4YzVkNzM4YzEyYzlhZTMzNDkxNDE0YjA2OTA3ZWJiNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-29T13:12:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T13:12:43Z"}, "message": "Merge #5568\n\n5568: Remove dead code r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "631c3a685be6d15eaa868d89185770814ee21ca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631c3a685be6d15eaa868d89185770814ee21ca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c21078c5d738c12c9ae33491414b06907ebb48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIXXLCRBK7hj4Ov3rIwAAdHIIAIN+6ULBdRmgMQq00vbB8hqb\nQSjquD+uY6pUn8FJtHnD3yI1TsM1BZRBaGzix5FL1c9TUB/9aVXKwKRPvguMzJO7\ne5LHiRlNchudgTojh1AaMXewdQmBNgdJRwI7CWr2ffanXeqnZQuhI3ZovB0s2bwi\nlwSp3sB0RILK9RjH/pct7bu9Vhcc9XP4pgXLoAgG0lDI6Oc4nc0XvFi+sf3V1+hc\nb3im9belj4GSYf631IPRFnH3qn3XJUesn3dy8QknNMvMBJFmtlclesbbtUb4Ypu4\ncLEOvn/McQDSaZgQjjC4l7PkAo5JHSkHWs1NM1I43PIsk26KEq9NbG6Jr52qGg4=\n=fv83\n-----END PGP SIGNATURE-----\n", "payload": "tree 631c3a685be6d15eaa868d89185770814ee21ca1\nparent e35804355797a50195718918efc6f7272786d62e\nparent dc18ff51c38a9e602832508f4a3676176dbe113d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596028363 +0000\ncommitter GitHub <noreply@github.com> 1596028363 +0000\n\nMerge #5568\n\n5568: Remove dead code r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c21078c5d738c12c9ae33491414b06907ebb48", "html_url": "https://github.com/rust-lang/rust/commit/b9c21078c5d738c12c9ae33491414b06907ebb48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c21078c5d738c12c9ae33491414b06907ebb48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35804355797a50195718918efc6f7272786d62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35804355797a50195718918efc6f7272786d62e", "html_url": "https://github.com/rust-lang/rust/commit/e35804355797a50195718918efc6f7272786d62e"}, {"sha": "dc18ff51c38a9e602832508f4a3676176dbe113d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc18ff51c38a9e602832508f4a3676176dbe113d", "html_url": "https://github.com/rust-lang/rust/commit/dc18ff51c38a9e602832508f4a3676176dbe113d"}], "stats": {"total": 54, "additions": 0, "deletions": 54}, "files": [{"sha": "01508ed8824c52207b54f80bfa4d4983425d873c", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b9c21078c5d738c12c9ae33491414b06907ebb48/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c21078c5d738c12c9ae33491414b06907ebb48/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b9c21078c5d738c12c9ae33491414b06907ebb48", "patch": "@@ -1929,7 +1929,6 @@ pub struct TypeParamList {\n }\n impl TypeParamList {\n     pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n     pub fn type_params(&self) -> AstChildren<TypeParam> { support::children(&self.syntax) }\n     pub fn lifetime_params(&self) -> AstChildren<LifetimeParam> { support::children(&self.syntax) }\n     pub fn const_params(&self) -> AstChildren<ConstParam> { support::children(&self.syntax) }\n@@ -2601,13 +2600,6 @@ pub enum NominalDef {\n impl ast::NameOwner for NominalDef {}\n impl ast::TypeParamsOwner for NominalDef {}\n impl ast::AttrsOwner for NominalDef {}\n-/// Any kind of **declared** generic parameter\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum GenericParam {\n-    LifetimeParam(LifetimeParam),\n-    TypeParam(TypeParam),\n-    ConstParam(ConstParam),\n-}\n /// Any kind of generic argument passed at instantiation site\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericArg {\n@@ -4155,39 +4147,6 @@ impl AstNode for NominalDef {\n         }\n     }\n }\n-impl From<LifetimeParam> for GenericParam {\n-    fn from(node: LifetimeParam) -> GenericParam { GenericParam::LifetimeParam(node) }\n-}\n-impl From<TypeParam> for GenericParam {\n-    fn from(node: TypeParam) -> GenericParam { GenericParam::TypeParam(node) }\n-}\n-impl From<ConstParam> for GenericParam {\n-    fn from(node: ConstParam) -> GenericParam { GenericParam::ConstParam(node) }\n-}\n-impl AstNode for GenericParam {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LIFETIME_PARAM | TYPE_PARAM | CONST_PARAM => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            LIFETIME_PARAM => GenericParam::LifetimeParam(LifetimeParam { syntax }),\n-            TYPE_PARAM => GenericParam::TypeParam(TypeParam { syntax }),\n-            CONST_PARAM => GenericParam::ConstParam(ConstParam { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            GenericParam::LifetimeParam(it) => &it.syntax,\n-            GenericParam::TypeParam(it) => &it.syntax,\n-            GenericParam::ConstParam(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<LifetimeArg> for GenericArg {\n     fn from(node: LifetimeArg) -> GenericArg { GenericArg::LifetimeArg(node) }\n }\n@@ -4855,11 +4814,6 @@ impl std::fmt::Display for NominalDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for GenericParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for GenericArg {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "8d1ffc5b51fb43f857c989d0ab4a95e421940ab9", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9c21078c5d738c12c9ae33491414b06907ebb48/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c21078c5d738c12c9ae33491414b06907ebb48/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=b9c21078c5d738c12c9ae33491414b06907ebb48", "patch": "@@ -1630,7 +1630,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n             /// [Reference](https://doc.rust-lang.org/reference/items/generics.html)\n             struct TypeParamList {\n                 T![<],\n-                generic_params: [GenericParam],\n                 type_params: [TypeParam],\n                 lifetime_params: [LifetimeParam],\n                 const_params: [ConstParam],\n@@ -2102,13 +2101,6 @@ pub(crate) fn rust_ast() -> AstSrc {\n                 StructDef, EnumDef, UnionDef,\n             }\n \n-            /// Any kind of **declared** generic parameter\n-            enum GenericParam {\n-                LifetimeParam,\n-                TypeParam,\n-                ConstParam\n-            }\n-\n             /// Any kind of generic argument passed at instantiation site\n             enum GenericArg {\n                 LifetimeArg,"}]}