{"sha": "907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2QyYTFhZWIyNjE1MWNjODFkZmExNDhlODc0ZTRmZTUwZDFhMTQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-31T03:14:05Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-31T03:14:05Z"}, "message": "make `alloc` and `collections` compilable for thumbv6m-none-eabi\n\nby cfging away `alloc::Arc` and changing OOM to abort for this target", "tree": {"sha": "07abb5a8862b2c913882e43524f6871604921bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07abb5a8862b2c913882e43524f6871604921bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "html_url": "https://github.com/rust-lang/rust/commit/907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907d2a1aeb26151cc81dfa148e874e4fe50d1a14/comments", "author": null, "committer": null, "parents": [{"sha": "ea20ab107eb03179e82ff42109d0aaa62aba48b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea20ab107eb03179e82ff42109d0aaa62aba48b8", "html_url": "https://github.com/rust-lang/rust/commit/ea20ab107eb03179e82ff42109d0aaa62aba48b8"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "dd22894ea95b291d643191fa1441ce532ca97c09", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907d2a1aeb26151cc81dfa148e874e4fe50d1a14/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907d2a1aeb26151cc81dfa148e874e4fe50d1a14/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "patch": "@@ -74,6 +74,7 @@\n \n #![feature(allocator)]\n #![feature(box_syntax)]\n+#![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n@@ -117,6 +118,7 @@ mod boxed {\n }\n #[cfg(test)]\n mod boxed_test;\n+#[cfg(target_has_atomic = \"ptr\")]\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;"}, {"sha": "afdc19678dc19e88c6f0f2f9da65c9cee5debf15", "filename": "src/liballoc/oom.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/907d2a1aeb26151cc81dfa148e874e4fe50d1a14/src%2Fliballoc%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907d2a1aeb26151cc81dfa148e874e4fe50d1a14/src%2Fliballoc%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Foom.rs?ref=907d2a1aeb26151cc81dfa148e874e4fe50d1a14", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(target_has_atomic = \"ptr\")]\n use core::sync::atomic::{AtomicPtr, Ordering};\n+#[cfg(target_has_atomic = \"ptr\")]\n use core::mem;\n use core::intrinsics;\n \n+#[cfg(target_has_atomic = \"ptr\")]\n static OOM_HANDLER: AtomicPtr<()> = AtomicPtr::new(default_oom_handler as *mut ());\n \n fn default_oom_handler() -> ! {\n@@ -21,6 +24,7 @@ fn default_oom_handler() -> ! {\n }\n \n /// Common out-of-memory routine\n+#[cfg(target_has_atomic = \"ptr\")]\n #[cold]\n #[inline(never)]\n #[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n@@ -31,10 +35,21 @@ pub fn oom() -> ! {\n     handler();\n }\n \n+/// Common out-of-memory routine\n+#[cfg(not(target_has_atomic = \"ptr\"))]\n+#[cold]\n+#[inline(never)]\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+           issue = \"27700\")]\n+pub fn oom() -> ! {\n+    default_oom_handler()\n+}\n+\n /// Set a custom handler for out-of-memory conditions\n ///\n /// To avoid recursive OOM failures, it is critical that the OOM handler does\n /// not allocate any memory itself.\n+#[cfg(target_has_atomic = \"ptr\")]\n #[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n            issue = \"27700\")]\n pub fn set_oom_handler(handler: fn() -> !) {"}]}