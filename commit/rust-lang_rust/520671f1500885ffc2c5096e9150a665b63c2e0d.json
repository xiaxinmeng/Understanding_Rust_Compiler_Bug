{"sha": "520671f1500885ffc2c5096e9150a665b63c2e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDY3MWYxNTAwODg1ZmZjMmM1MDk2ZTkxNTBhNjY1YjYzYzJlMGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-07-25T02:44:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-17T04:53:20Z"}, "message": "move most of front to libsyntax", "tree": {"sha": "5ed7ce68faaa724c8c6655f4edc325aa533239d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed7ce68faaa724c8c6655f4edc325aa533239d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/520671f1500885ffc2c5096e9150a665b63c2e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/520671f1500885ffc2c5096e9150a665b63c2e0d", "html_url": "https://github.com/rust-lang/rust/commit/520671f1500885ffc2c5096e9150a665b63c2e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/520671f1500885ffc2c5096e9150a665b63c2e0d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b0f79235c919b3ab959fb79247d2997bd63e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b0f79235c919b3ab959fb79247d2997bd63e0", "html_url": "https://github.com/rust-lang/rust/commit/b75b0f79235c919b3ab959fb79247d2997bd63e0"}], "stats": {"total": 159, "additions": 89, "deletions": 70}, "files": [{"sha": "4d73408cc6ee04c38d8e9ce6cd185171f2807de2", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -166,7 +166,7 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n     }\n \n     if sess.show_span() {\n-        front::show_span::run(sess, &krate);\n+        syntax::show_span::run(sess.diagnostic(), &krate);\n     }\n \n     krate\n@@ -209,7 +209,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // baz! should not use this definition unless foo is enabled.\n \n     krate = time(time_passes, \"configuration 1\", krate, |krate|\n-                 front::config::strip_unconfigured_items(krate));\n+                 syntax::config::strip_unconfigured_items(krate));\n \n     let mut addl_plugins = Some(addl_plugins);\n     let Plugins { macros, registrars }\n@@ -290,10 +290,13 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     // strip again, in case expansion added anything with a #[cfg].\n     krate = time(time_passes, \"configuration 2\", krate, |krate|\n-                 front::config::strip_unconfigured_items(krate));\n+                 syntax::config::strip_unconfigured_items(krate));\n \n     krate = time(time_passes, \"maybe building test harness\", krate, |krate|\n-                 front::test::modify_for_testing(sess, krate));\n+                 syntax::test::modify_for_testing(&sess.parse_sess,\n+                                                  &sess.opts.cfg,\n+                                                  krate,\n+                                                  sess.diagnostic()));\n \n     krate = time(time_passes, \"prelude injection\", krate, |krate|\n                  front::std_inject::maybe_inject_prelude(sess, krate));"}, {"sha": "2d28a9294e4fd93d8930f451de3d46029af875c6", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -47,7 +47,6 @@ pub struct Session {\n     pub working_dir: Path,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n-    pub node_id: Cell<ast::NodeId>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub crate_metadata: RefCell<Vec<String>>,\n     pub features: front::feature_gate::Features,\n@@ -129,17 +128,10 @@ impl Session {\n         lints.insert(id, vec!((lint_id, sp, msg)));\n     }\n     pub fn next_node_id(&self) -> ast::NodeId {\n-        self.reserve_node_ids(1)\n+        self.parse_sess.next_node_id()\n     }\n     pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n-        let v = self.node_id.get();\n-\n-        match v.checked_add(&count) {\n-            Some(next) => { self.node_id.set(next); }\n-            None => self.bug(\"Input too large, ran out of node ids!\")\n-        }\n-\n-        v\n+        self.parse_sess.reserve_node_ids(count)\n     }\n     pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler {\n         &self.parse_sess.span_diagnostic\n@@ -251,7 +243,6 @@ pub fn build_session_(sopts: config::Options,\n         working_dir: os::getcwd(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap::new()),\n-        node_id: Cell::new(1),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n         features: front::feature_gate::Features::new(),"}, {"sha": "dade485f7011709a36e98e62f3a9a78becc9b77b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -117,11 +117,8 @@ pub mod middle {\n }\n \n pub mod front {\n-    pub mod config;\n-    pub mod test;\n     pub mod std_inject;\n     pub mod feature_gate;\n-    pub mod show_span;\n }\n \n pub mod metadata;"}, {"sha": "9576cf26f5880dd6574578b1855a5da3eb3f850c", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -15,6 +15,7 @@ use ast_util::PostExpansionMethod;\n use codemap::{DUMMY_SP, Span, Spanned};\n use fold::Folder;\n use parse::token;\n+use parse::ParseSess;\n use print::pprust;\n use visit::{mod, Visitor};\n \n@@ -250,6 +251,7 @@ pub struct Map<'ast> {\n }\n \n impl<'ast> Map<'ast> {\n+impl Map {\n     fn entry_count(&self) -> uint {\n         self.map.borrow().len()\n     }"}, {"sha": "cb96cd911b5c68a1dd6d92e94ee78b68ea1517e4", "filename": "src/libsyntax/config.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::fold::Folder;\n-use syntax::{ast, fold, attr};\n-use syntax::codemap::Spanned;\n-use syntax::ptr::P;\n+use fold::Folder;\n+use {ast, fold, attr};\n+use codemap::Spanned;\n+use ptr::P;\n \n /// A folder that strips out items that do not belong in the current\n /// configuration.", "previous_filename": "src/librustc/front/config.rs"}, {"sha": "ff481dd7299152172ddc371290d717250bcfe95b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -59,12 +59,15 @@ pub mod ast_map;\n pub mod ast_util;\n pub mod attr;\n pub mod codemap;\n+pub mod config;\n pub mod crateid;\n pub mod diagnostic;\n pub mod fold;\n pub mod owned_slice;\n pub mod parse;\n pub mod ptr;\n+pub mod show_span;\n+pub mod test;\n pub mod visit;\n \n pub mod print {"}, {"sha": "506b607d02c5daa18da0e1a2f62b3a46e16cca6e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -37,19 +37,38 @@ pub struct ParseSess {\n     pub span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<Path>>,\n+    pub node_id: Cell<ast::NodeId>,\n }\n \n pub fn new_parse_sess() -> ParseSess {\n     ParseSess {\n         span_diagnostic: mk_span_handler(default_handler(Auto, None), CodeMap::new()),\n         included_mod_stack: RefCell::new(Vec::new()),\n+        node_id: Cell::new(1),\n     }\n }\n \n pub fn new_parse_sess_special_handler(sh: SpanHandler) -> ParseSess {\n     ParseSess {\n         span_diagnostic: sh,\n         included_mod_stack: RefCell::new(Vec::new()),\n+        node_id: Cell::new(1),\n+    }\n+}\n+\n+impl ParseSess {\n+    pub fn next_node_id(&self) -> ast::NodeId {\n+        self.reserve_node_ids(1)\n+    }\n+    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n+        let v = self.node_id.get();\n+\n+        match v.checked_add(&count) {\n+            Some(next) => { self.node_id.set(next); }\n+            None => fail!(\"Input too large, ran out of node ids!\")\n+        }\n+\n+        v\n     }\n }\n "}, {"sha": "4036ab04aa908ba3bbe2ecf26cd3cf9d50ef19b7", "filename": "src/libsyntax/show_span.rs", "status": "renamed", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -13,28 +13,27 @@\n //! This module shows spans for all expressions in the crate\n //! to help with compiler debugging.\n \n-use syntax::ast;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n-\n-use driver::session::Session;\n+use ast;\n+use diagnostic;\n+use visit;\n+use visit::Visitor;\n \n struct ShowSpanVisitor<'a> {\n-    sess: &'a Session\n+    span_diagnostic: &'a diagnostic::SpanHandler,\n }\n \n-impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n-    fn visit_expr(&mut self, e: &ast::Expr) {\n-        self.sess.span_note(e.span, \"expression\");\n-        visit::walk_expr(self, e);\n+impl<'a> Visitor<()> for ShowSpanVisitor<'a> {\n+    fn visit_expr(&mut self, e: &ast::Expr, _: ()) {\n+        self.span_diagnostic.span_note(e.span, \"expression\");\n+        visit::walk_expr(self, e, ());\n     }\n \n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         visit::walk_mac(self, macro);\n     }\n }\n \n-pub fn run(sess: &Session, krate: &ast::Crate) {\n-    let mut v = ShowSpanVisitor { sess: sess };\n+pub fn run(span_diagnostic: &diagnostic::SpanHandler, krate: &ast::Crate) {\n+    let mut v = ShowSpanVisitor { span_diagnostic: span_diagnostic };\n     visit::walk_crate(&mut v, krate);\n }", "previous_filename": "src/librustc/front/show_span.rs"}, {"sha": "f0e697127149f3ab924631837432d2f663df94ce", "filename": "src/libsyntax/test.rs", "status": "renamed", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520671f1500885ffc2c5096e9150a665b63c2e0d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=520671f1500885ffc2c5096e9150a665b63c2e0d", "patch": "@@ -13,29 +13,29 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-use driver::session::Session;\n-use front::config;\n-\n+use std::gc::{Gc, GC};\n use std::slice;\n use std::mem;\n use std::vec;\n-use syntax::{ast, ast_util};\n-use syntax::ast_util::*;\n-use syntax::attr::AttrMetaMethods;\n-use syntax::attr;\n-use syntax::codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n-use syntax::codemap;\n-use syntax::ext::base::ExtCtxt;\n-use syntax::ext::build::AstBuilder;\n-use syntax::ext::expand::ExpansionConfig;\n-use syntax::fold::{Folder, MoveMap};\n-use syntax::fold;\n-use syntax::owned_slice::OwnedSlice;\n-use syntax::parse::token::InternedString;\n-use syntax::parse::token;\n-use syntax::print::pprust;\n-use syntax::ptr::P;\n-use syntax::util::small_vector::SmallVector;\n+use ast_util::*;\n+use attr::AttrMetaMethods;\n+use attr;\n+use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n+use codemap;\n+use diagnostic;\n+use config;\n+use ext::base::ExtCtxt;\n+use ext::build::AstBuilder;\n+use ext::expand::ExpansionConfig;\n+use fold::{Folder, MoveMap};\n+use fold;\n+use owned_slice::OwnedSlice;\n+use parse::token::InternedString;\n+use parse::{token, ParseSess};\n+use print::pprust;\n+use {ast, ast_util};\n+use ptr::P;\n+use util::small_vector::SmallVector;\n \n struct Test {\n     span: Span,\n@@ -46,7 +46,8 @@ struct Test {\n }\n \n struct TestCtxt<'a> {\n-    sess: &'a Session,\n+    sess: &'a ParseSess,\n+    span_diagnostic: &'a diagnostic::SpanHandler,\n     path: Vec<ast::Ident>,\n     ext_cx: ExtCtxt<'a>,\n     testfns: Vec<Test>,\n@@ -60,8 +61,10 @@ struct TestCtxt<'a> {\n \n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n-pub fn modify_for_testing(sess: &Session,\n-                          krate: ast::Crate) -> ast::Crate {\n+pub fn modify_for_testing(sess: &ParseSess,\n+                          cfg: &ast::CrateConfig,\n+                          krate: ast::Crate,\n+                          span_diagnostic: &diagnostic::SpanHandler) -> ast::Crate {\n     // We generate the test harness when building in the 'test'\n     // configuration, either with the '--test' or '--cfg test'\n     // command line options.\n@@ -76,7 +79,7 @@ pub fn modify_for_testing(sess: &Session,\n                                            \"reexport_test_harness_main\");\n \n     if should_test {\n-        generate_test_harness(sess, reexport_test_harness_main, krate)\n+        generate_test_harness(sess, reexport_test_harness_main, krate, cfg, span_diagnostic)\n     } else {\n         strip_test_functions(krate)\n     }\n@@ -113,8 +116,8 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n             match i.node {\n                 ast::ItemFn(_, ast::UnsafeFn, _, _, _) => {\n-                    let sess = self.cx.sess;\n-                    sess.span_fatal(i.span,\n+                    let diag = self.cx.span_diagnostic;\n+                    diag.span_fatal(i.span,\n                                     \"unsafe functions cannot be used for \\\n                                      tests\");\n                 }\n@@ -223,12 +226,15 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n     (it, sym)\n }\n \n-fn generate_test_harness(sess: &Session,\n+fn generate_test_harness(sess: &ParseSess,\n                          reexport_test_harness_main: Option<InternedString>,\n-                         krate: ast::Crate) -> ast::Crate {\n+                         krate: ast::Crate,\n+                         cfg: &ast::CrateConfig,\n+                         sd: &diagnostic::SpanHandler) -> ast::Crate {\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n-        ext_cx: ExtCtxt::new(&sess.parse_sess, sess.opts.cfg.clone(),\n+        span_diagnostic: sd,\n+        ext_cx: ExtCtxt::new(sess, cfg.clone(),\n                              ExpansionConfig {\n                                  deriving_hash_type_parameter: false,\n                                  crate_name: \"test\".to_string(),\n@@ -288,8 +294,8 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     }\n \n     if has_test_attr && !has_test_signature(i) {\n-        let sess = cx.sess;\n-        sess.span_err(\n+        let diag = cx.span_diagnostic;\n+        diag.span_err(\n             i.span,\n             \"functions used as tests must have signature fn() -> ().\"\n         );\n@@ -320,8 +326,8 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     }\n \n     if has_bench_attr && !has_test_signature(i) {\n-        let sess = cx.sess;\n-        sess.span_err(i.span, \"functions used as benches must have signature \\\n+        let diag = cx.span_diagnostic;\n+        diag.span_err(i.span, \"functions used as benches must have signature \\\n                       `fn(&mut Bencher) -> ()`\");\n     }\n \n@@ -547,9 +553,8 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     let mut visible_path = match cx.toplevel_reexport {\n         Some(id) => vec![id],\n         None => {\n-            cx.sess.bug(\n-                \"expected to find top-level re-export name, but found None\"\n-            );\n+            let diag = cx.span_diagnostic;\n+            diag.handler.bug(\"expected to find top-level re-export name, but found None\");\n         }\n     };\n     visible_path.extend(path.into_iter());", "previous_filename": "src/librustc/front/test.rs"}]}