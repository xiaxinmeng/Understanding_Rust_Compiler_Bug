{"sha": "b574c67b93fbe0fc1194865441a1fa596b8922f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NzRjNjdiOTNmYmUwZmMxMTk0ODY1NDQxYTFmYTU5NmI4OTIyZjE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-28T22:07:20Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-18T01:31:01Z"}, "message": "New rustdoc lint to respect -Dwarnings correctly\n\nThis adds a new lint to `rustc` that is used in rustdoc when a code\nblock is empty or cannot be parsed as valid Rust code.\n\nPreviously this was unconditionally a warning. As such some\ndocumentation comments were (unknowingly) abusing this to pass despite\nthe `-Dwarnings` used when compiling `rustc`, this should not be the\ncase anymore.", "tree": {"sha": "51b0a7287094c0fe279a339528aa9b514d0962a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b0a7287094c0fe279a339528aa9b514d0962a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b574c67b93fbe0fc1194865441a1fa596b8922f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b574c67b93fbe0fc1194865441a1fa596b8922f1", "html_url": "https://github.com/rust-lang/rust/commit/b574c67b93fbe0fc1194865441a1fa596b8922f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b574c67b93fbe0fc1194865441a1fa596b8922f1/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e99439f4dacc8ba0d2ca48d221694362d587927", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e99439f4dacc8ba0d2ca48d221694362d587927", "html_url": "https://github.com/rust-lang/rust/commit/3e99439f4dacc8ba0d2ca48d221694362d587927"}], "stats": {"total": 155, "additions": 115, "deletions": 40}, "files": [{"sha": "9dc2e3d292359446e5fb38d353cfa62206a1d6f4", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -1241,7 +1241,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    /// ```ignore (internal compiler representation so lifetime syntax is invalid)\n+    /// ```text (internal compiler representation so lifetime syntax is invalid)\n     /// <T as Foo<'0>>::Item: '1\n     /// ```\n     ///"}, {"sha": "7e67bc118ec1e2821fd0c509bea0cfba37d48349", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -46,6 +46,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n     /// //          ^^^ This is the span we are looking for!\n+    /// }\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}, {"sha": "71e222c560a0526a8654599b0c738d5a1c3a433c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// InferBorrowKind results in a structure like this:\n     ///\n-    /// ```\n+    /// ```text\n     /// {\n     ///       Place(base: hir_id_s, projections: [], ....) -> {\n     ///                                                            capture_kind_expr: hir_id_L5,\n@@ -348,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// After the min capture analysis, we get:\n-    /// ```\n+    /// ```text\n     /// {\n     ///       hir_id_s -> [\n     ///            Place(base: hir_id_s, projections: [], ....) -> {"}, {"sha": "7088e60aa07da75ff6464358b6951bcf96d6e1c8", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -294,6 +294,43 @@ warning: unclosed HTML tag `h1`\n warning: 2 warnings emitted\n ```\n \n+## invalid_rust_codeblock\n+\n+This lint **warns by default**. It detects Rust code blocks in documentation\n+examples that are invalid (e.g. empty, not parsable as Rust). For example:\n+\n+```rust\n+/// Empty code blocks (with and without the `rust` marker):\n+///\n+/// ```rust\n+/// ```\n+///\n+/// Unclosed code blocks (with and without the `rust` marker):\n+///\n+/// ```rust\n+fn main() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: Rust code block is empty\n+--> src/lib.rs:3:5\n+|\n+3 |   /// ```rust\n+|  _____^\n+4 | | /// ```\n+| |_______^\n+|\n+= note: `#[warn(rustdoc::invalid_rust_codeblock)]` on by default\n+\n+warning: Rust code block is empty\n+--> src/lib.rs:8:5\n+|\n+8 | /// ```rust\n+|     ^^^^^^^\n+```\n+\n ## bare_urls\n \n This lint is **warn-by-default**. It detects URLs which are not links."}, {"sha": "597efed56e17618c1e0ab79442ef0e3c14f33db0", "filename": "src/librustdoc/lint.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -157,13 +157,26 @@ declare_rustdoc_lint! {\n     \"detects URLs that are not hyperlinks\"\n }\n \n+declare_rustdoc_lint! {\n+   /// The `invalid_rust_codeblock` lint detects Rust code blocks in\n+   /// documentation examples that are invalid (e.g. empty, not parsable as\n+   /// Rust code). This is a `rustdoc` only lint, see the documentation in the\n+   /// [rustdoc book].\n+   ///\n+   /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_rust_codeblock\n+   INVALID_RUST_CODEBLOCK,\n+   Warn,\n+   \"codeblock could not be parsed as valid Rust or is empty\"\n+}\n+\n crate static RUSTDOC_LINTS: Lazy<Vec<&'static Lint>> = Lazy::new(|| {\n     vec![\n         BROKEN_INTRA_DOC_LINKS,\n         PRIVATE_INTRA_DOC_LINKS,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n+        INVALID_RUST_CODEBLOCK,\n         INVALID_HTML_TAGS,\n         BARE_URLS,\n         MISSING_CRATE_LEVEL_DOCS,"}, {"sha": "293941391c8b82581498a0e6130dd4c3d4d10492", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n+use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -47,50 +48,65 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         .unwrap_or(false);\n         let buffer = buffer.borrow();\n \n-        if buffer.has_errors || is_empty {\n-            let mut diag = if let Some(sp) = super::source_span_for_markdown_range(\n-                self.cx.tcx,\n-                &dox,\n-                &code_block.range,\n-                &item.attrs,\n-            ) {\n-                let (warning_message, suggest_using_text) = if buffer.has_errors {\n-                    (\"could not parse code block as Rust code\", true)\n+        if !(buffer.has_errors || is_empty) {\n+            // No errors in a non-empty program.\n+            return;\n+        }\n+\n+        let local_id = match item.def_id.as_local() {\n+            Some(id) => id,\n+            // We don't need to check the syntax for other crates so returning\n+            // without doing anything should not be a problem.\n+            None => return,\n+        };\n+\n+        let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_id);\n+        let suggest_using_text = code_block.syntax.is_none() && code_block.is_fenced;\n+        let is_ignore = code_block.is_ignore;\n+\n+        // The span and whether it is precise or not.\n+        let (sp, precise_span) = match super::source_span_for_markdown_range(\n+            self.cx.tcx,\n+            &dox,\n+            &code_block.range,\n+            &item.attrs,\n+        ) {\n+            Some(sp) => (sp, true),\n+            None => (item.attr_span(self.cx.tcx), false),\n+        };\n+\n+        // lambda that will use the lint to start a new diagnostic and add\n+        // a suggestion to it when needed.\n+        let diag_builder = |lint: LintDiagnosticBuilder<'_>| {\n+            let mut diag = if precise_span {\n+                let msg = if buffer.has_errors {\n+                    \"could not parse code block as Rust code\"\n                 } else {\n-                    (\"Rust code block is empty\", false)\n+                    \"Rust code block is empty\"\n                 };\n \n-                let mut diag = self.cx.sess().struct_span_warn(sp, warning_message);\n+                let mut diag = lint.build(msg);\n+\n+                if suggest_using_text {\n+                    let extended_msg = if is_ignore {\n+                        \"`ignore` code blocks require valid Rust code for syntax highlighting. \\\n+                         Mark blocks that do not contain Rust code as text\"\n+                    } else {\n+                        \"mark blocks that do not contain Rust code as text\"\n+                    };\n \n-                if code_block.syntax.is_none() && code_block.is_fenced {\n-                    let sp = sp.from_inner(InnerSpan::new(0, 3));\n                     diag.span_suggestion(\n-                        sp,\n-                        \"mark blocks that do not contain Rust code as text\",\n+                        sp.from_inner(InnerSpan::new(0, 3)),\n+                        extended_msg,\n                         String::from(\"```text\"),\n                         Applicability::MachineApplicable,\n                     );\n-                } else if suggest_using_text && code_block.is_ignore {\n-                    let sp = sp.from_inner(InnerSpan::new(0, 3));\n-                    diag.span_suggestion(\n-                        sp,\n-                        \"`ignore` code blocks require valid Rust code for syntax highlighting. \\\n-                         Mark blocks that do not contain Rust code as text\",\n-                        String::from(\"```text,\"),\n-                        Applicability::MachineApplicable,\n-                    );\n                 }\n \n                 diag\n             } else {\n-                // We couldn't calculate the span of the markdown block that had the error, so our\n-                // diagnostics are going to be a bit lacking.\n-                let mut diag = self.cx.sess().struct_span_warn(\n-                    item.attr_span(self.cx.tcx),\n-                    \"doc comment contains an invalid Rust code block\",\n-                );\n-\n-                if code_block.syntax.is_none() && code_block.is_fenced {\n+                let mut diag = lint.build(\"doc comment contains an invalid Rust code block\");\n+                if suggest_using_text {\n                     diag.help(\"mark blocks that do not contain Rust code as text: ```text\");\n                 }\n \n@@ -103,7 +119,17 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             }\n \n             diag.emit();\n-        }\n+        };\n+\n+        // Finally build and emit the completed diagnostic.\n+        // All points of divergence have been handled earlier so this can be\n+        // done the same way whether the span is precise or not.\n+        self.cx.tcx.struct_span_lint_hir(\n+            crate::lint::INVALID_RUST_CODEBLOCK,\n+            hir_id,\n+            sp,\n+            diag_builder,\n+        );\n     }\n }\n "}, {"sha": "313b22c4c7c20c8e6a11e778082f4e18bf6ab286", "filename": "src/test/rustdoc-ui/ignore-block-help.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -7,11 +7,8 @@ LL | | /// let heart = '\u2764\ufe0f';\n LL | | /// ```\n    | |_______^\n    |\n+   = note: `#[warn(invalid_rust_codeblock)]` on by default\n    = note: error from rustc: character literal may only contain one codepoint\n-help: `ignore` code blocks require valid Rust code for syntax highlighting. Mark blocks that do not contain Rust code as text\n-   |\n-LL | /// ```text,ignore (to-prevent-tidy-error)\n-   |     ^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "67e093f9de20a8241c5c8192d74d7608e14c9130", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b574c67b93fbe0fc1194865441a1fa596b8922f1/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=b574c67b93fbe0fc1194865441a1fa596b8922f1", "patch": "@@ -7,6 +7,7 @@ LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->si\n LL | | /// ```\n    | |_______^\n    |\n+   = note: `#[warn(invalid_rust_codeblock)]` on by default\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\"}]}