{"sha": "510e4b402994124cff40893ad240646e7e0bfa54", "node_id": "C_kwDOAAsO6NoAKDUxMGU0YjQwMjk5NDEyNGNmZjQwODkzYWQyNDA2NDZlN2UwYmZhNTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T19:22:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T19:22:11Z"}, "message": "Simplify", "tree": {"sha": "586473b9ce4a940ffb50e76f0c67c2547f0b9e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586473b9ce4a940ffb50e76f0c67c2547f0b9e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/510e4b402994124cff40893ad240646e7e0bfa54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/510e4b402994124cff40893ad240646e7e0bfa54", "html_url": "https://github.com/rust-lang/rust/commit/510e4b402994124cff40893ad240646e7e0bfa54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/510e4b402994124cff40893ad240646e7e0bfa54/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610a94c4219c54a5b369c7e022b2045560501607", "url": "https://api.github.com/repos/rust-lang/rust/commits/610a94c4219c54a5b369c7e022b2045560501607", "html_url": "https://github.com/rust-lang/rust/commit/610a94c4219c54a5b369c7e022b2045560501607"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "2141894922f7b78c1a07f386148cdbeb5579f999", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/510e4b402994124cff40893ad240646e7e0bfa54/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510e4b402994124cff40893ad240646e7e0bfa54/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=510e4b402994124cff40893ad240646e7e0bfa54", "patch": "@@ -12,7 +12,7 @@ use hir_def::{\n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id,\n     from_placeholder_idx, to_chalk_trait_id, utils::generics, AdtId, AliasEq, AliasTy, Binders,\n-    CallableDefId, CallableSig, FnPointer, ImplTraitId, Interner, Lifetime, ProjectionTy,\n+    CallableDefId, CallableSig, DynTy, FnPointer, ImplTraitId, Interner, Lifetime, ProjectionTy,\n     QuantifiedWhereClause, Substitution, TraitRef, Ty, TyBuilder, TyKind, TypeFlags, WhereClause,\n };\n \n@@ -378,6 +378,19 @@ impl ProjectionTyExt for ProjectionTy {\n     }\n }\n \n+pub trait DynTyExt {\n+    fn principal(&self) -> Option<&TraitRef>;\n+}\n+\n+impl DynTyExt for DynTy {\n+    fn principal(&self) -> Option<&TraitRef> {\n+        self.bounds.skip_binders().interned().get(0).and_then(|b| match b.skip_binders() {\n+            crate::WhereClause::Implemented(trait_ref) => Some(trait_ref),\n+            _ => None,\n+        })\n+    }\n+}\n+\n pub trait TraitRefExt {\n     fn hir_trait_id(&self) -> TraitId;\n }"}, {"sha": "f3a27632bf545f9c578bb1a8bcd9673fb9186e75", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/510e4b402994124cff40893ad240646e7e0bfa54/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/510e4b402994124cff40893ad240646e7e0bfa54/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=510e4b402994124cff40893ad240646e7e0bfa54", "patch": "@@ -24,8 +24,8 @@ use crate::{\n     primitive::{FloatTy, IntTy, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     utils::all_super_traits,\n-    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, ForeignDefId, InEnvironment, Interner,\n-    Scalar, Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt,\n+    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, DynTyExt, ForeignDefId, InEnvironment,\n+    Interner, Scalar, Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt,\n };\n \n /// This is used as a key for indexing impls.\n@@ -805,20 +805,9 @@ fn is_inherent_impl_coherent(\n         | TyKind::Scalar(_) => def_map.is_rustc_coherence_is_core(),\n \n         &TyKind::Adt(AdtId(adt), _) => adt.module(db.upcast()).krate() == def_map.krate(),\n-        // FIXME: Factor out the principal trait fetching into a function\n-        TyKind::Dyn(it) => it\n-            .bounds\n-            .skip_binders()\n-            .interned()\n-            .get(0)\n-            .and_then(|b| match b.skip_binders() {\n-                crate::WhereClause::Implemented(trait_ref) => Some(trait_ref),\n-                _ => None,\n-            })\n-            .map_or(false, |trait_ref| {\n-                from_chalk_trait_id(trait_ref.trait_id).module(db.upcast()).krate()\n-                    == def_map.krate()\n-            }),\n+        TyKind::Dyn(it) => it.principal().map_or(false, |trait_ref| {\n+            from_chalk_trait_id(trait_ref.trait_id).module(db.upcast()).krate() == def_map.krate()\n+        }),\n \n         _ => true,\n     };\n@@ -843,20 +832,10 @@ fn is_inherent_impl_coherent(\n                 }\n                 hir_def::AdtId::EnumId(it) => db.enum_data(it).rustc_has_incoherent_inherent_impls,\n             },\n-            // FIXME: Factor out the principal trait fetching into a function\n-            TyKind::Dyn(it) => it\n-                .bounds\n-                .skip_binders()\n-                .interned()\n-                .get(0)\n-                .and_then(|b| match b.skip_binders() {\n-                    crate::WhereClause::Implemented(trait_ref) => Some(trait_ref),\n-                    _ => None,\n-                })\n-                .map_or(false, |trait_ref| {\n-                    db.trait_data(from_chalk_trait_id(trait_ref.trait_id))\n-                        .rustc_has_incoherent_inherent_impls\n-                }),\n+            TyKind::Dyn(it) => it.principal().map_or(false, |trait_ref| {\n+                db.trait_data(from_chalk_trait_id(trait_ref.trait_id))\n+                    .rustc_has_incoherent_inherent_impls\n+            }),\n \n             _ => false,\n         };"}]}