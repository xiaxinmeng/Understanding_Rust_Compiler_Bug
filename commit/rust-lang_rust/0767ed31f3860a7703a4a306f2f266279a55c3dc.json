{"sha": "0767ed31f3860a7703a4a306f2f266279a55c3dc", "node_id": "C_kwDOAAsO6NoAKDA3NjdlZDMxZjM4NjBhNzcwM2E0YTMwNmYyZjI2NjI3OWE1NWMzZGM", "commit": {"author": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2021-10-11T14:03:57Z"}, "committer": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2021-10-12T06:56:05Z"}, "message": "add some more testcases", "tree": {"sha": "d0967c9a426191e51becb9c592dbec7b1ece5131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0967c9a426191e51becb9c592dbec7b1ece5131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0767ed31f3860a7703a4a306f2f266279a55c3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0767ed31f3860a7703a4a306f2f266279a55c3dc", "html_url": "https://github.com/rust-lang/rust/commit/0767ed31f3860a7703a4a306f2f266279a55c3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0767ed31f3860a7703a4a306f2f266279a55c3dc/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d6d2b7389fe1b339402c1798edae8b695fc9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d6d2b7389fe1b339402c1798edae8b695fc9ef", "html_url": "https://github.com/rust-lang/rust/commit/86d6d2b7389fe1b339402c1798edae8b695fc9ef"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "a2d4a642128b4f9471b8fe3c46a31b448f5f7c63", "filename": "src/test/ui/consts/issue-88071.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+//\n+// regression test for #88071\n+\n+#![feature(const_btree_new)]\n+#![feature(const_fn_trait_bound)]\n+\n+use std::collections::BTreeMap;\n+\n+pub struct CustomMap<K, V>(BTreeMap<K, V>);\n+\n+impl<K, V> CustomMap<K, V>\n+where\n+    K: Ord,\n+{\n+    pub const fn new() -> Self {\n+        CustomMap(BTreeMap::new())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "89bd79ac2991e16a06df7751bbceeee0b6d8aa3a", "filename": "src/test/ui/generic-associated-types/issue-87750.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,22 @@\n+#![feature(generic_associated_types)]\n+\n+trait PointerFamily {\n+    type Pointer<T>;\n+}\n+\n+struct Rc<T>(Box<T>);\n+struct RcFamily;\n+\n+impl PointerFamily for RcFamily {\n+    type Pointer<T> = Rc<T>;\n+}\n+\n+#[allow(dead_code)]\n+enum Node<T, P: PointerFamily> where P::Pointer<Node<T, P>>: Sized {\n+    Cons(P::Pointer<Node<T, P>>),\n+}\n+\n+fn main() {\n+    let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n+    //~^ ERROR overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n+}"}, {"sha": "854541f3d8fdaf421a73f5576258b5240da4b085", "filename": "src/test/ui/generic-associated-types/issue-87750.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,9 @@\n+error[E0275]: overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n+  --> $DIR/issue-87750.rs:20:16\n+   |\n+LL |     let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "d72598d5d594257a11a4cef1eaf963b709a2632b", "filename": "src/test/ui/traits/issue-52893.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,57 @@\n+// check-fail\n+//\n+// regression test for issue 52893\n+trait At<Name> {\n+    type AtRes;\n+    fn at(self) -> Self::AtRes;\n+}\n+\n+trait Push<T> {\n+    type PushRes;\n+    fn push(self, other: T) -> Self::PushRes;\n+}\n+\n+trait AddClass<Name, F> {\n+    type AddRes;\n+    fn init(self, func: F);\n+}\n+\n+trait ToRef {\n+    type RefRes;\n+    fn to_ref(&self) -> Self::RefRes;\n+}\n+\n+struct Class<P>(P);\n+\n+impl<P> Class<P> {\n+    fn with<Name, F>(self) -> <Self as AddClass<Name, F>>::AddRes\n+    where\n+        Self: AddClass<Name, F>,\n+    {\n+        todo!()\n+    }\n+\n+    fn from<F>(self) -> <Self as AddClass<P, F>>::AddRes\n+    where\n+        Self: AddClass<P, F>,\n+    {\n+        todo!()\n+    }\n+}\n+\n+impl<F, Name, P> AddClass<Name, F> for Class<P>\n+where\n+    Self: At<Name>,\n+    <Self as At<Name>>::AtRes: Push<F>,\n+    <<Self as At<Name>>::AtRes as Push<F>>::PushRes: ToRef<RefRes = Self> + Push<F>,\n+{\n+    type AddRes = ();\n+\n+    fn init(self, func: F) {\n+        let builder = self.at().push(func);\n+        let output = builder.to_ref();\n+        builder.push(output); //~ ERROR mismatched types [E0308]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bf732e2491566f9f51386560f3fb1ffce2788525", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52893.rs:53:22\n+   |\n+LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n+   |      - this type parameter\n+...\n+LL |         builder.push(output);\n+   |                      ^^^^^^ expected type parameter `F`, found struct `Class`\n+   |\n+   = note: expected type parameter `F`\n+                      found struct `Class<P>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7ff54539adc5bb721c5f41797b3b407503246300", "filename": "src/test/ui/traits/issue-68295.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,47 @@\n+// check-fail\n+//\n+// regression test for #68295\n+\n+struct Matrix<R, C, S>(R, C, S);\n+\n+impl<R, C, S> Matrix<R, C, S> {\n+    fn into_owned(self) -> Matrix<R, C, Owned<R, C, ()>>\n+    where\n+        (): Allocator<R, C>,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<D, S> Matrix<D, D, S> {\n+    fn hermitian_part(&self) -> Matrix<D, D, Owned<D, D, ()>>\n+    where\n+        (): Allocator<D, D>,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+trait Allocator<R, C> {\n+    type Buffer;\n+}\n+\n+trait Trait<R, C, A> {\n+    type Power;\n+}\n+\n+impl<R, C, A: Allocator<R, C>> Trait<R, C, A> for () {\n+    type Power = A::Buffer;\n+}\n+\n+type Owned<R, C, G> = <G as Trait<R, C, ()>>::Power;\n+\n+fn crash<R, C>(input: Matrix<R, C, ()>) -> Matrix<R, C, u32>\n+where\n+    (): Allocator<R, C>,\n+{\n+    input.into_owned()\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "cb6e6e0769cb8d8d1611a3a796334c7a21b6059a", "filename": "src/test/ui/traits/issue-68295.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0767ed31f3860a7703a4a306f2f266279a55c3dc/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr?ref=0767ed31f3860a7703a4a306f2f266279a55c3dc", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68295.rs:43:5\n+   |\n+LL | fn crash<R, C>(input: Matrix<R, C, ()>) -> Matrix<R, C, u32>\n+   |                                            ----------------- expected `Matrix<R, C, u32>` because of return type\n+...\n+LL |     input.into_owned()\n+   |     ^^^^^^^^^^^^^^^^^^ expected `u32`, found associated type\n+   |\n+   = note: expected struct `Matrix<_, _, u32>`\n+              found struct `Matrix<_, _, <() as Allocator<R, C>>::Buffer>`\n+   = help: consider constraining the associated type `<() as Allocator<R, C>>::Buffer` to `u32`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}