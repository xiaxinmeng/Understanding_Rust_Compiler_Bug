{"sha": "9c3148235e5c6b880c9fc97381a575bcc0f2b51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzE0ODIzNWU1YzZiODgwYzlmYzk3MzgxYTU3NWJjYzBmMmI1MWY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-03T00:24:05Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-03T00:38:37Z"}, "message": "Refactor `msvc_enum_fallbck()` a bit", "tree": {"sha": "ac3eb255ff7088e5bef075ac4562f93f18f2d27d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3eb255ff7088e5bef075ac4562f93f18f2d27d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3148235e5c6b880c9fc97381a575bcc0f2b51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3148235e5c6b880c9fc97381a575bcc0f2b51f", "html_url": "https://github.com/rust-lang/rust/commit/9c3148235e5c6b880c9fc97381a575bcc0f2b51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3148235e5c6b880c9fc97381a575bcc0f2b51f/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d2843d6879b5741ab716bd8ca826c2ac5414cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2843d6879b5741ab716bd8ca826c2ac5414cb", "html_url": "https://github.com/rust-lang/rust/commit/f6d2843d6879b5741ab716bd8ca826c2ac5414cb"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "b3c14d9072ccec77a517d02b581039bfe187bf71", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9c3148235e5c6b880c9fc97381a575bcc0f2b51f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3148235e5c6b880c9fc97381a575bcc0f2b51f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=9c3148235e5c6b880c9fc97381a575bcc0f2b51f", "patch": "@@ -367,6 +367,10 @@ pub fn push_debuginfo_type_name<'tcx>(\n     ) {\n         let layout = tcx.layout_of(tcx.param_env(def.did).and(ty)).expect(\"layout error\");\n \n+        output.push_str(\"enum$<\");\n+        push_item_name(tcx, def.did, true, output);\n+        push_generic_params_internal(tcx, substs, output, visited);\n+\n         if let Variants::Multiple {\n             tag_encoding: TagEncoding::Niche { dataful_variant, .. },\n             tag,\n@@ -386,30 +390,19 @@ pub fn push_debuginfo_type_name<'tcx>(\n             let max = dataful_discriminant_range.end();\n             let max = tag.value.size(&tcx).truncate(*max);\n \n-            output.push_str(\"enum$<\");\n-            push_item_name(tcx, def.did, true, output);\n-            push_generic_params_internal(tcx, substs, output, visited);\n-\n             let dataful_variant_name = def.variants[*dataful_variant].ident.as_str();\n \n-            output.push_str(&format!(\", {}, {}, {}>\", min, max, dataful_variant_name));\n-        } else {\n-            output.push_str(\"enum$<\");\n-            push_item_name(tcx, def.did, true, output);\n-            push_generic_params_internal(tcx, substs, output, visited);\n-\n-            if let Variants::Single { index: variant_idx } = &layout.variants {\n-                // Uninhabited enums can't be constructed and should never need to be visualized so\n-                // skip this step for them.\n-                if def.variants.len() != 0 {\n-                    let variant = def.variants[*variant_idx].ident.as_str();\n+            output.push_str(&format!(\", {}, {}, {}\", min, max, dataful_variant_name));\n+        } else if let Variants::Single { index: variant_idx } = &layout.variants {\n+            // Uninhabited enums can't be constructed and should never need to be visualized so\n+            // skip this step for them.\n+            if def.variants.len() != 0 {\n+                let variant = def.variants[*variant_idx].ident.as_str();\n \n-                    output.push_str(&format!(\", {}\", variant));\n-                }\n+                output.push_str(&format!(\", {}\", variant));\n             }\n-\n-            push_close_angle_bracket(tcx, output);\n         }\n+        push_close_angle_bracket(tcx, output);\n     }\n }\n "}]}