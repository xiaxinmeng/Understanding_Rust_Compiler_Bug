{"sha": "764ef8c81f2a157a0529f2a6a5c7218d5fce61d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NGVmOGM4MWYyYTE1N2EwNTI5ZjJhNmE1YzcyMThkNWZjZTYxZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T21:57:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-29T21:57:28Z"}, "message": "Rollup merge of #66379 - CreepySkeleton:patch-1, r=RalfJung\n\nRephrase docs in for ptr\n\nThese methods can be supplied with NULL just fine, this is the whole point of `Option<&T>` return type.", "tree": {"sha": "f5f88299f9f853470301a3a2d8ee945bb7c10b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f88299f9f853470301a3a2d8ee945bb7c10b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4ZRJCRBK7hj4Ov3rIwAAdHIIAKMOVRQYvT5oZJkGOZrE8bYN\nek7Zh/UCttJMFZ79NXPneFPBV8PkS3uvKSTNJP/7qW1KDKVlz4Kq1bMc7DJ9rm29\nL4k216a37rLjLaF1dQd39fexyATVNaayHDWQ/Mf7zVwwcAL0MeUisx+q/c1hEWlU\n5w8ddxuCITkhiquswrCyElBpJNXS8xf4enZZyDw1HTqTfw9nW/LZTSbm5oddKks7\nU/ow/kqTB7lyWMfusoRFnl/aSFuIlfkknXKgnIyhiiPaRojmEBefRsq+62O+LcpA\ntJgoJeBUYlEGtsxjPjSklM+SdIgfK9rseIdRkW+qPzKIWzXVe9ATsIN4QKJKXXg=\n=e5Xv\n-----END PGP SIGNATURE-----\n", "payload": "tree f5f88299f9f853470301a3a2d8ee945bb7c10b14\nparent 25d8a9494ca6d77361e47c1505ecf640b168819e\nparent f11dd32f751b4a64bea0bdd0020879caec197d3f\nauthor Ralf Jung <post@ralfj.de> 1575064648 +0100\ncommitter GitHub <noreply@github.com> 1575064648 +0100\n\nRollup merge of #66379 - CreepySkeleton:patch-1, r=RalfJung\n\nRephrase docs in for ptr\n\nThese methods can be supplied with NULL just fine, this is the whole point of `Option<&T>` return type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3", "html_url": "https://github.com/rust-lang/rust/commit/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d8a9494ca6d77361e47c1505ecf640b168819e", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d8a9494ca6d77361e47c1505ecf640b168819e", "html_url": "https://github.com/rust-lang/rust/commit/25d8a9494ca6d77361e47c1505ecf640b168819e"}, {"sha": "f11dd32f751b4a64bea0bdd0020879caec197d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11dd32f751b4a64bea0bdd0020879caec197d3f", "html_url": "https://github.com/rust-lang/rust/commit/f11dd32f751b4a64bea0bdd0020879caec197d3f"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "1e051dbebcaf82519fce4f8ff3cced23daffe80f", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef8c81f2a157a0529f2a6a5c7218d5fce61d3/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=764ef8c81f2a157a0529f2a6a5c7218d5fce61d3", "patch": "@@ -1074,17 +1074,22 @@ impl<T: ?Sized> *const T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     ///\n     /// # Examples\n     ///\n@@ -1929,18 +1934,23 @@ impl<T: ?Sized> *mut T {\n     /// of the returned pointer, nor can it ensure that the lifetime `'a`\n     /// returned is indeed a valid lifetime for the contained data.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get accessed through any other pointer.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory this pointer points to must not get accessed (read or written)\n+    /// through any other pointer.\n     ///\n+    /// [here]: crate::ptr#safety\n     /// [`as_ref`]: #method.as_ref\n     ///\n     /// # Examples"}]}