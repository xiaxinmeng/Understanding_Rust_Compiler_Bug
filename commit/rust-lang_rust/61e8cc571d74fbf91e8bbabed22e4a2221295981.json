{"sha": "61e8cc571d74fbf91e8bbabed22e4a2221295981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZThjYzU3MWQ3NGZiZjkxZThiYmFiZWQyMmU0YTIyMjEyOTU5ODE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-09T16:18:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T16:18:13Z"}, "message": "Rollup merge of #58626 - QuietMisdreavus:doc-coverage, r=GuillaumeGomez\n\nrustdoc: add option to calculate \"documentation coverage\"\n\nThis PR adds a new flag to rustdoc, `--show-coverage`. When passed, this flag will make rustdoc count the number of items in a crate with documentation instead of generating docs. This count will be output as a table of each file in the crate, like this (when run on my crate `egg-mode`):\n\n```\n+-------------------------------------+------------+------------+------------+\n| File                                | Documented |      Total | Percentage |\n+-------------------------------------+------------+------------+------------+\n| src/auth.rs                         |         16 |         16 |     100.0% |\n| src/common/mod.rs                   |          1 |          1 |     100.0% |\n| src/common/response.rs              |          9 |          9 |     100.0% |\n| src/cursor.rs                       |         24 |         24 |     100.0% |\n| src/direct/fun.rs                   |          6 |          6 |     100.0% |\n| src/direct/mod.rs                   |         41 |         41 |     100.0% |\n| src/entities.rs                     |         50 |         50 |     100.0% |\n| src/error.rs                        |         27 |         27 |     100.0% |\n| src/lib.rs                          |          1 |          1 |     100.0% |\n| src/list/fun.rs                     |         19 |         19 |     100.0% |\n| src/list/mod.rs                     |         22 |         22 |     100.0% |\n| src/media/mod.rs                    |         27 |         27 |     100.0% |\n| src/place/fun.rs                    |          8 |          8 |     100.0% |\n| src/place/mod.rs                    |         35 |         35 |     100.0% |\n| src/search.rs                       |         26 |         26 |     100.0% |\n| src/service.rs                      |         74 |         74 |     100.0% |\n| src/stream/mod.rs                   |         49 |         49 |     100.0% |\n| src/tweet/fun.rs                    |         15 |         15 |     100.0% |\n| src/tweet/mod.rs                    |         73 |         73 |     100.0% |\n| src/user/fun.rs                     |         24 |         24 |     100.0% |\n| src/user/mod.rs                     |         87 |         87 |     100.0% |\n+-------------------------------------+------------+------------+------------+\n| Total                               |        634 |        634 |     100.0% |\n+-------------------------------------+------------+------------+------------+\n```\n\nTrait implementations are not counted because by default they \"inherit\" the docs from the trait, even though an impl can override those docs. Similarly, inherent impl blocks are not counted at all, because for the majority of cases such docs are not useful. (The usual pattern for inherent impl blocks is to throw all the methods on a type into a single impl block. Any docs you would put on that block would be better served on the type itself.)\n\nIn addition, `--show-coverage` can be combined with `--document-private-items` to get the coverage counts for everything in the crate, not just public items.\n\nThe coverage calculation is implemented as a late pass and two new sets of passes which strip out most of the work that rustdoc otherwise does when generating docs. The is because after the new pass is executed, rustdoc immediately closes instead of going on to generate documentation.\n\nMany examples of coverage calculations have been included as `rustdoc-ui` tests.\n\nr? @rust-lang/rustdoc", "tree": {"sha": "71569537a1d19ad37f3024c8d26ce8423bb19da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71569537a1d19ad37f3024c8d26ce8423bb19da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e8cc571d74fbf91e8bbabed22e4a2221295981", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg+dFCRBK7hj4Ov3rIwAAdHIIAHp2vj3DieGh/yeZbFgHz700\nNb99WJbyZxxP8yI8YxfgSUc+36/0bHz7s3717hITLzBOgVE1vJ/pPHoZSsfTGz+9\n+baNhTvK8m/DnosZMMdAK+1iMPYf6u4c+a01zNhY2Yt0Ckll2sxv/kuDYy4S358P\n8UoBBrkqGpXTGW5TlHOgAmCJFXCSpdzvpEp7kjzuviQB/3rrGiq+Fkdy6SqiOQsU\ndmP2S56vUTPV4gmGY2An0kl0i1Q16q/9IYLDO5HCr/JKpMLRZTYtYb0juM868G3F\nJEw7QBCST8HCJb5L5huEjITXr8BuL5k9sq51C/LWad0fYaENe7bC/OT9pNrGtM8=\n=Zl6I\n-----END PGP SIGNATURE-----\n", "payload": "tree 71569537a1d19ad37f3024c8d26ce8423bb19da6\nparent 19f969a465e15abc2f5f271b234405c6a85c471f\nparent 3df0b895c1ba705bd4ecf110e3f6bdac7fe20953\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552148293 +0100\ncommitter GitHub <noreply@github.com> 1552148293 +0100\n\nRollup merge of #58626 - QuietMisdreavus:doc-coverage, r=GuillaumeGomez\n\nrustdoc: add option to calculate \"documentation coverage\"\n\nThis PR adds a new flag to rustdoc, `--show-coverage`. When passed, this flag will make rustdoc count the number of items in a crate with documentation instead of generating docs. This count will be output as a table of each file in the crate, like this (when run on my crate `egg-mode`):\n\n```\n+-------------------------------------+------------+------------+------------+\n| File                                | Documented |      Total | Percentage |\n+-------------------------------------+------------+------------+------------+\n| src/auth.rs                         |         16 |         16 |     100.0% |\n| src/common/mod.rs                   |          1 |          1 |     100.0% |\n| src/common/response.rs              |          9 |          9 |     100.0% |\n| src/cursor.rs                       |         24 |         24 |     100.0% |\n| src/direct/fun.rs                   |          6 |          6 |     100.0% |\n| src/direct/mod.rs                   |         41 |         41 |     100.0% |\n| src/entities.rs                     |         50 |         50 |     100.0% |\n| src/error.rs                        |         27 |         27 |     100.0% |\n| src/lib.rs                          |          1 |          1 |     100.0% |\n| src/list/fun.rs                     |         19 |         19 |     100.0% |\n| src/list/mod.rs                     |         22 |         22 |     100.0% |\n| src/media/mod.rs                    |         27 |         27 |     100.0% |\n| src/place/fun.rs                    |          8 |          8 |     100.0% |\n| src/place/mod.rs                    |         35 |         35 |     100.0% |\n| src/search.rs                       |         26 |         26 |     100.0% |\n| src/service.rs                      |         74 |         74 |     100.0% |\n| src/stream/mod.rs                   |         49 |         49 |     100.0% |\n| src/tweet/fun.rs                    |         15 |         15 |     100.0% |\n| src/tweet/mod.rs                    |         73 |         73 |     100.0% |\n| src/user/fun.rs                     |         24 |         24 |     100.0% |\n| src/user/mod.rs                     |         87 |         87 |     100.0% |\n+-------------------------------------+------------+------------+------------+\n| Total                               |        634 |        634 |     100.0% |\n+-------------------------------------+------------+------------+------------+\n```\n\nTrait implementations are not counted because by default they \"inherit\" the docs from the trait, even though an impl can override those docs. Similarly, inherent impl blocks are not counted at all, because for the majority of cases such docs are not useful. (The usual pattern for inherent impl blocks is to throw all the methods on a type into a single impl block. Any docs you would put on that block would be better served on the type itself.)\n\nIn addition, `--show-coverage` can be combined with `--document-private-items` to get the coverage counts for everything in the crate, not just public items.\n\nThe coverage calculation is implemented as a late pass and two new sets of passes which strip out most of the work that rustdoc otherwise does when generating docs. The is because after the new pass is executed, rustdoc immediately closes instead of going on to generate documentation.\n\nMany examples of coverage calculations have been included as `rustdoc-ui` tests.\n\nr? @rust-lang/rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e8cc571d74fbf91e8bbabed22e4a2221295981", "html_url": "https://github.com/rust-lang/rust/commit/61e8cc571d74fbf91e8bbabed22e4a2221295981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e8cc571d74fbf91e8bbabed22e4a2221295981/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f969a465e15abc2f5f271b234405c6a85c471f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f969a465e15abc2f5f271b234405c6a85c471f", "html_url": "https://github.com/rust-lang/rust/commit/19f969a465e15abc2f5f271b234405c6a85c471f"}, {"sha": "3df0b895c1ba705bd4ecf110e3f6bdac7fe20953", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df0b895c1ba705bd4ecf110e3f6bdac7fe20953", "html_url": "https://github.com/rust-lang/rust/commit/3df0b895c1ba705bd4ecf110e3f6bdac7fe20953"}], "stats": {"total": 497, "additions": 487, "deletions": 10}, "files": [{"sha": "3938df1a6826743b089edef4ba533f99cd485090", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -53,7 +53,7 @@ For example, in the following code:\n ```rust\n /// Does the thing.\n pub fn do_the_thing(_: SomeType) {\n-\tprintln!(\"Let's do the thing!\");\n+    println!(\"Let's do the thing!\");\n }\n \n /// Token you use to [`do_the_thing`].\n@@ -66,15 +66,15 @@ target out also works:\n \n ```rust\n pub mod some_module {\n-\t/// Token you use to do the thing.\n-\tpub struct SomeStruct;\n+    /// Token you use to do the thing.\n+    pub struct SomeStruct;\n }\n \n /// Does the thing. Requires one [`SomeStruct`] for the thing to work.\n ///\n /// [`SomeStruct`]: some_module::SomeStruct\n pub fn do_the_thing(_: some_module::SomeStruct) {\n-\tprintln!(\"Let's do the thing!\");\n+    println!(\"Let's do the thing!\");\n }\n ```\n \n@@ -428,3 +428,30 @@ $ rustdoc src/lib.rs --test -Z unstable-options --persist-doctests target/rustdo\n This flag allows you to keep doctest executables around after they're compiled or run.\n Usually, rustdoc will immediately discard a compiled doctest after it's been tested, but\n with this option, you can keep those binaries around for farther testing.\n+\n+### `--show-coverage`: calculate the percentage of items with documentation\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --show-coverage\n+```\n+\n+If you want to determine how many items in your crate are documented, pass this flag to rustdoc.\n+When it receives this flag, it will count the public items in your crate that have documentation,\n+and print out the counts and a percentage instead of generating docs.\n+\n+Some methodology notes about what rustdoc counts in this metric:\n+\n+* Rustdoc will only count items from your crate (i.e. items re-exported from other crates don't\n+  count).\n+* Docs written directly onto inherent impl blocks are not counted, even though their doc comments\n+  are displayed, because the common pattern in Rust code is to write all inherent methods into the\n+  same impl block.\n+* Items in a trait implementation are not counted, as those impls will inherit any docs from the\n+  trait itself.\n+* By default, only public items are counted. To count private items as well, pass\n+  `--document-private-items` at the same time.\n+\n+Public items that are not documented can be seen with the built-in `missing_docs` lint. Private\n+items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint."}, {"sha": "aeff78350d37cadd4749b13fdf76bff89ac68290", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -85,6 +85,9 @@ pub struct Options {\n     /// Whether to display warnings during doc generation or while gathering doctests. By default,\n     /// all non-rustdoc-specific lints are allowed when generating docs.\n     pub display_warnings: bool,\n+    /// Whether to run the `calculate-doc-coverage` pass, which counts the number of public items\n+    /// with and without documentation.\n+    pub show_coverage: bool,\n \n     // Options that alter generated documentation pages\n \n@@ -128,6 +131,7 @@ impl fmt::Debug for Options {\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n+            .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n             .finish()\n@@ -224,6 +228,18 @@ impl Options {\n             for &name in passes::DEFAULT_PRIVATE_PASSES {\n                 println!(\"{:>20}\", name);\n             }\n+\n+            if nightly_options::is_nightly_build() {\n+                println!(\"\\nPasses run with `--show-coverage`:\");\n+                for &name in passes::DEFAULT_COVERAGE_PASSES {\n+                    println!(\"{:>20}\", name);\n+                }\n+                println!(\"\\nPasses run with `--show-coverage --document-private-items`:\");\n+                for &name in passes::PRIVATE_COVERAGE_PASSES {\n+                    println!(\"{:>20}\", name);\n+                }\n+            }\n+\n             return Err(0);\n         }\n \n@@ -413,9 +429,16 @@ impl Options {\n             }\n         });\n \n+        let show_coverage = matches.opt_present(\"show-coverage\");\n+        let document_private = matches.opt_present(\"document-private-items\");\n+\n         let default_passes = if matches.opt_present(\"no-defaults\") {\n             passes::DefaultPassOption::None\n-        } else if matches.opt_present(\"document-private-items\") {\n+        } else if show_coverage && document_private {\n+            passes::DefaultPassOption::PrivateCoverage\n+        } else if show_coverage {\n+            passes::DefaultPassOption::Coverage\n+        } else if document_private {\n             passes::DefaultPassOption::Private\n         } else {\n             passes::DefaultPassOption::Default\n@@ -463,6 +486,7 @@ impl Options {\n             default_passes,\n             manual_passes,\n             display_warnings,\n+            show_coverage,\n             crate_version,\n             persist_doctests,\n             render_options: RenderOptions {"}, {"sha": "373856319f1f32a8945f80dbdf2b542e6387ade5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -617,10 +617,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n             info!(\"Executing passes\");\n \n-            for pass in &passes {\n-                match passes::find_pass(pass).map(|p| p.pass) {\n-                    Some(pass) => krate = pass(krate, &ctxt),\n-                    None => error!(\"unknown pass {}, skipping\", *pass),\n+            for pass_name in &passes {\n+                match passes::find_pass(pass_name).map(|p| p.pass) {\n+                    Some(pass) => {\n+                        debug!(\"running pass {}\", pass_name);\n+                        krate = pass(krate, &ctxt);\n+                    }\n+                    None => error!(\"unknown pass {}, skipping\", *pass_name),\n                 }\n             }\n "}, {"sha": "366e60b3ad9206e89282d7806dfcd69ee3cc7852", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -15,7 +15,7 @@ use crate::clean;\n /// module headings. If you are adding to this enum and want to ensure that the sidebar also prints\n /// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n /// ordering based on a helper function inside `item_module`, in the same file.\n-#[derive(Copy, PartialEq, Clone, Debug)]\n+#[derive(Copy, PartialEq, Eq, Clone, Debug, PartialOrd, Ord)]\n pub enum ItemType {\n     Module          = 0,\n     ExternCrate     = 1,"}, {"sha": "2a0ef3222ab8eff56b878dee1551e42c460f4ba8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -348,6 +348,11 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"generate-redirect-pages\",\n                       \"Generate extra pages to support legacy URLs and tool links\")\n         }),\n+        unstable(\"show-coverage\", |o| {\n+            o.optflag(\"\",\n+                      \"show-coverage\",\n+                      \"calculate percentage of public items with documentation\")\n+        }),\n     ]\n }\n \n@@ -392,7 +397,14 @@ fn main_args(args: &[String]) -> isize {\n     let diag_opts = (options.error_format,\n                      options.debugging_options.treat_err_as_bug,\n                      options.debugging_options.ui_testing);\n+    let show_coverage = options.show_coverage;\n     rust_input(options, move |out| {\n+        if show_coverage {\n+            // if we ran coverage, bail early, we don't need to also generate docs at this point\n+            // (also we didn't load in any of the useful passes)\n+            return rustc_driver::EXIT_SUCCESS;\n+        }\n+\n         let Output { krate, passes, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n         let (error_format, treat_err_as_bug, ui_testing) = diag_opts;"}, {"sha": "04f403888c1fbaab783208057e1a6c6fa96653ed", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,166 @@\n+use crate::clean;\n+use crate::core::DocContext;\n+use crate::fold::{self, DocFolder};\n+use crate::passes::Pass;\n+\n+use syntax::attr;\n+use syntax_pos::FileName;\n+\n+use std::collections::BTreeMap;\n+use std::ops;\n+\n+pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n+    name: \"calculate-doc-coverage\",\n+    pass: calculate_doc_coverage,\n+    description: \"counts the number of items with and without documentation\",\n+};\n+\n+fn calculate_doc_coverage(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> clean::Crate {\n+    let mut calc = CoverageCalculator::default();\n+    let krate = calc.fold_crate(krate);\n+\n+    calc.print_results();\n+\n+    krate\n+}\n+\n+#[derive(Default, Copy, Clone)]\n+struct ItemCount {\n+    total: u64,\n+    with_docs: u64,\n+}\n+\n+impl ItemCount {\n+    fn count_item(&mut self, has_docs: bool) {\n+        self.total += 1;\n+\n+        if has_docs {\n+            self.with_docs += 1;\n+        }\n+    }\n+\n+    fn percentage(&self) -> Option<f64> {\n+        if self.total > 0 {\n+            Some((self.with_docs as f64 * 100.0) / self.total as f64)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl ops::Sub for ItemCount {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        ItemCount {\n+            total: self.total - rhs.total,\n+            with_docs: self.with_docs - rhs.with_docs,\n+        }\n+    }\n+}\n+\n+impl ops::AddAssign for ItemCount {\n+    fn add_assign(&mut self, rhs: Self) {\n+        self.total += rhs.total;\n+        self.with_docs += rhs.with_docs;\n+    }\n+}\n+\n+#[derive(Default)]\n+struct CoverageCalculator {\n+    items: BTreeMap<FileName, ItemCount>,\n+}\n+\n+impl CoverageCalculator {\n+    fn print_results(&self) {\n+        let mut total = ItemCount::default();\n+\n+        fn print_table_line() {\n+            println!(\"+-{0:->35}-+-{0:->10}-+-{0:->10}-+-{0:->10}-+\", \"\");\n+        }\n+\n+        fn print_table_record(name: &str, count: ItemCount, percentage: f64) {\n+            println!(\"| {:<35} | {:>10} | {:>10} | {:>9.1}% |\",\n+                     name, count.with_docs, count.total, percentage);\n+        }\n+\n+        print_table_line();\n+        println!(\"| {:<35} | {:>10} | {:>10} | {:>10} |\",\n+                 \"File\", \"Documented\", \"Total\", \"Percentage\");\n+        print_table_line();\n+\n+        for (file, &count) in &self.items {\n+            if let Some(percentage) = count.percentage() {\n+                let mut name = file.to_string();\n+                // if a filename is too long, shorten it so we don't blow out the table\n+                // FIXME(misdreavus): this needs to count graphemes, and probably also track\n+                // double-wide characters...\n+                if name.len() > 35 {\n+                    name = \"...\".to_string() + &name[name.len()-32..];\n+                }\n+\n+                print_table_record(&name, count, percentage);\n+\n+                total += count;\n+            }\n+        }\n+\n+        print_table_line();\n+        print_table_record(\"Total\", total, total.percentage().unwrap_or(0.0));\n+        print_table_line();\n+    }\n+}\n+\n+impl fold::DocFolder for CoverageCalculator {\n+    fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n+        let has_docs = !i.attrs.doc_strings.is_empty();\n+\n+        match i.inner {\n+            _ if !i.def_id.is_local() => {\n+                // non-local items are skipped because they can be out of the users control,\n+                // especially in the case of trait impls, which rustdoc eagerly inlines\n+                return Some(i);\n+            }\n+            clean::StrippedItem(..) => {\n+                // don't count items in stripped modules\n+                return Some(i);\n+            }\n+            clean::ImportItem(..) | clean::ExternCrateItem(..) => {\n+                // docs on `use` and `extern crate` statements are not displayed, so they're not\n+                // worth counting\n+                return Some(i);\n+            }\n+            clean::ImplItem(ref impl_)\n+                if attr::contains_name(&i.attrs.other_attrs, \"automatically_derived\")\n+                    || impl_.synthetic || impl_.blanket_impl.is_some() =>\n+            {\n+                // built-in derives get the `#[automatically_derived]` attribute, and\n+                // synthetic/blanket impls are made up by rustdoc and can't be documented\n+                // FIXME(misdreavus): need to also find items that came out of a derive macro\n+                return Some(i);\n+            }\n+            clean::ImplItem(ref impl_) => {\n+                if let Some(ref tr) = impl_.trait_ {\n+                    debug!(\"impl {:#} for {:#} in {}\", tr, impl_.for_, i.source.filename);\n+\n+                    // don't count trait impls, the missing-docs lint doesn't so we shouldn't\n+                    // either\n+                    return Some(i);\n+                } else {\n+                    // inherent impls *can* be documented, and those docs show up, but in most\n+                    // cases it doesn't make sense, as all methods on a type are in one single\n+                    // impl block\n+                    debug!(\"impl {:#} in {}\", impl_.for_, i.source.filename);\n+                }\n+            }\n+            _ => {\n+                debug!(\"counting {} {:?} in {}\", i.type_(), i.name, i.source.filename);\n+                self.items.entry(i.source.filename.clone())\n+                          .or_default()\n+                          .count_item(has_docs);\n+            }\n+        }\n+\n+        self.fold_item_recur(i)\n+    }\n+}"}, {"sha": "3b0aebe53f38fc69199c0a57ebd101d43d79b992", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -45,6 +45,9 @@ pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n mod check_code_block_syntax;\n pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n \n+mod calculate_doc_coverage;\n+pub use self::calculate_doc_coverage::CALCULATE_DOC_COVERAGE;\n+\n /// A single pass over the cleaned documentation.\n ///\n /// Runs in the compiler context, so it has access to types and traits and the like.\n@@ -67,6 +70,7 @@ pub const PASSES: &'static [Pass] = &[\n     COLLECT_INTRA_DOC_LINKS,\n     CHECK_CODE_BLOCK_SYNTAX,\n     COLLECT_TRAIT_IMPLS,\n+    CALCULATE_DOC_COVERAGE,\n ];\n \n /// The list of passes run by default.\n@@ -94,12 +98,29 @@ pub const DEFAULT_PRIVATE_PASSES: &[&str] = &[\n     \"propagate-doc-cfg\",\n ];\n \n+/// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n+pub const DEFAULT_COVERAGE_PASSES: &'static [&'static str] = &[\n+    \"collect-trait-impls\",\n+    \"strip-hidden\",\n+    \"strip-private\",\n+    \"calculate-doc-coverage\",\n+];\n+\n+/// The list of default passes run when `--doc-coverage --document-private-items` is passed to\n+/// rustdoc.\n+pub const PRIVATE_COVERAGE_PASSES: &'static [&'static str] = &[\n+    \"collect-trait-impls\",\n+    \"calculate-doc-coverage\",\n+];\n+\n /// A shorthand way to refer to which set of passes to use, based on the presence of\n /// `--no-defaults` or `--document-private-items`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum DefaultPassOption {\n     Default,\n     Private,\n+    Coverage,\n+    PrivateCoverage,\n     None,\n }\n \n@@ -108,6 +129,8 @@ pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n     match default_set {\n         DefaultPassOption::Default => DEFAULT_PASSES,\n         DefaultPassOption::Private => DEFAULT_PRIVATE_PASSES,\n+        DefaultPassOption::Coverage => DEFAULT_COVERAGE_PASSES,\n+        DefaultPassOption::PrivateCoverage => PRIVATE_COVERAGE_PASSES,\n         DefaultPassOption::None => &[],\n     }\n }"}, {"sha": "4247fdf989556ffaea6c2a30c51d5e16d394905a", "filename": "src/test/rustdoc-ui/coverage/basic.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,50 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(extern_types)]\n+\n+//! Make sure to have some docs on your crate root\n+\n+/// This struct is documented, but its fields are not.\n+///\n+/// However, one field is private, so it shouldn't show in the total.\n+pub struct SomeStruct {\n+    pub some_field: usize,\n+    other_field: usize,\n+}\n+\n+impl SomeStruct {\n+    /// Method with docs\n+    pub fn this_fn(&self) {}\n+\n+    // Method without docs\n+    pub fn other_method(&self) {}\n+}\n+\n+// struct without docs\n+pub struct OtherStruct;\n+\n+// function with no docs\n+pub fn some_fn() {}\n+\n+/// Function with docs\n+pub fn other_fn() {}\n+\n+pub enum SomeEnum {\n+    /// Some of these variants are documented...\n+    VarOne,\n+    /// ...but some of them are not.\n+    VarTwo,\n+    // (like this one)\n+    VarThree,\n+}\n+\n+/// There's a macro here, too\n+#[macro_export]\n+macro_rules! some_macro {\n+    () => {};\n+}\n+\n+extern {\n+    pub type ExternType;\n+}"}, {"sha": "3e916606316260bcb727f53bf3cb7b98a957d6ce", "filename": "src/test/rustdoc-ui/coverage/basic.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/basic.rs |          7 |         14 |      50.0% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          7 |         14 |      50.0% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "463617a1143df4795a7829b884577fa2a5724fa8", "filename": "src/test/rustdoc-ui/coverage/empty.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+// an empty crate still has one item to document: the crate root"}, {"sha": "11b514fbfeaef524c8df4601a81f5b765b1238db", "filename": "src/test/rustdoc-ui/coverage/empty.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/empty.rs |          0 |          1 |       0.0% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          0 |          1 |       0.0% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "5cd7f490d1a9a82c593d81cf4bf2fcbea7d60b02", "filename": "src/test/rustdoc-ui/coverage/enums.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+//! (remember the crate root is still a module)\n+\n+/// so check out this enum here\n+pub enum ThisEnum {\n+    /// this variant has some weird stuff going on\n+    VarOne {\n+        /// like, it has some named fields inside\n+        field_one: usize,\n+        // (these show up as struct fields)\n+        field_two: usize,\n+    },\n+    /// here's another variant for you\n+    VarTwo(String),\n+    // but not all of them need to be documented as thoroughly\n+    VarThree,\n+}\n+\n+/// uninhabited enums? sure, let's throw one of those around\n+pub enum OtherEnum {}"}, {"sha": "87e2ad9f20df68ed54b97aeecb32cbe19acfadce", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...est/rustdoc-ui/coverage/enums.rs |          6 |          8 |      75.0% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          6 |          8 |      75.0% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "b4adf45b90b8af983caf762c7dc32142d62f4f21", "filename": "src/test/rustdoc-ui/coverage/exotic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(doc_keyword)]\n+\n+//! the features only used in std also have entries in the table, so make sure those get pulled out\n+//! properly as well\n+\n+/// woo, check it out, we can write our own primitive docs lol\n+#[doc(primitive=\"unit\")]\n+mod prim_unit {}\n+\n+/// keywords? sure, pile them on\n+#[doc(keyword=\"where\")]\n+mod where_keyword {}"}, {"sha": "2bacfcfcecabe497df43805f3fc59e44dabcb39f", "filename": "src/test/rustdoc-ui/coverage/exotic.stdout", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,8 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...st/rustdoc-ui/coverage/exotic.rs |          1 |          1 |     100.0% |\n+| <anon>                              |          2 |          2 |     100.0% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          3 |          3 |     100.0% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "9024185856daaec0fe9c91e31f1aed6d6f1d9610", "filename": "src/test/rustdoc-ui/coverage/private.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags:-Z unstable-options --show-coverage --document-private-items\n+// compile-pass\n+\n+#![allow(unused)]\n+\n+//! when `--document-private-items` is passed, nothing is safe. everything must have docs or your\n+//! score will suffer the consequences\n+\n+mod this_mod {\n+    fn private_fn() {}\n+}\n+\n+/// See, our public items have docs!\n+pub struct SomeStruct {\n+    /// Look, all perfectly documented!\n+    pub field: usize,\n+    other: usize,\n+}\n+\n+/// Nothing shady going on here. Just a bunch of well-documented code. (cough)\n+pub fn public_fn() {}"}, {"sha": "0d4c7c68fd05e0b8eb93702a70fc04324e855c05", "filename": "src/test/rustdoc-ui/coverage/private.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...t/rustdoc-ui/coverage/private.rs |          4 |          7 |      57.1% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          4 |          7 |      57.1% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "3c1dd35dfe1ab8a66a59c7e9b783d496c10e24e1", "filename": "src/test/rustdoc-ui/coverage/statics-consts.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+//! gotta make sure we can count statics and consts correctly, too\n+\n+/// static like electricity, right?\n+pub static THIS_STATIC: usize = 0;\n+\n+/// (it's not electricity, is it)\n+pub const THIS_CONST: usize = 1;\n+\n+/// associated consts show up separately, but let's throw them in as well\n+pub trait SomeTrait {\n+    /// just like that, yeah\n+    const ASSOC_CONST: usize;\n+}\n+\n+pub struct SomeStruct;\n+\n+impl SomeStruct {\n+    /// wait, structs can have them too, can't forget those\n+    pub const ASSOC_CONST: usize = 100;\n+}"}, {"sha": "8459f90ae7b31674cda8c58603f4b2bd4aa58b8b", "filename": "src/test/rustdoc-ui/coverage/statics-consts.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...oc-ui/coverage/statics-consts.rs |          6 |          7 |      85.7% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          6 |          7 |      85.7% |\n++-------------------------------------+------------+------------+------------+"}, {"sha": "5f32d5b0cccc7933d4fcbc14f6e36031aa2a0aa6", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(trait_alias)]\n+\n+/// look at this trait right here\n+pub trait ThisTrait {\n+    /// that's a trait all right\n+    fn right_here(&self);\n+\n+    /// even the provided functions show up as trait methods\n+    fn aww_yeah(&self) {}\n+\n+    /// gotta check those associated types, they're slippery\n+    type SomeType;\n+}\n+\n+/// so what happens if we take some struct...\n+pub struct SomeStruct;\n+\n+/// ...and slap this trait on it?\n+impl ThisTrait for SomeStruct {\n+    /// nothing! trait impls are totally ignored in this calculation, sorry.\n+    fn right_here(&self) {}\n+\n+    type SomeType = String;\n+}\n+\n+/// but what about those aliases? i hear they're pretty exotic\n+pub trait MyAlias = ThisTrait + Send + Sync;\n+\n+// FIXME(58624): once rustdoc can process existential types, we need to make sure they're counted\n+// /// woah, getting all existential in here\n+// pub existential type ThisExists: ThisTrait;\n+//\n+// /// why don't we get a little more concrete\n+// pub fn defines() -> ThisExists { SomeStruct {} }"}, {"sha": "e347a4da0b97829bad77162765ad7e08952f61e1", "filename": "src/test/rustdoc-ui/coverage/traits.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/61e8cc571d74fbf91e8bbabed22e4a2221295981/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout?ref=61e8cc571d74fbf91e8bbabed22e4a2221295981", "patch": "@@ -0,0 +1,7 @@\n++-------------------------------------+------------+------------+------------+\n+| File                                | Documented |      Total | Percentage |\n++-------------------------------------+------------+------------+------------+\n+| ...st/rustdoc-ui/coverage/traits.rs |          6 |          7 |      85.7% |\n++-------------------------------------+------------+------------+------------+\n+| Total                               |          6 |          7 |      85.7% |\n++-------------------------------------+------------+------------+------------+"}]}