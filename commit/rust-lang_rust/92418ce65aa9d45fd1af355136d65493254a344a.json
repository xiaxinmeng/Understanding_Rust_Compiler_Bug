{"sha": "92418ce65aa9d45fd1af355136d65493254a344a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNDE4Y2U2NWFhOWQ0NWZkMWFmMzU1MTM2ZDY1NDkzMjU0YTM0NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T03:24:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T03:24:27Z"}, "message": "Auto merge of #85594 - Dylan-DPC:rollup-40sgqgg, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #84758 (MSVC: Avoid using jmp stubs for dll function imports)\n - #85288 (add an example to explain std::io::Read::read returning 0 in some cases)\n - #85334 (Add doc aliases to `unit`)\n - #85525 (Fix my mailmap entry)\n - #85571 (Remove surplus prepend LinkedList fn)\n - #85575 (Fix auto-hide for implementations and implementors.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "940fc42c9accf4f2d4ab5fcc47db3d3ba7b6428b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940fc42c9accf4f2d4ab5fcc47db3d3ba7b6428b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92418ce65aa9d45fd1af355136d65493254a344a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92418ce65aa9d45fd1af355136d65493254a344a", "html_url": "https://github.com/rust-lang/rust/commit/92418ce65aa9d45fd1af355136d65493254a344a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92418ce65aa9d45fd1af355136d65493254a344a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c", "html_url": "https://github.com/rust-lang/rust/commit/9c3a2a57ef1f9f7adeaf997d8ff7cdf699aa364c"}, {"sha": "85b45b5163ce8c953a4d4857bf3b91748aa63635", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b45b5163ce8c953a4d4857bf3b91748aa63635", "html_url": "https://github.com/rust-lang/rust/commit/85b45b5163ce8c953a4d4857bf3b91748aa63635"}], "stats": {"total": 397, "additions": 203, "deletions": 194}, "files": [{"sha": "213aa6eff6666be80b43271e684fa8bc643da700", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -43,6 +43,7 @@ Brian Anderson <banderson@mozilla.com> <andersrb@gmail.com>\n Brian Anderson <banderson@mozilla.com> <banderson@mozilla.org>\n Brian Dawn <brian.t.dawn@gmail.com>\n Brian Leibig <brian@brianleibig.com> Brian Leibig <brian.leibig@gmail.com>\n+Noah Lev <camelidcamel@gmail.com>\n Noah Lev <camelidcamel@gmail.com> <37223377+camelid@users.noreply.github.com>\n Carl-Anton Ingmarsson <mail@carlanton.se> <ca.ingmarsson@gmail.com>\n Carol (Nichols || Goulding) <carol.nichols@gmail.com> <193874+carols10cents@users.noreply.github.com>"}, {"sha": "5dda8c47688afb83e4d7a93fae6e01d2ef399262", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -442,27 +442,6 @@ impl<T> LinkedList<T> {\n         }\n     }\n \n-    /// Moves all elements from `other` to the begin of the list.\n-    #[unstable(feature = \"linked_list_prepend\", issue = \"none\")]\n-    pub fn prepend(&mut self, other: &mut Self) {\n-        match self.head {\n-            None => mem::swap(self, other),\n-            Some(mut head) => {\n-                // `as_mut` is okay here because we have exclusive access to the entirety\n-                // of both lists.\n-                if let Some(mut other_tail) = other.tail.take() {\n-                    unsafe {\n-                        head.as_mut().prev = Some(other_tail);\n-                        other_tail.as_mut().next = Some(head);\n-                    }\n-\n-                    self.head = other.head.take();\n-                    self.len += mem::replace(&mut other.len, 0);\n-                }\n-            }\n-        }\n-    }\n-\n     /// Provides a forward iterator.\n     ///\n     /// # Examples"}, {"sha": "b838a655346a07dde521b2f43ddd6371776b3eaf", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -526,7 +526,12 @@ pub trait Read {\n     ///\n     /// 1. This reader has reached its \"end of file\" and will likely no longer\n     ///    be able to produce bytes. Note that this does not mean that the\n-    ///    reader will *always* no longer be able to produce bytes.\n+    ///    reader will *always* no longer be able to produce bytes. As an example,\n+    ///    on Linux, this method will call the `recv` syscall for a [`TcpStream`],\n+    ///    where returning zero indicates the connection was shut down correctly. While\n+    ///    for [`File`], it is possible to reach the end of file and get zero as result,\n+    ///    but if more data is appended to the file, future calls to `read` will return\n+    ///    more data.\n     /// 2. The buffer specified was 0 bytes in length.\n     ///\n     /// It is not an error if the returned value `n` is smaller than the buffer size,\n@@ -568,6 +573,7 @@ pub trait Read {\n     ///\n     /// [`Ok(n)`]: Ok\n     /// [`File`]: crate::fs::File\n+    /// [`TcpStream`]: crate::net::TcpStream\n     ///\n     /// ```no_run\n     /// use std::io;"}, {"sha": "d05b2ffc4e8da2767ccc4382bbe3c672443fdf7b", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -345,6 +345,9 @@ mod prim_never {}\n mod prim_char {}\n \n #[doc(primitive = \"unit\")]\n+#[doc(alias = \"(\")]\n+#[doc(alias = \")\")]\n+#[doc(alias = \"()\")]\n //\n /// The `()` type, also called \"unit\".\n ///"}, {"sha": "b7efc884473b417715ebb46142e94acef7e4ba3d", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 168, "deletions": 152, "changes": 320, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -631,7 +631,7 @@ pub struct timeval {\n     pub tv_usec: c_long,\n }\n \n-// Functions forbidden when targeting UWP\n+// Desktop specific functions & types\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n     pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n@@ -645,7 +645,7 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n         pub ExceptionRecord: *mut EXCEPTION_RECORD,\n         pub ExceptionAddress: LPVOID,\n         pub NumberParameters: DWORD,\n-        pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n+        pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS],\n     }\n \n     pub enum CONTEXT {}\n@@ -656,8 +656,8 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n         pub ContextRecord: *mut CONTEXT,\n     }\n \n-    pub type PVECTORED_EXCEPTION_HANDLER = extern \"system\"\n-            fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n+    pub type PVECTORED_EXCEPTION_HANDLER =\n+        extern \"system\" fn(ExceptionInfo: *mut EXCEPTION_POINTERS) -> LONG;\n \n     #[repr(C)]\n     #[derive(Copy, Clone)]\n@@ -691,44 +691,66 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     pub const TOKEN_READ: DWORD = 0x20008;\n \n+    #[link(name = \"advapi32\")]\n     extern \"system\" {\n+        // Forbidden when targeting UWP\n         #[link_name = \"SystemFunction036\"]\n         pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n \n-        pub fn ReadConsoleW(hConsoleInput: HANDLE,\n-                            lpBuffer: LPVOID,\n-                            nNumberOfCharsToRead: DWORD,\n-                            lpNumberOfCharsRead: LPDWORD,\n-                            pInputControl: PCONSOLE_READCONSOLE_CONTROL) -> BOOL;\n+        // Allowed but unused by UWP\n+        pub fn OpenProcessToken(\n+            ProcessHandle: HANDLE,\n+            DesiredAccess: DWORD,\n+            TokenHandle: *mut HANDLE,\n+        ) -> BOOL;\n+    }\n \n-        pub fn WriteConsoleW(hConsoleOutput: HANDLE,\n-                             lpBuffer: LPCVOID,\n-                             nNumberOfCharsToWrite: DWORD,\n-                             lpNumberOfCharsWritten: LPDWORD,\n-                             lpReserved: LPVOID) -> BOOL;\n+    #[link(name = \"userenv\")]\n+    extern \"system\" {\n+        // Allowed but unused by UWP\n+        pub fn GetUserProfileDirectoryW(\n+            hToken: HANDLE,\n+            lpProfileDir: LPWSTR,\n+            lpcchSize: *mut DWORD,\n+        ) -> BOOL;\n+    }\n \n-        pub fn GetConsoleMode(hConsoleHandle: HANDLE,\n-                              lpMode: LPDWORD) -> BOOL;\n+    #[link(name = \"kernel32\")]\n+    extern \"system\" {\n+        // Functions forbidden when targeting UWP\n+        pub fn ReadConsoleW(\n+            hConsoleInput: HANDLE,\n+            lpBuffer: LPVOID,\n+            nNumberOfCharsToRead: DWORD,\n+            lpNumberOfCharsRead: LPDWORD,\n+            pInputControl: PCONSOLE_READCONSOLE_CONTROL,\n+        ) -> BOOL;\n+\n+        pub fn WriteConsoleW(\n+            hConsoleOutput: HANDLE,\n+            lpBuffer: LPCVOID,\n+            nNumberOfCharsToWrite: DWORD,\n+            lpNumberOfCharsWritten: LPDWORD,\n+            lpReserved: LPVOID,\n+        ) -> BOOL;\n+\n+        pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n         // Allowed but unused by UWP\n-        pub fn OpenProcessToken(ProcessHandle: HANDLE,\n-                                DesiredAccess: DWORD,\n-                                TokenHandle: *mut HANDLE) -> BOOL;\n-        pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n-                                        lpProfileDir: LPWSTR,\n-                                        lpcchSize: *mut DWORD) -> BOOL;\n-        pub fn GetFileInformationByHandle(hFile: HANDLE,\n-                            lpFileInformation: LPBY_HANDLE_FILE_INFORMATION)\n-                            -> BOOL;\n-        pub fn SetHandleInformation(hObject: HANDLE,\n-                                    dwMask: DWORD,\n-                                    dwFlags: DWORD) -> BOOL;\n-        pub fn AddVectoredExceptionHandler(FirstHandler: ULONG,\n-                                           VectoredHandler: PVECTORED_EXCEPTION_HANDLER)\n-                                           -> LPVOID;\n-        pub fn CreateHardLinkW(lpSymlinkFileName: LPCWSTR,\n-                               lpTargetFileName: LPCWSTR,\n-                               lpSecurityAttributes: LPSECURITY_ATTRIBUTES)\n-                               -> BOOL;\n+        pub fn GetFileInformationByHandle(\n+            hFile: HANDLE,\n+            lpFileInformation: LPBY_HANDLE_FILE_INFORMATION,\n+        ) -> BOOL;\n+        pub fn SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD) -> BOOL;\n+        pub fn AddVectoredExceptionHandler(\n+            FirstHandler: ULONG,\n+            VectoredHandler: PVECTORED_EXCEPTION_HANDLER,\n+        ) -> LPVOID;\n+        pub fn CreateHardLinkW(\n+            lpSymlinkFileName: LPCWSTR,\n+            lpTargetFileName: LPCWSTR,\n+            lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n+        ) -> BOOL;\n+        pub fn SetThreadStackGuarantee(_size: *mut c_ulong) -> BOOL;\n     }\n }\n }\n@@ -747,55 +769,32 @@ if #[cfg(target_vendor = \"uwp\")] {\n         pub Directory: BOOLEAN,\n     }\n \n+    #[link(name = \"bcrypt\")]\n     extern \"system\" {\n-        pub fn GetFileInformationByHandleEx(hFile: HANDLE,\n-                                            fileInfoClass: FILE_INFO_BY_HANDLE_CLASS,\n-                                            lpFileInformation: LPVOID,\n-                                            dwBufferSize: DWORD) -> BOOL;\n-        pub fn BCryptGenRandom(hAlgorithm: LPVOID, pBuffer: *mut u8,\n-                               cbBuffer: ULONG, dwFlags: ULONG) -> LONG;\n+        pub fn BCryptGenRandom(\n+            hAlgorithm: LPVOID,\n+            pBuffer: *mut u8,\n+            cbBuffer: ULONG,\n+            dwFlags: ULONG,\n+        ) -> LONG;\n+    }\n+    #[link(name = \"kernel32\")]\n+    extern \"system\" {\n+        pub fn GetFileInformationByHandleEx(\n+            hFile: HANDLE,\n+            fileInfoClass: FILE_INFO_BY_HANDLE_CLASS,\n+            lpFileInformation: LPVOID,\n+            dwBufferSize: DWORD,\n+        ) -> BOOL;\n     }\n }\n }\n \n // Shared between Desktop & UWP\n+\n+#[link(name = \"kernel32\")]\n extern \"system\" {\n-    pub fn WSAStartup(wVersionRequested: WORD, lpWSAData: LPWSADATA) -> c_int;\n-    pub fn WSACleanup() -> c_int;\n-    pub fn WSAGetLastError() -> c_int;\n-    pub fn WSADuplicateSocketW(\n-        s: SOCKET,\n-        dwProcessId: DWORD,\n-        lpProtocolInfo: LPWSAPROTOCOL_INFO,\n-    ) -> c_int;\n-    pub fn WSASend(\n-        s: SOCKET,\n-        lpBuffers: LPWSABUF,\n-        dwBufferCount: DWORD,\n-        lpNumberOfBytesSent: LPDWORD,\n-        dwFlags: DWORD,\n-        lpOverlapped: LPWSAOVERLAPPED,\n-        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,\n-    ) -> c_int;\n-    pub fn WSARecv(\n-        s: SOCKET,\n-        lpBuffers: LPWSABUF,\n-        dwBufferCount: DWORD,\n-        lpNumberOfBytesRecvd: LPDWORD,\n-        lpFlags: LPDWORD,\n-        lpOverlapped: LPWSAOVERLAPPED,\n-        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,\n-    ) -> c_int;\n     pub fn GetCurrentProcessId() -> DWORD;\n-    pub fn WSASocketW(\n-        af: c_int,\n-        kind: c_int,\n-        protocol: c_int,\n-        lpProtocolInfo: LPWSAPROTOCOL_INFO,\n-        g: GROUP,\n-        dwFlags: DWORD,\n-    ) -> SOCKET;\n-    pub fn ioctlsocket(s: SOCKET, cmd: c_long, argp: *mut c_ulong) -> c_int;\n     pub fn InitializeCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n     pub fn EnterCriticalSection(CriticalSection: *mut CRITICAL_SECTION);\n     pub fn TryEnterCriticalSection(CriticalSection: *mut CRITICAL_SECTION) -> BOOL;\n@@ -882,28 +881,6 @@ extern \"system\" {\n     pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;\n     pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-\n-    pub fn closesocket(socket: SOCKET) -> c_int;\n-    pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int;\n-    pub fn send(socket: SOCKET, buf: *const c_void, len: c_int, flags: c_int) -> c_int;\n-    pub fn recvfrom(\n-        socket: SOCKET,\n-        buf: *mut c_void,\n-        len: c_int,\n-        flags: c_int,\n-        addr: *mut SOCKADDR,\n-        addrlen: *mut c_int,\n-    ) -> c_int;\n-    pub fn sendto(\n-        socket: SOCKET,\n-        buf: *const c_void,\n-        len: c_int,\n-        flags: c_int,\n-        addr: *const SOCKADDR,\n-        addrlen: c_int,\n-    ) -> c_int;\n-    pub fn shutdown(socket: SOCKET, how: c_int) -> c_int;\n-    pub fn accept(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> SOCKET;\n     pub fn DuplicateHandle(\n         hSourceProcessHandle: HANDLE,\n         hSourceHandle: HANDLE,\n@@ -950,32 +927,6 @@ extern \"system\" {\n     pub fn FindFirstFileW(fileName: LPCWSTR, findFileData: LPWIN32_FIND_DATAW) -> HANDLE;\n     pub fn FindNextFileW(findFile: HANDLE, findFileData: LPWIN32_FIND_DATAW) -> BOOL;\n     pub fn FindClose(findFile: HANDLE) -> BOOL;\n-    pub fn getsockopt(\n-        s: SOCKET,\n-        level: c_int,\n-        optname: c_int,\n-        optval: *mut c_char,\n-        optlen: *mut c_int,\n-    ) -> c_int;\n-    pub fn setsockopt(\n-        s: SOCKET,\n-        level: c_int,\n-        optname: c_int,\n-        optval: *const c_void,\n-        optlen: c_int,\n-    ) -> c_int;\n-    pub fn getsockname(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> c_int;\n-    pub fn getpeername(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> c_int;\n-    pub fn bind(socket: SOCKET, address: *const SOCKADDR, address_len: socklen_t) -> c_int;\n-    pub fn listen(socket: SOCKET, backlog: c_int) -> c_int;\n-    pub fn connect(socket: SOCKET, address: *const SOCKADDR, len: c_int) -> c_int;\n-    pub fn getaddrinfo(\n-        node: *const c_char,\n-        service: *const c_char,\n-        hints: *const ADDRINFOA,\n-        res: *mut *mut ADDRINFOA,\n-    ) -> c_int;\n-    pub fn freeaddrinfo(res: *mut ADDRINFOA);\n \n     pub fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n     pub fn GetModuleHandleA(lpModuleName: LPCSTR) -> HMODULE;\n@@ -1012,61 +963,33 @@ extern \"system\" {\n         lpNumberOfBytesTransferred: LPDWORD,\n         bWait: BOOL,\n     ) -> BOOL;\n-    pub fn select(\n-        nfds: c_int,\n-        readfds: *mut fd_set,\n-        writefds: *mut fd_set,\n-        exceptfds: *mut fd_set,\n-        timeout: *const timeval,\n-    ) -> c_int;\n-\n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinkw\n     pub fn CreateSymbolicLinkW(\n         lpSymlinkFileName: LPCWSTR,\n         lpTargetFileName: LPCWSTR,\n         dwFlags: DWORD,\n     ) -> BOOLEAN;\n-\n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlew\n     pub fn GetFinalPathNameByHandleW(\n         hFile: HANDLE,\n         lpszFilePath: LPCWSTR,\n         cchFilePath: DWORD,\n         dwFlags: DWORD,\n     ) -> DWORD;\n-\n-    // >= Vista / Server 2003\n-    // https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadstackguarantee\n-    #[cfg(not(target_vendor = \"uwp\"))]\n-    pub fn SetThreadStackGuarantee(_size: *mut c_ulong) -> BOOL;\n-\n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfileinformationbyhandle\n     pub fn SetFileInformationByHandle(\n         hFile: HANDLE,\n         FileInformationClass: FILE_INFO_BY_HANDLE_CLASS,\n         lpFileInformation: LPVOID,\n         dwBufferSize: DWORD,\n     ) -> BOOL;\n-\n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleepconditionvariablesrw\n     pub fn SleepConditionVariableSRW(\n         ConditionVariable: PCONDITION_VARIABLE,\n         SRWLock: PSRWLOCK,\n         dwMilliseconds: DWORD,\n         Flags: ULONG,\n     ) -> BOOL;\n \n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-wakeconditionvariable\n     pub fn WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);\n     pub fn WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE);\n \n-    // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-acquiresrwlockexclusive\n     pub fn AcquireSRWLockExclusive(SRWLock: PSRWLOCK);\n     pub fn AcquireSRWLockShared(SRWLock: PSRWLOCK);\n     pub fn ReleaseSRWLockExclusive(SRWLock: PSRWLOCK);\n@@ -1075,6 +998,99 @@ extern \"system\" {\n     pub fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) -> BOOLEAN;\n }\n \n+#[link(name = \"ws2_32\")]\n+extern \"system\" {\n+    pub fn WSAStartup(wVersionRequested: WORD, lpWSAData: LPWSADATA) -> c_int;\n+    pub fn WSACleanup() -> c_int;\n+    pub fn WSAGetLastError() -> c_int;\n+    pub fn WSADuplicateSocketW(\n+        s: SOCKET,\n+        dwProcessId: DWORD,\n+        lpProtocolInfo: LPWSAPROTOCOL_INFO,\n+    ) -> c_int;\n+    pub fn WSASend(\n+        s: SOCKET,\n+        lpBuffers: LPWSABUF,\n+        dwBufferCount: DWORD,\n+        lpNumberOfBytesSent: LPDWORD,\n+        dwFlags: DWORD,\n+        lpOverlapped: LPWSAOVERLAPPED,\n+        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,\n+    ) -> c_int;\n+    pub fn WSARecv(\n+        s: SOCKET,\n+        lpBuffers: LPWSABUF,\n+        dwBufferCount: DWORD,\n+        lpNumberOfBytesRecvd: LPDWORD,\n+        lpFlags: LPDWORD,\n+        lpOverlapped: LPWSAOVERLAPPED,\n+        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,\n+    ) -> c_int;\n+    pub fn WSASocketW(\n+        af: c_int,\n+        kind: c_int,\n+        protocol: c_int,\n+        lpProtocolInfo: LPWSAPROTOCOL_INFO,\n+        g: GROUP,\n+        dwFlags: DWORD,\n+    ) -> SOCKET;\n+    pub fn ioctlsocket(s: SOCKET, cmd: c_long, argp: *mut c_ulong) -> c_int;\n+    pub fn closesocket(socket: SOCKET) -> c_int;\n+    pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int;\n+    pub fn send(socket: SOCKET, buf: *const c_void, len: c_int, flags: c_int) -> c_int;\n+    pub fn recvfrom(\n+        socket: SOCKET,\n+        buf: *mut c_void,\n+        len: c_int,\n+        flags: c_int,\n+        addr: *mut SOCKADDR,\n+        addrlen: *mut c_int,\n+    ) -> c_int;\n+    pub fn sendto(\n+        socket: SOCKET,\n+        buf: *const c_void,\n+        len: c_int,\n+        flags: c_int,\n+        addr: *const SOCKADDR,\n+        addrlen: c_int,\n+    ) -> c_int;\n+    pub fn shutdown(socket: SOCKET, how: c_int) -> c_int;\n+    pub fn accept(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> SOCKET;\n+    pub fn getsockopt(\n+        s: SOCKET,\n+        level: c_int,\n+        optname: c_int,\n+        optval: *mut c_char,\n+        optlen: *mut c_int,\n+    ) -> c_int;\n+    pub fn setsockopt(\n+        s: SOCKET,\n+        level: c_int,\n+        optname: c_int,\n+        optval: *const c_void,\n+        optlen: c_int,\n+    ) -> c_int;\n+    pub fn getsockname(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> c_int;\n+    pub fn getpeername(socket: SOCKET, address: *mut SOCKADDR, address_len: *mut c_int) -> c_int;\n+    pub fn bind(socket: SOCKET, address: *const SOCKADDR, address_len: socklen_t) -> c_int;\n+    pub fn listen(socket: SOCKET, backlog: c_int) -> c_int;\n+    pub fn connect(socket: SOCKET, address: *const SOCKADDR, len: c_int) -> c_int;\n+    pub fn getaddrinfo(\n+        node: *const c_char,\n+        service: *const c_char,\n+        hints: *const ADDRINFOA,\n+        res: *mut *mut ADDRINFOA,\n+    ) -> c_int;\n+    pub fn freeaddrinfo(res: *mut ADDRINFOA);\n+    pub fn select(\n+        nfds: c_int,\n+        readfds: *mut fd_set,\n+        writefds: *mut fd_set,\n+        exceptfds: *mut fd_set,\n+        timeout: *const timeval,\n+    ) -> c_int;\n+}\n+\n // Functions that aren't available on every version of Windows that we support,\n // but we still use them and just provide some form of a fallback implementation.\n compat_fn! {"}, {"sha": "f23e874f249054df88c85c792f9ec37704ef9612", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -281,17 +281,3 @@ pub fn abort_internal() -> ! {\n     }\n     crate::intrinsics::abort();\n }\n-\n-cfg_if::cfg_if! {\n-    if #[cfg(target_vendor = \"uwp\")] {\n-        #[link(name = \"ws2_32\")]\n-        // For BCryptGenRandom\n-        #[link(name = \"bcrypt\")]\n-        extern \"C\" {}\n-    } else {\n-        #[link(name = \"advapi32\")]\n-        #[link(name = \"ws2_32\")]\n-        #[link(name = \"userenv\")]\n-        extern \"C\" {}\n-    }\n-}"}, {"sha": "b3bd1cd012166397665a99a7711b2527537a5071", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -1545,7 +1545,7 @@ fn render_impl(\n     let open_details = |close_tags: &mut String| {\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n-            \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n+            \"<details class=\\\"rustdoc-toggle implementors-toggle\\\"><summary>\"\n         } else {\n             \"\"\n         }"}, {"sha": "a96b0c871089983e87bae81b6efcdbd423bef91a", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -776,12 +776,29 @@ function hideThemeButtonState() {\n \n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n+        var hideImplementations = getSettingValue(\"auto-hide-trait-implementations\") !== \"false\";\n         var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n-        onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n-            var showLargeItem = !hideLargeItemContents && hasClass(e, \"type-contents-toggle\");\n-            var showImplementor = !hideImplementors && hasClass(e, \"implementors-toggle\");\n-            if (showLargeItem || showImplementor) {\n+        function openImplementors(id) {\n+            var list = document.getElementById(id);\n+            if (list !== null) {\n+                onEachLazy(list.getElementsByClassName(\"implementors-toggle\"), function(e) {\n+                    e.open = true;\n+                });\n+            }\n+        }\n+\n+        if (!hideImplementations) {\n+            openImplementors(\"trait-implementations-list\");\n+            openImplementors(\"blanket-implementations-list\");\n+        }\n+\n+        if (!hideImplementors) {\n+            openImplementors(\"implementors-list\");\n+        }\n+\n+        onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function (e) {\n+            if (!hideLargeItemContents && hasClass(e, \"type-contents-toggle\")) {\n                 e.open = true;\n             }\n             if (hideMethodDocs && hasClass(e, \"method-toggle\")) {"}, {"sha": "5b448bd1923b00833c05dff88a610a011d0277ed", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92418ce65aa9d45fd1af355136d65493254a344a/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92418ce65aa9d45fd1af355136d65493254a344a/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=92418ce65aa9d45fd1af355136d65493254a344a", "patch": "@@ -65,7 +65,8 @@ impl T for S2 {\n }\n \n // @has manual_impl/struct.S3.html '//*[@class=\"trait\"]' 'T'\n-// @has  - '//details[@open=\"\"]/div[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n+// @has  - '//details/div[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n+// @!has  - '//details[@open=\"\"]/div[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n // @has  - '//details[@open=\"\"]/div[@class=\"docblock\"]' 'Docs associated with the S3 trait b_method implementation.'\n // @!has - '//div[@class=\"impl-items\"]/details[@open=\"\"]//div[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n // @has - '//div[@class=\"impl-items\"]/details//div[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'"}]}