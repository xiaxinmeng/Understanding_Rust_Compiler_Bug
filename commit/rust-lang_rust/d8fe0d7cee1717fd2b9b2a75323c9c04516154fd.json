{"sha": "d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZmUwZDdjZWUxNzE3ZmQyYjliMmE3NTMyM2M5YzA0NTE2MTU0ZmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T06:38:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T17:45:30Z"}, "message": "Remove the concept of crate directive expressions. Issue #604", "tree": {"sha": "2e32bef63341d0fc0f38536badf854920bfab442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e32bef63341d0fc0f38536badf854920bfab442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "html_url": "https://github.com/rust-lang/rust/commit/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca45720f7a364175aaefc6d4e9b6665fb8bf8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca45720f7a364175aaefc6d4e9b6665fb8bf8ab", "html_url": "https://github.com/rust-lang/rust/commit/bca45720f7a364175aaefc6d4e9b6665fb8bf8ab"}], "stats": {"total": 67, "additions": 1, "deletions": 66}, "files": [{"sha": "3e10233d592969872d03219308a6d2ca04c6f646", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "patch": "@@ -88,8 +88,6 @@ type crate_ = rec(vec[@crate_directive] directives,\n                   crate_cfg config);\n \n tag crate_directive_ {\n-    cdir_expr(@expr);\n-\n     // FIXME: cdir_let should be eliminated\n     // and redirected to the use of const stmt_decls inside\n     // crate directive blocks."}, {"sha": "92e03e129d04cbb7f96bb2f0450e35fd79efea7b", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "patch": "@@ -196,63 +196,6 @@ fn eval_crate_directive_block(ctx cx, &ast::block blk, str prefix,\n     }\n }\n \n-fn eval_crate_directive_expr(ctx cx, @ast::expr x, str prefix,\n-                             &mutable vec[@ast::view_item] view_items,\n-                             &mutable vec[@ast::item] items) {\n-    alt (x.node) {\n-        case (ast::expr_if(?cond, ?thn, ?elopt)) {\n-            auto cv = eval_expr(cx, cond);\n-            if (!val_is_bool(cv)) {\n-                cx.sess.span_fatal(x.span, \"bad cond type in 'if'\");\n-            }\n-            if (val_as_bool(cv)) {\n-                ret eval_crate_directive_block(cx, thn, prefix, view_items,\n-                                               items);\n-            }\n-            alt (elopt) {\n-                case (some(?els)) {\n-                    ret eval_crate_directive_expr(cx, els, prefix,\n-                                                  view_items, items);\n-                }\n-                case (_) {\n-                    // Absent-else is ok.\n-\n-                }\n-            }\n-        }\n-        case (ast::expr_alt(?v, ?arms)) {\n-            auto vv = eval_expr(cx, v);\n-            for (ast::arm arm in arms) {\n-                alt (arm.pat.node) {\n-                    case (ast::pat_lit(?lit, _)) {\n-                        auto pv = eval_lit(cx, arm.pat.span, lit);\n-                        if (val_eq(cx.sess, arm.pat.span, vv, pv)) {\n-                            ret eval_crate_directive_block(cx, arm.block,\n-                                                           prefix, view_items,\n-                                                           items);\n-                        }\n-                    }\n-                    case (ast::pat_wild(_)) {\n-                        ret eval_crate_directive_block(cx, arm.block,\n-                                                       prefix, view_items,\n-                                                       items);\n-                    }\n-                    case (_) {\n-                        cx.sess.span_fatal(arm.pat.span,\n-                                         \"bad pattern type in 'alt'\");\n-                    }\n-                }\n-            }\n-            cx.sess.span_fatal(x.span, \"no cases matched in 'alt'\");\n-        }\n-        case (ast::expr_block(?block)) {\n-            ret eval_crate_directive_block(cx, block, prefix, view_items,\n-                                           items);\n-        }\n-        case (_) { cx.sess.span_fatal(x.span, \"unsupported expr type\"); }\n-    }\n-}\n-\n fn eval_crate_directive(ctx cx, @ast::crate_directive cdir, str prefix,\n                         &mutable vec[@ast::view_item] view_items,\n                         &mutable vec[@ast::item] items) {\n@@ -261,9 +204,6 @@ fn eval_crate_directive(ctx cx, @ast::crate_directive cdir, str prefix,\n             auto v = eval_expr(cx, x);\n             eval_crate_directives(cx, cdirs, prefix, view_items, items);\n         }\n-        case (ast::cdir_expr(?x)) {\n-            eval_crate_directive_expr(cx, x, prefix, view_items, items);\n-        }\n         case (ast::cdir_src_mod(?id, ?file_opt, ?attrs)) {\n             auto file_path = id + \".rs\";\n             alt (file_opt) {"}, {"sha": "57f6d5ad16a6c30bdfdecdaeff2cf5eb244790fe", "filename": "src/comp/front/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ffold.rs?ref=d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "patch": "@@ -139,7 +139,6 @@ fn noop_fold_crate(&crate_ c, ast_fold fld) -> crate_ {\n fn noop_fold_crate_directive(&crate_directive_ cd, ast_fold fld) \n     -> crate_directive_ {\n     ret alt(cd) {\n-        case(cdir_expr(?e)) { cdir_expr(fld.fold_expr(e)) }\n         case(cdir_let(?id, ?e, ?cds)) {\n             cdir_let(fld.fold_ident(id), fld.fold_expr(e),\n                      map(fld.fold_crate_directive, cds))"}, {"sha": "d574122b36f62c5d6e00847128327d34a350fd4b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "patch": "@@ -2412,10 +2412,8 @@ fn parse_crate_directive(&parser p, vec[ast::attribute] first_outer_attr)\n         auto vi = parse_view_item(p);\n         ret spanned(lo, vi.span.hi, ast::cdir_view_item(vi));\n     } else {\n-        auto x = parse_expr(p);\n-        ret spanned(lo, x.span.hi, ast::cdir_expr(x));\n+        ret p.fatal(\"expected crate directive\");\n     }\n-    fail;\n }\n \n fn parse_crate_directives(&parser p, token::token term,"}]}