{"sha": "360a165ed321541f602756aff14aba58a78c2d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MGExNjVlZDMyMTU0MWY2MDI3NTZhZmYxNGFiYTU4YTc4YzJkM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-24T11:29:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-24T11:29:31Z"}, "message": "Auto merge of #31828 - frewsxcv:sepseq-associated-function, r=alexcrichton\n\nNone", "tree": {"sha": "5870e386e37cd5ec6e35848171fbf57bffedc8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5870e386e37cd5ec6e35848171fbf57bffedc8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360a165ed321541f602756aff14aba58a78c2d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360a165ed321541f602756aff14aba58a78c2d3b", "html_url": "https://github.com/rust-lang/rust/commit/360a165ed321541f602756aff14aba58a78c2d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360a165ed321541f602756aff14aba58a78c2d3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df91cb9af69497e67e432c66ccba5182681b8917", "url": "https://api.github.com/repos/rust-lang/rust/commits/df91cb9af69497e67e432c66ccba5182681b8917", "html_url": "https://github.com/rust-lang/rust/commit/df91cb9af69497e67e432c66ccba5182681b8917"}, {"sha": "bc2f5e261283c3a3d996ae36db053ca096dd01f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2f5e261283c3a3d996ae36db053ca096dd01f8", "html_url": "https://github.com/rust-lang/rust/commit/bc2f5e261283c3a3d996ae36db053ca096dd01f8"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "0950d6082e7e2bb5d8cbdb6a61f617b345e28215", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=360a165ed321541f602756aff14aba58a78c2d3b", "patch": "@@ -11,7 +11,7 @@\n use attr;\n use ast;\n use codemap::{spanned, Spanned, mk_sp, Span};\n-use parse::common::*; //resolve bug?\n+use parse::common::SeqSep;\n use parse::PResult;\n use parse::token;\n use parse::parser::{Parser, TokenType};\n@@ -200,7 +200,7 @@ impl<'a> Parser<'a> {\n     fn parse_meta_seq(&mut self) -> PResult<'a, Vec<P<ast::MetaItem>>> {\n         self.parse_unspanned_seq(&token::OpenDelim(token::Paren),\n                                  &token::CloseDelim(token::Paren),\n-                                 seq_sep_trailing_allowed(token::Comma),\n+                                 SeqSep::trailing_allowed(token::Comma),\n                                  |p: &mut Parser<'a>| p.parse_meta_item())\n     }\n }"}, {"sha": "b57708f9193a39c4daed2ba0be23ce010c1ee45f", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=360a165ed321541f602756aff14aba58a78c2d3b", "patch": "@@ -19,16 +19,18 @@ pub struct SeqSep {\n     pub trailing_sep_allowed: bool,\n }\n \n-pub fn seq_sep_trailing_allowed(t: token::Token) -> SeqSep {\n-    SeqSep {\n-        sep: Some(t),\n-        trailing_sep_allowed: true,\n+impl SeqSep {\n+    pub fn trailing_allowed(t: token::Token) -> SeqSep {\n+        SeqSep {\n+            sep: Some(t),\n+            trailing_sep_allowed: true,\n+        }\n     }\n-}\n \n-pub fn seq_sep_none() -> SeqSep {\n-    SeqSep {\n-        sep: None,\n-        trailing_sep_allowed: false,\n+    pub fn none() -> SeqSep {\n+        SeqSep {\n+            sep: None,\n+            trailing_sep_allowed: false,\n+        }\n     }\n }"}, {"sha": "d65a5e56b90eab5382d391ec562867db01411e16", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360a165ed321541f602756aff14aba58a78c2d3b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=360a165ed321541f602756aff14aba58a78c2d3b", "patch": "@@ -50,7 +50,7 @@ use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n use parse;\n use parse::classify;\n-use parse::common::{SeqSep, seq_sep_none, seq_sep_trailing_allowed};\n+use parse::common::SeqSep;\n use parse::lexer::{Reader, TokenAndSpan};\n use parse::obsolete::{ParserObsoleteMethods, ObsoleteSyntax};\n use parse::token::{self, intern, MatchNt, SubstNt, SpecialVarNt, InternedString};\n@@ -851,7 +851,7 @@ impl<'a> Parser<'a> {\n     /// passes through any errors encountered. Used for error recovery.\n     pub fn eat_to_tokens(&mut self, kets: &[&token::Token]) {\n         self.parse_seq_to_before_tokens(kets,\n-                                        seq_sep_none(),\n+                                        SeqSep::none(),\n                                         |p| p.parse_token_tree(),\n                                         |mut e| e.cancel());\n     }\n@@ -1235,7 +1235,7 @@ impl<'a> Parser<'a> {\n         self.parse_unspanned_seq(\n             &token::OpenDelim(token::Brace),\n             &token::CloseDelim(token::Brace),\n-            seq_sep_none(),\n+            SeqSep::none(),\n             |p| -> PResult<'a, TraitItem> {\n             maybe_whole!(no_clone_from_p p, NtTraitItem);\n             let mut attrs = try!(p.parse_outer_attributes());\n@@ -1460,7 +1460,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let delim = try!(self.expect_open_delim());\n                 let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n-                                                     seq_sep_none(),\n+                                                     SeqSep::none(),\n                                                      |p| p.parse_token_tree()));\n                 let hi = self.span.hi;\n                 TyKind::Mac(spanned(lo, hi, Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT }))\n@@ -1800,7 +1800,7 @@ impl<'a> Parser<'a> {\n \n                 let inputs = try!(self.parse_seq_to_end(\n                     &token::CloseDelim(token::Paren),\n-                    seq_sep_trailing_allowed(token::Comma),\n+                    SeqSep::trailing_allowed(token::Comma),\n                     |p| p.parse_ty_sum()));\n \n                 let output_ty = if self.eat(&token::RArrow) {\n@@ -2206,7 +2206,7 @@ impl<'a> Parser<'a> {\n                         self.bump();\n                         let remaining_exprs = try!(self.parse_seq_to_end(\n                             &token::CloseDelim(token::Bracket),\n-                            seq_sep_trailing_allowed(token::Comma),\n+                            SeqSep::trailing_allowed(token::Comma),\n                             |p| Ok(try!(p.parse_expr()))\n                                 ));\n                         let mut exprs = vec!(first_expr);\n@@ -2325,7 +2325,7 @@ impl<'a> Parser<'a> {\n                         let delim = try!(self.expect_open_delim());\n                         let tts = try!(self.parse_seq_to_end(\n                             &token::CloseDelim(delim),\n-                            seq_sep_none(),\n+                            SeqSep::none(),\n                             |p| p.parse_token_tree()));\n                         let hi = self.last_span.hi;\n \n@@ -2498,7 +2498,7 @@ impl<'a> Parser<'a> {\n                 let mut es = try!(self.parse_unspanned_seq(\n                     &token::OpenDelim(token::Paren),\n                     &token::CloseDelim(token::Paren),\n-                    seq_sep_trailing_allowed(token::Comma),\n+                    SeqSep::trailing_allowed(token::Comma),\n                     |p| Ok(try!(p.parse_expr()))\n                 ));\n                 let hi = self.last_span.hi;\n@@ -2600,7 +2600,7 @@ impl<'a> Parser<'a> {\n                 let es = try!(self.parse_unspanned_seq(\n                     &token::OpenDelim(token::Paren),\n                     &token::CloseDelim(token::Paren),\n-                    seq_sep_trailing_allowed(token::Comma),\n+                    SeqSep::trailing_allowed(token::Comma),\n                     |p| Ok(try!(p.parse_expr()))\n                 ));\n                 hi = self.last_span.hi;\n@@ -2636,7 +2636,7 @@ impl<'a> Parser<'a> {\n                     let Spanned { node: seq, span: seq_span } = try!(self.parse_seq(\n                         &token::OpenDelim(token::Paren),\n                         &token::CloseDelim(token::Paren),\n-                        seq_sep_none(),\n+                        SeqSep::none(),\n                         |p| p.parse_token_tree()\n                     ));\n                     let (sep, repeat) = try!(self.parse_sep_and_kleene_op());\n@@ -2749,7 +2749,7 @@ impl<'a> Parser<'a> {\n \n                 // Parse the token trees within the delimiters\n                 let tts = self.parse_seq_to_before_end(&token::CloseDelim(delim),\n-                                                       seq_sep_none(),\n+                                                       SeqSep::none(),\n                                                        |p| p.parse_token_tree());\n \n                 // Parse the close delimiter.\n@@ -3579,7 +3579,7 @@ impl<'a> Parser<'a> {\n                         self.bump();\n                         let delim = try!(self.expect_open_delim());\n                         let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n-                                seq_sep_none(), |p| p.parse_token_tree()));\n+                                SeqSep::none(), |p| p.parse_token_tree()));\n                         let mac = Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT };\n                         pat = PatKind::Mac(codemap::Spanned {node: mac,\n                                                        span: mk_sp(lo, self.last_span.hi)});\n@@ -3638,7 +3638,7 @@ impl<'a> Parser<'a> {\n                             let args = try!(self.parse_enum_variant_seq(\n                                     &token::OpenDelim(token::Paren),\n                                     &token::CloseDelim(token::Paren),\n-                                    seq_sep_trailing_allowed(token::Comma),\n+                                    SeqSep::trailing_allowed(token::Comma),\n                                     |p| p.parse_pat()));\n                             pat = PatKind::TupleStruct(path, Some(args));\n                         }\n@@ -3888,7 +3888,7 @@ impl<'a> Parser<'a> {\n             let tts = try!(self.parse_unspanned_seq(\n                 &token::OpenDelim(delim),\n                 &token::CloseDelim(delim),\n-                seq_sep_none(),\n+                SeqSep::none(),\n                 |p| p.parse_token_tree()\n             ));\n             let hi = self.last_span.hi;\n@@ -4472,7 +4472,7 @@ impl<'a> Parser<'a> {\n             try!(self.parse_unspanned_seq(\n                 &token::OpenDelim(token::Paren),\n                 &token::CloseDelim(token::Paren),\n-                seq_sep_trailing_allowed(token::Comma),\n+                SeqSep::trailing_allowed(token::Comma),\n                 |p| {\n                     if p.token == token::DotDotDot {\n                         p.bump();\n@@ -4684,7 +4684,7 @@ impl<'a> Parser<'a> {\n             match self.token {\n                 token::Comma => {\n                     self.bump();\n-                    let sep = seq_sep_trailing_allowed(token::Comma);\n+                    let sep = SeqSep::trailing_allowed(token::Comma);\n                     let mut fn_inputs = self.parse_seq_to_before_end(\n                         &token::CloseDelim(token::Paren),\n                         sep,\n@@ -4707,7 +4707,7 @@ impl<'a> Parser<'a> {\n \n         let fn_inputs = match explicit_self {\n             SelfKind::Static =>  {\n-                let sep = seq_sep_trailing_allowed(token::Comma);\n+                let sep = SeqSep::trailing_allowed(token::Comma);\n                 self.parse_seq_to_before_end(&token::CloseDelim(token::Paren), sep, parse_arg_fn)\n             }\n             SelfKind::Value(id) => parse_remaining_arguments!(id),\n@@ -4741,7 +4741,7 @@ impl<'a> Parser<'a> {\n                 try!(self.parse_obsolete_closure_kind());\n                 let args = self.parse_seq_to_before_end(\n                     &token::BinOp(token::Or),\n-                    seq_sep_trailing_allowed(token::Comma),\n+                    SeqSep::trailing_allowed(token::Comma),\n                     |p| p.parse_fn_block_arg()\n                 );\n                 self.bump();\n@@ -4905,7 +4905,7 @@ impl<'a> Parser<'a> {\n             // eat a matched-delimiter token tree:\n             let delim = try!(self.expect_open_delim());\n             let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n-                                                 seq_sep_none(),\n+                                                 SeqSep::none(),\n                                                  |p| p.parse_token_tree()));\n             let m_ = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m_,\n@@ -5142,7 +5142,7 @@ impl<'a> Parser<'a> {\n         let fields = try!(self.parse_unspanned_seq(\n             &token::OpenDelim(token::Paren),\n             &token::CloseDelim(token::Paren),\n-            seq_sep_trailing_allowed(token::Comma),\n+            SeqSep::trailing_allowed(token::Comma),\n             |p| {\n                 let attrs = try!(p.parse_outer_attributes());\n                 let lo = p.span.lo;\n@@ -5972,7 +5972,7 @@ impl<'a> Parser<'a> {\n             // eat a matched-delimiter token tree:\n             let delim = try!(self.expect_open_delim());\n             let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n-                                                 seq_sep_none(),\n+                                                 SeqSep::none(),\n                                                  |p| p.parse_token_tree()));\n             // single-variant-enum... :\n             let m = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n@@ -6039,7 +6039,7 @@ impl<'a> Parser<'a> {\n             let idents = try!(self.parse_unspanned_seq(\n                 &token::OpenDelim(token::Brace),\n                 &token::CloseDelim(token::Brace),\n-                seq_sep_trailing_allowed(token::Comma),\n+                SeqSep::trailing_allowed(token::Comma),\n                 |p| p.parse_path_list_item()));\n             let path = ast::Path {\n                 span: mk_sp(lo, self.span.hi),\n@@ -6067,7 +6067,7 @@ impl<'a> Parser<'a> {\n                     let idents = try!(self.parse_unspanned_seq(\n                         &token::OpenDelim(token::Brace),\n                         &token::CloseDelim(token::Brace),\n-                        seq_sep_trailing_allowed(token::Comma),\n+                        SeqSep::trailing_allowed(token::Comma),\n                         |p| p.parse_path_list_item()\n                     ));\n                     let path = ast::Path {"}]}