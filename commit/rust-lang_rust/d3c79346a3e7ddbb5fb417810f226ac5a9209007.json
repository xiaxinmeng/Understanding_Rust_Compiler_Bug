{"sha": "d3c79346a3e7ddbb5fb417810f226ac5a9209007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzc5MzQ2YTNlN2RkYmI1ZmI0MTc4MTBmMjI2YWM1YTkyMDkwMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-29T20:23:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-29T20:23:10Z"}, "message": "Auto merge of #69590 - Dylan-DPC:rollup-i3z0sic, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #69504 (Use assert_ne in hash tests)\n - #69571 (remove unneeded .as_ref() calls.)\n - #69572 (use .iter() instead of .into_iter() on references)\n - #69581 (fix aliasing violation in align_to_mut)\n - #69582 (improve transmute and Vec::from_raw_parts docs)\n - #69584 (Correct comment to match behavior)\n - #69587 (rustc_parse: Tweak the function parameter name check)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3a06e2bd6ae80a87209ec3792d7979e00a2fe3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a06e2bd6ae80a87209ec3792d7979e00a2fe3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c79346a3e7ddbb5fb417810f226ac5a9209007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c79346a3e7ddbb5fb417810f226ac5a9209007", "html_url": "https://github.com/rust-lang/rust/commit/d3c79346a3e7ddbb5fb417810f226ac5a9209007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c79346a3e7ddbb5fb417810f226ac5a9209007/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0edbdfe5f111c43a5e06f68186b95141d1f6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0edbdfe5f111c43a5e06f68186b95141d1f6c8", "html_url": "https://github.com/rust-lang/rust/commit/4f0edbdfe5f111c43a5e06f68186b95141d1f6c8"}, {"sha": "ad200af5c4cb4296b7dfcfab68fd8f1573f149e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad200af5c4cb4296b7dfcfab68fd8f1573f149e4", "html_url": "https://github.com/rust-lang/rust/commit/ad200af5c4cb4296b7dfcfab68fd8f1573f149e4"}], "stats": {"total": 111, "additions": 65, "deletions": 46}, "files": [{"sha": "fc50d06b33c579c062e5b44b3e48a608bb65cabf", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -404,7 +404,10 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `ptr`'s `T` needs to have the same size and alignment as it was allocated with.\n+    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    ///   (`T` having a less strict alignment is not sufficient, the alignment really\n+    ///   needs to be equal to satsify the [`dealloc`] requirement that memory must be\n+    ///   allocated and deallocated with the same layout.)\n     /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n@@ -423,6 +426,7 @@ impl<T> Vec<T> {\n     /// function.\n     ///\n     /// [`String`]: ../../std/string/struct.String.html\n+    /// [`dealloc`]: ../../alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n     ///\n     /// # Examples\n     ///"}, {"sha": "fca2c3d31d946e348d2969325ec861e779e6c088", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -881,7 +881,8 @@ extern \"rust-intrinsic\" {\n     /// // clone the vector as we will reuse them later\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // Using transmute: this is Undefined Behavior, and a bad idea.\n+    /// // Using transmute: this relies on the unspecified data layout of `Vec`, which is a\n+    /// // bad idea and could cause Undefined Behavior.\n     /// // However, it is no-copy.\n     /// let v_transmuted = unsafe {\n     ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n@@ -897,13 +898,14 @@ extern \"rust-intrinsic\" {\n     ///\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // The no-copy, unsafe way, still using transmute, but not UB.\n-    /// // This is equivalent to the original, but safer, and reuses the\n-    /// // same `Vec` internals. Therefore, the new inner type must have the\n-    /// // exact same size, and the same alignment, as the old type.\n+    /// // The no-copy, unsafe way, still using transmute, but not relying on the data layout.\n+    /// // Like the first approach, this reuses the `Vec` internals.\n+    /// // Therefore, the new inner type must have the\n+    /// // exact same size, *and the same alignment*, as the old type.\n     /// // The same caveats exist for this method as transmute, for\n     /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon pages linked above.\n+    /// // (`Option<&i32>`), so read the nomicon pages linked above and also\n+    /// // consult the [`from_raw_parts`] documentation.\n     /// let v_from_raw = unsafe {\n     // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped.\n@@ -914,6 +916,8 @@ extern \"rust-intrinsic\" {\n     /// };\n     /// ```\n     ///\n+    /// [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts\n+    ///\n     /// Implementing `split_at_mut`:\n     ///\n     /// ```"}, {"sha": "1670c8418421f62f3120a584ade7603490707f13", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -2571,11 +2571,13 @@ impl<T> [T] {\n             let (left, rest) = self.split_at_mut(offset);\n             // now `rest` is definitely aligned, so `from_raw_parts_mut` below is okay\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n+            let rest_len = rest.len();\n             let mut_ptr = rest.as_mut_ptr();\n+            // We can't use `rest` again after this, that would invalidate its alias `mut_ptr`!\n             (\n                 left,\n                 from_raw_parts_mut(mut_ptr as *mut U, us_len),\n-                from_raw_parts_mut(mut_ptr.add(rest.len() - ts_len), ts_len),\n+                from_raw_parts_mut(mut_ptr.add(rest_len - ts_len), ts_len),\n             )\n         }\n     }"}, {"sha": "dbab433e33f4823d5f08667272f37819bd3dd10b", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -1570,6 +1570,18 @@ fn test_align_to_empty_mid() {\n     }\n }\n \n+#[test]\n+fn test_align_to_mut_aliasing() {\n+    let mut val = [1u8, 2, 3, 4, 5];\n+    // `align_to_mut` used to create `mid` in a way that there was some intermediate\n+    // incorrect aliasing, invalidating the resulting `mid` slice.\n+    let (begin, mid, end) = unsafe { val.align_to_mut::<[u8; 2]>() };\n+    assert!(begin.len() == 0);\n+    assert!(end.len() == 1);\n+    mid[0] = mid[1];\n+    assert_eq!(val, [3, 4, 3, 4, 5])\n+}\n+\n #[test]\n fn test_slice_partition_dedup_by() {\n     let mut slice: [i32; 9] = [1, -1, 2, 3, 1, -5, 5, -2, 2];"}, {"sha": "f37a94321927b7fa0724c063d1a941547b2344b6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -2291,13 +2291,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        let kinds: Vec<_> = ts.into_iter().map(|&t| GenericArg::from(t)).collect();\n+        let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();\n         self.mk_ty(Tuple(self.intern_substs(&kinds)))\n     }\n \n     pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|ts| {\n-            let kinds: Vec<_> = ts.into_iter().map(|&t| GenericArg::from(t)).collect();\n+            let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();\n             self.mk_ty(Tuple(self.intern_substs(&kinds)))\n         })\n     }"}, {"sha": "8c1675ad29dff6c798c37743774cb8c49456e90e", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -149,7 +149,7 @@ impl<'a> CollectProcMacros<'a> {\n                         .span_err(attr.span(), \"attribute must be of form: `attributes(foo, bar)`\");\n                     &[]\n                 })\n-                .into_iter()\n+                .iter()\n                 .filter_map(|attr| {\n                     let attr = match attr.meta_item() {\n                         Some(meta_item) => meta_item,"}, {"sha": "77f1c6bf28109fcc8675330f423d5a4b821f0fe7", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -630,7 +630,7 @@ pub fn make_query_region_constraints<'tcx>(\n     assert!(givens.is_empty());\n \n     let outlives: Vec<_> = constraints\n-        .into_iter()\n+        .iter()\n         .map(|(k, _)| match *k {\n             // Swap regions because we are going from sub (<=) to outlives\n             // (>=)."}, {"sha": "24741462f431c3b64e9c73279c840bfd579dab84", "filename": "src/librustc_infer/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fon_unimplemented.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -237,10 +237,8 @@ impl<'tcx> OnUnimplementedDirective {\n             }\n         }\n \n-        let options: FxHashMap<Symbol, String> = options\n-            .into_iter()\n-            .filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned())))\n-            .collect();\n+        let options: FxHashMap<Symbol, String> =\n+            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n         OnUnimplementedNote {\n             label: label.map(|l| l.format(tcx, trait_ref, &options)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options)),"}, {"sha": "1b92c126a15c2a4e4be17bd0b83961fa08ea3ec6", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -2411,7 +2411,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         types\n             .skip_binder()\n-            .into_iter()\n+            .iter()\n             .flat_map(|ty| {\n                 // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/"}, {"sha": "0282454edcf10f6325ae1bc9b0e61177d9a0e372", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -739,7 +739,7 @@ impl EarlyLintPass for DeprecatedAttr {\n }\n \n fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {\n-    let mut attrs = attrs.into_iter().peekable();\n+    let mut attrs = attrs.iter().peekable();\n \n     // Accumulate a single span for sugared doc comments.\n     let mut sugared_span: Option<Span> = None;"}, {"sha": "9451fee499d36df2efe292fd7029192a3777b093", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -519,7 +519,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn add_move_error_details(&self, err: &mut DiagnosticBuilder<'a>, binds_to: &[Local]) {\n-        for (j, local) in binds_to.into_iter().enumerate() {\n+        for (j, local) in binds_to.iter().enumerate() {\n             let bind_to = &self.body.local_decls[*local];\n             let binding_span = bind_to.source_info.span;\n "}, {"sha": "d433a4a48d311d8c5b689c2dd92a8ab685d1d28e", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -419,7 +419,7 @@ impl RustcMirAttrs {\n         let mut ret = RustcMirAttrs::default();\n \n         let rustc_mir_attrs = attrs\n-            .into_iter()\n+            .iter()\n             .filter(|attr| attr.check_name(sym::rustc_mir))\n             .flat_map(|attr| attr.meta_item_list().into_iter().flat_map(|v| v.into_iter()));\n "}, {"sha": "a7c0efd63b1a80330edaaeb563d7d0b5c6e99e0c", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n             .local_map\n             .get(&place.local)\n             .into_iter()\n-            .flat_map(|bs| bs.into_iter())\n+            .flat_map(|bs| bs.iter())\n             .copied();\n \n         // If the borrowed place is a local with no projections, all other borrows of this"}, {"sha": "a035dff9f5a04568f3968e8828ba32006a609417", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -509,7 +509,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         ops: &[mir::Operand<'tcx>],\n     ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {\n-        ops.into_iter().map(|op| self.eval_operand(op, None)).collect()\n+        ops.iter().map(|op| self.eval_operand(op, None)).collect()\n     }\n \n     // Used when the miri-engine runs into a constant and for extracting information from constants"}, {"sha": "f6a93363dc109089dff3e27f5e8d9bef9563f56b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -401,10 +401,8 @@ fn record_accesses<'tcx>(\n     // We collect this into a `SmallVec` to avoid calling `is_inlining_candidate` in the lock.\n     // FIXME: Call `is_inlining_candidate` when pushing to `neighbors` in `collect_items_rec`\n     // instead to avoid creating this `SmallVec`.\n-    let accesses: SmallVec<[_; 128]> = callees\n-        .into_iter()\n-        .map(|mono_item| (*mono_item, is_inlining_candidate(mono_item)))\n-        .collect();\n+    let accesses: SmallVec<[_; 128]> =\n+        callees.iter().map(|mono_item| (*mono_item, is_inlining_candidate(mono_item))).collect();\n \n     inlining_map.lock_mut().record_accesses(caller, &accesses);\n }"}, {"sha": "4dcbcdcbae4a65585fd2059bf948d67bbf3ab65f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -644,7 +644,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n         }\n     }\n \n-    let mut unsafe_blocks: Vec<_> = unsafe_blocks.into_iter().collect();\n+    let mut unsafe_blocks: Vec<_> = unsafe_blocks.iter().collect();\n     unsafe_blocks.sort_by_cached_key(|(hir_id, _)| tcx.hir().hir_to_node_id(*hir_id));\n     let used_unsafe: FxHashSet<_> =\n         unsafe_blocks.iter().flat_map(|&&(id, used)| used.then_some(id)).collect();"}, {"sha": "bbaa66f5954cbdbaee1c17a1fe6575bbf8ff31bd", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n                 &mut body.basic_blocks_mut()[bb].terminator_mut().kind\n             {\n                 let vals = &*values;\n-                let zipped = vals.iter().zip(targets.into_iter());\n+                let zipped = vals.iter().zip(targets.iter());\n \n                 let mut matched_values = Vec::with_capacity(allowed_variants.len());\n                 let mut matched_targets = Vec::with_capacity(allowed_variants.len() + 1);"}, {"sha": "d00d9fc72bfff80de4282ff36811a05e4e512d08", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -6,6 +6,7 @@ use crate::maybe_whole;\n \n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n@@ -636,7 +637,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_trait_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        self.parse_assoc_item(|t| t.span.rust_2018())\n+        self.parse_assoc_item(|edition| edition >= Edition::Edition2018)\n     }\n \n     /// Parses associated items.\n@@ -1380,7 +1381,7 @@ impl<'a> Parser<'a> {\n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n ///\n /// The function decides if, per-parameter `p`, `p` must have a pattern or just a type.\n-type ReqName = fn(&token::Token) -> bool;\n+type ReqName = fn(Edition) -> bool;\n \n /// Parsing of functions and methods.\n impl<'a> Parser<'a> {\n@@ -1536,7 +1537,7 @@ impl<'a> Parser<'a> {\n \n         let is_name_required = match self.token.kind {\n             token::DotDotDot => false,\n-            _ => req_name(&self.normalized_token),\n+            _ => req_name(self.normalized_token.span.edition()),\n         };\n         let (pat, ty) = if is_name_required || self.is_named_param() {\n             debug!(\"parse_param_general parse_pat (is_name_required:{})\", is_name_required);"}, {"sha": "fd84be919d426f6a8a0b9fb54aecbb65a6a257ff", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -657,7 +657,7 @@ impl EmbargoVisitor<'tcx> {\n                 .map(|module_hir_id| self.tcx.hir().expect_item(module_hir_id))\n             {\n                 if let hir::ItemKind::Mod(m) = &item.kind {\n-                    for item_id in m.item_ids.as_ref() {\n+                    for item_id in m.item_ids {\n                         let item = self.tcx.hir().expect_item(item_id.id);\n                         let def_id = self.tcx.hir().local_def_id(item_id.id);\n                         if !self.tcx.hygienic_eq(segment.ident, item.ident, def_id) {"}, {"sha": "b18d4070c24ca0b9fb401213f2aabdbab3a7d3a2", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -1426,7 +1426,7 @@ crate fn show_candidates(\n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n     let mut path_strings: Vec<_> =\n-        candidates.into_iter().map(|c| path_names_to_string(&c.path)).collect();\n+        candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n     path_strings.sort();\n     path_strings.dedup();\n "}, {"sha": "ad439e3950e13da9619b0cbcf1686d7fe7d32b1a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -430,7 +430,7 @@ impl Sig for ast::Item {\n                 sig.text.push_str(\" = \");\n                 let ty = match ty {\n                     Some(ty) => ty.make(offset + sig.text.len(), id, scx)?,\n-                    None => Err(\"Ty\")?,\n+                    None => return Err(\"Ty\"),\n                 };\n                 sig.text.push_str(&ty.text);\n                 sig.text.push(';');"}, {"sha": "320039b7c911a519c002e6a49bf00be7c1058348", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -395,7 +395,7 @@ impl SourceMap {\n                         .unwrap_or_else(|x| x);\n                     let special_chars = end_width_idx - start_width_idx;\n                     let non_narrow: usize = f.non_narrow_chars[start_width_idx..end_width_idx]\n-                        .into_iter()\n+                        .iter()\n                         .map(|x| x.width())\n                         .sum();\n                     col.0 - special_chars + non_narrow\n@@ -413,7 +413,7 @@ impl SourceMap {\n                         .binary_search_by_key(&pos, |x| x.pos())\n                         .unwrap_or_else(|x| x);\n                     let non_narrow: usize =\n-                        f.non_narrow_chars[0..end_width_idx].into_iter().map(|x| x.width()).sum();\n+                        f.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();\n                     chpos.0 - end_width_idx + non_narrow\n                 };\n                 Loc { file: f, line: 0, col: chpos, col_display }"}, {"sha": "e0c3dc8a961dad555fa2e4c2dc8494611d231803", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -256,7 +256,7 @@ fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n \n     // `WellFormed(WC)`\n     let wf_conditions = where_clauses\n-        .into_iter()\n+        .iter()\n         .map(|wc| wc.subst(tcx, bound_vars))\n         .map(|wc| wc.map_bound(|goal| goal.into_well_formed_goal()));\n "}, {"sha": "ec87112b7a8e076b47e13b838f7988ffc18ad734", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -239,7 +239,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             .segments\n                             .iter()\n                             .filter_map(|seg| seg.args.as_ref())\n-                            .map(|generic_args| generic_args.args.as_ref())\n+                            .map(|generic_args| generic_args.args)\n                             .find_map(|args| {\n                                 args.iter()\n                                     .filter(|arg| arg.is_const())"}, {"sha": "e6f59157c8b4b37a204409f8f6ea5e56d1a3728b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -2388,9 +2388,9 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n             hir::TypeBindingKind::Equality { ref ty } => {\n                 TypeBindingKind::Equality { ty: ty.clean(cx) }\n             }\n-            hir::TypeBindingKind::Constraint { ref bounds } => TypeBindingKind::Constraint {\n-                bounds: bounds.into_iter().map(|b| b.clean(cx)).collect(),\n-            },\n+            hir::TypeBindingKind::Constraint { ref bounds } => {\n+                TypeBindingKind::Constraint { bounds: bounds.iter().map(|b| b.clean(cx)).collect() }\n+            }\n         }\n     }\n }"}, {"sha": "ed007fe383c1db9b98e51d2044b9ef3a4899b668", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -738,7 +738,7 @@ impl Markdown<'_> {\n             return String::new();\n         }\n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n             } else {\n                 None\n@@ -816,7 +816,7 @@ impl MarkdownSummaryLine<'_> {\n         }\n \n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n             } else {\n                 None"}, {"sha": "a0a35e4ce4b852d555d298b9ada5be64876d14f7", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -670,7 +670,7 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n-            let path_segment = segments.into_iter().last().unwrap_or_else(|| panic!(\n+            let path_segment = segments.iter().last().unwrap_or_else(|| panic!(\n                 \"get_index_type_name(clean_type: {:?}, accept_generic: {:?}) had length zero path\",\n                 clean_type, accept_generic\n             ));"}, {"sha": "b8361d3e8259951991972a224af6ee23826e3564", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -2011,7 +2011,7 @@ impl Path {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_name(&self) -> Option<&OsStr> {\n         self.components().next_back().and_then(|p| match p {\n-            Component::Normal(p) => Some(p.as_ref()),\n+            Component::Normal(p) => Some(p),\n             _ => None,\n         })\n     }"}, {"sha": "c36e78b1d004e2bc02f4b4e21e274c4f3aae9fd9", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c79346a3e7ddbb5fb417810f226ac5a9209007/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=d3c79346a3e7ddbb5fb417810f226ac5a9209007", "patch": "@@ -284,7 +284,7 @@ impl Instant {\n     }\n \n     /// Returns the amount of time elapsed from another instant to this one,\n-    /// or zero duration if that instant is earlier than this one.\n+    /// or zero duration if that instant is later than this one.\n     ///\n     /// # Examples\n     ///"}]}