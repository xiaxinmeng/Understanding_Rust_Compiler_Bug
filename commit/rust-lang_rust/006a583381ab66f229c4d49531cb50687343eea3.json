{"sha": "006a583381ab66f229c4d49531cb50687343eea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNmE1ODMzODFhYjY2ZjIyOWM0ZDQ5NTMxY2I1MDY4NzM0M2VlYTM=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-05T13:33:29Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-05T13:33:29Z"}, "message": "Use placeholder instead of `Option`", "tree": {"sha": "0471c26b78e6c847f1ac7460202c848a7389e91e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0471c26b78e6c847f1ac7460202c848a7389e91e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/006a583381ab66f229c4d49531cb50687343eea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/006a583381ab66f229c4d49531cb50687343eea3", "html_url": "https://github.com/rust-lang/rust/commit/006a583381ab66f229c4d49531cb50687343eea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/006a583381ab66f229c4d49531cb50687343eea3/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7702f690a9592605be71104ec9d0b732af940fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7702f690a9592605be71104ec9d0b732af940fcc", "html_url": "https://github.com/rust-lang/rust/commit/7702f690a9592605be71104ec9d0b732af940fcc"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "98bab1bfed161dca84fcc3a85989fe1cf0b2934b", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/006a583381ab66f229c4d49531cb50687343eea3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006a583381ab66f229c4d49531cb50687343eea3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=006a583381ab66f229c4d49531cb50687343eea3", "patch": "@@ -104,8 +104,9 @@ impl std::ops::Index<LocalModuleId> for CrateDefMap {\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub enum ModuleOrigin {\n-    /// It should not be `None` after collecting definitions.\n-    Root(Option<FileId>),\n+    CrateRoot {\n+        definition: FileId,\n+    },\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n     File {\n         declaration: AstId<ast::Module>,\n@@ -118,15 +119,11 @@ pub enum ModuleOrigin {\n \n impl Default for ModuleOrigin {\n     fn default() -> Self {\n-        ModuleOrigin::Root(None)\n+        ModuleOrigin::CrateRoot { definition: FileId(0) }\n     }\n }\n \n impl ModuleOrigin {\n-    fn root(file_id: FileId) -> Self {\n-        ModuleOrigin::Root(Some(file_id))\n-    }\n-\n     pub(crate) fn not_sure_file(file: Option<FileId>, declaration: AstId<ast::Module>) -> Self {\n         match file {\n             None => ModuleOrigin::Inline { definition: declaration },\n@@ -138,14 +135,14 @@ impl ModuleOrigin {\n         match self {\n             ModuleOrigin::File { declaration: module, .. }\n             | ModuleOrigin::Inline { definition: module, .. } => Some(*module),\n-            ModuleOrigin::Root(_) => None,\n+            ModuleOrigin::CrateRoot { .. } => None,\n         }\n     }\n \n     pub(crate) fn file_id(&self) -> Option<FileId> {\n         match self {\n-            ModuleOrigin::File { definition: file_id, .. } | ModuleOrigin::Root(Some(file_id)) => {\n-                Some(*file_id)\n+            ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n+                Some(*definition)\n             }\n             _ => None,\n         }\n@@ -155,12 +152,11 @@ impl ModuleOrigin {\n     /// That is, a file or a `mod foo {}` with items.\n     fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         match self {\n-            ModuleOrigin::File { definition: file_id, .. } | ModuleOrigin::Root(Some(file_id)) => {\n-                let file_id = *file_id;\n+            ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n+                let file_id = *definition;\n                 let sf = db.parse(file_id).tree();\n                 return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n             }\n-            ModuleOrigin::Root(None) => unreachable!(),\n             ModuleOrigin::Inline { definition } => {\n                 InFile::new(definition.file_id, ModuleSource::Module(definition.to_node(db)))\n             }"}, {"sha": "9d948d4f43ef5747d2c4c92cbbcd2a2c499b9faf", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/006a583381ab66f229c4d49531cb50687343eea3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006a583381ab66f229c4d49531cb50687343eea3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=006a583381ab66f229c4d49531cb50687343eea3", "patch": "@@ -131,7 +131,7 @@ where\n         let file_id = crate_graph.crate_root(self.def_map.krate);\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n-        self.def_map.modules[module_id].origin = ModuleOrigin::root(file_id);\n+        self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         ModCollector {\n             def_collector: &mut *self,\n             module_id,"}]}