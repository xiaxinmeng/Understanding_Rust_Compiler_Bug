{"sha": "33577ec3f7f20ed642203580d26a151aac781bdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTc3ZWMzZjdmMjBlZDY0MjIwMzU4MGQyNmExNTFhYWM3ODFiZGY=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-03T11:10:30Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-03T11:10:30Z"}, "message": "Lint for possible missing comma in an array #1177", "tree": {"sha": "7cff63f503a425c9ea05af948f4c9493dc8314fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cff63f503a425c9ea05af948f4c9493dc8314fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33577ec3f7f20ed642203580d26a151aac781bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33577ec3f7f20ed642203580d26a151aac781bdf", "html_url": "https://github.com/rust-lang/rust/commit/33577ec3f7f20ed642203580d26a151aac781bdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33577ec3f7f20ed642203580d26a151aac781bdf/comments", "author": null, "committer": null, "parents": [{"sha": "b1be0d64573a5fd02d238a5ad16444f79ce745a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1be0d64573a5fd02d238a5ad16444f79ce745a5", "html_url": "https://github.com/rust-lang/rust/commit/b1be0d64573a5fd02d238a5ad16444f79ce745a5"}], "stats": {"total": 433, "additions": 244, "deletions": 189}, "files": [{"sha": "19858d9aa655617c7a3a1523bb336010c8404128", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33577ec3f7f20ed642203580d26a151aac781bdf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/33577ec3f7f20ed642203580d26a151aac781bdf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=33577ec3f7f20ed642203580d26a151aac781bdf", "patch": "@@ -386,6 +386,7 @@ All notable changes to this project will be documented in this file.\n [`overflow_check_conditional`]: https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional\n [`panic_params`]: https://github.com/Manishearth/rust-clippy/wiki#panic_params\n [`partialeq_ne_impl`]: https://github.com/Manishearth/rust-clippy/wiki#partialeq_ne_impl\n+[`possible_missing_comma_in_array_formatting`]: https://github.com/Manishearth/rust-clippy/wiki#possible_missing_comma_in_array_formatting\n [`precedence`]: https://github.com/Manishearth/rust-clippy/wiki#precedence\n [`print_stdout`]: https://github.com/Manishearth/rust-clippy/wiki#print_stdout\n [`print_with_newline`]: https://github.com/Manishearth/rust-clippy/wiki#print_with_newline"}, {"sha": "2c5beedd5c966568b9bc6b1953a1dcf55c82ec23", "filename": "README.md", "status": "modified", "additions": 189, "deletions": 188, "changes": 377, "blob_url": "https://github.com/rust-lang/rust/blob/33577ec3f7f20ed642203580d26a151aac781bdf/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/33577ec3f7f20ed642203580d26a151aac781bdf/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=33577ec3f7f20ed642203580d26a151aac781bdf", "patch": "@@ -180,194 +180,195 @@ transparently:\n \n ## Lints\n \n-There are 184 lints included in this crate:\n-\n-name                                                                                                                   | default | triggers on\n------------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n-[absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)               | warn    | a comparison with a maximum or minimum value that is always true or false\n-[almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                       | warn    | `foo = bar; bar = foo` sequence\n-[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                     | warn    | the approximate of a known float constant (in `std::fXX::consts`)\n-[assign_op_pattern](https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern)                                 | warn    | assigning the result of an operation on a variable to that same variable\n-[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                               | allow   | any compound assignment operation\n-[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                           | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false`\n-[blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                   | warn    | usage of a blacklisted/placeholder name\n-[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)               | warn    | braces that can be eliminated in conditions, e.g `if { true } ...`\n-[block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)               | warn    | complex blocks in conditions, e.g. `if { let x = true; x } ...`\n-[bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                     | warn    | comparing a variable to a boolean, e.g. `if x == true`\n-[box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-[boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                             | warn    | using `Box<T>` where unnecessary\n-[builtin_type_shadow](https://github.com/Manishearth/rust-clippy/wiki#builtin_type_shadow)                             | warn    | shadowing a builtin type\n-[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                   | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n-[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n-[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n-[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                       | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-[char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                       | warn    | casting a character literal to u8\n-[chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                       | warn    | using `.chars().next()` to check if a string starts with a char\n-[clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                   | warn    | using `clone` on `&&T`\n-[clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy)                                         | warn    | using `clone` on a `Copy` type\n-[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                     | deny    | comparisons to NAN, which will always return false, probably not intended\n-[cmp_null](https://github.com/Manishearth/rust-clippy/wiki#cmp_null)                                                   | warn    | comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\n-[cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                                 | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                                       | warn    | `if`s that can be collapsed (e.g. `if x { if y { ... } }` and `else { if x { ... } }`)\n-[crosspointer_transmute](https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute)                       | warn    | transmutes that have to or from types that are a pointer to the other\n-[cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                         | warn    | functions that should be split up into multiple functions\n-[deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                                 | warn    | use of `#[deprecated(since = \"x\")]` where x is not semver\n-[deref_addrof](https://github.com/Manishearth/rust-clippy/wiki#deref_addrof)                                           | warn    | use of `*&` or `*&mut` in an expression\n-[derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                               | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n-[diverging_sub_expression](https://github.com/Manishearth/rust-clippy/wiki#diverging_sub_expression)                   | warn    | whether an expression contains a diverging sub expression\n-[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                           | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n-[double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                               | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n-[double_parens](https://github.com/Manishearth/rust-clippy/wiki#double_parens)                                         | warn    | Warn on unnecessary double parentheses\n-[drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                   | warn    | calls to `std::mem::drop` with a reference instead of an owned value\n-[duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)         | warn    | function arguments having names which only differ by an underscore\n-[empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                               | warn    | empty `loop {}`, which should block or sleep\n-[enum_clike_unportable_variant](https://github.com/Manishearth/rust-clippy/wiki#enum_clike_unportable_variant)         | warn    | C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n-[enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                         | allow   | use items that import all variants of an enum\n-[enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                               | warn    | enums where all variants share a prefix/postfix\n-[eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                         | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n-[eval_order_dependence](https://github.com/Manishearth/rust-clippy/wiki#eval_order_dependence)                         | warn    | whether a variable read occurs before a write depends on sub-expression evaluation order\n-[expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)                     | warn    | implementing `Clone` explicitly on `Copy` types\n-[explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                         | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n-[explicit_into_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_into_iter_loop)                     | warn    | for-looping over `_.into_iter()` when `_` would do\n-[explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                               | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-[filter_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map)                                               | allow   | using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\n-[filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                             | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n-[float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                   | allow   | any floating-point arithmetic statement\n-[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                                 | warn    | using `==` or `!=` on float values instead of comparing difference with an epsilon\n-[for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                               | warn    | looping on a map using `iter` when `keys` or `values` would do\n-[for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                           | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n-[for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                           | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n-[forget_ref](https://github.com/Manishearth/rust-clippy/wiki#forget_ref)                                               | warn    | calls to `std::mem::forget` with a reference instead of an owned value\n-[get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                               | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n-[identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-[if_let_redundant_pattern_matching](https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching) | warn    | use the proper utility function avoiding an `if let`\n-[if_let_some_result](https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result)                               | warn    | usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\n-[if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                             | allow   | `if` branches that could be swapped so no negation operation is necessary on the condition\n-[if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                                 | warn    | if with the same *then* and *else* blocks\n-[ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                         | warn    | consecutive `ifs` with the same condition\n-[indexing_slicing](https://github.com/Manishearth/rust-clippy/wiki#indexing_slicing)                                   | allow   | indexing/slicing usage\n-[ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                           | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                         | warn    | use of `#[inline(always)]`\n-[integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                               | allow   | any integer arithmetic statement\n-[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                         | deny    | invalid regular expressions\n-[invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)               | allow   | a comparison involving an upcast which is always true or false\n-[items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                       | allow   | blocks where an item comes after a statement\n-[iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                       | warn    | for-looping over `_.next()` which is probably not intended\n-[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                   | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n-[iter_skip_next](https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next)                                       | warn    | using `.skip(x).next()` on an iterator\n-[large_enum_variant](https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant)                               | warn    | large variants on an enum\n-[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                           | warn    | traits or impls with a public `len` method but no corresponding `is_empty` method\n-[len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                   | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n-[let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n-[let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                       | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n-[linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n-[logic_bug](https://github.com/Manishearth/rust-clippy/wiki#logic_bug)                                                 | warn    | boolean expressions that contain terminals which can be eliminated\n-[manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                             | warn    | manual swap of two variables\n-[many_single_char_names](https://github.com/Manishearth/rust-clippy/wiki#many_single_char_names)                       | warn    | too many single character bindings\n-[map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                                 | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents\n-[map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                                 | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n-[match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                               | warn    | a match on a boolean expression instead of an `if..else` block\n-[match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                         | warn    | a match with overlapping arms\n-[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                       | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n-[match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                     | warn    | `match` with identical arm bodies\n-[mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                               | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n-[min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n-[misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                     | warn    | having a variable on both sides of an assign op\n-[missing_docs_in_private_items](https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items)         | allow   | detects missing documentation for public and private members\n-[mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                     | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n-[module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                   | warn    | modules that have the same name as their parent module\n-[modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                               | warn    | taking a number modulo 1, which always returns 0\n-[mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n-[mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                           | warn    | using a mutex where an atomic value could be used instead\n-[mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type\n-[needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n-[needless_borrow](https://github.com/Manishearth/rust-clippy/wiki#needless_borrow)                                     | warn    | taking a reference that is going to be automatically dereferenced\n-[needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n-[needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                             | warn    | for-looping over a range of indices where an iterator over items would do\n-[needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n-[needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n-[neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n-[new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                     | warn    | not returning `Self` in a `new` method\n-[new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                             | warn    | `fn new() -> Self` method without `Default` implementation\n-[new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)               | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation\n-[no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                                 | warn    | statements with no effect\n-[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                                 | allow   | using any literal non-ASCII chars in a string literal instead of using the `\\\\u` escape\n-[nonminimal_bool](https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool)                                     | allow   | boolean expressions that can be written more concisely\n-[nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)                   | warn    | nonsensical combination of options for opening a file\n-[not_unsafe_ptr_arg_deref](https://github.com/Manishearth/rust-clippy/wiki#not_unsafe_ptr_arg_deref)                   | warn    | public functions dereferencing raw pointer arguments but not marked `unsafe`\n-[ok_expect](https://github.com/Manishearth/rust-clippy/wiki#ok_expect)                                                 | warn    | using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\n-[option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)                           | allow   | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\n-[option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)                 | allow   | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\n-[option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                               | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-[or_fun_call](https://github.com/Manishearth/rust-clippy/wiki#or_fun_call)                                             | warn    | using any `*or` method with a function call, which suggests `*or_else`\n-[out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                       | deny    | out of bounds constant indexing\n-[overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)               | warn    | overflow checks inspired by C which are likely to panic\n-[panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                           | warn    | missing parameters in `panic!` calls\n-[partialeq_ne_impl](https://github.com/Manishearth/rust-clippy/wiki#partialeq_ne_impl)                                 | warn    | re-implementing `PartialEq::ne`\n-[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                               | warn    | operations where precedence may be unclear\n-[print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                           | allow   | printing on stdout\n-[print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                               | warn    | using `print!()` with a format string that ends in a newline\n-[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                     | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-[pub_enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#pub_enum_variant_names)                       | allow   | enums where all variants share a prefix/postfix\n-[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                               | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n-[range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                               | warn    | zipping iterator with a range when `enumerate()` would do\n-[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                                 | warn    | redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-[redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                       | warn    | throwaway closures called in the expression they are defined\n-[redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                                 | warn    | using `name @ _` in a pattern\n-[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                             | warn    | use of `regex!(_)` instead of `Regex::new(_)`\n-[result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                               | allow   | using `Result.unwrap()`, which might be better handled\n-[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                               | warn    | iteration over an empty range, such as `10..0` or `5..5`\n-[search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                                       | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n-[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                   | warn    | various things that will negatively affect your serde experience\n-[shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                           | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n-[shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n-[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                   | allow   | rebinding a name without even using the original value\n-[short_circuit_statement](https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement)                     | warn    | using a short circuit boolean condition as a statement\n-[should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                       | warn    | defining a method that should be implementing a std trait\n-[similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                         | allow   | similarly named items and bindings\n-[single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                             | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n-[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                           | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) instead of `if let`\n-[single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                                 | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n-[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                               | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n-[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                                 | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n-[string_extend_chars](https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars)                             | warn    | using `x.extend(s.chars())` where s is a `&str` or `String`\n-[string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                             | warn    | calling `as_bytes` on a string literal instead of using a byte string literal\n-[stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                     | allow   | type names prefixed/postfixed with their containing module's name\n-[suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting)   | warn    | suspicious formatting of `*=`, `-=` or `!=`\n-[suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)               | warn    | suspicious formatting of `else if`\n-[temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                           | warn    | assignments to temporaries\n-[temporary_cstring_as_ptr](https://github.com/Manishearth/rust-clippy/wiki#temporary_cstring_as_ptr)                   | warn    | getting the inner pointer of a temporary `CString`\n-[too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                               | warn    | functions with too many arguments\n-[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                   | warn    | an entire binding declared as `ref`, in a function argument or a `let` statement\n-[transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                           | warn    | transmutes from a pointer to a reference type\n-[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                         | warn    | trivial regular expressions\n-[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                     | warn    | usage of very complex types that might be better factored into `type` definitions\n-[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                     | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n-[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                   | warn    | comparing unit values\n-[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                       | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n-[unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                         | warn    | outer expressions with no effect\n-[unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                       | warn    | struct fields bound to a wildcard instead of using `..`\n-[unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                   | warn    | `unsafe` removed from API names on import\n-[unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)               | allow   | literals whose suffix is not separated by an underscore\n-[unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n-[unused_io_amount](https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount)                                   | deny    | unused written/read amount\n-[unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                           | warn    | unused labels\n-[unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                   | warn    | unused lifetimes in function definitions\n-[use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                                 | allow   | use of `Debug`-based formatting\n-[used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)                     | allow   | using a binding which is prefixed with an underscore\n-[useless_attribute](https://github.com/Manishearth/rust-clippy/wiki#useless_attribute)                                 | warn    | use of lint attributes on `extern crate` items\n-[useless_format](https://github.com/Manishearth/rust-clippy/wiki#useless_format)                                       | warn    | useless use of `format!`\n-[useless_let_if_seq](https://github.com/Manishearth/rust-clippy/wiki#useless_let_if_seq)                               | warn    | unidiomatic `let mut` declaration followed by initialization in `if`\n-[useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                                 | warn    | transmutes that have the same to and from types or could be a cast/coercion\n-[useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                             | warn    | useless `vec!`\n-[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                                       | warn    | `loop { if let { ... } else break }`, which can be written as a `while let` loop\n-[while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)                         | warn    | using a while-let loop instead of a for loop on an iterator\n-[wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention)                 | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n-[wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                         | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n-[wrong_transmute](https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute)                                     | warn    | transmutes that are confusing at best, undefined behaviour at worst and always useless\n-[zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)                           | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n-[zero_prefixed_literal](https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal)                         | warn    | integer literals starting with `0`\n-[zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                                   | deny    | using a zero-width space in a string literal, which is confusing\n+There are 185 lints included in this crate:\n+\n+name                                                                                                                                     | default | triggers on\n+-----------------------------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n+[absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)                                 | warn    | a comparison with a maximum or minimum value that is always true or false\n+[almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                                         | warn    | `foo = bar; bar = foo` sequence\n+[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                                       | warn    | the approximate of a known float constant (in `std::fXX::consts`)\n+[assign_op_pattern](https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern)                                                   | warn    | assigning the result of an operation on a variable to that same variable\n+[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                                                 | allow   | any compound assignment operation\n+[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                                             | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false`\n+[blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                                     | warn    | usage of a blacklisted/placeholder name\n+[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)                                 | warn    | braces that can be eliminated in conditions, e.g `if { true } ...`\n+[block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)                                 | warn    | complex blocks in conditions, e.g. `if { let x = true; x } ...`\n+[bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                                       | warn    | comparing a variable to a boolean, e.g. `if x == true`\n+[box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                                       | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+[boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                                               | warn    | using `Box<T>` where unnecessary\n+[builtin_type_shadow](https://github.com/Manishearth/rust-clippy/wiki#builtin_type_shadow)                                               | warn    | shadowing a builtin type\n+[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                                     | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                                                 | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n+[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                                               | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                                         | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                                         | warn    | casting a character literal to u8\n+[chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                                         | warn    | using `.chars().next()` to check if a string starts with a char\n+[clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                                     | warn    | using `clone` on `&&T`\n+[clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy)                                                           | warn    | using `clone` on a `Copy` type\n+[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                                       | deny    | comparisons to NAN, which will always return false, probably not intended\n+[cmp_null](https://github.com/Manishearth/rust-clippy/wiki#cmp_null)                                                                     | warn    | comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\n+[cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                                                   | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                                                         | warn    | `if`s that can be collapsed (e.g. `if x { if y { ... } }` and `else { if x { ... } }`)\n+[crosspointer_transmute](https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute)                                         | warn    | transmutes that have to or from types that are a pointer to the other\n+[cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                                           | warn    | functions that should be split up into multiple functions\n+[deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                                                   | warn    | use of `#[deprecated(since = \"x\")]` where x is not semver\n+[deref_addrof](https://github.com/Manishearth/rust-clippy/wiki#deref_addrof)                                                             | warn    | use of `*&` or `*&mut` in an expression\n+[derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                                                 | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[diverging_sub_expression](https://github.com/Manishearth/rust-clippy/wiki#diverging_sub_expression)                                     | warn    | whether an expression contains a diverging sub expression\n+[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                                             | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n+[double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                                                 | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n+[double_parens](https://github.com/Manishearth/rust-clippy/wiki#double_parens)                                                           | warn    | Warn on unnecessary double parentheses\n+[drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                                     | warn    | calls to `std::mem::drop` with a reference instead of an owned value\n+[duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)                           | warn    | function arguments having names which only differ by an underscore\n+[empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                                                 | warn    | empty `loop {}`, which should block or sleep\n+[enum_clike_unportable_variant](https://github.com/Manishearth/rust-clippy/wiki#enum_clike_unportable_variant)                           | warn    | C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n+[enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                                           | allow   | use items that import all variants of an enum\n+[enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                                                 | warn    | enums where all variants share a prefix/postfix\n+[eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                                           | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+[eval_order_dependence](https://github.com/Manishearth/rust-clippy/wiki#eval_order_dependence)                                           | warn    | whether a variable read occurs before a write depends on sub-expression evaluation order\n+[expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)                                       | warn    | implementing `Clone` explicitly on `Copy` types\n+[explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                                           | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n+[explicit_into_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_into_iter_loop)                                       | warn    | for-looping over `_.into_iter()` when `_` would do\n+[explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                                                 | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[filter_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map)                                                                 | allow   | using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\n+[filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                                               | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n+[float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                                     | allow   | any floating-point arithmetic statement\n+[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                                                   | warn    | using `==` or `!=` on float values instead of comparing difference with an epsilon\n+[for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                                                 | warn    | looping on a map using `iter` when `keys` or `values` would do\n+[for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                                             | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n+[for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                                             | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n+[forget_ref](https://github.com/Manishearth/rust-clippy/wiki#forget_ref)                                                                 | warn    | calls to `std::mem::forget` with a reference instead of an owned value\n+[get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                                                 | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n+[identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                                               | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[if_let_redundant_pattern_matching](https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching)                   | warn    | use the proper utility function avoiding an `if let`\n+[if_let_some_result](https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result)                                                 | warn    | usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\n+[if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                                               | allow   | `if` branches that could be swapped so no negation operation is necessary on the condition\n+[if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                                                   | warn    | if with the same *then* and *else* blocks\n+[ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                                           | warn    | consecutive `ifs` with the same condition\n+[indexing_slicing](https://github.com/Manishearth/rust-clippy/wiki#indexing_slicing)                                                     | allow   | indexing/slicing usage\n+[ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                                             | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                                           | warn    | use of `#[inline(always)]`\n+[integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                                                 | allow   | any integer arithmetic statement\n+[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                                           | deny    | invalid regular expressions\n+[invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)                                 | allow   | a comparison involving an upcast which is always true or false\n+[items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                                         | allow   | blocks where an item comes after a statement\n+[iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                                         | warn    | for-looping over `_.next()` which is probably not intended\n+[iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                                     | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n+[iter_skip_next](https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next)                                                         | warn    | using `.skip(x).next()` on an iterator\n+[large_enum_variant](https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant)                                                 | warn    | large variants on an enum\n+[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                                             | warn    | traits or impls with a public `len` method but no corresponding `is_empty` method\n+[len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                                     | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+[let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                                         | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n+[let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                                         | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+[linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                                                 | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n+[logic_bug](https://github.com/Manishearth/rust-clippy/wiki#logic_bug)                                                                   | warn    | boolean expressions that contain terminals which can be eliminated\n+[manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                                               | warn    | manual swap of two variables\n+[many_single_char_names](https://github.com/Manishearth/rust-clippy/wiki#many_single_char_names)                                         | warn    | too many single character bindings\n+[map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                                                   | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents\n+[map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                                                   | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n+[match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                                                 | warn    | a match on a boolean expression instead of an `if..else` block\n+[match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                                           | warn    | a match with overlapping arms\n+[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                                         | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n+[match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                                       | warn    | `match` with identical arm bodies\n+[mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                                                 | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n+[min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                                       | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n+[misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                                       | warn    | having a variable on both sides of an assign op\n+[missing_docs_in_private_items](https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items)                           | allow   | detects missing documentation for public and private members\n+[mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                                       | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n+[module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                                     | warn    | modules that have the same name as their parent module\n+[modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                                                 | warn    | taking a number modulo 1, which always returns 0\n+[mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                                       | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n+[mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                                             | warn    | using a mutex where an atomic value could be used instead\n+[mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                                           | allow   | using a mutex for an integer type\n+[needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                                                           | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+[needless_borrow](https://github.com/Manishearth/rust-clippy/wiki#needless_borrow)                                                       | warn    | taking a reference that is going to be automatically dereferenced\n+[needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                                                 | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+[needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                                               | warn    | for-looping over a range of indices where an iterator over items would do\n+[needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                                       | warn    | using a return statement like `return expr;` where an expression would suffice\n+[needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                                       | warn    | using `Foo { ..base }` when there are no missing fields\n+[neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                                             | warn    | multiplying integers with -1\n+[new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                                       | warn    | not returning `Self` in a `new` method\n+[new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                                               | warn    | `fn new() -> Self` method without `Default` implementation\n+[new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)                                 | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation\n+[no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                                                   | warn    | statements with no effect\n+[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                                                   | allow   | using any literal non-ASCII chars in a string literal instead of using the `\\\\u` escape\n+[nonminimal_bool](https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool)                                                       | allow   | boolean expressions that can be written more concisely\n+[nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)                                     | warn    | nonsensical combination of options for opening a file\n+[not_unsafe_ptr_arg_deref](https://github.com/Manishearth/rust-clippy/wiki#not_unsafe_ptr_arg_deref)                                     | warn    | public functions dereferencing raw pointer arguments but not marked `unsafe`\n+[ok_expect](https://github.com/Manishearth/rust-clippy/wiki#ok_expect)                                                                   | warn    | using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\n+[option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)                                             | allow   | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\n+[option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)                                   | allow   | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\n+[option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                                                 | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+[or_fun_call](https://github.com/Manishearth/rust-clippy/wiki#or_fun_call)                                                               | warn    | using any `*or` method with a function call, which suggests `*or_else`\n+[out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                                         | deny    | out of bounds constant indexing\n+[overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)                                 | warn    | overflow checks inspired by C which are likely to panic\n+[panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                                             | warn    | missing parameters in `panic!` calls\n+[partialeq_ne_impl](https://github.com/Manishearth/rust-clippy/wiki#partialeq_ne_impl)                                                   | warn    | re-implementing `PartialEq::ne`\n+[possible_missing_comma_in_array_formatting](https://github.com/Manishearth/rust-clippy/wiki#possible_missing_comma_in_array_formatting) | warn    | possible missing comma in array\n+[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                                                 | warn    | operations where precedence may be unclear\n+[print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                                             | allow   | printing on stdout\n+[print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                                                 | warn    | using `print!()` with a format string that ends in a newline\n+[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                                       | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+[pub_enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#pub_enum_variant_names)                                         | allow   | enums where all variants share a prefix/postfix\n+[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                                                 | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n+[range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                                                 | warn    | zipping iterator with a range when `enumerate()` would do\n+[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                                                   | warn    | redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                                         | warn    | throwaway closures called in the expression they are defined\n+[redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                                                   | warn    | using `name @ _` in a pattern\n+[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                                               | warn    | use of `regex!(_)` instead of `Regex::new(_)`\n+[result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                                                 | allow   | using `Result.unwrap()`, which might be better handled\n+[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                                                 | warn    | iteration over an empty range, such as `10..0` or `5..5`\n+[search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                                                         | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n+[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                                     | warn    | various things that will negatively affect your serde experience\n+[shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                                             | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n+[shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                                               | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n+[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                                     | allow   | rebinding a name without even using the original value\n+[short_circuit_statement](https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement)                                       | warn    | using a short circuit boolean condition as a statement\n+[should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                                         | warn    | defining a method that should be implementing a std trait\n+[similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                                           | allow   | similarly named items and bindings\n+[single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                                               | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n+[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                                             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) instead of `if let`\n+[single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                                                   | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n+[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                                                 | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n+[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                                                   | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n+[string_extend_chars](https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars)                                               | warn    | using `x.extend(s.chars())` where s is a `&str` or `String`\n+[string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                                               | warn    | calling `as_bytes` on a string literal instead of using a byte string literal\n+[stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                                       | allow   | type names prefixed/postfixed with their containing module's name\n+[suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting)                     | warn    | suspicious formatting of `*=`, `-=` or `!=`\n+[suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)                                 | warn    | suspicious formatting of `else if`\n+[temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                                             | warn    | assignments to temporaries\n+[temporary_cstring_as_ptr](https://github.com/Manishearth/rust-clippy/wiki#temporary_cstring_as_ptr)                                     | warn    | getting the inner pointer of a temporary `CString`\n+[too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                                                 | warn    | functions with too many arguments\n+[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                                     | warn    | an entire binding declared as `ref`, in a function argument or a `let` statement\n+[transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                                             | warn    | transmutes from a pointer to a reference type\n+[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                                           | warn    | trivial regular expressions\n+[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                                       | warn    | usage of very complex types that might be better factored into `type` definitions\n+[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                                       | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n+[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                                     | warn    | comparing unit values\n+[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                                         | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n+[unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                                           | warn    | outer expressions with no effect\n+[unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                                         | warn    | struct fields bound to a wildcard instead of using `..`\n+[unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                                     | warn    | `unsafe` removed from API names on import\n+[unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)                                 | allow   | literals whose suffix is not separated by an underscore\n+[unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                                         | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[unused_io_amount](https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount)                                                     | deny    | unused written/read amount\n+[unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                                             | warn    | unused labels\n+[unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                                     | warn    | unused lifetimes in function definitions\n+[use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                                                   | allow   | use of `Debug`-based formatting\n+[used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)                                       | allow   | using a binding which is prefixed with an underscore\n+[useless_attribute](https://github.com/Manishearth/rust-clippy/wiki#useless_attribute)                                                   | warn    | use of lint attributes on `extern crate` items\n+[useless_format](https://github.com/Manishearth/rust-clippy/wiki#useless_format)                                                         | warn    | useless use of `format!`\n+[useless_let_if_seq](https://github.com/Manishearth/rust-clippy/wiki#useless_let_if_seq)                                                 | warn    | unidiomatic `let mut` declaration followed by initialization in `if`\n+[useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                                                   | warn    | transmutes that have the same to and from types or could be a cast/coercion\n+[useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                                               | warn    | useless `vec!`\n+[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                                                         | warn    | `loop { if let { ... } else break }`, which can be written as a `while let` loop\n+[while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)                                           | warn    | using a while-let loop instead of a for loop on an iterator\n+[wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention)                                   | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                                           | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[wrong_transmute](https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute)                                                       | warn    | transmutes that are confusing at best, undefined behaviour at worst and always useless\n+[zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)                                             | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n+[zero_prefixed_literal](https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal)                                           | warn    | integer literals starting with `0`\n+[zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                                                     | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n "}, {"sha": "65fdf95b4c18ba41516aef993a419d3cc8e6bae6", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/33577ec3f7f20ed642203580d26a151aac781bdf/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33577ec3f7f20ed642203580d26a151aac781bdf/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=33577ec3f7f20ed642203580d26a151aac781bdf", "patch": "@@ -46,12 +46,33 @@ declare_lint! {\n     \"suspicious formatting of `else if`\"\n }\n \n+/// **What it does:** Checks for possible missing comma in an array. It lints if\n+/// an array element is a binary op and it lies on two lines.\n+///\n+/// **Why is this bad?** This could lead to unexpected results.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// let a = &[\n+///     -1, -2, -3 // <= no coma here\n+///     -4, -5, -6\n+/// ];\n+/// ```\n+declare_lint! {\n+    pub POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING,\n+    Warn,\n+    \"possible missing comma in array\"\n+}\n+\n+\n #[derive(Copy,Clone)]\n pub struct Formatting;\n \n impl LintPass for Formatting {\n     fn get_lints(&self) -> LintArray {\n-        lint_array![SUSPICIOUS_ASSIGNMENT_FORMATTING, SUSPICIOUS_ELSE_FORMATTING]\n+        lint_array![SUSPICIOUS_ASSIGNMENT_FORMATTING, SUSPICIOUS_ELSE_FORMATTING, POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING]\n     }\n }\n \n@@ -71,6 +92,7 @@ impl EarlyLintPass for Formatting {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n         check_assign(cx, expr);\n         check_else_if(cx, expr);\n+        check_array(cx, expr);\n     }\n }\n \n@@ -127,6 +149,28 @@ fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n     }\n }\n \n+/// Implementation of the `POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING` lint for array\n+fn check_array(cx: &EarlyContext, expr: &ast::Expr) {\n+    if let ast::ExprKind::Array(ref array) = expr.node {\n+        for element in array {\n+            if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n+                let space_span = mk_sp(lhs.span.hi, op.span.lo);\n+                if let Some(space_snippet) = snippet_opt(cx, space_span) {\n+                    let lint_span = mk_sp(lhs.span.hi, lhs.span.hi);\n+                    if space_snippet.contains('\\n') {\n+                        span_note_and_lint(cx,\n+                                           POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING,\n+                                           lint_span,\n+                                           \"possibly missing a comma here\",\n+                                           lint_span,\n+                                           \"to remove this lint, add a comma or write the expr in a single line\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for consecutive ifs.\n fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Expr) {\n     if !differing_macro_contexts(first.span, second.span) && !in_macro(cx, first.span) &&"}, {"sha": "ecdddc6ec42a635a29f7b70e506c077fe2b800dd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33577ec3f7f20ed642203580d26a151aac781bdf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33577ec3f7f20ed642203580d26a151aac781bdf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=33577ec3f7f20ed642203580d26a151aac781bdf", "patch": "@@ -380,6 +380,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n         eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         format::USELESS_FORMAT,\n+        formatting::POSSIBLE_MISSING_COMMA_IN_ARRAY_FORMATTING,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,"}, {"sha": "096132b70937e405518763c8f109bda5312c2913", "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33577ec3f7f20ed642203580d26a151aac781bdf/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33577ec3f7f20ed642203580d26a151aac781bdf/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=33577ec3f7f20ed642203580d26a151aac781bdf", "patch": "@@ -96,4 +96,12 @@ fn main() {\n     a = -35;\n     a = *&191;\n     b = !false;\n+\n+    // possible missing comma in an array\n+    let mut c = &[\n+        -1, -2, -3 // <= no coma here\n+        //~^ ERROR possibly missing a comma here\n+        //~| NOTE to remove this lint, add a comma or write the expr in a single line\n+        -4, -5, -6\n+    ];\n }"}]}