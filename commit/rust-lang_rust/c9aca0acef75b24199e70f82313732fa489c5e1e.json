{"sha": "c9aca0acef75b24199e70f82313732fa489c5e1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWNhMGFjZWY3NWIyNDE5OWU3MGY4MjMxMzczMmZhNDg5YzVlMWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-29T21:22:28Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-29T21:22:28Z"}, "message": "Merge #1602\n\n1602: Assist to merge identical match arms r=matklad a=theotherphil\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/1250\n\nCo-authored-by: Phil Ellison <phil.j.ellison@gmail.com>", "tree": {"sha": "343e1f7c5ccb8ec52ed5bec092ada5d937d77473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343e1f7c5ccb8ec52ed5bec092ada5d937d77473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9aca0acef75b24199e70f82313732fa489c5e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9aca0acef75b24199e70f82313732fa489c5e1e", "html_url": "https://github.com/rust-lang/rust/commit/c9aca0acef75b24199e70f82313732fa489c5e1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9aca0acef75b24199e70f82313732fa489c5e1e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "a5fe9f7a877bdb4dc35226d1cbac2b4870fde276", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fe9f7a877bdb4dc35226d1cbac2b4870fde276", "html_url": "https://github.com/rust-lang/rust/commit/a5fe9f7a877bdb4dc35226d1cbac2b4870fde276"}, {"sha": "e6113c09980043dd3d9a57eca8fef96c011a5da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6113c09980043dd3d9a57eca8fef96c011a5da5", "html_url": "https://github.com/rust-lang/rust/commit/e6113c09980043dd3d9a57eca8fef96c011a5da5"}], "stats": {"total": 198, "additions": 194, "deletions": 4}, "files": [{"sha": "717b038f2be36af23295f5c25703b016eefe2fd7", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9aca0acef75b24199e70f82313732fa489c5e1e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c9aca0acef75b24199e70f82313732fa489c5e1e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c9aca0acef75b24199e70f82313732fa489c5e1e", "patch": "@@ -1326,7 +1326,7 @@ dependencies = [\n  \"ra_parser 0.1.0\",\n  \"ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_text_edit 0.1.0\",\n- \"rowan 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rowan 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1596,7 +1596,7 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2281,7 +2281,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e7790c7f1cc73d831d28dc5a7deb316a006e7848e6a7f467cdb10a0a9e0fb1c\"\n \"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n \"checksum ron 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17f52a24414403f81528b67488cf8edc4eda977d3af1646bb6b106a600ead78f\"\n-\"checksum rowan 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a796c0517d6969224c42e9ef01356363b0a7c57d10ec986c9a600d075666a5ff\"\n+\"checksum rowan 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03e34c2e5f01d7fa4ab7e6a49da44f59fb38ffb61e6c9f714deb8e157274c2c7\"\n \"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\""}, {"sha": "03eec73ad87ecf0d697c87b4924a248ac8deb522", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c9aca0acef75b24199e70f82313732fa489c5e1e", "patch": "@@ -93,6 +93,7 @@ mod flip_comma;\n mod flip_binexpr;\n mod change_visibility;\n mod fill_match_arms;\n+mod merge_match_arms;\n mod introduce_variable;\n mod inline_local_variable;\n mod replace_if_let_with_match;\n@@ -109,6 +110,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,\n+        merge_match_arms::merge_match_arms,\n         flip_comma::flip_comma,\n         flip_binexpr::flip_binexpr,\n         introduce_variable::introduce_variable,"}, {"sha": "bc5f6f17c6024e2929d5e0c1c79e31ce242cf835", "filename": "crates/ra_assists/src/merge_match_arms.rs", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs?ref=c9aca0acef75b24199e70f82313732fa489c5e1e", "patch": "@@ -0,0 +1,188 @@\n+use crate::{Assist, AssistCtx, AssistId, TextRange, TextUnit};\n+use hir::db::HirDatabase;\n+use ra_syntax::ast::{AstNode, MatchArm};\n+\n+pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let current_arm = ctx.node_at_offset::<MatchArm>()?;\n+\n+    // We check if the following match arm matches this one. We could, but don't,\n+    // compare to the previous match arm as well.\n+    let next = current_arm.syntax().next_sibling();\n+    let next_arm = MatchArm::cast(next?.clone())?;\n+\n+    // Don't try to handle arms with guards for now - can add support for this later\n+    if current_arm.guard().is_some() || next_arm.guard().is_some() {\n+        return None;\n+    }\n+\n+    let current_expr = current_arm.expr()?;\n+    let next_expr = next_arm.expr()?;\n+\n+    // Check for match arm equality by comparing lengths and then string contents\n+    if current_expr.syntax().text_range().len() != next_expr.syntax().text_range().len() {\n+        return None;\n+    }\n+    if current_expr.syntax().text() != next_expr.syntax().text() {\n+        return None;\n+    }\n+\n+    let cursor_to_end = current_arm.syntax().text_range().end() - ctx.frange.range.start();\n+\n+    ctx.add_action(AssistId(\"merge_match_arms\"), \"merge match arms\", |edit| {\n+        fn contains_placeholder(a: &MatchArm) -> bool {\n+            a.pats().any(|x| match x.kind() {\n+                ra_syntax::ast::PatKind::PlaceholderPat(..) => true,\n+                _ => false,\n+            })\n+        }\n+\n+        let pats = if contains_placeholder(&current_arm) || contains_placeholder(&next_arm) {\n+            \"_\".into()\n+        } else {\n+            let ps: Vec<String> = current_arm\n+                .pats()\n+                .map(|x| x.syntax().to_string())\n+                .chain(next_arm.pats().map(|x| x.syntax().to_string()))\n+                .collect();\n+            ps.join(\" | \")\n+        };\n+\n+        let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n+        let offset = TextUnit::from_usize(arm.len()) - cursor_to_end;\n+\n+        let start = current_arm.syntax().text_range().start();\n+        let end = next_arm.syntax().text_range().end();\n+\n+        edit.target(current_arm.syntax().text_range());\n+        edit.replace(TextRange::from_to(start, end), arm);\n+        edit.set_cursor(start + offset);\n+    });\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::merge_match_arms;\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn merge_match_arms_single_patterns() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A => { 1i32<|> }\n+                    X::B => { 1i32 }\n+                    X::C => { 2i32 }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A | X::B => { 1i32<|> }\n+                    X::C => { 2i32 }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_multiple_patterns() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C, D, E }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A | X::B => {<|> 1i32 },\n+                    X::C | X::D => { 1i32 },\n+                    X::E => { 2i32 },\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C, D, E }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A | X::B | X::C | X::D => {<|> 1i32 },\n+                    X::E => { 2i32 },\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_placeholder_pattern() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C, D, E }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A => { 1i32 },\n+                    X::B => { 2i<|>32 },\n+                    _ => { 2i32 }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X { A, B, C, D, E }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A => { 1i32 },\n+                    _ => { 2i<|>32 }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_rejects_guards() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+            #[derive(Debug)]\n+            enum X {\n+                A(i32),\n+                B,\n+                C\n+            }\n+\n+            fn main() {\n+                let x = X::A;\n+                let y = match x {\n+                    X::A(a) if a > 5 => { <|>1i32 },\n+                    X::B => { 1i32 },\n+                    X::C => { 2i32 }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "bc1c88070c84f88ffb45df362d0b869baa520b00", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c9aca0acef75b24199e70f82313732fa489c5e1e/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=c9aca0acef75b24199e70f82313732fa489c5e1e", "patch": "@@ -10,7 +10,7 @@ repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n [dependencies]\n unicode-xid = \"0.1.0\"\n itertools = \"0.8.0\"\n-rowan = \"0.6.0\"\n+rowan = \"0.6.1\"\n ra_rustc_lexer = { version = \"0.1.0-pre.2\" }\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here"}]}