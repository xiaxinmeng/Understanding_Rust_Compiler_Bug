{"sha": "292d36febdf2ceaa73c41e2e46b41a5719394c2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MmQzNmZlYmRmMmNlYWE3M2M0MWUyZTQ2YjQxYTU3MTkzOTRjMmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-20T10:03:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-24T09:37:04Z"}, "message": "Add missing doc examples for Builder", "tree": {"sha": "5248f2cbfb2bfd86c3cb1fb93c0973d6c48beb6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5248f2cbfb2bfd86c3cb1fb93c0973d6c48beb6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292d36febdf2ceaa73c41e2e46b41a5719394c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292d36febdf2ceaa73c41e2e46b41a5719394c2f", "html_url": "https://github.com/rust-lang/rust/commit/292d36febdf2ceaa73c41e2e46b41a5719394c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292d36febdf2ceaa73c41e2e46b41a5719394c2f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "fed6b31cee87a111ec22303c1199a16ba188141e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/292d36febdf2ceaa73c41e2e46b41a5719394c2f/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292d36febdf2ceaa73c41e2e46b41a5719394c2f/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=292d36febdf2ceaa73c41e2e46b41a5719394c2f", "patch": "@@ -216,6 +216,20 @@ pub use self::local::{LocalKey, LocalKeyState};\n \n /// Thread configuration. Provides detailed control over the properties\n /// and behavior of new threads.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let builder = thread::Builder::new();\n+///\n+/// let handler = builder.spawn(|| {\n+///     // thread code\n+/// }).unwrap();\n+///\n+/// handler.join().unwrap();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Builder {\n@@ -228,6 +242,22 @@ pub struct Builder {\n impl Builder {\n     /// Generates the base configuration for spawning a thread, from which\n     /// configuration methods can be chained.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new()\n+    ///                               .name(\"foo\".into())\n+    ///                               .stack_size(10);\n+    ///\n+    /// let handler = builder.spawn(|| {\n+    ///     // thread code\n+    /// }).unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Builder {\n         Builder {\n@@ -241,7 +271,7 @@ impl Builder {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::thread;\n     ///\n     /// let builder = thread::Builder::new()\n@@ -260,6 +290,14 @@ impl Builder {\n     }\n \n     /// Sets the size of the stack for the new thread.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new().stack_size(10);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stack_size(mut self, size: usize) -> Builder {\n         self.stack_size = Some(size);\n@@ -275,9 +313,26 @@ impl Builder {\n     ///\n     /// # Errors\n     ///\n-    /// Unlike the `spawn` free function, this method yields an\n-    /// `io::Result` to capture any failure to create the thread at\n+    /// Unlike the [`spawn`] free function, this method yields an\n+    /// [`io::Result`] to capture any failure to create the thread at\n     /// the OS level.\n+    ///\n+    /// [`spawn`]: ../../std/thread/fn.spawn.html\n+    /// [`io::Result`]: ../../std/io/type.Result.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let handler = builder.spawn(|| {\n+    ///     // thread code\n+    /// }).unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static"}]}