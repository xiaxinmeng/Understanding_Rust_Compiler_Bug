{"sha": "765050f302f75a8f4c5de3ab527aec4d4f9f883e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NTA1MGYzMDJmNzVhOGY0YzVkZTNhYjUyN2FlYzRkNGY5Zjg4M2U=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-18T04:52:44Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:03:29Z"}, "message": "Revise mutex/rwlock memory layout for macOS compat", "tree": {"sha": "ceb734c9a2c80b644fcbe26e993f1158ac5ef7bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb734c9a2c80b644fcbe26e993f1158ac5ef7bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/765050f302f75a8f4c5de3ab527aec4d4f9f883e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/765050f302f75a8f4c5de3ab527aec4d4f9f883e", "html_url": "https://github.com/rust-lang/rust/commit/765050f302f75a8f4c5de3ab527aec4d4f9f883e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/765050f302f75a8f4c5de3ab527aec4d4f9f883e/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9896b0f8752c71c82c5d538ec0b115ffb5cf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9896b0f8752c71c82c5d538ec0b115ffb5cf4e", "html_url": "https://github.com/rust-lang/rust/commit/dd9896b0f8752c71c82c5d538ec0b115ffb5cf4e"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "3208727730312ff0d261f26fb84f1325fb699ec0", "filename": "src/shims/sync.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/765050f302f75a8f4c5de3ab527aec4d4f9f883e/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765050f302f75a8f4c5de3ab527aec4d4f9f883e/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=765050f302f75a8f4c5de3ab527aec4d4f9f883e", "patch": "@@ -79,7 +79,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     // pthread_mutex_t is between 24 and 48 bytes, depending on the platform\n     // memory layout:\n-    // bytes 0-3: count of how many times this mutex has been locked, as a u32\n+    // bytes 0-3: reserved for signature on macOS\n+    // bytes 4-7: count of how many times this mutex has been locked, as a u32\n     // bytes 12-15: mutex kind, as an i32\n     // (the kind should be at this offset for compatibility with the static\n     // initializer macro)\n@@ -112,7 +113,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let locked_count_place = mutex_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let locked_count_place = mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         this.write_scalar(Scalar::from_u32(0), locked_count_place.into())?;\n \n         let mutex_kind_place = mutex_place.offset(Size::from_bytes(12), MemPlaceMeta::None, i32_layout, &*this.tcx)?;\n@@ -137,7 +138,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let kind = this.read_scalar(kind_place.into())?.not_undef()?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let locked_count_place = mutex_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let locked_count_place = mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         let locked_count = this.read_scalar(locked_count_place.into())?.to_u32()?;\n \n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n@@ -178,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let kind = this.read_scalar(kind_place.into())?.not_undef()?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let locked_count_place = mutex_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let locked_count_place = mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         let locked_count = this.read_scalar(locked_count_place.into())?.to_u32()?;\n \n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? ||\n@@ -213,7 +214,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let kind = this.read_scalar(kind_place.into())?.not_undef()?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let locked_count_place = mutex_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let locked_count_place = mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         let locked_count = this.read_scalar(locked_count_place.into())?.to_u32()?;\n \n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n@@ -254,7 +255,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let mutex_place = this.deref_operand(mutex_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let locked_count_place = mutex_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let locked_count_place = mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         if this.read_scalar(locked_count_place.into())?.to_u32()? != 0 {\n             return this.eval_libc_i32(\"EBUSY\");\n         }\n@@ -269,13 +270,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     // pthread_rwlock_t is between 32 and 56 bytes, depending on the platform\n     // memory layout:\n-    // bytes 0-3: reader count, as a u32\n-    // bytes 4-7: writer count, as a u32\n+    // bytes 0-3: reserved for signature on macOS\n+    // bytes 4-7: reader count, as a u32\n+    // bytes 8-11: writer count, as a u32\n \n     fn pthread_rwlock_rdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -284,8 +286,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         let readers = this.read_scalar(readers_place.into())?.to_u32()?;\n         let writers = this.read_scalar(writers_place.into())?.to_u32()?;\n         if writers != 0 {\n@@ -299,7 +301,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_tryrdlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -308,8 +310,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         let readers = this.read_scalar(readers_place.into())?.to_u32()?;\n         let writers = this.read_scalar(writers_place.into())?.to_u32()?;\n         if writers != 0 {\n@@ -323,7 +325,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_wrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -332,8 +334,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         let readers = this.read_scalar(readers_place.into())?.to_u32()?;\n         let writers = this.read_scalar(writers_place.into())?.to_u32()?;\n         if readers != 0 {\n@@ -349,7 +351,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_trywrlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -358,8 +360,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         let readers = this.read_scalar(readers_place.into())?.to_u32()?;\n         let writers = this.read_scalar(writers_place.into())?.to_u32()?;\n         if readers != 0 || writers != 0 {\n@@ -373,7 +375,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_unlock(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -382,8 +384,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         let readers = this.read_scalar(readers_place.into())?.to_u32()?;\n         let writers = this.read_scalar(writers_place.into())?.to_u32()?;\n         if readers != 0 {\n@@ -400,7 +402,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_rwlock_destroy(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        check_ptr_target_min_size(this, rwlock_op, 8)?;\n+        check_ptr_target_min_size(this, rwlock_op, 12)?;\n \n         let rwlock = this.read_scalar(rwlock_op)?.not_undef()?;\n         if this.is_null(rwlock)? {\n@@ -409,11 +411,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let rwlock_place = this.deref_operand(rwlock_op)?;\n \n         let u32_layout = this.layout_of(this.tcx.types.u32)?;\n-        let readers_place = rwlock_place.offset(Size::ZERO, MemPlaceMeta::None, u32_layout, this)?;\n+        let readers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n         if this.read_scalar(readers_place.into())?.to_u32()? != 0 {\n             return this.eval_libc_i32(\"EBUSY\");\n         }\n-        let writers_place = rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, this)?;\n+        let writers_place = rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, this)?;\n         if this.read_scalar(writers_place.into())?.to_u32()? != 0 {\n             return this.eval_libc_i32(\"EBUSY\");\n         }"}]}