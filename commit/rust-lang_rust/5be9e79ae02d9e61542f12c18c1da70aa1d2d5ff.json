{"sha": "5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff", "node_id": "C_kwDOAAsO6NoAKDViZTllNzlhZTAyZDllNjE1NDJmMTJjMThjMWRhNzBhYTFkMmQ1ZmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-12T01:48:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-12T01:48:06Z"}, "message": "Update expr.rs\n\nRevert spurious changes included in PR", "tree": {"sha": "78f1a8e1dd9bdffdc7f660b00b0171edeb23bd59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f1a8e1dd9bdffdc7f660b00b0171edeb23bd59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBxHWCRBK7hj4Ov3rIwAAN6gIAKfQr83DLffnDCf57hPGHRPY\nsTVxq8tfm6D0FmG+kJ5voysXrCFUNRjKYivfd8YehmutIF7ZcumjI4rXDfok556N\nDQTzdHwyjiK5cKCPHhxqxMRDhE+EQQVS704Tv+Of4dc9HyzmWmKRhbDWqU5ty9sO\nls67ak1Nx7ljYPlYfZEbBW8pA2irwZbDpY6dK5VZhuyfjiXnpUF9t3Zpper/AjVu\nekC2lrVKW88vQcP2F3GnLWmXf+8H0Vwb4HLLPa9KmxIiIW61gMnYANHbx++igNT1\nQiMcSPnhpV4/MVBOGbvra21yYsI9CGSb+PCf8r4p7PtVnTDr6JM3/3b1tQJ1lhQ=\n=tRfL\n-----END PGP SIGNATURE-----\n", "payload": "tree 78f1a8e1dd9bdffdc7f660b00b0171edeb23bd59\nparent b79fc92db3f0264136c3bc3c70b80e8b7b443fc3\nauthor Michael Goulet <michael@errs.io> 1644630486 -0800\ncommitter GitHub <noreply@github.com> 1644630486 -0800\n\nUpdate expr.rs\n\nRevert spurious changes included in PR"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff", "html_url": "https://github.com/rust-lang/rust/commit/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b79fc92db3f0264136c3bc3c70b80e8b7b443fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b79fc92db3f0264136c3bc3c70b80e8b7b443fc3", "html_url": "https://github.com/rust-lang/rust/commit/b79fc92db3f0264136c3bc3c70b80e8b7b443fc3"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "0e1dbc53806ffe511bf4ae2e7d45cad784d5e72e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=5be9e79ae02d9e61542f12c18c1da70aa1d2d5ff", "patch": "@@ -865,22 +865,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ),\n                     ..\n                 }) => {\n-                    // Check if our lhs is a child of the condition of a while loop\n-                    let expr_is_ancestor = std::iter::successors(Some(lhs.hir_id), |id| {\n-                        self.tcx.hir().find_parent_node(*id)\n-                    })\n-                    .take_while(|id| *id != parent)\n-                    .any(|id| id == expr.hir_id);\n-                    // if it is, then we have a situation like `while Some(0) = value.get(0) {`,\n-                    // where `while let` was more likely intended.\n-                    if expr_is_ancestor {\n-                        err.span_suggestion_verbose(\n-                            expr.span.shrink_to_lo(),\n-                            \"you might have meant to use pattern destructuring\",\n-                            \"let \".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n+                    // We have a situation like `while Some(0) = value.get(0) {`, where `while let`\n+                    // was more likely intended.\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_lo(),\n+                        \"you might have meant to use pattern destructuring\",\n+                        \"let \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                     break;\n                 }\n                 hir::Node::Item(_)"}]}