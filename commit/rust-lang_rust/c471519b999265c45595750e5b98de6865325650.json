{"sha": "c471519b999265c45595750e5b98de6865325650", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NzE1MTliOTk5MjY1YzQ1NTk1NzUwZTViOThkZTY4NjUzMjU2NTA=", "commit": {"author": {"name": "Hanif Bin Ariffin", "email": "hanif.ariffin.4326@gmail.com", "date": "2020-04-26T01:11:59Z"}, "committer": {"name": "Hanif Bin Ariffin", "email": "hanif.ariffin.4326@gmail.com", "date": "2020-06-13T19:06:22Z"}, "message": "Added unsafety documentation with partition and partition equal\n\nThese are simply indexing safety.", "tree": {"sha": "7c82f4ed5a34535c4306930b52b868c134ba6c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c82f4ed5a34535c4306930b52b868c134ba6c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c471519b999265c45595750e5b98de6865325650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c471519b999265c45595750e5b98de6865325650", "html_url": "https://github.com/rust-lang/rust/commit/c471519b999265c45595750e5b98de6865325650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c471519b999265c45595750e5b98de6865325650/comments", "author": {"login": "hbina", "id": 6733660, "node_id": "MDQ6VXNlcjY3MzM2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6733660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hbina", "html_url": "https://github.com/hbina", "followers_url": "https://api.github.com/users/hbina/followers", "following_url": "https://api.github.com/users/hbina/following{/other_user}", "gists_url": "https://api.github.com/users/hbina/gists{/gist_id}", "starred_url": "https://api.github.com/users/hbina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hbina/subscriptions", "organizations_url": "https://api.github.com/users/hbina/orgs", "repos_url": "https://api.github.com/users/hbina/repos", "events_url": "https://api.github.com/users/hbina/events{/privacy}", "received_events_url": "https://api.github.com/users/hbina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hbina", "id": 6733660, "node_id": "MDQ6VXNlcjY3MzM2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6733660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hbina", "html_url": "https://github.com/hbina", "followers_url": "https://api.github.com/users/hbina/followers", "following_url": "https://api.github.com/users/hbina/following{/other_user}", "gists_url": "https://api.github.com/users/hbina/gists{/gist_id}", "starred_url": "https://api.github.com/users/hbina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hbina/subscriptions", "organizations_url": "https://api.github.com/users/hbina/orgs", "repos_url": "https://api.github.com/users/hbina/repos", "events_url": "https://api.github.com/users/hbina/events{/privacy}", "received_events_url": "https://api.github.com/users/hbina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e1e989f7cfbc9bb35511acdeb51b3122bf717a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1e989f7cfbc9bb35511acdeb51b3122bf717a2", "html_url": "https://github.com/rust-lang/rust/commit/9e1e989f7cfbc9bb35511acdeb51b3122bf717a2"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "046b2f6c13ad4a28d74464cbcec169e78a9e6d77", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c471519b999265c45595750e5b98de6865325650/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c471519b999265c45595750e5b98de6865325650/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=c471519b999265c45595750e5b98de6865325650", "patch": "@@ -250,6 +250,7 @@ where\n     let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n+    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe`\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n@@ -435,12 +436,14 @@ where\n         let mut l = 0;\n         let mut r = v.len();\n         unsafe {\n-            // Find the first element greater then or equal to the pivot.\n+            // Find the first element greater than or equal to the pivot.\n+            // SAFETY: We already do the bound checking here with `l<r`.\n             while l < r && is_less(v.get_unchecked(l), pivot) {\n                 l += 1;\n             }\n \n             // Find the last element smaller that the pivot.\n+            // SAFETY: The minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n             while l < r && !is_less(v.get_unchecked(r - 1), pivot) {\n                 r -= 1;\n             }\n@@ -483,12 +486,14 @@ where\n     let mut r = v.len();\n     loop {\n         unsafe {\n-            // Find the first element greater that the pivot.\n+            // Find the first element greater than the pivot.\n+            // SAFETY: We already do the bound checking here with `l<r`\n             while l < r && !is_less(pivot, v.get_unchecked(l)) {\n                 l += 1;\n             }\n \n             // Find the last element equal to the pivot.\n+            // SAFETY: The minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n             while l < r && is_less(pivot, v.get_unchecked(r - 1)) {\n                 r -= 1;\n             }"}]}