{"sha": "e697a52359874c2b7387be96e664b1f94b14255b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTdhNTIzNTk4NzRjMmI3Mzg3YmU5NmU2NjRiMWY5NGIxNDI1NWI=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-25T22:02:43Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:28Z"}, "message": "Adding a function to stdlib to set the min stack size, for programs\nthat absolutely will not succeed with a large default stack. This\nshould be removed once we have stack grown working.\n\nAlso updated word-count to succeed under the new test framework.", "tree": {"sha": "fd26091e3372bb53af9fc5bdf4e7bd413a3ade82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd26091e3372bb53af9fc5bdf4e7bd413a3ade82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e697a52359874c2b7387be96e664b1f94b14255b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e697a52359874c2b7387be96e664b1f94b14255b", "html_url": "https://github.com/rust-lang/rust/commit/e697a52359874c2b7387be96e664b1f94b14255b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e697a52359874c2b7387be96e664b1f94b14255b/comments", "author": null, "committer": null, "parents": [{"sha": "117e251733975e026bdc57f4bdaecf9253d3b575", "url": "https://api.github.com/repos/rust-lang/rust/commits/117e251733975e026bdc57f4bdaecf9253d3b575", "html_url": "https://github.com/rust-lang/rust/commit/117e251733975e026bdc57f4bdaecf9253d3b575"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "62fff2cfc7584b8b5015cc26f068860aa4fb7c64", "filename": "src/lib/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e697a52359874c2b7387be96e664b1f94b14255b/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e697a52359874c2b7387be96e664b1f94b14255b/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=e697a52359874c2b7387be96e664b1f94b14255b", "patch": "@@ -8,6 +8,8 @@ native \"rust\" mod rustrt {\n     fn clone_chan(c: *rust_chan) -> *rust_chan;\n \n     type rust_chan;\n+\n+    fn set_min_stack(stack_size: uint);\n }\n \n /**\n@@ -40,6 +42,10 @@ fn send[T](c: chan[T], v: &T) { c <| v; }\n \n fn recv[T](p: port[T]) -> T { let v; p |> v; v }\n \n+fn set_min_stack(uint stack_size) {\n+    rustrt::set_min_stack(stack_size);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "4870c9fe545984705939fb131abeb64b87481f28", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e697a52359874c2b7387be96e664b1f94b14255b", "patch": "@@ -856,6 +856,13 @@ clone_chan(rust_task *task, rust_chan *chan) {\n     return chan->clone(task);\n }\n \n+// defined in rust_task.cpp\n+extern size_t g_min_stack_size;\n+extern \"C\" CDECL void\n+set_min_stack(rust_task *task, uintptr_t stack_size) {\n+    g_min_stack_size = stack_size;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "538a9b34e56976f56b6284508b6dbe4d8f5c45c1", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=e697a52359874c2b7387be96e664b1f94b14255b", "patch": "@@ -14,14 +14,15 @@\n \n // FIXME (issue #151): This should be 0x300; the change here is for\n // practicality's sake until stack growth is working.\n+size_t g_min_stack_size = 0x300000;\n \n static size_t get_min_stk_size() {\n     char *stack_size = getenv(\"RUST_MIN_STACK\");\n     if(stack_size) {\n         return strtol(stack_size, NULL, 0);\n     }\n     else {\n-        return 0x300000;\n+        return g_min_stack_size;\n     }\n }\n "}, {"sha": "8326cabea88ff8dc420ccd1d5eb47861cdae693c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/e697a52359874c2b7387be96e664b1f94b14255b/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=e697a52359874c2b7387be96e664b1f94b14255b", "patch": "@@ -37,6 +37,7 @@ rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n+set_min_stack\n size_of\n squareroot\n str_alloc"}, {"sha": "6e7e2bdba8aa5381027deba9a8eb13edb613e48b", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e697a52359874c2b7387be96e664b1f94b14255b/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e697a52359874c2b7387be96e664b1f94b14255b/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=e697a52359874c2b7387be96e664b1f94b14255b", "patch": "@@ -1,6 +1,3 @@\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n /**\n    A parallel word-frequency counting program.\n \n@@ -233,10 +230,19 @@ fn main(argv: vec[str]) {\n         let out = io::stdout();\n \n         out.write_line(#fmt(\"Usage: %s <filename> ...\", argv.(0)));\n-        fail;\n+\n+        // TODO: run something just to make sure the code hasn't\n+        // broken yet. This is the unit test mode of this program.\n+\n+        ret;\n     }\n \n+    // We can get by with 8k stacks, and we'll probably exhaust our\n+    // address space otherwise.\n+    task::set_min_stack(8192u);\n+\n     let start = time::precise_time_ns();\n+\n     map_reduce::map_reduce(vec::slice(argv, 1u, vec::len(argv)));\n     let stop = time::precise_time_ns();\n \n@@ -342,4 +348,4 @@ fn is_alpha_upper(c: char) -> bool {\n \n fn is_alpha(c: char) -> bool { is_alpha_upper(c) || is_alpha_lower(c) }\n \n-fn is_word_char(c: char) -> bool { is_alpha(c) || is_digit(c) || c == '_' }\n\\ No newline at end of file\n+fn is_word_char(c: char) -> bool { is_alpha(c) || is_digit(c) || c == '_' }"}]}