{"sha": "98ad6a5519651af36e246c0335c964dd52c554ba", "node_id": "C_kwDOAAsO6NoAKDk4YWQ2YTU1MTk2NTFhZjM2ZTI0NmMwMzM1Yzk2NGRkNTJjNTU0YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T19:33:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T19:33:52Z"}, "message": "Auto merge of #101946 - matthiaskrgr:rollup-jqkhsku, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #101672 (array docs - advertise how to get array from slice)\n - #101781 (Extend list of targets that support dyanmic linking for llvm tools)\n - #101783 (Improve handing of env vars during bootstrap process)\n - #101801 (add note for `layout_of` when query depth overflows)\n - #101824 (rustdoc: add test cases for turning ``[Vec<T>]`` into ``[`Vec<T>`]``)\n - #101861 (Update stdarch)\n - #101873 (Allow building `rust-analyzer-proc-macro-srv` as a standalone tool)\n - #101918 (rustdoc: clean up CSS for All Items and All Crates lists)\n - #101934 (Continue migration of CSS themes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "446f21ef7c05f7decf35b4f17f286d1b975ae53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/446f21ef7c05f7decf35b4f17f286d1b975ae53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ad6a5519651af36e246c0335c964dd52c554ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ad6a5519651af36e246c0335c964dd52c554ba", "html_url": "https://github.com/rust-lang/rust/commit/98ad6a5519651af36e246c0335c964dd52c554ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ad6a5519651af36e246c0335c964dd52c554ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c773c134c949661874d76313280e76cc3dd60975", "url": "https://api.github.com/repos/rust-lang/rust/commits/c773c134c949661874d76313280e76cc3dd60975", "html_url": "https://github.com/rust-lang/rust/commit/c773c134c949661874d76313280e76cc3dd60975"}, {"sha": "1f31bee266fa7275e116d50758e4eb85f78beb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f31bee266fa7275e116d50758e4eb85f78beb9d", "html_url": "https://github.com/rust-lang/rust/commit/1f31bee266fa7275e116d50758e4eb85f78beb9d"}], "stats": {"total": 630, "additions": 476, "deletions": 154}, "files": [{"sha": "22fe7183a01f95ed26f12a95a68f46fd1ef48feb", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -507,6 +507,10 @@ name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n \n [[package]]\n name = \"chalk-derive\"\n@@ -4613,7 +4617,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"addr2line 0.16.0\",\n  \"alloc\",\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"compiler_builtins\",\n  \"core\",\n  \"dlmalloc\",\n@@ -4637,7 +4641,7 @@ dependencies = [\n name = \"std_detect\"\n version = \"0.1.5\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"compiler_builtins\",\n  \"libc\",\n  \"rustc-std-workspace-alloc\","}, {"sha": "b914ba52a7353ac219710beaae0eea3814102cef", "filename": "compiler/rustc_error_messages/locales/en-US/query_system.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fquery_system.ftl?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -23,3 +23,6 @@ query_system_cycle_recursive_trait_alias = trait aliases cannot be recursive\n query_system_cycle_which_requires = ...which requires {$desc}...\n \n query_system_query_overflow = queries overflow the depth limit!\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+query_system_layout_of_depth = query depth increased by {$depth} when {$desc}"}, {"sha": "d819f4774d54d1dfd701b30a4d784286ab8674f6", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -19,8 +19,10 @@ use rustc_query_system::query::{\n     force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n     QuerySideEffects, QueryStackFrame,\n };\n-use rustc_query_system::Value;\n+use rustc_query_system::{LayoutOfDepth, QueryOverflow, Value};\n use rustc_serialize::Decodable;\n+use rustc_session::Limit;\n+use rustc_span::def_id::LOCAL_CRATE;\n use std::any::Any;\n use std::num::NonZeroU64;\n use thin_vec::ThinVec;\n@@ -109,7 +111,7 @@ impl QueryContext for QueryCtxt<'_> {\n         // when accessing the `ImplicitCtxt`.\n         tls::with_related_context(**self, move |current_icx| {\n             if depth_limit && !self.recursion_limit().value_within_limit(current_icx.query_depth) {\n-                self.depth_limit_error();\n+                self.depth_limit_error(token);\n             }\n \n             // Update the `ImplicitCtxt` to point to our new query job.\n@@ -127,6 +129,29 @@ impl QueryContext for QueryCtxt<'_> {\n             })\n         })\n     }\n+\n+    fn depth_limit_error(&self, job: QueryJobId) {\n+        let mut span = None;\n+        let mut layout_of_depth = None;\n+        if let Some(map) = self.try_collect_active_jobs() {\n+            if let Some((info, depth)) = job.try_find_layout_root(map) {\n+                span = Some(info.job.span);\n+                layout_of_depth = Some(LayoutOfDepth { desc: info.query.description, depth });\n+            }\n+        }\n+\n+        let suggested_limit = match self.recursion_limit() {\n+            Limit(0) => Limit(2),\n+            limit => limit * 2,\n+        };\n+\n+        self.sess.emit_fatal(QueryOverflow {\n+            span,\n+            layout_of_depth,\n+            suggested_limit,\n+            crate_name: self.crate_name(LOCAL_CRATE),\n+        });\n+    }\n }\n \n impl<'tcx> QueryCtxt<'tcx> {"}, {"sha": "bececca7585ae98980ac040387536e6883a8b473", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::AddSubdiagnostic;\n-use rustc_span::Span;\n+use rustc_session::Limit;\n+use rustc_span::{Span, Symbol};\n \n pub struct CycleStack {\n     pub span: Span,\n@@ -76,5 +77,20 @@ pub struct IncrementCompilation {\n }\n \n #[derive(SessionDiagnostic)]\n+#[help]\n #[diag(query_system::query_overflow)]\n-pub struct QueryOverflow;\n+pub struct QueryOverflow {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    #[subdiagnostic]\n+    pub layout_of_depth: Option<LayoutOfDepth>,\n+    pub suggested_limit: Limit,\n+    pub crate_name: Symbol,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(query_system::layout_of_depth)]\n+pub struct LayoutOfDepth {\n+    pub desc: String,\n+    pub depth: usize,\n+}"}, {"sha": "5987651322af7a871ad6b52a62c76f26452afd3b", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -23,4 +23,6 @@ pub mod query;\n mod values;\n \n pub use error::HandleCycleError;\n+pub use error::LayoutOfDepth;\n+pub use error::QueryOverflow;\n pub use values::Value;"}, {"sha": "95305eabd0d347ce85f7732737f560288fde2abe", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -59,6 +59,7 @@ impl QueryJobId {\n     }\n }\n \n+#[derive(Clone)]\n pub struct QueryJobInfo {\n     pub query: QueryStackFrame,\n     pub job: QueryJob,\n@@ -116,10 +117,10 @@ impl QueryJob {\n     }\n }\n \n-#[cfg(not(parallel_compiler))]\n impl QueryJobId {\n     #[cold]\n     #[inline(never)]\n+    #[cfg(not(parallel_compiler))]\n     pub(super) fn find_cycle_in_stack(\n         &self,\n         query_map: QueryMap,\n@@ -156,6 +157,24 @@ impl QueryJobId {\n \n         panic!(\"did not find a cycle\")\n     }\n+\n+    #[cold]\n+    #[inline(never)]\n+    pub fn try_find_layout_root(&self, query_map: QueryMap) -> Option<(QueryJobInfo, usize)> {\n+        let mut last_layout = None;\n+        let mut current_id = Some(*self);\n+        let mut depth = 0;\n+\n+        while let Some(id) = current_id {\n+            let info = query_map.get(&id).unwrap();\n+            if info.query.name == \"layout_of\" {\n+                depth += 1;\n+                last_layout = Some((info.clone(), depth));\n+            }\n+            current_id = info.job.parent;\n+        }\n+        last_layout\n+    }\n }\n \n #[cfg(parallel_compiler)]"}, {"sha": "7a96c53b604814a78d00aa755f541e5f71472b04", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -14,7 +14,7 @@ pub use self::caches::{\n mod config;\n pub use self::config::{QueryConfig, QueryDescription, QueryVTable};\n \n-use crate::dep_graph::{DepContext, DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n+use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::Diagnostic;\n use rustc_hir::def::DefKind;\n@@ -123,7 +123,5 @@ pub trait QueryContext: HasDepContext {\n         compute: impl FnOnce() -> R,\n     ) -> R;\n \n-    fn depth_limit_error(&self) {\n-        self.dep_context().sess().emit_fatal(crate::error::QueryOverflow);\n-    }\n+    fn depth_limit_error(&self, job: QueryJobId);\n }"}, {"sha": "165b9d24d934bfcfbaeeb4ced4b105fdc470b146", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -184,6 +184,18 @@ impl<T, const N: usize> const BorrowMut<[T]> for [T; N] {\n     }\n }\n \n+/// Tries to create an array `[T; N]` by copying from a slice `&[T]`. Succeeds if\n+/// `slice.len() == N`.\n+///\n+/// ```\n+/// let bytes: [u8; 3] = [1, 0, 2];\n+///\n+/// let bytes_head: [u8; 2] = <[u8; 2]>::try_from(&bytes[0..2]).unwrap();\n+/// assert_eq!(1, u16::from_le_bytes(bytes_head));\n+///\n+/// let bytes_tail: [u8; 2] = bytes[1..3].try_into().unwrap();\n+/// assert_eq!(512, u16::from_le_bytes(bytes_tail));\n+/// ```\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<T, const N: usize> TryFrom<&[T]> for [T; N]\n where\n@@ -196,6 +208,18 @@ where\n     }\n }\n \n+/// Tries to create an array `[T; N]` by copying from a mutable slice `&mut [T]`.\n+/// Succeeds if `slice.len() == N`.\n+///\n+/// ```\n+/// let mut bytes: [u8; 3] = [1, 0, 2];\n+///\n+/// let bytes_head: [u8; 2] = <[u8; 2]>::try_from(&mut bytes[0..2]).unwrap();\n+/// assert_eq!(1, u16::from_le_bytes(bytes_head));\n+///\n+/// let bytes_tail: [u8; 2] = (&mut bytes[1..3]).try_into().unwrap();\n+/// assert_eq!(512, u16::from_le_bytes(bytes_tail));\n+/// ```\n #[stable(feature = \"try_from_mut_slice_to_array\", since = \"1.59.0\")]\n impl<T, const N: usize> TryFrom<&mut [T]> for [T; N]\n where\n@@ -208,6 +232,18 @@ where\n     }\n }\n \n+/// Tries to create an array ref `&[T; N]` from a slice ref `&[T]`. Succeeds if\n+/// `slice.len() == N`.\n+///\n+/// ```\n+/// let bytes: [u8; 3] = [1, 0, 2];\n+///\n+/// let bytes_head: &[u8; 2] = <&[u8; 2]>::try_from(&bytes[0..2]).unwrap();\n+/// assert_eq!(1, u16::from_le_bytes(*bytes_head));\n+///\n+/// let bytes_tail: &[u8; 2] = bytes[1..3].try_into().unwrap();\n+/// assert_eq!(512, u16::from_le_bytes(*bytes_tail));\n+/// ```\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;\n@@ -223,6 +259,18 @@ impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     }\n }\n \n+/// Tries to create a mutable array ref `&mut [T; N]` from a mutable slice ref\n+/// `&mut [T]`. Succeeds if `slice.len() == N`.\n+///\n+/// ```\n+/// let mut bytes: [u8; 3] = [1, 0, 2];\n+///\n+/// let bytes_head: &mut [u8; 2] = <&mut [u8; 2]>::try_from(&mut bytes[0..2]).unwrap();\n+/// assert_eq!(1, u16::from_le_bytes(*bytes_head));\n+///\n+/// let bytes_tail: &mut [u8; 2] = (&mut bytes[1..3]).try_into().unwrap();\n+/// assert_eq!(512, u16::from_le_bytes(*bytes_tail));\n+/// ```\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     type Error = TryFromSliceError;"}, {"sha": "331714a993c609210adb04bfdbdd35c053408e70", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -611,7 +611,19 @@ mod prim_pointer {}\n ///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n-/// Slices have a dynamic size and do not coerce to arrays.\n+///\n+/// Slices have a dynamic size and do not coerce to arrays. Instead, use\n+/// `slice.try_into().unwrap()` or `<ArrayType>::try_from(slice).unwrap()`.\n+///\n+/// Array's `try_from(slice)` implementations (and the corresponding `slice.try_into()`\n+/// array implementations) succeed if the input slice length is the same as the result\n+/// array length. They optimize especially well when the optimizer can easily determine\n+/// the slice length, e.g. `<[u8; 4]>::try_from(&slice[4..8]).unwrap()`. Array implements\n+/// [TryFrom](crate::convert::TryFrom) returning:\n+///\n+/// - `[T; N]` copies from the slice's elements\n+/// - `&[T; N]` references the original slice's elements\n+/// - `&mut [T; N]` references the original slice's elements\n ///\n /// You can move elements out of an array with a [slice pattern]. If you want\n /// one element, see [`mem::replace`].\n@@ -640,6 +652,15 @@ mod prim_pointer {}\n /// for x in &array { }\n /// ```\n ///\n+/// You can use `<ArrayType>::try_from(slice)` or `slice.try_into()` to get an array from\n+/// a slice:\n+///\n+/// ```\n+/// let bytes: [u8; 3] = [1, 0, 2];\n+/// assert_eq!(1, u16::from_le_bytes(<[u8; 2]>::try_from(&bytes[0..2]).unwrap()));\n+/// assert_eq!(512, u16::from_le_bytes(bytes[1..3].try_into().unwrap()));\n+/// ```\n+///\n /// You can use a [slice pattern] to move elements out of an array:\n ///\n /// ```"}, {"sha": "b8c35ecd34933ef3a072ef5b259119dbdd34d6c1", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n alloc = { path = \"../alloc\" }\n-cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n+cfg-if = { version = \"1.0\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }"}, {"sha": "331714a993c609210adb04bfdbdd35c053408e70", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -611,7 +611,19 @@ mod prim_pointer {}\n ///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n-/// Slices have a dynamic size and do not coerce to arrays.\n+///\n+/// Slices have a dynamic size and do not coerce to arrays. Instead, use\n+/// `slice.try_into().unwrap()` or `<ArrayType>::try_from(slice).unwrap()`.\n+///\n+/// Array's `try_from(slice)` implementations (and the corresponding `slice.try_into()`\n+/// array implementations) succeed if the input slice length is the same as the result\n+/// array length. They optimize especially well when the optimizer can easily determine\n+/// the slice length, e.g. `<[u8; 4]>::try_from(&slice[4..8]).unwrap()`. Array implements\n+/// [TryFrom](crate::convert::TryFrom) returning:\n+///\n+/// - `[T; N]` copies from the slice's elements\n+/// - `&[T; N]` references the original slice's elements\n+/// - `&mut [T; N]` references the original slice's elements\n ///\n /// You can move elements out of an array with a [slice pattern]. If you want\n /// one element, see [`mem::replace`].\n@@ -640,6 +652,15 @@ mod prim_pointer {}\n /// for x in &array { }\n /// ```\n ///\n+/// You can use `<ArrayType>::try_from(slice)` or `slice.try_into()` to get an array from\n+/// a slice:\n+///\n+/// ```\n+/// let bytes: [u8; 3] = [1, 0, 2];\n+/// assert_eq!(1, u16::from_le_bytes(<[u8; 2]>::try_from(&bytes[0..2]).unwrap()));\n+/// assert_eq!(512, u16::from_le_bytes(bytes[1..3].try_into().unwrap()));\n+/// ```\n+///\n /// You can use a [slice pattern] to move elements out of an array:\n ///\n /// ```"}, {"sha": "699c093a42283c07e9763b4c19439a900ae2d321", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -1 +1 @@\n-Subproject commit 42df7394d38bc7b945116ea3ad8a7cbcd1db50a9\n+Subproject commit 699c093a42283c07e9763b4c19439a900ae2d321"}, {"sha": "350d87d58a4dcde6c520a0d1ca599670c46d4726", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -732,19 +732,26 @@ def build_bootstrap(self, color):\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n \n+        # Export Stage0 snapshot compiler related env variables\n+        build_section = \"target.{}\".format(self.build)\n+        host_triple_sanitized = self.build.replace(\"-\", \"_\")\n+        var_data = {\n+            \"CC\": \"cc\", \"CXX\": \"cxx\", \"LD\": \"linker\", \"AR\": \"ar\", \"RANLIB\": \"ranlib\"\n+        }\n+        for var_name, toml_key in var_data.items():\n+            toml_val = self.get_toml(toml_key, build_section)\n+            if toml_val != None:\n+                env[\"{}_{}\".format(var_name, host_triple_sanitized)] = toml_val\n+\n         # preserve existing RUSTFLAGS\n         env.setdefault(\"RUSTFLAGS\", \"\")\n-        build_section = \"target.{}\".format(self.build)\n         target_features = []\n         if self.get_toml(\"crt-static\", build_section) == \"true\":\n             target_features += [\"+crt-static\"]\n         elif self.get_toml(\"crt-static\", build_section) == \"false\":\n             target_features += [\"-crt-static\"]\n         if target_features:\n             env[\"RUSTFLAGS\"] += \" -C target-feature=\" + (\",\".join(target_features))\n-        target_linker = self.get_toml(\"linker\", build_section)\n-        if target_linker is not None:\n-            env[\"RUSTFLAGS\"] += \" -C linker=\" + target_linker\n         env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes\"\n         env[\"RUSTFLAGS\"] += \" -Wsemicolon_in_expressions_from_macros\"\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":"}, {"sha": "b654db6dbe9a3b5a4500d69a9ca72700170f60a6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -1940,25 +1940,26 @@ impl<'a> Builder<'a> {\n                     _ => s.display().to_string(),\n                 }\n             };\n+            let triple_underscored = target.triple.replace(\"-\", \"_\");\n             let cc = ccacheify(&self.cc(target));\n-            cargo.env(format!(\"CC_{}\", target.triple), &cc);\n+            cargo.env(format!(\"CC_{}\", triple_underscored), &cc);\n \n             let cflags = self.cflags(target, GitRepo::Rustc, CLang::C).join(\" \");\n-            cargo.env(format!(\"CFLAGS_{}\", target.triple), &cflags);\n+            cargo.env(format!(\"CFLAGS_{}\", triple_underscored), &cflags);\n \n             if let Some(ar) = self.ar(target) {\n                 let ranlib = format!(\"{} s\", ar.display());\n                 cargo\n-                    .env(format!(\"AR_{}\", target.triple), ar)\n-                    .env(format!(\"RANLIB_{}\", target.triple), ranlib);\n+                    .env(format!(\"AR_{}\", triple_underscored), ar)\n+                    .env(format!(\"RANLIB_{}\", triple_underscored), ranlib);\n             }\n \n             if let Ok(cxx) = self.cxx(target) {\n                 let cxx = ccacheify(&cxx);\n                 let cxxflags = self.cflags(target, GitRepo::Rustc, CLang::Cxx).join(\" \");\n                 cargo\n-                    .env(format!(\"CXX_{}\", target.triple), &cxx)\n-                    .env(format!(\"CXXFLAGS_{}\", target.triple), cxxflags);\n+                    .env(format!(\"CXX_{}\", triple_underscored), &cxx)\n+                    .env(format!(\"CXXFLAGS_{}\", triple_underscored), cxxflags);\n             }\n         }\n "}, {"sha": "fade44ecb158b7314e9322365854d4396a94c144", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -1307,10 +1307,6 @@ impl Build {\n         self.package_vers(&self.version)\n     }\n \n-    fn llvm_link_tools_dynamically(&self, target: TargetSelection) -> bool {\n-        target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")\n-    }\n-\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "d6ee6d489cf04ce87646364ef3b22cbadabb195e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -423,12 +423,7 @@ impl Step for Llvm {\n         // which saves both memory during parallel links and overall disk space\n         // for the tools. We don't do this on every platform as it doesn't work\n         // equally well everywhere.\n-        //\n-        // If we're not linking rustc to a dynamic LLVM, though, then don't link\n-        // tools to it.\n-        let llvm_link_shared =\n-            builder.llvm_link_tools_dynamically(target) && builder.llvm_link_shared();\n-        if llvm_link_shared {\n+        if builder.llvm_link_shared() {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n@@ -553,7 +548,7 @@ impl Step for Llvm {\n         // libLLVM.dylib will be built. However, llvm-config will still look\n         // for a versioned path like libLLVM-14.dylib. Manually create a symbolic\n         // link to make llvm-config happy.\n-        if llvm_link_shared && target.contains(\"apple-darwin\") {\n+        if builder.llvm_link_shared() && target.contains(\"apple-darwin\") {\n             let mut cmd = Command::new(&build_llvm_config);\n             let version = output(cmd.arg(\"--version\"));\n             let major = version.split('.').next().unwrap();"}, {"sha": "5d0c7d2bd9d44c49a9682e79a08ca2cfcc6b56d1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -746,14 +746,18 @@ impl Step for RustAnalyzerProcMacroSrv {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/tools/rust-analyzer\").default_condition(\n-            builder.config.extended\n-                && builder\n-                    .config\n-                    .tools\n-                    .as_ref()\n-                    .map_or(true, |tools| tools.iter().any(|tool| tool == \"rust-analyzer\")),\n-        )\n+\n+        // Allow building `rust-analyzer-proc-macro-srv` both as part of the `rust-analyzer` and as a stand-alone tool.\n+        run.path(\"src/tools/rust-analyzer\")\n+            .path(\"src/tools/rust-analyzer/crates/proc-macro-srv-cli\")\n+            .default_condition(\n+                builder.config.extended\n+                    && builder.config.tools.as_ref().map_or(true, |tools| {\n+                        tools.iter().any(|tool| {\n+                            tool == \"rust-analyzer\" || tool == \"rust-analyzer-proc-macro-srv\"\n+                        })\n+                    }),\n+            )\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -764,7 +768,7 @@ impl Step for RustAnalyzerProcMacroSrv {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n-        builder.ensure(ToolBuild {\n+        let path = builder.ensure(ToolBuild {\n             compiler: self.compiler,\n             target: self.target,\n             tool: \"rust-analyzer-proc-macro-srv\",\n@@ -773,7 +777,15 @@ impl Step for RustAnalyzerProcMacroSrv {\n             extra_features: vec![\"proc-macro-srv/sysroot-abi\".to_owned()],\n             is_optional_tool: false,\n             source_type: SourceType::InTree,\n-        })\n+        })?;\n+\n+        // Copy `rust-analyzer-proc-macro-srv` to `<sysroot>/libexec/`\n+        // so that r-a can use it.\n+        let libexec_path = builder.sysroot(self.compiler).join(\"libexec\");\n+        t!(fs::create_dir_all(&libexec_path));\n+        builder.copy(&path, &libexec_path.join(\"rust-analyzer-proc-macro-srv\"));\n+\n+        Some(path)\n     }\n }\n "}, {"sha": "7826fd514093e255cb789106d0a74095cbbba358", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -286,7 +286,7 @@ jobs:\n \n           - name: x86_64-gnu-llvm-13\n             <<: *job-linux-xl\n-            \n+\n           - name: x86_64-gnu-tools\n             env:\n               CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "ced0ebdbb864a8e82f7c770379fa3d052ea0a6df", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -294,16 +294,15 @@ impl AllTypes {\n \n impl AllTypes {\n     fn print(self, f: &mut Buffer) {\n-        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str, class: &str) {\n+        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str) {\n             if !e.is_empty() {\n                 let mut e: Vec<&ItemEntry> = e.iter().collect();\n                 e.sort();\n                 write!(\n                     f,\n-                    \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"{} docblock\\\">\",\n+                    \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"all-items\\\">\",\n                     title.replace(' ', \"-\"), // IDs cannot contain whitespaces.\n-                    title,\n-                    class\n+                    title\n                 );\n \n                 for s in e.iter() {\n@@ -321,20 +320,20 @@ impl AllTypes {\n         );\n         // Note: print_entries does not escape the title, because we know the current set of titles\n         // doesn't require escaping.\n-        print_entries(f, &self.structs, \"Structs\", \"structs\");\n-        print_entries(f, &self.enums, \"Enums\", \"enums\");\n-        print_entries(f, &self.unions, \"Unions\", \"unions\");\n-        print_entries(f, &self.primitives, \"Primitives\", \"primitives\");\n-        print_entries(f, &self.traits, \"Traits\", \"traits\");\n-        print_entries(f, &self.macros, \"Macros\", \"macros\");\n-        print_entries(f, &self.attributes, \"Attribute Macros\", \"attributes\");\n-        print_entries(f, &self.derives, \"Derive Macros\", \"derives\");\n-        print_entries(f, &self.functions, \"Functions\", \"functions\");\n-        print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\");\n-        print_entries(f, &self.trait_aliases, \"Trait Aliases\", \"trait-aliases\");\n-        print_entries(f, &self.opaque_tys, \"Opaque Types\", \"opaque-types\");\n-        print_entries(f, &self.statics, \"Statics\", \"statics\");\n-        print_entries(f, &self.constants, \"Constants\", \"constants\")\n+        print_entries(f, &self.structs, \"Structs\");\n+        print_entries(f, &self.enums, \"Enums\");\n+        print_entries(f, &self.unions, \"Unions\");\n+        print_entries(f, &self.primitives, \"Primitives\");\n+        print_entries(f, &self.traits, \"Traits\");\n+        print_entries(f, &self.macros, \"Macros\");\n+        print_entries(f, &self.attributes, \"Attribute Macros\");\n+        print_entries(f, &self.derives, \"Derive Macros\");\n+        print_entries(f, &self.functions, \"Functions\");\n+        print_entries(f, &self.typedefs, \"Typedefs\");\n+        print_entries(f, &self.trait_aliases, \"Trait Aliases\");\n+        print_entries(f, &self.opaque_tys, \"Opaque Types\");\n+        print_entries(f, &self.statics, \"Statics\");\n+        print_entries(f, &self.constants, \"Constants\");\n     }\n }\n "}, {"sha": "1c88528aa20a9bae31fbd2759648003d11bd9b70", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -519,12 +519,12 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n             let content = format!(\n                 \"<h1 class=\\\"fqn\\\">\\\n                      <span class=\\\"in-band\\\">List of all crates</span>\\\n-                </h1><ul class=\\\"crate mod\\\">{}</ul>\",\n+                </h1><ul class=\\\"all-items\\\">{}</ul>\",\n                 krates\n                     .iter()\n                     .map(|s| {\n                         format!(\n-                            \"<li><a class=\\\"crate mod\\\" href=\\\"{}index.html\\\">{}</a></li>\",\n+                            \"<li><a href=\\\"{}index.html\\\">{}</a></li>\",\n                             ensure_trailing_slash(s),\n                             s\n                         )"}, {"sha": "84ed056d0e1c89df530725a1cc3d36af7f42ffac", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -207,7 +207,6 @@ a.source,\n .out-of-band,\n span.since,\n details.rustdoc-toggle > summary::before,\n-.content ul.crate a.crate,\n a.srclink,\n #help-button > button,\n details.rustdoc-toggle.top-doc > summary,\n@@ -218,7 +217,7 @@ details.rustdoc-toggle.non-exhaustive > summary::before,\n .more-examples-toggle summary, .more-examples-toggle .hide-more,\n .example-links a,\n /* This selector is for the items listed in the \"all items\" page. */\n-#main-content > ul.docblock > li > a {\n+ul.all-items {\n \tfont-family: \"Fira Sans\", Arial, NanumBarunGothic, sans-serif;\n }\n \n@@ -241,6 +240,49 @@ pre.rust a,\n \tcolor: var(--main-color);\n }\n \n+.content span.enum, .content a.enum,\n+.content span.struct, .content a.struct,\n+.content span.union, .content a.union,\n+.content span.primitive, .content a.primitive,\n+.content span.type, .content a.type,\n+.content span.foreigntype, .content a.foreigntype {\n+\tcolor: var(--type-link-color);\n+}\n+\n+.content span.trait, .content a.trait,\n+.content span.traitalias, .content a.traitalias {\n+\tcolor: var(--trait-link-color);\n+}\n+\n+.content span.associatedtype, .content a.associatedtype,\n+.content span.constant, .content a.constant,\n+.content span.static, .content a.static {\n+\tcolor: var(--assoc-item-link-color);\n+}\n+\n+.content span.fn, .content a.fn,\n+.content .fnname {\n+\tcolor: var(--function-link-color);\n+}\n+\n+.content span.attr, .content a.attr,\n+.content span.derive, .content a.derive,\n+.content span.macro, .content a.macro {\n+\tcolor: var(--macro-link-color);\n+}\n+\n+.content span.mod, .content a.mod, .block a.current.mod {\n+\tcolor: var(--mod-link-color);\n+}\n+\n+.content span.keyword, .content a.keyword {\n+\tcolor: var(--keyword-link-color);\n+}\n+\n+a {\n+\tcolor: var(--link-color);\n+}\n+\n ol, ul {\n \tpadding-left: 24px;\n }\n@@ -786,6 +828,7 @@ h2.small-section-header > .anchor {\n \tcontent: '\u00a7';\n }\n \n+.all-items a:hover,\n .docblock a:not(.srclink):not(.test-arrow):not(.scrape-help):hover,\n .docblock-short a:not(.srclink):not(.test-arrow):not(.scrape-help):hover, .item-info a {\n \ttext-decoration: underline;\n@@ -1515,10 +1558,7 @@ kbd {\n \tcursor: default;\n }\n \n-#main-content > ul {\n-\tpadding-left: 10px;\n-}\n-#main-content > ul > li {\n+ul.all-items > li {\n \tlist-style: none;\n }\n "}, {"sha": "e7a898e9fa62c9c6bf6634783a245603a46db5d9", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -27,6 +27,14 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--codeblock-error-color: rgba(255, 0, 0, .5);\n \t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n \t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n+\t--type-link-color: #ffa0a5;\n+\t--trait-link-color: #39afd7;\n+\t--assoc-item-link-color: #39afd7;\n+\t--function-link-color: #fdd687;\n+\t--macro-link-color: #a37acc;\n+\t--keyword-link-color: #39afd7;\n+\t--mod-link-color: #39afd7;\n+\t--link-color: #39afd7;\n }\n \n .slider {\n@@ -111,44 +119,12 @@ pre, .rustdoc.source .example-wrap {\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.foreigntype, .content a.foreigntype { color: #ffa0a5; }\n-.content span.union, .content a.union { color: #ffa0a5; }\n-.content span.constant, .content a.constant,\n-.content span.static, .content a.static { color: #39AFD7; }\n-.content span.primitive, .content a.primitive { color: #ffa0a5; }\n-.content span.traitalias, .content a.traitalias { color: #39AFD7; }\n-.content span.keyword, .content a.keyword { color: #39AFD7; }\n-.content span.mod, .content a.mod {\n-\tcolor: #39AFD7;\n-}\n-.content span.struct, .content a.struct {\n-\tcolor: #ffa0a5;\n-}\n-.content span.enum, .content a.enum {\n-\tcolor: #ffa0a5;\n-}\n-.content span.trait, .content a.trait {\n-\tcolor: #39AFD7;\n-}\n-.content span.type, .content a.type { color: #39AFD7; }\n-.content span.associatedtype, .content a.associatedtype { color: #39AFD7; }\n-.content span.fn, .content a.fn,\n-.content .fnname { color: #fdd687; }\n-.content span.attr, .content a.attr, .content span.derive,\n-.content a.derive, .content span.macro, .content a.macro {\n-\tcolor: #a37acc;\n-}\n-\n .sidebar a { color: #53b1db; }\n .sidebar a.current.type { color: #53b1db; }\n \n pre.rust .comment { color: #788797; }\n pre.rust .doccomment { color: #a1ac88; }\n \n-a {\n-\tcolor: #39AFD7;\n-}\n-\n .sidebar h2 a,\n .sidebar h3 a {\n \tcolor: white;"}, {"sha": "07a1ed8b7db745408abe5e4a058f19a561f003ef", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -22,6 +22,14 @@\n \t--codeblock-error-color: rgba(255, 0, 0, .5);\n \t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n \t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n+\t--type-link-color: #2dbfb8;\n+\t--trait-link-color: #b78cf2;\n+\t--assoc-item-link-color: #d2991d;\n+\t--function-link-color: #2bab63;\n+\t--macro-link-color: #09bd00;\n+\t--keyword-link-color: #d2991d;\n+\t--mod-link-color:  #d2991d;\n+\t--link-color: #d2991d;\n }\n \n .slider {\n@@ -83,25 +91,6 @@ a.result-keyword:focus { background-color: #884719; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum { color: #2dbfb8; }\n-.content span.struct, .content a.struct { color: #2dbfb8; }\n-.content span.type, .content a.type { color: #2dbfb8; }\n-.content span.associatedtype, .content a.associatedtype { color: #D2991D; }\n-.content span.foreigntype, .content a.foreigntype { color: #2dbfb8; }\n-.content span.attr, .content a.attr,\n-.content span.derive, .content a.derive,\n-.content span.macro, .content a.macro { color: #09bd00; }\n-.content span.union, .content a.union { color: #2dbfb8; }\n-.content span.constant, .content a.constant,\n-.content span.static, .content a.static { color: #D2991D; }\n-.content span.primitive, .content a.primitive { color: #2dbfb8; }\n-.content span.mod, .content a.mod { color: #D2991D; }\n-.content span.trait, .content a.trait { color: #b78cf2; }\n-.content span.traitalias, .content a.traitalias { color: #b78cf2; }\n-.content span.fn, .content a.fn,\n-.content .fnname { color: #2BAB63; }\n-.content span.keyword, .content a.keyword { color: #D2991D; }\n-\n .sidebar a { color: #fdbf35; }\n .sidebar a.current.enum { color: #12ece2; }\n .sidebar a.current.struct { color: #12ece2; }\n@@ -122,10 +111,6 @@ a.result-keyword:focus { background-color: #884719; }\n pre.rust .comment { color: #8d8d8b; }\n pre.rust .doccomment { color: #8ca375; }\n \n-a {\n-\tcolor: #D2991D;\n-}\n-\n body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }"}, {"sha": "64335f62928011c347dd0ac89903e3fc975b6fb8", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -22,6 +22,14 @@\n \t--codeblock-error-color: rgba(255, 0, 0, .5);\n \t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n \t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n+\t--type-link-color: #ad378a;\n+\t--trait-link-color: #6e4fc9;\n+\t--assoc-item-link-color: #3873ad;\n+\t--function-link-color: #ad7c37;\n+\t--macro-link-color: #068000;\n+\t--keyword-link-color: #3873ad;\n+\t--mod-link-color: #3873ad;\n+\t--link-color: #3873ad;\n }\n \n .slider {\n@@ -82,25 +90,6 @@ a.result-keyword:focus { background-color: #afc6e4; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum { color: #AD378A; }\n-.content span.struct, .content a.struct { color: #AD378A; }\n-.content span.type, .content a.type { color:  #AD378A; }\n-.content span.associatedtype, .content a.associatedtype { color: #3873AD; }\n-.content span.foreigntype, .content a.foreigntype { color: #3873AD; }\n-.content span.attr, .content a.attr,\n-.content span.derive, .content a.derive,\n-.content span.macro, .content a.macro { color: #068000; }\n-.content span.union, .content a.union { color: #AD378A; }\n-.content span.constant, .content a.constant,\n-.content span.static, .content a.static { color: #3873AD; }\n-.content span.primitive, .content a.primitive { color: #AD378A; }\n-.content span.mod, .content a.mod { color: #3873AD; }\n-.content span.trait, .content a.trait { color: #6E4FC9; }\n-.content span.traitalias, .content a.traitalias { color: #5137AD; }\n-.content span.fn, .content a.fn,\n-.content .fnname { color: #AD7C37; }\n-.content span.keyword, .content a.keyword { color: #3873AD; }\n-\n .sidebar a { color: #356da4; }\n .sidebar a.current.enum { color: #a63283; }\n .sidebar a.current.struct { color: #a63283; }\n@@ -118,10 +107,6 @@ a.result-keyword:focus { background-color: #afc6e4; }\n .sidebar a.current.fn { color: #a67736; }\n .sidebar a.current.keyword { color: #356da4; }\n \n-a {\n-\tcolor: #3873AD;\n-}\n-\n body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }"}, {"sha": "69c5b4a6733a8e269ad463bb46d9ca2c992a10c1", "filename": "src/test/rustdoc-gui/links-color.goml", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flinks-color.goml?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -0,0 +1,85 @@\n+// This test checks links colors.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+\n+// This is needed so that the text color is computed.\n+show-text: true\n+\n+// Ayu theme\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\".item-table .mod\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n+assert-css: (\".item-table .macro\", {\"color\": \"rgb(163, 122, 204)\"}, ALL)\n+assert-css: (\".item-table .struct\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n+assert-css: (\".item-table .enum\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n+assert-css: (\".item-table .trait\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n+assert-css: (\".item-table .fn\", {\"color\": \"rgb(253, 214, 135)\"}, ALL)\n+assert-css: (\".item-table .type\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n+assert-css: (\".item-table .union\", {\"color\": \"rgb(255, 160, 165)\"}, ALL)\n+assert-css: (\".item-table .keyword\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n+\n+assert-css: (\n+    \".sidebar-elems a:not(.current)\",\n+    {\"color\": \"rgb(83, 177, 219)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".sidebar-elems a.current\",\n+    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"500\"},\n+    ALL,\n+)\n+\n+\n+// Dark theme\n+local-storage: {\"rustdoc-theme\": \"dark\"}\n+reload:\n+\n+assert-css: (\".item-table .mod\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n+assert-css: (\".item-table .macro\", {\"color\": \"rgb(9, 189, 0)\"}, ALL)\n+assert-css: (\".item-table .struct\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n+assert-css: (\".item-table .enum\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n+assert-css: (\".item-table .trait\", {\"color\": \"rgb(183, 140, 242)\"}, ALL)\n+assert-css: (\".item-table .fn\", {\"color\": \"rgb(43, 171, 99)\"}, ALL)\n+assert-css: (\".item-table .type\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n+assert-css: (\".item-table .union\", {\"color\": \"rgb(45, 191, 184)\"}, ALL)\n+assert-css: (\".item-table .keyword\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n+\n+assert-css: (\n+    \".sidebar-elems a:not(.current)\",\n+    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".sidebar-elems a.current\",\n+    {\"color\": \"rgb(253, 191, 53)\", \"background-color\": \"rgb(68, 68, 68)\", \"font-weight\": \"500\"},\n+    ALL,\n+)\n+\n+\n+// Light theme\n+local-storage: {\"rustdoc-theme\": \"light\"}\n+reload:\n+\n+assert-css: (\".item-table .mod\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)\n+assert-css: (\".item-table .macro\", {\"color\": \"rgb(6, 128, 0)\"}, ALL)\n+assert-css: (\".item-table .struct\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n+assert-css: (\".item-table .enum\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n+assert-css: (\".item-table .trait\", {\"color\": \"rgb(110, 79, 201)\"}, ALL)\n+assert-css: (\".item-table .fn\", {\"color\": \"rgb(173, 124, 55)\"}, ALL)\n+assert-css: (\".item-table .type\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n+assert-css: (\".item-table .union\", {\"color\": \"rgb(173, 55, 138)\"}, ALL)\n+assert-css: (\".item-table .keyword\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)\n+\n+assert-css: (\n+    \".sidebar-elems a:not(.current)\",\n+    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgba(0, 0, 0, 0)\", \"font-weight\": \"400\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".sidebar-elems a.current\",\n+    {\"color\": \"rgb(53, 109, 164)\", \"background-color\": \"rgb(255, 255, 255)\", \"font-weight\": \"500\"},\n+    ALL,\n+)"}, {"sha": "003542d3855a44cdd968ef20b7f41f176382312f", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -70,3 +70,13 @@ pub struct NestedGenericsWithPunct;\n //~^ ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct NestedGenericsWithPunct2;\n+\n+/// This [`Vec<i32>`] thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct IntraDocLink;\n+\n+/// This [`Vec::<i32>`] thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct IntraDocLinkTurbofish;"}, {"sha": "4254a660b19ec97515e3a7ecc78caa4c56b19d52", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -70,3 +70,13 @@ pub struct NestedGenericsWithPunct;\n //~^ ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n pub struct NestedGenericsWithPunct2;\n+\n+/// This [Vec<i32>] thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct IntraDocLink;\n+\n+/// This [Vec::<i32>] thing!\n+//~^ERROR unclosed HTML tag `i32`\n+//~|HELP try marking as source\n+pub struct IntraDocLinkTurbofish;"}, {"sha": "481278bdaf9a23cf280cd89fe2afb86917a4c25b", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -157,5 +157,27 @@ help: try marking as source code\n LL | /// Generics with punct `Vec<Vec<i32>>`!\n    |                         +             +\n \n-error: aborting due to 14 previous errors\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:74:14\n+   |\n+LL | /// This [Vec<i32>] thing!\n+   |              ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [`Vec<i32>`] thing!\n+   |           +        +\n+\n+error: unclosed HTML tag `i32`\n+  --> $DIR/html-as-generics.rs:79:16\n+   |\n+LL | /// This [Vec::<i32>] thing!\n+   |                ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [`Vec::<i32>`] thing!\n+   |           +          +\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "5677019fbb88edaaf1ba9f126b2655f353136e1d", "filename": "src/test/rustdoc/index-page.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc%2Findex-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Frustdoc%2Findex-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Findex-page.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -6,6 +6,6 @@\n \n // @has foo/../index.html\n // @has - '//span[@class=\"in-band\"]' 'List of all crates'\n-// @has - '//ul[@class=\"crate mod\"]//a[@href=\"foo/index.html\"]' 'foo'\n-// @has - '//ul[@class=\"crate mod\"]//a[@href=\"all_item_types/index.html\"]' 'all_item_types'\n+// @has - '//ul[@class=\"all-items\"]//a[@href=\"foo/index.html\"]' 'foo'\n+// @has - '//ul[@class=\"all-items\"]//a[@href=\"all_item_types/index.html\"]' 'all_item_types'\n pub struct Foo;"}, {"sha": "e600c1c08e5cfbb702eaef675c60dd171ed0a5ea", "filename": "src/test/ui/query-system/query_depth.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.rs?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -0,0 +1,31 @@\n+// build-fail\n+\n+#![recursion_limit = \"64\"]\n+type Byte = Option<Option<Option<Option< Option<Option<Option<Option<\n+    Option<Option<Option<Option< Option<Option<Option<Option<\n+        Option<Option<Option<Option< Option<Option<Option<Option<\n+            Option<Option<Option<Option< Option<Option<Option<Option<\n+                Option<Option<Option<Option< Option<Option<Option<Option<\n+                    Option<Option<Option<Option< Option<Option<Option<Option<\n+                        Option<Option<Option<Option< Option<Option<Option<Option<\n+                            Option<Option<Option<Option< Option<Option<Option<Option<\n+                                Option<Option<Option<Option< Option<Option<Option<Option<\n+                                    Option<Option<Option<Option< Option<Option<Option<Option<\n+                                        Option<Option<Option<Option< Option<Option<Option<Option<\n+                                            Box<String>\n+                                        >>>> >>>>\n+                                    >>>> >>>>\n+                                >>>> >>>>\n+                            >>>> >>>>\n+                        >>>> >>>>\n+                    >>>> >>>>\n+                >>>> >>>>\n+            >>>> >>>>\n+        >>>> >>>>\n+    >>>> >>>>\n+>>>> >>>>;\n+\n+fn main() {\n+//~^ ERROR: queries overflow the depth limit!\n+    println!(\"{}\", std::mem::size_of::<Byte>());\n+}"}, {"sha": "43a18b4e07455cb10b776eab3a3706f8dd366fcd", "filename": "src/test/ui/query-system/query_depth.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98ad6a5519651af36e246c0335c964dd52c554ba/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-system%2Fquery_depth.stderr?ref=98ad6a5519651af36e246c0335c964dd52c554ba", "patch": "@@ -0,0 +1,11 @@\n+error: queries overflow the depth limit!\n+  --> $DIR/query_depth.rs:28:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"128\"]` attribute to your crate (`query_depth`)\n+   = note: query depth increased by 66 when computing layout of `core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<core::option::Option<alloc::boxed::Box<alloc::string::String>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+\n+error: aborting due to previous error\n+"}]}