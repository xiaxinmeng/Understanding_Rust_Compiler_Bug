{"sha": "976f8d59dddac2ccddbe940953ee6247454e6736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NmY4ZDU5ZGRkYWMyY2NkZGJlOTQwOTUzZWU2MjQ3NDU0ZTY3MzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-31T13:59:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T13:59:52Z"}, "message": "Rollup merge of #70613 - matthiaskrgr:cl5ppy_squashed, r=Centril\n\nmore clippy fixes\n\n* use is_empty() instead of len comparison (clippy::len_zero)\n* use if let instead of while let loop that never loops (clippy::never_loop)\n* remove redundant returns (clippy::needless_return)\n* remove redundant closures (clippy::redundant_closure)\n* use if let instead of match and wildcard pattern (clippy::single_match)\n* don't repeat field names redundantly (clippy::redundant_field_names)\n\nr? @Centril", "tree": {"sha": "16273bf92f9580d0c1a3fbb99b10d32c234902b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16273bf92f9580d0c1a3fbb99b10d32c234902b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976f8d59dddac2ccddbe940953ee6247454e6736", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg0zYCRBK7hj4Ov3rIwAAdHIIAERmB0Sp+MuLY/xv3h1Trr5J\nfJZB5eK/m9q4tFNCKLI6Gj2Ta8y8IP9NvspwQ9nuXYuD2QaVsNaQbk0yVjXGKYAh\no0gqAkN30M3c9K/Tiww19Z2KaCsQTpTPUCmgF/Dtorozviesr+ZnGFo34Yh7HP7f\n2H07Ldm/GGs+OCo34FeDVeE59vqdygY/i1lvlV+YwRizTKh7SHPhdzT/ROaokHlW\nJxYFiqhe6/m4pxDAXQ+n2iNkNrxplQJVlVdczvTHG0ZAuXUy40As8pqn7ZGiaaib\nBUjBVsh0w9jsU957qrCLD/9rbeJBIyVR6E6rQD/yC9DlRTrdugF04TK8ayp8B1g=\n=WwFs\n-----END PGP SIGNATURE-----\n", "payload": "tree 16273bf92f9580d0c1a3fbb99b10d32c234902b7\nparent 4aeeb81db5bc4770e06dbe6f113f92588ccbfccc\nparent 08f2904dfaf5e75fbcc1305c8b0aad5fae71a4ff\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585663192 +0200\ncommitter GitHub <noreply@github.com> 1585663192 +0200\n\nRollup merge of #70613 - matthiaskrgr:cl5ppy_squashed, r=Centril\n\nmore clippy fixes\n\n* use is_empty() instead of len comparison (clippy::len_zero)\n* use if let instead of while let loop that never loops (clippy::never_loop)\n* remove redundant returns (clippy::needless_return)\n* remove redundant closures (clippy::redundant_closure)\n* use if let instead of match and wildcard pattern (clippy::single_match)\n* don't repeat field names redundantly (clippy::redundant_field_names)\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976f8d59dddac2ccddbe940953ee6247454e6736", "html_url": "https://github.com/rust-lang/rust/commit/976f8d59dddac2ccddbe940953ee6247454e6736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976f8d59dddac2ccddbe940953ee6247454e6736/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc", "html_url": "https://github.com/rust-lang/rust/commit/4aeeb81db5bc4770e06dbe6f113f92588ccbfccc"}, {"sha": "08f2904dfaf5e75fbcc1305c8b0aad5fae71a4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f2904dfaf5e75fbcc1305c8b0aad5fae71a4ff", "html_url": "https://github.com/rust-lang/rust/commit/08f2904dfaf5e75fbcc1305c8b0aad5fae71a4ff"}], "stats": {"total": 226, "additions": 102, "deletions": 124}, "files": [{"sha": "e3fc4fa52fb61225b8718cbb20a60e0977f64866", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -711,7 +711,7 @@ impl<'tcx> QueryContext<'tcx> {\n     }\n \n     pub fn print_stats(&mut self) {\n-        self.enter(|tcx| ty::query::print_stats(tcx))\n+        self.enter(ty::query::print_stats)\n     }\n }\n "}, {"sha": "8e7abcd09c2330602c8e0e1df5ec7697d604804b", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -30,7 +30,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 trace!(\"SwitchInt({:?})\", *discr);\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n-                assert!(targets.len() > 0);\n+                assert!(!targets.is_empty());\n                 let mut target_block = targets[targets.len() - 1];\n \n                 for (index, &const_int) in values.iter().enumerate() {"}, {"sha": "24b7be0c9b306de9f8b4fd05fff44a1ca4bd36e5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -591,7 +591,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 Some(Data::RefData(Ref {\n                     kind: RefKind::Function,\n                     span,\n-                    ref_id: def_id.or(decl_id).map(id_from_def_id).unwrap_or_else(|| null_id()),\n+                    ref_id: def_id.or(decl_id).map(id_from_def_id).unwrap_or_else(null_id),\n                 }))\n             }\n             ast::ExprKind::Path(_, ref path) => {"}, {"sha": "54481bd124df5fc7ba43f165629e5c2f0e982f25", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -1650,7 +1650,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     check_thread_count(&debugging_opts, error_format);\n \n-    let incremental = cg.incremental.as_ref().map(|m| PathBuf::from(m));\n+    let incremental = cg.incremental.as_ref().map(PathBuf::from);\n \n     if debugging_opts.profile && incremental.is_some() {\n         early_error("}, {"sha": "b7a34f9740ac41248e044f49fcc1f0c075b61fcd", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Ok(Target {\n-        llvm_target: llvm_target,\n+        llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),"}, {"sha": "31011e847495838d3a1083b6449c88942052b0f9", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n     let llvm_target = super::apple_base::macos_llvm_target(&arch);\n \n     Ok(Target {\n-        llvm_target: llvm_target,\n+        llvm_target,\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),"}, {"sha": "9f327b0b743d8f78c277613c8d8e241fc69e0c7e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -497,11 +497,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // of the type.\n                     // Therefore, we make sure that we never add a ?Sized\n                     // bound for projections\n-                    match &ty {\n-                        &Type::QPath { .. } => {\n-                            has_sized.insert(ty.clone());\n-                        }\n-                        _ => {}\n+                    if let Type::QPath { .. } = ty {\n+                        has_sized.insert(ty.clone());\n                     }\n \n                     if bounds.is_empty() {"}, {"sha": "f8e44bc5a1ab7421bfeed0bf48f7fea37c898863", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -521,11 +521,8 @@ impl<'tcx> Clean<Option<WherePredicate>>\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(ref a, ref b) = *self;\n \n-        match (a, b) {\n-            (ty::ReEmpty(_), ty::ReEmpty(_)) => {\n-                return None;\n-            }\n-            _ => {}\n+        if let (ty::ReEmpty(_), ty::ReEmpty(_)) = (a, b) {\n+            return None;\n         }\n \n         Some(WherePredicate::RegionPredicate {\n@@ -539,9 +536,8 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty:\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(ref ty, ref lt) = *self;\n \n-        match lt {\n-            ty::ReEmpty(_) => return None,\n-            _ => {}\n+        if let ty::ReEmpty(_) = lt {\n+            return None;\n         }\n \n         Some(WherePredicate::BoundPredicate {\n@@ -2239,15 +2235,12 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n         } else {\n             let name = self.name;\n             if !please_inline {\n-                match path.res {\n-                    Res::Def(DefKind::Mod, did) => {\n-                        if !did.is_local() && did.index == CRATE_DEF_INDEX {\n-                            // if we're `pub use`ing an extern crate root, don't inline it unless we\n-                            // were specifically asked for it\n-                            denied = true;\n-                        }\n+                if let Res::Def(DefKind::Mod, did) = path.res {\n+                    if !did.is_local() && did.index == CRATE_DEF_INDEX {\n+                        // if we're `pub use`ing an extern crate root, don't inline it unless we\n+                        // were specifically asked for it\n+                        denied = true;\n                     }\n-                    _ => {}\n                 }\n             }\n             if !denied {\n@@ -2426,10 +2419,9 @@ impl From<GenericBound> for SimpleBound {\n             GenericBound::TraitBound(t, mod_) => match t.trait_ {\n                 Type::ResolvedPath { path, param_names, .. } => SimpleBound::TraitBound(\n                     path.segments,\n-                    param_names.map_or_else(\n-                        || Vec::new(),\n-                        |v| v.iter().map(|p| SimpleBound::from(p.clone())).collect(),\n-                    ),\n+                    param_names.map_or_else(Vec::new, |v| {\n+                        v.iter().map(|p| SimpleBound::from(p.clone())).collect()\n+                    }),\n                     t.generic_params,\n                     mod_,\n                 ),"}, {"sha": "9e96015d306e4e747cedfef8aecc4de4b880738d", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -121,7 +121,7 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(|lt| GenericArg::Lifetime(lt)),\n+            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(GenericArg::Lifetime),\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None\n@@ -198,27 +198,24 @@ pub fn get_real_types(\n         }) {\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n             for bound in bounds.iter() {\n-                match *bound {\n-                    GenericBound::TraitBound(ref poly_trait, _) => {\n-                        for x in poly_trait.generic_params.iter() {\n-                            if !x.is_type() {\n-                                continue;\n-                            }\n-                            if let Some(ty) = x.get_type() {\n-                                let adds = get_real_types(generics, &ty, cx, recurse + 1);\n-                                if !adds.is_empty() {\n-                                    res.extend(adds);\n-                                } else if !ty.is_full_generic() {\n-                                    if let Some(did) = ty.def_id() {\n-                                        if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                                            res.insert((ty, kind));\n-                                        }\n+                if let GenericBound::TraitBound(ref poly_trait, _) = *bound {\n+                    for x in poly_trait.generic_params.iter() {\n+                        if !x.is_type() {\n+                            continue;\n+                        }\n+                        if let Some(ty) = x.get_type() {\n+                            let adds = get_real_types(generics, &ty, cx, recurse + 1);\n+                            if !adds.is_empty() {\n+                                res.extend(adds);\n+                            } else if !ty.is_full_generic() {\n+                                if let Some(did) = ty.def_id() {\n+                                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n+                                        res.insert((ty, kind));\n                                     }\n                                 }\n                             }\n                         }\n                     }\n-                    _ => {}\n                 }\n             }\n         }"}, {"sha": "9fe3e35d197fa132a49210c8153ef15072b093bf", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 59, "deletions": 64, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -448,7 +448,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n         if !self.started {\n             self.started = true;\n         }\n-        while let Some(event) = self.inner.next() {\n+        if let Some(event) = self.inner.next() {\n             let mut is_start = true;\n             let is_allowed_tag = match event {\n                 Event::Start(Tag::CodeBlock(_)) | Event::End(Tag::CodeBlock(_)) => {\n@@ -944,75 +944,70 @@ crate fn rust_code_blocks(md: &str) -> Vec<RustCodeBlock> {\n     let mut p = Parser::new_ext(md, opts()).into_offset_iter();\n \n     while let Some((event, offset)) = p.next() {\n-        match event {\n-            Event::Start(Tag::CodeBlock(syntax)) => {\n-                let (syntax, code_start, code_end, range, is_fenced) = match syntax {\n-                    CodeBlockKind::Fenced(syntax) => {\n-                        let syntax = syntax.as_ref();\n-                        let lang_string = if syntax.is_empty() {\n-                            LangString::all_false()\n-                        } else {\n-                            LangString::parse(&*syntax, ErrorCodes::Yes, false)\n-                        };\n-                        if !lang_string.rust {\n+        if let Event::Start(Tag::CodeBlock(syntax)) = event {\n+            let (syntax, code_start, code_end, range, is_fenced) = match syntax {\n+                CodeBlockKind::Fenced(syntax) => {\n+                    let syntax = syntax.as_ref();\n+                    let lang_string = if syntax.is_empty() {\n+                        LangString::all_false()\n+                    } else {\n+                        LangString::parse(&*syntax, ErrorCodes::Yes, false)\n+                    };\n+                    if !lang_string.rust {\n+                        continue;\n+                    }\n+                    let syntax = if syntax.is_empty() { None } else { Some(syntax.to_owned()) };\n+                    let (code_start, mut code_end) = match p.next() {\n+                        Some((Event::Text(_), offset)) => (offset.start, offset.end),\n+                        Some((_, sub_offset)) => {\n+                            let code = Range { start: sub_offset.start, end: sub_offset.start };\n+                            code_blocks.push(RustCodeBlock {\n+                                is_fenced: true,\n+                                range: offset,\n+                                code,\n+                                syntax,\n+                            });\n                             continue;\n                         }\n-                        let syntax = if syntax.is_empty() { None } else { Some(syntax.to_owned()) };\n-                        let (code_start, mut code_end) = match p.next() {\n-                            Some((Event::Text(_), offset)) => (offset.start, offset.end),\n-                            Some((_, sub_offset)) => {\n-                                let code = Range { start: sub_offset.start, end: sub_offset.start };\n-                                code_blocks.push(RustCodeBlock {\n-                                    is_fenced: true,\n-                                    range: offset,\n-                                    code,\n-                                    syntax,\n-                                });\n-                                continue;\n-                            }\n-                            None => {\n-                                let code = Range { start: offset.end, end: offset.end };\n-                                code_blocks.push(RustCodeBlock {\n-                                    is_fenced: true,\n-                                    range: offset,\n-                                    code,\n-                                    syntax,\n-                                });\n-                                continue;\n-                            }\n-                        };\n-                        while let Some((Event::Text(_), offset)) = p.next() {\n-                            code_end = offset.end;\n+                        None => {\n+                            let code = Range { start: offset.end, end: offset.end };\n+                            code_blocks.push(RustCodeBlock {\n+                                is_fenced: true,\n+                                range: offset,\n+                                code,\n+                                syntax,\n+                            });\n+                            continue;\n                         }\n-                        (syntax, code_start, code_end, offset, true)\n+                    };\n+                    while let Some((Event::Text(_), offset)) = p.next() {\n+                        code_end = offset.end;\n                     }\n-                    CodeBlockKind::Indented => {\n-                        // The ending of the offset goes too far sometime so we reduce it by one in\n-                        // these cases.\n-                        if offset.end > offset.start\n-                            && md.get(offset.end..=offset.end) == Some(&\"\\n\")\n-                        {\n-                            (\n-                                None,\n-                                offset.start,\n-                                offset.end,\n-                                Range { start: offset.start, end: offset.end - 1 },\n-                                false,\n-                            )\n-                        } else {\n-                            (None, offset.start, offset.end, offset, false)\n-                        }\n+                    (syntax, code_start, code_end, offset, true)\n+                }\n+                CodeBlockKind::Indented => {\n+                    // The ending of the offset goes too far sometime so we reduce it by one in\n+                    // these cases.\n+                    if offset.end > offset.start && md.get(offset.end..=offset.end) == Some(&\"\\n\") {\n+                        (\n+                            None,\n+                            offset.start,\n+                            offset.end,\n+                            Range { start: offset.start, end: offset.end - 1 },\n+                            false,\n+                        )\n+                    } else {\n+                        (None, offset.start, offset.end, offset, false)\n                     }\n-                };\n+                }\n+            };\n \n-                code_blocks.push(RustCodeBlock {\n-                    is_fenced,\n-                    range,\n-                    code: Range { start: code_start, end: code_end },\n-                    syntax,\n-                });\n-            }\n-            _ => (),\n+            code_blocks.push(RustCodeBlock {\n+                is_fenced,\n+                range,\n+                code: Range { start: code_start, end: code_end },\n+                syntax,\n+            });\n         }\n     }\n "}, {"sha": "f51f47a8d3387702a9b1292edab2a687663e027e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -782,7 +782,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                         .split('\"')\n                         .next()\n                         .map(|s| s.to_owned())\n-                        .unwrap_or_else(|| String::new()),\n+                        .unwrap_or_else(String::new),\n                 );\n             }\n         }\n@@ -2158,7 +2158,7 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).to_string(),\n                     class = myitem.type_(),\n                     add = add,\n-                    stab = stab.unwrap_or_else(|| String::new()),\n+                    stab = stab.unwrap_or_else(String::new),\n                     unsafety_flag = unsafety_flag,\n                     href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n                     title = [full_path(cx, myitem), myitem.type_().to_string()]\n@@ -4593,12 +4593,9 @@ fn collect_paths_for_type(first_ty: clean::Type) -> Vec<String> {\n                 let get_extern = || cache.external_paths.get(&did).map(|s| s.0.clone());\n                 let fqp = cache.exact_paths.get(&did).cloned().or_else(get_extern);\n \n-                match fqp {\n-                    Some(path) => {\n-                        out.push(path.join(\"::\"));\n-                    }\n-                    _ => {}\n-                };\n+                if let Some(path) = fqp {\n+                    out.push(path.join(\"::\"));\n+                }\n             }\n             clean::Type::Tuple(tys) => {\n                 work.extend(tys.into_iter());"}, {"sha": "d9f6f7b466a1f4e36f7ad96e816b33e0b12f3718", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -590,7 +590,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     for item in search_index {\n         item.parent_idx = item.parent.and_then(|defid| {\n             if defid_to_pathid.contains_key(&defid) {\n-                defid_to_pathid.get(&defid).map(|x| *x)\n+                defid_to_pathid.get(&defid).copied()\n             } else {\n                 let pathid = lastpathid;\n                 defid_to_pathid.insert(defid, pathid);"}, {"sha": "a064c552c84f5e6a6203ecf9f29cca38c5fbd814", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -496,7 +496,7 @@ pub fn stdout() -> Stdout {\n         unsafe {\n             let ret = Arc::new(ReentrantMutex::new(RefCell::new(LineWriter::new(stdout))));\n             ret.init();\n-            return ret;\n+            ret\n         }\n     }\n }\n@@ -664,7 +664,7 @@ pub fn stderr() -> Stderr {\n             *INSTANCE.lock().borrow_mut() = Maybe::Real(stderr);\n         }\n     });\n-    return Stderr { inner: &INSTANCE };\n+    Stderr { inner: &INSTANCE }\n }\n \n impl Stderr {"}, {"sha": "f389c60615f244e28fa34a3694e6f567adae9433", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976f8d59dddac2ccddbe940953ee6247454e6736/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=976f8d59dddac2ccddbe940953ee6247454e6736", "patch": "@@ -72,7 +72,7 @@ impl Command {\n             }\n         };\n \n-        let mut p = Process { pid: pid, status: None };\n+        let mut p = Process { pid, status: None };\n         drop(output);\n         let mut bytes = [0; 8];\n "}]}