{"sha": "910a32c7c777296be0992bf0d6f2d66261c407d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGEzMmM3Yzc3NzI5NmJlMDk5MmJmMGQ2ZjJkNjYyNjFjNDA3ZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T07:06:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T21:55:50Z"}, "message": "core: Add option::unwrap\n\nThis function uses some unsafe code to move the value out of an option.", "tree": {"sha": "8573808c7f052b6b1a417caddee275c71f3f111e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8573808c7f052b6b1a417caddee275c71f3f111e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910a32c7c777296be0992bf0d6f2d66261c407d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910a32c7c777296be0992bf0d6f2d66261c407d6", "html_url": "https://github.com/rust-lang/rust/commit/910a32c7c777296be0992bf0d6f2d66261c407d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910a32c7c777296be0992bf0d6f2d66261c407d6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d20ed7bf97e533e0cc5d7be2c3ec5d5dfd30e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d20ed7bf97e533e0cc5d7be2c3ec5d5dfd30e98", "html_url": "https://github.com/rust-lang/rust/commit/9d20ed7bf97e533e0cc5d7be2c3ec5d5dfd30e98"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "d9ddb2fe2b11558be4fe6e399c423ccf4b2679cf", "filename": "src/libcore/option.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/910a32c7c777296be0992bf0d6f2d66261c407d6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910a32c7c777296be0992bf0d6f2d66261c407d6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=910a32c7c777296be0992bf0d6f2d66261c407d6", "patch": "@@ -84,6 +84,57 @@ fn may<T>(opt: t<T>, f: fn(T)) {\n     alt opt { none {/* nothing */ } some(t) { f(t); } }\n }\n \n+/*\n+Function: unwrap\n+\n+Moves a value out of an option type and returns it. Useful primarily\n+for getting strings, vectors and unique pointers out of option types\n+without copying them.\n+*/\n+fn unwrap<T>(-opt: t<T>) -> T unsafe {\n+    let addr = alt opt {\n+      some(x) { ptr::addr_of(x) }\n+      none { fail \"option none\" }\n+    };\n+    let liberated_value = unsafe::reinterpret_cast(*addr);\n+    unsafe::leak(opt);\n+    ret liberated_value;\n+}\n+\n+#[test]\n+fn test_unwrap_ptr() {\n+    let x = ~0;\n+    let addr_x = ptr::addr_of(*x);\n+    let opt = some(x);\n+    let y = unwrap(opt);\n+    let addr_y = ptr::addr_of(*y);\n+    assert addr_x == addr_y;\n+}\n+\n+#[test]\n+fn test_unwrap_str() {\n+    let x = \"test\";\n+    let addr_x = str::as_buf(x) {|buf| ptr::addr_of(buf) };\n+    let opt = some(x);\n+    let y = unwrap(opt);\n+    let addr_y = str::as_buf(y) {|buf| ptr::addr_of(buf) };\n+    assert addr_x == addr_y;\n+}\n+\n+#[test]\n+fn test_unwrap_resource() {\n+    resource r(i: @mutable int) {\n+        *i += 1;\n+    }\n+    let i = @mutable 0;\n+    {\n+        let x = r(i);\n+        let opt = some(x);\n+        let y = unwrap(opt);\n+    }\n+    assert *i == 1;\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}