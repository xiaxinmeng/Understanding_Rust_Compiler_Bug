{"sha": "ff65bffe2b143528ff90d5226b18ceca750d7c02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjViZmZlMmIxNDM1MjhmZjkwZDUyMjZiMThjZWNhNzUwZDdjMDI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-11T19:35:46Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-11T19:35:46Z"}, "message": "Fix cycle error when emitting suggestion for mismatched `fn` type\n\nFixes #66667\n\nPreviously, we called `tcx.typeck_tables_of` when determining whether or\nnot to emit a suggestion for a type error. However, we might already be\ntype-checking the `DefId` we pass to `typeck_tables_of` (it could be\nanywhere in the query stack).\n\nFortunately, we only need the function signature, not the entire\n`TypeckTables`. By using `tcx.fn_sig`, we avoid the possibility of cycle\nerrors while retaining the ability to emit a suggestion.", "tree": {"sha": "81460c9fb685036177271c12ca252802dbbf8290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81460c9fb685036177271c12ca252802dbbf8290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff65bffe2b143528ff90d5226b18ceca750d7c02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5pPoYACgkQtAh+UQ6Y\nsWSXLg//TTC1Vjtnp6RLA4azDvrTHHcwy/S1KKYkHZG8xECEFx9WWvufSRfeZue5\n8pfQ8sB9JO2UaTtAPSPNFXRkOrgZGIwFU+WLSHkOQ8bzzUs/U8TOtOODczRqU6ud\nVBcUpot6eBhDXATMAUW8kX2DSqgNxnGc6dHFq36Q5b0olzvEkz1pwLYvzb7XGVZS\nfNsQCDPD8Ij7rT9/qhOS9K2oMv+c2p2OXIhhMlsUoPs93cxJ1mPgjI7Y+CbESPFf\nD9gLfd+JHGjqQyEoBJIVaC6wilwISaJ01G9n8ulg8loYh7rit5ZWWmOj6+MmRLh2\n+JHNaVpOvynq5hwkKY5PA8T7IPgKdvBh+xgsa92PFUfp+GEfiyg3S0LCm6r/eyLR\nXaOIkkGyUCSBgSZCQHhaRCZCq99U2ibxE4WAXDirsgCVLml1ahOQ/dSwU8lgHw8H\nUTvSTxrieu00ixi28/8of7VVMfAQMadKo51c8jWxoYWEYrn35yn/2uS1NcjWQVOv\n2+Ysf7evX0b/2fHmMl3GHY/IXc+9Dj6NCBJafhTAkGATHlMeG7Z8NXIP++jPUKZz\nLjXS46UvoRNH8FytWbDDEWxw9jGkMQk+9uTtTphkV5b4cbwaYMxDxJv3iTwb5Vr+\nrDCgGr/C8m9irb7eLy0B9bXGlpq1sTjIvetJhJk2xJY5aF0I8u0=\n=8lGo\n-----END PGP SIGNATURE-----", "payload": "tree 81460c9fb685036177271c12ca252802dbbf8290\nparent c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be\nauthor Aaron Hill <aa1ronham@gmail.com> 1583955346 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1583955346 -0400\n\nFix cycle error when emitting suggestion for mismatched `fn` type\n\nFixes #66667\n\nPreviously, we called `tcx.typeck_tables_of` when determining whether or\nnot to emit a suggestion for a type error. However, we might already be\ntype-checking the `DefId` we pass to `typeck_tables_of` (it could be\nanywhere in the query stack).\n\nFortunately, we only need the function signature, not the entire\n`TypeckTables`. By using `tcx.fn_sig`, we avoid the possibility of cycle\nerrors while retaining the ability to emit a suggestion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65bffe2b143528ff90d5226b18ceca750d7c02", "html_url": "https://github.com/rust-lang/rust/commit/ff65bffe2b143528ff90d5226b18ceca750d7c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff65bffe2b143528ff90d5226b18ceca750d7c02/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "html_url": "https://github.com/rust-lang/rust/commit/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "3648a99abc259414dcb8a2ee600a606dd11c85d3", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=ff65bffe2b143528ff90d5226b18ceca750d7c02", "patch": "@@ -491,36 +491,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_label(span, ty.to_string());\n         if let FnDef(def_id, _) = ty.kind {\n             let source_map = self.tcx.sess.source_map();\n-            let hir_id = match self.tcx.hir().as_local_hir_id(def_id) {\n-                Some(hir_id) => hir_id,\n-                None => return false,\n-            };\n             if !self.tcx.has_typeck_tables(def_id) {\n                 return false;\n             }\n-            let fn_sig = {\n-                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(hir_id) {\n-                    Some(f) => *f,\n-                    None => {\n-                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n-                    }\n-                }\n-            };\n+            // We're emitting a suggestion, so we can just ignore regions\n+            let fn_sig = *self.tcx.fn_sig(def_id).skip_binder();\n \n             let other_ty = if let FnDef(def_id, _) = other_ty.kind {\n-                let hir_id = match self.tcx.hir().as_local_hir_id(def_id) {\n-                    Some(hir_id) => hir_id,\n-                    None => return false,\n-                };\n                 if !self.tcx.has_typeck_tables(def_id) {\n                     return false;\n                 }\n-                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(hir_id) {\n-                    Some(f) => f.clone().output(),\n-                    None => {\n-                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n-                    }\n-                }\n+                // We're emitting a suggestion, so we can just ignore regions\n+                self.tcx.fn_sig(def_id).skip_binder().output()\n             } else {\n                 other_ty\n             };"}, {"sha": "7b025be11a09edc0f57678591aa3f00836d87947", "filename": "src/test/ui/issues/issue-66667-function-cmp-cycle.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.rs?ref=ff65bffe2b143528ff90d5226b18ceca750d7c02", "patch": "@@ -0,0 +1,16 @@\n+fn first() {\n+    second == 1 //~ ERROR binary operation\n+    //~^ ERROR mismatched types\n+}\n+\n+fn second() {\n+    first == 1 //~ ERROR binary operation\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() {\n+    bar == 1 //~ ERROR binary operation\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "887699ef5ce85e09b038e8f5122a7a7f2f486111", "filename": "src/test/ui/issues/issue-66667-function-cmp-cycle.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bffe2b143528ff90d5226b18ceca750d7c02/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66667-function-cmp-cycle.stderr?ref=ff65bffe2b143528ff90d5226b18ceca750d7c02", "patch": "@@ -0,0 +1,55 @@\n+error[E0369]: binary operation `==` cannot be applied to type `fn() {second}`\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:2:12\n+   |\n+LL |     second == 1\n+   |     ------ ^^ - {integer}\n+   |     |\n+   |     fn() {second}\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:2:15\n+   |\n+LL |     second == 1\n+   |               ^ expected fn item, found integer\n+   |\n+   = note: expected fn item `fn() {second}`\n+                 found type `{integer}`\n+\n+error[E0369]: binary operation `==` cannot be applied to type `fn() {first}`\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:7:11\n+   |\n+LL |     first == 1\n+   |     ----- ^^ - {integer}\n+   |     |\n+   |     fn() {first}\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:7:14\n+   |\n+LL |     first == 1\n+   |              ^ expected fn item, found integer\n+   |\n+   = note: expected fn item `fn() {first}`\n+                 found type `{integer}`\n+\n+error[E0369]: binary operation `==` cannot be applied to type `fn() {bar}`\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:12:9\n+   |\n+LL |     bar == 1\n+   |     --- ^^ - {integer}\n+   |     |\n+   |     fn() {bar}\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66667-function-cmp-cycle.rs:12:12\n+   |\n+LL |     bar == 1\n+   |            ^ expected fn item, found integer\n+   |\n+   = note: expected fn item `fn() {bar}`\n+                 found type `{integer}`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}]}