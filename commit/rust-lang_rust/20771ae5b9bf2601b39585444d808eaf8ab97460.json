{"sha": "20771ae5b9bf2601b39585444d808eaf8ab97460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzcxYWU1YjliZjI2MDFiMzk1ODU0NDRkODA4ZWFmOGFiOTc0NjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-26T12:32:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T12:32:15Z"}, "message": "Rollup merge of #70385 - RalfJung:miri-nits, r=eddyb\n\nMiri nits: comment and var name improvement\n\nr? @eddyb", "tree": {"sha": "9b30eb754c5889f6ba90f7086713b08b0153fcd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b30eb754c5889f6ba90f7086713b08b0153fcd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20771ae5b9bf2601b39585444d808eaf8ab97460", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefKDQCRBK7hj4Ov3rIwAAdHIIAAOH9jNjDNzUJl0DwZzoW47U\nyEM2JmOSzdGxUTrwJohb+XoqzFwvyJDFsEdMmzS6aaCbN4j7qe/GdL9UkeG/Ua/6\nX6hP+vE5H3y/HLA5e1s377mGJ+S97D3dizssSn/hxb7F3NK6BV1RSr83Z04bMyYY\nHFCL3QDXs5zVcMJeNI+Xj5247BpUSmQgwIJOFaovU7dSalIv4tq1iNp4ZLLwTSrw\nnltFHTzKDuB4/g9NLIuPyDrzLLhnz2VdQxv8zmoo7m6CVDQumf1kKKeJLDCaRRVH\n09z0HBEX4tXeNzLlcCwAQmgj04UhIlB482KSW7wI2LxrpVOup1wPlSus2MQF+B8=\n=pYvQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b30eb754c5889f6ba90f7086713b08b0153fcd4\nparent b0a63cb932cc94a4360219780a46fc3bcfb89e88\nparent b5343d6baa6daeca974931f4148638393e80e216\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585225935 +0100\ncommitter GitHub <noreply@github.com> 1585225935 +0100\n\nRollup merge of #70385 - RalfJung:miri-nits, r=eddyb\n\nMiri nits: comment and var name improvement\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20771ae5b9bf2601b39585444d808eaf8ab97460", "html_url": "https://github.com/rust-lang/rust/commit/20771ae5b9bf2601b39585444d808eaf8ab97460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20771ae5b9bf2601b39585444d808eaf8ab97460/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a63cb932cc94a4360219780a46fc3bcfb89e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a63cb932cc94a4360219780a46fc3bcfb89e88", "html_url": "https://github.com/rust-lang/rust/commit/b0a63cb932cc94a4360219780a46fc3bcfb89e88"}, {"sha": "b5343d6baa6daeca974931f4148638393e80e216", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5343d6baa6daeca974931f4148638393e80e216", "html_url": "https://github.com/rust-lang/rust/commit/b5343d6baa6daeca974931f4148638393e80e216"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0970e09791999ce4d3d8ee673a526b539a1b52d0", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=20771ae5b9bf2601b39585444d808eaf8ab97460", "patch": "@@ -178,7 +178,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n \n-    const GLOBAL_KIND: Option<!> = None; // no copying of globals allowed\n+    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n     // We do not check for alignment to avoid having to carry an `Align`\n     // in `ConstValue::ByRef`.\n@@ -350,15 +350,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n         memory_extra: &MemoryExtra,\n         alloc_id: AllocId,\n         allocation: &Allocation,\n-        def_id: Option<DefId>,\n+        static_def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n         if is_write && allocation.mutability == Mutability::Not {\n             Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n         } else if is_write {\n             Err(ConstEvalErrKind::ModifiedGlobal.into())\n-        } else if memory_extra.can_access_statics || def_id.is_none() {\n-            // `def_id.is_none()` indicates this is not a static, but a const or so.\n+        } else if memory_extra.can_access_statics || static_def_id.is_none() {\n+            // `static_def_id.is_none()` indicates this is not a static, but a const or so.\n             Ok(())\n         } else {\n             Err(ConstEvalErrKind::ConstAccessesStatic.into())"}, {"sha": "74933bed8f89e871403a053061a81be106a43cfc", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=20771ae5b9bf2601b39585444d808eaf8ab97460", "patch": "@@ -215,7 +215,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _memory_extra: &Self::MemoryExtra,\n         _alloc_id: AllocId,\n         _allocation: &Allocation,\n-        _def_id: Option<DefId>,\n+        _static_def_id: Option<DefId>,\n         _is_write: bool,\n     ) -> InterpResult<'tcx> {\n         Ok(())"}, {"sha": "5fe8f9f3771b33a3416c33686e0ad3cac5bf481b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20771ae5b9bf2601b39585444d808eaf8ab97460/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=20771ae5b9bf2601b39585444d808eaf8ab97460", "patch": "@@ -172,7 +172,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n \n-    const GLOBAL_KIND: Option<!> = None;\n+    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n     const CHECK_ALIGN: bool = false;\n \n@@ -274,7 +274,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _memory_extra: &(),\n         _alloc_id: AllocId,\n         allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n-        def_id: Option<DefId>,\n+        static_def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n         if is_write {\n@@ -285,7 +285,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         if allocation.mutability == Mutability::Mut {\n             throw_machine_stop_str!(\"can't eval mutable globals in ConstProp\");\n         }\n-        if def_id.is_some() && allocation.relocations().len() > 0 {\n+        if static_def_id.is_some() && allocation.relocations().len() > 0 {\n             throw_machine_stop_str!(\"can't eval statics with pointers in ConstProp\");\n         }\n "}]}