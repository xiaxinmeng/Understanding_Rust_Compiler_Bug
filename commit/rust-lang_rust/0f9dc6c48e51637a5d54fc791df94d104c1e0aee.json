{"sha": "0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOWRjNmM0OGU1MTYzN2E1ZDU0ZmM3OTFkZjk0ZDEwNGMxZTBhZWU=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-06-12T02:04:02Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-06-18T13:31:23Z"}, "message": "Make MaybeUninit #[repr(transparent)]\n\nTracking issue: #60405", "tree": {"sha": "3ee1e442108d5c95d10a3a0e26ad4b69862c301f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee1e442108d5c95d10a3a0e26ad4b69862c301f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "html_url": "https://github.com/rust-lang/rust/commit/0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9dc6c48e51637a5d54fc791df94d104c1e0aee/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3656ce9a2212fad872605b7a4ee103a155e9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3656ce9a2212fad872605b7a4ee103a155e9f3", "html_url": "https://github.com/rust-lang/rust/commit/5f3656ce9a2212fad872605b7a4ee103a155e9f3"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "1bfb852424d63a69f047a2c4555565203eee4d12", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f9dc6c48e51637a5d54fc791df94d104c1e0aee/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9dc6c48e51637a5d54fc791df94d104c1e0aee/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "patch": "@@ -100,6 +100,7 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n+#![cfg_attr(not(bootstrap), feature(transparent_unions))]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![feature(untagged_unions)]"}, {"sha": "28e1e22ba7ff298e4800f4c5219b66cc5372442c", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f9dc6c48e51637a5d54fc791df94d104c1e0aee/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9dc6c48e51637a5d54fc791df94d104c1e0aee/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=0f9dc6c48e51637a5d54fc791df94d104c1e0aee", "patch": "@@ -172,7 +172,7 @@ use crate::mem::ManuallyDrop;\n ///\n /// # Layout\n ///\n-/// `MaybeUninit<T>` is guaranteed to have the same size and alignment as `T`:\n+/// `MaybeUninit<T>` is guaranteed to have the same size, alignment, and ABI as `T`:\n ///\n /// ```rust\n /// use std::mem::{MaybeUninit, size_of, align_of};\n@@ -191,9 +191,23 @@ use crate::mem::ManuallyDrop;\n /// assert_eq!(size_of::<Option<bool>>(), 1);\n /// assert_eq!(size_of::<Option<MaybeUninit<bool>>>(), 2);\n /// ```\n+///\n+/// If `T` is FFI-safe, then so is `MaybeUninit<T>`.\n+///\n+/// While `MaybeUninit` is `#[repr(transparent)]` (indicating it guarantees the same size,\n+/// alignment, and ABI as `T`), this does *not* change any of the previous caveats. `Option<T>` and\n+/// `Option<MaybeUninit<T>>` may still have different sizes, and types containing a field of type\n+/// `T` may be laid out (and sized) differently than if that field were `MaybeUninit<T>`.\n+/// `MaybeUninit` is a union type, and `#[repr(transparent)]` on unions is unstable (see [the\n+/// tracking issue](https://github.com/rust-lang/rust/issues/60405)). Over time, the exact\n+/// guarantees of `#[repr(transparent)]` on unions may evolve, and `MaybeUninit` may or may not\n+/// remain `#[repr(transparent)]`. That said, `MaybeUninit<T>` will *always* guarantee that it has\n+/// the same size, alignment, and ABI as `T`; it's just that the way `MaybeUninit` implements that\n+/// guarantee may evolve.\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n #[derive(Copy)]\n+#[cfg_attr(not(bootstrap), repr(transparent))]\n pub union MaybeUninit<T> {\n     uninit: (),\n     value: ManuallyDrop<T>,"}]}