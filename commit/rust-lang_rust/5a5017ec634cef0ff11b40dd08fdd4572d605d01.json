{"sha": "5a5017ec634cef0ff11b40dd08fdd4572d605d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTAxN2VjNjM0Y2VmMGZmMTFiNDBkZDA4ZmRkNDU3MmQ2MDVkMDE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-12T22:40:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T07:16:08Z"}, "message": "Be more conservative concerning `structural_match`", "tree": {"sha": "b629e5f974ac6f504b096b76fd04ab2d29e75c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b629e5f974ac6f504b096b76fd04ab2d29e75c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5017ec634cef0ff11b40dd08fdd4572d605d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5017ec634cef0ff11b40dd08fdd4572d605d01", "html_url": "https://github.com/rust-lang/rust/commit/5a5017ec634cef0ff11b40dd08fdd4572d605d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5017ec634cef0ff11b40dd08fdd4572d605d01/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "html_url": "https://github.com/rust-lang/rust/commit/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "9e3f75fdc078c41fffc64006e2b9821a7bc20b7a", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a5017ec634cef0ff11b40dd08fdd4572d605d01/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5017ec634cef0ff11b40dd08fdd4572d605d01/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=5a5017ec634cef0ff11b40dd08fdd4572d605d01", "patch": "@@ -124,9 +124,18 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Dynamic => {\n                         \"trait objects cannot be used in patterns\".to_string()\n                     }\n+                    traits::NonStructuralMatchTy::Opaque => {\n+                        \"opaque types cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Generator => {\n+                        \"generators cannot be used in patterns\".to_string()\n+                    }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of a constant whose type is a parameter inside a pattern\")\n                     }\n+                    traits::NonStructuralMatchTy::Projection => {\n+                        bug!(\"use of a constant whose type is a projection inside a pattern\")\n+                    }\n                     traits::NonStructuralMatchTy::Foreign => {\n                         bug!(\"use of a value of a foreign type inside a pattern\")\n                     }"}, {"sha": "71fa46ccdedb7aeae7a4f54429ace27e9d98dd5b", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5a5017ec634cef0ff11b40dd08fdd4572d605d01/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5017ec634cef0ff11b40dd08fdd4572d605d01/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=5a5017ec634cef0ff11b40dd08fdd4572d605d01", "patch": "@@ -14,6 +14,9 @@ pub enum NonStructuralMatchTy<'tcx> {\n     Param,\n     Dynamic,\n     Foreign,\n+    Opaque,\n+    Generator,\n+    Projection,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -148,6 +151,18 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Foreign);\n                 return true; // Stop visiting\n             }\n+            ty::Opaque(..) => {\n+                self.found = Some(NonStructuralMatchTy::Opaque);\n+                return true;\n+            }\n+            ty::Projection(..) => {\n+                self.found = Some(NonStructuralMatchTy::Projection);\n+                return true;\n+            }\n+            ty::Generator(..) | ty::GeneratorWitness(..) => {\n+                self.found = Some(NonStructuralMatchTy::Generator);\n+                return true;\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`.\n@@ -181,39 +196,22 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // for empty array.\n                 return false;\n             }\n-            ty::Bool\n-            | ty::Char\n-            | ty::Int(_)\n-            | ty::Uint(_)\n-            | ty::Float(_)\n-            | ty::Str\n-            | ty::Never => {\n+            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n                 return false;\n             }\n \n-            ty::Array(..)\n-            | ty::Slice(_)\n-            | ty::Ref(..)\n-            | ty::Closure(..)\n-            | ty::Generator(..)\n-            | ty::Tuple(..)\n-            | ty::Projection(..)\n-            | ty::Opaque(..)\n-            | ty::GeneratorWitness(..) => {\n+            ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n                 ty.super_visit_with(self);\n                 return false;\n             }\n-            | ty::Infer(_)\n-            | ty::Placeholder(_)\n-            | ty::UnnormalizedProjection(..)\n-            | ty::Bound(..) => {\n+            ty::Closure(..) | ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error => {\n-                self.tcx().delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n                 return false;"}]}