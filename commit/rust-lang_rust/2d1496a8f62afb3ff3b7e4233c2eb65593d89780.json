{"sha": "2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "node_id": "C_kwDOAAsO6NoAKDJkMTQ5NmE4ZjYyYWZiM2ZmM2I3ZTQyMzNjMmViNjU1OTNkODk3ODA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-04T18:41:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-04T18:41:30Z"}, "message": "Rollup merge of #95343 - dtolnay:literals, r=petrochenkov\n\nReduce unnecessary escaping in proc_macro::Literal::character/string\n\nI noticed that https://doc.rust-lang.org/proc_macro/struct.Literal.html#method.character is producing unreadable literals that make macro-expanded code unnecessarily hard to read. Since the proc macro server was using `escape_unicode()`, every char is escaped using `\\u{\u2026}` regardless of whether there is any need to do so. For example `Literal::character('=')` would previously produce `'\\u{3d}'` which unnecessarily obscures the meaning when reading the macro-expanded code.\n\nI've changed Literal::string also in this PR because `str`'s `Debug` impl is also smarter than just calling `escape_debug` on every char. For example `Literal::string(\"ferris's\")` would previously produce `\"ferris\\'s\"` but will now produce `\"ferris's\"`.", "tree": {"sha": "bf97266ddece38bd6f7f9f1778664c1e9407e6bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf97266ddece38bd6f7f9f1778664c1e9407e6bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSzvbCRBK7hj4Ov3rIwAADZwIAJ4BlJJs3tP/XHS8oTO0j/vg\nxGCJwhieJHU0IaA0ESQONNuTbWzKLE5eNKN4Pu83OK49h+XIRYPPFfybwsPOkc2W\nkMoFuVsCFp9t54X4kEzyzCbgagF3TGU640zEHS4UsBbzmzl7E2am9fyC8OfYQ3uW\nuZtn+IL0usPoL8AsN1sIbdZE5FL0P0TVfimXgW9pUiOG8jRP9SJ6BJfykLeWd0/v\nn6FK7wD2jB4hXypxiKMOpZ7lTzpBX29FOJpA9VH5dim1c0rdq9DjVEnSuvIVbEDd\neTqILBrgdAFpIbcXKaNFzo2wmQ2gqRrsxdONQ0FV1CIWsMcNGEg9WLZIW2kxSJU=\n=jFWB\n-----END PGP SIGNATURE-----\n", "payload": "tree bf97266ddece38bd6f7f9f1778664c1e9407e6bd\nparent 98168925f6570a8d0292abd493cf20bde89c7663\nparent f383134acc48c97bbf2389aa62d51b9a51535482\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649097690 +0200\ncommitter GitHub <noreply@github.com> 1649097690 +0200\n\nRollup merge of #95343 - dtolnay:literals, r=petrochenkov\n\nReduce unnecessary escaping in proc_macro::Literal::character/string\n\nI noticed that https://doc.rust-lang.org/proc_macro/struct.Literal.html#method.character is producing unreadable literals that make macro-expanded code unnecessarily hard to read. Since the proc macro server was using `escape_unicode()`, every char is escaped using `\\u{\u2026}` regardless of whether there is any need to do so. For example `Literal::character('=')` would previously produce `'\\u{3d}'` which unnecessarily obscures the meaning when reading the macro-expanded code.\n\nI've changed Literal::string also in this PR because `str`'s `Debug` impl is also smarter than just calling `escape_debug` on every char. For example `Literal::string(\"ferris's\")` would previously produce `\"ferris\\'s\"` but will now produce `\"ferris's\"`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "html_url": "https://github.com/rust-lang/rust/commit/2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98168925f6570a8d0292abd493cf20bde89c7663", "url": "https://api.github.com/repos/rust-lang/rust/commits/98168925f6570a8d0292abd493cf20bde89c7663", "html_url": "https://github.com/rust-lang/rust/commit/98168925f6570a8d0292abd493cf20bde89c7663"}, {"sha": "f383134acc48c97bbf2389aa62d51b9a51535482", "url": "https://api.github.com/repos/rust-lang/rust/commits/f383134acc48c97bbf2389aa62d51b9a51535482", "html_url": "https://github.com/rust-lang/rust/commit/f383134acc48c97bbf2389aa62d51b9a51535482"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "20351070f71b91e8c372fb59579064fafdfdcf98", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "patch": "@@ -658,16 +658,16 @@ impl server::Literal for Rustc<'_, '_> {\n         self.lit(token::Float, Symbol::intern(n), Some(sym::f64))\n     }\n     fn string(&mut self, string: &str) -> Self::Literal {\n-        let mut escaped = String::new();\n-        for ch in string.chars() {\n-            escaped.extend(ch.escape_debug());\n-        }\n-        self.lit(token::Str, Symbol::intern(&escaped), None)\n+        let quoted = format!(\"{:?}\", string);\n+        assert!(quoted.starts_with('\"') && quoted.ends_with('\"'));\n+        let symbol = &quoted[1..quoted.len() - 1];\n+        self.lit(token::Str, Symbol::intern(symbol), None)\n     }\n     fn character(&mut self, ch: char) -> Self::Literal {\n-        let mut escaped = String::new();\n-        escaped.extend(ch.escape_unicode());\n-        self.lit(token::Char, Symbol::intern(&escaped), None)\n+        let quoted = format!(\"{:?}\", ch);\n+        assert!(quoted.starts_with('\\'') && quoted.ends_with('\\''));\n+        let symbol = &quoted[1..quoted.len() - 1];\n+        self.lit(token::Char, Symbol::intern(symbol), None)\n     }\n     fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {\n         let string = bytes"}, {"sha": "27391f8311176cdb17fdac88f274734228a87a2a", "filename": "src/test/ui/proc-macro/auxiliary/api/parse.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs?ref=2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "patch": "@@ -18,6 +18,17 @@ fn test_display_literal() {\n         Literal::f64_unsuffixed(1e100).to_string(),\n         \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0\",\n     );\n+\n+    assert_eq!(\n+        Literal::string(\"a \\t \u2764 ' \\\" \\u{1}\").to_string(),\n+        \"\\\"a \\\\t \u2764 ' \\\\\\\" \\\\u{1}\\\"\",\n+    );\n+    assert_eq!(Literal::character('a').to_string(), \"'a'\");\n+    assert_eq!(Literal::character('\\t').to_string(), \"'\\\\t'\");\n+    assert_eq!(Literal::character('\u2764').to_string(), \"'\u2764'\");\n+    assert_eq!(Literal::character('\\'').to_string(), \"'\\\\''\");\n+    assert_eq!(Literal::character('\"').to_string(), \"'\\\"'\");\n+    assert_eq!(Literal::character('\\u{1}').to_string(), \"'\\\\u{1}'\");\n }\n \n fn test_parse_literal() {"}, {"sha": "d2cc5c6e2a3f7dcdae9a3fd4adc6a7591c13594a", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2d1496a8f62afb3ff3b7e4233c2eb65593d89780/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=2d1496a8f62afb3ff3b7e4233c2eb65593d89780", "patch": "@@ -22,7 +22,7 @@ fn main() {\n                                     crate::Span::recover_proc_macro_span(0)))),\n                         crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n                                     crate::Span::recover_proc_macro_span(1)))),\n-                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('=',\n                                     crate::Spacing::Alone))),\n                         crate::TokenStream::from(crate::TokenTree::Literal({\n                                     let mut iter =\n@@ -35,7 +35,7 @@ fn main() {\n                                            ::core::panicking::panic(\"internal error: entered unreachable code\")\n                                        }\n                                 })),\n-                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new(';',\n                                     crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n }\n const _: () ="}]}