{"sha": "5e018b1deb9aa9b485aa6372ee7254c70c119670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMDE4YjFkZWI5YWE5YjQ4NWFhNjM3MmVlNzI1NGM3MGMxMTk2NzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-09T22:45:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-09T22:49:47Z"}, "message": "analyzing hashmap.rs uncovered a deeper problem; disable validation there for now", "tree": {"sha": "7489904584ae033584fa9e6d5c9fa53a9059ecd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7489904584ae033584fa9e6d5c9fa53a9059ecd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e018b1deb9aa9b485aa6372ee7254c70c119670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e018b1deb9aa9b485aa6372ee7254c70c119670", "html_url": "https://github.com/rust-lang/rust/commit/5e018b1deb9aa9b485aa6372ee7254c70c119670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e018b1deb9aa9b485aa6372ee7254c70c119670/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5f8a36ab94695e8d9b48fa007d72e586e6b8df", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5f8a36ab94695e8d9b48fa007d72e586e6b8df", "html_url": "https://github.com/rust-lang/rust/commit/7b5f8a36ab94695e8d9b48fa007d72e586e6b8df"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "6a8df1b5246744541989ca54271750ece28afba6", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e018b1deb9aa9b485aa6372ee7254c70c119670/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e018b1deb9aa9b485aa6372ee7254c70c119670/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=5e018b1deb9aa9b485aa6372ee7254c70c119670", "patch": "@@ -129,9 +129,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             let traits::Normalized { value: result, obligations } =\n                 traits::normalize(&mut selcx, param_env, cause, value);\n \n-            debug!(\"normalize_projections_in: result={:?} obligations={:?}\",\n-                    result, obligations);\n-\n             let mut fulfill_cx = traits::FulfillmentContext::new();\n \n             for obligation in obligations {\n@@ -149,8 +146,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                                                 -> T::Lifted\n             where T: TypeFoldable<'tcx> + ty::Lift<'gcx>\n         {\n-            debug!(\"drain_fulfillment_cx_or_panic()\");\n-\n             // In principle, we only need to do this so long as `result`\n             // contains unbound type parameters. It could be a slight\n             // optimization to stop iterating early.\n@@ -207,8 +202,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         fn normalize_associated_type<'a, 'tcx, T>(self_: TyCtxt<'a, 'tcx, 'tcx>, value: &T) -> T\n             where T: MyTransNormalize<'tcx>\n         {\n-            debug!(\"normalize_associated_type(t={:?})\", value);\n-\n             let param_env = ty::ParamEnv::empty(Reveal::All);\n \n             if !value.has_projection_types() {"}, {"sha": "892518011dbcf3ff78f2ee42360babd7c0553077", "filename": "tests/run-pass-fullmir/hashmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e018b1deb9aa9b485aa6372ee7254c70c119670/tests%2Frun-pass-fullmir%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e018b1deb9aa9b485aa6372ee7254c70c119670/tests%2Frun-pass-fullmir%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fhashmap.rs?ref=5e018b1deb9aa9b485aa6372ee7254c70c119670", "patch": "@@ -1,3 +1,5 @@\n+// FIXME: disable validation until we figure out how to handle <https://github.com/solson/miri/issues/296>.\n+// compile-flags: -Zmir-emit-validate=0\n use std::collections::{self, HashMap};\n use std::hash::BuildHasherDefault;\n "}]}