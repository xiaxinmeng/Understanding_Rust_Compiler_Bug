{"sha": "537895535deaa766d59e44e1c9b941a8ad4adb10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzg5NTUzNWRlYWE3NjZkNTllNDRlMWM5Yjk0MWE4YWQ0YWRiMTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T14:53:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:34Z"}, "message": "syntax: Use `ast::MacArgs` for macro definitions", "tree": {"sha": "e7b0cfb29ad02175662cfa498efce0018f9a3de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7b0cfb29ad02175662cfa498efce0018f9a3de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537895535deaa766d59e44e1c9b941a8ad4adb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537895535deaa766d59e44e1c9b941a8ad4adb10", "html_url": "https://github.com/rust-lang/rust/commit/537895535deaa766d59e44e1c9b941a8ad4adb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537895535deaa766d59e44e1c9b941a8ad4adb10/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a496f33796d848609e06604445e28056954f412", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a496f33796d848609e06604445e28056954f412", "html_url": "https://github.com/rust-lang/rust/commit/1a496f33796d848609e06604445e28056954f412"}], "stats": {"total": 79, "additions": 37, "deletions": 42}, "files": [{"sha": "ff9d8c85df8b9dd3661df2d3092faf3bb354d3ab", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -233,7 +233,7 @@ impl LoweringContext<'_> {\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n-                let body = self.lower_token_stream(def.stream());\n+                let body = self.lower_token_stream(def.body.inner_tokens());\n                 let hir_id = self.lower_node_id(i.id);\n                 self.exported_macros.push(hir::MacroDef {\n                     name: ident.name,"}, {"sha": "0fd7145f425d3027cf58e59594035682aec631dc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -1450,7 +1450,7 @@ impl KeywordIdents {\n \n impl EarlyLintPass for KeywordIdents {\n     fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n-        self.check_tokens(cx, mac_def.stream());\n+        self.check_tokens(cx, mac_def.body.inner_tokens());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n         self.check_tokens(cx, mac.args.inner_tokens());"}, {"sha": "13db9a6fef9ca83b1cf5a6c808726f61c4a4517a", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -32,6 +32,8 @@ use syntax::source_map;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax::expand::allocator::AllocatorKind;\n+use syntax::ptr::P;\n+use syntax::tokenstream::DelimSpan;\n use syntax_pos::{Span, FileName};\n \n macro_rules! provide {\n@@ -427,6 +429,7 @@ impl CStore {\n \n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::with_root_ctxt(source_file.start_pos, source_file.end_pos);\n+        let dspan = DelimSpan::from_single(local_span);\n         let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n         emit_unclosed_delims(&mut errors, &sess.parse_sess);\n \n@@ -448,7 +451,7 @@ impl CStore {\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),\n             kind: ast::ItemKind::MacroDef(ast::MacroDef {\n-                tokens: body.into(),\n+                body: P(ast::MacArgs::Delimited(dspan, ast::MacDelimiter::Brace, body)),\n                 legacy: def.legacy,\n             }),\n             vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),"}, {"sha": "46addba57c628eb5c5c1724fdb9d59b713377036", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -8,12 +8,12 @@ use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, Us\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n-use syntax::ast::{Mac, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n+use syntax::ast::{Mac, MacArgs, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::token;\n-use syntax::tokenstream::{TokenTree, TokenStream};\n+use syntax::tokenstream::{DelimSpan, TokenTree, TokenStream};\n use syntax::source_map::{self, respan, Span};\n use syntax::struct_span_err;\n use syntax_pos::BytePos;\n@@ -1617,33 +1617,31 @@ impl<'a> Parser<'a> {\n         vis: &Visibility,\n         lo: Span\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let token_lo = self.token.span;\n         let (ident, def) = if self.eat_keyword(kw::Macro) {\n             let ident = self.parse_ident()?;\n-            let tokens = if self.check(&token::OpenDelim(token::Brace)) {\n-                match self.parse_token_tree() {\n-                    TokenTree::Delimited(_, _, tts) => tts,\n-                    _ => unreachable!(),\n-                }\n+            let body = if self.check(&token::OpenDelim(token::Brace)) {\n+                self.parse_mac_args()?\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n-                let args = self.parse_token_tree();\n+                let params = self.parse_token_tree();\n+                let pspan = params.span();\n                 let body = if self.check(&token::OpenDelim(token::Brace)) {\n                     self.parse_token_tree()\n                 } else {\n-                    self.unexpected()?;\n-                    unreachable!()\n+                    return self.unexpected();\n                 };\n-                TokenStream::new(vec![\n-                    args.into(),\n-                    TokenTree::token(token::FatArrow, token_lo.to(self.prev_span)).into(),\n+                let bspan = body.span();\n+                let tokens = TokenStream::new(vec![\n+                    params.into(),\n+                    TokenTree::token(token::FatArrow, pspan.between(bspan)).into(),\n                     body.into(),\n-                ])\n+                ]);\n+                let dspan = DelimSpan::from_pair(pspan.shrink_to_lo(), bspan.shrink_to_hi());\n+                P(MacArgs::Delimited(dspan, MacDelimiter::Brace, tokens))\n             } else {\n-                self.unexpected()?;\n-                unreachable!()\n+                return self.unexpected();\n             };\n \n-            (ident, ast::MacroDef { tokens: tokens.into(), legacy: false })\n+            (ident, ast::MacroDef { body, legacy: false })\n         } else if self.check_keyword(sym::macro_rules) &&\n                   self.look_ahead(1, |t| *t == token::Not) &&\n                   self.look_ahead(2, |t| t.is_ident()) {\n@@ -1653,12 +1651,12 @@ impl<'a> Parser<'a> {\n             self.bump();\n \n             let ident = self.parse_ident()?;\n-            let args = self.parse_mac_args()?;\n-            if args.need_semicolon() && !self.eat(&token::Semi) {\n+            let body = self.parse_mac_args()?;\n+            if body.need_semicolon() && !self.eat(&token::Semi) {\n                 self.report_invalid_macro_expansion_item();\n             }\n \n-            (ident, ast::MacroDef { tokens: args.inner_tokens(), legacy: true })\n+            (ident, ast::MacroDef { body, legacy: true })\n         } else {\n             return Ok(None);\n         };"}, {"sha": "7ee1054dc4846886fd6c177fdb98bc91a776145d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -482,7 +482,7 @@ fn build_macro(cx: &DocContext<'_>, did: DefId, name: ast::Name) -> clean::ItemE\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n             let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n-                let tts: Vec<_> = def.stream().into_trees().collect();\n+                let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n                 tts.chunks(4).map(|arm| arm[0].span()).collect()\n             } else {\n                 unreachable!()"}, {"sha": "3ddc001145c81505282b0cdfe4615335d4ce6cdc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -1474,17 +1474,11 @@ impl MacDelimiter {\n /// Represents a macro definition.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MacroDef {\n-    pub tokens: TokenStream,\n+    pub body: P<MacArgs>,\n     /// `true` if macro was defined with `macro_rules`.\n     pub legacy: bool,\n }\n \n-impl MacroDef {\n-    pub fn stream(&self) -> TokenStream {\n-        self.tokens.clone().into()\n-    }\n-}\n-\n // Clippy uses Hash and PartialEq\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq, HashStable_Generic)]\n pub enum StrStyle {"}, {"sha": "8889e5df26c528b22dc46a90b4ff9add78e0d068", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -586,8 +586,8 @@ pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n }\n \n pub fn noop_visit_macro_def<T: MutVisitor>(macro_def: &mut MacroDef, vis: &mut T) {\n-    let MacroDef { tokens, legacy: _ } = macro_def;\n-    vis.visit_tts(tokens);\n+    let MacroDef { body, legacy: _ } = macro_def;\n+    visit_mac_args(body, vis);\n }\n \n pub fn noop_visit_meta_list_item<T: MutVisitor>(li: &mut NestedMetaItem, vis: &mut T) {"}, {"sha": "4821bbd9ec6e2a63eb548f4936d05a1db3fee2c4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -1380,8 +1380,8 @@ impl<'a> State<'a> {\n                     Some(MacHeader::Keyword(kw)),\n                     has_bang,\n                     Some(item.ident),\n-                    DelimToken::Brace,\n-                    macro_def.stream(),\n+                    macro_def.body.delim(),\n+                    macro_def.body.inner_tokens(),\n                     true,\n                     item.span,\n                 );"}, {"sha": "e3c3655bcf882c634d7d136dfef275db18339955", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537895535deaa766d59e44e1c9b941a8ad4adb10/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=537895535deaa766d59e44e1c9b941a8ad4adb10", "patch": "@@ -318,8 +318,8 @@ pub fn compile_declarative_macro(\n     let tt_spec = ast::Ident::new(sym::tt, def.span);\n \n     // Parse the macro_rules! invocation\n-    let body = match def.kind {\n-        ast::ItemKind::MacroDef(ref body) => body,\n+    let (is_legacy, body) = match &def.kind {\n+        ast::ItemKind::MacroDef(macro_def) => (macro_def.legacy, macro_def.body.inner_tokens()),\n         _ => unreachable!(),\n     };\n \n@@ -338,7 +338,7 @@ pub fn compile_declarative_macro(\n                     mbe::TokenTree::MetaVarDecl(def.span, rhs_nm, tt_spec),\n                 ],\n                 separator: Some(Token::new(\n-                    if body.legacy { token::Semi } else { token::Comma },\n+                    if is_legacy { token::Semi } else { token::Comma },\n                     def.span,\n                 )),\n                 kleene: mbe::KleeneToken::new(mbe::KleeneOp::OneOrMore, def.span),\n@@ -350,7 +350,7 @@ pub fn compile_declarative_macro(\n             DelimSpan::dummy(),\n             Lrc::new(mbe::SequenceRepetition {\n                 tts: vec![mbe::TokenTree::token(\n-                    if body.legacy { token::Semi } else { token::Comma },\n+                    if is_legacy { token::Semi } else { token::Comma },\n                     def.span,\n                 )],\n                 separator: None,\n@@ -360,7 +360,7 @@ pub fn compile_declarative_macro(\n         ),\n     ];\n \n-    let argument_map = match parse(sess, body.stream(), &argument_gram, None, true) {\n+    let argument_map = match parse(sess, body, &argument_gram, None, true) {\n         Success(m) => m,\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);\n@@ -435,7 +435,7 @@ pub fn compile_declarative_macro(\n     // that is not lint-checked and trigger the \"failed to process buffered lint here\" bug.\n     valid &= macro_check::check_meta_variables(sess, ast::CRATE_NODE_ID, def.span, &lhses, &rhses);\n \n-    let (transparency, transparency_error) = attr::find_transparency(&def.attrs, body.legacy);\n+    let (transparency, transparency_error) = attr::find_transparency(&def.attrs, is_legacy);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) =>\n             diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value)),"}]}