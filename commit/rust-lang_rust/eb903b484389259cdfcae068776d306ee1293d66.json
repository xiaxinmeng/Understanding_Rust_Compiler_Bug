{"sha": "eb903b484389259cdfcae068776d306ee1293d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOTAzYjQ4NDM4OTI1OWNkZmNhZTA2ODc3NmQzMDZlZTEyOTNkNjY=", "commit": {"author": {"name": "Piotr Szotkowski", "email": "chastell@chastell.net", "date": "2014-10-25T20:57:11Z"}, "committer": {"name": "Piotr Szotkowski", "email": "chastell@chastell.net", "date": "2014-10-25T21:10:27Z"}, "message": "Guide: update Testing output and fix contents to match", "tree": {"sha": "92d10b08f3ea6224e8e6117d3b97a44fea516ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d10b08f3ea6224e8e6117d3b97a44fea516ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb903b484389259cdfcae068776d306ee1293d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb903b484389259cdfcae068776d306ee1293d66", "html_url": "https://github.com/rust-lang/rust/commit/eb903b484389259cdfcae068776d306ee1293d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb903b484389259cdfcae068776d306ee1293d66/comments", "author": {"login": "chastell", "id": 56633, "node_id": "MDQ6VXNlcjU2NjMz", "avatar_url": "https://avatars.githubusercontent.com/u/56633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chastell", "html_url": "https://github.com/chastell", "followers_url": "https://api.github.com/users/chastell/followers", "following_url": "https://api.github.com/users/chastell/following{/other_user}", "gists_url": "https://api.github.com/users/chastell/gists{/gist_id}", "starred_url": "https://api.github.com/users/chastell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chastell/subscriptions", "organizations_url": "https://api.github.com/users/chastell/orgs", "repos_url": "https://api.github.com/users/chastell/repos", "events_url": "https://api.github.com/users/chastell/events{/privacy}", "received_events_url": "https://api.github.com/users/chastell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chastell", "id": 56633, "node_id": "MDQ6VXNlcjU2NjMz", "avatar_url": "https://avatars.githubusercontent.com/u/56633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chastell", "html_url": "https://github.com/chastell", "followers_url": "https://api.github.com/users/chastell/followers", "following_url": "https://api.github.com/users/chastell/following{/other_user}", "gists_url": "https://api.github.com/users/chastell/gists{/gist_id}", "starred_url": "https://api.github.com/users/chastell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chastell/subscriptions", "organizations_url": "https://api.github.com/users/chastell/orgs", "repos_url": "https://api.github.com/users/chastell/repos", "events_url": "https://api.github.com/users/chastell/events{/privacy}", "received_events_url": "https://api.github.com/users/chastell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a224541455809bf787563a1ec907e6c8b1271d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a224541455809bf787563a1ec907e6c8b1271d1", "html_url": "https://github.com/rust-lang/rust/commit/6a224541455809bf787563a1ec907e6c8b1271d1"}], "stats": {"total": 115, "additions": 66, "deletions": 49}, "files": [{"sha": "cd7478938187a1e0bd82404f9c2f0216b39109f6", "filename": "src/doc/guide.md", "status": "modified", "additions": 66, "deletions": 49, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/eb903b484389259cdfcae068776d306ee1293d66/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb903b484389259cdfcae068776d306ee1293d66/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=eb903b484389259cdfcae068776d306ee1293d66", "patch": "@@ -2921,15 +2921,11 @@ it `false`, so this test should fail. Let's try it!\n ```{notrust,ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n-/home/you/projects/testing/src/main.rs:1:1: 3:2 warning: code is never used: `main`, #[warn(dead_code)] on by default\n+/home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n /home/you/projects/testing/src/main.rs:1 fn main() {\n /home/you/projects/testing/src/main.rs:2     println!(\"Hello, world!\")\n /home/you/projects/testing/src/main.rs:3 }\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-\n+     Running target/lib-654ce120f310a3a5\n \n running 1 test\n test foo ... FAILED\n@@ -2946,7 +2942,7 @@ failures:\n \n test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n \n-task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.rs:242\n+task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.rs:243\n ```\n \n Lots of output! Let's break this down:\n@@ -2960,7 +2956,7 @@ You can run all of your tests with `cargo test`. This runs both your tests in\n `tests`, as well as the tests you put inside of your crate.\n \n ```{notrust,ignore}\n-/home/you/projects/testing/src/main.rs:1:1: 3:2 warning: code is never used: `main`, #[warn(dead_code)] on by default\n+/home/you/projects/testing/src/main.rs:1:1: 3:2 warning: function is never used: `main`, #[warn(dead_code)] on by default\n /home/you/projects/testing/src/main.rs:1 fn main() {\n /home/you/projects/testing/src/main.rs:2     println!(\"Hello, world!\")\n /home/you/projects/testing/src/main.rs:3 }\n@@ -2974,18 +2970,8 @@ We'll turn this lint off for just this function soon. For now, just ignore this\n output.\n \n ```{notrust,ignore}\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n+     Running target/lib-654ce120f310a3a5\n \n-Wait a minute, zero tests? Didn't we define one? Yup. This output is from\n-attempting to run the tests in our crate, of which we don't have any.\n-You'll note that Rust reports on several kinds of tests: passed, failed,\n-ignored, and measured. The 'measured' tests refer to benchmark tests, which\n-we'll cover soon enough!\n-\n-```{notrust,ignore}\n running 1 test\n test foo ... FAILED\n ```\n@@ -3008,7 +2994,7 @@ failures:\n \n test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n \n-task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.rs:242\n+task '<main>' failed at 'Some tests failed', /home/you/src/rust/src/libtest/lib.rs:243\n ```\n \n After all the tests run, Rust will show us any output from our failed tests.\n@@ -3029,24 +3015,25 @@ And then try to run our tests again:\n ```{notrust,ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n-/home/you/projects/testing/src/main.rs:1:1: 3:2 warning: code is never used: `main`, #[warn(dead_code)] on by default\n-/home/you/projects/testing/src/main.rs:1 fn main() {\n-/home/you/projects/testing/src/main.rs:2     println!(\"Hello, world\");\n-/home/you/projects/testing/src/main.rs:3 }\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-\n+     Running target/lib-654ce120f310a3a5\n \n running 1 test\n test foo ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-6d7518593c7c3ee5\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n-Nice! Our test passes, as we expected. Let's get rid of that warning for our `main`\n-function. Change your `src/main.rs` to look like this:\n+Nice! Our test passes, as we expected. Note how we didn't get the\n+`main` warning this time? This is because `src/main.rs` didn't\n+need recompiling, but we'll get that warning again if we\n+change (and recompile) that file. Let's get rid of that\n+warning; change your `src/main.rs` to look like this:\n \n ```{rust}\n #[cfg(not(test))]\n@@ -3062,21 +3049,24 @@ our tests, it sets things up so that `cfg(test)` is true. But we want to only\n include `main` when it's _not_ true. So we use `not` to negate things:\n `cfg(not(test))` will only compile our code when the `cfg(test)` is false.\n \n-With this attribute, we won't get the warning:\n+With this attribute we won't get the warning (even\n+though `src/main.rs` gets recompiled this time):\n \n ```{notrust,ignore}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-\n+     Running target/lib-654ce120f310a3a5\n \n running 1 test\n test foo ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-6d7518593c7c3ee5\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n Nice. Okay, let's write a real test now. Change your `tests/lib.rs`\n@@ -3156,21 +3146,30 @@ Let's give it a run:\n ```{ignore,notrust}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n+     Running target/lib-654ce120f310a3a5\n+\n+running 1 test\n+test math_checks_out ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-6d7518593c7c3ee5\n \n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n \n+     Running target/testing-8a94b31f7fd2e8fe\n \n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n \n+   Doc-tests testing\n \n-running 1 test\n-test math_checks_out ... ok\n+running 0 tests\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n Great! One test passed. We've got an integration test showing that our public\n@@ -3196,21 +3195,30 @@ If you run `cargo test`, you should get the same output:\n ```{ignore,notrust}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n+     Running target/lib-654ce120f310a3a5\n+\n+running 1 test\n+test math_checks_out ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-6d7518593c7c3ee5\n \n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n \n+     Running target/testing-8a94b31f7fd2e8fe\n \n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n \n+   Doc-tests testing\n \n-running 1 test\n-test math_checks_out ... ok\n+running 0 tests\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n If we tried to write a test for these two new functions, it wouldn't\n@@ -3283,23 +3291,32 @@ Let's give it a shot:\n ```{ignore,notrust}\n $ cargo test\n    Compiling testing v0.0.1 (file:///home/you/projects/testing)\n+     Running target/lib-654ce120f310a3a5\n+\n+running 1 test\n+test math_checks_out ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-6d7518593c7c3ee5\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n+\n+     Running target/testing-8a94b31f7fd2e8fe\n \n running 2 tests\n test test::test_times_four ... ok\n test test::test_add_three ... ok\n \n test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n \n+   Doc-tests testing\n \n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-\n-\n-running 1 test\n-test math_checks_out ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n Cool! We now have two tests of our internal functions. You'll note that there"}]}