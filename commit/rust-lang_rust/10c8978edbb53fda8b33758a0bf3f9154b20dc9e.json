{"sha": "10c8978edbb53fda8b33758a0bf3f9154b20dc9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzg5NzhlZGJiNTNmZGE4YjMzNzU4YTBiZjNmOTE1NGIyMGRjOWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-14T20:34:32Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-14T20:51:33Z"}, "message": "iter: replace comment with a docstring", "tree": {"sha": "80781d4da62c9c5c3c94dc49f157c271f7e2b6b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80781d4da62c9c5c3c94dc49f157c271f7e2b6b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c8978edbb53fda8b33758a0bf3f9154b20dc9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c8978edbb53fda8b33758a0bf3f9154b20dc9e", "html_url": "https://github.com/rust-lang/rust/commit/10c8978edbb53fda8b33758a0bf3f9154b20dc9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c8978edbb53fda8b33758a0bf3f9154b20dc9e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "561f1b006321501dfe5a059444fc8f560010c2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/561f1b006321501dfe5a059444fc8f560010c2ba", "html_url": "https://github.com/rust-lang/rust/commit/561f1b006321501dfe5a059444fc8f560010c2ba"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "8407b0683446dca65cd3c53291839a0e420a298e", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10c8978edbb53fda8b33758a0bf3f9154b20dc9e/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c8978edbb53fda8b33758a0bf3f9154b20dc9e/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=10c8978edbb53fda8b33758a0bf3f9154b20dc9e", "patch": "@@ -1749,14 +1749,12 @@ impl<A: Add<A, A> + Ord + Clone> Iterator<A> for Range<A> {\n     // Blocked on #8605 Need numeric trait for converting to `Option<uint>`\n }\n \n-impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n+/// `Integer` is required to ensure the range will be the same regardless of\n+/// the direction it is consumed.\n+impl<A: Integer + Ord + Clone> DoubleEndedIterator<A> for Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.stop > self.state {\n-            // Integer doesn't technically define this rule, but we're going to assume that every\n-            // Integer is reachable from every other one by adding or subtracting enough Ones. This\n-            // seems like a reasonable-enough rule that every Integer should conform to, even if it\n-            // can't be statically checked.\n             self.stop = self.stop - self.one;\n             Some(self.stop.clone())\n         } else {"}]}