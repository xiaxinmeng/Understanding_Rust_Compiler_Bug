{"sha": "ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZjJjYzdmOGViMzRmMWE2M2I0OTFkNmE1MmUzZTgyMDgzOTNjMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T15:21:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T15:21:45Z"}, "message": "Auto merge of #76896 - spastorino:codegen-inline-fns2, r=davidtwco,wesleywiser\n\nDo not make local copies of inline fns in debug mode\n\nr? `@wesleywiser`\n\ncc `@rust-lang/wg-incr-comp`\n\nIf this is correct it supersedes https://github.com/rust-lang/rust/pull/76889\n\nRelated to #54089", "tree": {"sha": "f449c4ae5cbf5116b86f6755d8df7a7c35628498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f449c4ae5cbf5116b86f6755d8df7a7c35628498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "html_url": "https://github.com/rust-lang/rust/commit/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "937f629535f38c655267f1ed21ce6830f592f5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/937f629535f38c655267f1ed21ce6830f592f5df", "html_url": "https://github.com/rust-lang/rust/commit/937f629535f38c655267f1ed21ce6830f592f5df"}, {"sha": "07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "html_url": "https://github.com/rust-lang/rust/commit/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "18ef5d42084b8f572039112d28a8940b01325362", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "patch": "@@ -1,7 +1,6 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n-use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -79,14 +78,6 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self, tcx: TyCtxt<'tcx>) -> InstantiationMode {\n-        let generate_cgu_internal_copies = tcx\n-            .sess\n-            .opts\n-            .debugging_opts\n-            .inline_in_all_cgus\n-            .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && !tcx.sess.link_dead_code();\n-\n         match *self {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n@@ -99,21 +90,26 @@ impl<'tcx> MonoItem<'tcx> {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }\n \n+                let generate_cgu_internal_copies = tcx\n+                    .sess\n+                    .opts\n+                    .debugging_opts\n+                    .inline_in_all_cgus\n+                    .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n+                    && !tcx.sess.link_dead_code();\n+\n                 // At this point we don't have explicit linkage and we're an\n-                // inlined function. If we're inlining into all CGUs then we'll\n-                // be creating a local copy per CGU.\n+                // inlined function. If we should generate local copies for each CGU,\n+                // then return `LocalCopy`, otherwise we'll just generate one copy\n+                // and share it with all CGUs in this crate.\n                 if generate_cgu_internal_copies {\n-                    return InstantiationMode::LocalCopy;\n-                }\n-\n-                // Finally, if this is `#[inline(always)]` we're sure to respect\n-                // that with an inline copy per CGU, but otherwise we'll be\n-                // creating one copy of this `#[inline]` function which may\n-                // conflict with upstream crates as it could be an exported\n-                // symbol.\n-                match tcx.codegen_fn_attrs(instance.def_id()).inline {\n-                    InlineAttr::Always => InstantiationMode::LocalCopy,\n-                    _ => InstantiationMode::GloballyShared { may_conflict: true },\n+                    InstantiationMode::LocalCopy\n+                } else {\n+                    // Finally, if we've reached this point, then we should optimize for\n+                    // compilation speed. In that regard, we will ignore any `#[inline]`\n+                    // annotations on the function and simply codegen it as usual. This could\n+                    // conflict with upstream crates as it could be an exported symbol.\n+                    InstantiationMode::GloballyShared { may_conflict: true }\n                 }\n             }\n             MonoItem::Static(..) | MonoItem::GlobalAsm(..) => {"}, {"sha": "d6a5cb993a4677d58909a201690fc202f8539c4a", "filename": "src/test/incremental/hygiene/load_cached_hygiene.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs?ref=ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "patch": "@@ -1,5 +1,5 @@\n // revisions:rpass1 rpass2\n-// compile-flags: -Z query-dep-graph\n+// compile-flags: -Z query-dep-graph -O\n // aux-build:cached_hygiene.rs\n \n // This tests the folllowing scenario\n@@ -19,7 +19,12 @@\n // the metadata. Specifically, we were not resetting `orig_id`\n // for an `EpxnData` generate in the current crate, which would cause\n // us to serialize the `ExpnId` pointing to a garbage location in\n-// the metadata.\n+// the metadata.o\n+\n+// NOTE: We're explicitly passing the `-O` optimization flag because if optimizations are not\n+// enabled, then rustc will ignore the `#[inline(always)]` attribute which means we do not load\n+// the optimized mir for the unmodified function to be loaded and so the CGU containing that\n+// function will be reused.\n \n #![feature(rustc_attrs)]\n "}, {"sha": "735635029dac9d0d31eb74afcabc3e22130e8124", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "patch": "@@ -1,11 +1,18 @@\n // revisions:rpass1 rpass2 rpass3\n-// compile-flags: -Z query-dep-graph -g\n+// compile-flags: -Z query-dep-graph -g -O\n // aux-build:extern_crate.rs\n \n // ignore-asmjs wasm2js does not support source maps yet\n+\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n \n+// NOTE: We're explicitly passing the `-O` optimization flag because if no optimizations are\n+// requested, rustc will ignore the `#[inline]` attribute. This is a performance optimization for\n+// non-optimized builds which causes us to generate fewer copies of inlined functions when\n+// runtime performance doesn't matter. Without this flag, the function will go into a different\n+// CGU which can be reused by this crate.\n+\n #![feature(rustc_attrs)]\n \n #![rustc_partition_reused(module=\"main\", cfg=\"rpass2\")]"}, {"sha": "d12a23fbbf0137b528f3cbd2739f2407e6cd2a5f", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09", "patch": "@@ -1,7 +1,12 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=0\n+\tif ![cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b']; then \\\n+\t\techo \"not found call instruction when one was expected\"; \\\n+\t\texit 1; \\\n+\tfi\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=1\n \tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\"}]}