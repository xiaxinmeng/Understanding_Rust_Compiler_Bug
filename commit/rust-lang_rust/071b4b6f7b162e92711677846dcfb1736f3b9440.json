{"sha": "071b4b6f7b162e92711677846dcfb1736f3b9440", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWI0YjZmN2IxNjJlOTI3MTE2Nzc4NDZkY2ZiMTczNmYzYjk0NDA=", "commit": {"author": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2016-02-16T01:18:16Z"}, "committer": {"name": "Jack O'Connor", "email": "oconnor663@gmail.com", "date": "2016-02-16T02:28:54Z"}, "message": "correct the primitive char doc's use of bytes and code points\n\nPreviously the docs suggested that '\u2764\ufe0f' doesn't fit in a char because\nit's 6 bytes. But that's misleading. 'a\u031a' also doesn't fit in a char,\neven though it's only 3 bytes. The important thing is the number of code\npoints, not the number of bytes. Clarify the primitive char docs around\nthis.", "tree": {"sha": "617509e99f81e32a1510c72ea1fb4b490120b60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/617509e99f81e32a1510c72ea1fb4b490120b60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071b4b6f7b162e92711677846dcfb1736f3b9440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071b4b6f7b162e92711677846dcfb1736f3b9440", "html_url": "https://github.com/rust-lang/rust/commit/071b4b6f7b162e92711677846dcfb1736f3b9440", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071b4b6f7b162e92711677846dcfb1736f3b9440/comments", "author": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oconnor663", "id": 860932, "node_id": "MDQ6VXNlcjg2MDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/860932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oconnor663", "html_url": "https://github.com/oconnor663", "followers_url": "https://api.github.com/users/oconnor663/followers", "following_url": "https://api.github.com/users/oconnor663/following{/other_user}", "gists_url": "https://api.github.com/users/oconnor663/gists{/gist_id}", "starred_url": "https://api.github.com/users/oconnor663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oconnor663/subscriptions", "organizations_url": "https://api.github.com/users/oconnor663/orgs", "repos_url": "https://api.github.com/users/oconnor663/repos", "events_url": "https://api.github.com/users/oconnor663/events{/privacy}", "received_events_url": "https://api.github.com/users/oconnor663/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0", "html_url": "https://github.com/rust-lang/rust/commit/17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "b840e51873e3f2f40534c1b777813a3a8ca873d4", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/071b4b6f7b162e92711677846dcfb1736f3b9440/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071b4b6f7b162e92711677846dcfb1736f3b9440/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=071b4b6f7b162e92711677846dcfb1736f3b9440", "patch": "@@ -50,27 +50,30 @@ mod prim_bool { }\n /// [`String`]: string/struct.String.html\n ///\n /// As always, remember that a human intuition for 'character' may not map to\n-/// Unicode's definitions. For example, emoji symbols such as '\u2764\ufe0f' are more than\n-/// one byte; \u2764\ufe0f in particular is six:\n+/// Unicode's definitions. For example, emoji symbols such as '\u2764\ufe0f' can be more\n+/// than one Unicode code point; this \u2764\ufe0f in particular is two:\n ///\n /// ```\n /// let s = String::from(\"\u2764\ufe0f\");\n ///\n-/// // six bytes times one byte for each element\n-/// assert_eq!(6, s.len() * std::mem::size_of::<u8>());\n+/// // we get two chars out of a single \u2764\ufe0f\n+/// let mut iter = s.chars();\n+/// assert_eq!(Some('\\u{2764}'), iter.next());\n+/// assert_eq!(Some('\\u{fe0f}'), iter.next());\n+/// assert_eq!(None, iter.next());\n /// ```\n ///\n-/// This also means it won't fit into a `char`, and so trying to create a\n-/// literal with `let heart = '\u2764\ufe0f';` gives an error:\n+/// This means it won't fit into a `char`. Trying to create a literal with\n+/// `let heart = '\u2764\ufe0f';` gives an error:\n ///\n /// ```text\n /// error: character literal may only contain one codepoint: '\u2764\n /// let heart = '\u2764\ufe0f';\n ///             ^~\n /// ```\n ///\n-/// Another implication of this is that if you want to do per-`char`acter\n-/// processing, it can end up using a lot more memory:\n+/// Another implication of the 4-byte fixed size of a `char`, is that\n+/// per-`char`acter processing can end up using a lot more memory:\n ///\n /// ```\n /// let s = String::from(\"love: \u2764\ufe0f\");\n@@ -79,19 +82,6 @@ mod prim_bool { }\n /// assert_eq!(12, s.len() * std::mem::size_of::<u8>());\n /// assert_eq!(32, v.len() * std::mem::size_of::<char>());\n /// ```\n-///\n-/// Or may give you results you may not expect:\n-///\n-/// ```\n-/// let s = String::from(\"\u2764\ufe0f\");\n-///\n-/// let mut iter = s.chars();\n-///\n-/// // we get two chars out of a single \u2764\ufe0f\n-/// assert_eq!(Some('\\u{2764}'), iter.next());\n-/// assert_eq!(Some('\\u{fe0f}'), iter.next());\n-/// assert_eq!(None, iter.next());\n-/// ```\n mod prim_char { }\n \n #[doc(primitive = \"unit\")]"}]}