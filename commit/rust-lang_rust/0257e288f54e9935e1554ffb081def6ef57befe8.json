{"sha": "0257e288f54e9935e1554ffb081def6ef57befe8", "node_id": "C_kwDOAAsO6NoAKDAyNTdlMjg4ZjU0ZTk5MzVlMTU1NGZmYjA4MWRlZjZlZjU3YmVmZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-19T07:33:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-19T07:33:42Z"}, "message": "Rollup merge of #108130 - tshepang:just-one-example, r=workingjubilee\n\n\"Basic usage\" is redundant for there is just one example", "tree": {"sha": "a75957ede148117e5286f6672c3f39f271dfc2d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75957ede148117e5286f6672c3f39f271dfc2d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0257e288f54e9935e1554ffb081def6ef57befe8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8dDWCRBK7hj4Ov3rIwAAjY8IAGtWmDmznVd+YcKHPH/LHSUm\ngYS5FTUskVkT+fMT93J4GGXKqDU3TWC0bauy/8tbqVq22H44yKCvinX3Tong/v1n\nLEc5TfP0Ufa4L0lpQGRqs8bTCOaTXYfJdW+0qSTFKiXyYwVUZ3qMwKBNe3ztsEHJ\n0LLUsTNAW5qy3rn9OuFpgnbBh8JHbxUb0F7hj+65KSSi0CP8O+YuyZsztZTdw4Rg\n+DYiVKQqHVK3Mg9HAElac+ywg+dtZwa+fN3W1q4KR5Fe26ilMnaKQufVVDefzmDR\nRLpdO5dqXP9RK4RfMhiiIcwTTtALG0O+2nRDzKs3c3/FhpMSDVDoPmcoffBmVU8=\n=DD/e\n-----END PGP SIGNATURE-----\n", "payload": "tree a75957ede148117e5286f6672c3f39f271dfc2d8\nparent 4a0f088f7c0e2899c86c708ff9586c1b3fcbe203\nparent 6da64379ab1ed85a186011445edf22703bb7eb8f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676792022 +0530\ncommitter GitHub <noreply@github.com> 1676792022 +0530\n\nRollup merge of #108130 - tshepang:just-one-example, r=workingjubilee\n\n\"Basic usage\" is redundant for there is just one example\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0257e288f54e9935e1554ffb081def6ef57befe8", "html_url": "https://github.com/rust-lang/rust/commit/0257e288f54e9935e1554ffb081def6ef57befe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0257e288f54e9935e1554ffb081def6ef57befe8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0f088f7c0e2899c86c708ff9586c1b3fcbe203", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0f088f7c0e2899c86c708ff9586c1b3fcbe203", "html_url": "https://github.com/rust-lang/rust/commit/4a0f088f7c0e2899c86c708ff9586c1b3fcbe203"}, {"sha": "6da64379ab1ed85a186011445edf22703bb7eb8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da64379ab1ed85a186011445edf22703bb7eb8f", "html_url": "https://github.com/rust-lang/rust/commit/6da64379ab1ed85a186011445edf22703bb7eb8f"}], "stats": {"total": 42, "additions": 0, "deletions": 42}, "files": [{"sha": "208b220c24a94ce0b10a8120604d863a4d23ef13", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0257e288f54e9935e1554ffb081def6ef57befe8/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0257e288f54e9935e1554ffb081def6ef57befe8/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=0257e288f54e9935e1554ffb081def6ef57befe8", "patch": "@@ -525,8 +525,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_ok(), true);\n@@ -572,8 +570,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_err(), false);\n@@ -627,8 +623,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.ok(), Some(2));\n@@ -658,8 +652,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.err(), None);\n@@ -693,8 +685,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.as_ref(), Ok(&2));\n@@ -716,8 +706,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn mutate(r: &mut Result<i32, i32>) {\n     ///     match r.as_mut() {\n@@ -812,8 +800,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let k = 21;\n     ///\n@@ -841,8 +827,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn stringify(x: u32) -> String { format!(\"error code: {x}\") }\n     ///\n@@ -968,8 +952,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(7);\n     /// assert_eq!(x.iter().next(), Some(&7));\n@@ -989,8 +971,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let mut x: Result<u32, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n@@ -1031,8 +1011,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n@@ -1160,8 +1138,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n@@ -1222,8 +1198,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1259,8 +1233,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1298,8 +1270,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Err(\"late error\");\n@@ -1383,8 +1353,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<u32, &str> = Err(\"late error\");\n@@ -1426,8 +1394,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n     /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n@@ -1456,8 +1422,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let default = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n@@ -1487,8 +1451,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn count(x: &str) -> usize { x.len() }\n     ///\n@@ -1752,8 +1714,6 @@ impl<T, E> Result<Result<T, E>, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// #![feature(result_flattening)]\n     /// let x: Result<Result<&'static str, u32>, u32> = Ok(Ok(\"hello\"));\n@@ -1842,8 +1802,6 @@ impl<T, E> IntoIterator for Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(5);\n     /// let v: Vec<u32> = x.into_iter().collect();"}]}