{"sha": "4c3e330a8c023af20beb23a3a46b5d6d77a62839", "node_id": "C_kwDOAAsO6NoAKDRjM2UzMzBhOGMwMjNhZjIwYmViMjNhM2E0NmI1ZDZkNzdhNjI4Mzk", "commit": {"author": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-07T11:38:16Z"}, "committer": {"name": "Mahdi Dibaiee", "email": "mdibaiee@pm.me", "date": "2022-01-09T13:05:51Z"}, "message": "feat: pass_by_value lint attribute\n\nUseful for thin wrapper attributes that are best passed as value instead\nof reference.", "tree": {"sha": "71d1e8e05f28116e9a1da65d7f0acc8ec29ee6c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d1e8e05f28116e9a1da65d7f0acc8ec29ee6c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3e330a8c023af20beb23a3a46b5d6d77a62839", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYxDoXUzfgu5d8FXXuroRW98MWYoFAmHa3bEACgkQuroRW98M\nWYr3axAAirhBzCCS/78CMhCKtWMOxI2HdBGjhyYysXIqIJ/teRsFPaBOHolx8fO3\nFwxnpDOba6tDvPNBSa3U691sIGKukyLPWPd3o74wxi9IARxJlT4oadDTGaMLE3pG\nR6EXp3Xng0ILQF5HLO7qTySx0K5164So5HFQA4wZxwmpWXxPSkm3JVFVALNcqRBr\nEj7TaF2HUrs0nlsb7Io0isahbEP+VoeMr7wkTl5cBIcH1U/yMEjHR7PBdsobkqaI\nYC541ovaC/cfbTfHPcCtfoRhBtxfhthzlgdQFNqeHIdPejGdItSqxAjbkTPfwP+d\no2gd3QE9vLIb3CNOXtz2Xw6noEXZVO/0SiHx2FiJ7r3I14ZvdlHQZyIm6CxnZv1n\nBHHx9WPDpAfcjJwvnTGOeJ2yuHjBpa3QFXomWlWsMkVX8kfFx1LCujG/jkh9xeJu\nDOEdr11IzAAWpqO7eEl+Dw8htepM/TT+lX/EBaHxsbOZOpMXq/Ss0AdB0rzkuUVt\nbxmnnMFJGHF5nbONoJ0C2uSxa/bjf3l5p4vBpzm7FBNUH76oW5ofFIjDYbMfLAPF\nc2j3PKcmko3YdHhgn80JyWUHN5FpCXegbMpLDcUmYRqbt7qlajorHlzTlMYvKh9G\nqJOOt22iEchS95d7hZP2W27+dkBrcdD8F+J2TXKANBBZIy+uiaM=\n=jX0+\n-----END PGP SIGNATURE-----", "payload": "tree 71d1e8e05f28116e9a1da65d7f0acc8ec29ee6c2\nparent 66f64a441a05cee8d5d701477b43ed851f778f3a\nauthor Mahdi Dibaiee <mdibaiee@pm.me> 1641555496 +0000\ncommitter Mahdi Dibaiee <mdibaiee@pm.me> 1641733551 +0000\n\nfeat: pass_by_value lint attribute\n\nUseful for thin wrapper attributes that are best passed as value instead\nof reference.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e330a8c023af20beb23a3a46b5d6d77a62839", "html_url": "https://github.com/rust-lang/rust/commit/4c3e330a8c023af20beb23a3a46b5d6d77a62839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e330a8c023af20beb23a3a46b5d6d77a62839/comments", "author": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdibaiee", "id": 2807772, "node_id": "MDQ6VXNlcjI4MDc3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2807772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdibaiee", "html_url": "https://github.com/mdibaiee", "followers_url": "https://api.github.com/users/mdibaiee/followers", "following_url": "https://api.github.com/users/mdibaiee/following{/other_user}", "gists_url": "https://api.github.com/users/mdibaiee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdibaiee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdibaiee/subscriptions", "organizations_url": "https://api.github.com/users/mdibaiee/orgs", "repos_url": "https://api.github.com/users/mdibaiee/repos", "events_url": "https://api.github.com/users/mdibaiee/events{/privacy}", "received_events_url": "https://api.github.com/users/mdibaiee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f64a441a05cee8d5d701477b43ed851f778f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f64a441a05cee8d5d701477b43ed851f778f3a", "html_url": "https://github.com/rust-lang/rust/commit/66f64a441a05cee8d5d701477b43ed851f778f3a"}], "stats": {"total": 221, "additions": 165, "deletions": 56}, "files": [{"sha": "88bf81864b23f48b4aac9886d768d85e26b87fae", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -623,6 +623,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, lang_items,\n         \"language items are subject to change\",\n     ),\n+    rustc_attr!(\n+        rustc_pass_by_value, Normal,\n+        template!(Word, NameValueStr: \"reason\"), WarnFollowing,\n+        \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n+    ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         type_: Normal,"}, {"sha": "7353cd6b876b9642bbae981bd9b7d610c9f35015", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -5,10 +5,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{\n-    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n-    TyKind,\n-};\n+use rustc_hir::{GenericArg, HirId, Item, ItemKind, Node, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -58,13 +55,6 @@ declare_tool_lint! {\n     report_in_external_macro: true\n }\n \n-declare_tool_lint! {\n-    pub rustc::TY_PASS_BY_REFERENCE,\n-    Allow,\n-    \"passing `Ty` or `TyCtxt` by reference\",\n-    report_in_external_macro: true\n-}\n-\n declare_tool_lint! {\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n@@ -74,7 +64,6 @@ declare_tool_lint! {\n \n declare_lint_pass!(TyTyKind => [\n     USAGE_OF_TY_TYKIND,\n-    TY_PASS_BY_REFERENCE,\n     USAGE_OF_QUALIFIED_TY,\n ]);\n \n@@ -131,26 +120,6 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::Not }) => {\n-                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n-                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n-                        return;\n-                    }\n-                }\n-                if let Some(t) = is_ty_or_ty_ctxt(cx, &inner_ty) {\n-                    cx.struct_span_lint(TY_PASS_BY_REFERENCE, ty.span, |lint| {\n-                        lint.build(&format!(\"passing `{}` by reference\", t))\n-                            .span_suggestion(\n-                                ty.span,\n-                                \"try passing by value\",\n-                                t,\n-                                // Changing type of function argument\n-                                Applicability::MaybeIncorrect,\n-                            )\n-                            .emit();\n-                    })\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "3b95a2487baedf7b11cad641b337e777fc36a175", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -56,6 +56,7 @@ mod non_ascii_idents;\n mod non_fmt_panic;\n mod nonstandard_style;\n mod noop_method_call;\n+mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -85,6 +86,7 @@ use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n use noop_method_call::*;\n+use pass_by_value::*;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -489,15 +491,17 @@ fn register_internals(store: &mut LintStore) {\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| Box::new(TyTyKind));\n+    store.register_lints(&PassByValue::get_lints());\n+    store.register_late_pass(|| Box::new(PassByValue));\n     store.register_group(\n         false,\n         \"rustc::internal\",\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(PASS_BY_VALUE),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n-            LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n             LintId::of(EXISTING_DOC_KEYWORD),\n         ],"}, {"sha": "0bfa2a673c2c484d83211a4fe2a83c05493a7924", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -0,0 +1,103 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{GenericArg, PathSegment, QPath, TyKind};\n+use rustc_middle::ty;\n+use rustc_span::symbol::sym;\n+\n+declare_tool_lint! {\n+    /// The `rustc_pass_by_value` lint marks a type with `#[rustc_pass_by_value]` requiring it to always be passed by value.\n+    /// This is usually used for types that are thin wrappers around references, so there is no benefit to an extra\n+    /// layer of indirection. (Example: `Ty` which is a reference to a `TyS`)\n+    pub rustc::PASS_BY_VALUE,\n+    Warn,\n+    \"pass by reference of a type flagged as `#[rustc_pass_by_value]`\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(PassByValue => [PASS_BY_VALUE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PassByValue {\n+    fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n+        match &ty.kind {\n+            TyKind::Rptr(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n+                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n+                        return;\n+                    }\n+                }\n+                if let Some(t) = path_for_pass_by_value(cx, &inner_ty) {\n+                    cx.struct_span_lint(PASS_BY_VALUE, ty.span, |lint| {\n+                        lint.build(&format!(\"passing `{}` by reference\", t))\n+                            .span_suggestion(\n+                                ty.span,\n+                                \"try passing by value\",\n+                                t,\n+                                // Changing type of function argument\n+                                Applicability::MaybeIncorrect,\n+                            )\n+                            .emit();\n+                    })\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<String> {\n+    if let TyKind::Path(QPath::Resolved(_, path)) = &ty.kind {\n+        match path.res {\n+            Res::Def(_, def_id) if has_pass_by_value_attr(cx, def_id) => {\n+                if let Some(name) = cx.tcx.get_diagnostic_name(def_id) {\n+                    return Some(format!(\"{}{}\", name, gen_args(path.segments.last().unwrap())));\n+                }\n+            }\n+            Res::SelfTy(None, Some((did, _))) => {\n+                if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                    if has_pass_by_value_attr(cx, adt.did) {\n+                        if let Some(name) = cx.tcx.get_diagnostic_name(adt.did) {\n+                            return Some(format!(\"{}<{}>\", name, substs[0]));\n+                        }\n+                    }\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn has_pass_by_value_attr(cx: &LateContext<'_>, def_id: DefId) -> bool {\n+    for attr in cx.tcx.get_attrs(def_id).iter() {\n+        if attr.has_name(sym::rustc_pass_by_value) {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn gen_args(segment: &PathSegment<'_>) -> String {\n+    if let Some(args) = &segment.args {\n+        let lifetimes = args\n+            .args\n+            .iter()\n+            .filter_map(|arg| {\n+                if let GenericArg::Lifetime(lt) = arg {\n+                    Some(lt.name.ident().to_string())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !lifetimes.is_empty() {\n+            return format!(\"<{}>\", lifetimes.join(\", \"));\n+        }\n+    }\n+\n+    String::new()\n+}"}, {"sha": "ab85f104ce39894d0969b5fd3d70df5acb32ad63", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -961,6 +961,7 @@ pub struct FreeRegionInfo {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }"}, {"sha": "365d4c4aabaad23bea122a4c1bf6560b7ed18626", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -462,6 +462,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n }\n \n #[rustc_diagnostic_item = \"Ty\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl ty::EarlyBoundRegion {"}, {"sha": "2febb2e56ecf87a77ce835cd7438a3f1bf436166", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -114,6 +114,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1066,6 +1067,29 @@ impl CheckAttrVisitor<'_> {\n         is_valid\n     }\n \n+    /// Warns against some misuses of `#[pass_by_value]`\n+    fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Struct\n+            | Target::Enum\n+            | Target::Union\n+            | Target::Trait\n+            | Target::TraitAlias\n+            | Target::TyAlias => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"`pass_by_value` attribute should be applied to a struct, enum, trait or type alias.\",\n+                    )\n+                    .span_label(*span, \"is not a struct, enum, trait or type alias\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(\n         &self,"}, {"sha": "b1d868fbb88f607dcd7524e3709ad2bb31733465", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -1143,6 +1143,7 @@ symbols! {\n         rustc_paren_sugar,\n         rustc_partition_codegened,\n         rustc_partition_reused,\n+        rustc_pass_by_value,\n         rustc_peek,\n         rustc_peek_definite_init,\n         rustc_peek_liveness,"}, {"sha": "783019d89451378ae125fbfb85ffbb2eaf4631a2", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n extern crate rustc_middle;", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs"}, {"sha": "5fbde9387893131749e16ed5fa2d548a3a3758c1", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -1,77 +1,77 @@\n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:13:13\n+  --> $DIR/rustc_pass_by_value.rs:13:13\n    |\n LL |     ty_ref: &Ty<'_>,\n    |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n    |\n note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref.rs:4:9\n+  --> $DIR/rustc_pass_by_value.rs:4:9\n    |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:15:18\n+  --> $DIR/rustc_pass_by_value.rs:15:18\n    |\n LL |     ty_ctxt_ref: &TyCtxt<'_>,\n    |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:28\n+  --> $DIR/rustc_pass_by_value.rs:19:28\n    |\n LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:55\n+  --> $DIR/rustc_pass_by_value.rs:19:55\n    |\n LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:26:17\n+  --> $DIR/rustc_pass_by_value.rs:26:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:28:22\n+  --> $DIR/rustc_pass_by_value.rs:28:22\n    |\n LL |         ty_ctxt_ref: &TyCtxt<'_>,\n    |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:41\n+  --> $DIR/rustc_pass_by_value.rs:31:41\n    |\n LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n    |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:68\n+  --> $DIR/rustc_pass_by_value.rs:31:68\n    |\n LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n    |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:53:17\n+  --> $DIR/rustc_pass_by_value.rs:53:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:55:22\n+  --> $DIR/rustc_pass_by_value.rs:55:22\n    |\n LL |         ty_ctxt_ref: &TyCtxt<'_>,\n    |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n \n error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:38\n+  --> $DIR/rustc_pass_by_value.rs:59:38\n    |\n LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:65\n+  --> $DIR/rustc_pass_by_value.rs:59:65\n    |\n LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n    |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr"}, {"sha": "8877148bb56bd92135974a378f76829284d4050d", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -5,10 +5,11 @@\n // Considering that all other `internal-lints` are tested here\n // this seems like the cleaner solution though.\n #![feature(rustc_attrs)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n #[rustc_diagnostic_item = \"TyCtxt\"]\n+#[rustc_pass_by_value]\n struct TyCtxt<'tcx> {\n     inner: &'tcx (),\n }\n@@ -18,12 +19,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn by_ref(&self) {} //~ ERROR passing `TyCtxt<'tcx>` by reference\n }\n \n-\n struct TyS<'tcx> {\n     inner: &'tcx (),\n }\n \n #[rustc_diagnostic_item = \"Ty\"]\n+#[rustc_pass_by_value]\n type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> TyS<'tcx> {", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs"}, {"sha": "f86aea95aa7c6c3ebaeb91caabaed872cf805c5f", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c3e330a8c023af20beb23a3a46b5d6d77a62839/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr?ref=4c3e330a8c023af20beb23a3a46b5d6d77a62839", "patch": "@@ -1,17 +1,17 @@\n error: passing `TyCtxt<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:18:15\n+  --> $DIR/rustc_pass_by_value_self.rs:19:15\n    |\n LL |     fn by_ref(&self) {}\n    |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n    |\n note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref_self.rs:8:9\n+  --> $DIR/rustc_pass_by_value_self.rs:8:9\n    |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: passing `Ty<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:31:21\n+  --> $DIR/rustc_pass_by_value_self.rs:32:21\n    |\n LL |     fn by_ref(self: &Ty<'tcx>) {}\n    |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.stderr"}]}