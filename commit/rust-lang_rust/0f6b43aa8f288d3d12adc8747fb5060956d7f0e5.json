{"sha": "0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNmI0M2FhOGYyODhkM2QxMmFkYzg3NDdmYjUwNjA5NTZkN2YwZTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-08T11:02:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-03-08T11:16:32Z"}, "message": "Remove unneeded `Send` bounds from `std::sync::mpsc`.\n\nThe requirements `T: Send` only matter if the channel crosses thread\nboundaries i.e. the `Sender` or `Reciever` are sent across thread\nboundaries, and which is adequately controlled by the impls of `Send`\nfor them. If `T` doesn't satisfy the bounds, then the types cannot cross\nthread boundaries and so everything is still safe (the pair of types\ncollectively behave like a `Rc<RefCell<VecDeque>>`, or something of that\nnature).", "tree": {"sha": "1639424ddb7202a5b6acefa7f75825d6f768bd5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1639424ddb7202a5b6acefa7f75825d6f768bd5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "html_url": "https://github.com/rust-lang/rust/commit/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d070f228a101a806165a434b150a59a54f08ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d070f228a101a806165a434b150a59a54f08ba", "html_url": "https://github.com/rust-lang/rust/commit/25d070f228a101a806165a434b150a59a54f08ba"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "6ce94592c95c0226ea50d1ebf28ce56d66970e5a", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -485,7 +485,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// println!(\"{:?}\", rx.recv().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n+pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n@@ -525,7 +525,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(rx.recv().unwrap(), 2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sync_channel<T: Send>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n+pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n@@ -534,7 +534,7 @@ pub fn sync_channel<T: Send>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n // Sender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Sender<T> {\n+impl<T> Sender<T> {\n     fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n@@ -616,7 +616,7 @@ impl<T: Send> Sender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for Sender<T> {\n+impl<T> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n@@ -662,7 +662,7 @@ impl<T: Send> Clone for Sender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Sender<T> {\n+impl<T> Drop for Sender<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n@@ -677,7 +677,7 @@ impl<T: Send> Drop for Sender<T> {\n // SyncSender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> SyncSender<T> {\n+impl<T> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n@@ -717,7 +717,7 @@ impl<T: Send> SyncSender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for SyncSender<T> {\n+impl<T> Clone for SyncSender<T> {\n     fn clone(&self) -> SyncSender<T> {\n         unsafe { (*self.inner.get()).clone_chan(); }\n         return SyncSender::new(self.inner.clone());\n@@ -726,7 +726,7 @@ impl<T: Send> Clone for SyncSender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for SyncSender<T> {\n+impl<T> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n         unsafe { (*self.inner.get()).drop_chan(); }\n     }\n@@ -736,7 +736,7 @@ impl<T: Send> Drop for SyncSender<T> {\n // Receiver\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Receiver<T> {\n+impl<T> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n         Receiver { inner: UnsafeCell::new(inner) }\n     }\n@@ -855,7 +855,7 @@ impl<T: Send> Receiver<T> {\n     }\n }\n \n-impl<T: Send> select::Packet for Receiver<T> {\n+impl<T> select::Packet for Receiver<T> {\n     fn can_recv(&self) -> bool {\n         loop {\n             let new_port = match *unsafe { self.inner() } {\n@@ -942,15 +942,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: Send> Iterator for Iter<'a, T> {\n+impl<'a, T> Iterator for Iter<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Receiver<T> {\n+impl<T> Drop for Receiver<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_port(); },"}, {"sha": "8b6672e0c27fe20ae9641b1716004f6f54e86bcd", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -89,7 +89,7 @@ impl<T> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T> Queue<T> {\n     /// Creates a new queue that is safe to share among multiple producers and\n     /// one consumer.\n     pub fn new() -> Queue<T> {\n@@ -140,7 +140,7 @@ impl<T: Send> Queue<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.tail.get();"}, {"sha": "c6e8d87a22e71412c234f05de9694b2283779f73", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -88,7 +88,7 @@ enum MyUpgrade<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             data: None,\n@@ -368,7 +368,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.state.load(Ordering::SeqCst), DISCONNECTED);\n     }"}, {"sha": "b611ad3c35d29e78b03a93db37960441985a7662", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -64,7 +64,7 @@ pub enum Failure {\n     Disconnected,\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     // Creation of a packet *must* be followed by a call to postinit_lock\n     // and later by inherit_blocker\n     pub fn new() -> Packet<T> {\n@@ -474,7 +474,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "c75ac13080866ce2a0f3376a91cf830af7691ac0", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -78,7 +78,7 @@ unsafe impl<T: Send> Send for Queue<T> { }\n \n unsafe impl<T: Send> Sync for Queue<T> { }\n \n-impl<T: Send> Node<T> {\n+impl<T> Node<T> {\n     fn new() -> *mut Node<T> {\n         unsafe {\n             boxed::into_raw(box Node {\n@@ -89,7 +89,7 @@ impl<T: Send> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T> Queue<T> {\n     /// Creates a new queue.\n     ///\n     /// This is unsafe as the type system doesn't enforce a single\n@@ -227,7 +227,7 @@ impl<T: Send> Queue<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.first.get();"}, {"sha": "f0363fae84f73f16ecdbf78f13e8006677eab7f3", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -74,7 +74,7 @@ enum Message<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             queue: unsafe { spsc::Queue::new(128) },\n@@ -472,7 +472,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "6221ca59b54f7094e0d47b102bd8ece1e57e30af", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "patch": "@@ -113,10 +113,10 @@ pub enum Failure {\n \n /// Atomically blocks the current thread, placing it into `slot`, unlocking `lock`\n /// in the meantime. This re-locks the mutex upon returning.\n-fn wait<'a, 'b, T: Send>(lock: &'a Mutex<State<T>>,\n-                         mut guard: MutexGuard<'b, State<T>>,\n-                         f: fn(SignalToken) -> Blocker)\n-                         -> MutexGuard<'a, State<T>>\n+fn wait<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n+                   mut guard: MutexGuard<'b, State<T>>,\n+                   f: fn(SignalToken) -> Blocker)\n+                   -> MutexGuard<'a, State<T>>\n {\n     let (wait_token, signal_token) = blocking::tokens();\n     match mem::replace(&mut guard.blocker, f(signal_token)) {\n@@ -136,7 +136,7 @@ fn wakeup<T>(token: SignalToken, guard: MutexGuard<State<T>>) {\n     token.signal();\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new(cap: usize) -> Packet<T> {\n         Packet {\n             channels: AtomicUsize::new(1),\n@@ -412,7 +412,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.channels.load(Ordering::SeqCst), 0);\n         let mut guard = self.lock.lock().unwrap();"}]}