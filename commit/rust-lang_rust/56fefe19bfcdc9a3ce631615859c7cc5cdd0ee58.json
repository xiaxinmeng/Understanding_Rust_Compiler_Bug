{"sha": "56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58", "node_id": "C_kwDOAAsO6NoAKDU2ZmVmZTE5YmZjZGM5YTNjZTYzMTYxNTg1OWM3Y2M1Y2RkMGVlNTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T23:50:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T00:19:02Z"}, "message": "cargo-miri: write the Xargo project files atomically", "tree": {"sha": "9d701999dd8987f612f6f15c862d7ca43498d40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d701999dd8987f612f6f15c862d7ca43498d40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58", "html_url": "https://github.com/rust-lang/rust/commit/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220df5f3cffed318354880f16183b28f3d9f38c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/220df5f3cffed318354880f16183b28f3d9f38c7", "html_url": "https://github.com/rust-lang/rust/commit/220df5f3cffed318354880f16183b28f3d9f38c7"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "c4ed92d038524d5d83ba49111cce20a2be86b3b3", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=56fefe19bfcdc9a3ce631615859c7cc5cdd0ee58", "patch": "@@ -319,6 +319,23 @@ fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n     }\n }\n \n+/// Writes the given content to the given file *cross-process atomically*, in the sense that another\n+/// process concurrently reading that file will see either the old content or the new content, but\n+/// not some intermediate (e.g., empty) state.\n+///\n+/// We assume no other parts of this same process are trying to read or write that file.\n+fn write_to_file(filename: &Path, content: &str) {\n+    // Create a temporary file with the desired contents.\n+    let mut temp_filename = filename.as_os_str().to_os_string();\n+    temp_filename.push(&format!(\".{}\", std::process::id()));\n+    let mut temp_file = File::create(&temp_filename).unwrap();\n+    temp_file.write_all(content.as_bytes()).unwrap();\n+    drop(temp_file);\n+\n+    // Move file to the desired location.\n+    fs::rename(temp_filename, filename).unwrap();\n+}\n+\n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n@@ -398,28 +415,25 @@ fn setup(subcommand: MiriCommand) {\n     if !dir.exists() {\n         fs::create_dir_all(&dir).unwrap();\n     }\n-    let mut xargo_toml = File::create(dir.join(\"Xargo.toml\")).unwrap();\n-    if std::env::var_os(\"MIRI_NO_STD\").is_none() {\n-        // The interesting bit: Xargo.toml (only needs content if we actually need std)\n-        xargo_toml\n-            .write_all(\n-                br#\"\n+    // The interesting bit: Xargo.toml (only needs content if we actually need std)\n+    let xargo_toml = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n+        \"\"\n+    } else {\n+        r#\"\n [dependencies.std]\n default_features = false\n # We support unwinding, so enable that panic runtime.\n features = [\"panic_unwind\", \"backtrace\"]\n \n [dependencies.test]\n-\"#,\n-            )\n-            .unwrap();\n-    }\n+\"#\n+    };\n+    write_to_file(&dir.join(\"Xargo.toml\"), xargo_toml);\n     // The boring bits: a dummy project for xargo.\n     // FIXME: With xargo-check, can we avoid doing this?\n-    File::create(dir.join(\"Cargo.toml\"))\n-        .unwrap()\n-        .write_all(\n-            br#\"\n+    write_to_file(\n+        &dir.join(\"Cargo.toml\"),\n+        r#\"\n [package]\n name = \"miri-xargo\"\n description = \"A dummy project for building libstd with xargo.\"\n@@ -428,9 +442,8 @@ version = \"0.0.0\"\n [lib]\n path = \"lib.rs\"\n \"#,\n-        )\n-        .unwrap();\n-    File::create(dir.join(\"lib.rs\")).unwrap().write_all(b\"#![no_std]\").unwrap();\n+    );\n+    write_to_file(&dir.join(\"lib.rs\"), \"#![no_std]\");\n \n     // Determine architectures.\n     // We always need to set a target so rustc bootstrap can tell apart host from target crates."}]}