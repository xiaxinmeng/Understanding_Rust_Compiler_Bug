{"sha": "6cfc196d424d50e39c3f697b213a62ff8df9979b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZmMxOTZkNDI0ZDUwZTM5YzNmNjk3YjIxM2E2MmZmOGRmOTk3OWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-06T16:12:18Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-06T16:12:18Z"}, "message": "libstd: rename c_vec::size to len.", "tree": {"sha": "edabae91db5ab67a856753808009e58bec80f544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edabae91db5ab67a856753808009e58bec80f544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cfc196d424d50e39c3f697b213a62ff8df9979b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfc196d424d50e39c3f697b213a62ff8df9979b", "html_url": "https://github.com/rust-lang/rust/commit/6cfc196d424d50e39c3f697b213a62ff8df9979b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cfc196d424d50e39c3f697b213a62ff8df9979b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e68803891dc384e8c3e5a24bb17700187d86cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e68803891dc384e8c3e5a24bb17700187d86cf7", "html_url": "https://github.com/rust-lang/rust/commit/3e68803891dc384e8c3e5a24bb17700187d86cf7"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "949c8d007a764430416b1802114e7e5b3b630bcd", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6cfc196d424d50e39c3f697b213a62ff8df9979b/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfc196d424d50e39c3f697b213a62ff8df9979b/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=6cfc196d424d50e39c3f697b213a62ff8df9979b", "patch": "@@ -31,7 +31,7 @@ taken to ensure that a reference to the c_vec::t is still held if needed.\n export t;\n export create, create_with_dtor;\n export get, set;\n-export size;\n+export len;\n export ptr;\n \n /*\n@@ -43,7 +43,7 @@ export ptr;\n  */\n \n tag t<T> {\n-    t({ base: *mutable T, size: uint, rsrc: @dtor_res});\n+    t({ base: *mutable T, len: uint, rsrc: @dtor_res});\n }\n \n resource dtor_res(dtor: option::t<fn@()>) {\n@@ -60,37 +60,37 @@ resource dtor_res(dtor: option::t<fn@()>) {\n /*\n Function: create\n \n-Create a c_vec::t from a native buffer with a given size.\n+Create a c_vec::t from a native buffer with a given length.\n \n Parameters:\n \n base - A native pointer to a buffer\n-size - The number of elements in the buffer\n+len - The number of elements in the buffer\n */\n-unsafe fn create<T>(base: *mutable T, size: uint) -> t<T> {\n+unsafe fn create<T>(base: *mutable T, len: uint) -> t<T> {\n     ret t({base: base,\n-           size: size,\n+           len: len,\n            rsrc: @dtor_res(option::none)\n           });\n }\n \n /*\n Function: create_with_dtor\n \n-Create a c_vec::t from a native buffer, with a given size,\n+Create a c_vec::t from a native buffer, with a given length,\n and a function to run upon destruction.\n \n Parameters:\n \n base - A native pointer to a buffer\n-size - The number of elements in the buffer\n+len - The number of elements in the buffer\n dtor - A function to run when the value is destructed, useful\n        for freeing the buffer, etc.\n */\n-unsafe fn create_with_dtor<T>(base: *mutable T, size: uint, dtor: fn@())\n+unsafe fn create_with_dtor<T>(base: *mutable T, len: uint, dtor: fn@())\n   -> t<T> {\n     ret t({base: base,\n-           size: size,\n+           len: len,\n            rsrc: @dtor_res(option::some(dtor))\n           });\n }\n@@ -109,7 +109,7 @@ Failure:\n If `ofs` is greater or equal to the length of the vector\n */\n fn get<T: copy>(t: t<T>, ofs: uint) -> T {\n-    assert ofs < (*t).size;\n+    assert ofs < len(t);\n     ret unsafe { *ptr::mut_offset((*t).base, ofs) };\n }\n \n@@ -123,22 +123,21 @@ Failure:\n If `ofs` is greater or equal to the length of the vector\n */\n fn set<T: copy>(t: t<T>, ofs: uint, v: T) {\n-    assert ofs < (*t).size;\n+    assert ofs < len(t);\n     unsafe { *ptr::mut_offset((*t).base, ofs) = v };\n }\n \n /*\n  Section: Elimination forms\n  */\n \n-// FIXME: Rename to len\n /*\n-Function: size\n+Function: len\n \n Returns the length of the vector\n */\n-fn size<T>(t: t<T>) -> uint {\n-    ret (*t).size;\n+fn len<T>(t: t<T>) -> uint {\n+    ret (*t).len;\n }\n \n /*"}, {"sha": "26a67e03f6349dc7933cc8965359182d048c641e", "filename": "src/test/stdtest/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfc196d424d50e39c3f697b213a62ff8df9979b/src%2Ftest%2Fstdtest%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfc196d424d50e39c3f697b213a62ff8df9979b/src%2Ftest%2Fstdtest%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fc_vec.rs?ref=6cfc196d424d50e39c3f697b213a62ff8df9979b", "patch": "@@ -28,7 +28,7 @@ fn test_basic() {\n     set(cv, 4u, 9u8);\n     assert get(cv, 3u) == 8u8;\n     assert get(cv, 4u) == 9u8;\n-    assert size(cv) == 16u;\n+    assert len(cv) == 16u;\n }\n \n #[test]"}]}