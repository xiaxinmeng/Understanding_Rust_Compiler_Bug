{"sha": "e805cb6374550190f8b3c4582fe67ae40d5b7a16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDVjYjYzNzQ1NTAxOTBmOGIzYzQ1ODJmZTY3YWU0MGQ1YjdhMTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-29T12:32:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-29T12:32:35Z"}, "message": "Add io::Error doc examples", "tree": {"sha": "bbc783fab6e48b54a6aa6b75f2fb84bbfe7d762f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbc783fab6e48b54a6aa6b75f2fb84bbfe7d762f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e805cb6374550190f8b3c4582fe67ae40d5b7a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e805cb6374550190f8b3c4582fe67ae40d5b7a16", "html_url": "https://github.com/rust-lang/rust/commit/e805cb6374550190f8b3c4582fe67ae40d5b7a16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e805cb6374550190f8b3c4582fe67ae40d5b7a16/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1523a5480a8abb717f9afcffe5b149579d8e5d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1523a5480a8abb717f9afcffe5b149579d8e5d3c", "html_url": "https://github.com/rust-lang/rust/commit/1523a5480a8abb717f9afcffe5b149579d8e5d3c"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "63016a1a7959445c32bae3b89b8836a09725d8f4", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/e805cb6374550190f8b3c4582fe67ae40d5b7a16/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e805cb6374550190f8b3c4582fe67ae40d5b7a16/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=e805cb6374550190f8b3c4582fe67ae40d5b7a16", "patch": "@@ -208,6 +208,14 @@ impl Error {\n     /// This function reads the value of `errno` for the target platform (e.g.\n     /// `GetLastError` on Windows) and will return a corresponding instance of\n     /// `Error` for the error code.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::Error;\n+    ///\n+    /// println!(\"last OS error: {:?}\", Error::last_os_error());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn last_os_error() -> Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n@@ -248,6 +256,27 @@ impl Error {\n     /// If this `Error` was constructed via `last_os_error` or\n     /// `from_raw_os_error`, then this function will return `Some`, otherwise\n     /// it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_os_error(err: &Error) {\n+    ///     if let Some(raw_os_err) = err.raw_os_error() {\n+    ///         println!(\"raw OS error: {:?}\", raw_os_err);\n+    ///     } else {\n+    ///         println!(\"Not an OS error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"raw OS error: ...\".\n+    ///     print_os_error(&Error::last_os_error());\n+    ///     // Will print \"Not an OS error\".\n+    ///     print_os_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -260,6 +289,27 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: &Error) {\n+    ///     if let Some(inner_err) = err.get_ref() {\n+    ///         println!(\"Inner error: {:?}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(&Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(&Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n         match self.repr {\n@@ -273,6 +323,63 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    /// use std::{error, fmt};\n+    /// use std::fmt::Display;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct MyError {\n+    ///     v: String,\n+    /// }\n+    ///\n+    /// impl MyError {\n+    ///     fn new() -> MyError {\n+    ///         MyError {\n+    ///             v: \"oh no!\".to_owned()\n+    ///         }\n+    ///     }\n+    ///\n+    ///     fn change_message(&mut self, new_message: &str) {\n+    ///         self.v = new_message.to_owned();\n+    ///     }\n+    /// }\n+    ///\n+    /// impl error::Error for MyError {\n+    ///     fn description(&self) -> &str { &self.v }\n+    /// }\n+    ///\n+    /// impl Display for MyError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"MyError: {}\", &self.v)\n+    ///     }\n+    /// }\n+    ///\n+    /// fn change_error(mut err: Error) -> Error {\n+    ///     if let Some(inner_err) = err.get_mut() {\n+    ///         inner_err.downcast_mut::<MyError>().unwrap().change_message(\"I've been changed!\");\n+    ///     }\n+    ///     err\n+    /// }\n+    ///\n+    /// fn print_error(err: &Error) {\n+    ///     if let Some(inner_err) = err.get_ref() {\n+    ///         println!(\"Inner error: {}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(&change_error(Error::last_os_error()));\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(&change_error(Error::new(ErrorKind::Other, MyError::new())));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n         match self.repr {\n@@ -285,6 +392,27 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `new` then this function will\n     /// return `Some`, otherwise it will return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: Error) {\n+    ///     if let Some(inner_err) = err.into_inner() {\n+    ///         println!(\"Inner error: {}\", inner_err);\n+    ///     } else {\n+    ///         println!(\"No inner error\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(Error::new(ErrorKind::Other, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n     pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n         match self.repr {\n@@ -294,6 +422,23 @@ impl Error {\n     }\n \n     /// Returns the corresponding `ErrorKind` for this error.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// fn print_error(err: Error) {\n+    ///     println!(\"{:?}\", err.kind());\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     // Will print \"No inner error\".\n+    ///     print_error(Error::last_os_error());\n+    ///     // Will print \"Inner error: ...\".\n+    ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {"}]}