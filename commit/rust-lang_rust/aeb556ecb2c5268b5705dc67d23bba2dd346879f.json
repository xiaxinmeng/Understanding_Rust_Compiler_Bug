{"sha": "aeb556ecb2c5268b5705dc67d23bba2dd346879f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYjU1NmVjYjJjNTI2OGI1NzA1ZGM2N2QyM2JiYTJkZDM0Njg3OWY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-04-24T14:22:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-24T14:22:40Z"}, "message": "Merge pull request #3522 from topecongiro/issue-3521\n\nAdd a path to the parent dir of rustfmt.toml as a prefix to paths in ignore", "tree": {"sha": "407b6e9e657400c4ab90c0b1abd453b81b0d30d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407b6e9e657400c4ab90c0b1abd453b81b0d30d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb556ecb2c5268b5705dc67d23bba2dd346879f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwHEwCRBK7hj4Ov3rIwAAdHIIAB4B+RRuR7Oq47JlVc1pQ3ME\n5iF48V0xZ8su7Wan5tU8af7Pi/ovfoQya6VThtSRi08e24kqGdsCy8iZ3jTN5V0E\n71JgOHmAw6XmdEtj9XyWmR0DpJlwNsXft53Hecnicbei4KCC9UcGHiPraGa9jRPq\nEM5/1ZXla6wSUkCMipKlFFONhc0LaA2saYRmAq1emSi+Cyy4VweHMv5zSMeqLzHh\nIjdGyXgoNEidKpaHzfvO614tIgrLf6fn8RKBEQVXb5n0cbSveMXKxo/6+yL8wEmg\naeg827Jyd0NThRJOEvPUWcqcOlRhNPaN+VxXnuQefth/x6xYdO6HDBBzSUiAY0E=\n=ur6q\n-----END PGP SIGNATURE-----\n", "payload": "tree 407b6e9e657400c4ab90c0b1abd453b81b0d30d0\nparent 05547d90b51a089e789ba29be5b2e11099235709\nparent f520f7e0f8e2046f431315b7fdd5ca14531ffa8e\nauthor Seiichi Uchida <seuchida@gmail.com> 1556115760 -0700\ncommitter GitHub <noreply@github.com> 1556115760 -0700\n\nMerge pull request #3522 from topecongiro/issue-3521\n\nAdd a path to the parent dir of rustfmt.toml as a prefix to paths in ignore"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb556ecb2c5268b5705dc67d23bba2dd346879f", "html_url": "https://github.com/rust-lang/rust/commit/aeb556ecb2c5268b5705dc67d23bba2dd346879f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb556ecb2c5268b5705dc67d23bba2dd346879f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05547d90b51a089e789ba29be5b2e11099235709", "url": "https://api.github.com/repos/rust-lang/rust/commits/05547d90b51a089e789ba29be5b2e11099235709", "html_url": "https://github.com/rust-lang/rust/commit/05547d90b51a089e789ba29be5b2e11099235709"}, {"sha": "f520f7e0f8e2046f431315b7fdd5ca14531ffa8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f520f7e0f8e2046f431315b7fdd5ca14531ffa8e", "html_url": "https://github.com/rust-lang/rust/commit/f520f7e0f8e2046f431315b7fdd5ca14531ffa8e"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "7c4298dcf1c099b59e149c666780ad58110b900f", "filename": "src/config/config_type.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -141,7 +141,7 @@ macro_rules! create_config {\n                 ConfigWasSet(self)\n             }\n \n-            fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n+            fn fill_from_parsed_config(mut self, parsed: PartialConfig, dir: &Path) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n                     if self.$i.3 {\n@@ -160,6 +160,7 @@ macro_rules! create_config {\n             )+\n                 self.set_heuristics();\n                 self.set_license_template();\n+                self.set_ignore(dir);\n                 self\n             }\n \n@@ -286,6 +287,9 @@ macro_rules! create_config {\n                 }\n             }\n \n+            fn set_ignore(&mut self, dir: &Path) {\n+                self.ignore.2.add_prefix(dir);\n+            }\n \n             /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {"}, {"sha": "c0221e93e0259b5ca383a4df3ce63e50ba3a09fd", "filename": "src/config/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -190,7 +190,8 @@ impl Config {\n         let mut file = File::open(&file_path)?;\n         let mut toml = String::new();\n         file.read_to_string(&mut toml)?;\n-        Config::from_toml(&toml).map_err(|err| Error::new(ErrorKind::InvalidData, err))\n+        Config::from_toml(&toml, file_path.parent().unwrap())\n+            .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n     }\n \n     /// Resolves the config for input in `dir`.\n@@ -252,7 +253,7 @@ impl Config {\n         }\n     }\n \n-    pub(crate) fn from_toml(toml: &str) -> Result<Config, String> {\n+    pub(crate) fn from_toml(toml: &str, dir: &Path) -> Result<Config, String> {\n         let parsed: ::toml::Value = toml\n             .parse()\n             .map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n@@ -271,7 +272,7 @@ impl Config {\n                 if !err.is_empty() {\n                     eprint!(\"{}\", err);\n                 }\n-                Ok(Config::default().fill_from_parsed_config(parsed_config))\n+                Ok(Config::default().fill_from_parsed_config(parsed_config, dir))\n             }\n             Err(e) => {\n                 err.push_str(\"Error: Decoding config file failed:\\n\");\n@@ -425,7 +426,7 @@ mod test {\n \n     #[test]\n     fn test_was_set() {\n-        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+        let config = Config::from_toml(\"hard_tabs = true\", Path::new(\"\")).unwrap();\n \n         assert_eq!(config.was_set().hard_tabs(), true);\n         assert_eq!(config.was_set().verbose(), false);"}, {"sha": "bded90b869339e325ddc961c37cd300c05acfacc", "filename": "src/config/options.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -1,7 +1,9 @@\n use std::collections::{hash_set, HashSet};\n+use std::fmt;\n use std::path::{Path, PathBuf};\n \n use atty;\n+use serde::de::{Deserialize, Deserializer, SeqAccess, Visitor};\n \n use crate::config::config_type::ConfigType;\n use crate::config::lists::*;\n@@ -396,33 +398,63 @@ impl Default for EmitMode {\n }\n \n /// A set of directories, files and modules that rustfmt should ignore.\n-#[derive(Default, Deserialize, Serialize, Clone, Debug, PartialEq)]\n-pub struct IgnoreList(HashSet<PathBuf>);\n+#[derive(Default, Serialize, Clone, Debug, PartialEq)]\n+pub struct IgnoreList {\n+    /// A set of path specified in rustfmt.toml.\n+    #[serde(flatten)]\n+    path_set: HashSet<PathBuf>,\n+    /// A path to rustfmt.toml.\n+    #[serde(skip_serializing)]\n+    rustfmt_toml_path: PathBuf,\n+}\n+\n+impl<'de> Deserialize<'de> for IgnoreList {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        struct HashSetVisitor;\n+        impl<'v> Visitor<'v> for HashSetVisitor {\n+            type Value = HashSet<PathBuf>;\n+\n+            fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                formatter.write_str(\"a sequence of path\")\n+            }\n+\n+            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>\n+            where\n+                A: SeqAccess<'v>,\n+            {\n+                let mut path_set = HashSet::new();\n+                while let Some(elem) = seq.next_element()? {\n+                    path_set.insert(elem);\n+                }\n+                Ok(path_set)\n+            }\n+        }\n+        Ok(IgnoreList {\n+            path_set: deserializer.deserialize_seq(HashSetVisitor)?,\n+            rustfmt_toml_path: PathBuf::new(),\n+        })\n+    }\n+}\n \n impl<'a> IntoIterator for &'a IgnoreList {\n     type Item = &'a PathBuf;\n     type IntoIter = hash_set::Iter<'a, PathBuf>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        self.0.iter()\n+        self.path_set.iter()\n     }\n }\n \n impl IgnoreList {\n     pub fn add_prefix(&mut self, dir: &Path) {\n-        self.0 = self\n-            .0\n-            .iter()\n-            .map(|s| {\n-                if s.has_root() {\n-                    s.clone()\n-                } else {\n-                    let mut path = PathBuf::from(dir);\n-                    path.push(s);\n-                    path\n-                }\n-            })\n-            .collect();\n+        self.rustfmt_toml_path = dir.to_path_buf();\n+    }\n+\n+    pub fn rustfmt_toml_path(&self) -> &Path {\n+        &self.rustfmt_toml_path\n     }\n }\n "}, {"sha": "9776359bef3819e765645db8cd80bbb19d259d73", "filename": "src/formatting.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -67,6 +67,14 @@ fn format_project<T: FormatHandler>(\n     let main_file = input.file_name();\n     let input_is_stdin = main_file == FileName::Stdin;\n \n+    let ignore_path_set = match IgnorePathSet::from_ignore_list(&config.ignore()) {\n+        Ok(set) => set,\n+        Err(e) => return Err(ErrorKind::InvalidGlobPattern(e)),\n+    };\n+    if config.skip_children() && ignore_path_set.is_match(&main_file) {\n+        return Ok(FormatReport::new());\n+    }\n+\n     // Parse the crate.\n     let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n     let mut parse_session = make_parse_sess(source_map.clone(), config);\n@@ -91,11 +99,6 @@ fn format_project<T: FormatHandler>(\n     parse_session.span_diagnostic = Handler::with_emitter(true, None, silent_emitter);\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n-    let ignore_path_set = match IgnorePathSet::from_ignore_list(&config.ignore()) {\n-        Ok(set) => set,\n-        Err(e) => return Err(ErrorKind::InvalidGlobPattern(e)),\n-    };\n-\n     let files = modules::ModResolver::new(\n         context.parse_session.source_map(),\n         directory_ownership.unwrap_or(parse::DirectoryOwnership::UnownedViaMod(false)),"}, {"sha": "844ea427f49556823a679ec082ed4dbbe4845241", "filename": "src/ignore_path.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -1,5 +1,4 @@\n use ignore::{self, gitignore};\n-use std::path::PathBuf;\n \n use crate::config::{FileName, IgnoreList};\n \n@@ -9,7 +8,7 @@ pub struct IgnorePathSet {\n \n impl IgnorePathSet {\n     pub fn from_ignore_list(ignore_list: &IgnoreList) -> Result<Self, ignore::Error> {\n-        let mut ignore_builder = gitignore::GitignoreBuilder::new(PathBuf::from(\"\"));\n+        let mut ignore_builder = gitignore::GitignoreBuilder::new(ignore_list.rustfmt_toml_path());\n \n         for ignore_path in ignore_list {\n             ignore_builder.add_line(None, ignore_path.to_str().unwrap())?;\n@@ -33,16 +32,19 @@ impl IgnorePathSet {\n \n #[cfg(test)]\n mod test {\n+    use std::path::{Path, PathBuf};\n+\n     use crate::config::{Config, FileName};\n     use crate::ignore_path::IgnorePathSet;\n-    use std::path::PathBuf;\n \n     #[test]\n     fn test_ignore_path_set() {\n         match option_env!(\"CFG_RELEASE_CHANNEL\") {\n             // this test requires nightly\n             None | Some(\"nightly\") => {\n-                let config = Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#).unwrap();\n+                let config =\n+                    Config::from_toml(r#\"ignore = [\"foo.rs\", \"bar_dir/*\"]\"#, Path::new(\"\"))\n+                        .unwrap();\n                 let ignore_path_set = IgnorePathSet::from_ignore_list(&config.ignore()).unwrap();\n \n                 assert!(ignore_path_set.is_match(&FileName::Real(PathBuf::from(\"src/foo.rs\"))));"}, {"sha": "6766ba2af5462b3879a8a3c7252a76704421a94e", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb556ecb2c5268b5705dc67d23bba2dd346879f/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=aeb556ecb2c5268b5705dc67d23bba2dd346879f", "patch": "@@ -564,7 +564,7 @@ fn get_config(config_file: Option<&Path>) -> Config {\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config).expect(\"invalid TOML\")\n+    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"invalid TOML\")\n }\n \n // Reads significant comments of the form: `// rustfmt-key: value` into a hash map."}]}