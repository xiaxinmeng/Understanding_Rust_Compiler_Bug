{"sha": "51ed485ba4eb19083f7da719c55edb8a11f7f28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZWQ0ODViYTRlYjE5MDgzZjdkYTcxOWM1NWVkYjhhMTFmN2YyOGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T20:49:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T11:16:07Z"}, "message": "implement stdout/stderr on Windows", "tree": {"sha": "d40a1a9901641fb88de3fad2af32f8c7cdd68128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40a1a9901641fb88de3fad2af32f8c7cdd68128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ed485ba4eb19083f7da719c55edb8a11f7f28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ed485ba4eb19083f7da719c55edb8a11f7f28e", "html_url": "https://github.com/rust-lang/rust/commit/51ed485ba4eb19083f7da719c55edb8a11f7f28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ed485ba4eb19083f7da719c55edb8a11f7f28e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/d8956f0a293e835b69e0a57cbb238d234b6d5f3a"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "7815c1ce40e1df2e21a8d8a6ca9e8834b3c8e66d", "filename": "src/fn_call.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -596,18 +596,59 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n                 let ptr = this.machine.tls.load_tls(key)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n+                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n                 this.machine.tls.store_tls(key, new_ptr)?;\n \n                 // Return success (1)\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n             }\n+            \"GetStdHandle\" => {\n+                let which = this.read_scalar(args[0])?.to_i32()?;\n+                // We just make this the identity function, so we know later in \"WriteFile\"\n+                // which one it is.\n+                this.write_scalar(Scalar::from_int(which, this.pointer_size()), dest)?;\n+            }\n+            \"WriteFile\" => {\n+                let handle = this.read_scalar(args[0])?.to_isize(this)?;\n+                let buf = this.read_scalar(args[1])?.not_undef()?;\n+                let n = this.read_scalar(args[2])?.to_u32()?;\n+                let written_place = this.deref_operand(args[3])?;\n+                this.write_null(written_place.into())?; // spec says we always write 0 first\n+                let written = if handle == -11 || handle == -12 {\n+                    // stdout/stderr\n+                    use std::io::{self, Write};\n+\n+                    let buf_cont = this.memory().read_bytes(buf, Size::from_bytes(u64::from(n)))?;\n+                    let res = if handle == -11 {\n+                        io::stdout().write(buf_cont)\n+                    } else {\n+                        io::stderr().write(buf_cont)\n+                    };\n+                    res.ok().map(|n| n as u32)\n+                } else {\n+                    eprintln!(\"Miri: Ignored output to handle {}\", handle);\n+                    Some(n) // pretend it all went well\n+                };\n+                // If there was no error, write back how much was written\n+                if let Some(n) = written {\n+                    this.write_scalar(Scalar::from_uint(n, Size::from_bits(32)), written_place.into())?;\n+                }\n+                // Return whether this was a success\n+                this.write_scalar(\n+                    Scalar::from_int(if written.is_some() { 1 } else { 0 }, dest.layout.size),\n+                    dest,\n+                )?;\n+            }\n+            \"GetConsoleMode\" => {\n+                // Everything is a pipe\n+                this.write_null(dest)?;\n+            }\n \n             // We can't execute anything else\n             _ => {"}, {"sha": "353afb9d32100b81179f460dc8d5204f8c46dfa8", "filename": "tests/run-pass/box-pair-to-vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fbox-pair-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fbox-pair-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox-pair-to-vec.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -1,5 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n-\n #[repr(C)]\n #[derive(Debug)]\n struct PairFoo {"}, {"sha": "5fd65f138aaf92055195e96638a4660febde5c89", "filename": "tests/run-pass/catch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcatch.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n fn main() {"}, {"sha": "78729b915613af908634833702f458b9e3fe2521", "filename": "tests/run-pass/format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fformat.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n fn main() {\n     println!(\"Hello {}\", 13);\n }"}, {"sha": "e7a11a969c037e00a796aafeff6258501ec15e9a", "filename": "tests/run-pass/hello.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhello.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -1,4 +1,3 @@\n-//ignore-msvc: Stdout not implemented on Windows\n fn main() {\n     println!(\"Hello, world!\");\n }"}, {"sha": "91d17683e39e85ff2d10c7cbff55f3843a15bb4d", "filename": "tests/run-pass/issue-17877.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-17877.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //ignore-windows: Causes a stack overflow?!? Likely a rustc bug: https://github.com/rust-lang/rust/issues/53820\n-//Once that bug is fixed, increase the size to 16*1024 and enable on all platforms.\n+//FIXME: Once that bug is fixed, increase the size to 16*1024 and enable on all platforms.\n \n #![feature(slice_patterns)]\n "}, {"sha": "badb833ee800bca94c2420c3dbf2b66e97d3fe29", "filename": "tests/run-pass/issue-3794.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ed485ba4eb19083f7da719c55edb8a11f7f28e/tests%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-3794.rs?ref=51ed485ba4eb19083f7da719c55edb8a11f7f28e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//ignore-msvc: Stdout not implemented on Windows\n #![feature(box_syntax)]\n \n trait T {"}]}