{"sha": "c089a17854669925c008a5944d0490f1692dde7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODlhMTc4NTQ2Njk5MjVjMDA4YTU5NDRkMDQ5MGYxNjkyZGRlN2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-23T15:11:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-23T23:40:34Z"}, "message": "Improve the unused unsafe block warning to include unsafe blocks in unsafe functions", "tree": {"sha": "b4499c0786ff06dea7e0309951ed5bd79315c28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4499c0786ff06dea7e0309951ed5bd79315c28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c089a17854669925c008a5944d0490f1692dde7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c089a17854669925c008a5944d0490f1692dde7e", "html_url": "https://github.com/rust-lang/rust/commit/c089a17854669925c008a5944d0490f1692dde7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c089a17854669925c008a5944d0490f1692dde7e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8708e0c099400f363a5b95806847bd12d780000a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8708e0c099400f363a5b95806847bd12d780000a", "html_url": "https://github.com/rust-lang/rust/commit/8708e0c099400f363a5b95806847bd12d780000a"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "8fed8e78094c2c8d63223a0a3d67dd223f562c41", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c089a17854669925c008a5944d0490f1692dde7e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c089a17854669925c008a5944d0490f1692dde7e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=c089a17854669925c008a5944d0490f1692dde7e", "patch": "@@ -20,6 +20,7 @@\n use core::prelude::*;\n \n use middle::moves;\n+use middle::typeck::check::PurityState;\n use middle::borrowck::{Loan, bckerr, BorrowckCtxt, inherent_mutability};\n use middle::borrowck::{ReqMaps, root_map_key, save_and_restore_managed};\n use middle::borrowck::{MoveError, MoveOk, MoveFromIllegalCmt};\n@@ -41,11 +42,6 @@ use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::visit;\n \n-struct PurityState {\n-    def: ast::node_id,\n-    purity: ast::purity\n-}\n-\n struct CheckLoanCtxt {\n     bccx: @BorrowckCtxt,\n     req_maps: ReqMaps,\n@@ -85,8 +81,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n         bccx: bccx,\n         req_maps: req_maps,\n         reported: HashSet::new(),\n-        declared_purity: @mut PurityState { purity: ast::impure_fn,\n-                                            def: 0 },\n+        declared_purity: @mut PurityState::function(ast::impure_fn, 0),\n         fn_args: @mut @~[]\n     };\n     let vt = visit::mk_vt(@visit::Visitor {visit_expr: check_loans_in_expr,\n@@ -658,9 +653,7 @@ fn check_loans_in_fn(fk: &visit::fn_kind,\n     debug!(\"purity on entry=%?\", copy self.declared_purity);\n     do save_and_restore_managed(self.declared_purity) {\n         do save_and_restore_managed(self.fn_args) {\n-            self.declared_purity = @mut PurityState {\n-                purity: declared_purity, def: src\n-            };\n+            self.declared_purity = @mut PurityState::function(declared_purity, src);\n \n             match *fk {\n                 visit::fk_anon(*) |\n@@ -810,17 +803,7 @@ fn check_loans_in_block(blk: &ast::blk,\n     do save_and_restore_managed(self.declared_purity) {\n         self.check_for_conflicting_loans(blk.node.id);\n \n-        match blk.node.rules {\n-          ast::default_blk => {\n-          }\n-          ast::unsafe_blk => {\n-            *self.declared_purity = PurityState {\n-                purity: ast::unsafe_fn,\n-                def: blk.node.id,\n-            };\n-          }\n-        }\n-\n+        *self.declared_purity = self.declared_purity.recurse(blk);\n         visit::visit_block(blk, self, vt);\n     }\n }"}, {"sha": "536de78c752f99dedf945e46df9891b00caa2bed", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c089a17854669925c008a5944d0490f1692dde7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c089a17854669925c008a5944d0490f1692dde7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c089a17854669925c008a5944d0490f1692dde7e", "patch": "@@ -115,6 +115,7 @@ use core::result::{Result, Ok, Err};\n use core::result;\n use core::str;\n use core::vec;\n+use core::util::replace;\n use std::list::Nil;\n use syntax::abi::AbiSet;\n use syntax::ast::{provided, required};\n@@ -179,9 +180,36 @@ pub enum FnKind {\n     Vanilla\n }\n \n-struct PurityState {\n+pub struct PurityState {\n+    def: ast::node_id,\n     purity: ast::purity,\n-    from: ast::node_id,\n+    priv from_fn: bool\n+}\n+\n+pub impl PurityState {\n+    pub fn function(purity: ast::purity, def: ast::node_id) -> PurityState {\n+        PurityState { def: def, purity: purity, from_fn: true }\n+    }\n+\n+    pub fn recurse(&mut self, blk: &ast::blk) -> PurityState {\n+        match self.purity {\n+            // If this unsafe, then if the outer function was already marked as\n+            // unsafe we shouldn't attribute the unsafe'ness to the block. This\n+            // way the block can be warned about instead of ignoring this\n+            // extraneous block (functions are never warned about).\n+            ast::unsafe_fn if self.from_fn => *self,\n+\n+            purity => {\n+                let (purity, def) = match blk.node.rules {\n+                    ast::unsafe_blk => (ast::unsafe_fn, blk.node.id),\n+                    ast::default_blk => (purity, self.def),\n+                };\n+                PurityState{ def: def,\n+                             purity: purity,\n+                             from_fn: false }\n+            }\n+        }\n+    }\n }\n \n pub struct FnCtxt {\n@@ -243,7 +271,7 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n     @mut FnCtxt {\n         ret_ty: rty,\n         indirect_ret_ty: None,\n-        ps: PurityState { purity: ast::pure_fn, from: 0 },\n+        ps: PurityState::function(ast::pure_fn, 0),\n         region_lb: region_bnd,\n         in_scope_regions: @Nil,\n         fn_kind: Vanilla,\n@@ -348,7 +376,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         @mut FnCtxt {\n             ret_ty: ret_ty,\n             indirect_ret_ty: indirect_ret_ty,\n-            ps: PurityState { purity: purity, from: id },\n+            ps: PurityState::function(purity, id),\n             region_lb: body.node.id,\n             in_scope_regions: isr,\n             fn_kind: fn_kind,\n@@ -876,8 +904,8 @@ pub impl FnCtxt {\n         match self.ps.purity {\n           ast::unsafe_fn => {\n             // ok, but flag that we used the source of unsafeness\n-            debug!(\"flagging %? as a used unsafe source\", self.ps.from);\n-            self.tcx().used_unsafe.insert(self.ps.from);\n+            debug!(\"flagging %? as a used unsafe source\", self.ps);\n+            self.tcx().used_unsafe.insert(self.ps.def);\n           }\n           _ => {\n             self.ccx.tcx.sess.span_err(\n@@ -1689,7 +1717,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         fcx.write_ty(expr.id, fty);\n \n         let (inherited_purity, id) =\n-            ty::determine_inherited_purity((fcx.ps.purity, fcx.ps.from),\n+            ty::determine_inherited_purity((fcx.ps.purity, fcx.ps.def),\n                                            (purity, expr.id),\n                                            sigil);\n \n@@ -2929,16 +2957,11 @@ pub fn check_block(fcx0: @mut FnCtxt, blk: &ast::blk)  {\n     check_block_with_expected(fcx0, blk, None)\n }\n \n-pub fn check_block_with_expected(fcx0: @mut FnCtxt,\n+pub fn check_block_with_expected(fcx: @mut FnCtxt,\n                                  blk: &ast::blk,\n                                  expected: Option<ty::t>) {\n-    let fcx = match blk.node.rules {\n-        ast::unsafe_blk => @mut FnCtxt {\n-            ps: PurityState { purity: ast::unsafe_fn, from: blk.node.id },\n-            .. copy *fcx0\n-        },\n-        ast::default_blk => fcx0\n-    };\n+    let prev = replace(&mut fcx.ps, fcx.ps.recurse(blk));\n+\n     do fcx.with_region_lb(blk.node.id) {\n         let mut warned = false;\n         let mut last_was_bot = false;\n@@ -2990,6 +3013,8 @@ pub fn check_block_with_expected(fcx0: @mut FnCtxt,\n           }\n         };\n     }\n+\n+    fcx.ps = prev;\n }\n \n pub fn check_const(ccx: @mut CrateCtxt,"}, {"sha": "9552badb57f67c1ce1e4d52230ccfafbad4794d6", "filename": "src/test/compile-fail/unused-unsafe.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c089a17854669925c008a5944d0490f1692dde7e/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c089a17854669925c008a5944d0490f1692dde7e/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-unsafe.rs?ref=c089a17854669925c008a5944d0490f1692dde7e", "patch": "@@ -12,30 +12,50 @@\n \n #[deny(unused_unsafe)];\n \n-use core::libc;\n+extern mod foo {\n+    fn bar();\n+}\n \n fn callback<T>(_f: &fn() -> T) -> T { fail!() }\n+unsafe fn unsf() {}\n \n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n-unsafe fn bad4() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n-fn bad5() { unsafe { do callback {} } }  //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+fn bad4() { unsafe { do callback {} } }  //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+fn bad6() {\n+    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+        unsafe {                         // don't put the warning here\n+            unsf()\n+        }\n+    }\n+}\n+unsafe fn bad7() {\n+    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+            unsf()\n+        }\n+    }\n+}\n \n-unsafe fn good0() { libc::exit(1) }\n-fn good1() { unsafe { libc::exit(1) } }\n+unsafe fn good0() { unsf() }\n+fn good1() { unsafe { unsf() } }\n fn good2() {\n     /* bug uncovered when implementing warning about unused unsafe blocks. Be\n        sure that when purity is inherited that the source of the unsafe-ness\n        is tracked correctly */\n     unsafe {\n-        unsafe fn what() -> ~[~str] { libc::exit(2) }\n+        unsafe fn what() -> ~[~str] { fail!() }\n \n         do callback {\n             what();\n         }\n     }\n }\n+unsafe fn good3() { foo::bar() }\n+fn good4() { unsafe { foo::bar() } }\n \n #[allow(unused_unsafe)] fn allowed() { unsafe {} }\n \n-fn main() { }\n+fn main() {}"}]}