{"sha": "c2511207567fa5075748d7572b5828d17184a428", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTExMjA3NTY3ZmE1MDc1NzQ4ZDc1NzJiNTgyOGQxNzE4NGE0Mjg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-25T09:13:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-25T09:13:09Z"}, "message": "Merge pull request #2400 from devonhollowood/misaligned-transmute\n\nAdd misaligned_transmute lint", "tree": {"sha": "de2b65db72819bbb59401ce6725ae2ffbaec11a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2b65db72819bbb59401ce6725ae2ffbaec11a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2511207567fa5075748d7572b5828d17184a428", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaaZ+lCRBK7hj4Ov3rIwAAdHIIABtDIF6x25iwCFuqN5b6O14r\nqV/JvPuX9uaUpZxne4MTcHUYWcXbWlYbQ2JY+76fIEqLlU6aPcW2QIxu0EkdTOhX\nVdoZBqir9GL42P69pavRRa+ypCUeEy53bWfcrW2wCVvwuWwCGcuNx3+Dj7kbH8im\nL5W099YF7vi42Fg72Waux3dx7S83Qk8PzLuDDiNDQxHnFgJ1XntwAMzHCTJ4OP74\nac+jjepm8JdYaydDwoBoqzKjLLoObo+S6QKcJpEwfQbtE5AVfpHqkDh9mjZT5Zi9\nsal9Km4VjXltqVp5wHG4CTbB2GqYHymgd0qWtj3+wlq52IkqpMH6jEFf6EJfZoc=\n=JQUX\n-----END PGP SIGNATURE-----\n", "payload": "tree de2b65db72819bbb59401ce6725ae2ffbaec11a1\nparent 78120382068de39c8d61b40579f2ff1d5f1eea91\nparent 0413b3f6cf6db900ad86cb9df3a2877fdce59207\nauthor Manish Goregaokar <manishsmail@gmail.com> 1516871589 +0530\ncommitter GitHub <noreply@github.com> 1516871589 +0530\n\nMerge pull request #2400 from devonhollowood/misaligned-transmute\n\nAdd misaligned_transmute lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2511207567fa5075748d7572b5828d17184a428", "html_url": "https://github.com/rust-lang/rust/commit/c2511207567fa5075748d7572b5828d17184a428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2511207567fa5075748d7572b5828d17184a428/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78120382068de39c8d61b40579f2ff1d5f1eea91", "url": "https://api.github.com/repos/rust-lang/rust/commits/78120382068de39c8d61b40579f2ff1d5f1eea91", "html_url": "https://github.com/rust-lang/rust/commit/78120382068de39c8d61b40579f2ff1d5f1eea91"}, {"sha": "0413b3f6cf6db900ad86cb9df3a2877fdce59207", "url": "https://api.github.com/repos/rust-lang/rust/commits/0413b3f6cf6db900ad86cb9df3a2877fdce59207", "html_url": "https://github.com/rust-lang/rust/commit/0413b3f6cf6db900ad86cb9df3a2877fdce59207"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "a4e18c7eec3c70cabac60d5833ce4d160e867543", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c2511207567fa5075748d7572b5828d17184a428", "patch": "@@ -603,6 +603,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n+        transmute::MISALIGNED_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,"}, {"sha": "090f9397472d02b3484d58e92867fe5625c6cef4", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c2511207567fa5075748d7572b5828d17184a428", "patch": "@@ -3,7 +3,8 @@ use rustc::ty::{self, Ty};\n use rustc::hir::*;\n use std::borrow::Cow;\n use syntax::ast;\n-use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n+use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then,\n+            alignment};\n use utils::{opt_def_id, sugg};\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n@@ -168,6 +169,23 @@ declare_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n+/// **What it does:** Checks for transmutes to a potentially less-aligned type.\n+///\n+/// **Why is this bad?** This might result in undefined behavior.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // u32 is 32-bit aligned; u8 is 8-bit aligned\n+/// let _: u32 = unsafe { std::mem::transmute([0u8; 4]) };\n+/// ```\n+declare_lint! {\n+    pub MISALIGNED_TRANSMUTE,\n+    Warn,\n+    \"transmutes to a potentially less-aligned type\"\n+}\n+\n pub struct Transmute;\n \n impl LintPass for Transmute {\n@@ -180,7 +198,8 @@ impl LintPass for Transmute {\n             TRANSMUTE_INT_TO_CHAR,\n             TRANSMUTE_BYTES_TO_STR,\n             TRANSMUTE_INT_TO_BOOL,\n-            TRANSMUTE_INT_TO_FLOAT\n+            TRANSMUTE_INT_TO_FLOAT,\n+            MISALIGNED_TRANSMUTE\n         )\n     }\n }\n@@ -201,6 +220,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 e.span,\n                                 &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n                             ),\n+                            _ if alignment(cx, from_ty).map(|a| a.abi())\n+                                < alignment(cx, to_ty).map(|a| a.abi())\n+                                => span_lint(\n+                                    cx,\n+                                    MISALIGNED_TRANSMUTE,\n+                                    e.span,\n+                                    &format!(\n+                                        \"transmute from `{}` to a less-aligned type (`{}`)\",\n+                                        from_ty,\n+                                        to_ty,\n+                                    )\n+                            ),\n                             (&ty::TyRef(_, rty), &ty::TyRawPtr(ptr_ty)) => span_lint_and_then(\n                                 cx,\n                                 USELESS_TRANSMUTE,"}, {"sha": "b7f1e7b245456c45c0bc59ace321b7a94947d72c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2511207567fa5075748d7572b5828d17184a428/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c2511207567fa5075748d7572b5828d17184a428", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::{LateContext, Level, Lint, LintContext};\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, Align};\n use rustc_errors;\n use std::borrow::Cow;\n use std::env;\n@@ -1056,3 +1056,8 @@ pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n         _ => None,\n     }\n }\n+\n+/// Returns alignment for a type, or None if alignment is undefined\n+pub fn alignment<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Option<Align> {\n+    (cx.tcx, cx.param_env).layout_of(ty).ok().map(|layout| layout.align)\n+}"}, {"sha": "48b89c33ab91f46778e89cf36a4a2c868bb2e7f5", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2511207567fa5075748d7572b5828d17184a428/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2511207567fa5075748d7572b5828d17184a428/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=c2511207567fa5075748d7572b5828d17184a428", "patch": "@@ -140,4 +140,11 @@ fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n }\n \n+#[warn(misaligned_transmute)]\n+fn misaligned_transmute() {\n+    let _: u32 = unsafe { std::mem::transmute([0u8; 4]) }; // err\n+    let _: u32 = unsafe { std::mem::transmute(0f32) }; // ok (alignment-wise)\n+    let _: [u8; 4] = unsafe { std::mem::transmute(0u32) }; // ok (alignment-wise)\n+}\n+\n fn main() { }"}, {"sha": "74bbf95d52583d49313d053da22339bd7547a37b", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2511207567fa5075748d7572b5828d17184a428/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2511207567fa5075748d7572b5828d17184a428/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=c2511207567fa5075748d7572b5828d17184a428", "patch": "@@ -204,5 +204,13 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n 140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 32 previous errors\n+error: transmute from `[u8; 4]` to a less-aligned type (`u32`)\n+   --> $DIR/transmute.rs:145:27\n+    |\n+145 |     let _: u32 = unsafe { std::mem::transmute([0u8; 4]) }; // err\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: `-D misaligned-transmute` implied by `-D warnings`\n+\n+error: aborting due to 33 previous errors\n "}]}