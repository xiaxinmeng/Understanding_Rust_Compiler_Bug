{"sha": "88629778e6faeda18409ffaa9a00291e3605bae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NjI5Nzc4ZTZmYWVkYTE4NDA5ZmZhYTlhMDAyOTFlMzYwNWJhZTM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T19:18:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-11T19:18:38Z"}, "message": "Rollup merge of #61969 - MikailBag:master, r=Centril\n\nAdd #[repr(transparent)] for several types\n\nIn some functions, types mentioned in this PR are transmuted into their inner value.\nExample for `PathBuf`: https://github.com/rust-lang/rust/blob/master/src/libstd/path.rs#L1132.\nThis PR adds `#[repr(transparent)]` to those types, so their correct behavior doesn't depend on compiler details. (As far as I understand, currently that line, converting `PathBuf` to `Vec<u8>`, is UB).", "tree": {"sha": "79be04b2c4142de3325abb0c070ecfb930d0f1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79be04b2c4142de3325abb0c070ecfb930d0f1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88629778e6faeda18409ffaa9a00291e3605bae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdUGoPCRBK7hj4Ov3rIwAAdHIIAIzzoL5FDQWbgxe8Izis/Ky4\nlbkHSPjU0RaWwSZaYtt4CbSLVe/HBgS8EAp7hry7BkVEe789ID+Y5V+Q1BniC7kD\n0CXrHrgGhLFyTZXwMnCRDrUWrqyMrPlUO0w9zgPi7Umtf8/GUbgVpGJo5QdbxU3M\nsl5OCReSaua0pYd1rr46AeOI5kdIGRqzAx+twuSyy55P4q+2tqvVOa0IQaZh3jRo\nnVhw7kZR4Smpn8z8oeKs9IHamdxdzmLUmfAfuDfd0EV1FvMWwNixafP5Yzg7N2WV\nPRUvawxLD5n6wrHduRPYhkPpKnlOlg96F9mhWpBsZniAZBXsKHyg9smpJqdm0rQ=\n=OhTl\n-----END PGP SIGNATURE-----\n", "payload": "tree 79be04b2c4142de3325abb0c070ecfb930d0f1a3\nparent 8a068699a24de306334a1f66b9a83552766d853c\nparent 740f8db85572aef58d0734fc60bc2b54862ebbb0\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1565551118 -0400\ncommitter GitHub <noreply@github.com> 1565551118 -0400\n\nRollup merge of #61969 - MikailBag:master, r=Centril\n\nAdd #[repr(transparent)] for several types\n\nIn some functions, types mentioned in this PR are transmuted into their inner value.\nExample for `PathBuf`: https://github.com/rust-lang/rust/blob/master/src/libstd/path.rs#L1132.\nThis PR adds `#[repr(transparent)]` to those types, so their correct behavior doesn't depend on compiler details. (As far as I understand, currently that line, converting `PathBuf` to `Vec<u8>`, is UB).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88629778e6faeda18409ffaa9a00291e3605bae3", "html_url": "https://github.com/rust-lang/rust/commit/88629778e6faeda18409ffaa9a00291e3605bae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88629778e6faeda18409ffaa9a00291e3605bae3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a068699a24de306334a1f66b9a83552766d853c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a068699a24de306334a1f66b9a83552766d853c", "html_url": "https://github.com/rust-lang/rust/commit/8a068699a24de306334a1f66b9a83552766d853c"}, {"sha": "740f8db85572aef58d0734fc60bc2b54862ebbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/740f8db85572aef58d0734fc60bc2b54862ebbb0", "html_url": "https://github.com/rust-lang/rust/commit/740f8db85572aef58d0734fc60bc2b54862ebbb0"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "512839a12c0e415c56420d1892e0155be9b9361a", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=88629778e6faeda18409ffaa9a00291e3605bae3", "patch": "@@ -195,6 +195,12 @@ pub struct CString {\n /// [`from_ptr`]: #method.from_ptr\n #[derive(Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n+// on `CStr` being layout-compatible with `[u8]`.\n+// When attribute privacy is implemented, `CStr` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `CStr` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct CStr {\n     // FIXME: this should not be represented with a DST slice but rather with\n     //        just a raw `c_char` along with some form of marker to make"}, {"sha": "1f384cbada3dae3f9f844dbafd236a8f9e573e4b", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=88629778e6faeda18409ffaa9a00291e3605bae3", "patch": "@@ -97,6 +97,12 @@ pub struct OsString {\n /// [`String`]: ../string/struct.String.html\n /// [conversions]: index.html#conversions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `OsStr::from_inner` current implementation relies\n+// on `OsStr` being layout-compatible with `Slice`.\n+// When attribute privacy is implemented, `OsStr` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `OsStr` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct OsStr {\n     inner: Slice\n }"}, {"sha": "fd6ff1032bb81da2a22097645ba66636938a2e4d", "filename": "src/libstd/path.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=88629778e6faeda18409ffaa9a00291e3605bae3", "patch": "@@ -1123,6 +1123,12 @@ impl FusedIterator for Ancestors<'_> {}\n /// Which method works best depends on what kind of situation you're in.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `PathBuf::as_mut_vec` current implementation relies\n+// on `PathBuf` being layout-compatible with `Vec<u8>`.\n+// When attribute privacy is implemented, `PathBuf` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `PathBuf` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct PathBuf {\n     inner: OsString,\n }\n@@ -1745,6 +1751,12 @@ impl AsRef<OsStr> for PathBuf {\n /// assert_eq!(extension, Some(OsStr::new(\"txt\")));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// FIXME:\n+// `Path::new` current implementation relies\n+// on `Path` being layout-compatible with `OsStr`.\n+// When attribute privacy is implemented, `Path` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `Path` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub struct Path {\n     inner: OsStr,\n }"}, {"sha": "d734f412bf88650115881856f86ea744c1aa1d04", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88629778e6faeda18409ffaa9a00291e3605bae3/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=88629778e6faeda18409ffaa9a00291e3605bae3", "patch": "@@ -18,6 +18,12 @@ pub(crate) struct Buf {\n     pub inner: Vec<u8>\n }\n \n+// FIXME:\n+// `Buf::as_slice` current implementation relies\n+// on `Slice` being layout-compatible with `[u8]`.\n+// When attribute privacy is implemented, `Slice` should be annotated as `#[repr(transparent)]`.\n+// Anyway, `Slice` representation and layout are considered implementation detail, are\n+// not documented and must not be relied upon.\n pub(crate) struct Slice {\n     pub inner: [u8]\n }"}]}