{"sha": "075b3ce89d10313d9732e484e7f766b6a410bdf8", "node_id": "C_kwDOAAsO6NoAKDA3NWIzY2U4OWQxMDMxM2Q5NzMyZTQ4NGU3Zjc2NmI2YTQxMGJkZjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T02:15:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-25T23:32:46Z"}, "message": "Attempt to normalize FnDef signature in InferCtxt::cmp", "tree": {"sha": "ca2392d13fbcc682029fe2bcd15489b5c2babaa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2392d13fbcc682029fe2bcd15489b5c2babaa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075b3ce89d10313d9732e484e7f766b6a410bdf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075b3ce89d10313d9732e484e7f766b6a410bdf8", "html_url": "https://github.com/rust-lang/rust/commit/075b3ce89d10313d9732e484e7f766b6a410bdf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075b3ce89d10313d9732e484e7f766b6a410bdf8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69cad449a890feab89d52448f2f8586ff1721f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69cad449a890feab89d52448f2f8586ff1721f4", "html_url": "https://github.com/rust-lang/rust/commit/e69cad449a890feab89d52448f2f8586ff1721f4"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "00e238648712ffaf103d6750c4c5c3b9ce6fbede", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -78,6 +78,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n+            normalize_fn_sig_for_diagnostic: self\n+                .normalize_fn_sig_for_diagnostic\n+                .as_ref()\n+                .map(|f| f.clone()),\n         }\n     }\n }"}, {"sha": "7bb151ef2b9edf6dea17fb07630bed1147b5bec6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -961,12 +961,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn normalize_fn_sig_for_diagnostic(&self, sig: ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        if let Some(normalize) = &self.normalize_fn_sig_for_diagnostic {\n+            normalize(self, sig)\n+        } else {\n+            sig\n+        }\n+    }\n+\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n         sig1: &ty::PolyFnSig<'tcx>,\n         sig2: &ty::PolyFnSig<'tcx>,\n     ) -> (DiagnosticStyledString, DiagnosticStyledString) {\n+        let sig1 = &self.normalize_fn_sig_for_diagnostic(*sig1);\n+        let sig2 = &self.normalize_fn_sig_for_diagnostic(*sig2);\n+\n         let get_lifetimes = |sig| {\n             use rustc_hir::def::Namespace;\n             let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS)"}, {"sha": "a56b34ef3eb555acda8a10189be3ccb5334fe01b", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -337,6 +337,9 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// when we enter into a higher-ranked (`for<..>`) type or trait\n     /// bound.\n     universe: Cell<ty::UniverseIndex>,\n+\n+    normalize_fn_sig_for_diagnostic:\n+        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -540,6 +543,8 @@ pub struct InferCtxtBuilder<'tcx> {\n     defining_use_anchor: DefiningAnchor,\n     considering_regions: bool,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,\n+    normalize_fn_sig_for_diagnostic:\n+        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -553,6 +558,7 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n             fresh_typeck_results: None,\n+            normalize_fn_sig_for_diagnostic: None,\n         }\n     }\n }\n@@ -582,6 +588,14 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         self\n     }\n \n+    pub fn with_normalize_fn_sig_for_diagnostic(\n+        mut self,\n+        fun: Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n+    ) -> Self {\n+        self.normalize_fn_sig_for_diagnostic = Some(fun);\n+        self\n+    }\n+\n     /// Given a canonical value `C` as a starting point, create an\n     /// inference context that contains each of the bound values\n     /// within instantiated as a fresh variable. The `f` closure is\n@@ -611,6 +625,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             defining_use_anchor,\n             considering_regions,\n             ref fresh_typeck_results,\n+            ref normalize_fn_sig_for_diagnostic,\n         } = *self;\n         let in_progress_typeck_results = fresh_typeck_results.as_ref();\n         f(InferCtxt {\n@@ -629,6 +644,9 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n+            normalize_fn_sig_for_diagnostic: normalize_fn_sig_for_diagnostic\n+                .as_ref()\n+                .map(|f| f.clone()),\n         })\n     }\n }"}, {"sha": "1a000f77b0fd027f0a02a7329e9fb87770896f48", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -1,18 +1,22 @@\n use super::callee::DeferredCallResolution;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n+use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::{\n+    self, FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt as _,\n+};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -84,7 +88,29 @@ impl<'tcx> Inherited<'_, 'tcx> {\n             infcx: tcx\n                 .infer_ctxt()\n                 .ignoring_regions()\n-                .with_fresh_in_progress_typeck_results(hir_owner),\n+                .with_fresh_in_progress_typeck_results(hir_owner)\n+                .with_normalize_fn_sig_for_diagnostic(Lrc::new(move |infcx, fn_sig| {\n+                    if fn_sig.has_escaping_bound_vars() {\n+                        return fn_sig;\n+                    }\n+                    infcx.probe(|_| {\n+                        let traits::Normalized { value: normalized_fn_sig, obligations } =\n+                            traits::normalize(\n+                                &mut traits::SelectionContext::new(infcx),\n+                                // FIXME(compiler-errors): This is probably not the right param-env...\n+                                infcx.tcx.param_env(def_id),\n+                                ObligationCause::dummy(),\n+                                fn_sig,\n+                            );\n+                        let mut fulfillment_ctxt = FulfillmentContext::new_in_snapshot();\n+                        fulfillment_ctxt.register_predicate_obligations(infcx, obligations);\n+                        if fulfillment_ctxt.select_all_or_error(infcx).is_empty() {\n+                            infcx.resolve_vars_if_possible(normalized_fn_sig)\n+                        } else {\n+                            fn_sig\n+                        }\n+                    })\n+                })),\n             def_id,\n         }\n     }"}, {"sha": "1a2093c44f02e721c493e553fe3f7a3ae29b263e", "filename": "src/test/ui/mismatched_types/normalize-fn-sig.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.rs?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -0,0 +1,16 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl<T> Foo for T {\n+    type Bar = i32;\n+}\n+\n+fn foo<T>(_: <T as Foo>::Bar, _: &'static <T as Foo>::Bar) {}\n+\n+fn needs_i32_ref_fn(_: fn(&'static i32, i32)) {}\n+\n+fn main() {\n+    needs_i32_ref_fn(foo::<()>);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "6c55f29c5d153d514e83a4656f3a275316f679ae", "filename": "src/test/ui/mismatched_types/normalize-fn-sig.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/075b3ce89d10313d9732e484e7f766b6a410bdf8/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/075b3ce89d10313d9732e484e7f766b6a410bdf8/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr?ref=075b3ce89d10313d9732e484e7f766b6a410bdf8", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/normalize-fn-sig.rs:14:22\n+   |\n+LL |     needs_i32_ref_fn(foo::<()>);\n+   |     ---------------- ^^^^^^^^^ expected `&i32`, found `i32`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected fn pointer `fn(&'static i32, i32)`\n+                 found fn item `fn(i32, &'static i32) {foo::<()>}`\n+note: function defined here\n+  --> $DIR/normalize-fn-sig.rs:11:4\n+   |\n+LL | fn needs_i32_ref_fn(_: fn(&'static i32, i32)) {}\n+   |    ^^^^^^^^^^^^^^^^ ------------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}