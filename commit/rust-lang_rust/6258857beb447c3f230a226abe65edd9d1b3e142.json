{"sha": "6258857beb447c3f230a226abe65edd9d1b3e142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTg4NTdiZWI0NDdjM2YyMzBhMjI2YWJlNjVlZGQ5ZDFiM2UxNDI=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-11-17T11:04:36Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-11-17T11:04:36Z"}, "message": "resurect shootout-mandelbrot.rs\n\nChanges:\n* add licence;\n* remove usage of libc and unsafe;\n* use BufferedWriter to improve performance;\n* use a DummyWriter to cancel binary output in test.", "tree": {"sha": "88b17f3561d110357c2c6f747647237559c8a77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b17f3561d110357c2c6f747647237559c8a77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6258857beb447c3f230a226abe65edd9d1b3e142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6258857beb447c3f230a226abe65edd9d1b3e142", "html_url": "https://github.com/rust-lang/rust/commit/6258857beb447c3f230a226abe65edd9d1b3e142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6258857beb447c3f230a226abe65edd9d1b3e142/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90754ae9c95c18841c0200d77da917af5ecde5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/90754ae9c95c18841c0200d77da917af5ecde5ee", "html_url": "https://github.com/rust-lang/rust/commit/90754ae9c95c18841c0200d77da917af5ecde5ee"}], "stats": {"total": 110, "additions": 62, "deletions": 48}, "files": [{"sha": "70fd95f3d47cb462b09018dd959edc403ff7fb91", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 62, "deletions": 48, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/6258857beb447c3f230a226abe65edd9d1b3e142/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6258857beb447c3f230a226abe65edd9d1b3e142/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=6258857beb447c3f230a226abe65edd9d1b3e142", "patch": "@@ -1,64 +1,78 @@\n-// xfail-test reading from os::args()[1] - bogus!\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n \n-use std::cast::transmute;\n-use std::from_str::FromStr;\n-use std::libc::{STDOUT_FILENO, c_int, fdopen, fputc};\n-use std::os;\n+use std::io::buffered::BufferedWriter;\n \n-static ITER: uint = 50;\n+struct DummyWriter;\n+impl Writer for DummyWriter {\n+    fn write(&mut self, _: &[u8]) {}\n+}\n+\n+static ITER: int = 50;\n static LIMIT: f64 = 2.0;\n \n fn main() {\n-    unsafe {\n-        let w: i32 = FromStr::from_str(os::args()[1]).unwrap();\n-        let h = w;\n-        let mut byte_acc: i8 = 0;\n-        let mut bit_num: i32 = 0;\n-\n-        println!(\"P4\\n{} {}\", w, h);\n+    let args = std::os::args();\n+    let (w, mut out) = if args.len() < 2 {\n+        println(\"Test mode: do not dump the image.\");\n+        (1000, ~DummyWriter as ~Writer)\n+    } else {\n+        (from_str(args[1]).unwrap(),\n+         ~BufferedWriter::new(std::io::stdout()) as ~Writer)\n+    };\n+    let h = w;\n+    let mut byte_acc = 0i8;\n+    let mut bit_num = 0;\n \n-        let mode = \"w\";\n-        let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));\n+    writeln!(out, \"P4\\n{} {}\", w, h);\n \n-        for y in range(0i32, h) {\n-            let y = y as f64;\n-            for x in range(0i32, w) {\n-                let mut Zr = 0f64;\n-                let mut Zi = 0f64;\n-                let mut Tr = 0f64;\n-                let mut Ti = 0f64;\n-                let Cr = 2.0 * (x as f64) / (w as f64) - 1.5;\n-                let Ci = 2.0 * (y as f64) / (h as f64) - 1.0;\n+    for y in range(0, h) {\n+        let y = y as f64;\n+        for x in range(0, w) {\n+            let mut z_r = 0f64;\n+            let mut z_i = 0f64;\n+            let mut t_r = 0f64;\n+            let mut t_i = 0f64;\n+            let c_r = 2.0 * (x as f64) / (w as f64) - 1.5;\n+            let c_i = 2.0 * (y as f64) / (h as f64) - 1.0;\n \n-                for _ in range(0i32, ITER as i32) {\n-                    if Tr + Ti > LIMIT * LIMIT {\n-                        break;\n-                    }\n-\n-                    Zi = 2.0*Zr*Zi + Ci;\n-                    Zr = Tr - Ti + Cr;\n-                    Tr = Zr * Zr;\n-                    Ti = Zi * Zi;\n+            for _ in range(0, ITER) {\n+                if t_r + t_i > LIMIT * LIMIT {\n+                    break;\n                 }\n \n-                byte_acc <<= 1;\n-                if Tr + Ti <= LIMIT * LIMIT {\n-                    byte_acc |= 1;\n-                }\n+                z_i = 2.0 * z_r * z_i + c_i;\n+                z_r = t_r - t_i + c_r;\n+                t_r = z_r * z_r;\n+                t_i = z_i * z_i;\n+            }\n \n-                bit_num += 1;\n+            byte_acc <<= 1;\n+            if t_r + t_i <= LIMIT * LIMIT {\n+                byte_acc |= 1;\n+            }\n \n-                if bit_num == 8 {\n-                    fputc(byte_acc as c_int, stdout);\n-                    byte_acc = 0;\n-                    bit_num = 0;\n-                } else if x == w - 1 {\n-                    byte_acc <<= 8 - w%8;\n-                    fputc(byte_acc as c_int, stdout);\n-                    byte_acc = 0;\n-                    bit_num = 0;\n-                }\n+            bit_num += 1;\n+\n+            if bit_num == 8 {\n+                out.write_i8(byte_acc);\n+                byte_acc = 0;\n+                bit_num = 0;\n+            } else if x == w - 1 {\n+                byte_acc <<= 8 - w % 8;\n+                out.write_i8(byte_acc);\n+                byte_acc = 0;\n+                bit_num = 0;\n             }\n         }\n     }\n+\n+    out.flush();\n }"}]}