{"sha": "55ec10431318bb6b4ed0a01744c93a683918d592", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZWMxMDQzMTMxOGJiNmI0ZWQwYTAxNzQ0YzkzYTY4MzkxOGQ1OTI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-09T21:59:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-10T10:56:16Z"}, "message": "Use the span of the user type for `AscribeUserType`\n\nAlso change the order of the fake read for let and the AscribeUserType,\nso that we use the better span and message from the fake read in errors.", "tree": {"sha": "0c807a765caefbb326ab44bcb5e7fff95d62a477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c807a765caefbb326ab44bcb5e7fff95d62a477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ec10431318bb6b4ed0a01744c93a683918d592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ec10431318bb6b4ed0a01744c93a683918d592", "html_url": "https://github.com/rust-lang/rust/commit/55ec10431318bb6b4ed0a01744c93a683918d592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ec10431318bb6b4ed0a01744c93a683918d592/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "html_url": "https://github.com/rust-lang/rust/commit/0e07c4281c343e9e15a0a8fca79538ad1a8eb513"}], "stats": {"total": 151, "additions": 94, "deletions": 57}, "files": [{"sha": "2587e19b1cb6255b5aff53965e0493167b505805", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -710,7 +710,7 @@ pub struct LocalDecl<'tcx> {\n     /// e.g. via `let x: T`, then we carry that type here. The MIR\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n-    pub user_ty: Option<CanonicalTy<'tcx>>,\n+    pub user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n \n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///"}, {"sha": "920dc88d6a8fc5a01f26d3879faaa79d2ca808b8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -735,7 +735,7 @@ macro_rules! make_mir_visitor {\n                     local,\n                     source_info: *source_info,\n                 });\n-                if let Some(user_ty) = user_ty {\n+                if let Some((user_ty, _)) = user_ty {\n                     self.visit_user_ty(user_ty);\n                 }\n                 self.visit_source_info(source_info);"}, {"sha": "1f3498b7ae01ac25cbb7532e060966f073a093c1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -310,12 +310,12 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n \n-        if let Some(user_ty) = local_decl.user_ty {\n+        if let Some((user_ty, span)) = local_decl.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 local_decl.ty,\n                 ty::Variance::Invariant,\n                 user_ty,\n-                Locations::All(local_decl.source_info.span),\n+                Locations::All(span),\n                 ConstraintCategory::TypeAnnotation,\n             ) {\n                 span_mirbug!("}, {"sha": "394fa4e077c1b77af64e2b3c61cb31d7371dd4c8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -292,30 +292,32 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ..\n                 },\n                 user_ty: ascription_user_ty,\n+                user_ty_span,\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n                 unpack!(block = self.into(&place, block, initializer));\n \n-                let source_info = self.source_info(irrefutable_pat.span);\n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                let pattern_source_info = self.source_info(irrefutable_pat.span);\n                 self.cfg.push(\n                     block,\n                     Statement {\n-                        source_info,\n-                        kind: StatementKind::AscribeUserType(\n-                            place.clone(),\n-                            ty::Variance::Invariant,\n-                            ascription_user_ty,\n-                        ),\n+                        source_info: pattern_source_info,\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n                     },\n                 );\n \n-                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                let ty_source_info = self.source_info(user_ty_span);\n                 self.cfg.push(\n                     block,\n                     Statement {\n-                        source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                        source_info: ty_source_info,\n+                        kind: StatementKind::AscribeUserType(\n+                            place.clone(),\n+                            ty::Variance::Invariant,\n+                            ascription_user_ty,\n+                        ),\n                     },\n                 );\n \n@@ -489,7 +491,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<CanonicalTy<'tcx>>,\n+        mut pattern_user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -498,7 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<CanonicalTy<'tcx>>,\n+            Option<(CanonicalTy<'tcx>, Span)>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -549,16 +551,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n                 self.visit_bindings(subpattern, None, f);\n             }\n-            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+            PatternKind::AscribeUserType { ref subpattern, user_ty, user_ty_span } => {\n                 // This corresponds to something like\n                 //\n                 // ```\n-                // let (p1: T1): T2 = ...;\n+                // let A::<'a>(_): A<'static> = ...;\n                 // ```\n                 //\n-                // Not presently possible, though maybe someday.\n-                assert!(pattern_user_ty.is_none());\n-                self.visit_bindings(subpattern, Some(user_ty), f)\n+                // FIXME(#47184): handle `pattern_user_ty` somehow\n+                self.visit_bindings(subpattern, Some((user_ty, user_ty_span)), f)\n             }\n             PatternKind::Leaf { ref subpatterns }\n             | PatternKind::Variant {\n@@ -1469,7 +1470,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<CanonicalTy<'tcx>>,\n+        user_var_ty: Option<(CanonicalTy<'tcx>, Span)>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,"}, {"sha": "494e7c03c3e68896a23d4cbe16198ca51aa72cf1", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -63,9 +63,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n         match *match_pair.pattern.kind {\n-            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+            PatternKind::AscribeUserType { ref subpattern, user_ty, user_ty_span } => {\n                 candidate.ascriptions.push(Ascription {\n-                    span: match_pair.pattern.span,\n+                    span: user_ty_span,\n                     user_ty,\n                     source: match_pair.place.clone(),\n                 });"}, {"sha": "022c606a0f819784fcf13b2567dbb44401c79a61", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -92,6 +92,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     span: pattern.span,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n                                         user_ty: *user_ty,\n+                                        user_ty_span: ty.span,\n                                         subpattern: pattern\n                                     })\n                                 };"}, {"sha": "0238a23895e50f3fec7cfcc2c3eb89cfe1aca6bc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -71,6 +71,7 @@ pub enum PatternKind<'tcx> {\n     AscribeUserType {\n         user_ty: CanonicalTy<'tcx>,\n         subpattern: Pattern<'tcx>,\n+        user_ty_span: Span,\n     },\n \n     /// x, ref x, x @ P, etc\n@@ -692,6 +693,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             kind = PatternKind::AscribeUserType {\n                 subpattern,\n                 user_ty,\n+                user_ty_span: span,\n             };\n         }\n \n@@ -1015,9 +1017,11 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n                 user_ty,\n+                user_ty_span,\n             } => PatternKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n                 user_ty: user_ty.fold_with(folder),\n+                user_ty_span,\n             },\n             PatternKind::Binding {\n                 mutability,"}, {"sha": "1abe63afa80144228d02b7300117f6901dbe78b0", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -55,8 +55,8 @@ fn main() {\n //        StorageDead(_3);\n //        StorageLive(_4);\n //        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n-//        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n //        FakeRead(ForLet, _4);\n+//        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n //        StorageLive(_5);\n //        StorageLive(_6);\n //        _6 = move _4;"}, {"sha": "a4d47eed6fb0a574d40fcbe7cee2e9a85db76683", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -5,10 +5,10 @@ LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/hr-fn-aaa-as-aba.rs:32:9\n+  --> $DIR/hr-fn-aaa-as-aba.rs:32:12\n    |\n LL |     let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n-   |         ^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b0848e99137eb3d619633bf201eaa6a85e174bc", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -131,12 +131,12 @@ LL |     y //~ ERROR\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/patterns.rs:117:9\n+  --> $DIR/patterns.rs:117:18\n    |\n LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n-   |         ^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |                  ^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "8fd195639fec3b449b9a54995b0a23007202003e", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,10 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:18:9\n+  --> $DIR/region-object-lifetime-in-coercion.rs:18:12\n    |\n LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n    |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n LL |     let x: Box<Foo + 'static> = Box::new(v);\n-   |         ^ lifetime `'static` required\n+   |            ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/region-object-lifetime-in-coercion.rs:24:5"}, {"sha": "1454c856f978586bf0f6ed076d224da72cad2bc8", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-self.rs:17:13\n+  --> $DIR/regions-addr-of-self.rs:17:16\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |             ^ type annotation requires that `'1` must outlive `'static`\n+   |                ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0e48192eaffc82d315766dfa18cfb046c632f7b3", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,33 +1,33 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'static`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      --------- lifetime `'2` appears in the type of `self`\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'2`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let _f = || {\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'static`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n   --> $DIR/regions-addr-of-upvar-self.rs:20:46"}, {"sha": "aba285d427b47a8f6f89623a938313a1bcd2c4bf", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:9\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "8bc6d565cf1b20c5ddb27a5d4e23eecc94bac000", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:9\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "668b75f5733a21ab079d703d4933167337244149", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:9\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:12\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: S<'long, 'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "5d787e6dab6991b595cdaceaab35453fe433163a", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:9\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "3fb290096686d50ffeef723488bf2e3b2899080c", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:9\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "fb59ec1ca1008ff7cc4f86042a111c5758612ed9", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:9\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:12\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Invariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "daf6a79136a543ce0841acec7b3fb9ec72be37c5", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:27:9\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:27:12\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         -- lifetime `'b` defined here\n ...\n LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n-   |         ^ type annotation requires that `'b` must outlive `'static`\n+   |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "061bc19cec9974a1e5a5fa1e4288dfa8985dc7bc", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `my_string` does not live long enough\n   --> $DIR/try-block-bad-lifetime.rs:25:33\n    |\n LL |         let result: Result<(), &str> = try {\n-   |             ------ borrow later used here\n+   |             ------ borrow later stored here\n LL |             let my_string = String::from(\"\");\n LL |             let my_str: & str = & my_string;\n    |                                 ^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "eb01c2bbb05b1029e123ef02d161053232a1c498", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/variance-cell-is-invariant.rs:24:9\n+  --> $DIR/variance-cell-is-invariant.rs:24:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Foo<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "bfcb16c654ff1d71dcf1c4a10056f44a44689002", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ec10431318bb6b4ed0a01744c93a683918d592/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=55ec10431318bb6b4ed0a01744c93a683918d592", "patch": "@@ -9,6 +9,17 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n LL |         u //~ ERROR E0312\n    |         ^ returning this value requires that `'b` must outlive `'a`\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:36:18\n+   |\n+LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |         let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+   |                  ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n error: unsatisfied lifetime constraints\n   --> $DIR/wf-static-method.rs:43:9\n    |\n@@ -20,5 +31,25 @@ LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u //~ ERROR E0312\n    |         ^ returning this value requires that `'b` must outlive `'a`\n \n-error: aborting due to 2 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:51:5\n+   |\n+LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:55:5\n+   |\n+LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     <IndirectEvil>::static_evil(b)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to 5 previous errors\n "}]}