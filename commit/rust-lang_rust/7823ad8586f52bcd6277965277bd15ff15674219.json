{"sha": "7823ad8586f52bcd6277965277bd15ff15674219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjNhZDg1ODZmNTJiY2Q2Mjc3OTY1Mjc3YmQxNWZmMTU2NzQyMTk=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-23T19:14:47Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-09-07T16:21:21Z"}, "message": "gc: Avoid walking stack above caller frame.\n\nMark the base GC stack frame with a sentinel value so we know when to\nstart collecting.", "tree": {"sha": "7f0806f58722ccbe67ae9e422122b80c32e0f15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f0806f58722ccbe67ae9e422122b80c32e0f15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7823ad8586f52bcd6277965277bd15ff15674219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7823ad8586f52bcd6277965277bd15ff15674219", "html_url": "https://github.com/rust-lang/rust/commit/7823ad8586f52bcd6277965277bd15ff15674219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7823ad8586f52bcd6277965277bd15ff15674219/comments", "author": null, "committer": null, "parents": [{"sha": "88f5ab31635855595e4053cb64153e6bb7ec622b", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f5ab31635855595e4053cb64153e6bb7ec622b", "html_url": "https://github.com/rust-lang/rust/commit/88f5ab31635855595e4053cb64153e6bb7ec622b"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "c48dec2dc8236d5ded278109269cd576aec50c53", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7823ad8586f52bcd6277965277bd15ff15674219/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7823ad8586f52bcd6277965277bd15ff15674219/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=7823ad8586f52bcd6277965277bd15ff15674219", "patch": "@@ -2,6 +2,10 @@ import stackwalk::Word;\n import libc::size_t;\n import send_map::linear::LinearMap;\n \n+export Word;\n+export gc;\n+export cleanup_stack_for_failure;\n+\n extern mod rustrt {\n     fn rust_annihilate_box(ptr: *Word);\n \n@@ -93,15 +97,29 @@ const stack:           Memory = 4;\n \n const need_cleanup:    Memory = exchange_heap | stack;\n \n-unsafe fn walk_gc_roots(mem: Memory, visitor: Visitor) {\n+unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n     let mut last_ret: *Word = ptr::null();\n+    // To avoid collecting memory used by the GC itself, skip stack\n+    // frames until past the root GC stack frame. The root GC stack\n+    // frame is marked by a sentinel, which is a box pointer stored on\n+    // the stack.\n+    let mut reached_sentinel = ptr::is_null(sentinel);\n     for stackwalk::walk_stack |frame| {\n         unsafe {\n+            let mut delay_reached_sentinel = reached_sentinel;\n             if ptr::is_not_null(last_ret) {\n                 let sp = is_safe_point(last_ret);\n                 match sp {\n                   Some(sp_info) => {\n                     for walk_safe_point(frame.fp, sp_info) |root, tydesc| {\n+                        // Skip roots until we see the sentinel.\n+                        if !reached_sentinel {\n+                            if root == sentinel {\n+                                delay_reached_sentinel = true;\n+                            }\n+                            again;\n+                        }\n+\n                         // Skip null pointers, which can occur when a\n                         // unique pointer has already been freed.\n                         if ptr::is_null(*root) {\n@@ -128,14 +146,15 @@ unsafe fn walk_gc_roots(mem: Memory, visitor: Visitor) {\n                   None => ()\n                 }\n             }\n+            reached_sentinel = delay_reached_sentinel;\n             last_ret = *ptr::offset(frame.fp, 1) as *Word;\n         }\n     }\n }\n \n fn gc() {\n     unsafe {\n-        for walk_gc_roots(task_local_heap) |_root, _tydesc| {\n+        for walk_gc_roots(task_local_heap, ptr::null()) |_root, _tydesc| {\n             // FIXME(#2997): Walk roots and mark them.\n             io::stdout().write([46]); // .\n         }\n@@ -153,8 +172,16 @@ fn RootSet() -> RootSet {\n // dead.\n fn cleanup_stack_for_failure() {\n     unsafe {\n+        // Leave a sentinel on the stack to mark the current\n+        // frame. The stack walker will ignore any frames above the\n+        // sentinel, thus avoiding collecting any memory being used by\n+        // the stack walker itself.\n+        let sentinel_box = ~0;\n+        let sentinel: **Word =\n+            unsafe::reinterpret_cast(&ptr::addr_of(sentinel_box));\n+\n         let mut roots = ~RootSet();\n-        for walk_gc_roots(need_cleanup) |root, tydesc| {\n+        for walk_gc_roots(need_cleanup, sentinel) |root, tydesc| {\n             // Track roots to avoid double frees.\n             if option::is_some(roots.find(&*root)) {\n                 again;"}, {"sha": "53ef4d99eb2a3b7cc9c670a239247c2101da6805", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7823ad8586f52bcd6277965277bd15ff15674219/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7823ad8586f52bcd6277965277bd15ff15674219/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=7823ad8586f52bcd6277965277bd15ff15674219", "patch": "@@ -8,8 +8,7 @@ use libc::c_void;\n use libc::size_t;\n use libc::uintptr_t;\n \n-import gc::gc;\n-import gc::cleanup_stack_for_failure;\n+import gc::{cleanup_stack_for_failure, gc, Word};\n \n #[allow(non_camel_case_types)]\n type rust_task = c_void;"}]}