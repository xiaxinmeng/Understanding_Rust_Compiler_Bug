{"sha": "76bc02715e3495f66860e1d470d224d2607336a6", "node_id": "C_kwDOAAsO6NoAKDc2YmMwMjcxNWUzNDk1ZjY2ODYwZTFkNDcwZDIyNGQyNjA3MzM2YTY", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-04T21:44:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-11-05T00:32:44Z"}, "message": "rework diagnostic reporting to be more structured", "tree": {"sha": "aa082cb3ab7da11193bdf8871b316faa001921aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa082cb3ab7da11193bdf8871b316faa001921aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76bc02715e3495f66860e1d470d224d2607336a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76bc02715e3495f66860e1d470d224d2607336a6", "html_url": "https://github.com/rust-lang/rust/commit/76bc02715e3495f66860e1d470d224d2607336a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76bc02715e3495f66860e1d470d224d2607336a6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c84ac86d1325816c25531e95777adf467cf31e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c84ac86d1325816c25531e95777adf467cf31e4", "html_url": "https://github.com/rust-lang/rust/commit/9c84ac86d1325816c25531e95777adf467cf31e4"}], "stats": {"total": 286, "additions": 164, "deletions": 122}, "files": [{"sha": "ef618ff51edc0a9768455560f88ba7c72f57cb14", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 108, "deletions": 77, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -88,19 +88,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n /// name (i.e: a.b.c)\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n enum CapturesInfo {\n+    /// We previously captured all of `x`, but now we capture some sub-path.\n     CapturingLess { source_expr: Option<hir::HirId>, var_name: String },\n+    //CapturingNothing {\n+    //    // where the variable appears in the closure (but is not captured)\n+    //    use_span: Span,\n+    //},\n }\n \n-/// Intermediate format to store information needed to generate migration lint. The tuple\n-/// contains the hir_id pointing to the use that resulted in the\n-/// corresponding place being captured, a String which contains the captured value's\n-/// name (i.e: a.b.c) and a String which contains the reason why migration is needed for that\n-/// capture\n-type MigrationNeededForCapture = (Option<hir::HirId>, String, String);\n+/// Reasons that we might issue a migration warning.\n+#[derive(Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+struct MigrationWarningReason {\n+    /// When we used to capture `x` in its entirety, we implemented the auto-trait(s)\n+    /// in this vec, but now we don't.\n+    auto_traits: Vec<&'static str>,\n+\n+    /// When we used to capture `x` in its entirety, we would execute some destructors\n+    /// at a different time.\n+    drop_order: bool,\n+}\n+\n+impl MigrationWarningReason {\n+    fn migration_message(&self) -> String {\n+        let base = \"changes to closure capture in Rust 2021 will affect\";\n+        if !self.auto_traits.is_empty() && self.drop_order {\n+            format!(\"{} drop order and which traits the closure implements\", base)\n+        } else if self.drop_order {\n+            format!(\"{} drop order\", base)\n+        } else {\n+            format!(\"{} which traits the closure implements\", base)\n+        }\n+    }\n+}\n+\n+/// Intermediate format to store information needed to generate a note in the migration lint.\n+struct MigrationLintNote {\n+    captures_info: CapturesInfo,\n+\n+    /// reasons why migration is needed for this capture\n+    reason: MigrationWarningReason,\n+}\n \n /// Intermediate format to store the hir id of the root variable and a HashSet containing\n /// information on why the root variable should be fully captured\n-type MigrationDiagnosticInfo = (hir::HirId, Vec<MigrationNeededForCapture>);\n+struct NeededMigration {\n+    var_hir_id: hir::HirId,\n+    diagnostics_info: Vec<MigrationLintNote>,\n+}\n \n struct InferBorrowKindVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -710,47 +744,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                  closure_head_span,\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n-                        format!(\n-                            \"changes to closure capture in Rust 2021 will affect {}\",\n-                            reasons\n-                        )\n-                        .as_str(),\n+                        &reasons.migration_message(),\n                     );\n-                    for (var_hir_id, diagnostics_info) in need_migrations.iter() {\n+                    for NeededMigration { var_hir_id, diagnostics_info } in &need_migrations {\n                         // Labels all the usage of the captured variable and why they are responsible\n                         // for migration being needed\n-                        for (captured_hir_id, captured_name, reasons) in diagnostics_info.iter() {\n-                            if let Some(captured_hir_id) = captured_hir_id {\n-                                let cause_span = self.tcx.hir().span(*captured_hir_id);\n-                                diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n-                                    self.tcx.hir().name(*var_hir_id),\n-                                    captured_name,\n-                                ));\n+                        for lint_note in diagnostics_info.iter() {\n+                            match &lint_note.captures_info {\n+                                CapturesInfo::CapturingLess { source_expr: Some(capture_expr_id), var_name: captured_name } => {\n+                                    let cause_span = self.tcx.hir().span(*capture_expr_id);\n+                                    diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n+                                        self.tcx.hir().name(*var_hir_id),\n+                                        captured_name,\n+                                    ));\n+                                }\n+                                _ => { }\n                             }\n \n                             // Add a label pointing to where a captured variable affected by drop order\n                             // is dropped\n-                            if reasons.contains(\"drop order\") {\n+                            if lint_note.reason.drop_order {\n                                 let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n \n-                                diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n-                                    self.tcx.hir().name(*var_hir_id),\n-                                    captured_name,\n-                                ));\n+                                match &lint_note.captures_info {\n+                                    CapturesInfo::CapturingLess { var_name: captured_name, .. } => {\n+                                        diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n+                                            self.tcx.hir().name(*var_hir_id),\n+                                            captured_name,\n+                                        ));\n+                                    }\n+                                }\n                             }\n \n                             // Add a label explaining why a closure no longer implements a trait\n-                            if reasons.contains(\"trait implementation\") {\n-                                let missing_trait = &reasons[..reasons.find(\"trait implementation\").unwrap() - 1];\n-\n-                                diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure implements {} as `{}` implements {}, but in Rust 2021, this closure will no longer implement {} as `{}` does not implement {}\",\n-                                    missing_trait,\n-                                    self.tcx.hir().name(*var_hir_id),\n-                                    missing_trait,\n-                                    missing_trait,\n-                                    captured_name,\n-                                    missing_trait,\n-                                ));\n+                            for &missing_trait in &lint_note.reason.auto_traits {\n+                                // not capturing something anymore cannot cause a trait to fail to be implemented:\n+                                match &lint_note.captures_info {\n+                                    CapturesInfo::CapturingLess { var_name: captured_name, .. } => {\n+                                        diagnostics_builder.span_label(closure_head_span, format!(\"in Rust 2018, this closure implements {missing_trait} as `{x}` implements {missing_trait}, but in Rust 2021, this closure will no longer implement {missing_trait} as `{p}` does not implement {missing_trait}\",\n+                                            missing_trait = missing_trait,\n+                                            x = self.tcx.hir().name(*var_hir_id),\n+                                            p = captured_name,\n+                                        ));\n+                                    }\n+                                }\n                             }\n                         }\n                     }\n@@ -843,25 +880,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Combines all the reasons for 2229 migrations\n     fn compute_2229_migrations_reasons(\n         &self,\n-        auto_trait_reasons: FxHashSet<&str>,\n-        drop_reason: bool,\n-    ) -> String {\n-        let mut reasons = String::new();\n-\n-        if !auto_trait_reasons.is_empty() {\n-            reasons = format!(\n-                \"{} trait implementation for closure\",\n-                auto_trait_reasons.clone().into_iter().collect::<Vec<&str>>().join(\", \")\n-            );\n-        }\n+        auto_trait_reasons: FxHashSet<&'static str>,\n+        drop_order: bool,\n+    ) -> MigrationWarningReason {\n+        let mut reasons = MigrationWarningReason::default();\n \n-        if !auto_trait_reasons.is_empty() && drop_reason {\n-            reasons = format!(\"{} and \", reasons);\n+        for auto_trait in auto_trait_reasons {\n+            reasons.auto_traits.push(auto_trait);\n         }\n \n-        if drop_reason {\n-            reasons = format!(\"{}drop order\", reasons);\n-        }\n+        reasons.drop_order = drop_order;\n \n         reasons\n     }\n@@ -877,7 +905,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         var_hir_id: hir::HirId,\n         closure_clause: hir::CaptureBy,\n-    ) -> Option<FxHashMap<CapturesInfo, FxHashSet<&str>>> {\n+    ) -> Option<FxHashMap<CapturesInfo, FxHashSet<&'static str>>> {\n         let auto_traits_def_id = vec![\n             self.tcx.lang_items().clone_trait(),\n             self.tcx.lang_items().sync_trait(),\n@@ -1022,7 +1050,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match closure_clause {\n                 // Only migrate if closure is a move closure\n-                hir::CaptureBy::Value => return Some(FxHashSet::default()),\n+                hir::CaptureBy::Value => {\n+                    let diagnostics_info = FxHashSet::default();\n+                    //diagnostics_info.insert(CapturesInfo::CapturingNothing);\n+                    //let upvars = self.tcx.upvars_mentioned(closure_def_id).expect(\"must be an upvar\");\n+                    //let _span = upvars[&var_hir_id];\n+                    return Some(diagnostics_info);\n+                }\n                 hir::CaptureBy::Ref => {}\n             }\n \n@@ -1095,9 +1129,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_span: Span,\n         closure_clause: hir::CaptureBy,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n-    ) -> (Vec<MigrationDiagnosticInfo>, String) {\n+    ) -> (Vec<NeededMigration>, MigrationWarningReason) {\n         let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) else {\n-            return (Vec::new(), String::new());\n+            return (Vec::new(), MigrationWarningReason::default());\n         };\n \n         let mut need_migrations = Vec::new();\n@@ -1106,7 +1140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Perform auto-trait analysis\n         for (&var_hir_id, _) in upvars.iter() {\n-            let mut responsible_captured_hir_ids = Vec::new();\n+            let mut diagnostics_info = Vec::new();\n \n             let auto_trait_diagnostic = if let Some(diagnostics_info) =\n                 self.compute_2229_migrations_for_trait(min_captures, var_hir_id, closure_clause)\n@@ -1138,38 +1172,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let mut capture_diagnostic = capture_diagnostic.into_iter().collect::<Vec<_>>();\n             capture_diagnostic.sort();\n-            for captured_info in capture_diagnostic.iter() {\n+            for captures_info in capture_diagnostic {\n                 // Get the auto trait reasons of why migration is needed because of that capture, if there are any\n                 let capture_trait_reasons =\n-                    if let Some(reasons) = auto_trait_diagnostic.get(captured_info) {\n+                    if let Some(reasons) = auto_trait_diagnostic.get(&captures_info) {\n                         reasons.clone()\n                     } else {\n                         FxHashSet::default()\n                     };\n \n                 // Check if migration is needed because of drop reorder as a result of that capture\n-                let capture_drop_reorder_reason = drop_reorder_diagnostic.contains(captured_info);\n+                let capture_drop_reorder_reason = drop_reorder_diagnostic.contains(&captures_info);\n \n                 // Combine all the reasons of why the root variable should be captured as a result of\n                 // auto trait implementation issues\n                 auto_trait_migration_reasons.extend(capture_trait_reasons.clone());\n \n-                match captured_info {\n-                    CapturesInfo::CapturingLess { source_expr, var_name } => {\n-                        responsible_captured_hir_ids.push((\n-                            *source_expr,\n-                            var_name.clone(),\n-                            self.compute_2229_migrations_reasons(\n-                                capture_trait_reasons,\n-                                capture_drop_reorder_reason,\n-                            ),\n-                        ));\n-                    }\n-                }\n+                diagnostics_info.push(MigrationLintNote {\n+                    captures_info,\n+                    reason: self.compute_2229_migrations_reasons(\n+                        capture_trait_reasons,\n+                        capture_drop_reorder_reason,\n+                    ),\n+                });\n             }\n \n-            if !capture_diagnostic.is_empty() {\n-                need_migrations.push((var_hir_id, responsible_captured_hir_ids));\n+            if !diagnostics_info.is_empty() {\n+                need_migrations.push(NeededMigration { var_hir_id, diagnostics_info });\n             }\n         }\n         (\n@@ -2130,10 +2159,12 @@ fn should_do_rust_2021_incompatible_closure_captures_analysis(\n /// - s2: Comma separated names of the variables being migrated.\n fn migration_suggestion_for_2229(\n     tcx: TyCtxt<'_>,\n-    need_migrations: &Vec<MigrationDiagnosticInfo>,\n+    need_migrations: &Vec<NeededMigration>,\n ) -> (String, String) {\n-    let need_migrations_variables =\n-        need_migrations.iter().map(|(v, _)| var_name(tcx, *v)).collect::<Vec<_>>();\n+    let need_migrations_variables = need_migrations\n+        .iter()\n+        .map(|NeededMigration { var_hir_id: v, .. }| var_name(tcx, *v))\n+        .collect::<Vec<_>>();\n \n     let migration_ref_concat =\n         need_migrations_variables.iter().map(|v| format!(\"&{}\", v)).collect::<Vec<_>>().join(\", \");"}, {"sha": "b938b8429537e43b696ebc4c1cb07efd92e448f1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -20,7 +20,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Send` trait implementation for closure\n+        //~^ ERROR: changes to closure capture\n         //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n@@ -40,8 +40,9 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: changes to closure capture\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -65,7 +66,7 @@ fn test_clone_trait() {\n     let f = U(S(Foo(0)), T(0));\n     let c = || {\n         let _ = &f;\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured"}, {"sha": "bca935843e0109f434272a2afbe71c405b04e2aa", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -20,7 +20,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Send` trait implementation for closure\n+        //~^ ERROR: changes to closure capture\n         //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n@@ -40,8 +40,9 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: changes to closure capture\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n@@ -64,7 +65,7 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(Foo(0)), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured"}, {"sha": "9bdc2f48194bf52c03885ce65dc9564aa85ac495", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -1,4 +1,4 @@\n-error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n   --> $DIR/auto_traits.rs:22:19\n    |\n LL |     thread::spawn(move || unsafe {\n@@ -23,11 +23,14 @@ LL |\n LL |         *fptr.0 = 20;\n  ...\n \n-error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n   --> $DIR/auto_traits.rs:42:19\n    |\n LL |     thread::spawn(move || unsafe {\n-   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure implements `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`\n+   |                   ^^^^^^^^^^^^^^\n+   |                   |\n+   |                   in Rust 2018, this closure implements `Sync` as `fptr` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr.0.0` does not implement `Sync`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr.0.0` does not implement `Send`\n ...\n LL |         *fptr.0.0 = 20;\n    |         --------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0.0`\n@@ -40,11 +43,11 @@ LL |\n LL |\n LL |\n LL |\n-LL |         *fptr.0.0 = 20;\n+LL |\n  ...\n \n-error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n-  --> $DIR/auto_traits.rs:66:13\n+error: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n+  --> $DIR/auto_traits.rs:67:13\n    |\n LL |     let c = || {\n    |             ^^ in Rust 2018, this closure implements `Clone` as `f` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f.1` does not implement `Clone`"}, {"sha": "3cb72d679a5d55c850d1eaf10a22e50c6fdcaad5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -19,8 +19,9 @@ where\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         let _ = &f;\n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "783c4034af2dca9dabeade6b75524d6ff7abfeff", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -18,8 +18,9 @@ where\n {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n+        //~| NOTE: in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n+        //~| NOTE: in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()"}, {"sha": "6a469db6ebb0dbe02299490c59adce416046ab29", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -1,8 +1,11 @@\n-error: changes to closure capture in Rust 2021 will affect `UnwindSafe`, `RefUnwindSafe` trait implementation for closure\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n   --> $DIR/mir_calls_to_shims.rs:20:38\n    |\n LL |     let result = panic::catch_unwind(move || {\n-   |                                      ^^^^^^^ in Rust 2018, this closure implements `UnwindSafe`, `RefUnwindSafe` as `f` implements `UnwindSafe`, `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe`, `RefUnwindSafe` as `f.0` does not implement `UnwindSafe`, `RefUnwindSafe`\n+   |                                      ^^^^^^^\n+   |                                      |\n+   |                                      in Rust 2018, this closure implements `UnwindSafe` as `f` implements `UnwindSafe`, but in Rust 2021, this closure will no longer implement `UnwindSafe` as `f.0` does not implement `UnwindSafe`\n+   |                                      in Rust 2018, this closure implements `RefUnwindSafe` as `f` implements `RefUnwindSafe`, but in Rust 2021, this closure will no longer implement `RefUnwindSafe` as `f.0` does not implement `RefUnwindSafe`\n ...\n LL |         f.0()\n    |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`"}, {"sha": "7a7b1ec23213322d5ead9ecba2f35bb04bb7cafe", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.fixed?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -18,7 +18,6 @@ impl Foo {\n     }\n }\n \n-\n struct S(Foo);\n \n #[derive(Clone)]\n@@ -37,7 +36,7 @@ fn test_multi_issues() {\n     let f2 = U(S(Foo::from(\"bar\")), T(0));\n     let c = || {\n         let _ = (&f1, &f2);\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n@@ -57,7 +56,7 @@ fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(Foo::from(\"foo\")), T(0));\n     let c = || {\n         let _ = &f1;\n-        //~^ ERROR: `Clone` trait implementation for closure\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n@@ -83,7 +82,7 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n         let _ = &f1;\n-        //~^ ERROR: `Clone` trait implementation for closure\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -103,7 +102,7 @@ fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n         let _ = &f1;\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n@@ -136,8 +135,9 @@ fn test_multi_traits_issues() {\n     let mut f2 = 10;\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || { let _ = (&fptr1, &fptr2); unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: changes to closure capture in Rust 2021\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n         //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured"}, {"sha": "9efe79c5971c62aae904fc62fb68184f3f60020f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.rs?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -18,7 +18,6 @@ impl Foo {\n     }\n }\n \n-\n struct S(Foo);\n \n #[derive(Clone)]\n@@ -36,7 +35,7 @@ fn test_multi_issues() {\n     let f1 = U(S(Foo::from(\"foo\")), T(0));\n     let f2 = U(S(Foo::from(\"bar\")), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1`, `f2` to be fully captured\n@@ -55,7 +54,7 @@ fn test_multi_issues() {\n fn test_capturing_all_disjoint_fields_individually() {\n     let f1 = U(S(Foo::from(\"foo\")), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation for closure\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n@@ -80,7 +79,7 @@ impl Clone for U1 {\n fn test_capturing_several_disjoint_fields_individually_1() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation for closure\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect which traits the closure implements [rust_2021_incompatible_closure_captures]\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.2` does not implement `Clone`\n         //~| NOTE: for more information, see\n@@ -99,7 +98,7 @@ fn test_capturing_several_disjoint_fields_individually_1() {\n fn test_capturing_several_disjoint_fields_individually_2() {\n     let f1 = U1(S(Foo::from(\"foo\")), T(0), S(Foo::from(\"bar\")));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation for closure and drop order\n+        //~^ ERROR: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n         //~| NOTE: in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f1` to be fully captured\n@@ -132,8 +131,9 @@ fn test_multi_traits_issues() {\n     let mut f2 = 10;\n     let fptr2 = SendPointer(&mut f2 as *mut i32);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation for closure\n-        //~| NOTE: in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+        //~^ ERROR: changes to closure capture in Rust 2021\n+        //~| NOTE: in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n+        //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n         //~| NOTE: in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n         //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr1`, `fptr2` to be fully captured"}, {"sha": "02492283b7f58d985cd5c46063bb7d11b253542e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76bc02715e3495f66860e1d470d224d2607336a6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=76bc02715e3495f66860e1d470d224d2607336a6", "patch": "@@ -1,5 +1,5 @@\n-error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n-  --> $DIR/multi_diagnostics.rs:38:13\n+error: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n+  --> $DIR/multi_diagnostics.rs:37:13\n    |\n LL |     let c = || {\n    |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n@@ -25,8 +25,8 @@ LL ~     let c = || {\n LL +         let _ = (&f1, &f2);\n    |\n \n-error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n-  --> $DIR/multi_diagnostics.rs:57:13\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n+  --> $DIR/multi_diagnostics.rs:56:13\n    |\n LL |     let c = || {\n    |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n@@ -41,8 +41,8 @@ LL ~     let c = || {\n LL +         let _ = &f1;\n    |\n \n-error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure\n-  --> $DIR/multi_diagnostics.rs:82:13\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n+  --> $DIR/multi_diagnostics.rs:81:13\n    |\n LL |     let c = || {\n    |             ^^\n@@ -63,8 +63,8 @@ LL ~     let c = || {\n LL +         let _ = &f1;\n    |\n \n-error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order\n-  --> $DIR/multi_diagnostics.rs:101:13\n+error: changes to closure capture in Rust 2021 will affect drop order and which traits the closure implements\n+  --> $DIR/multi_diagnostics.rs:100:13\n    |\n LL |     let c = || {\n    |             ^^ in Rust 2018, this closure implements `Clone` as `f1` implements `Clone`, but in Rust 2021, this closure will no longer implement `Clone` as `f1.0` does not implement `Clone`\n@@ -88,13 +88,14 @@ LL ~     let c = || {\n LL +         let _ = &f1;\n    |\n \n-error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure\n-  --> $DIR/multi_diagnostics.rs:134:19\n+error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n+  --> $DIR/multi_diagnostics.rs:133:19\n    |\n LL |     thread::spawn(move || unsafe {\n    |                   ^^^^^^^^^^^^^^\n    |                   |\n-   |                   in Rust 2018, this closure implements `Sync`, `Send` as `fptr1` implements `Sync`, `Send`, but in Rust 2021, this closure will no longer implement `Sync`, `Send` as `fptr1.0.0` does not implement `Sync`, `Send`\n+   |                   in Rust 2018, this closure implements `Sync` as `fptr1` implements `Sync`, but in Rust 2021, this closure will no longer implement `Sync` as `fptr1.0.0` does not implement `Sync`\n+   |                   in Rust 2018, this closure implements `Send` as `fptr1` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr1.0.0` does not implement `Send`\n    |                   in Rust 2018, this closure implements `Send` as `fptr2` implements `Send`, but in Rust 2021, this closure will no longer implement `Send` as `fptr2.0` does not implement `Send`\n ...\n LL |         *fptr1.0.0 = 20;"}]}