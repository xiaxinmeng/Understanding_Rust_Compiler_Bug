{"sha": "24699bcbadff59693a89a5184afed87f6416cdea", "node_id": "C_kwDOAAsO6NoAKDI0Njk5YmNiYWRmZjU5NjkzYTg5YTUxODRhZmVkODdmNjQxNmNkZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T13:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T13:42:09Z"}, "message": "Auto merge of #95956 - yaahc:stable-in-unstable, r=cjgillot\n\nSupport unstable moves via stable in unstable items\n\npart of https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/moving.20items.20to.20core.20unstably and a blocker of https://github.com/rust-lang/rust/pull/90328.\n\nThe libs-api team needs the ability to move an already stable item to a new location unstably, in this case for Error in core. Otherwise these changes are insta-stable making them much harder to merge.\n\nThis PR attempts to solve the problem by checking the stability of path segments as well as the last item in the path itself, which is currently the only thing checked.", "tree": {"sha": "d982a08c704d13e4ace62c79465e57dd4a6d6f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d982a08c704d13e4ace62c79465e57dd4a6d6f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24699bcbadff59693a89a5184afed87f6416cdea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24699bcbadff59693a89a5184afed87f6416cdea", "html_url": "https://github.com/rust-lang/rust/commit/24699bcbadff59693a89a5184afed87f6416cdea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24699bcbadff59693a89a5184afed87f6416cdea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a8854f9be2e5cad764d630a53d26c7b72f8162", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a8854f9be2e5cad764d630a53d26c7b72f8162", "html_url": "https://github.com/rust-lang/rust/commit/f1a8854f9be2e5cad764d630a53d26c7b72f8162"}, {"sha": "3e2c5b5f751c3375c2ce4a2d2f54e4d8499e454d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2c5b5f751c3375c2ce4a2d2f54e4d8499e454d", "html_url": "https://github.com/rust-lang/rust/commit/3e2c5b5f751c3375c2ce4a2d2f54e4d8499e454d"}], "stats": {"total": 337, "additions": 304, "deletions": 33}, "files": [{"sha": "dcfbecedfe8ffd5d9a77bb85d804956566a14383", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -137,7 +137,7 @@ impl ConstStability {\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n-    Stable { since: Symbol },\n+    Stable { since: Symbol, allowed_through_unstable_modules: bool },\n }\n \n impl StabilityLevel {\n@@ -172,6 +172,7 @@ where\n     let mut stab: Option<(Stability, Span)> = None;\n     let mut const_stab: Option<(ConstStability, Span)> = None;\n     let mut promotable = false;\n+    let mut allowed_through_unstable_modules = false;\n \n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n@@ -182,6 +183,7 @@ where\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n+            sym::rustc_allowed_through_unstable_modules,\n         ]\n         .iter()\n         .any(|&s| attr.has_name(s))\n@@ -193,6 +195,8 @@ where\n \n         if attr.has_name(sym::rustc_promotable) {\n             promotable = true;\n+        } else if attr.has_name(sym::rustc_allowed_through_unstable_modules) {\n+            allowed_through_unstable_modules = true;\n         }\n         // attributes with data\n         else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n@@ -406,7 +410,7 @@ where\n \n                     match (feature, since) {\n                         (Some(feature), Some(since)) => {\n-                            let level = Stable { since };\n+                            let level = Stable { since, allowed_through_unstable_modules: false };\n                             if sym::stable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n                             } else {\n@@ -447,6 +451,27 @@ where\n         }\n     }\n \n+    if allowed_through_unstable_modules {\n+        if let Some((\n+            Stability {\n+                level: StabilityLevel::Stable { ref mut allowed_through_unstable_modules, .. },\n+                ..\n+            },\n+            _,\n+        )) = stab\n+        {\n+            *allowed_through_unstable_modules = true;\n+        } else {\n+            struct_span_err!(\n+                diagnostic,\n+                item_sp,\n+                E0789,\n+                \"`rustc_allowed_through_unstable_modules` attribute must be paired with a `stable` attribute\"\n+            )\n+            .emit();\n+        }\n+    }\n+\n     (stab, const_stab)\n }\n "}, {"sha": "977318b85895e37d90135cc07a70b6406bcda490", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -644,4 +644,5 @@ E0788: include_str!(\"./error_codes/E0788.md\"),\n //  E0721, // `await` keyword\n //  E0723, // unstable feature in `const` context\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n+    E0789, // rustc_allowed_through_unstable_modules without stability attribute\n }"}, {"sha": "c806df8214586859883b28b34d6a97227d01153a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -512,6 +512,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n+    rustc_attr!(rustc_allowed_through_unstable_modules, Normal, template!(Word), WarnFollowing,\n+    \"rustc_allowed_through_unstable_modules special cases accidental stabilizations of stable items \\\n+    through unstable paths\"),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:"}, {"sha": "96e068a36012adb923f356d9c905298f1d434fda", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -471,13 +471,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// This function will also check if the item is deprecated.\n     /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n+    ///\n+    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.\n     pub fn check_stability(\n         self,\n         def_id: DefId,\n         id: Option<HirId>,\n         span: Span,\n         method_span: Option<Span>,\n-    ) {\n+    ) -> bool {\n         self.check_stability_allow_unstable(def_id, id, span, method_span, AllowUnstable::No)\n     }\n \n@@ -490,14 +492,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n     ///\n     /// Pass `AllowUnstable::Yes` to `allow_unstable` to force an unstable item to be allowed. Deprecation warnings will be emitted normally.\n+    ///\n+    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.\n     pub fn check_stability_allow_unstable(\n         self,\n         def_id: DefId,\n         id: Option<HirId>,\n         span: Span,\n         method_span: Option<Span>,\n         allow_unstable: AllowUnstable,\n-    ) {\n+    ) -> bool {\n         self.check_optional_stability(\n             def_id,\n             id,\n@@ -516,6 +520,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// missing stability attributes (not necessarily just emit a `bug!`). This is necessary\n     /// for default generic parameters, which only have stability attributes if they were\n     /// added after the type on which they're defined.\n+    ///\n+    /// Returns `true` if item is allowed aka, stable or unstable under an enabled feature.\n     pub fn check_optional_stability(\n         self,\n         def_id: DefId,\n@@ -524,13 +530,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         method_span: Option<Span>,\n         allow_unstable: AllowUnstable,\n         unmarked: impl FnOnce(Span, DefId),\n-    ) {\n+    ) -> bool {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit();\n             })\n         };\n-        match self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable) {\n+        let eval_result =\n+            self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable);\n+        let is_allowed = matches!(eval_result, EvalResult::Allow);\n+        match eval_result {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(\n                 self.sess,\n@@ -544,6 +553,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             ),\n             EvalResult::Unmarked => unmarked(span, def_id),\n         }\n+\n+        is_allowed\n     }\n \n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {"}, {"sha": "e626a1e4ed1015fd947ac1a4f5207adc8dcf7cd1", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -139,6 +139,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_const_stable\n                 | sym::unstable\n                 | sym::stable\n+                | sym::rustc_allowed_through_unstable_modules\n                 | sym::rustc_promotable => self.check_stability_promotable(&attr, span, target),\n                 _ => true,\n             };"}, {"sha": "4e091c5b70d5cd1ef16e3011c5f6655013b9c00c", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,6 +1,7 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n+use attr::StabilityLevel;\n use rustc_attr::{self as attr, ConstStability, Stability};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::struct_span_err;\n@@ -223,7 +224,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n \n             // Check if deprecated_since < stable_since. If it is,\n             // this is *almost surely* an accident.\n-            if let (&Some(dep_since), &attr::Stable { since: stab_since }) =\n+            if let (&Some(dep_since), &attr::Stable { since: stab_since, .. }) =\n                 (&depr.as_ref().and_then(|(d, _)| d.since), &stab.level)\n             {\n                 // Explicit version of iter::order::lt to handle parse errors properly\n@@ -773,7 +774,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, id: hir::HirId) {\n         if let Some(def_id) = path.res.opt_def_id() {\n             let method_span = path.segments.last().map(|s| s.ident.span);\n-            self.tcx.check_stability_allow_unstable(\n+            let item_is_allowed = self.tcx.check_stability_allow_unstable(\n                 def_id,\n                 Some(id),\n                 path.span,\n@@ -783,8 +784,52 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 } else {\n                     AllowUnstable::No\n                 },\n-            )\n+            );\n+\n+            let is_allowed_through_unstable_modules = |def_id| {\n+                self.tcx\n+                    .lookup_stability(def_id)\n+                    .map(|stab| match stab.level {\n+                        StabilityLevel::Stable { allowed_through_unstable_modules, .. } => {\n+                            allowed_through_unstable_modules\n+                        }\n+                        _ => false,\n+                    })\n+                    .unwrap_or(false)\n+            };\n+\n+            if item_is_allowed && !is_allowed_through_unstable_modules(def_id) {\n+                // Check parent modules stability as well if the item the path refers to is itself\n+                // stable. We only emit warnings for unstable path segments if the item is stable\n+                // or allowed because stability is often inherited, so the most common case is that\n+                // both the segments and the item are unstable behind the same feature flag.\n+                //\n+                // We check here rather than in `visit_path_segment` to prevent visiting the last\n+                // path segment twice\n+                //\n+                // We include special cases via #[rustc_allowed_through_unstable_modules] for items\n+                // that were accidentally stabilized through unstable paths before this check was\n+                // added, such as `core::intrinsics::transmute`\n+                let parents = path.segments.iter().rev().skip(1);\n+                for path_segment in parents {\n+                    if let Some(def_id) = path_segment.res.as_ref().and_then(Res::opt_def_id) {\n+                        // use `None` for id to prevent deprecation check\n+                        self.tcx.check_stability_allow_unstable(\n+                            def_id,\n+                            None,\n+                            path.span,\n+                            None,\n+                            if is_unstable_reexport(self.tcx, id) {\n+                                AllowUnstable::Yes\n+                            } else {\n+                                AllowUnstable::No\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n         }\n+\n         intravisit::walk_path(self, path)\n     }\n }"}, {"sha": "0c271c047091f04c9495d0a32718ac44cb914675", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1191,6 +1191,7 @@ symbols! {\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n+        rustc_allowed_through_unstable_modules,\n         rustc_attrs,\n         rustc_box,\n         rustc_builtin_macro,"}, {"sha": "699237446cf77a0a25645d6e6007a7d9295a6a47", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -439,7 +439,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // as the rest of the type. As such, we ignore missing\n                                 // stability attributes.\n                             },\n-                        )\n+                        );\n                     }\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.astconv.allow_ty_infer()) {\n                         self.inferred_params.push(ty.span);"}, {"sha": "9097ffc2cc5a7e61834a014aa8edc5dc316369b6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1457,6 +1457,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;\n@@ -2649,6 +2650,7 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n /// Here is an example of how this could cause a problem:\n /// ```no_run\n /// #![feature(const_eval_select)]\n+/// #![feature(core_intrinsics)]\n /// use std::hint::unreachable_unchecked;\n /// use std::intrinsics::const_eval_select;\n ///"}, {"sha": "bd62bc5c3056c82a67affec256a05cdc8221e44b", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1537,7 +1537,7 @@ pub(crate) mod builtin {\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n+    #[allow_internal_unstable(core_intrinsics, libstd_sys_internals, rt)]\n     #[deprecated(since = \"1.52.0\", note = \"rustc-serialize is deprecated and no longer supported\")]\n     #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcDecodable($item:item) {\n@@ -1547,7 +1547,7 @@ pub(crate) mod builtin {\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[allow_internal_unstable(core_intrinsics)]\n+    #[allow_internal_unstable(core_intrinsics, rt)]\n     #[deprecated(since = \"1.52.0\", note = \"rustc-serialize is deprecated and no longer supported\")]\n     #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcEncodable($item:item) {"}, {"sha": "bbace0ef66ca32940e71261745d7fccdd430fcf7", "filename": "library/core/tests/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Ftests%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fcore%2Ftests%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Funicode.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,5 +1,5 @@\n #[test]\n pub fn version() {\n-    let (major, _minor, _update) = core::unicode::UNICODE_VERSION;\n+    let (major, _minor, _update) = core::char::UNICODE_VERSION;\n     assert!(major >= 10);\n }"}, {"sha": "aa309065c88f2121b9dc8c3ec832b36ca5072359", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -214,7 +214,7 @@\n #![cfg_attr(not(bootstrap), deny(ffi_unwind_calls))]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n-#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]\n+#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count, rt))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)\n@@ -297,6 +297,7 @@\n // Library features (alloc):\n #![feature(alloc_layout_extra)]\n #![feature(alloc_c_string)]\n+#![feature(alloc_ffi)]\n #![feature(allocator_api)]\n #![feature(get_mut_unchecked)]\n #![feature(map_try_insert)]"}, {"sha": "45bc56efb3b99050afe75afe9df398163465d64f", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -11,7 +11,7 @@ use crate::thread::Result;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic)]\n+#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic, rt)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {"}, {"sha": "c1fdece9ec6da3f819502f009015dfa2cb834b29", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -854,7 +854,7 @@ fn render_stability_since_raw(\n     }\n \n     let const_title_and_stability = match const_stability {\n-        Some(ConstStability { level: StabilityLevel::Stable { since }, .. })\n+        Some(ConstStability { level: StabilityLevel::Stable { since, .. }, .. })\n             if Some(since) != containing_const_ver =>\n         {\n             Some((format!(\"const since {}\", since), format!(\"const: {}\", since)))"}, {"sha": "db8a04763d35dc0ac3242b8b20e02ff16f2f8b05", "filename": "src/test/codegen/intrinsics/const_eval_select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fconst_eval_select.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -2,6 +2,7 @@\n \n #![crate_type = \"lib\"]\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "52f4e594f1a0aac33839c4d89847f8bf6400b641", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "6103d6c6e3a6ffa1c582553b31eb8629c0002f07", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,26 +1,26 @@\n-error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]: ~const FnOnce<()>` is not satisfied\n-  --> $DIR/const-eval-select-bad.rs:6:27\n+error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]: ~const FnOnce<()>` is not satisfied\n+  --> $DIR/const-eval-select-bad.rs:7:27\n    |\n LL |     const_eval_select((), || {}, || {});\n-   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`\n+   |     -----------------     ^^^^^ expected an `FnOnce<()>` closure, found `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`\n-note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]`, but that implementation is not `const`\n-  --> $DIR/const-eval-select-bad.rs:6:27\n+   = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]`, but that implementation is not `const`\n+  --> $DIR/const-eval-select-bad.rs:7:27\n    |\n LL |     const_eval_select((), || {}, || {});\n    |                           ^^^^^\n-   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:29]` in a closure with no arguments: `|| { /* code */ }`\n+   = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n    |\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0277]: the trait bound `{integer}: ~const FnOnce<()>` is not satisfied\n-  --> $DIR/const-eval-select-bad.rs:8:27\n+  --> $DIR/const-eval-select-bad.rs:9:27\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n    |     -----------------     ^^ expected an `FnOnce<()>` closure, found `{integer}`\n@@ -36,7 +36,7 @@ LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`\n-  --> $DIR/const-eval-select-bad.rs:8:31\n+  --> $DIR/const-eval-select-bad.rs:9:31\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);\n    |     -----------------         ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n@@ -52,7 +52,7 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n-  --> $DIR/const-eval-select-bad.rs:28:5\n+  --> $DIR/const-eval-select-bad.rs:29:5\n    |\n LL |     const_eval_select((1,), foo, bar);\n    |     ^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`\n@@ -64,7 +64,7 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |                    ^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/const-eval-select-bad.rs:33:32\n+  --> $DIR/const-eval-select-bad.rs:34:32\n    |\n LL | const fn foo(n: i32) -> i32 {\n    | --------------------------- found signature of `fn(i32) -> _`"}, {"sha": "f9554decec16b47e3830ed87b7016fef64a32fae", "filename": "src/test/ui/intrinsics/const-eval-select-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,5 +1,6 @@\n #![feature(staged_api)]\n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n #![stable(since = \"1.0\", feature = \"ui_test\")]\n \n use std::intrinsics::const_eval_select;"}, {"sha": "65b507b887b46f6ee32ab6526712545764f7ad6f", "filename": "src/test/ui/intrinsics/const-eval-select-stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-stability.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,5 +1,5 @@\n error: `const_eval_select` is not yet stable as a const fn\n-  --> $DIR/const-eval-select-stability.rs:16:5\n+  --> $DIR/const-eval-select-stability.rs:17:5\n    |\n LL |     const_eval_select((), nothing, log);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f3924acf0fa8b7ea3444470fe3e5f02fe76f6607", "filename": "src/test/ui/intrinsics/const-eval-select-x86_64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-x86_64.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n \n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n use std::intrinsics::const_eval_select;\n use std::arch::x86_64::*;\n use std::mem::transmute;"}, {"sha": "9ff20d3fbdd9e14a56348244002f55af61e291b1", "filename": "src/test/ui/intrinsics/const-eval-select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_eval_select)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::const_eval_select;\n "}, {"sha": "d0f0e9f807123eed3d49647435876efdfd1f87c9", "filename": "src/test/ui/lint/lint-stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -191,11 +191,11 @@ mod inheritance {\n         stable_mod::unstable(); //~ ERROR use of unstable library feature\n         stable_mod::stable();\n \n-        unstable_mod::deprecated();\n+        unstable_mod::deprecated(); //~ ERROR use of unstable library feature\n         unstable_mod::unstable(); //~ ERROR use of unstable library feature\n \n         let _ = Unstable::UnstableVariant; //~ ERROR use of unstable library feature\n-        let _ = Unstable::StableVariant;\n+        let _ = Unstable::StableVariant; //~ ERROR use of unstable library feature\n \n         let x: usize = 0;\n         x.stable();"}, {"sha": "bd1a57dc4cc50764eb30b6a42b01e973c1140724", "filename": "src/test/ui/lint/lint-stability.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -294,6 +294,14 @@ LL |         stable_mod::unstable();\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/lint-stability.rs:194:9\n+   |\n+LL |         unstable_mod::deprecated();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/lint-stability.rs:195:9\n    |\n@@ -310,6 +318,14 @@ LL |         let _ = Unstable::UnstableVariant;\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/lint-stability.rs:198:17\n+   |\n+LL |         let _ = Unstable::StableVariant;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/lint-stability.rs:88:48\n    |\n@@ -326,6 +342,6 @@ LL |             TypeUnstable = u8,\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 43 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "f8bbe90cfc53b21ec3e943b1ef049e03e59cde90", "filename": "src/test/ui/stability-attribute/accidental-stable-in-unstable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+extern crate core;\n+\n+// Known accidental stabilizations with no known users, slated for un-stabilization\n+// fully stable @ core::char::UNICODE_VERSION\n+use core::unicode::UNICODE_VERSION; //~ ERROR use of unstable library feature 'unicode_internals'\n+\n+// Known accidental stabilizations with known users\n+// fully stable @ core::mem::transmute\n+use core::intrinsics::transmute; // depended upon by rand_core"}, {"sha": "ff733822cab98c5f979149d6c505c35cf82b1a9c", "filename": "src/test/ui/stability-attribute/accidental-stable-in-unstable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Faccidental-stable-in-unstable.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'unicode_internals'\n+  --> $DIR/accidental-stable-in-unstable.rs:6:5\n+   |\n+LL | use core::unicode::UNICODE_VERSION;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unicode_internals)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ff0228e4da6a8acbc7c7025fb644ea7f88162b63", "filename": "src/test/ui/stability-attribute/allowed-through-unstable.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,9 @@\n+// Test for new `#[rustc_allowed_through_unstable_modules]` attribute\n+//\n+// aux-build:allowed-through-unstable-core.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate allowed_through_unstable_core;\n+\n+use allowed_through_unstable_core::unstable_module::OldStableTraitAllowedThoughUnstable;\n+use allowed_through_unstable_core::unstable_module::NewStableTraitNotAllowedThroughUnstable; //~ ERROR use of unstable library feature 'unstable_test_feature'"}, {"sha": "132c00b89b2296c5701dc74eff2d9153c7f2995e", "filename": "src/test/ui/stability-attribute/allowed-through-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fallowed-through-unstable.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/allowed-through-unstable.rs:9:5\n+   |\n+LL | use allowed_through_unstable_core::unstable_module::NewStableTraitNotAllowedThroughUnstable;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b597009a309c97cfdcd62fbcf7c801339e0f85bf", "filename": "src/test/ui/stability-attribute/auxiliary/allowed-through-unstable-core.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fallowed-through-unstable-core.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![feature(rustc_attrs)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"1\")]\n+pub mod unstable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    #[rustc_allowed_through_unstable_modules]\n+    pub trait OldStableTraitAllowedThoughUnstable {}\n+\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub trait NewStableTraitNotAllowedThroughUnstable {}\n+}"}, {"sha": "e45b00f994af45139222fd2e9b1d8a2112a13238", "filename": "src/test/ui/stability-attribute/auxiliary/stable-in-unstable-core.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-core.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,8 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+#[unstable(feature = \"unstable_test_feature\", issue = \"1\")]\n+pub mod new_unstable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub trait OldTrait {}\n+}"}, {"sha": "28ad8c28da1589d73e7e98c2c6f2258ebe56e71b", "filename": "src/test/ui/stability-attribute/auxiliary/stable-in-unstable-std.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstable-in-unstable-std.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+#![feature(unstable_test_feature)]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+\n+extern crate stable_in_unstable_core;\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+pub mod old_stable_module {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n+    pub use stable_in_unstable_core::new_unstable_module::OldTrait;\n+}"}, {"sha": "272a1a972340c41020f11009d733e5b25693287f", "filename": "src/test/ui/stability-attribute/stable-in-unstable.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,46 @@\n+// This test is meant to test that we can have a stable item in an unstable module, and that\n+// calling that item through the unstable module is unstable, but that re-exporting it from another\n+// crate in a stable module is fine.\n+//\n+// This is necessary to support moving items from `std` into `core` or `alloc` unstably while still\n+// exporting the original stable interface in `std`, such as moving `Error` into `core`.\n+//\n+// aux-build:stable-in-unstable-core.rs\n+// aux-build:stable-in-unstable-std.rs\n+#![crate_type = \"lib\"]\n+\n+extern crate stable_in_unstable_core;\n+extern crate stable_in_unstable_std;\n+\n+mod isolated1 {\n+    use stable_in_unstable_core::new_unstable_module; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+}\n+\n+mod isolated2 {\n+    use stable_in_unstable_std::old_stable_module::OldTrait;\n+\n+    struct LocalType;\n+\n+    impl OldTrait for LocalType {}\n+}\n+\n+mod isolated3 {\n+    use stable_in_unstable_core::new_unstable_module::OldTrait; //~ ERROR use of unstable library feature 'unstable_test_feature'\n+\n+    struct LocalType;\n+\n+    impl OldTrait for LocalType {}\n+}\n+\n+mod isolated4 {\n+    struct LocalType;\n+\n+    impl stable_in_unstable_core::new_unstable_module::OldTrait for LocalType {} //~ ERROR use of unstable library feature 'unstable_test_feature'\n+}\n+\n+mod isolated5 {\n+    struct LocalType;\n+\n+    impl stable_in_unstable_std::old_stable_module::OldTrait for LocalType {}\n+}"}, {"sha": "e123d83584c81a36baf39dcc71e326ecc9604521", "filename": "src/test/ui/stability-attribute/stable-in-unstable.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstable-in-unstable.stderr?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:16:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:17:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module::OldTrait;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:29:9\n+   |\n+LL |     use stable_in_unstable_core::new_unstable_module::OldTrait;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_test_feature'\n+  --> $DIR/stable-in-unstable.rs:39:10\n+   |\n+LL |     impl stable_in_unstable_core::new_unstable_module::OldTrait for LocalType {}\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3bf75bcbee83e85d779b96ba2478d91b76d96450", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -354,7 +354,7 @@ fn check_terminator<'a, 'tcx>(\n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n-            if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n+            if let rustc_attr::StabilityLevel::Stable { since, .. } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262."}, {"sha": "4ffa1fa8b28d3077bac6eba4ed052adc4ba7c442", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24699bcbadff59693a89a5184afed87f6416cdea/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=24699bcbadff59693a89a5184afed87f6416cdea", "patch": "@@ -11,7 +11,7 @@ use regex::Regex;\n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n     \"E0279\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\",\n-    \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}