{"sha": "af8db759be6e92e470a6af810f22b2ebc0cfc87f", "node_id": "C_kwDOAAsO6NoAKGFmOGRiNzU5YmU2ZTkyZTQ3MGE2YWY4MTBmMjJiMmViYzBjZmM4N2Y", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-09T22:04:59Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-09T22:04:59Z"}, "message": "Support libgccjit12", "tree": {"sha": "40afa14187c4bba7d358e01bd89401dd60414a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40afa14187c4bba7d358e01bd89401dd60414a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8db759be6e92e470a6af810f22b2ebc0cfc87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8db759be6e92e470a6af810f22b2ebc0cfc87f", "html_url": "https://github.com/rust-lang/rust/commit/af8db759be6e92e470a6af810f22b2ebc0cfc87f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8db759be6e92e470a6af810f22b2ebc0cfc87f/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70659f7591b9ecc4a92df9d45c1d18e750a5339b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70659f7591b9ecc4a92df9d45c1d18e750a5339b", "html_url": "https://github.com/rust-lang/rust/commit/70659f7591b9ecc4a92df9d45c1d18e750a5339b"}], "stats": {"total": 87, "additions": 58, "deletions": 29}, "files": [{"sha": "1c99e5e2bc282bed5c20b7835f136309c5ea5e0c", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af8db759be6e92e470a6af810f22b2ebc0cfc87f/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/af8db759be6e92e470a6af810f22b2ebc0cfc87f/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=af8db759be6e92e470a6af810f22b2ebc0cfc87f", "patch": "@@ -19,9 +19,9 @@ jobs:\n       fail-fast: false\n       matrix:\n         libgccjit_version:\n-          - { gcc: \"libgccjit.so\", extra: \"\", artifacts_branch: \"master\" }\n-          - { gcc: \"libgccjit_without_int128.so\", extra: \"\", artifacts_branch: \"master-without-128bit-integers\" }\n-          - { gcc: \"libgccjit12.so\", extra: \"--no-default-features\", artifacts_branch: \"gcc12\" }\n+          - { gcc: \"libgccjit.so\", extra: \"\", env_extra: \"\", artifacts_branch: \"master\" }\n+          - { gcc: \"libgccjit_without_int128.so\", extra: \"\", env_extra: \"\", artifacts_branch: \"master-without-128bit-integers\" }\n+          - { gcc: \"libgccjit12.so\", extra: \"--no-default-features\", env_extra: \"TEST_FLAGS='-Cpanic=abort -Zpanic-abort-tests'\", artifacts_branch: \"gcc12\" }\n         commands: [\n           \"--mini-tests\",\n           \"--std-tests\",\n@@ -120,7 +120,7 @@ jobs:\n     - name: Build\n       run: |\n         ./prepare_build.sh\n-        ./build.sh ${{ matrix.libgccjit_version.extra }}\n+        ${{ matrix.libgccjit_version.env_extra }} ./build.sh ${{ matrix.libgccjit_version.extra }}\n         cargo test ${{ matrix.libgccjit_version.extra }}\n         ./clean_all.sh\n \n@@ -143,7 +143,7 @@ jobs:\n \n     - name: Run tests\n       run: |\n-        ./test.sh --release --clean --build-sysroot ${{ matrix.commands }} ${{ matrix.libgccjit_version.extra }}\n+        ${{ matrix.libgccjit_version.env_extra }} ./test.sh --release --clean --build-sysroot ${{ matrix.commands }} ${{ matrix.libgccjit_version.extra }}\n \n   duplicates:\n     runs-on: ubuntu-latest"}, {"sha": "166e83901c4f956b1d89762126eaa3291a8a936b", "filename": "config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af8db759be6e92e470a6af810f22b2ebc0cfc87f/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af8db759be6e92e470a6af810f22b2ebc0cfc87f/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=af8db759be6e92e470a6af810f22b2ebc0cfc87f", "patch": "@@ -38,7 +38,7 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=\"$CG_RUSTFLAGS $linker -Csymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n+export RUSTFLAGS=\"$CG_RUSTFLAGS $linker -Csymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot $TEST_FLAGS\"\n \n # FIXME(antoyo): remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then"}, {"sha": "0150f5ba8c1462ab7f4b397111deb48191b30c8f", "filename": "src/builder.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/af8db759be6e92e470a6af810f22b2ebc0cfc87f/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8db759be6e92e470a6af810f22b2ebc0cfc87f/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=af8db759be6e92e470a6af810f22b2ebc0cfc87f", "patch": "@@ -13,7 +13,7 @@ use gccjit::{\n     RValue,\n     ToRValue,\n     Type,\n-    UnaryOp, FunctionType,\n+    UnaryOp,\n };\n use rustc_codegen_ssa::MemFlags;\n use rustc_codegen_ssa::common::{AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope};\n@@ -476,11 +476,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n         self.block.end_with_jump(None, then);\n \n-        // NOTE: since jumps were added in a place rustc does not expect, the current blocks in the\n-        // state need to be updated.\n-        // FIXME: not sure it's actually needed.\n-        self.switch_to_block(then);\n-\n         return_value.to_rvalue()\n     }\n \n@@ -1194,12 +1189,15 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         aggregate_value\n     }\n \n-    fn set_personality_fn(&mut self, personality: RValue<'gcc>) {\n-        let personality = self.rvalue_as_function(personality);\n+    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n         #[cfg(feature=\"master\")]\n-        self.current_func().set_personality_function(personality);\n+        {\n+            let personality = self.rvalue_as_function(_personality);\n+            self.current_func().set_personality_function(personality);\n+        }\n     }\n \n+    #[cfg(feature=\"master\")]\n     fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         self.set_personality_fn(pers_fn);\n \n@@ -1223,16 +1221,33 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         value.to_rvalue()\n     }\n \n+    #[cfg(not(feature=\"master\"))]\n+    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n+        let field1 = self.context.new_field(None, self.u8_type.make_pointer(), \"landing_pad_field_1\");\n+        let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n+        let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n+        self.current_func().new_local(None, struct_type.as_type(), \"landing_pad\")\n+            .to_rvalue()\n+    }\n+\n+    #[cfg(feature=\"master\")]\n     fn resume(&mut self, exn: RValue<'gcc>) {\n         // TODO: check if this is normal that we need to dereference the value.\n+        // NOTE: the type is wrong, so in order to get a pointer for parameter, cast it to a\n+        // pointer of pointer that is later dereferenced.\n+        let exn_type = exn.get_type().make_pointer();\n+        let exn = self.context.new_cast(None, exn, exn_type);\n         let exn = exn.dereference(None).to_rvalue();\n-        let param = self.context.new_parameter(None, exn.get_type(), \"exn\");\n-        // TODO(antoyo): should we call __builtin_unwind_resume instead? This might actually be the same.\n-        let unwind_resume = self.context.new_function(None, FunctionType::Extern, self.type_void(), &[param], \"_Unwind_Resume\", false);\n+        let unwind_resume = self.context.get_target_builtin_function(\"__builtin_unwind_resume\");\n         self.llbb().add_eval(None, self.context.new_call(None, unwind_resume, &[exn]));\n         self.unreachable();\n     }\n \n+    #[cfg(not(feature=\"master\"))]\n+    fn resume(&mut self, _exn: RValue<'gcc>) {\n+        self.unreachable();\n+    }\n+\n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }"}, {"sha": "46471096e9105bbbb47aec468aeb087beca94fff", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af8db759be6e92e470a6af810f22b2ebc0cfc87f/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8db759be6e92e470a6af810f22b2ebc0cfc87f/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=af8db759be6e92e470a6af810f22b2ebc0cfc87f", "patch": "@@ -1,6 +1,7 @@\n pub mod llvm;\n mod simd;\n \n+#[cfg(feature=\"master\")]\n use std::iter;\n \n use gccjit::{ComparisonOp, Function, RValue, ToRValue, Type, UnaryOp, FunctionType};\n@@ -9,16 +10,24 @@ use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::common::{IntPredicate, span_invalid_monomorphization_error};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n-use rustc_codegen_ssa::traits::{ArgAbiMethods, BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods, IntrinsicCallMethods, MiscMethods};\n+use rustc_codegen_ssa::traits::{ArgAbiMethods, BaseTypeMethods, BuilderMethods, ConstMethods, IntrinsicCallMethods};\n+#[cfg(feature=\"master\")]\n+use rustc_codegen_ssa::traits::{DerivedTypeMethods, MiscMethods};\n use rustc_middle::bug;\n use rustc_middle::ty::{self, Instance, Ty};\n-use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::LayoutOf;\n+#[cfg(feature=\"master\")]\n+use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n use rustc_span::{Span, Symbol, symbol::kw, sym};\n use rustc_target::abi::HasDataLayout;\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n-use rustc_target::spec::{abi::Abi, PanicStrategy};\n+use rustc_target::spec::PanicStrategy;\n+#[cfg(feature=\"master\")]\n+use rustc_target::spec::abi::Abi;\n \n-use crate::abi::{FnAbiGccExt, GccType};\n+use crate::abi::GccType;\n+#[cfg(feature=\"master\")]\n+use crate::abi::FnAbiGccExt;\n use crate::builder::Builder;\n use crate::common::{SignType, TypeReflection};\n use crate::context::CodegenCx;\n@@ -1117,7 +1126,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n     }\n }\n \n-fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n+fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, _catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n         bx.call(bx.type_void(), try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n@@ -1129,7 +1138,10 @@ fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_fu\n         unimplemented!();\n     }\n     else {\n-        codegen_gnu_try(bx, try_func, data, catch_func, dest);\n+        #[cfg(feature=\"master\")]\n+        codegen_gnu_try(bx, try_func, data, _catch_func, dest);\n+        #[cfg(not(feature=\"master\"))]\n+        unimplemented!();\n     }\n }\n \n@@ -1144,6 +1156,7 @@ fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_fu\n // function calling it, and that function may already have other personality\n // functions in play. By calling a shim we're guaranteed that our shim will have\n // the right personality function.\n+#[cfg(feature=\"master\")]\n fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>, data: RValue<'gcc>, catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n     //use std::ops::Deref;\n     //let cx: &CodegenCx<'gcc, '_> = bx.deref();\n@@ -1210,6 +1223,7 @@ fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>,\n // catch exceptions.\n //\n // This function is only generated once and is then cached.\n+#[cfg(feature=\"master\")]\n fn get_rust_try_fn<'a, 'gcc, 'tcx>(cx: &'a CodegenCx<'gcc, 'tcx>, codegen: &mut dyn FnMut(Builder<'a, 'gcc, 'tcx>)) -> (Type<'gcc>, Function<'gcc>) {\n     if let Some(llfn) = cx.rust_try_fn.get() {\n         return llfn;\n@@ -1249,6 +1263,7 @@ fn get_rust_try_fn<'a, 'gcc, 'tcx>(cx: &'a CodegenCx<'gcc, 'tcx>, codegen: &mut\n \n // Helper function to give a Block to a closure to codegen a shim function.\n // This is currently primarily used for the `try` intrinsic functions above.\n+#[cfg(feature=\"master\")]\n fn gen_fn<'a, 'gcc, 'tcx>(cx: &'a CodegenCx<'gcc, 'tcx>, name: &str, rust_fn_sig: ty::PolyFnSig<'tcx>, codegen: &mut dyn FnMut(Builder<'a, 'gcc, 'tcx>)) -> (Type<'gcc>, Function<'gcc>) {\n     let fn_abi = cx.fn_abi_of_fn_ptr(rust_fn_sig, ty::List::empty());\n     let (typ, _, _, _) = fn_abi.gcc_type(cx);"}, {"sha": "25f5a3a419ef245613ddd5568975e555ced933e1", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af8db759be6e92e470a6af810f22b2ebc0cfc87f/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/af8db759be6e92e470a6af810f22b2ebc0cfc87f/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=af8db759be6e92e470a6af810f22b2ebc0cfc87f", "patch": "@@ -191,11 +191,11 @@ function std_tests() {\n     $RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n-    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin $TEST_FLAGS --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n     echo \"[AOT] track-caller-attribute\"\n-    $RUSTC example/track-caller-attribute.rs --crate-type bin --target $TARGET_TRIPLE\n+    $RUSTC example/track-caller-attribute.rs --crate-type bin $TEST_FLAGS --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n     echo \"[BUILD] mod_bench\"\n@@ -338,10 +338,9 @@ function test_rustc() {\n \n     git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n \n-    rm -r src/test/ui/{abi*,extern/,panic-runtime/,panics/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,borrowck/,chalkify/bugs/,test*,*lto*.rs,consts/const-float-bits-reject-conv.rs,consts/issue-miri-1910.rs} || true\n+    rm -r src/test/ui/{abi*,extern/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,borrowck/,chalkify/bugs/,test*,*lto*.rs,consts/const-float-bits-reject-conv.rs,consts/issue-miri-1910.rs} || true\n     rm src/test/ui/mir/mir_heavy_promoted.rs # this tests is oom-killed in the CI.\n-    # TODO: re-enable panics tests.\n-    for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n+    for test in $(rg --files-with-matches \"thread|lto\" src/test/ui); do\n       rm $test\n     done\n     git checkout src/test/ui/lto/auxiliary/dylib.rs"}]}