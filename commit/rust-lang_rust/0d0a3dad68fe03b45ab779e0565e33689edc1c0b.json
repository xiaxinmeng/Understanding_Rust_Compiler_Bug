{"sha": "0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMGEzZGFkNjhmZTAzYjQ1YWI3NzllMDU2NWUzMzY4OWVkYzFjMGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T23:30:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "libsyntax: Remove uses of `token::ident_to_str()`", "tree": {"sha": "d830e39f86c07b301915a4fd748d56c80b253254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d830e39f86c07b301915a4fd748d56c80b253254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "html_url": "https://github.com/rust-lang/rust/commit/0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a3dad68fe03b45ab779e0565e33689edc1c0b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875c9ce30b13de02e447ee95cb50b0111894b14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/875c9ce30b13de02e447ee95cb50b0111894b14a", "html_url": "https://github.com/rust-lang/rust/commit/875c9ce30b13de02e447ee95cb50b0111894b14a"}], "stats": {"total": 48, "additions": 16, "deletions": 32}, "files": [{"sha": "53bae09f58c94e4d893394c552b11788c49c3d10", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a3dad68fe03b45ab779e0565e33689edc1c0b/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a3dad68fe03b45ab779e0565e33689edc1c0b/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "patch": "@@ -11,8 +11,6 @@\n //! This module contains the \"cleaned\" pieces of the AST, and the functions\n //! that clean them.\n \n-use its = syntax::parse::token::ident_to_str;\n-\n use syntax;\n use syntax::ast;\n use syntax::ast_map;\n@@ -893,7 +891,8 @@ fn path_to_str(p: &ast::Path) -> ~str {\n \n impl Clean<~str> for ast::Ident {\n     fn clean(&self) -> ~str {\n-        its(self).to_owned()\n+        let string = token::get_ident(self.name);\n+        string.get().to_owned()\n     }\n }\n "}, {"sha": "2c57a4effd51ee16594e9b460016860f8040cdfd", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0d0a3dad68fe03b45ab779e0565e33689edc1c0b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0a3dad68fe03b45ab779e0565e33689edc1c0b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0d0a3dad68fe03b45ab779e0565e33689edc1c0b", "patch": "@@ -188,23 +188,29 @@ pub fn to_str(input: @IdentInterner, t: &Token) -> ~str {\n       }\n       LIT_INT_UNSUFFIXED(i) => { i.to_str() }\n       LIT_FLOAT(ref s, t) => {\n-        let mut body = ident_to_str(s).to_owned();\n+        let body_string = get_ident(s.name);\n+        let mut body = body_string.get().to_str();\n         if body.ends_with(\".\") {\n             body.push_char('0');  // `10.f` is not a float literal\n         }\n         body + ast_util::float_ty_to_str(t)\n       }\n       LIT_FLOAT_UNSUFFIXED(ref s) => {\n-        let mut body = ident_to_str(s).to_owned();\n+        let body_string = get_ident(s.name);\n+        let mut body = body_string.get().to_owned();\n         if body.ends_with(\".\") {\n             body.push_char('0');  // `10.f` is not a float literal\n         }\n         body\n       }\n-      LIT_STR(ref s) => { format!(\"\\\"{}\\\"\", ident_to_str(s).escape_default()) }\n+      LIT_STR(ref s) => {\n+          let literal_string = get_ident(s.name);\n+          format!(\"\\\"{}\\\"\", literal_string.get().escape_default())\n+      }\n       LIT_STR_RAW(ref s, n) => {\n+          let literal_string = get_ident(s.name);\n           format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                  delim=\"#\".repeat(n), string=ident_to_str(s))\n+                  delim=\"#\".repeat(n), string=literal_string.get())\n       }\n \n       /* Name components */\n@@ -213,7 +219,10 @@ pub fn to_str(input: @IdentInterner, t: &Token) -> ~str {\n       UNDERSCORE => ~\"_\",\n \n       /* Other */\n-      DOC_COMMENT(ref s) => ident_to_str(s).to_owned(),\n+      DOC_COMMENT(ref s) => {\n+          let comment_string = get_ident(s.name);\n+          comment_string.get().to_str()\n+      }\n       EOF => ~\"<eof>\",\n       INTERPOLATED(ref nt) => {\n         match nt {\n@@ -647,11 +656,6 @@ pub fn interner_get(name : Name) -> @str {\n     get_ident_interner().get(name)\n }\n \n-// maps an identifier to the string that it corresponds to\n-pub fn ident_to_str(id : &ast::Ident) -> @str {\n-    interner_get(id.name)\n-}\n-\n // maps a string to an identifier with an empty syntax context\n pub fn str_to_ident(str : &str) -> ast::Ident {\n     ast::Ident::new(intern(str))\n@@ -768,23 +772,4 @@ mod test {\n         let a1 = mark_ident(a,92);\n         assert!(mtwt_token_eq(&IDENT(a,true),&IDENT(a1,false)));\n     }\n-\n-\n-    #[test] fn str_ptr_eq_tests(){\n-        let a = @\"abc\";\n-        let b = @\"abc\";\n-        let c = a;\n-        assert!(str_ptr_eq(a,c));\n-        assert!(!str_ptr_eq(a,b));\n-    }\n-\n-    #[test] fn fresh_name_pointer_sharing() {\n-        let ghi = str_to_ident(\"ghi\");\n-        assert_eq!(ident_to_str(&ghi),@\"ghi\");\n-        assert!(str_ptr_eq(ident_to_str(&ghi),ident_to_str(&ghi)))\n-        let fresh = ast::Ident::new(fresh_name(&ghi));\n-        assert_eq!(ident_to_str(&fresh),@\"ghi\");\n-        assert!(str_ptr_eq(ident_to_str(&ghi),ident_to_str(&fresh)));\n-    }\n-\n }"}]}