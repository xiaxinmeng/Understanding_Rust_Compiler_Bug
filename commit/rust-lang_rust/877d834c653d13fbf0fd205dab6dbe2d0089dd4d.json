{"sha": "877d834c653d13fbf0fd205dab6dbe2d0089dd4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2Q4MzRjNjUzZDEzZmJmMGZkMjA1ZGFiNmRiZTJkMDA4OWRkNGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:31:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T00:31:20Z"}, "message": "typeck/expr.rs: extract out check_expr_array.", "tree": {"sha": "a113254da2aa24c99b59fc07ca9bfe8ca0d5cb27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a113254da2aa24c99b59fc07ca9bfe8ca0d5cb27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877d834c653d13fbf0fd205dab6dbe2d0089dd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877d834c653d13fbf0fd205dab6dbe2d0089dd4d", "html_url": "https://github.com/rust-lang/rust/commit/877d834c653d13fbf0fd205dab6dbe2d0089dd4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877d834c653d13fbf0fd205dab6dbe2d0089dd4d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe004da37aabccc596b818a79beaee3e08508ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe004da37aabccc596b818a79beaee3e08508ccc", "html_url": "https://github.com/rust-lang/rust/commit/fe004da37aabccc596b818a79beaee3e08508ccc"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "58ae8aa561fa3023e90bcdc7c60f7550c469f4c0", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/877d834c653d13fbf0fd205dab6dbe2d0089dd4d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877d834c653d13fbf0fd205dab6dbe2d0089dd4d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=877d834c653d13fbf0fd205dab6dbe2d0089dd4d", "patch": "@@ -125,35 +125,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_with_expectation(e, expected)\n             }\n             ExprKind::Array(ref args) => {\n-                let uty = expected.to_option(self).and_then(|uty| {\n-                    match uty.sty {\n-                        ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n-                        _ => None\n-                    }\n-                });\n-\n-                let element_ty = if !args.is_empty() {\n-                    let coerce_to = uty.unwrap_or_else(|| {\n-                        self.next_ty_var(TypeVariableOrigin {\n-                            kind: TypeVariableOriginKind::TypeInference,\n-                            span: expr.span,\n-                        })\n-                    });\n-                    let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n-                    assert_eq!(self.diverges.get(), Diverges::Maybe);\n-                    for e in args {\n-                        let e_ty = self.check_expr_with_hint(e, coerce_to);\n-                        let cause = self.misc(e.span);\n-                        coerce.coerce(self, &cause, e, e_ty);\n-                    }\n-                    coerce.complete(self)\n-                } else {\n-                    self.next_ty_var(TypeVariableOrigin {\n-                        kind: TypeVariableOriginKind::TypeInference,\n-                        span: expr.span,\n-                    })\n-                };\n-                tcx.mk_array(element_ty, args.len() as u64)\n+                self.check_expr_array(args, expected, expr)\n             }\n             ExprKind::Repeat(ref element, ref count) => {\n                 let count_def_id = tcx.hir().local_def_id_from_hir_id(count.hir_id);\n@@ -815,4 +787,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn check_expr_array(\n+        &self,\n+        args: &'tcx [hir::Expr],\n+        expected: Expectation<'tcx>,\n+        expr: &'tcx hir::Expr\n+    ) -> Ty<'tcx> {\n+        let uty = expected.to_option(self).and_then(|uty| {\n+            match uty.sty {\n+                ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n+                _ => None\n+            }\n+        });\n+\n+        let element_ty = if !args.is_empty() {\n+            let coerce_to = uty.unwrap_or_else(|| {\n+                self.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::TypeInference,\n+                    span: expr.span,\n+                })\n+            });\n+            let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n+            assert_eq!(self.diverges.get(), Diverges::Maybe);\n+            for e in args {\n+                let e_ty = self.check_expr_with_hint(e, coerce_to);\n+                let cause = self.misc(e.span);\n+                coerce.coerce(self, &cause, e, e_ty);\n+            }\n+            coerce.complete(self)\n+        } else {\n+            self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::TypeInference,\n+                span: expr.span,\n+            })\n+        };\n+        self.tcx.mk_array(element_ty, args.len() as u64)\n+    }\n }"}]}