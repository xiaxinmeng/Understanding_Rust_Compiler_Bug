{"sha": "2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "node_id": "C_kwDOAAsO6NoAKDJmM2RkZDlmNTk0YWRmOTc3MzU0N2FhN2NlZGI0M2M0YWM4ZmZkMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T19:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T19:42:09Z"}, "message": "Auto merge of #97307 - SparrowLii:parallel, r=cjgillot\n\ncatch unwind in parallel mode during wfcheck\n\nUpdate #75760\nWhen performing wfcheck, from the test results, the parallel mode will stop all checks when an `item`'s check failed, (e.g. the first ui test failure raised from [here](https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L249))while the serial mode will output each `item`'s check result via `catch_unwind`. This leads to inconsistencies in the final output of the two mode.\nIn my local environment, this modification prevents the following ui tests from failing when set `parallel-compiler = true` in `config.toml`:\n\n```\n    [ui] src/test\\ui\\associated-types\\defaults-cyclic-fail-1.rs\n    [ui] src/test\\ui\\associated-types\\defaults-cyclic-fail-2.rs\n    [ui] src/test\\ui\\associated-types\\hr-associated-type-bound-2.rs\n    [ui] src/test\\ui\\associated-types\\impl-wf-cycle-1.rs\n    [ui] src/test\\ui\\associated-types\\impl-wf-cycle-2.rs\n    [ui] src/test\\ui\\issues\\issue-20413.rs\n    [ui] src/test\\ui\\parallel_test\\defaults-cyclic-fail-para.rs\n```", "tree": {"sha": "0fe28cfb2f74835b9359f71b3d85420dcb2d09e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe28cfb2f74835b9359f71b3d85420dcb2d09e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "html_url": "https://github.com/rust-lang/rust/commit/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "html_url": "https://github.com/rust-lang/rust/commit/8e52fa87ebbe3ea2ad38b429292e4a22300188d7"}, {"sha": "ec137f29c5812df6461095dbc5c62ce3fe4ebc01", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec137f29c5812df6461095dbc5c62ce3fe4ebc01", "html_url": "https://github.com/rust-lang/rust/commit/ec137f29c5812df6461095dbc5c62ce3fe4ebc01"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "4437c0b1b6964b38c2cd885ac31d428dad9bf486", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "patch": "@@ -21,6 +21,7 @@ use crate::owning_ref::{Erased, OwningRef};\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n+use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n \n pub use std::sync::atomic::Ordering;\n pub use std::sync::atomic::Ordering::SeqCst;\n@@ -41,7 +42,6 @@ cfg_if! {\n         }\n \n         use std::ops::Add;\n-        use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n         /// This is a single threaded variant of `AtomicU64`, `AtomicUsize`, etc.\n         /// It has explicit ordering arguments and is only intended for use with\n@@ -339,7 +339,10 @@ cfg_if! {\n             t: T,\n             for_each: impl Fn(T::Item) + Sync + Send,\n         ) {\n-            t.into_par_iter().for_each(for_each)\n+            let ps: Vec<_> = t.into_par_iter().map(|i| catch_unwind(AssertUnwindSafe(|| for_each(i)))).collect();\n+            ps.into_iter().for_each(|p| if let Err(panic) = p {\n+                resume_unwind(panic)\n+            });\n         }\n \n         pub type MetadataRef = OwningRef<Box<dyn Erased + Send + Sync>, [u8]>;"}]}