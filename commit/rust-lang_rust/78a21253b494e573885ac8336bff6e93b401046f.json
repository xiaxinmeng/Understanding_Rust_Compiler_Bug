{"sha": "78a21253b494e573885ac8336bff6e93b401046f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTIxMjUzYjQ5NGU1NzM4ODVhYzgzMzZiZmY2ZTkzYjQwMTA0NmY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-11T22:40:36Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-15T18:17:17Z"}, "message": "Apply the api design suggestions", "tree": {"sha": "3ec31f8481f9a930b0b3afb6cc0ce4c97cf648f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec31f8481f9a930b0b3afb6cc0ce4c97cf648f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a21253b494e573885ac8336bff6e93b401046f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a21253b494e573885ac8336bff6e93b401046f", "html_url": "https://github.com/rust-lang/rust/commit/78a21253b494e573885ac8336bff6e93b401046f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a21253b494e573885ac8336bff6e93b401046f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dc8b6f06b49f4728a50e83781c361e9a8b3100", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dc8b6f06b49f4728a50e83781c361e9a8b3100", "html_url": "https://github.com/rust-lang/rust/commit/73dc8b6f06b49f4728a50e83781c361e9a8b3100"}], "stats": {"total": 156, "additions": 97, "deletions": 59}, "files": [{"sha": "2e7698b59ca3c8bb1207b3de3a771d259a94ba7a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -1067,6 +1067,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-server 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "e13f969c787b07e60d45190dfd85a07e8d5937e3", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -1,5 +1,6 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use hir::{db::HirDatabase, InFile, SourceAnalyzer};\n+use itertools::Either;\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n@@ -9,12 +10,12 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistAction, AssistId, AssistLabel};\n+use crate::{AssistAction, AssistId, AssistLabel, ResolvedAssist};\n \n #[derive(Clone, Debug)]\n pub(crate) enum Assist {\n     Unresolved { label: AssistLabel },\n-    Resolved { label: AssistLabel, action: AssistAction, alternative_actions: Vec<AssistAction> },\n+    Resolved { assist: ResolvedAssist },\n }\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n@@ -92,7 +93,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n                 f(&mut edit);\n                 edit.build()\n             };\n-            Assist::Resolved { label, action, alternative_actions: Vec::default() }\n+            Assist::Resolved { assist: ResolvedAssist { label, action_data: Either::Left(action) } }\n         } else {\n             Assist::Unresolved { label }\n         };\n@@ -105,18 +106,20 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         self,\n         id: AssistId,\n         label: impl Into<String>,\n-        f: impl FnOnce() -> (ActionBuilder, Vec<ActionBuilder>),\n+        f: impl FnOnce() -> Vec<ActionBuilder>,\n     ) -> Option<Assist> {\n         let label = AssistLabel { label: label.into(), id };\n         let assist = if self.should_compute_edit {\n-            let (action, alternative_actions) = f();\n+            let actions = f();\n+            assert!(!actions.is_empty(), \"Assist cannot have no\");\n+\n             Assist::Resolved {\n-                label,\n-                action: action.build(),\n-                alternative_actions: alternative_actions\n-                    .into_iter()\n-                    .map(ActionBuilder::build)\n-                    .collect(),\n+                assist: ResolvedAssist {\n+                    label,\n+                    action_data: Either::Right(\n+                        actions.into_iter().map(ActionBuilder::build).collect(),\n+                    ),\n+                },\n             }\n         } else {\n             Assist::Unresolved { label }"}, {"sha": "5dc1ee23374fd06ee32d5dc27ad4bfde676a8468", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -15,21 +15,21 @@ fn check(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = TestDB::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let (_assist_id, action, _) = crate::assists(&db, frange)\n+    let assist = crate::assists(&db, frange)\n         .into_iter()\n-        .find(|(id, _, _)| id.id.0 == assist_id)\n+        .find(|assist| assist.label.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n                 crate::assists(&db, frange)\n                     .into_iter()\n-                    .map(|(id, _, _)| id.id.0)\n+                    .map(|assist| assist.label.id.0)\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )\n         });\n \n-    let actual = action.edit.apply(&before);\n+    let actual = assist.get_first_action().edit.apply(&before);\n     assert_eq_text!(after, &actual);\n }"}, {"sha": "a2983ae87c7ad35a171df94c42df1517561f56d9", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -14,6 +14,7 @@ mod test_db;\n pub mod ast_transform;\n \n use hir::db::HirDatabase;\n+use itertools::Either;\n use ra_db::FileRange;\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n@@ -41,6 +42,21 @@ pub struct AssistAction {\n     pub target: Option<TextRange>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct ResolvedAssist {\n+    pub label: AssistLabel,\n+    pub action_data: Either<AssistAction, Vec<AssistAction>>,\n+}\n+\n+impl ResolvedAssist {\n+    pub fn get_first_action(&self) -> AssistAction {\n+        match &self.action_data {\n+            Either::Left(action) => action.clone(),\n+            Either::Right(actions) => actions[0].clone(),\n+        }\n+    }\n+}\n+\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n@@ -65,7 +81,7 @@ where\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists<H>(db: &H, range: FileRange) -> Vec<(AssistLabel, AssistAction, Vec<AssistAction>)>\n+pub fn assists<H>(db: &H, range: FileRange) -> Vec<ResolvedAssist>\n where\n     H: HirDatabase + 'static,\n {\n@@ -76,13 +92,11 @@ where\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n-                Assist::Resolved { label, action, alternative_actions } => {\n-                    (label, action, alternative_actions)\n-                }\n+                Assist::Resolved { assist } => assist,\n                 Assist::Unresolved { .. } => unreachable!(),\n             })\n             .collect::<Vec<_>>();\n-        a.sort_by(|a, b| match (a.1.target, b.1.target) {\n+        a.sort_by(|a, b| match (a.get_first_action().target, b.get_first_action().target) {\n             (Some(a), Some(b)) => a.len().cmp(&b.len()),\n             (Some(_), None) => Ordering::Less,\n             (None, Some(_)) => Ordering::Greater,\n@@ -177,7 +191,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let actual = action.edit.apply(&before);\n@@ -204,7 +218,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let mut actual = action.edit.apply(&before);\n@@ -227,7 +241,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let range = action.target.expect(\"expected target on action\");\n@@ -246,7 +260,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let range = action.target.expect(\"expected target on action\");\n@@ -296,10 +310,10 @@ mod tests {\n         let mut assists = assists.iter();\n \n         assert_eq!(\n-            assists.next().expect(\"expected assist\").0.label,\n+            assists.next().expect(\"expected assist\").label.label,\n             \"Change visibility to pub(crate)\"\n         );\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Add `#[derive]`\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n     }\n \n     #[test]\n@@ -318,7 +332,7 @@ mod tests {\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n \n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Extract into variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Replace with match\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n     }\n }"}, {"sha": "e30eee5f49ff108893f3ebc0903fdc031afd0d71", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -4,30 +4,37 @@ use ra_db::{FilePosition, FileRange};\n \n use crate::{db::RootDatabase, FileId, SourceChange, SourceFileEdit};\n \n+use itertools::Either;\n pub use ra_assists::AssistId;\n use ra_assists::{AssistAction, AssistLabel};\n \n #[derive(Debug)]\n pub struct Assist {\n     pub id: AssistId,\n-    pub change: SourceChange,\n     pub label: String,\n-    pub alternative_changes: Vec<SourceChange>,\n+    pub change_data: Either<SourceChange, Vec<SourceChange>>,\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n     ra_assists::assists(db, frange)\n         .into_iter()\n-        .map(|(assist_label, action, alternative_actions)| {\n+        .map(|assist| {\n             let file_id = frange.file_id;\n+            let assist_label = &assist.label;\n             Assist {\n                 id: assist_label.id,\n                 label: assist_label.label.clone(),\n-                change: action_to_edit(action, file_id, &assist_label),\n-                alternative_changes: alternative_actions\n-                    .into_iter()\n-                    .map(|action| action_to_edit(action, file_id, &assist_label))\n-                    .collect(),\n+                change_data: match assist.action_data {\n+                    Either::Left(action) => {\n+                        Either::Left(action_to_edit(action, file_id, assist_label))\n+                    }\n+                    Either::Right(actions) => Either::Right(\n+                        actions\n+                            .into_iter()\n+                            .map(|action| action_to_edit(action, file_id, assist_label))\n+                            .collect(),\n+                    ),\n+                },\n             }\n         })\n         .collect()"}, {"sha": "73bce8b086834ec7ee30ed4e2611b268cbea64dd", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -28,6 +28,7 @@ ra_prof = { path = \"../ra_prof\" }\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n env_logger = { version = \"0.7.1\", default-features = false, features = [\"humantime\"] }\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n+itertools = \"0.8\"\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "d76639474276146f2370d9cbb64b504f5678404d", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -3,6 +3,7 @@\n \n use std::{fmt::Write as _, io::Write as _};\n \n+use itertools::Either;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n@@ -698,18 +699,25 @@ pub fn handle_code_action(\n \n     for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n         let title = assist.label.clone();\n-        let edit = assist.change.try_conv_with(&world)?;\n-        let alternative_edits = assist\n-            .alternative_changes\n-            .into_iter()\n-            .map(|change| change.try_conv_with(&world))\n-            .collect::<Result<Vec<_>>>()?;\n \n-        let command = Command {\n-            title,\n-            command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![to_value(edit).unwrap(), to_value(alternative_edits).unwrap()]),\n+        let command = match assist.change_data {\n+            Either::Left(change) => Command {\n+                title,\n+                command: \"rust-analyzer.applySourceChange\".to_string(),\n+                arguments: Some(vec![to_value(change.try_conv_with(&world)?)?]),\n+            },\n+            Either::Right(changes) => Command {\n+                title,\n+                command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n+                arguments: Some(vec![to_value(\n+                    changes\n+                        .into_iter()\n+                        .map(|change| change.try_conv_with(&world))\n+                        .collect::<Result<Vec<_>>>()?,\n+                )?]),\n+            },\n         };\n+\n         let action = CodeAction {\n             title: command.title.clone(),\n             kind: match assist.id {"}, {"sha": "dc075aa8289c61890f5db1fcbed95120e678b191", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -34,8 +34,20 @@ function showReferences(ctx: Ctx): Cmd {\n }\n \n function applySourceChange(ctx: Ctx): Cmd {\n-    return async (change: sourceChange.SourceChange, alternativeChanges: sourceChange.SourceChange[] | undefined) => {\n-        sourceChange.applySourceChange(ctx, change, alternativeChanges);\n+    return async (change: sourceChange.SourceChange) => {\n+        sourceChange.applySourceChange(ctx, change);\n+    };\n+}\n+\n+function selectAndApplySourceChange(ctx: Ctx): Cmd {\n+    return async (changes: sourceChange.SourceChange[]) => {\n+        if (changes.length === 1) {\n+            await sourceChange.applySourceChange(ctx, changes[0]);\n+        } else if (changes.length > 0) {\n+            const selectedChange = await vscode.window.showQuickPick(changes);\n+            if (!selectedChange) return;\n+            await sourceChange.applySourceChange(ctx, selectedChange);\n+        }\n     };\n }\n \n@@ -59,5 +71,6 @@ export {\n     runSingle,\n     showReferences,\n     applySourceChange,\n+    selectAndApplySourceChange,\n     reload\n };"}, {"sha": "0494ccf63f2140508335cd161496c4aac5dfe338", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -26,6 +26,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n+    ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     if (ctx.config.enableEnhancedTyping) {\n         ctx.overrideCommand('type', commands.onEnter);"}, {"sha": "a336269baa8bdec26658993a97eb709bb145b090", "filename": "editors/code/src/source_change.ts", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/78a21253b494e573885ac8336bff6e93b401046f/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=78a21253b494e573885ac8336bff6e93b401046f", "patch": "@@ -9,7 +9,7 @@ export interface SourceChange {\n     cursorPosition?: lc.TextDocumentPositionParams;\n }\n \n-async function applySelectedSourceChange(ctx: Ctx, change: SourceChange) {\n+export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n     const client = ctx.client;\n     if (!client) return;\n \n@@ -55,13 +55,3 @@ async function applySelectedSourceChange(ctx: Ctx, change: SourceChange) {\n         );\n     }\n }\n-\n-export async function applySourceChange(ctx: Ctx, change: SourceChange, alternativeChanges: SourceChange[] | undefined) {\n-    if (alternativeChanges !== undefined && alternativeChanges.length > 0) {\n-        const selectedChange = await vscode.window.showQuickPick([change, ...alternativeChanges]);\n-        if (!selectedChange) return;\n-        await applySelectedSourceChange(ctx, selectedChange);\n-    } else {\n-        await applySelectedSourceChange(ctx, change);\n-    }\n-}"}]}