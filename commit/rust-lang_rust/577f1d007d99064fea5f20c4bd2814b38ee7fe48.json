{"sha": "577f1d007d99064fea5f20c4bd2814b38ee7fe48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3N2YxZDAwN2Q5OTA2NGZlYTVmMjBjNGJkMjgxNGIzOGVlN2ZlNDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:37Z"}, "message": "Rollup merge of #84734 - tmandry:compiletest-needs-unwind, r=Mark-Simulacrum\n\nAdd `needs-unwind` and beginning of support for testing `panic=abort` std to compiletest\n\nFor the Fuchsia platform we build libstd with `panic=abort` and would like a way to run tests with that enabled. This adds low-level support for this directly to compiletest.\n\nIn the future I'd like to add high-level support in rustbuild, e.g. having target-specific flags that allow configuring a panic strategy. (Side note: It would be nice if we could also build multiple configurations for the same target, but I'm getting ahead of myself.)\n\nThis plus #84500 have everything that's needed to get ui tests passing on fuchsia targets.\n\nPart of #84766. Note that this change only includes the header on tests which need an unwinder to _build_, not those which need it to _run_.\n\nr? ````@Mark-Simulacrum````", "tree": {"sha": "f8a5bbfbc26dd8aef30a87a50660c0c7f5f47c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a5bbfbc26dd8aef30a87a50660c0c7f5f47c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/577f1d007d99064fea5f20c4bd2814b38ee7fe48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/tCRBK7hj4Ov3rIwAADocIAGfi+UYbRcibpUKe6XLQ7oLg\nYK/qUF+4voeyTal9/d3coEX09xi2Q63aBb0rNM8OssMBY+KyqBzHIdikiJwhmarg\nWCq/f8iPw1Ulm5ywy4YUGAfMDFMt/caQ4Cpw7l/Q8CyP71ZtQ+DvhDSqeAvDYrnT\n6Z+3S/bp/3xQ9En/pB2MkMigSXokZxR5mqh1qC2bt7DjYFJfGvPNjUdiKjd+lDpM\nt81k/ujSBW+OZDBhWk3vkWNqkZQEL5n6+qKSJ4/CdvKqQe7n/QaanUcdaullgd4L\nUvEmGxh5jJDM1ml9aaShkUd1y0bv141J+YcouSOG0kAt+PI4gTeW6R+ATiH0JI4=\n=Sk3R\n-----END PGP SIGNATURE-----\n", "payload": "tree f8a5bbfbc26dd8aef30a87a50660c0c7f5f47c3f\nparent 3a0d6bec56966e8566d0249cd56dd37192a538e4\nparent 947ad5838c08c5609f619b96d0baa197cd20f4b0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340717 +0200\ncommitter GitHub <noreply@github.com> 1620340717 +0200\n\nRollup merge of #84734 - tmandry:compiletest-needs-unwind, r=Mark-Simulacrum\n\nAdd `needs-unwind` and beginning of support for testing `panic=abort` std to compiletest\n\nFor the Fuchsia platform we build libstd with `panic=abort` and would like a way to run tests with that enabled. This adds low-level support for this directly to compiletest.\n\nIn the future I'd like to add high-level support in rustbuild, e.g. having target-specific flags that allow configuring a panic strategy. (Side note: It would be nice if we could also build multiple configurations for the same target, but I'm getting ahead of myself.)\n\nThis plus #84500 have everything that's needed to get ui tests passing on fuchsia targets.\n\nPart of #84766. Note that this change only includes the header on tests which need an unwinder to _build_, not those which need it to _run_.\n\nr? ````@Mark-Simulacrum````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/577f1d007d99064fea5f20c4bd2814b38ee7fe48", "html_url": "https://github.com/rust-lang/rust/commit/577f1d007d99064fea5f20c4bd2814b38ee7fe48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/577f1d007d99064fea5f20c4bd2814b38ee7fe48/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0d6bec56966e8566d0249cd56dd37192a538e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0d6bec56966e8566d0249cd56dd37192a538e4", "html_url": "https://github.com/rust-lang/rust/commit/3a0d6bec56966e8566d0249cd56dd37192a538e4"}, {"sha": "947ad5838c08c5609f619b96d0baa197cd20f4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/947ad5838c08c5609f619b96d0baa197cd20f4b0", "html_url": "https://github.com/rust-lang/rust/commit/947ad5838c08c5609f619b96d0baa197cd20f4b0"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "d2113e4f5ecc60515960ecb0f812c67f5ce8e843", "filename": "src/test/ui/cfg/cfg-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // compile-flags: -C panic=unwind\n+// needs-unwind\n // ignore-emscripten no panic_unwind implementation\n // ignore-wasm32     no panic_unwind implementation\n // ignore-wasm64     no panic_unwind implementation"}, {"sha": "5a27ea8783a2f3b149f23057929ff84c75b8d8cc", "filename": "src/test/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -14,6 +14,7 @@ mod rusti {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "fbe68fb9379f866da8d45bd7438c31fd9c74c378", "filename": "src/test/ui/issues/issue-70093.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70093.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // compile-flags: -Zlink-native-libraries=no -Cdefault-linker-libraries=yes\n // ignore-windows - this will probably only work on unixish systems\n+// ignore-fuchsia - missing __libc_start_main for some reason (#84733)\n \n #[link(name = \"some-random-non-existent-library\", kind = \"static\")]\n extern \"C\" {}"}, {"sha": "df31e614cf809be8d815908cd1393a562712479d", "filename": "src/test/ui/panic-handler/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,6 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n+// needs-unwind since it affects the error output\n // ignore-emscripten compiled with panic=abort, personality not required\n \n #![no_std]"}, {"sha": "1f14b20e4514dea794b1187f1a3b6243d5f50983", "filename": "src/test/ui/panic-handler/weak-lang-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,5 +1,5 @@\n error[E0259]: the name `core` is defined multiple times\n-  --> $DIR/weak-lang-item.rs:8:1\n+  --> $DIR/weak-lang-item.rs:9:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ `core` reimported here"}, {"sha": "58a90a592c4c0f0b62ab32b8883a267018f31a8d", "filename": "src/test/ui/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // compile-flags:-C panic=abort -C prefer-dynamic\n+// needs-unwind\n // ignore-musl - no dylibs here\n // ignore-emscripten\n // ignore-sgx no dynamic lib support"}, {"sha": "24048ebe008fa4432528efc9739c9237b87e5b95", "filename": "src/test/ui/panic-runtime/lto-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -2,6 +2,7 @@\n #![allow(unused_variables)]\n \n // compile-flags:-C lto -C panic=unwind\n+// needs-unwind\n // no-prefer-dynamic\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "622535a75aff6e5eb25b766a64bac7b6a0dd11d3", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // aux-build:panic-runtime-unwind.rs\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-unwind.rs"}, {"sha": "c48caaf07907742018ffb362e32f5a2093764405", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs"}, {"sha": "7a2e48e2f10a960b6f0d56e6af99f19cbb7ef06c", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// needs-unwind\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs"}, {"sha": "cc6412e271a132825e6498267211a4e0235d1468", "filename": "src/test/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -35,6 +35,7 @@ struct Outer {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "874dbdb42c33c133a14dfe75d19b5e33e2049333", "filename": "src/test/ui/test-panic-abort-disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:building tests with panic=abort is not supported\n // no-prefer-dynamic\n-// compile-flags: --test -Cpanic=abort\n+// compile-flags: --test -Cpanic=abort -Zpanic-abort-tests=no\n // run-flags: --test-threads=1\n \n // ignore-wasm no panic or subprocess support"}, {"sha": "0440cf488e8bb67374df02f075b9658dc1222f37", "filename": "src/test/ui/unwind-no-uwtable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Funwind-no-uwtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-no-uwtable.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-windows target requires uwtable\n // ignore-wasm32-bare no proper panic=unwind support\n // compile-flags: -C panic=unwind -C force-unwind-tables=n"}, {"sha": "2bf4cfc50032049e780b88db39ab6fe47ca0dfd8", "filename": "src/test/ui/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftest%2Fui%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fx86stdcall.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -27,6 +27,7 @@ pub fn main() {\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\",\n+          target_os = \"fuchsia\",\n           target_os = \"linux\",\n           target_os = \"macos\",\n           target_os = \"netbsd\","}, {"sha": "408c0b8da0b210375a8bf3855896a1b31d740d5b", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -171,6 +171,12 @@ impl fmt::Display for Debugger {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq)]\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n /// Configuration for compiletest\n #[derive(Debug, Clone)]\n pub struct Config {\n@@ -265,6 +271,10 @@ pub struct Config {\n     /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n+    /// What panic strategy the target is built with.  Unwind supports Abort, but\n+    /// not vice versa.\n+    pub target_panic: PanicStrategy,\n+\n     /// Target system to be tested\n     pub target: String,\n "}, {"sha": "983934d129a2e5291c6cb228f6a8dae64dc0ac1c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -7,7 +7,7 @@ use std::path::{Path, PathBuf};\n \n use tracing::*;\n \n-use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PassMode};\n+use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PanicStrategy, PassMode};\n use crate::util;\n use crate::{extract_cdb_version, extract_gdb_version};\n \n@@ -115,6 +115,12 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if config.target_panic == PanicStrategy::Abort\n+                    && config.parse_name_directive(ln, \"needs-unwind\")\n+                {\n+                    props.ignore = true;\n+                }\n+\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "d53e19f2908e4ad85681ca6cc34b47e0bd329f1a", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/577f1d007d99064fea5f20c4bd2814b38ee7fe48/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=577f1d007d99064fea5f20c4bd2814b38ee7fe48", "patch": "@@ -5,7 +5,9 @@\n \n extern crate test;\n \n-use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n+use crate::common::{\n+    expected_output_path, output_base_dir, output_relative_path, PanicStrategy, UI_EXTENSIONS,\n+};\n use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, Pretty, TestPaths};\n use crate::util::logv;\n use getopts::Options;\n@@ -97,8 +99,9 @@ pub fn parse_config(args: Vec<String>) -> Config {\n              (eg. emulator, valgrind)\",\n             \"PROGRAM\",\n         )\n-        .optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n-        .optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n+        .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag(\n             \"\",\n@@ -243,8 +246,13 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         }),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n-        host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n-        target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n+        host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n+        target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n+        target_panic: match matches.opt_str(\"target-panic\").as_deref() {\n+            Some(\"unwind\") | None => PanicStrategy::Unwind,\n+            Some(\"abort\") => PanicStrategy::Abort,\n+            _ => panic!(\"unknown `--target-panic` option `{}` given\", mode),\n+        },\n         target,\n         host: opt_str2(matches.opt_str(\"host\")),\n         cdb,"}]}