{"sha": "17a8aff20abdef46ae90801c85cc232e81443e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YThhZmYyMGFiZGVmNDZhZTkwODAxYzg1Y2MyMzJlODE0NDNlMWI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-03-28T01:27:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-03-28T22:32:58Z"}, "message": "Use `SmallVec` in `TokenStreamBuilder`.\n\nThis reduces by 12% the number of allocations done for a \"clean\nincremental\" of `webrender_api`, which reduces the instruction count by\nabout 0.5%.\n\nIt also reduces instruction counts by up to 1.4% across a range of\nrustc-perf benchmark runs.", "tree": {"sha": "fdc560f228255949dae032b2f28409dbdf991580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc560f228255949dae032b2f28409dbdf991580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a8aff20abdef46ae90801c85cc232e81443e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a8aff20abdef46ae90801c85cc232e81443e1b", "html_url": "https://github.com/rust-lang/rust/commit/17a8aff20abdef46ae90801c85cc232e81443e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a8aff20abdef46ae90801c85cc232e81443e1b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c27fb19ba15a2e45485e601a79914c6280196b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27fb19ba15a2e45485e601a79914c6280196b0", "html_url": "https://github.com/rust-lang/rust/commit/4c27fb19ba15a2e45485e601a79914c6280196b0"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "e99a86e807f7f6294e79356f1e777e65d6f7d728", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a8aff20abdef46ae90801c85cc232e81443e1b/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a8aff20abdef46ae90801c85cc232e81443e1b/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=17a8aff20abdef46ae90801c85cc232e81443e1b", "patch": "@@ -6,6 +6,7 @@ use crate::parse::parser::{Parser, TokenType, PathStyle};\n use crate::tokenstream::{TokenStream, TokenTree};\n \n use log::debug;\n+use smallvec::smallvec;\n \n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n@@ -171,7 +172,7 @@ impl<'a> Parser<'a> {\n                 } else {\n                     self.parse_unsuffixed_lit()?.tokens()\n                 };\n-                TokenStream::from_streams(vec![eq.into(), tokens])\n+                TokenStream::from_streams(smallvec![eq.into(), tokens])\n             } else {\n                 TokenStream::empty()\n             };"}, {"sha": "2d47b982ebdd9b7140d1760d0206cc6cd3a1278b", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17a8aff20abdef46ae90801c85cc232e81443e1b/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a8aff20abdef46ae90801c85cc232e81443e1b/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=17a8aff20abdef46ae90801c85cc232e81443e1b", "patch": "@@ -24,6 +24,7 @@ use syntax_pos::{BytePos, Mark, Span, DUMMY_SP};\n use rustc_data_structures::static_assert;\n use rustc_data_structures::sync::Lrc;\n use serialize::{Decoder, Decodable, Encoder, Encodable};\n+use smallvec::{SmallVec, smallvec};\n \n use std::borrow::Cow;\n use std::{fmt, iter, mem};\n@@ -224,7 +225,7 @@ impl From<Token> for TokenStream {\n \n impl<T: Into<TokenStream>> iter::FromIterator<T> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {\n-        TokenStream::from_streams(iter.into_iter().map(Into::into).collect::<Vec<_>>())\n+        TokenStream::from_streams(iter.into_iter().map(Into::into).collect::<SmallVec<_>>())\n     }\n }\n \n@@ -256,7 +257,7 @@ impl TokenStream {\n         }\n     }\n \n-    pub(crate) fn from_streams(mut streams: Vec<TokenStream>) -> TokenStream {\n+    pub(crate) fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::empty(),\n             1 => streams.pop().unwrap(),\n@@ -393,12 +394,13 @@ impl TokenStream {\n     }\n }\n \n+// 99.5%+ of the time we have 1 or 2 elements in this vector.\n #[derive(Clone)]\n-pub struct TokenStreamBuilder(Vec<TokenStream>);\n+pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);\n \n impl TokenStreamBuilder {\n     pub fn new() -> TokenStreamBuilder {\n-        TokenStreamBuilder(Vec::new())\n+        TokenStreamBuilder(SmallVec::new())\n     }\n \n     pub fn push<T: Into<TokenStream>>(&mut self, stream: T) {\n@@ -485,7 +487,7 @@ impl Cursor {\n         }\n         let index = self.index;\n         let stream = mem::replace(&mut self.stream, TokenStream(None));\n-        *self = TokenStream::from_streams(vec![stream, new_stream]).into_trees();\n+        *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();\n         self.index = index;\n     }\n \n@@ -572,7 +574,7 @@ mod tests {\n             let test_res = string_to_ts(\"foo::bar::baz\");\n             let test_fst = string_to_ts(\"foo::bar\");\n             let test_snd = string_to_ts(\"::baz\");\n-            let eq_res = TokenStream::from_streams(vec![test_fst, test_snd]);\n+            let eq_res = TokenStream::from_streams(smallvec![test_fst, test_snd]);\n             assert_eq!(test_res.trees().count(), 5);\n             assert_eq!(eq_res.trees().count(), 5);\n             assert_eq!(test_res.eq_unspanned(&eq_res), true);"}]}