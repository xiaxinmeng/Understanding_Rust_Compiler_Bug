{"sha": "29d1252e4d2126318d7f622505ed76dd1e8e4edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDEyNTJlNGQyMTI2MzE4ZDdmNjIyNTA1ZWQ3NmRkMWU4ZTRlZGM=", "commit": {"author": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2015-04-14T19:52:37Z"}, "committer": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2015-04-16T21:03:05Z"}, "message": "deprecate Unicode functions that will be moved to crates.io\n\nThis patch\n1. renames libunicode to librustc_unicode,\n2. deprecates several pieces of libunicode (see below), and\n3. removes references to deprecated functions from\n   librustc_driver and libsyntax. This may change pretty-printed\n   output from these modules in cases involving wide or combining\n   characters used in filenames, identifiers, etc.\n\nThe following functions are marked deprecated:\n\n1. char.width() and str.width():\n   --> use unicode-width crate\n\n2. str.graphemes() and str.grapheme_indices():\n   --> use unicode-segmentation crate\n\n3. str.nfd_chars(), str.nfkd_chars(), str.nfc_chars(), str.nfkc_chars(),\n   char.compose(), char.decompose_canonical(), char.decompose_compatible(),\n   char.canonical_combining_class():\n   --> use unicode-normalization crate", "tree": {"sha": "921b91ee89c9262e2223d666f26ffded1bcda26f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/921b91ee89c9262e2223d666f26ffded1bcda26f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d1252e4d2126318d7f622505ed76dd1e8e4edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d1252e4d2126318d7f622505ed76dd1e8e4edc", "html_url": "https://github.com/rust-lang/rust/commit/29d1252e4d2126318d7f622505ed76dd1e8e4edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d1252e4d2126318d7f622505ed76dd1e8e4edc/comments", "author": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "288809c8f35d9b37f2e4f5c3ac168f56dbc3bbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/288809c8f35d9b37f2e4f5c3ac168f56dbc3bbc4", "html_url": "https://github.com/rust-lang/rust/commit/288809c8f35d9b37f2e4f5c3ac168f56dbc3bbc4"}], "stats": {"total": 171, "additions": 114, "deletions": 57}, "files": [{"sha": "537c2f6560551824f36049c012f27d95425994a0", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -52,7 +52,7 @@\n TARGET_CRATES := libc std flate arena term \\\n                  serialize getopts collections test rand \\\n                  log graphviz core rbml alloc \\\n-                 unicode rustc_bitflags\n+                 rustc_unicode rustc_bitflags\n RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n@@ -61,9 +61,9 @@ TOOLS := compiletest rustdoc rustc rustbook\n \n DEPS_core :=\n DEPS_libc := core\n-DEPS_unicode := core\n+DEPS_rustc_unicode := core\n DEPS_alloc := core libc native:jemalloc\n-DEPS_std := core libc rand alloc collections unicode \\\n+DEPS_std := core libc rand alloc collections rustc_unicode \\\n \tnative:rust_builtin native:backtrace native:rustrt_native \\\n \trustc_bitflags\n DEPS_graphviz := std\n@@ -94,7 +94,7 @@ DEPS_serialize := std log\n DEPS_rbml := std log serialize\n DEPS_term := std log\n DEPS_getopts := std\n-DEPS_collections := core alloc unicode\n+DEPS_collections := core alloc rustc_unicode\n DEPS_num := std\n DEPS_test := std getopts serialize rbml term native:rust_test_helpers\n DEPS_rand := core\n@@ -115,11 +115,11 @@ ONLY_RLIB_libc := 1\n ONLY_RLIB_alloc := 1\n ONLY_RLIB_rand := 1\n ONLY_RLIB_collections := 1\n-ONLY_RLIB_unicode := 1\n+ONLY_RLIB_rustc_unicode := 1\n ONLY_RLIB_rustc_bitflags := 1\n \n # Documented-by-default crates\n-DOC_CRATES := std alloc collections core libc unicode\n+DOC_CRATES := std alloc collections core libc rustc_unicode\n \n ################################################################################\n # You should not need to edit below this line"}, {"sha": "0de622f12ea5974a41fec12bf7a37fbbc1b4ca88", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -15,14 +15,14 @@\n \n # The names of crates that must be tested\n \n-# libcore/libunicode tests are in a separate crate\n+# libcore/librustc_unicode tests are in a separate crate\n DEPS_coretest :=\n $(eval $(call RUST_CRATE,coretest))\n \n DEPS_collectionstest :=\n $(eval $(call RUST_CRATE,collectionstest))\n \n-TEST_TARGET_CRATES = $(filter-out core unicode,$(TARGET_CRATES)) \\\n+TEST_TARGET_CRATES = $(filter-out core rustc_unicode,$(TARGET_CRATES)) \\\n \t\t\tcollectionstest coretest\n TEST_DOC_CRATES = $(DOC_CRATES)\n TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\"}, {"sha": "d428cd9bbbe34c99aaf07a060fe86d2d441c7a0a", "filename": "src/etc/unicode.py", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -518,11 +518,14 @@ def comp_pfun(char):\n     emit_table(f, \"combining_class_table\", combine, \"&'static [(char, char, u8)]\", is_pub=False,\n             pfun=lambda x: \"(%s,%s,%s)\" % (escape_char(x[0]), escape_char(x[1]), x[2]))\n \n-    f.write(\"    pub fn canonical_combining_class(c: char) -> u8 {\\n\"\n-        + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n-        + \"    }\\n\")\n+    f.write(\"\"\"    #[deprecated(reason = \"use the crates.io `unicode-normalization` lib instead\",\n+                 since = \"1.0.0\")]\n+    #[unstable(feature = \"unicode\",\n+               reason = \"this functionality will be moved to crates.io\")]\n+    pub fn canonical_combining_class(c: char) -> u8 {\n+        bsearch_range_value_table(c, combining_class_table)\n+    }\n \n-    f.write(\"\"\"\n }\n \n \"\"\")"}, {"sha": "9a35ac1f6983ecc3480024534a85e9ec25a2e60f", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -50,7 +50,7 @@\n #[macro_use]\n extern crate core;\n \n-extern crate unicode;\n+extern crate rustc_unicode;\n extern crate alloc;\n \n #[cfg(test)] #[macro_use] extern crate std;"}, {"sha": "0f902e258b9ca27bd46827f2a6d649604bca4847", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -59,13 +59,13 @@ use core::result::Result;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n-use unicode::str::{UnicodeStr, Utf16Encoder};\n+use rustc_unicode::str::{UnicodeStr, Utf16Encoder};\n \n use core::convert::AsRef;\n use vec_deque::VecDeque;\n use borrow::{Borrow, ToOwned};\n use string::String;\n-use unicode;\n+use rustc_unicode;\n use vec::Vec;\n use slice::SliceConcatExt;\n \n@@ -78,7 +78,7 @@ pub use core::str::{Matches, RMatches};\n pub use core::str::{MatchIndices, RMatchIndices};\n pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n pub use core::str::{from_utf8_unchecked, ParseBoolError};\n-pub use unicode::str::{Words, Graphemes, GraphemeIndices};\n+pub use rustc_unicode::str::{Words, Graphemes, GraphemeIndices};\n pub use core::str::pattern;\n \n /*\n@@ -161,6 +161,9 @@ enum DecompositionType {\n /// External iterator for a string decomposition's characters.\n ///\n /// For use with the `std::iter` module.\n+#[allow(deprecated)]\n+#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n #[derive(Clone)]\n #[unstable(feature = \"unicode\",\n            reason = \"this functionality may be replaced with a more generic \\\n@@ -172,6 +175,7 @@ pub struct Decompositions<'a> {\n     sorted: bool\n }\n \n+#[allow(deprecated)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Decompositions<'a> {\n     type Item = char;\n@@ -198,7 +202,7 @@ impl<'a> Iterator for Decompositions<'a> {\n                 {\n                     let callback = |d| {\n                         let class =\n-                            unicode::char::canonical_combining_class(d);\n+                            rustc_unicode::char::canonical_combining_class(d);\n                         if class == 0 && !*sorted {\n                             canonical_sort(buffer);\n                             *sorted = true;\n@@ -207,10 +211,10 @@ impl<'a> Iterator for Decompositions<'a> {\n                     };\n                     match self.kind {\n                         Canonical => {\n-                            unicode::char::decompose_canonical(ch, callback)\n+                            rustc_unicode::char::decompose_canonical(ch, callback)\n                         }\n                         Compatible => {\n-                            unicode::char::decompose_compatible(ch, callback)\n+                            rustc_unicode::char::decompose_compatible(ch, callback)\n                         }\n                     }\n                 }\n@@ -254,6 +258,9 @@ enum RecompositionState {\n /// External iterator for a string recomposition's characters.\n ///\n /// For use with the `std::iter` module.\n+#[allow(deprecated)]\n+#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n #[derive(Clone)]\n #[unstable(feature = \"unicode\",\n            reason = \"this functionality may be replaced with a more generic \\\n@@ -266,6 +273,7 @@ pub struct Recompositions<'a> {\n     last_ccc: Option<u8>\n }\n \n+#[allow(deprecated)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Recompositions<'a> {\n     type Item = char;\n@@ -276,7 +284,7 @@ impl<'a> Iterator for Recompositions<'a> {\n             match self.state {\n                 Composing => {\n                     for ch in self.iter.by_ref() {\n-                        let ch_class = unicode::char::canonical_combining_class(ch);\n+                        let ch_class = rustc_unicode::char::canonical_combining_class(ch);\n                         if self.composee.is_none() {\n                             if ch_class != 0 {\n                                 return Some(ch);\n@@ -288,7 +296,7 @@ impl<'a> Iterator for Recompositions<'a> {\n \n                         match self.last_ccc {\n                             None => {\n-                                match unicode::char::compose(k, ch) {\n+                                match rustc_unicode::char::compose(k, ch) {\n                                     Some(r) => {\n                                         self.composee = Some(r);\n                                         continue;\n@@ -316,7 +324,7 @@ impl<'a> Iterator for Recompositions<'a> {\n                                     self.last_ccc = Some(ch_class);\n                                     continue;\n                                 }\n-                                match unicode::char::compose(k, ch) {\n+                                match rustc_unicode::char::compose(k, ch) {\n                                     Some(r) => {\n                                         self.composee = Some(r);\n                                         continue;\n@@ -465,6 +473,9 @@ impl str {\n \n     /// Returns an iterator over the string in Unicode Normalization Form D\n     /// (canonical decomposition).\n+    #[allow(deprecated)]\n+    #[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n     #[inline]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may be replaced with a more generic \\\n@@ -480,6 +491,9 @@ impl str {\n \n     /// Returns an iterator over the string in Unicode Normalization Form KD\n     /// (compatibility decomposition).\n+    #[allow(deprecated)]\n+    #[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n     #[inline]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may be replaced with a more generic \\\n@@ -495,6 +509,9 @@ impl str {\n \n     /// An Iterator over the string in Unicode Normalization Form C\n     /// (canonical decomposition followed by canonical composition).\n+    #[allow(deprecated)]\n+    #[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n     #[inline]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may be replaced with a more generic \\\n@@ -511,6 +528,9 @@ impl str {\n \n     /// An Iterator over the string in Unicode Normalization Form KC\n     /// (compatibility decomposition followed by canonical composition).\n+    #[allow(deprecated)]\n+    #[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n     #[inline]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may be replaced with a more generic \\\n@@ -1690,6 +1710,8 @@ impl str {\n     ///\n     /// assert_eq!(&gr2[..], b);\n     /// ```\n+    #[deprecated(reason = \"use the crates.io `unicode-segmentation` library instead\",\n+             since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn graphemes(&self, is_extended: bool) -> Graphemes {\n@@ -1709,6 +1731,8 @@ impl str {\n     ///\n     /// assert_eq!(&gr_inds[..], b);\n     /// ```\n+    #[deprecated(reason = \"use the crates.io `unicode-segmentation` library instead\",\n+             since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices {\n@@ -1749,6 +1773,8 @@ impl str {\n     /// recommends that these\n     /// characters be treated as 1 column (i.e., `is_cjk = false`) if the\n     /// locale is unknown.\n+    #[deprecated(reason = \"use the crates.io `unicode-width` library instead\",\n+                 since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn width(&self, is_cjk: bool) -> usize {"}, {"sha": "74af5783fa8052799b6a029149f6552074a89240", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -25,8 +25,8 @@ use core::ops::{self, Deref, Add, Index};\n use core::ptr;\n use core::slice;\n use core::str::pattern::Pattern;\n-use unicode::str as unicode_str;\n-use unicode::str::Utf16Item;\n+use rustc_unicode::str as unicode_str;\n+use rustc_unicode::str::Utf16Item;\n \n use borrow::{Cow, IntoCow};\n use str::{self, FromStr, Utf8Error};"}, {"sha": "549ff17e4690218fde5c3ba976a4c9fe2193d24c", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -27,7 +27,7 @@\n \n extern crate collections;\n extern crate test;\n-extern crate unicode;\n+extern crate rustc_unicode;\n \n #[cfg(test)] #[macro_use] mod bench;\n "}, {"sha": "e23a8a34b09ce2aadb9cbadf9f02edb27d004a1e", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -19,6 +19,7 @@ fn test_le() {\n     assert!(\"foo\" != \"bar\");\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_len() {\n     assert_eq!(\"\".len(), 0);\n@@ -498,7 +499,7 @@ fn test_is_utf8() {\n \n #[test]\n fn test_is_utf16() {\n-    use unicode::str::is_utf16;\n+    use rustc_unicode::str::is_utf16;\n \n     macro_rules! pos {\n         ($($e:expr),*) => { { $(assert!(is_utf16($e));)* } }\n@@ -944,6 +945,7 @@ fn test_words() {\n     assert_eq!(words, [\"M\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\", \"Little\", \"l\u00e4mb\"])\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_nfd_chars() {\n     macro_rules! t {\n@@ -963,6 +965,7 @@ fn test_nfd_chars() {\n     t!(\"\\u{ac1c}\", \"\\u{1100}\\u{1162}\");\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_nfkd_chars() {\n     macro_rules! t {\n@@ -982,6 +985,7 @@ fn test_nfkd_chars() {\n     t!(\"\\u{ac1c}\", \"\\u{1100}\\u{1162}\");\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_nfc_chars() {\n     macro_rules! t {\n@@ -1002,6 +1006,7 @@ fn test_nfc_chars() {\n     t!(\"a\\u{300}\\u{305}\\u{315}\\u{5ae}b\", \"\\u{e0}\\u{5ae}\\u{305}\\u{315}b\");\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_nfkc_chars() {\n     macro_rules! t {\n@@ -1033,6 +1038,7 @@ fn test_lines() {\n     assert_eq!(lines, [\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"\", \"Little l\u00e4mb\"]);\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_graphemes() {\n     use std::iter::order;\n@@ -1629,7 +1635,7 @@ fn test_rev_split_char_iterator_no_trailing() {\n \n #[test]\n fn test_utf16_code_units() {\n-    use unicode::str::Utf16Encoder;\n+    use rustc_unicode::str::Utf16Encoder;\n     assert_eq!(Utf16Encoder::new(vec!['\u00e9', '\\u{1F4A9}'].into_iter()).collect::<Vec<u16>>(),\n                [0xE9, 0xD83D, 0xDCA9])\n }"}, {"sha": "1bac3a529809cc57e68afb59968fec3d2e2b8254", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -135,7 +135,7 @@ fn test_from_utf16() {\n         let s_as_utf16 = s.utf16_units().collect::<Vec<u16>>();\n         let u_as_string = String::from_utf16(&u).unwrap();\n \n-        assert!(::unicode::str::is_utf16(&u));\n+        assert!(::rustc_unicode::str::is_utf16(&u));\n         assert_eq!(s_as_utf16, u);\n \n         assert_eq!(u_as_string, s);"}, {"sha": "48d9869f72ae4c70d7c2acc6e5139e8ba85fcc0c", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -10,7 +10,7 @@\n \n //! Character manipulation.\n //!\n-//! For more details, see ::unicode::char (a.k.a. std::char)\n+//! For more details, see ::rustc_unicode::char (a.k.a. std::char)\n \n #![allow(non_snake_case)]\n #![doc(primitive = \"char\")]"}, {"sha": "4939277aa59bcbe017ded0508c1b08e8fd73dfea", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -210,6 +210,7 @@ fn test_len_utf16() {\n     assert!('\\u{1f4a9}'.len_utf16() == 2);\n }\n \n+#[allow(deprecated)]\n #[test]\n fn test_width() {\n     assert_eq!('\\x00'.width(false),Some(0));"}, {"sha": "6059e49df197adbccfeca67beeb6fd5e67d3035b", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -32,7 +32,7 @@\n extern crate core;\n extern crate test;\n extern crate libc;\n-extern crate unicode;\n+extern crate rustc_unicode;\n \n mod any;\n mod atomic;"}, {"sha": "38217f8dad24e900db8341f407855356655d2759", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -35,7 +35,6 @@\n #![feature(staged_api)]\n #![feature(exit_status)]\n #![feature(set_stdio)]\n-#![feature(unicode)]\n \n extern crate arena;\n extern crate flate;\n@@ -574,7 +573,7 @@ Available lint options:\n     let builtin_groups = sort_lint_groups(builtin_groups);\n \n     let max_name_len = plugin.iter().chain(builtin.iter())\n-        .map(|&s| s.name.width(true))\n+        .map(|&s| s.name.chars().count())\n         .max().unwrap_or(0);\n     let padded = |x: &str| {\n         let mut s = repeat(\" \").take(max_name_len - x.chars().count())\n@@ -601,7 +600,7 @@ Available lint options:\n \n \n     let max_name_len = plugin_groups.iter().chain(builtin_groups.iter())\n-        .map(|&(s, _)| s.width(true))\n+        .map(|&(s, _)| s.chars().count())\n         .max().unwrap_or(0);\n     let padded = |x: &str| {\n         let mut s = repeat(\" \").take(max_name_len - x.chars().count())\n@@ -790,7 +789,6 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n ///\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n-#[allow(deprecated)]\n pub fn monitor<F:FnOnce()+Send+'static>(f: F) {\n     const STACK_SIZE: usize = 8 * 1024 * 1024; // 8MB\n "}, {"sha": "3118619220958a18c7b3b7799be624713d81b950", "filename": "src/librustc_unicode/char.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -37,7 +37,9 @@ use tables::{derived_property, property, general_category, conversions, charwidt\n pub use core::char::{MAX, from_u32, from_digit, EscapeUnicode, EscapeDefault};\n \n // unstable reexports\n+#[allow(deprecated)]\n pub use normalize::{decompose_canonical, decompose_compatible, compose};\n+#[allow(deprecated)]\n pub use tables::normalization::canonical_combining_class;\n pub use tables::UNICODE_VERSION;\n \n@@ -445,6 +447,8 @@ impl char {\n     /// [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\n     /// recommends that these characters be treated as 1 column (i.e.,\n     /// `is_cjk` = `false`) if the context cannot be reliably determined.\n+    #[deprecated(reason = \"use the crates.io `unicode-width` library instead\",\n+                 since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"needs expert opinion. is_cjk flag stands out as ugly\")]\n     pub fn width(self, is_cjk: bool) -> Option<usize> { charwidth::width(self, is_cjk) }", "previous_filename": "src/libunicode/char.rs"}, {"sha": "5c4e643c2a1c5b0fbc0b4bab4a16e806553f3a57", "filename": "src/librustc_unicode/lib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -22,7 +22,7 @@\n \n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n-#![crate_name = \"unicode\"]\n+#![crate_name = \"rustc_unicode\"]\n #![unstable(feature = \"unicode\")]\n #![feature(lang_items)]\n #![feature(staged_api)]", "previous_filename": "src/libunicode/lib.rs"}, {"sha": "0c2ad36c637eb2ed11a84df4822acc7df2dae551", "filename": "src/librustc_unicode/normalize.rs", "status": "renamed", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fnormalize.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -33,9 +33,17 @@ fn bsearch_table<T>(c: char, r: &'static [(char, &'static [T])]) -> Option<&'sta\n }\n \n /// Compute canonical Unicode decomposition for character\n+#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n+#[unstable(feature = \"unicode\",\n+           reason = \"this functionality will be moved to crates.io\")]\n pub fn decompose_canonical<F>(c: char, mut i: F) where F: FnMut(char) { d(c, &mut i, false); }\n \n /// Compute canonical or compatible Unicode decomposition for character\n+#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n+#[unstable(feature = \"unicode\",\n+           reason = \"this functionality will be moved to crates.io\")]\n pub fn decompose_compatible<F>(c: char, mut i: F) where F: FnMut(char) { d(c, &mut i, true); }\n \n // FIXME(#19596) This is a workaround, we should use `F` instead of `&mut F`\n@@ -78,6 +86,10 @@ fn d<F>(c: char, i: &mut F, k: bool) where F: FnMut(char) {\n     (*i)(c);\n }\n \n+#[deprecated(reason = \"use the crates.io `unicode-normalization` library instead\",\n+             since = \"1.0.0\")]\n+#[unstable(feature = \"unicode\",\n+           reason = \"this functionality will be moved to crates.io\")]\n pub fn compose(a: char, b: char) -> Option<char> {\n     compose_hangul(a, b).or_else(|| {\n         match bsearch_table(a, composition_table) {", "previous_filename": "src/libunicode/normalize.rs"}, {"sha": "e2bf07c1dc1443cf46b2d38a8e5819a3ba69e3df", "filename": "src/librustc_unicode/tables.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -3951,6 +3951,10 @@ pub mod normalization {\n         '\\u{1d244}', 230), ('\\u{1e8d0}', '\\u{1e8d6}', 220)\n     ];\n \n+    #[deprecated(reason = \"use the crates.io `unicode-normalization` lib instead\",\n+                 since = \"1.0.0\")]\n+    #[unstable(feature = \"unicode\",\n+               reason = \"this functionality will be moved to crates.io\")]\n     pub fn canonical_combining_class(c: char) -> u8 {\n         bsearch_range_value_table(c, combining_class_table)\n     }", "previous_filename": "src/libunicode/tables.rs"}, {"sha": "09a5feb5fef30b05fba146e20311abe754299322", "filename": "src/librustc_unicode/u_str.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -75,6 +75,7 @@ impl UnicodeStr for str {\n     #[inline]\n     fn is_alphanumeric(&self) -> bool { self.chars().all(|c| c.is_alphanumeric()) }\n \n+    #[allow(deprecated)]\n     #[inline]\n     fn width(&self, is_cjk: bool) -> usize {\n         self.chars().map(|c| c.width(is_cjk).unwrap_or(0)).sum()\n@@ -481,17 +482,17 @@ impl<'a> Iterator for Utf16Items<'a> {\n ///\n /// ```\n /// # #![feature(unicode)]\n-/// extern crate unicode;\n+/// extern crate rustc_unicode;\n ///\n-/// use unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};\n+/// use rustc_unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};\n ///\n /// fn main() {\n ///     // \ud834\udd1emus<invalid>ic<invalid>\n ///     let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n ///              0x0073, 0xDD1E, 0x0069, 0x0063,\n ///              0xD834];\n ///\n-///     assert_eq!(unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n+///     assert_eq!(rustc_unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n ///                vec![ScalarValue('\ud834\udd1e'),\n ///                     ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n ///                     LoneSurrogate(0xDD1E),", "previous_filename": "src/libunicode/u_str.rs"}, {"sha": "be47c68ec2dacf0c69f2fbfab23ebee145f94aa2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -49,7 +49,7 @@ extern crate rustc_back;\n extern crate serialize;\n extern crate syntax;\n extern crate test as testing;\n-extern crate unicode;\n+extern crate rustc_unicode;\n #[macro_use] extern crate log;\n \n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "9f7f50b7c7fbb108f582bd781d6f19380bfaec46", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -300,7 +300,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n }\n \n fn partition_source(s: &str) -> (String, String) {\n-    use unicode::str::UnicodeStr;\n+    use rustc_unicode::str::UnicodeStr;\n \n     let mut after_header = false;\n     let mut before = String::new();"}, {"sha": "2c74225d058ab7b388893bc6887cb695b9b96b23", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -211,8 +211,8 @@ use std::str::FromStr;\n use std::string;\n use std::{char, f64, fmt, num, str};\n use std;\n-use unicode::str as unicode_str;\n-use unicode::str::Utf16Item;\n+use rustc_unicode::str as unicode_str;\n+use rustc_unicode::str::Utf16Item;\n \n use Encodable;\n "}, {"sha": "7f3633eb5bddad53b2733c762cdaf619cf2c9820", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -41,7 +41,7 @@ Core encoding and decoding interfaces.\n #[cfg(test)] extern crate test;\n #[macro_use] extern crate log;\n \n-extern crate unicode;\n+extern crate rustc_unicode;\n extern crate collections;\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,"}, {"sha": "e8d15a95b806b1e32721ac83d5b62ef251db02ce", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -13,7 +13,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use cmp;\n-use unicode::str as core_str;\n+use rustc_unicode::str as core_str;\n use error as std_error;\n use fmt;\n use iter::{self, Iterator, Extend};"}, {"sha": "4452a4457acda6f9554137e882b2dbaa62cac4e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -151,7 +151,7 @@ extern crate collections as core_collections;\n \n #[allow(deprecated)] extern crate rand as core_rand;\n extern crate alloc;\n-extern crate unicode;\n+extern crate rustc_unicode;\n extern crate libc;\n \n #[macro_use] #[no_link] extern crate rustc_bitflags;\n@@ -196,7 +196,7 @@ pub use core_collections::string;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::vec;\n \n-pub use unicode::char;\n+pub use rustc_unicode::char;\n \n /* Exported macros */\n "}, {"sha": "aa035a1843725147034c11c64f51f35985058c88", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -44,7 +44,7 @@ use slice;\n use str;\n use string::String;\n use sys_common::AsInner;\n-use unicode::str::{Utf16Item, utf16_items};\n+use rustc_unicode::str::{Utf16Item, utf16_items};\n use vec::Vec;\n \n const UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";"}, {"sha": "8dd0cbda1ee41561e958fa9b78ab06f091954694", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -595,7 +595,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n         let mut s = String::new();\n         // Skip is the number of characters we need to skip because they are\n         // part of the 'filename:line ' part of the previous line.\n-        let skip = fm.name.width(false) + digits + 3;\n+        let skip = fm.name.chars().count() + digits + 3;\n         for _ in 0..skip {\n             s.push(' ');\n         }\n@@ -615,7 +615,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n                         col += 8 - col%8;\n                         s.push('\\t');\n                     },\n-                    c => for _ in 0..c.width(false).unwrap_or(0) {\n+                    _ => {\n                         col += 1;\n                         s.push(' ');\n                     },\n@@ -627,7 +627,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n             let count = match lastc {\n                 // Most terminals have a tab stop every eight columns by default\n                 '\\t' => 8 - col%8,\n-                _ => lastc.width(false).unwrap_or(0),\n+                _ => 1,\n             };\n             col += count;\n             s.extend(::std::iter::repeat('~').take(count));\n@@ -638,7 +638,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n                     if pos >= hi.col.to_usize() { break; }\n                     let count = match ch {\n                         '\\t' => 8 - col%8,\n-                        _ => ch.width(false).unwrap_or(0),\n+                        _ => 1,\n                     };\n                     col += count;\n                     s.extend(::std::iter::repeat('~').take(count));\n@@ -664,6 +664,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n /// than 6 lines), `end_highlight_lines` will print the first line, then\n /// dot dot dot, then last line, whereas `highlight_lines` prints the first\n /// six lines.\n+#[allow(deprecated)]\n fn end_highlight_lines(w: &mut EmitterWriter,\n                           cm: &codemap::CodeMap,\n                           sp: Span,\n@@ -694,7 +695,7 @@ fn end_highlight_lines(w: &mut EmitterWriter,\n     }\n     let last_line_start = format!(\"{}:{} \", fm.name, lines[lines.len()-1].line_index + 1);\n     let hi = cm.lookup_char_pos(sp.hi);\n-    let skip = last_line_start.width(false);\n+    let skip = last_line_start.chars().count();\n     let mut s = String::new();\n     for _ in 0..skip {\n         s.push(' ');\n@@ -710,9 +711,7 @@ fn end_highlight_lines(w: &mut EmitterWriter,\n             // position.\n             match ch {\n                 '\\t' => s.push('\\t'),\n-                c => for _ in 0..c.width(false).unwrap_or(0) {\n-                    s.push(' ');\n-                },\n+                _ => s.push(' '),\n             }\n         }\n     }"}, {"sha": "3963d20df8873dcc405a79e19654c84f126e09a5", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d1252e4d2126318d7f622505ed76dd1e8e4edc/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=29d1252e4d2126318d7f622505ed76dd1e8e4edc", "patch": "@@ -96,9 +96,12 @@ fn main() {\n                                 repeat(\" \").take(offset + 7).collect::<String>(),\n                                 repeat(\"~\").take(8).collect::<String>());\n     assert!(err.contains(&expected_span));\n-    // Second snake is 8 ~s long, with 36 preceding spaces\n+    // Second snake is only 7 ~s long, with 36 preceding spaces,\n+    // because rustc counts chars() now rather than width(). This\n+    // is because width() functions are to be removed from\n+    // librustc_unicode\n     let expected_span = format!(\"\\n{}^{}\\n\",\n                                 repeat(\" \").take(offset + 36).collect::<String>(),\n-                                repeat(\"~\").take(8).collect::<String>());\n+                                repeat(\"~\").take(7).collect::<String>());\n     assert!(err.contains(&expected_span));\n }"}]}