{"sha": "28d90bc439f86ddf8a97133982986296271f4a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZDkwYmM0MzlmODZkZGY4YTk3MTMzOTgyOTg2Mjk2MjcxZjRhMzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T06:02:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T06:02:55Z"}, "message": "trailing newline hell fixed", "tree": {"sha": "af125306970c5b0c877049cde0bfba3a51557e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af125306970c5b0c877049cde0bfba3a51557e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d90bc439f86ddf8a97133982986296271f4a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d90bc439f86ddf8a97133982986296271f4a35", "html_url": "https://github.com/rust-lang/rust/commit/28d90bc439f86ddf8a97133982986296271f4a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d90bc439f86ddf8a97133982986296271f4a35/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "html_url": "https://github.com/rust-lang/rust/commit/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "2b42c16469006561f553e5009214a2968109a927", "filename": "src/changes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28d90bc439f86ddf8a97133982986296271f4a35/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d90bc439f86ddf8a97133982986296271f4a35/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=28d90bc439f86ddf8a97133982986296271f4a35", "patch": "@@ -99,6 +99,10 @@ impl<'a> ChangeSet<'a> {\n         self.push_str(&file_name, text)\n     }\n \n+    pub fn get_mut(&mut self, file_name: &str) -> &mut StringBuffer {\n+        self.file_map.get_mut(file_name).unwrap()\n+    }\n+\n     pub fn cur_offset(&mut self, filename: &str) -> usize {\n         self.file_map[&*filename].cur_offset()\n     }"}, {"sha": "5a892e5713bf8ba5e6162f222e53fb546d20ab6e", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28d90bc439f86ddf8a97133982986296271f4a35/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d90bc439f86ddf8a97133982986296271f4a35/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=28d90bc439f86ddf8a97133982986296271f4a35", "patch": "@@ -62,7 +62,7 @@ pub fn write_list<'b>(items: &[(String, String)], formatting: &ListFormatting<'b\n     let total_width = calculate_width(items);\n \n     // Check if we need to fallback from horizontal listing, if possible.\n-    if tactic == ListTactic::HorizontalVertical { \n+    if tactic == ListTactic::HorizontalVertical {\n         if total_width + total_sep_len > formatting.h_width {\n             tactic = ListTactic::Vertical;\n         } else {\n@@ -120,7 +120,7 @@ pub fn write_list<'b>(items: &[(String, String)], formatting: &ListFormatting<'b\n         }\n \n         result.push_str(item);\n-        \n+\n         if tactic != ListTactic::Vertical && comment.len() > 0 {\n             result.push(' ');\n             result.push_str(comment);"}, {"sha": "21db1e902bbc44d0566716b5495cc6c2af630e65", "filename": "src/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28d90bc439f86ddf8a97133982986296271f4a35/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d90bc439f86ddf8a97133982986296271f4a35/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=28d90bc439f86ddf8a97133982986296271f4a35", "patch": "@@ -117,12 +117,15 @@ fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap) -> ChangeSet<'a> {\n // TODO warn on bad license\n // TODO other stuff for parity with make tidy\n fn fmt_lines(changes: &mut ChangeSet) {\n+    let mut truncate_todo = Vec::new();\n+\n     // Iterate over the chars in the change set.\n     for (f, text) in changes.text() {\n         let mut trims = vec![];\n         let mut last_wspace: Option<usize> = None;\n         let mut line_len = 0;\n         let mut cur_line = 1;\n+        let mut newline_count = 0;\n         for (c, b) in text.chars() {\n             if c == '\\n' { // TOOD test for \\r too\n                 // Check for (and record) trailing whitespace.\n@@ -138,8 +141,10 @@ fn fmt_lines(changes: &mut ChangeSet) {\n                 }\n                 line_len = 0;\n                 cur_line += 1;\n+                newline_count += 1;\n                 last_wspace = None;\n             } else {\n+                newline_count = 0;\n                 line_len += 1;\n                 if c.is_whitespace() {\n                     if last_wspace.is_none() {\n@@ -151,11 +156,24 @@ fn fmt_lines(changes: &mut ChangeSet) {\n             }\n         }\n \n+        if newline_count > 1 {\n+            truncate_todo.push((f, text.len - newline_count + 1))\n+        }\n+\n         for &(l, _, _) in trims.iter() {\n             // TODO store the error rather than reporting immediately.\n             println!(\"Rustfmt left trailing whitespace at {}:{} (sorry)\", f, l);\n         }\n     }\n+\n+    for (f, l) in truncate_todo {\n+        // This unsafe block and the ridiculous dance with the cast is because\n+        // the borrow checker thinks the first borrow of changes lasts for the\n+        // whole function.\n+        unsafe {\n+            (*(changes as *const ChangeSet as *mut ChangeSet)).get_mut(f).truncate(l);\n+        }\n+    }\n }\n \n struct RustFmtCalls {"}]}