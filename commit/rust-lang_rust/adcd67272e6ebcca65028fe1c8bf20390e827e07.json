{"sha": "adcd67272e6ebcca65028fe1c8bf20390e827e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkY2Q2NzI3MmU2ZWJjY2E2NTAyOGZlMWM4YmYyMDM5MGU4MjdlMDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T18:12:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-14T17:14:19Z"}, "message": "test: Fix fallout in run-pass tests", "tree": {"sha": "9dce2e3035fd3f5efcd059ce2a1b188c9b289b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dce2e3035fd3f5efcd059ce2a1b188c9b289b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adcd67272e6ebcca65028fe1c8bf20390e827e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adcd67272e6ebcca65028fe1c8bf20390e827e07", "html_url": "https://github.com/rust-lang/rust/commit/adcd67272e6ebcca65028fe1c8bf20390e827e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adcd67272e6ebcca65028fe1c8bf20390e827e07/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a89ed3effb37c86ca686adbb447275f3562a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a89ed3effb37c86ca686adbb447275f3562a09", "html_url": "https://github.com/rust-lang/rust/commit/84a89ed3effb37c86ca686adbb447275f3562a09"}], "stats": {"total": 864, "additions": 143, "deletions": 721}, "files": [{"sha": "dcdce50c1e9b5dba35a39534a9f2042c5e9c46c2", "filename": "src/test/run-pass-valgrind/cleanup-stdin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-stdin.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(old_io, io)]\n-\n fn main() {\n-    let _ = std::old_io::stdin();\n     let _ = std::io::stdin();\n+    let _ = std::io::stdout();\n+    let _ = std::io::stderr();\n }"}, {"sha": "f4b62eb2e7c50a4191a540983dbdac96d5e461d9", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -11,11 +11,8 @@\n // no-pretty-expanded FIXME #15189\n // ignore-windows FIXME #13259\n \n-#![feature(unboxed_closures)]\n-#![feature(unsafe_destructor, old_io, collections)]\n-\n use std::env;\n-use std::old_io::process::Command;\n+use std::process::{Command, Stdio};\n use std::str;\n use std::ops::{Drop, FnMut, FnOnce};\n \n@@ -40,44 +37,49 @@ fn double() {\n     panic!(\"once\");\n }\n \n-fn runtest(me: &str) {\n-    let mut template = Command::new(me);\n-    template.env(\"IS_TEST\", \"1\");\n+fn template(me: &str) -> Command {\n+    let mut m = Command::new(me);\n+    m.env(\"IS_TEST\", \"1\")\n+     .stdout(Stdio::piped())\n+     .stderr(Stdio::piped());\n+    return m;\n+}\n \n+fn runtest(me: &str) {\n     // Make sure that the stack trace is printed\n-    let p = template.clone().arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n+    let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n-    let s = str::from_utf8(&out.error).unwrap();\n+    let s = str::from_utf8(&out.stderr).unwrap();\n     assert!(s.contains(\"stack backtrace\") && s.contains(\"foo::h\"),\n             \"bad output: {}\", s);\n \n     // Make sure the stack trace is *not* printed\n     // (Remove RUST_BACKTRACE from our own environment, in case developer\n     // is running `make check` with it on.)\n-    let p = template.clone().arg(\"fail\").env_remove(\"RUST_BACKTRACE\").spawn().unwrap();\n+    let p = template(me).arg(\"fail\").env_remove(\"RUST_BACKTRACE\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n-    let s = str::from_utf8(&out.error).unwrap();\n+    let s = str::from_utf8(&out.stderr).unwrap();\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(\"foo::h\"),\n             \"bad output2: {}\", s);\n \n     // Make sure a stack trace is printed\n-    let p = template.clone().arg(\"double-fail\").spawn().unwrap();\n+    let p = template(me).arg(\"double-fail\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n-    let s = str::from_utf8(&out.error).unwrap();\n+    let s = str::from_utf8(&out.stderr).unwrap();\n     // loosened the following from double::h to double:: due to\n     // spurious failures on mac, 32bit, optimized\n     assert!(s.contains(\"stack backtrace\") && s.contains(\"double::\"),\n             \"bad output3: {}\", s);\n \n     // Make sure a stack trace isn't printed too many times\n-    let p = template.clone().arg(\"double-fail\")\n+    let p = template(me).arg(\"double-fail\")\n                                 .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n-    let s = str::from_utf8(&out.error).unwrap();\n+    let s = str::from_utf8(&out.stderr).unwrap();\n     let mut i = 0;\n     for _ in 0..2 {\n         i += s[i + 10..].find(\"stack backtrace\").unwrap() + 10;"}, {"sha": "6c58194f857a6769dee846ad8d90cdca4ba8904d", "filename": "src/test/run-pass/capturing-logging.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// exec-env:RUST_LOG=info\n-\n-\n-#![allow(unknown_features)]\n-#![feature(box_syntax, old_io, rustc_private, std_misc)]\n-\n-#[macro_use]\n-extern crate log;\n-\n-use log::{set_logger, Logger, LogRecord};\n-use std::sync::mpsc::channel;\n-use std::fmt;\n-use std::old_io::{ChanReader, ChanWriter, Reader, Writer};\n-use std::thread;\n-\n-struct MyWriter(ChanWriter);\n-\n-impl Logger for MyWriter {\n-    fn log(&mut self, record: &LogRecord) {\n-        let MyWriter(ref mut inner) = *self;\n-        write!(inner, \"{}\", record.args);\n-    }\n-}\n-\n-fn main() {\n-    let (tx, rx) = channel();\n-    let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-    let _t = thread::scoped(move|| {\n-        set_logger(box MyWriter(w) as Box<Logger+Send>);\n-        debug!(\"debug\");\n-        info!(\"info\");\n-    });\n-    let s = r.read_to_string().unwrap();\n-    assert!(s.contains(\"info\"));\n-    assert!(!s.contains(\"debug\"));\n-}"}, {"sha": "50f05c050b173cfee3f3d3a12a006eee5fd746a0", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -14,7 +14,6 @@\n #![feature(unboxed_closures, old_io)]\n \n use std::mem;\n-use std::old_io::stdio::println;\n \n fn call_it<F>(f: F)\n     where F : FnOnce(String) -> String\n@@ -62,7 +61,8 @@ pub fn main() {\n \n     // External functions\n \n-    call_bare(println);\n+    fn foo(s: &str) {}\n+    call_bare(foo);\n \n-    call_bare_again(println);\n+    call_bare_again(foo);\n }"}, {"sha": "622084a86a624a5f173c772eb7ceecc5c41e804c", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -16,34 +16,34 @@\n // instead of in std.\n \n #![reexport_test_harness_main = \"test_main\"]\n-#![feature(old_io, libc, std_misc)]\n+#![feature(libc, std_misc)]\n \n extern crate libc;\n \n-use std::old_io::{Process, Command, timer};\n-use std::time::Duration;\n+use std::process::{self, Command, Child, Output};\n use std::str;\n use std::sync::mpsc::channel;\n use std::thread;\n+use std::time::Duration;\n \n-macro_rules! succeed { ($e:expr) => (\n-    match $e { Ok(..) => {}, Err(e) => panic!(\"panic: {}\", e) }\n-) }\n+macro_rules! t {\n+    ($e:expr) => (match $e { Ok(e) => e, Err(e) => panic!(\"error: {}\", e) })\n+}\n \n fn test_destroy_once() {\n     let mut p = sleeper();\n-    match p.signal_exit() {\n+    match p.kill() {\n         Ok(()) => {}\n         Err(e) => panic!(\"error: {}\", e),\n     }\n }\n \n #[cfg(unix)]\n-pub fn sleeper() -> Process {\n+pub fn sleeper() -> Child {\n     Command::new(\"sleep\").arg(\"1000\").spawn().unwrap()\n }\n #[cfg(windows)]\n-pub fn sleeper() -> Process {\n+pub fn sleeper() -> Child {\n     // There's a `timeout` command on windows, but it doesn't like having\n     // its output piped, so instead just ping ourselves a few times with\n     // gaps in between so we're sure this process is alive for awhile\n@@ -52,16 +52,12 @@ pub fn sleeper() -> Process {\n \n fn test_destroy_twice() {\n     let mut p = sleeper();\n-    succeed!(p.signal_exit()); // this shouldn't crash...\n-    let _ = p.signal_exit(); // ...and nor should this (and nor should the destructor)\n+    t!(p.kill()); // this shouldn't crash...\n+    let _ = p.kill(); // ...and nor should this (and nor should the destructor)\n }\n \n-pub fn test_destroy_actually_kills(force: bool) {\n-    use std::old_io::process::{Command, ProcessOutput, ExitStatus, ExitSignal};\n-    use std::old_io::timer;\n-    use libc;\n-    use std::str;\n-\n+#[test]\n+fn test_destroy_actually_kills() {\n     #[cfg(all(unix,not(target_os=\"android\")))]\n     static BLOCK_COMMAND: &'static str = \"cat\";\n \n@@ -74,34 +70,16 @@ pub fn test_destroy_actually_kills(force: bool) {\n     // this process will stay alive indefinitely trying to read from stdin\n     let mut p = Command::new(BLOCK_COMMAND).spawn().unwrap();\n \n-    assert!(p.signal(0).is_ok());\n-\n-    if force {\n-        p.signal_kill().unwrap();\n-    } else {\n-        p.signal_exit().unwrap();\n-    }\n+    p.kill().unwrap();\n \n     // Don't let this test time out, this should be quick\n-    let (tx, rx1) = channel();\n-    let mut t = timer::Timer::new().unwrap();\n-    let rx2 = t.oneshot(Duration::milliseconds(1000));\n+    let (tx, rx) = channel();\n     thread::spawn(move|| {\n-        select! {\n-            _ = rx2.recv() => unsafe { libc::exit(1) },\n-            _ = rx1.recv() => {}\n+        thread::sleep_ms(1000);\n+        if rx.try_recv().is_err() {\n+            process::exit(1);\n         }\n     });\n-    match p.wait().unwrap() {\n-        ExitStatus(..) => panic!(\"expected a signal\"),\n-        ExitSignal(..) => tx.send(()).unwrap(),\n-    }\n-}\n-\n-fn test_unforced_destroy_actually_kills() {\n-    test_destroy_actually_kills(false);\n-}\n-\n-fn test_forced_destroy_actually_kills() {\n-    test_destroy_actually_kills(true);\n+    assert!(p.wait().unwrap().code().is_none());\n+    tx.send(());\n }"}, {"sha": "10e8ddc41f3f9e71da6585ad1decea0dda069f22", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -11,7 +11,6 @@\n #![feature(rand, rustc_private)]\n \n extern crate serialize;\n-extern crate rand;\n \n mod submod {\n     // if any of these are implemented without global calls for any\n@@ -20,21 +19,21 @@ mod submod {\n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Debug, Rand,\n+               Debug,\n                Encodable, Decodable)]\n     enum A { A1(usize), A2(isize) }\n \n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Debug, Rand,\n+               Debug,\n                Encodable, Decodable)]\n     struct B { x: usize, y: isize }\n \n     #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n-               Debug, Rand,\n+               Debug,\n                Encodable, Decodable)]\n     struct C(usize, isize);\n "}, {"sha": "bc11b55d3105f3029fa9a054a4a77047cb5f3c6e", "filename": "src/test/run-pass/deriving-rand.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(rand)]\n-\n-use std::rand;\n-\n-#[derive(Rand)]\n-struct A;\n-\n-#[derive(Rand)]\n-struct B(isize, isize);\n-\n-#[derive(Rand)]\n-struct C {\n-    x: f64,\n-    y: (u8, u8)\n-}\n-\n-#[derive(Rand)]\n-enum D {\n-    D0,\n-    D1(usize),\n-    D2 { x: (), y: () }\n-}\n-\n-pub fn main() {\n-    // check there's no segfaults\n-    for _ in 0..20 {\n-        rand::random::<A>();\n-        rand::random::<B>();\n-        rand::random::<C>();\n-        rand::random::<D>();\n-    }\n-}"}, {"sha": "f9e1b651a4933edcbb9493ff9e37d1a854038dc7", "filename": "src/test/run-pass/drop-flag-sanity-check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-sanity-check.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -17,10 +17,8 @@\n //\n // See also drop-flag-skip-sanity-check.rs.\n \n-#![feature(old_io)]\n-\n use std::env;\n-use std::old_io::process::{Command, ExitSignal, ExitStatus};\n+use std::process::Command;\n \n fn main() {\n     let args: Vec<String> = env::args().collect();"}, {"sha": "32297360a807a9a147314003ddedfb46af7b2a27", "filename": "src/test/run-pass/drop-flag-skip-sanity-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-flag-skip-sanity-check.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -20,7 +20,7 @@\n #![feature(old_io)]\n \n use std::env;\n-use std::old_io::process::{Command, ExitSignal, ExitStatus};\n+use std::process::Command;\n \n fn main() {\n     let args: Vec<String> = env::args().collect();"}, {"sha": "0d8f22254857db7ee9376dca003537fc9c92fb04", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -15,7 +15,7 @@\n #![feature(old_io)]\n \n use std::env;\n-use std::old_io::process;\n+use std::process::{Command, Stdio};\n \n pub fn main () {\n     let args: Vec<String> = env::args().collect();\n@@ -29,7 +29,7 @@ pub fn main () {\n         return;\n     }\n \n-    let mut p = process::Command::new(&args[0]);\n-    p.arg(\"child\").stdout(process::Ignored).stderr(process::Ignored);\n+    let mut p = Command::new(&args[0]);\n+    p.arg(\"child\").stdout(Stdio::null()).stderr(Stdio::null());\n     println!(\"{:?}\", p.spawn().unwrap().wait());\n }"}, {"sha": "2b89915516469b4b0efcc55c425420f838bbe5ef", "filename": "src/test/run-pass/issue-12684.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(old_io, std_misc)]\n-\n-use std::time::Duration;\n-use std::thread;\n-\n-fn main() {\n-    thread::spawn(move|| customtask()).join().ok().unwrap();\n-}\n-\n-fn customtask() {\n-    let mut timer = std::old_io::timer::Timer::new().unwrap();\n-    let periodic = timer.periodic(Duration::milliseconds(10));\n-    periodic.recv();\n-}"}, {"sha": "1e9f30bb766b206f5a99d3ffcead2f5378ed0615", "filename": "src/test/run-pass/issue-12699.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -8,13 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(old_io, std_misc)]\n-\n-use std::old_io::timer;\n-use std::time::Duration;\n+use std::thread;\n \n fn main() {\n-    timer::sleep(Duration::milliseconds(250));\n+    thread::sleep_ms(250);\n }"}, {"sha": "566836784696d813d7ae35b631bc7aeb5f32fc63", "filename": "src/test/run-pass/issue-14901.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-14901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14901.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -8,11 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(old_io)]\n-\n-use std::old_io::Reader;\n+pub trait Reader {}\n \n enum Wrapper<'a> {\n     WrapReader(&'a (Reader + 'a))"}, {"sha": "500235b74f68435b484b945db8b1d5dffa0685bc", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,14 +10,15 @@\n \n // no-prefer-dynamic\n \n+#![feature(rustc_private)]\n \n-#![feature(fs, process, env, path, rand)]\n+extern crate rustc_back;\n \n use std::env;\n use std::fs;\n use std::process;\n-use std::rand::random;\n use std::str;\n+use rustc_back::tempdir::TempDir;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly\n@@ -27,7 +28,8 @@ fn main() {\n         // checking that it ends_with the executable name. This\n         // is needed because of Windows, which has a different behavior.\n         // See #15149 for more info.\n-        return assert!(args[0].ends_with(&format!(\"mytest{}\", env::consts::EXE_SUFFIX)));\n+        return assert!(args[0].ends_with(&format!(\"mytest{}\",\n+                                                  env::consts::EXE_SUFFIX)));\n     }\n \n     test();\n@@ -38,9 +40,8 @@ fn test() {\n     let my_path = env::current_exe().unwrap();\n     let my_dir  = my_path.parent().unwrap();\n \n-    let random_u32: u32 = random();\n-    let child_dir = my_dir.join(&format!(\"issue-15149-child-{}\", random_u32));\n-    fs::create_dir(&child_dir).unwrap();\n+    let child_dir = TempDir::new_in(&my_dir, \"issue-15140-child\").unwrap();\n+    let child_dir = child_dir.path();\n \n     let child_path = child_dir.join(&format!(\"mytest{}\",\n                                              env::consts::EXE_SUFFIX));"}, {"sha": "a256e619216862d5e9205ef0c7432fae46f5f4c7", "filename": "src/test/run-pass/issue-18619.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Fissue-18619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18619.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(old_io)]\n-\n-use std::old_io::FileType;\n-\n-pub fn main() {\n-    let _ = FileType::RegularFile.clone();\n-}"}, {"sha": "2c45d664d894e402450d19da32f7d476b8c97fe6", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -11,10 +11,8 @@\n \n // Map representation\n \n-#![feature(old_io)]\n-\n-use std::old_io;\n use std::fmt;\n+use std::io::prelude::*;\n use square::{bot, wall, rock, lambda, closed_lift, open_lift, earth, empty};\n \n enum square {\n@@ -60,9 +58,9 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + old_io::Reader>(mut input: rdr)\n+fn read_board_grid<rdr:'static + Read>(mut input: rdr)\n                    -> Vec<Vec<square>> {\n-    let mut input: &mut old_io::Reader = &mut input;\n+    let mut input: &mut Read = &mut input;\n     let mut grid = Vec::new();\n     let mut line = [0; 10];\n     input.read(&mut line);"}, {"sha": "74e58f31e23e245ce43af6a84f7dc458f8f9b534", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,24 +10,17 @@\n \n // rustc --test ignores2.rs && ./ignores2\n \n-#![allow(unknown_features)]\n-#![feature(unboxed_closures, old_path, std_misc)]\n+pub struct Path;\n \n-use std::old_path::Path;\n-use std::old_path;\n-use std::result;\n-use std::thunk::Thunk;\n-\n-type rsrc_loader = Box<FnMut(&Path) -> (result::Result<String, String>) + 'static>;\n+type rsrc_loader = Box<FnMut(&Path) -> Result<String, String>>;\n \n fn tester()\n {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let mut loader: rsrc_loader = Box::new(move|_path| {\n-        result::Result::Ok(\"more blah\".to_string())\n+    let mut loader: rsrc_loader = Box::new(move |_path| {\n+        Ok(\"more blah\".to_string())\n     });\n \n-    let path = old_path::Path::new(\"blah\");\n+    let path = Path;\n     assert!(loader(&path).is_ok());\n }\n "}, {"sha": "4660f21cdb2e97a00877fd4b293c62e2ccee713c", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,9 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_io)]\n-\n-use std::old_io::println;\n use std::sync::mpsc::channel;\n use std::thread;\n \n@@ -22,6 +19,6 @@ pub fn main() {\n     tx.send(\"hello, world\").unwrap();\n \n     thread::spawn(move|| {\n-        println(rx.recv().unwrap());\n+        println!(\"{}\", rx.recv().unwrap());\n     }).join().ok().unwrap();\n }"}, {"sha": "2cf0089c6bb65df7f1bd58748b4c44c5e4aa968e", "filename": "src/test/run-pass/issue-5988.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-5988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5988.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,9 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_io)]\n-\n-use std::old_io;\n trait B {\n     fn f(&self);\n }\n@@ -23,7 +20,7 @@ trait T : B {\n struct A;\n \n impl<U: T> B for U {\n-    fn f(&self) { old_io::println(\"Hey, I'm a T!\"); }\n+    fn f(&self) { }\n }\n \n impl T for A {"}, {"sha": "5c2c03f9857f3809d54458d7e33ccb8436767a94", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,11 +10,11 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_io, io)]\n-\n-use std::old_io;\n+pub trait Writer {\n+    fn write(&mut self, b: &[u8]) -> Result<(), ()>;\n+}\n \n-fn foo(a: &mut old_io::Writer) {\n+fn foo(a: &mut Writer) {\n     a.write(&[]).unwrap();\n }\n "}, {"sha": "34b2911cf86846d1f3689ea5f1c07a9f10968774", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,18 +10,13 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(old_io, std_misc)]\n-\n use std::sync::mpsc::{TryRecvError, channel};\n-use std::old_io::timer::Timer;\n use std::thread;\n-use std::time::Duration;\n \n pub fn main() {\n     let (tx, rx) = channel();\n     let _t = thread::scoped(move||{\n-        let mut timer = Timer::new().unwrap();\n-        timer.sleep(Duration::milliseconds(10));\n+        thread::sleep_ms(10);\n         tx.send(()).unwrap();\n     });\n     loop {"}, {"sha": "29cfe91eba5acce01f17ec2cea8e0ecdd1605b64", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -17,7 +17,7 @@\n #[macro_use]\n extern crate log;\n \n-use std::old_io::Command;\n+use std::process::Command;\n use std::env;\n use std::str;\n \n@@ -31,9 +31,9 @@ fn main() {\n \n     let p = Command::new(&args[0])\n                     .arg(\"child\")\n-                    .spawn().unwrap().wait_with_output().unwrap();\n+                    .output().unwrap();\n     assert!(p.status.success());\n-    let mut lines = str::from_utf8(&p.error).unwrap().lines();\n+    let mut lines = str::from_utf8(&p.stderr).unwrap().lines();\n     assert!(lines.next().unwrap().contains(\"foo\"));\n     assert!(lines.next().unwrap().contains(\"bar\"));\n }"}, {"sha": "1611a2c07227a97a3d5db5f1ac9fd8fde36678a2", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -17,7 +17,8 @@\n \n use std::mem;\n use std::slice;\n-use std::old_io::IoResult;\n+\n+pub type IoResult<T> = Result<T, ()>;\n \n trait MyWriter {\n     fn my_write(&mut self, buf: &[u8]) -> IoResult<()>;"}, {"sha": "d321d9142ca6eafd6fc641d09b9fb6b690c47ea2", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -14,9 +14,9 @@\n //ignore-dragonfly\n //ignore-bitrig\n \n-#![feature(asm, old_io, std_misc)]\n+#![feature(asm)]\n \n-use std::old_io::process::Command;\n+use std::process::Command;\n use std::env;\n use std::thread;\n \n@@ -41,7 +41,7 @@ fn main() {\n     } else {\n         let recurse = Command::new(&args[0]).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());\n-        let error = String::from_utf8_lossy(&recurse.error);\n+        let error = String::from_utf8_lossy(&recurse.stderr);\n         println!(\"wut\");\n         println!(\"`{}`\", error);\n         assert!(error.contains(\"has overflowed its stack\"));"}, {"sha": "da7342d251e6e3e550caca73f4c77ed166cbfc90", "filename": "src/test/run-pass/out-of-stack-no-split.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//ignore-android\n-//ignore-linux\n-//ignore-freebsd\n-//ignore-ios\n-//ignore-dragonfly\n-//ignore-bitrig\n+// ignore-android\n+// ignore-linux\n+// ignore-freebsd\n+// ignore-ios\n+// ignore-dragonfly\n+// ignore-bitrig\n \n-#![feature(asm, old_io)]\n+#![feature(asm)]\n \n-use std::old_io::process::Command;\n+use std::process::Command;\n use std::env;\n \n // lifted from the test module\n@@ -41,7 +41,7 @@ fn main() {\n     } else {\n         let recurse = Command::new(&args[0]).arg(\"recurse\").output().unwrap();\n         assert!(!recurse.status.success());\n-        let error = String::from_utf8_lossy(&recurse.error);\n+        let error = String::from_utf8_lossy(&recurse.stderr);\n         assert!(error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "d90b88cbfd57348b263f85b77cb4b0cc24c50859", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,9 +10,9 @@\n \n // ignore-android: FIXME (#20004)\n \n-#![feature(asm, old_io)]\n+#![feature(asm)]\n \n-use std::old_io::process::Command;\n+use std::process::Command;\n use std::env;\n \n // lifted from the test module\n@@ -42,12 +42,12 @@ fn main() {\n     } else {\n         let silent = Command::new(&args[0]).arg(\"silent\").output().unwrap();\n         assert!(!silent.status.success());\n-        let error = String::from_utf8_lossy(&silent.error);\n+        let error = String::from_utf8_lossy(&silent.stderr);\n         assert!(error.contains(\"has overflowed its stack\"));\n \n         let loud = Command::new(&args[0]).arg(\"loud\").output().unwrap();\n         assert!(!loud.status.success());\n-        let error = String::from_utf8_lossy(&silent.error);\n+        let error = String::from_utf8_lossy(&silent.stderr);\n         assert!(error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "3096fe4a266c996e2551e2c994a8cccc16b5015a", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(old_io)]\n-\n-use std::old_io::Command;\n+use std::process::Command;\n use std::env;\n \n #[cfg(all(unix, not(target_os=\"android\")))]\n@@ -49,7 +47,7 @@ fn main() {\n \n     let prog = cmd.spawn().unwrap();\n     let result = prog.wait_with_output().unwrap();\n-    let output = String::from_utf8_lossy(&result.output);\n+    let output = String::from_utf8_lossy(&result.stdout);\n \n     assert!(!output.contains(\"RUN_TEST_NEW_ENV\"),\n             \"found RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);"}, {"sha": "31d97305e0be49e7b6a37c2a89702b229c1e612d", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -11,7 +11,7 @@\n #![feature(start, os, std_misc, old_io)]\n \n use std::ffi::CStr;\n-use std::old_io::process::{Command, ProcessOutput};\n+use std::process::{Command, Output};\n use std::os;\n use std::rt::unwind::try;\n use std::rt;\n@@ -23,12 +23,12 @@ use std::thunk::Thunk;\n fn start(argc: isize, argv: *const *const u8) -> isize {\n     if argc > 1 {\n         unsafe {\n-            match **argv.offset(1) {\n-                1 => {}\n-                2 => println!(\"foo\"),\n-                3 => assert!(try(|| {}).is_ok()),\n-                4 => assert!(try(|| panic!()).is_err()),\n-                5 => assert!(Command::new(\"test\").spawn().is_err()),\n+            match **argv.offset(1) as char {\n+                '1' => {}\n+                '2' => println!(\"foo\"),\n+                '3' => assert!(try(|| {}).is_ok()),\n+                '4' => assert!(try(|| panic!()).is_err()),\n+                '5' => assert!(Command::new(\"test\").spawn().is_err()),\n                 _ => panic!()\n             }\n         }\n@@ -41,25 +41,20 @@ fn start(argc: isize, argv: *const *const u8) -> isize {\n             CStr::from_ptr(ptr).to_bytes().to_vec()\n         }).collect::<Vec<_>>()\n     };\n-    let me = &*args[0];\n+    let me = String::from_utf8(args[0].to_vec()).unwrap();\n \n-    let x: &[u8] = &[1];\n-    pass(Command::new(me).arg(x).output().unwrap());\n-    let x: &[u8] = &[2];\n-    pass(Command::new(me).arg(x).output().unwrap());\n-    let x: &[u8] = &[3];\n-    pass(Command::new(me).arg(x).output().unwrap());\n-    let x: &[u8] = &[4];\n-    pass(Command::new(me).arg(x).output().unwrap());\n-    let x: &[u8] = &[5];\n-    pass(Command::new(me).arg(x).output().unwrap());\n+    pass(Command::new(&me).arg(\"1\").output().unwrap());\n+    pass(Command::new(&me).arg(\"2\").output().unwrap());\n+    pass(Command::new(&me).arg(\"3\").output().unwrap());\n+    pass(Command::new(&me).arg(\"4\").output().unwrap());\n+    pass(Command::new(&me).arg(\"5\").output().unwrap());\n \n     0\n }\n \n-fn pass(output: ProcessOutput) {\n+fn pass(output: Output) {\n     if !output.status.success() {\n-        println!(\"{:?}\", str::from_utf8(&output.output));\n-        println!(\"{:?}\", str::from_utf8(&output.error));\n+        println!(\"{:?}\", str::from_utf8(&output.stdout));\n+        println!(\"{:?}\", str::from_utf8(&output.stderr));\n     }\n }"}, {"sha": "dd33c330cfd36b652466ad7cd196f9f34f50b1cf", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(old_io)]\n-\n-use std::old_io::process::Command;\n+use std::process::Command;\n use std::env;\n \n fn main() {\n@@ -21,7 +19,7 @@ fn main() {\n     } else {\n         let segfault = Command::new(&args[0]).arg(\"segfault\").output().unwrap();\n         assert!(!segfault.status.success());\n-        let error = String::from_utf8_lossy(&segfault.error);\n+        let error = String::from_utf8_lossy(&segfault.stderr);\n         assert!(!error.contains(\"has overflowed its stack\"));\n     }\n }"}, {"sha": "51b369092f0f4e7a2cb42703c1f22c7ef71a835c", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -10,11 +10,8 @@\n \n // ignore-windows\n \n-#![feature(old_io)]\n-#![feature(os)]\n-\n use std::env;\n-use std::old_io::process::{Command, ExitSignal, ExitStatus};\n+use std::process::Command;\n \n pub fn main() {\n     let args: Vec<String> = env::args().collect();\n@@ -23,11 +20,6 @@ pub fn main() {\n         unsafe { *(0 as *mut isize) = 0; }\n     } else {\n         let status = Command::new(&args[0]).arg(\"signal\").status().unwrap();\n-        // Windows does not have signal, so we get exit status 0xC0000028 (STATUS_BAD_STACK).\n-        match status {\n-            ExitSignal(_) if cfg!(unix) => {},\n-            ExitStatus(0xC0000028) if cfg!(windows) => {},\n-            _ => panic!(\"invalid termination (was not signalled): {}\", status)\n-        }\n+        assert!(status.code().is_none());\n     }\n }"}, {"sha": "00467e563347a32174c7cb5a693448d75a7b68dc", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,88 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-macos osx really doesn't like cycling through large numbers of\n-//              sockets as calls to connect() will start returning EADDRNOTAVAIL\n-//              quite quickly and it takes a few seconds for the sockets to get\n-//              recycled.\n-\n-#![feature(old_io, io, std_misc)]\n-\n-use std::old_io::{TcpListener, Listener, Acceptor, EndOfFile, TcpStream};\n-use std::sync::Arc;\n-use std::sync::atomic::{AtomicUsize, Ordering};\n-use std::sync::mpsc::channel;\n-use std::thread;\n-\n-static N: usize = 8;\n-static M: usize = 20;\n-\n-fn main() {\n-    test();\n-}\n-\n-fn test() {\n-    let mut l = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n-    let addr = l.socket_name().unwrap();\n-    let mut a = l.listen().unwrap();\n-    let cnt = Arc::new(AtomicUsize::new(0));\n-\n-    let (srv_tx, srv_rx) = channel();\n-    let (cli_tx, cli_rx) = channel();\n-    let _t = (0..N).map(|_| {\n-        let a = a.clone();\n-        let cnt = cnt.clone();\n-        let srv_tx = srv_tx.clone();\n-        thread::scoped(move|| {\n-            let mut a = a;\n-            loop {\n-                match a.accept() {\n-                    Ok(..) => {\n-                        if cnt.fetch_add(1, Ordering::SeqCst) == N * M - 1 {\n-                            break\n-                        }\n-                    }\n-                    Err(ref e) if e.kind == EndOfFile => break,\n-                    Err(e) => panic!(\"{}\", e),\n-                }\n-            }\n-            srv_tx.send(());\n-        })\n-    }).collect::<Vec<_>>();\n-\n-    let _t = (0..N).map(|_| {\n-        let cli_tx = cli_tx.clone();\n-        thread::scoped(move|| {\n-            for _ in 0..M {\n-                let _s = TcpStream::connect(addr).unwrap();\n-            }\n-            cli_tx.send(());\n-        })\n-    }).collect::<Vec<_>>();\n-    drop((cli_tx, srv_tx));\n-\n-    // wait for senders\n-    if cli_rx.iter().take(N).count() != N {\n-        a.close_accept().unwrap();\n-        panic!(\"clients panicked\");\n-    }\n-\n-    // wait for one acceptor to die\n-    let _ = srv_rx.recv();\n-\n-    // Notify other receivers should die\n-    a.close_accept().unwrap();\n-\n-    // wait for receivers\n-    assert_eq!(srv_rx.iter().take(N - 1).count(), N - 1);\n-\n-    // Everything should have been accepted.\n-    assert_eq!(cnt.load(Ordering::SeqCst), N * M);\n-}"}, {"sha": "64f07a60b3503858390cadc58b92687422f0c8d9", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,76 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty\n-// compile-flags:--test\n-// exec-env:RUST_TEST_THREADS=1\n-\n-// Tests for the connect_timeout() function on a TcpStream. This runs with only\n-// one test task to ensure that errors are timeouts, not file descriptor\n-// exhaustion.\n-\n-#![reexport_test_harness_main = \"test_main\"]\n-\n-#![allow(unused_imports)]\n-#![feature(old_io, std_misc, io)]\n-\n-use std::old_io::*;\n-use std::old_io::test::*;\n-use std::old_io;\n-use std::time::Duration;\n-use std::sync::mpsc::channel;\n-use std::thread;\n-\n-#[cfg_attr(target_os = \"freebsd\", ignore)]\n-fn eventual_timeout() {\n-    let addr = next_test_ip4();\n-\n-    let (tx1, rx1) = channel();\n-    let (_tx2, rx2) = channel::<()>();\n-    let _t = thread::scoped(move|| {\n-        let _l = TcpListener::bind(addr).unwrap().listen();\n-        tx1.send(()).unwrap();\n-        let _ = rx2.recv();\n-    });\n-    rx1.recv().unwrap();\n-\n-    let mut v = Vec::new();\n-    for _ in 0_usize..10000 {\n-        match TcpStream::connect_timeout(addr, Duration::milliseconds(100)) {\n-            Ok(e) => v.push(e),\n-            Err(ref e) if e.kind == old_io::TimedOut => return,\n-            Err(e) => panic!(\"other error: {}\", e),\n-        }\n-    }\n-    panic!(\"never timed out!\");\n-}\n-\n-fn timeout_success() {\n-    let addr = next_test_ip4();\n-    let _l = TcpListener::bind(addr).unwrap().listen();\n-\n-    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_ok());\n-}\n-\n-fn timeout_error() {\n-    let addr = next_test_ip4();\n-\n-    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_err());\n-}\n-\n-fn connect_timeout_zero() {\n-    let addr = next_test_ip4();\n-    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(0)).is_err());\n-}\n-\n-fn connect_timeout_negative() {\n-    let addr = next_test_ip4();\n-    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(-1)).is_err());\n-}"}, {"sha": "49fac24d0b3a5b7e921233856ad3dff79776f99a", "filename": "src/test/run-pass/tempfile.rs", "status": "removed", "additions": 0, "deletions": 213, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a89ed3effb37c86ca686adbb447275f3562a09/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=84a89ed3effb37c86ca686adbb447275f3562a09", "patch": "@@ -1,213 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-windows TempDir may cause IoError on windows: #10463\n-\n-// These tests are here to exercise the functionality of the `tempfile` module.\n-// One might expect these tests to be located in that module, but sadly they\n-// cannot. The tests need to invoke `os::change_dir` which cannot be done in the\n-// normal test infrastructure. If the tests change the current working\n-// directory, then *all* tests which require relative paths suddenly break b/c\n-// they're in a different location than before. Hence, these tests are all run\n-// serially here.\n-\n-#![feature(old_io, old_path, os, old_fs)]\n-\n-use std::old_path::{Path, GenericPath};\n-use std::old_io::fs::PathExtensions;\n-use std::old_io::{fs, TempDir};\n-use std::old_io;\n-use std::env;\n-use std::sync::mpsc::channel;\n-use std::thread;\n-\n-fn test_tempdir() {\n-    let path = {\n-        let p = TempDir::new_in(&Path::new(\".\"), \"foobar\").unwrap();\n-        let p = p.path();\n-        assert!(p.as_str().unwrap().contains(\"foobar\"));\n-        p.clone()\n-    };\n-    assert!(!path.exists());\n-}\n-\n-fn test_rm_tempdir() {\n-    let (tx, rx) = channel();\n-    let f = move|| -> () {\n-        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-        tx.send(tmp.path().clone()).unwrap();\n-        panic!(\"panic to unwind past `tmp`\");\n-    };\n-    thread::spawn(f).join();\n-    let path = rx.recv().unwrap();\n-    assert!(!path.exists());\n-\n-    let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-    let path = tmp.path().clone();\n-    let f = move|| -> () {\n-        let _tmp = tmp;\n-        panic!(\"panic to unwind past `tmp`\");\n-    };\n-    thread::spawn(f).join();\n-    assert!(!path.exists());\n-\n-    let path;\n-    {\n-        let f = move || {\n-            TempDir::new(\"test_rm_tempdir\").unwrap()\n-        };\n-        // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = thread::scoped(f).join();\n-        path = tmp.path().clone();\n-        assert!(path.exists());\n-    }\n-    assert!(!path.exists());\n-\n-    let path;\n-    {\n-        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-        path = tmp.into_inner();\n-    }\n-    assert!(path.exists());\n-    fs::rmdir_recursive(&path);\n-    assert!(!path.exists());\n-}\n-\n-fn test_rm_tempdir_close() {\n-    let (tx, rx) = channel();\n-    let f = move|| -> () {\n-        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-        tx.send(tmp.path().clone()).unwrap();\n-        tmp.close();\n-        panic!(\"panic when unwinding past `tmp`\");\n-    };\n-    thread::spawn(f).join();\n-    let path = rx.recv().unwrap();\n-    assert!(!path.exists());\n-\n-    let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-    let path = tmp.path().clone();\n-    let f = move|| -> () {\n-        let tmp = tmp;\n-        tmp.close();\n-        panic!(\"panic when unwinding past `tmp`\");\n-    };\n-    thread::spawn(f).join();\n-    assert!(!path.exists());\n-\n-    let path;\n-    {\n-        let f = move || {\n-            TempDir::new(\"test_rm_tempdir\").unwrap()\n-        };\n-        // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n-        let tmp: TempDir = thread::scoped(f).join();\n-        path = tmp.path().clone();\n-        assert!(path.exists());\n-        tmp.close();\n-    }\n-    assert!(!path.exists());\n-\n-    let path;\n-    {\n-        let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n-        path = tmp.into_inner();\n-    }\n-    assert!(path.exists());\n-    fs::rmdir_recursive(&path);\n-    assert!(!path.exists());\n-}\n-\n-// Ideally these would be in std::os but then core would need\n-// to depend on std\n-fn recursive_mkdir_rel() {\n-    let path = Path::new(\"frob\");\n-    let cwd = Path::new(env::current_dir().unwrap().to_str().unwrap());\n-    println!(\"recursive_mkdir_rel: Making: {} in cwd {} [{}]\", path.display(),\n-           cwd.display(), path.exists());\n-    fs::mkdir_recursive(&path, old_io::USER_RWX);\n-    assert!(path.is_dir());\n-    fs::mkdir_recursive(&path, old_io::USER_RWX);\n-    assert!(path.is_dir());\n-}\n-\n-fn recursive_mkdir_dot() {\n-    let dot = Path::new(\".\");\n-    fs::mkdir_recursive(&dot, old_io::USER_RWX);\n-    let dotdot = Path::new(\"..\");\n-    fs::mkdir_recursive(&dotdot, old_io::USER_RWX);\n-}\n-\n-fn recursive_mkdir_rel_2() {\n-    let path = Path::new(\"./frob/baz\");\n-    let cwd = Path::new(env::current_dir().unwrap().to_str().unwrap());\n-    println!(\"recursive_mkdir_rel_2: Making: {} in cwd {} [{}]\", path.display(),\n-           cwd.display(), path.exists());\n-    fs::mkdir_recursive(&path, old_io::USER_RWX);\n-    assert!(path.is_dir());\n-    assert!(path.dir_path().is_dir());\n-    let path2 = Path::new(\"quux/blat\");\n-    println!(\"recursive_mkdir_rel_2: Making: {} in cwd {}\", path2.display(),\n-           cwd.display());\n-    fs::mkdir_recursive(&path2, old_io::USER_RWX);\n-    assert!(path2.is_dir());\n-    assert!(path2.dir_path().is_dir());\n-}\n-\n-// Ideally this would be in core, but needs TempFile\n-pub fn test_rmdir_recursive_ok() {\n-    let rwx = old_io::USER_RWX;\n-\n-    let tmpdir = TempDir::new(\"test\").ok().expect(\"test_rmdir_recursive_ok: \\\n-                                                   couldn't create temp dir\");\n-    let tmpdir = tmpdir.path();\n-    let root = tmpdir.join(\"foo\");\n-\n-    println!(\"making {}\", root.display());\n-    fs::mkdir(&root, rwx);\n-    fs::mkdir(&root.join(\"foo\"), rwx);\n-    fs::mkdir(&root.join(\"foo\").join(\"bar\"), rwx);\n-    fs::mkdir(&root.join(\"foo\").join(\"bar\").join(\"blat\"), rwx);\n-    fs::rmdir_recursive(&root);\n-    assert!(!root.exists());\n-    assert!(!root.join(\"bar\").exists());\n-    assert!(!root.join(\"bar\").join(\"blat\").exists());\n-}\n-\n-pub fn dont_double_panic() {\n-    let r: Result<(), _> = thread::spawn(move|| {\n-        let tmpdir = TempDir::new(\"test\").unwrap();\n-        // Remove the temporary directory so that TempDir sees\n-        // an error on drop\n-        fs::rmdir(tmpdir.path());\n-        // Panic. If TempDir panics *again* due to the rmdir\n-        // error then the process will abort.\n-        panic!();\n-    }).join();\n-    assert!(r.is_err());\n-}\n-\n-fn in_tmpdir<F>(f: F) where F: FnOnce() {\n-    let tmpdir = TempDir::new(\"test\").ok().expect(\"can't make tmpdir\");\n-    assert!(env::set_current_dir(tmpdir.path().as_str().unwrap()).is_ok());\n-\n-    f();\n-}\n-\n-pub fn main() {\n-    in_tmpdir(test_tempdir);\n-    in_tmpdir(test_rm_tempdir);\n-    in_tmpdir(test_rm_tempdir_close);\n-    in_tmpdir(recursive_mkdir_rel);\n-    in_tmpdir(recursive_mkdir_dot);\n-    in_tmpdir(recursive_mkdir_rel_2);\n-    in_tmpdir(test_rmdir_recursive_ok);\n-    in_tmpdir(dont_double_panic);\n-}"}, {"sha": "eec852ae181c4623daece1c63fd81e21ad0dead4", "filename": "src/test/run-pass/ufcs-polymorphic-paths.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -17,19 +17,27 @@ use std::default::Default;\n use std::iter::FromIterator;\n use std::ops::Add;\n use std::option::IntoIter as OptionIter;\n-use std::rand::Rand;\n-use std::rand::XorShiftRng as DummyRng;\n-// FIXME the glob std::prelude::*; import of Vec is missing non-static inherent methods.\n+// FIXME the glob std::prelude::*; import of Vec is missing non-static inherent\n+// methods.\n use std::vec::Vec;\n \n+pub struct XorShiftRng;\n+use XorShiftRng as DummyRng;\n+impl Rng for XorShiftRng {}\n+pub trait Rng {}\n+pub trait Rand: Default + Sized {\n+    fn rand<R: Rng>(rng: &mut R) -> Self { Default::default() }\n+}\n+impl Rand for i32 { }\n+\n #[derive(PartialEq, Eq)]\n struct Newt<T>(T);\n \n fn id<T>(x: T) -> T { x }\n fn eq<T: Eq>(a: T, b: T) -> bool { a == b }\n fn u8_as_i8(x: u8) -> i8 { x as i8 }\n fn odd(x: usize) -> bool { x % 2 == 1 }\n-fn dummy_rng() -> DummyRng { DummyRng::new_unseeded() }\n+fn dummy_rng() -> DummyRng { XorShiftRng }\n \n trait Size: Sized {\n     fn size() -> usize { std::mem::size_of::<Self>() }"}, {"sha": "a51274199b6200069ff6816e81f2de39f8eea81a", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -12,7 +12,7 @@\n #![feature(rand, core)]\n \n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n-use std::rand::{thread_rng, Rng, Rand};\n+use std::__rand::{thread_rng, Rng};\n use std::thread;\n \n const REPEATS: usize = 5;\n@@ -36,18 +36,7 @@ static drop_counts: [AtomicUsize;  MAX_LEN] =\n static creation_count: AtomicUsize = ATOMIC_USIZE_INIT;\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord)]\n-struct DropCounter { x: usize, creation_id: usize }\n-\n-impl Rand for DropCounter {\n-    fn rand<R: Rng>(rng: &mut R) -> DropCounter {\n-        // (we're not using this concurrently, so Relaxed is fine.)\n-        let num = creation_count.fetch_add(1, Ordering::Relaxed);\n-        DropCounter {\n-            x: rng.gen(),\n-            creation_id: num\n-        }\n-    }\n-}\n+struct DropCounter { x: u32, creation_id: usize }\n \n impl Drop for DropCounter {\n     fn drop(&mut self) {\n@@ -64,9 +53,13 @@ pub fn main() {\n             // IDs start from 0.\n             creation_count.store(0, Ordering::Relaxed);\n \n-            let main = thread_rng().gen_iter::<DropCounter>()\n-                                 .take(len)\n-                                 .collect::<Vec<DropCounter>>();\n+            let mut rng = thread_rng();\n+            let main = (0..len).map(|_| {\n+                DropCounter {\n+                    x: rng.next_u32(),\n+                    creation_id: creation_count.fetch_add(1, Ordering::Relaxed),\n+                }\n+            }).collect::<Vec<_>>();\n \n             // work out the total number of comparisons required to sort\n             // this array..."}, {"sha": "1d0004bafa3560a340eb77a9be518014c77978b3", "filename": "src/test/run-pass/wait-forked-but-failed-child.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcd67272e6ebcca65028fe1c8bf20390e827e07/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwait-forked-but-failed-child.rs?ref=adcd67272e6ebcca65028fe1c8bf20390e827e07", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n \n-#![feature(libc, old_io)]\n+#![feature(libc)]\n \n extern crate libc;\n \n-use std::old_io::process::Command;\n+use std::process::Command;\n \n use libc::funcs::posix88::unistd;\n \n@@ -38,7 +38,7 @@ fn find_zombies() {\n \n     // http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ps.html\n     let ps_cmd_output = Command::new(\"ps\").args(&[\"-A\", \"-o\", \"pid,ppid,args\"]).output().unwrap();\n-    let ps_output = String::from_utf8_lossy(&ps_cmd_output.output);\n+    let ps_output = String::from_utf8_lossy(&ps_cmd_output.stdout);\n \n     for (line_no, line) in ps_output.split('\\n').enumerate() {\n         if 0 < line_no && 0 < line.len() &&\n@@ -59,7 +59,7 @@ fn main() {\n     let too_long = format!(\"/NoSuchCommand{:0300}\", 0u8);\n \n     let _failures = (0..100).map(|_| {\n-        let cmd = Command::new(&too_long);\n+        let mut cmd = Command::new(&too_long);\n         let failed = cmd.spawn();\n         assert!(failed.is_err(), \"Make sure the command fails to spawn(): {:?}\", cmd);\n         failed"}]}