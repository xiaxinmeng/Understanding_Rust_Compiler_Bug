{"sha": "c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "node_id": "C_kwDOAAsO6NoAKGMzOGRhMmUwYTMyMjkwOGJhNGIxZDRiN2U1OWM1ZGEwNTMxYWY0ZTE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-06T17:33:23Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-25T00:08:41Z"}, "message": "Introduce `Rvalue::ShallowInitBox`", "tree": {"sha": "cd26f185c4302d0389f8703ea0d2b76cfa1ac4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd26f185c4302d0389f8703ea0d2b76cfa1ac4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "html_url": "https://github.com/rust-lang/rust/commit/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "url": "https://api.github.com/repos/rust-lang/rust/commits/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d", "html_url": "https://github.com/rust-lang/rust/commit/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "efd34f4e0a58e38b6098f47333c0a22165ce2599", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -316,7 +316,8 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)\n-            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/) => {\n+            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/)\n+            | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, operand)\n             }\n "}, {"sha": "72f4907a09f9849e4cf86f3ab54afd8b901629f7", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -1361,7 +1361,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)\n-            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/) => {\n+            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/)\n+            | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, (operand, span), flow_state)\n             }\n "}, {"sha": "881070a1e551907b41128df79885b113a46a9680", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -2018,13 +2018,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n \n-            Rvalue::NullaryOp(_, ty) => {\n-                // Even with unsized locals cannot box an unsized value.\n-                if self.unsized_feature_enabled() {\n-                    let span = body.source_info(location).span;\n-                    self.ensure_place_sized(ty, span);\n-                }\n-\n+            Rvalue::NullaryOp(_, ty) | Rvalue::ShallowInitBox(_, ty) => {\n                 let trait_ref = ty::TraitRef {\n                     def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n@@ -2357,6 +2351,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::BinaryOp(..)\n             | Rvalue::CheckedBinaryOp(..)\n             | Rvalue::NullaryOp(..)"}, {"sha": "1b30edd293862b1d221cbfb4529c1b9f8883a52e", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -701,6 +701,13 @@ fn codegen_stmt<'tcx>(\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n+                Rvalue::ShallowInitBox(ref operand, content_ty) => {\n+                    let content_ty = fx.monomorphize(content_ty);\n+                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n+                    let operand = codegen_operand(fx, operand);\n+                    let operand = operand.load_scalar(fx);\n+                    lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n+                }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let content_ty = fx.monomorphize(content_ty);"}, {"sha": "f087b9f7815da73a1b3bb79661b149a34124f000", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -550,6 +550,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     OperandRef::new_zst(&mut bx, self.cx.layout_of(self.monomorphize(ty)));\n                 (bx, operand)\n             }\n+            mir::Rvalue::ShallowInitBox(ref operand, content_ty) => {\n+                let operand = self.codegen_operand(&mut bx, operand);\n+                let lloperand = operand.immediate();\n+\n+                let content_ty = self.monomorphize(content_ty);\n+                let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n+                let llty_ptr = bx.cx().backend_type(box_layout);\n+\n+                let val = bx.pointercast(lloperand, llty_ptr);\n+                let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n+                (bx, operand)\n+            }\n         }\n     }\n \n@@ -763,6 +775,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::AddressOf(..) |\n             mir::Rvalue::Len(..) |\n             mir::Rvalue::Cast(..) | // (*)\n+            mir::Rvalue::ShallowInitBox(..) | // (*)\n             mir::Rvalue::BinaryOp(..) |\n             mir::Rvalue::CheckedBinaryOp(..) |\n             mir::Rvalue::UnaryOp(..) |"}, {"sha": "bcce19b28db97444e189f25833a497dd45d9ae96", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -289,6 +289,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }\n \n+            ShallowInitBox(ref operand, _) => {\n+                let src = self.eval_operand(operand, None)?;\n+                let v = self.read_immediate(&src)?;\n+                self.write_immediate(*v, &dest)?;\n+            }\n+\n             Cast(cast_kind, ref operand, cast_ty) => {\n                 let src = self.eval_operand(operand, None)?;\n                 let cast_ty = self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty);"}, {"sha": "8b28c8fa219d998649ed37b144472a5c750ba727", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -650,6 +650,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n+            Rvalue::ShallowInitBox(_, _) => {}\n \n             Rvalue::UnaryOp(_, ref operand) => {\n                 let ty = operand.ty(self.body, self.tcx);"}, {"sha": "5eb7d7a91cc76d5aeec900c92f91fae4e038c6f6", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -206,7 +206,8 @@ where\n         Rvalue::Use(operand)\n         | Rvalue::Repeat(operand, _)\n         | Rvalue::UnaryOp(_, operand)\n-        | Rvalue::Cast(_, operand, _) => in_operand::<Q, _>(cx, in_local, operand),\n+        | Rvalue::Cast(_, operand, _)\n+        | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),\n \n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)"}, {"sha": "9408dfa956b40c2d799f765514fbcbf4050fd19d", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -523,6 +523,8 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 NullOp::AlignOf => {}\n             },\n \n+            Rvalue::ShallowInitBox(_, _) => return Err(Unpromotable),\n+\n             Rvalue::UnaryOp(op, operand) => {\n                 match op {\n                     // These operations can never fail."}, {"sha": "2a36c01d221e1cda6d822aa27eec160ef1074d48", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -2200,6 +2200,12 @@ pub enum Rvalue<'tcx> {\n     /// that `Foo` has a destructor. These rvalues can be optimized\n     /// away after type-checking and before lowering.\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n+\n+    /// Transmutes a `*mut u8` into shallow-initialized `Box<T>`.\n+    ///\n+    /// This is different a normal transmute because dataflow analysis will treat the box\n+    /// as initialized but its content as uninitialized.\n+    ShallowInitBox(Operand<'tcx>, Ty<'tcx>),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n@@ -2450,6 +2456,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     }),\n                 }\n             }\n+\n+            ShallowInitBox(ref place, ref ty) => {\n+                write!(fmt, \"ShallowInitBox({:?}, {:?})\", place, ty)\n+            }\n         }\n     }\n }"}, {"sha": "c3c5ebe705effa45fd518ad35dc0e00121124515", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -206,6 +206,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     tcx.mk_generator(did, substs, movability)\n                 }\n             },\n+            Rvalue::ShallowInitBox(_, ty) => tcx.mk_box(ty),\n         }\n     }\n \n@@ -214,7 +215,9 @@ impl<'tcx> Rvalue<'tcx> {\n     /// whether its only shallowly initialized (`Rvalue::Box`).\n     pub fn initialization_state(&self) -> RvalueInitializationState {\n         match *self {\n-            Rvalue::NullaryOp(NullOp::Box, _) => RvalueInitializationState::Shallow,\n+            Rvalue::NullaryOp(NullOp::Box, _) | Rvalue::ShallowInitBox(_, _) => {\n+                RvalueInitializationState::Shallow\n+            }\n             _ => RvalueInitializationState::Deep,\n         }\n     }"}, {"sha": "b7201f7acf392dac6567e4d4ba7d6e69298b467c", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -210,6 +210,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 });\n                 Aggregate(kind, fields.fold_with(folder))\n             }\n+            ShallowInitBox(op, ty) => ShallowInitBox(op.fold_with(folder), ty.fold_with(folder)),\n         }\n     }\n \n@@ -255,6 +256,10 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 }\n                 fields.visit_with(visitor)\n             }\n+            ShallowInitBox(ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n         }\n     }\n }"}, {"sha": "a6d936ec9d1d7ed75188c4d6d07dece24e5d6539", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -753,6 +753,11 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(operand, location);\n                         }\n                     }\n+\n+                    Rvalue::ShallowInitBox(operand, ty) => {\n+                        self.visit_operand(operand, location);\n+                        self.visit_ty(ty, TyContext::Location(location));\n+                    }\n                 }\n             }\n "}, {"sha": "158ba1b942528072c7416f70fe9cb434590e83a6", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -169,6 +169,7 @@ where\n             }\n \n             mir::Rvalue::Cast(..)\n+            | mir::Rvalue::ShallowInitBox(..)\n             | mir::Rvalue::Use(..)\n             | mir::Rvalue::ThreadLocalRef(..)\n             | mir::Rvalue::Repeat(..)"}, {"sha": "e404b49ecb93173f33ca1062399967f3f6a6075b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -327,6 +327,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::Cast(_, ref operand, _)\n+            | Rvalue::ShallowInitBox(ref operand, _)\n             | Rvalue::UnaryOp(_, ref operand) => self.gather_operand(operand),\n             Rvalue::BinaryOp(ref _binop, box (ref lhs, ref rhs))\n             | Rvalue::CheckedBinaryOp(ref _binop, box (ref lhs, ref rhs)) => {"}, {"sha": "17790ec91c8a3fd17d19132ad21aba33e9255712", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -723,6 +723,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::NullaryOp(..) => {}\n         }"}, {"sha": "790d9243fbaec874db7488ff817c615d5068cb1e", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -967,6 +967,7 @@ impl<'tcx> Visitor<'tcx> for BorrowCollector {\n             }\n \n             Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::Use(..)\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)"}, {"sha": "3002e7041b0247dacd18e868907799cbe39b37fa", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -204,6 +204,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n                         | Rvalue::AddressOf(_, _)\n                         | Rvalue::Cast(_, Operand::Constant(_), _)\n                         | Rvalue::NullaryOp(_, _)\n+                        | Rvalue::ShallowInitBox(_, _)\n                         | Rvalue::UnaryOp(_, Operand::Constant(_)) => return true,\n \n                         // These rvalues make things ambiguous\n@@ -301,6 +302,7 @@ fn find_determining_place<'tcx>(\n                     | Rvalue::ThreadLocalRef(_)\n                     | Rvalue::AddressOf(_, _)\n                     | Rvalue::NullaryOp(_, _)\n+                    | Rvalue::ShallowInitBox(_, _)\n                     | Rvalue::UnaryOp(_, Operand::Constant(_))\n                     | Rvalue::Cast(_, Operand::Constant(_), _)\n                     => return None,"}, {"sha": "e2f2e2008bb2604543f1ba4814b0d92538d89fc1", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38da2e0a322908ba4b1d4b7e59c5da0531af4e1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=c38da2e0a322908ba4b1d4b7e59c5da0531af4e1", "patch": "@@ -194,6 +194,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n+        Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}]}