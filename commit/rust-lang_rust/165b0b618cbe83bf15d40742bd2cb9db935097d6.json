{"sha": "165b0b618cbe83bf15d40742bd2cb9db935097d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NWIwYjYxOGNiZTgzYmYxNWQ0MDc0MmJkMmNiOWRiOTM1MDk3ZDY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-15T22:43:25Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T03:22:48Z"}, "message": "Check privacy in `resolve_name_in_module`.", "tree": {"sha": "274dde4a2c675617b33e36038aaef5986b2ea555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274dde4a2c675617b33e36038aaef5986b2ea555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165b0b618cbe83bf15d40742bd2cb9db935097d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165b0b618cbe83bf15d40742bd2cb9db935097d6", "html_url": "https://github.com/rust-lang/rust/commit/165b0b618cbe83bf15d40742bd2cb9db935097d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165b0b618cbe83bf15d40742bd2cb9db935097d6/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c9efcba48f098482ee6033835a4fe321268709", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c9efcba48f098482ee6033835a4fe321268709", "html_url": "https://github.com/rust-lang/rust/commit/e1c9efcba48f098482ee6033835a4fe321268709"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "6896439640571435bd7f90e29fb02b4c631e8fcd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/165b0b618cbe83bf15d40742bd2cb9db935097d6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165b0b618cbe83bf15d40742bd2cb9db935097d6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=165b0b618cbe83bf15d40742bd2cb9db935097d6", "patch": "@@ -1304,9 +1304,6 @@ impl<'a> Resolver<'a> {\n                     // Check to see whether there are type bindings, and, if\n                     // so, whether there is a module within.\n                     if let Some(module_def) = binding.module() {\n-                        if let Some(span) = span {\n-                            self.check_privacy(name, binding, span);\n-                        }\n                         search_module = module_def;\n                     } else {\n                         let msg = format!(\"Not a module `{}`\", name);\n@@ -2614,10 +2611,7 @@ impl<'a> Resolver<'a> {\n         let name = segments.last().unwrap().identifier.name;\n         let result =\n             self.resolve_name_in_module(containing_module, name, namespace, false, Some(span));\n-        result.success().map(|binding| {\n-            self.check_privacy(name, binding, span);\n-            binding\n-        }).ok_or(false)\n+        result.success().ok_or(false)\n     }\n \n     /// Invariant: This must be called only during main resolution, not during\n@@ -2656,10 +2650,7 @@ impl<'a> Resolver<'a> {\n         let name = segments.last().unwrap().name();\n         let result =\n             self.resolve_name_in_module(containing_module, name, namespace, false, Some(span));\n-        result.success().map(|binding| {\n-            self.check_privacy(name, binding, span);\n-            binding\n-        }).ok_or(false)\n+        result.success().ok_or(false)\n     }\n \n     fn with_no_errors<T, F>(&mut self, f: F) -> T\n@@ -3276,12 +3267,6 @@ impl<'a> Resolver<'a> {\n         vis.is_at_least(self.current_vis, self)\n     }\n \n-    fn check_privacy(&mut self, name: Name, binding: &'a NameBinding<'a>, span: Span) {\n-        if !self.is_accessible(binding.vis) {\n-            self.privacy_errors.push(PrivacyError(span, name, binding));\n-        }\n-    }\n-\n     fn report_privacy_errors(&self) {\n         if self.privacy_errors.len() == 0 { return }\n         let mut reported_spans = HashSet::new();"}, {"sha": "0757ff7ddbfd87a23f5f8608971e989923ab7afe", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/165b0b618cbe83bf15d40742bd2cb9db935097d6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165b0b618cbe83bf15d40742bd2cb9db935097d6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=165b0b618cbe83bf15d40742bd2cb9db935097d6", "patch": "@@ -165,8 +165,11 @@ impl<'a> Resolver<'a> {\n                 if !allow_private_imports && binding.is_import() && !binding.is_pseudo_public() {\n                     return Failed(None);\n                 }\n-                if record_used.is_some() {\n+                if let Some(span) = record_used {\n                     self.record_use(name, ns, binding);\n+                    if !self.is_accessible(binding.vis) {\n+                        self.privacy_errors.push(PrivacyError(span, name, binding));\n+                    }\n                 }\n                 Success(binding)\n             });"}]}