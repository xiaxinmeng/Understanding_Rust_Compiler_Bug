{"sha": "fa6d871e11bc4f765062cff41fbce5d977e24ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmQ4NzFlMTFiYzRmNzY1MDYyY2ZmNDFmYmNlNWQ5NzdlMjRlYTU=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-16T17:37:27Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:43:37Z"}, "message": "Build fix.", "tree": {"sha": "703f140c5252ddc469a18a3845f86a40cfe0ba17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703f140c5252ddc469a18a3845f86a40cfe0ba17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6d871e11bc4f765062cff41fbce5d977e24ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6d871e11bc4f765062cff41fbce5d977e24ea5", "html_url": "https://github.com/rust-lang/rust/commit/fa6d871e11bc4f765062cff41fbce5d977e24ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6d871e11bc4f765062cff41fbce5d977e24ea5/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e383004985a5d725cec91cc48793284eedbcdbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e383004985a5d725cec91cc48793284eedbcdbce", "html_url": "https://github.com/rust-lang/rust/commit/e383004985a5d725cec91cc48793284eedbcdbce"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "885e42abc506a69908e6cfbe70ed4f241dfd45d1", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa6d871e11bc4f765062cff41fbce5d977e24ea5/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6d871e11bc4f765062cff41fbce5d977e24ea5/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=fa6d871e11bc4f765062cff41fbce5d977e24ea5", "patch": "@@ -253,6 +253,9 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n     let llnode = llmdnode(lldata);\n     let mdval = @{node: llnode, data: {hash: ty::hash_ty(t)}};\n     update_cache(cache, BasicTypeDescriptorTag, tydesc_metadata(mdval));\n+    llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.ty\"),\n+                                      str::byte_len(\"llvm.dbg.ty\"),\n+                                      llnode);\n     ret mdval;\n }\n \n@@ -295,21 +298,21 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n       }\n     };\n     let declargs = [llmdnode([llptr]), mdnode];\n-    let instr = trans_build::Call(bcx, cx.intrinsics.get(\"llvm.dbg.declare\"),\n-                                  declargs);\n+    trans_build::Call(bcx, cx.intrinsics.get(\"llvm.dbg.declare\"),\n+                      declargs);\n     llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.vars\"),\n                                       str::byte_len(\"llvm.dbg.vars\"),\n                                       mdnode);\n     ret mdval;\n }\n \n-fn update_source_pos<T>(cx: @block_ctxt, s: T) {\n+fn update_source_pos(cx: @block_ctxt, s: codemap::span) {\n     if !bcx_ccx(cx).sess.get_opts().debuginfo {\n         ret;\n     }\n     cx.source_pos = option::some(\n         codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n-                                 s.span.lo)); //XXX maybe hi\n+                                 s.lo)); //XXX maybe hi\n \n }\n "}, {"sha": "66b58369d25219a60db3cd3ae172b4c19eb852b0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa6d871e11bc4f765062cff41fbce5d977e24ea5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6d871e11bc4f765062cff41fbce5d977e24ea5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fa6d871e11bc4f765062cff41fbce5d977e24ea5", "patch": "@@ -3519,7 +3519,7 @@ fn trans_temp_expr(bcx: @block_ctxt, e: @ast::expr) -> result {\n // - exprs with non-immediate type never get dest=by_val\n fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n     let tcx = bcx_tcx(bcx);\n-    debuginfo::update_source_pos(bcx, e);\n+    debuginfo::update_source_pos(bcx, e.span);\n \n     if expr_is_lval(bcx, e) {\n         ret lval_to_dps(bcx, e, dest);\n@@ -4014,7 +4014,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     }\n \n     let bcx = cx;\n-    debuginfo::update_source_pos(cx, s);\n+    debuginfo::update_source_pos(cx, s.span);\n     \n     alt s.node {\n       ast::stmt_expr(e, _) { bcx = trans_expr(cx, e, ignore); }\n@@ -4263,7 +4263,7 @@ fn trans_block(bcx: @block_ctxt, b: ast::blk) -> @block_ctxt {\n fn trans_block_dps(bcx: @block_ctxt, b: ast::blk, dest: dest)\n     -> @block_ctxt {\n     let bcx = bcx;\n-    debuginfo::update_source_pos(bcx, b);\n+    debuginfo::update_source_pos(bcx, b.span);\n     block_locals(b) {|local| bcx = alloc_local(bcx, local); };\n     for s: @ast::stmt in b.node.stmts {\n         bcx = trans_stmt(bcx, *s);"}]}