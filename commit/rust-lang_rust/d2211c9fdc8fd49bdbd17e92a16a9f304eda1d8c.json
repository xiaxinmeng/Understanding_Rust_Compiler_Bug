{"sha": "d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c", "node_id": "C_kwDOAAsO6NoAKGQyMjExYzlmZGM4ZmQ0OWJkYmQxN2U5MmExNmE5ZjMwNGVkYTFkOGM", "commit": {"author": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-06-22T13:09:30Z"}, "committer": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-06-22T13:09:30Z"}, "message": "Add new unit test `test_try_downcast_inner`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>", "tree": {"sha": "188eac1399c7fca7f301f9ef9b3d0376e3f4b97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/188eac1399c7fca7f301f9ef9b3d0376e3f4b97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEE+UH+0gCgmS2CS1eIWRwLAwQEFtYFAmKzFJwWHGppYWhhb194\ndUBvdXRsb29rLmNvbQAKCRBZHAsDBAQW1pbkD/4qc53Fg7xRRSrWl5AbwBnN5OKN\n7ryRz49d1TwPP5/qdlH9aWsXjzOiIrfNhSTmuWcnQmjtb1Kqd3J96/FCh3MRiK7P\nR24pZriU/59/bEVWvjLotXUue1wBV50ALP7tjL38v0Uahg3rwJAyNllFK/MC6Ww7\ntvilMjkOfI7IH+xXwmLSMMgdkYW03t/lZmZzLPqM4N8hC9VKbj/YKsJExXIPj/I0\nBr3p42Z0YfiHYmf2vPjjOupu5hfosUhKqy55l6pPAeJCIqROoCcbkkgK/OwkRup/\nJgkkyMlxNSbVSadvmnHKF7cOo/F+DJIH/ZBz7rm/DfMT37FJ6NUpR4xsCCPVi32D\nC2nGPZY0DDdNNCvxsIQH3FRiOTvJ0c2MtI1Ps9DPXQ25bCGC4gD5L3eflBzKbnIw\n+di0F85jkcoS+G8Xit9hv1n8wUZvXwIbc6CS9WAEuTuLPWoEOdRy3s8lfuPf1bkt\nSAIry2mvwT7UJFXqlCFl8iCxC4OONn2x5p3Gs1RQrE1YPO4RZoG4334wBhlFAPcK\nljTcTg6fhiXp1hNsP9CTbjZvDRnn4NIvxYo8+UHhzAFBfAcjbYW5aFoeZoyTUbKl\nbui4ME07u8mLG5/jZpT+TbMglDwx5y5mfX5o1tOaIZ/isxzJ3F4sMo2QMFUKJBbI\npJAgmDTr3DFhFvJouw==\n=+quV\n-----END PGP SIGNATURE-----", "payload": "tree 188eac1399c7fca7f301f9ef9b3d0376e3f4b97d\nparent e0ea0c25341a34bbaa96a8173096e7713d472131\nauthor Jiahao XU <Jiahao_XU@outlook.com> 1655903370 +1000\ncommitter Jiahao XU <Jiahao_XU@outlook.com> 1655903370 +1000\n\nAdd new unit test `test_try_downcast_inner`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c", "html_url": "https://github.com/rust-lang/rust/commit/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c/comments", "author": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ea0c25341a34bbaa96a8173096e7713d472131", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea0c25341a34bbaa96a8173096e7713d472131", "html_url": "https://github.com/rust-lang/rust/commit/e0ea0c25341a34bbaa96a8173096e7713d472131"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "558594c816e16a4db83d31789a1ed9d4110d6620", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=d2211c9fdc8fd49bdbd17e92a16a9f304eda1d8c", "patch": "@@ -1,4 +1,4 @@\n-use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr};\n+use super::{const_io_error, Custom, Error, ErrorData, ErrorKind, Repr, SimpleMessage};\n use crate::assert_matches::assert_matches;\n use crate::error;\n use crate::fmt;\n@@ -141,3 +141,54 @@ fn test_custom_error_packing() {\n         }) if error.downcast_ref::<Bojji>().as_deref() == Some(&Bojji(true)),\n     );\n }\n+\n+#[derive(Debug)]\n+struct E;\n+\n+impl fmt::Display for E {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+impl error::Error for E {}\n+\n+#[test]\n+fn test_try_downcast_inner() {\n+    // Case 1: custom error, downcast succeeds\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let e: Box<Bojji> = io_error.try_downcast_inner().unwrap();\n+    assert!(e.0);\n+\n+    // Case 2: custom error, downcast fails\n+    let io_error = Error::new(ErrorKind::Other, Bojji(true));\n+    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+\n+    //   ensures that the custom error is intact\n+    assert_eq!(ErrorKind::Other, io_error.kind());\n+    let e: Box<Bojji> = io_error.try_downcast_inner().unwrap();\n+    assert!(e.0);\n+\n+    // Case 3: os error\n+    let errno = 20;\n+    let io_error = Error::from_raw_os_error(errno);\n+    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+\n+    assert_eq!(errno, io_error.raw_os_error().unwrap());\n+\n+    // Case 4: simple\n+    let kind = ErrorKind::OutOfMemory;\n+    let io_error: Error = kind.into();\n+    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+\n+    assert_eq!(kind, io_error.kind());\n+\n+    // Case 5: simple message\n+    const SIMPLE_MESSAGE: SimpleMessage =\n+        SimpleMessage { kind: ErrorKind::Other, message: \"simple message error test\" };\n+    let io_error = Error::from_static_message(&SIMPLE_MESSAGE);\n+    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+\n+    assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n+    assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));\n+}"}]}