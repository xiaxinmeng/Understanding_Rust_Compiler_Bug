{"sha": "d05f726eed5a977d546a92d64d2402cb049e505e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNWY3MjZlZWQ1YTk3N2Q1NDZhOTJkNjRkMjQwMmNiMDQ5ZTUwNWU=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-28T21:11:50Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:06:52Z"}, "message": "librustc_resolve: use bug!(), span_bug!()", "tree": {"sha": "71f52793c8f7bc39851046c2e48b8229dabd3679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f52793c8f7bc39851046c2e48b8229dabd3679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05f726eed5a977d546a92d64d2402cb049e505e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05f726eed5a977d546a92d64d2402cb049e505e", "html_url": "https://github.com/rust-lang/rust/commit/d05f726eed5a977d546a92d64d2402cb049e505e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05f726eed5a977d546a92d64d2402cb049e505e/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "487219ccb1c39cf9a2046cf4271d6cac7dbf8a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/487219ccb1c39cf9a2046cf4271d6cac7dbf8a27", "html_url": "https://github.com/rust-lang/rust/commit/487219ccb1c39cf9a2046cf4271d6cac7dbf8a27"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "fe44743ede3bd322a833ad72a394e92d6bf94385", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05f726eed5a977d546a92d64d2402cb049e505e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05f726eed5a977d546a92d64d2402cb049e505e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d05f726eed5a977d546a92d64d2402cb049e505e", "patch": "@@ -507,7 +507,7 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n             Def::Label(..) |\n             Def::SelfTy(..) |\n             Def::Err => {\n-                panic!(\"didn't expect `{:?}`\", def);\n+                bug!(\"didn't expect `{:?}`\", def);\n             }\n         }\n     }"}, {"sha": "e5576b00a76d5c44c228c14c51e3683dd8429de4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d05f726eed5a977d546a92d64d2402cb049e505e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05f726eed5a977d546a92d64d2402cb049e505e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d05f726eed5a977d546a92d64d2402cb049e505e", "patch": "@@ -32,6 +32,7 @@ extern crate arena;\n #[no_link]\n extern crate rustc_bitflags;\n extern crate rustc_front;\n+#[macro_use]\n extern crate rustc;\n \n use self::PatternBindingMode::*;\n@@ -2375,11 +2376,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         // The below shouldn't happen because all\n                         // qualified paths should be in PatKind::QPath.\n                         TypecheckRequired =>\n-                            self.session.span_bug(path.span,\n-                                                  \"resolve_possibly_assoc_item claimed that a path \\\n-                                                   in PatKind::Path or PatKind::TupleStruct \\\n-                                                   requires typecheck to resolve, but qualified \\\n-                                                   paths should be PatKind::QPath\"),\n+                            span_bug!(path.span,\n+                                      \"resolve_possibly_assoc_item claimed that a path \\\n+                                       in PatKind::Path or PatKind::TupleStruct \\\n+                                       requires typecheck to resolve, but qualified \\\n+                                       paths should be PatKind::QPath\"),\n                         ResolveAttempt(resolution) => resolution,\n                     };\n                     if let Some(path_res) = resolution {\n@@ -2668,7 +2669,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut def = local_def.def;\n         match def {\n             Def::Upvar(..) => {\n-                self.session.span_bug(span, &format!(\"unexpected {:?} in bindings\", def))\n+                span_bug!(span, \"unexpected {:?} in bindings\", def)\n             }\n             Def::Local(_, node_id) => {\n                 for rib in ribs {\n@@ -3189,7 +3190,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         })\n                     }\n                     Some(_) => {\n-                        self.session.span_bug(expr.span, \"label wasn't mapped to a label def!\")\n+                        span_bug!(expr.span, \"label wasn't mapped to a label def!\")\n                     }\n                 }\n             }\n@@ -3346,7 +3347,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             paths.push(segm);\n                             paths\n                         }\n-                        _ => unreachable!(),\n+                        _ => bug!(),\n                     };\n \n                     if !in_module_is_extern || name_binding.is_public() {\n@@ -3368,10 +3369,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         debug!(\"(recording def) recording {:?} for {}\", resolution, node_id);\n         if let Some(prev_res) = self.def_map.borrow_mut().insert(node_id, resolution) {\n             let span = self.ast_map.opt_span(node_id).unwrap_or(codemap::DUMMY_SP);\n-            self.session.span_bug(span,\n-                                  &format!(\"path resolved multiple times ({:?} before, {:?} now)\",\n-                                           prev_res,\n-                                           resolution));\n+            span_bug!(span,\n+                      \"path resolved multiple times ({:?} before, {:?} now)\",\n+                      prev_res,\n+                      resolution);\n         }\n     }\n "}]}