{"sha": "7bd20f1b12bc68396acb387884902a1308a045e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDIwZjFiMTJiYzY4Mzk2YWNiMzg3ODg0OTAyYTEzMDhhMDQ1ZTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-04-07T09:43:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T14:04:57Z"}, "message": "Some cleanups", "tree": {"sha": "0974204833345db2150d85ad6a0ca0e9a3eb0950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0974204833345db2150d85ad6a0ca0e9a3eb0950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd20f1b12bc68396acb387884902a1308a045e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrQuRIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASC\nIhAAuKZ8AQ18F/E9M7hIWl9FQycLLXlGOXwW+49Z2XEAzzu/3bxWcS+cDT7YBDn6\nzptVoYXPwajCIyTJhdm91v7HjFahot+CWasagyvDzTMcD8N0C0a8QRhzwdl2kphN\nA6nUffHlAlU1z3NJbPXnAt/5LE5Bf9TzqK6Eq2holUywyN24s9EGWBCzIwLGXMms\nUmYG9Xtd70YVVmLZe2E3CCMmi6bty5JuHjek63Mj0BqdbvFEe0FBH4UYE2lEFGeO\njmP1kAkzYLyoo+fV4Fsc3cIX5x+WqL18Xrum28D8NbTGUu+U+ud4jvDUws/6iwWJ\naJy+tL2MtLi0idlBq0mG8gSP/ad6D/Uwr+4UWQRUkOGtNaWoLFS0tpoeWEGCmMDj\nYkmhxauMeS3vpbrgfSlAPvoAmRhq4QpqG5hSMIsrVNHgjj4cV8pDQVjeY5vDLi6W\no9p+NNtPDkASfYoFy6cXe7xkB7DYqicDUiO/CrVjy3WFiJV8g8E1XUUWVWDRI9S/\n2XQe4WHlJqkSr9FsT73UqdXTtLxrUKGfVuCyoKrT/pUeXtrLa8+PjxfpK7SgG0dG\nNweiz1CaXvzj6sm8jYL5SD42XDf2xBybcmBe+ZvaTcrLJ6Evx2MVNVTErZuoplA1\nf/PAcQUruG3uus8WjK9naj4Pywhxe6gbpJaoac9azy4hLEA=\n=R27w\n-----END PGP SIGNATURE-----", "payload": "tree 0974204833345db2150d85ad6a0ca0e9a3eb0950\nparent 73658c40bb02762d9e68690bc5ebf7695f9d34b7\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1523094226 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523628297 +0200\n\nSome cleanups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd20f1b12bc68396acb387884902a1308a045e5", "html_url": "https://github.com/rust-lang/rust/commit/7bd20f1b12bc68396acb387884902a1308a045e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd20f1b12bc68396acb387884902a1308a045e5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73658c40bb02762d9e68690bc5ebf7695f9d34b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/73658c40bb02762d9e68690bc5ebf7695f9d34b7", "html_url": "https://github.com/rust-lang/rust/commit/73658c40bb02762d9e68690bc5ebf7695f9d34b7"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "26a3829e7e8df00b7540a1c8aacbf1166f591ee3", "filename": "miri/fn_call.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=7bd20f1b12bc68396acb387884902a1308a045e5", "patch": "@@ -115,9 +115,9 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 match ret_ty.sty {\n                     ty::TyAdt(ref adt_def, _) => {\n                         assert!(adt_def.is_enum(), \"Unexpected return type for {}\", item_path);\n-                        let none_variant_index = adt_def.variants.iter().enumerate().find(|&(_i, ref def)| {\n+                        let none_variant_index = adt_def.variants.iter().position(|def| {\n                             def.name.as_str() == \"None\"\n-                        }).expect(\"No None variant\").0;\n+                        }).expect(\"No None variant\");\n                         let (return_place, return_to_block) = destination.unwrap();\n                         write_discriminant_value(self, ret_ty, return_place, none_variant_index)?;\n                         self.goto_block(return_to_block);\n@@ -126,12 +126,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     _ => panic!(\"Unexpected return type for {}\", item_path)\n                 }\n             }\n-            \"std::sys_common::thread_info::set\" | \"std::sys_common::cleanup\" => {\n-                // TODO rustc creates invalid mir inside std::cell::BorrowRef::new which is used by this function\n-                let (_return_place, return_to_block) = destination.unwrap();\n-                self.goto_block(return_to_block);\n-                return Ok(true);\n-            }\n             \"std::sys::unix::fast_thread_local::register_dtor\" => {\n                 // TODO: register the dtor\n                 let (_return_place, return_to_block) = destination.unwrap();\n@@ -465,17 +459,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                             instance,\n                             promoted: None,\n                         };\n-                        // compute global if not cached\n-                        let value: Value = match self.tcx.interpret_interner.get_cached(instance.def_id()) {\n-                            Some(ptr) => {\n-                                Value::ByRef(MemoryPointer::new(ptr, 0).into(), name_align)\n-                            }\n-                            None => {\n-                                let res: Option<(Value, Pointer, Ty)> = eval_body(self.tcx.tcx, cid, ty::ParamEnv::reveal_all());\n-                                res.ok_or_else(||EvalErrorKind::MachineError(\"<already reported>\".to_string()))?.0\n-                            },\n-                        };\n-                        let value = self.value_to_primval(ValTy { value, ty: args[0].ty })?.to_u64()?;\n+                        let const_val = self.const_eval(cid)?;\n+                        let value = const_val.val.unwrap_u64();\n                         if value == name {\n                             result = Some(path_value);\n                             break;"}, {"sha": "60f176dd95db3a4873b80511fcf5e56c0edfa7b9", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=7bd20f1b12bc68396acb387884902a1308a045e5", "patch": "@@ -217,16 +217,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     // Also see the write_bytes intrinsic.\n                     let elem_align = elem_layout.align;\n                     let src = self.into_ptr(args[0].value)?;\n-                    //let src_align = self.layout_of(args[0].ty)?.align;\n-                    //let src_align = ty::layout::Align::from_bytes(1, 1).unwrap();\n                     let dest = self.into_ptr(args[1].value)?;\n-                    /*self.tcx.sess.warn(&format!(\"src_ty: {:?} src_align: {} elem_align: {} src_aligned: {:?} dst_aligned: {:?}\",\n-                        args[0].ty,\n-                        src_align.abi(),\n-                        elem_align.abi(),\n-                        self.memory.check_align(src, src_align),\n-                        self.memory.check_align(dest, elem_align)\n-                    ));*/\n                     self.memory.copy(\n                         src,\n                         elem_align,\n@@ -360,7 +351,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                         align: _align,\n                         extra: PlaceExtra::None,\n                     } => self.memory.write_repeat(ptr, 0, size)?,\n-                    _ => bug!(\"TODO\"),\n+                    Place::Ptr { .. } => {\n+                        bug!(\"init intrinsic tried to write to fat or unaligned ptr target\")\n+                    }\n                 }\n             }\n \n@@ -637,7 +630,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                         align: _align,\n                         extra: PlaceExtra::None,\n                     } => self.memory.mark_definedness(ptr, size, false)?,\n-                    _ => bug!(\"todo\"),\n+                    Place::Ptr { .. } => {\n+                        bug!(\"uninit intrinsic tried to write to fat or unaligned ptr target\")\n+                    }\n                 }\n             }\n "}, {"sha": "d9afd0860a5278a72f814423e64b969b74c341b8", "filename": "miri/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=7bd20f1b12bc68396acb387884902a1308a045e5", "patch": "@@ -210,7 +210,7 @@ pub struct MemoryData<'tcx> {\n     /// The entry is created when allocating the memory and deleted after deallocation.\n     locks: HashMap<AllocId, RangeMap<LockInfo<'tcx>>>,\n \n-    mut_statics: HashMap<GlobalId<'tcx>, AllocId>,\n+    statics: HashMap<GlobalId<'tcx>, AllocId>,\n }\n \n impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n@@ -252,25 +252,24 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn mark_static_initialized<'a>(\n-        _mem: &mut Memory<'a, 'mir, 'tcx, Self>,\n-        _id: AllocId,\n+        mem: &mut Memory<'a, 'mir, 'tcx, Self>,\n+        id: AllocId,\n         _mutability: Mutability,\n     ) -> EvalResult<'tcx, bool> {\n-        /*use memory::MemoryKind::*;\n-        match m {\n+        use memory::MemoryKind::*;\n+        match mem.get_alloc_kind(id) {\n             // FIXME: This could be allowed, but not for env vars set during miri execution\n-            Env => err!(Unimplemented(\"statics can't refer to env vars\".to_owned())),\n+            Some(MemoryKind::Machine(Env)) => err!(Unimplemented(\"statics can't refer to env vars\".to_owned())),\n             _ => Ok(false), // TODO: What does the bool mean?\n-        }*/\n-        Ok(false)\n+        }\n     }\n \n     fn init_static<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         cid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, AllocId> {\n         // Step 1: If the static has already been evaluated return the cached version\n-        if let Some(alloc_id) = ecx.memory.data.mut_statics.get(&cid) {\n+        if let Some(alloc_id) = ecx.memory.data.statics.get(&cid) {\n             return Ok(*alloc_id);\n         }\n \n@@ -293,7 +292,7 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         )?;\n \n         // Step 4: Cache allocation id for recursive statics\n-        assert!(ecx.memory.data.mut_statics.insert(cid, ptr.alloc_id).is_none());\n+        assert!(ecx.memory.data.statics.insert(cid, ptr.alloc_id).is_none());\n \n         // Step 5: Push stackframe to evaluate static\n         let cleanup = StackPopCleanup::None;\n@@ -325,6 +324,8 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n             }\n         }\n \n+        // TODO: Freeze immutable statics without copying them to the global static cache\n+\n         // Step 7: Return the alloc\n         Ok(ptr.alloc_id)\n     }"}, {"sha": "c83c1a515fc6b10ec66bd2d097a43a361d818ed9", "filename": "miri/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd20f1b12bc68396acb387884902a1308a045e5/miri%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fvalidation.rs?ref=7bd20f1b12bc68396acb387884902a1308a045e5", "patch": "@@ -560,7 +560,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n             TyAdt(adt, _) if adt.is_box() => true,\n             TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) |\n             TyDynamic(..) | TyGenerator(..) | TyForeign(_) => false,\n-            TyGeneratorWitness(..) => bug!(\"I'm not sure what to return here\"),\n+            TyGeneratorWitness(..) => unreachable!(\"TyGeneratorWitness in validate\"),\n             TyParam(_) | TyInfer(_) | TyProjection(_) | TyAnon(..) | TyError => {\n                 bug!(\"I got an incomplete/unnormalized type for validation\")\n             }"}, {"sha": "bf867e0ae5b6c08df1118a2ece970677bc479f1b", "filename": "rust-toolchain", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bd20f1b12bc68396acb387884902a1308a045e5/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/7bd20f1b12bc68396acb387884902a1308a045e5/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=7bd20f1b12bc68396acb387884902a1308a045e5", "patch": "@@ -0,0 +1 @@\n+nightly"}]}