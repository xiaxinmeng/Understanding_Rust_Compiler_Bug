{"sha": "da5528824a836a4f36f44f90adc9fadcc98ca75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTUyODgyNGE4MzZhNGYzNmY0NGY5MGFkYzlmYWRjYzk4Y2E3NWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T09:22:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T09:23:22Z"}, "message": "document almost all assists", "tree": {"sha": "0e12aa5d4bcdfb609faa76e01e49854ac95ccadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e12aa5d4bcdfb609faa76e01e49854ac95ccadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5528824a836a4f36f44f90adc9fadcc98ca75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5528824a836a4f36f44f90adc9fadcc98ca75b", "html_url": "https://github.com/rust-lang/rust/commit/da5528824a836a4f36f44f90adc9fadcc98ca75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5528824a836a4f36f44f90adc9fadcc98ca75b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a455635b48b9b43904488bb33454c67e513bccf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a455635b48b9b43904488bb33454c67e513bccf7", "html_url": "https://github.com/rust-lang/rust/commit/a455635b48b9b43904488bb33454c67e513bccf7"}], "stats": {"total": 542, "additions": 359, "deletions": 183}, "files": [{"sha": "2df48a8380cb4919cbf86c2695cfe75b8ac81742", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     SyntaxKind::{RAW_STRING, STRING},\n@@ -9,6 +7,21 @@ use rustc_lexer;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: make_raw_string\n+//\n+// Adds `r#` to a plain string literal.\n+//\n+// ```\n+// fn main() {\n+//     \"Hello,<|> World!\";\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     r#\"Hello, World!\"#;\n+// }\n+// ```\n pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING)?;\n     let text = token.text().as_str();\n@@ -40,6 +53,21 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     ctx.build()\n }\n \n+// Assist: make_usual_string\n+//\n+// Turns a raw string into a plain string.\n+//\n+// ```\n+// fn main() {\n+//     r#\"Hello,<|> \"World!\"\"#;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     \"Hello, \\\"World!\\\"\";\n+// }\n+// ```\n pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n@@ -56,6 +84,21 @@ pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n     ctx.build()\n }\n \n+// Assist: add_hash\n+//\n+// Adds a hash to a raw string literal.\n+//\n+// ```\n+// fn main() {\n+//     r#\"Hello,<|> World!\"#;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     r##\"Hello, World!\"##;\n+// }\n+// ```\n pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n@@ -66,6 +109,21 @@ pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     ctx.build()\n }\n \n+// Assist: remove_hash\n+//\n+// Removes a hash from a raw string literal.\n+//\n+// ```\n+// fn main() {\n+//     r#\"Hello,<|> World!\"#;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     r\"Hello, World!\";\n+// }\n+// ```\n pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();"}, {"sha": "44b8de81452efad8b6d64171b3e12d7a4426c808", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -1,12 +1,26 @@\n-//! FIXME: write short doc here\n-\n-use crate::{Assist, AssistCtx, AssistId};\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     TextUnit, T,\n };\n \n+use crate::{Assist, AssistCtx, AssistId};\n+\n+// Assist: remove_dbg\n+//\n+// Removes `dbg!()` macro call.\n+//\n+// ```\n+// fn main() {\n+//     <|>dbg!(92);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     92;\n+// }\n+// ```\n pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n "}, {"sha": "58ef2ff206737a3421b0a51817580cac739481a5", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -1,12 +1,36 @@\n-//! FIXME: write short doc here\n-\n use format_buf::format;\n use hir::db::HirDatabase;\n use ra_fmt::extract_trivial_expression;\n use ra_syntax::{ast, AstNode};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: replace_if_let_with_match\n+//\n+// Replaces `if let` with an else branch with a `match` expression.\n+//\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     <|>if let Action::Move { distance } = action {\n+//         foo(distance)\n+//     } else {\n+//         bar()\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move { distance } => foo(distance),\n+//         _ => bar(),\n+//     }\n+// }\n+// ```\n pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;"}, {"sha": "8d8a2898787f62ba02b675560422ff1ceb156386", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -1,12 +1,21 @@\n-//! FIXME: write short doc here\n-\n use std::iter::successors;\n \n use hir::db::HirDatabase;\n use ra_syntax::{ast, AstNode, TextUnit, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: split_import\n+//\n+// Wraps the tail of import into braces.\n+//\n+// ```\n+// use std::<|>collections::HashMap;\n+// ```\n+// ->\n+// ```\n+// use std::{collections::HashMap};\n+// ```\n pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.find_token_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?;"}, {"sha": "b8d335911ffa0750ad12da41b46328140fb1366f", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -39,6 +39,23 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_add_hash() {\n+    check(\n+        \"add_hash\",\n+        r#####\"\n+fn main() {\n+    r#\"Hello,<|> World!\"#;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    r##\"Hello, World!\"##;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_impl() {\n     check(\n@@ -274,6 +291,40 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_make_raw_string() {\n+    check(\n+        \"make_raw_string\",\n+        r#####\"\n+fn main() {\n+    \"Hello,<|> World!\";\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    r#\"Hello, World!\"#;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_make_usual_string() {\n+    check(\n+        \"make_usual_string\",\n+        r#####\"\n+fn main() {\n+    r#\"Hello,<|> \"World!\"\"#;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    \"Hello, \\\"World!\\\"\";\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_merge_match_arms() {\n     check(\n@@ -370,3 +421,78 @@ fn handle(action: Action) {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_remove_dbg() {\n+    check(\n+        \"remove_dbg\",\n+        r#####\"\n+fn main() {\n+    <|>dbg!(92);\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    92;\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_remove_hash() {\n+    check(\n+        \"remove_hash\",\n+        r#####\"\n+fn main() {\n+    r#\"Hello,<|> World!\"#;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    r\"Hello, World!\";\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_replace_if_let_with_match() {\n+    check(\n+        \"replace_if_let_with_match\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    <|>if let Action::Move { distance } = action {\n+        foo(distance)\n+    } else {\n+        bar()\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => foo(distance),\n+        _ => bar(),\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_split_import() {\n+    check(\n+        \"split_import\",\n+        r#####\"\n+use std::<|>collections::HashMap;\n+\"#####,\n+        r#####\"\n+use std::{collections::HashMap};\n+\"#####,\n+    )\n+}"}, {"sha": "e4d08a7dcaddc6fabf0fe7efee048b0f9f546ae6", "filename": "docs/user/assists.md", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -38,6 +38,22 @@ fn main() {\n }\n ```\n \n+## `add_hash`\n+\n+Adds a hash to a raw string literal.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    r#\"Hello,\u2503 World!\"#;\n+}\n+\n+// AFTER\n+fn main() {\n+    r##\"Hello, World!\"##;\n+}\n+```\n+\n ## `add_impl`\n \n Adds a new inherent impl for a type.\n@@ -266,6 +282,38 @@ fn main() {\n }\n ```\n \n+## `make_raw_string`\n+\n+Adds `r#` to a plain string literal.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    \"Hello,\u2503 World!\";\n+}\n+\n+// AFTER\n+fn main() {\n+    r#\"Hello, World!\"#;\n+}\n+```\n+\n+## `make_usual_string`\n+\n+Turns a raw string into a plain string.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    r#\"Hello,\u2503 \"World!\"\"#;\n+}\n+\n+// AFTER\n+fn main() {\n+    \"Hello, \\\"World!\\\"\";\n+}\n+```\n+\n ## `merge_match_arms`\n \n Merges identical match arms.\n@@ -358,3 +406,74 @@ fn handle(action: Action) {\n     }\n }\n ```\n+\n+## `remove_dbg`\n+\n+Removes `dbg!()` macro call.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    \u2503dbg!(92);\n+}\n+\n+// AFTER\n+fn main() {\n+    92;\n+}\n+```\n+\n+## `remove_hash`\n+\n+Removes a hash from a raw string literal.\n+\n+```rust\n+// BEFORE\n+fn main() {\n+    r#\"Hello,\u2503 World!\"#;\n+}\n+\n+// AFTER\n+fn main() {\n+    r\"Hello, World!\";\n+}\n+```\n+\n+## `replace_if_let_with_match`\n+\n+Replaces `if let` with an else branch with a `match` expression.\n+\n+```rust\n+// BEFORE\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    \u2503if let Action::Move { distance } = action {\n+        foo(distance)\n+    } else {\n+        bar()\n+    }\n+}\n+\n+// AFTER\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => foo(distance),\n+        _ => bar(),\n+    }\n+}\n+```\n+\n+## `split_import`\n+\n+Wraps the tail of import into braces.\n+\n+```rust\n+// BEFORE\n+use std::\u2503collections::HashMap;\n+\n+// AFTER\n+use std::{collections::HashMap};\n+```"}, {"sha": "7ae2ca7b6ee451a87962f97154e8bcf1b28a5731", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 174, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/da5528824a836a4f36f44f90adc9fadcc98ca75b/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/da5528824a836a4f36f44f90adc9fadcc98ca75b/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=da5528824a836a4f36f44f90adc9fadcc98ca75b", "patch": "@@ -118,180 +118,6 @@ impl Debug<|> for Foo {\n }\n ```\n \n-- Fill struct fields\n-\n-```rust\n-// before:\n-struct S<'a, D> {\n-    a: u32,\n-    b: String,\n-    c: (i32, i32),\n-    d: D,\n-    r: &'a str,\n-}\n-\n-fn main() {\n-    let s = S<|> {}\n-}\n-\n-// after:\n-struct S<'a, D> {\n-    a: u32,\n-    b: String,\n-    c: (i32, i32),\n-    d: D,\n-    r: &'a str,\n-}\n-\n-fn main() {\n-    let s = <|>S {\n-        a: (),\n-        b: (),\n-        c: (),\n-        d: (),\n-        r: (),\n-    }\n-}\n-```\n-\n-- Remove `dbg!`\n-\n-```rust\n-// before:\n-fn foo(n: usize) {\n-    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n-        // ...\n-    }\n-}\n-\n-// after:\n-fn foo(n: usize) {\n-    if let Some(_) = n.<|>checked_sub(4) {\n-        // ...\n-    }\n-}\n-```\n-\n-- Replace if-let with match:\n-\n-```rust\n-// before:\n-impl VariantData {\n-    pub fn is_struct(&self) -> bool {\n-        if <|>let VariantData::Struct(..) = *self {\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-// after:\n-impl VariantData {\n-    pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n-            VariantData::Struct(..) => true,\n-            _ => false,\n-        }\n-    }\n-}\n-```\n-\n-- Split import\n-\n-```rust\n-// before:\n-use crate:<|>:db::{RootDatabase, FileSymbol};\n-// after:\n-use crate::{<|>db::{RootDatabase, FileSymbol}};\n-```\n-\n-- Move if condition to match arm guard\n-```rust\n-// before:\n-fn f() {\n-    let mut t = 'a';\n-    let chars = \"abcd\";\n-    match t {\n-        '\\r' => if chars.clone().next().is_some() {\n-            t = 'e';<|>\n-            false\n-        },\n-        _ => true\n-    }\n-}\n-\n-// after:\n-fn f() {\n-    let mut t = 'a';\n-    let chars = \"abcd\";\n-    match t {\n-        '\\r' <|>if chars.clone().next().is_some() => {\n-            t = 'e';\n-            false\n-        },\n-        _ => true\n-    }\n-}\n-```\n-\n-- Make raw string unescaped\n-\n-```rust\n-// before:\n-fn f() {\n-    let s = <|>\"ab\\ncd\";\n-}\n-\n-// after:\n-fn f() {\n-    let s = <|>r#\"ab\n-cd\"#;\n-}\n-```\n-\n-- Make usual string\n-\n-```rust\n-// before:\n-fn f() {\n-    let s = <|>r#\"abcd\"#;\n-}\n-\n-// after:\n-fn f() {\n-    let s = <|>\"abcd\";\n-}\n-```\n-\n-- Add hash\n-\n-```rust\n-// before:\n-fn f() {\n-    let s = <|>r\"abcd\";\n-}\n-\n-// after:\n-fn f() {\n-    let s = <|>r#\"abcd\"#;\n-}\n-```\n-\n-- Remove hash\n-\n-```rust\n-// before:\n-fn f() {\n-    let s = <|>r#\"abcd\"#;\n-}\n-\n-// after:\n-fn f() {\n-    let s = <|>r\"abcd\";\n-}\n-```\n-\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}