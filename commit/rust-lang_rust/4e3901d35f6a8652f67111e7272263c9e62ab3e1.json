{"sha": "4e3901d35f6a8652f67111e7272263c9e62ab3e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzkwMWQzNWY2YTg2NTJmNjcxMTFlNzI3MjI2M2M5ZTYyYWIzZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-23T16:13:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-23T16:13:18Z"}, "message": "Auto merge of #47678 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\n- Successful merges: #47423, #47425, #47440, #47541, #47549, #47554, #47558, #47610, #47635, #47655, #47661, #47662, #47667, #47672\n- Failed merges:", "tree": {"sha": "1cb65ccb8e82d573d3c0d366da563cbe81b8cd1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb65ccb8e82d573d3c0d366da563cbe81b8cd1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3901d35f6a8652f67111e7272263c9e62ab3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3901d35f6a8652f67111e7272263c9e62ab3e1", "html_url": "https://github.com/rust-lang/rust/commit/4e3901d35f6a8652f67111e7272263c9e62ab3e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3901d35f6a8652f67111e7272263c9e62ab3e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a39b2aa5a68dd07aacab2106db3927f666a485a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a39b2aa5a68dd07aacab2106db3927f666a485a", "html_url": "https://github.com/rust-lang/rust/commit/3a39b2aa5a68dd07aacab2106db3927f666a485a"}, {"sha": "9707b3107612599f8f96facdcd8959669b630e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/9707b3107612599f8f96facdcd8959669b630e02", "html_url": "https://github.com/rust-lang/rust/commit/9707b3107612599f8f96facdcd8959669b630e02"}], "stats": {"total": 405, "additions": 302, "deletions": 103}, "files": [{"sha": "ae9e755b7a0e4de08b2c56a80ed15fa05d28dbb9", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -1108,7 +1108,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.0.26\"\n+version = \"0.0.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1674,7 +1674,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2980,7 +2980,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n \"checksum markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"047150a0e03b57e638fc45af33a0b63a0362305d5b9f92ecef81df472a4cceb0\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n-\"checksum mdbook 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a1ac668292d1e5c7b1c6fd64f70d3a85105b8069a89558a0d67bdb2ff298ca1\"\n+\"checksum mdbook 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ee8ba20c002000546681dc78d7f7e91fd35832058b1e2fdd492ca842bb6e9be\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\""}, {"sha": "5faec27943847e5a63314d807667baeaa9e80866", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -792,6 +792,7 @@ impl Step for Compiletest {\n             flags.push(\"-g\".to_string());\n         }\n         flags.push(\"-Zmiri -Zunstable-options\".to_string());\n+        flags.push(build.config.cmd.rustc_args().join(\" \"));\n \n         if let Some(linker) = build.linker(target) {\n             cmd.arg(\"--linker\").arg(linker);"}, {"sha": "0816c4dfe3d07239d942ee649aa5b29972661ad9", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -54,6 +54,7 @@ pub enum Subcommand {\n     Test {\n         paths: Vec<PathBuf>,\n         test_args: Vec<String>,\n+        rustc_args: Vec<String>,\n         fail_fast: bool,\n     },\n     Bench {\n@@ -150,6 +151,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n             \"test\"  => {\n                 opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n+                opts.optmulti(\n+                    \"\",\n+                    \"rustc-args\",\n+                    \"extra options to pass the compiler when running tests\",\n+                    \"ARGS\",\n+                );\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n@@ -283,6 +290,7 @@ Arguments:\n                 Subcommand::Test {\n                     paths,\n                     test_args: matches.opt_strs(\"test-args\"),\n+                    rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n                 }\n             }\n@@ -362,6 +370,15 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn rustc_args(&self) -> Vec<&str> {\n+        match *self {\n+            Subcommand::Test { ref rustc_args, .. } => {\n+                rustc_args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => Vec::new(),\n+        }\n+    }\n+\n     pub fn fail_fast(&self) -> bool {\n         match *self {\n             Subcommand::Test { fail_fast, .. } => fail_fast,"}, {"sha": "0aa46dc6d205fa0976caf5a7bbd005abcd4b26e7", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -29,13 +29,20 @@ fn main() {\n     // for targets like emscripten, even if we don't use it.\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n-    if target.contains(\"bitrig\") || target.contains(\"cloudabi\") || target.contains(\"emscripten\") ||\n-       target.contains(\"fuchsia\") || target.contains(\"msvc\") || target.contains(\"openbsd\") ||\n-       target.contains(\"redox\") || target.contains(\"rumprun\") || target.contains(\"wasm32\") {\n+    if target.contains(\"bitrig\") || target.contains(\"emscripten\") || target.contains(\"fuchsia\") ||\n+       target.contains(\"msvc\") || target.contains(\"openbsd\") || target.contains(\"redox\") ||\n+       target.contains(\"rumprun\") || target.contains(\"wasm32\") {\n         println!(\"cargo:rustc-cfg=dummy_jemalloc\");\n         return;\n     }\n \n+    // CloudABI ships with a copy of jemalloc that has been patched to\n+    // work well with sandboxing. Don't attempt to build our own copy,\n+    // as it won't build.\n+    if target.contains(\"cloudabi\") {\n+        return;\n+    }\n+\n     if target.contains(\"android\") {\n         println!(\"cargo:rustc-link-lib=gcc\");\n     } else if !target.contains(\"windows\") && !target.contains(\"musl\") {"}, {"sha": "67f6c0c2e49e88dda4be510bb45b63ad9e5e3caf", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -19,8 +19,8 @@ use session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n-use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::cell::RefCell;\n \n use syntax::ast;\n \n@@ -36,8 +36,10 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHashingContextProvi\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n-thread_local!(static IGNORED_ATTR_NAMES: RefCell<FxHashSet<Symbol>> =\n-    RefCell::new(FxHashSet()));\n+pub fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n+    debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);\n+    ich::IGNORED_ATTRIBUTES.iter().map(|&s| Symbol::intern(s)).collect()\n+}\n \n /// This is the context state available during incr. comp. hashing. It contains\n /// enough information to transform DefIds and HirIds into stable DefPaths (i.e.\n@@ -90,15 +92,6 @@ impl<'gcx> StableHashingContext<'gcx> {\n                -> Self {\n         let hash_spans_initial = !sess.opts.debugging_opts.incremental_ignore_spans;\n \n-        debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);\n-        IGNORED_ATTR_NAMES.with(|names| {\n-            let mut names = names.borrow_mut();\n-            if names.is_empty() {\n-                names.extend(ich::IGNORED_ATTRIBUTES.iter()\n-                                                    .map(|&s| Symbol::intern(s)));\n-            }\n-        });\n-\n         StableHashingContext {\n             sess,\n             body_resolver: BodyResolver(krate),\n@@ -186,9 +179,7 @@ impl<'gcx> StableHashingContext<'gcx> {\n \n     #[inline]\n     pub fn is_ignored_attr(&self, name: Symbol) -> bool {\n-        IGNORED_ATTR_NAMES.with(|names| {\n-            names.borrow().contains(&name)\n-        })\n+        self.sess.ignored_attr_names.contains(&name)\n     }\n \n     pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {"}, {"sha": "ce1bd07b14ce0b7a139a41d7df0b0212f50fb306", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -13,7 +13,7 @@\n pub use self::fingerprint::Fingerprint;\n pub use self::caching_codemap_view::CachingCodemapView;\n pub use self::hcx::{StableHashingContext, NodeIdHashingMode,\n-                    hash_stable_trait_impls};\n+                    hash_stable_trait_impls, compute_ignored_attr_names};\n mod fingerprint;\n mod caching_codemap_view;\n mod hcx;"}, {"sha": "da119ba45694dea17fedfd05623be94ee43b95b6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -778,6 +778,8 @@ macro_rules! options {\n             Some(::rustc_back::LinkerFlavor::one_of());\n         pub const parse_optimization_fuel: Option<&'static str> =\n             Some(\"crate=integer\");\n+        pub const parse_unpretty: Option<&'static str> =\n+            Some(\"`string` or `string=string`\");\n     }\n \n     #[allow(dead_code)]\n@@ -965,6 +967,17 @@ macro_rules! options {\n                 }\n             }\n         }\n+\n+        fn parse_unpretty(slot: &mut Option<String>, v: Option<&str>) -> bool {\n+            match v {\n+                None => false,\n+                Some(s) if s.split('=').count() <= 2 => {\n+                    *slot = Some(s.to_string());\n+                    true\n+                }\n+                _ => false,\n+            }\n+        }\n     }\n ) }\n \n@@ -1104,13 +1117,13 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"write syntax and type analysis (in JSON format) information, in \\\n          addition to normal output\"),\n     flowgraph_print_loans: bool = (false, parse_bool, [UNTRACKED],\n-        \"include loan analysis data in --unpretty flowgraph output\"),\n+        \"include loan analysis data in -Z unpretty flowgraph output\"),\n     flowgraph_print_moves: bool = (false, parse_bool, [UNTRACKED],\n-        \"include move analysis data in --unpretty flowgraph output\"),\n+        \"include move analysis data in -Z unpretty flowgraph output\"),\n     flowgraph_print_assigns: bool = (false, parse_bool, [UNTRACKED],\n-        \"include assignment analysis data in --unpretty flowgraph output\"),\n+        \"include assignment analysis data in -Z unpretty flowgraph output\"),\n     flowgraph_print_all: bool = (false, parse_bool, [UNTRACKED],\n-        \"include all dataflow analysis data in --unpretty flowgraph output\"),\n+        \"include all dataflow analysis data in -Z unpretty flowgraph output\"),\n     print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n          \"prints region inference graph. \\\n           Use with RUST_REGION_GRAPH=help for more info\"),\n@@ -1241,6 +1254,13 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n+    unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n+        \"Present the input source, unstable (and less-pretty) variants;\n+        valid types are any of the types for `--pretty`, as well as:\n+        `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n+        `everybody_loops` (all function bodies replaced with `loop {}`),\n+        `hir` (the HIR), `hir,identified`, or\n+        `hir,typed` (HIR with types for each node).\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1514,14 +1534,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                   `expanded` (crates expanded), or\n                   `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n                  \"TYPE\"),\n-        opt::opt(\"\", \"unpretty\",\n-                 \"Present the input source, unstable (and less-pretty) variants;\n-                  valid types are any of the types for `--pretty`, as well as:\n-                  `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n-                  `everybody_loops` (all function bodies replaced with `loop {}`),\n-                  `hir` (the HIR), `hir,identified`, or\n-                  `hir,typed` (HIR with types for each node).\",\n-                 \"TYPE\"),\n     ]);\n     opts\n }"}, {"sha": "36f716a4a76942c8e85364c640f18bb68ff95440", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -14,6 +14,7 @@ pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n use hir::def_id::CrateNum;\n use ich::Fingerprint;\n \n+use ich;\n use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n@@ -28,6 +29,7 @@ use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n+use syntax::symbol::Symbol;\n use syntax::parse;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n@@ -112,6 +114,9 @@ pub struct Session {\n \n     incr_comp_session: RefCell<IncrCompSession>,\n \n+    /// A cache of attributes ignored by StableHashingContext\n+    pub ignored_attr_names: FxHashSet<Symbol>,\n+\n     /// Some measurements that are being gathered during compilation.\n     pub perf_stats: PerfStats,\n \n@@ -975,6 +980,7 @@ pub fn build_session_(sopts: config::Options,\n         injected_panic_runtime: Cell::new(None),\n         imported_macro_spans: RefCell::new(HashMap::new()),\n         incr_comp_session: RefCell::new(IncrCompSession::NotInitialized),\n+        ignored_attr_names: ich::compute_ignored_attr_names(),\n         perf_stats: PerfStats {\n             svh_time: Cell::new(Duration::from_secs(0)),\n             incr_comp_hashes_time: Cell::new(Duration::from_secs(0)),"}, {"sha": "e97d83ed1ee5ab0670c6dc030ed8fa1d8a7042f5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -51,14 +51,12 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::sync::mpsc;\n-use syntax::{ast, diagnostics, visit};\n-use syntax::attr;\n+use syntax::{self, ast, attr, diagnostics, visit};\n use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax_pos::FileName;\n-use syntax;\n use syntax_ext;\n \n use derive_registrar;\n@@ -275,10 +273,6 @@ pub fn compile_input(trans: Box<TransCrate>,\n     Ok(())\n }\n \n-fn keep_hygiene_data(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.keep_hygiene_data\n-}\n-\n pub fn source_name(input: &Input) -> FileName {\n     match *input {\n         Input::File(ref ifile) => ifile.clone().into(),\n@@ -900,7 +894,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n          || lint::check_ast_crate(sess, &krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n-    if !keep_hygiene_data(sess) {\n+    if !sess.opts.debugging_opts.keep_hygiene_data {\n         syntax::ext::hygiene::clear_markings();\n     }\n \n@@ -952,18 +946,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n                             mpsc::Receiver<Box<Any + Send>>,\n                             CompileResult) -> R\n {\n-    macro_rules! try_with_f {\n-        ($e: expr, ($($t:tt)*)) => {\n-            match $e {\n-                Ok(x) => x,\n-                Err(x) => {\n-                    f($($t)*, Err(x));\n-                    return Err(x);\n-                }\n-            }\n-        }\n-    }\n-\n     let time_passes = sess.time_passes();\n \n     let query_result_on_disk_cache = time(time_passes,\n@@ -1024,7 +1006,13 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n              || stability::check_unstable_api_usage(tcx));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx), (tcx, analysis, rx));\n+        match typeck::check_crate(tcx) {\n+            Ok(x) => x,\n+            Err(x) => {\n+                f(tcx, analysis, rx, Err(x));\n+                return Err(x);\n+            }\n+        }\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "04e94979c719f0b0ea6398352cb5ccdbf7a4ade9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -347,8 +347,9 @@ fn parse_pretty(sess: &Session,\n     } else {\n         None\n     };\n-    if pretty.is_none() && sess.unstable_options() {\n-        matches.opt_str(\"unpretty\").map(|a| {\n+\n+    if pretty.is_none() {\n+        sess.opts.debugging_opts.unpretty.as_ref().map(|a| {\n             // extended with unstable pretty-print variants\n             pretty::parse_pretty(sess, &a, true)\n         })\n@@ -669,7 +670,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_hir_lowering.stop = Compilation::Stop;\n         }\n \n-        if save_analysis(sess) {\n+        if sess.opts.debugging_opts.save_analysis {\n             enable_save_analysis(&mut control);\n         }\n \n@@ -704,10 +705,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n     control.make_glob_map = resolve::MakeGlobMap::Yes;\n }\n \n-fn save_analysis(sess: &Session) -> bool {\n-    sess.opts.debugging_opts.save_analysis\n-}\n-\n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n                          cstore: &CrateStore,\n@@ -1329,20 +1326,19 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n-pub fn get_args() -> Vec<String> {\n-    env::args_os().enumerate()\n-        .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n-             early_error(ErrorOutputType::default(),\n-                         &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n-         }))\n-        .collect()\n-}\n-\n pub fn main() {\n     env_logger::init().unwrap();\n-    let result = run(|| run_compiler(&get_args(),\n-                                     &mut RustcDefaultCalls,\n-                                     None,\n-                                     None));\n+    let result = run(|| {\n+        let args = env::args_os().enumerate()\n+            .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+            }))\n+            .collect::<Vec<_>>();\n+        run_compiler(&args,\n+                     &mut RustcDefaultCalls,\n+                     None,\n+                     None)\n+    });\n     process::exit(result as i32);\n }"}, {"sha": "68f4b17a6a3f24a8f7b99bc46052f3df7f7c912c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -66,7 +66,7 @@ pub enum PpSourceMode {\n pub enum PpFlowGraphMode {\n     Default,\n     /// Drops the labels from the edges in the flowgraph output. This\n-    /// is mostly for use in the --unpretty flowgraph run-make tests,\n+    /// is mostly for use in the -Z unpretty flowgraph run-make tests,\n     /// since the labels are largely uninteresting in those cases and\n     /// have become a pain to maintain.\n     UnlabelledEdges,\n@@ -1007,7 +1007,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                            move |annotation, _| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n-                    let hir_map = annotation.hir_map().expect(\"--unpretty missing HIR map\");\n+                    let hir_map = annotation.hir_map().expect(\"-Z unpretty missing HIR map\");\n                     let mut pp_state = pprust_hir::State::new_from_input(sess.codemap(),\n                                                                          &sess.parse_sess,\n                                                                          src_name,\n@@ -1020,7 +1020,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                         pp_state.print_node(node)?;\n                         pp_state.s.space()?;\n                         let path = annotation.node_path(node_id)\n-                            .expect(\"--unpretty missing node paths\");\n+                            .expect(\"-Z unpretty missing node paths\");\n                         pp_state.synth_comment(path)?;\n                         pp_state.s.hardbreak()?;\n                     }\n@@ -1072,7 +1072,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        ofile: Option<&Path>) {\n     let nodeid = if let Some(uii) = uii {\n         debug!(\"pretty printing for {:?}\", uii);\n-        Some(uii.to_one_node_id(\"--unpretty\", sess, &hir_map))\n+        Some(uii.to_one_node_id(\"-Z unpretty\", sess, &hir_map))\n     } else {\n         debug!(\"pretty printing for whole crate\");\n         None"}, {"sha": "f51e51a88b10f39a3583f0bcc701d2a4c7575d22", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -1546,7 +1546,7 @@ extern \"C\" {\n                                                 InlinedAt: MetadataRef)\n                                                 -> ValueRef;\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n-    pub fn LLVMRustDIBuilderCreateOpPlus() -> i64;\n+    pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n \n     pub fn LLVMRustWriteTypeToString(Type: TypeRef, s: RustStringRef);\n     pub fn LLVMRustWriteValueToString(value_ref: ValueRef, s: RustStringRef);"}, {"sha": "b3fc6a6806118d7ca9a0f3081fa1270511e2a7dd", "filename": "src/librustc_trans/cabi_sparc64.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_sparc64.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -50,7 +50,7 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n     }\n     let size = ret.layout.size;\n     let bits = size.bits();\n-    if bits <= 128 {\n+    if bits <= 256 {\n         let unit = if bits <= 8 {\n             Reg::i8()\n         } else if bits <= 16 {\n@@ -84,6 +84,11 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n     }\n \n     let total = arg.layout.size;\n+    if total.bits() > 128 {\n+        arg.make_indirect();\n+        return;\n+    }\n+\n     arg.cast_to(Uniform {\n         unit: Reg::i64(),\n         total"}, {"sha": "b367eb6548d01f9d89a68bae3891992ef464cb63", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -547,7 +547,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n                 let ops = unsafe {\n                     [llvm::LLVMRustDIBuilderCreateOpDeref(),\n-                     llvm::LLVMRustDIBuilderCreateOpPlus(),\n+                     llvm::LLVMRustDIBuilderCreateOpPlusUconst(),\n                      byte_offset_of_var_in_env as i64,\n                      llvm::LLVMRustDIBuilderCreateOpDeref()]\n                 };"}, {"sha": "9aba399b3b09f2d78392c167ceb1fce9c429c4b5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -150,12 +150,14 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n     let is_spotlight = load_attrs(cx, did).has_doc_flag(\"spotlight\");\n+    let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n         is_spotlight,\n+        is_auto,\n     }\n }\n "}, {"sha": "ed6b12d65d913de00419d74b075fe2ab109796ba", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -1800,6 +1800,7 @@ pub struct Trait {\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n     pub is_spotlight: bool,\n+    pub is_auto: bool,\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -1820,11 +1821,21 @@ impl Clean<Item> for doctree::Trait {\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n                 is_spotlight: is_spotlight,\n+                is_auto: self.is_auto.clean(cx),\n             }),\n         }\n     }\n }\n \n+impl Clean<bool> for hir::IsAuto {\n+    fn clean(&self, _: &DocContext) -> bool {\n+        match *self {\n+            hir::IsAuto::Yes => true,\n+            hir::IsAuto::No => false,\n+        }\n+    }\n+}\n+\n impl Clean<Type> for hir::TraitRef {\n     fn clean(&self, cx: &DocContext) -> Type {\n         resolve_type(cx, self.path.clean(cx), self.ref_id)"}, {"sha": "430236f30c4ef610575713ddc0faf4e2b8ee117f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -196,6 +196,7 @@ pub struct Constant {\n }\n \n pub struct Trait {\n+    pub is_auto: hir::IsAuto,\n     pub unsafety: hir::Unsafety,\n     pub name: Name,\n     pub items: hir::HirVec<hir::TraitItem>,"}, {"sha": "b0d535d9df60ea2a8810d23ab06d38718a29bd7f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -2423,9 +2423,10 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     // Output the trait definition\n     write!(w, \"<pre class='rust trait'>\")?;\n     render_attributes(w, it)?;\n-    write!(w, \"{}{}trait {}{}{}\",\n+    write!(w, \"{}{}{}trait {}{}{}\",\n            VisSpace(&it.visibility),\n            UnsafetySpace(t.unsafety),\n+           if t.is_auto { \"auto \" } else { \"\" },\n            it.name.as_ref().unwrap(),\n            t.generics,\n            bounds)?;"}, {"sha": "0f9e7001c159bf545f6dee5cb9083d94ce124bfe", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -608,7 +608,7 @@\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (obj.name === val.name) {\n                     if (literalSearch === true) {\n-                        if (val.generics.length !== 0) {\n+                        if (val.generics && val.generics.length !== 0) {\n                             if (obj.generics && obj.length >= val.generics.length) {\n                                 var elems = obj.generics.slice(0);\n                                 var allFound = true;\n@@ -645,7 +645,7 @@\n                 }\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n-                     if (obj.generics.length > 0) {\n+                     if (obj.generics && obj.generics.length > 0) {\n                         for (var x = 0; x < obj.generics.length; ++x) {\n                             if (obj.generics[x] === val.name) {\n                                 return true;"}, {"sha": "3b882827c6147b09ad9fe9d1342d6999611be1ad", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -494,11 +494,12 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            hir::ItemTrait(_, unsafety, ref gen, ref b, ref item_ids) => {\n+            hir::ItemTrait(is_auto, unsafety, ref gen, ref b, ref item_ids) => {\n                 let items = item_ids.iter()\n                                     .map(|ti| self.cx.tcx.hir.trait_item(ti.id).clone())\n                                     .collect();\n                 let t = Trait {\n+                    is_auto,\n                     unsafety,\n                     name,\n                     items,"}, {"sha": "0ba21e6b366cfc531755014ec7a37bae21f5a016", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -381,7 +381,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n \n     let __internal = Ident::from_str(\"__internal\");\n     let registry = Ident::from_str(\"Registry\");\n-    let registrar = Ident::from_str(\"registrar\");\n+    let registrar = Ident::from_str(\"_registrar\");\n     let register_custom_derive = Ident::from_str(\"register_custom_derive\");\n     let register_attr_proc_macro = Ident::from_str(\"register_attr_proc_macro\");\n     let register_bang_proc_macro = Ident::from_str(\"register_bang_proc_macro\");"}, {"sha": "0fe533d447bc3e9dd8f6518afd00711881c609ea", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -866,7 +866,14 @@ extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n   return dwarf::DW_OP_deref;\n }\n \n-extern \"C\" int64_t LLVMRustDIBuilderCreateOpPlus() { return dwarf::DW_OP_plus; }\n+extern \"C\" int64_t LLVMRustDIBuilderCreateOpPlusUconst() {\n+#if LLVM_VERSION_GE(5, 0)\n+  return dwarf::DW_OP_plus_uconst;\n+#else\n+  // older LLVM used `plus` to behave like `plus_uconst`.\n+  return dwarf::DW_OP_plus;\n+#endif\n+}\n \n extern \"C\" void LLVMRustWriteTypeToString(LLVMTypeRef Ty, RustStringRef Str) {\n   RawRustStringOstream OS(Str);"}, {"sha": "81ed4375e77938d55d8330e2a909f9b94eb7f439", "filename": "src/test/compile-fail/issue-37665.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37665.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z unstable-options --unpretty=mir\n+// compile-flags: -Z unpretty=mir\n // ignore-cloudabi no std::path\n \n use std::path::MAIN_SEPARATOR;"}, {"sha": "fa9365021575fde84f60864853ef7b58abb68cc7", "filename": "src/test/compile-fail/mir-unpretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fmir-unpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fmir-unpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir-unpretty.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z unstable-options --unpretty=mir\n+// compile-flags: -Z unpretty=mir\n \n fn main() {\n     let x: () = 0; //~ ERROR: mismatched types"}, {"sha": "c7dc84c1a91c9bfdc5c7e03985a8d41f134c8a35", "filename": "src/test/compile-fail/nll/constant-thread-locals-issue-47053.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #47053\n+\n+#![feature(nll)]\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static FOO: isize = 5;\n+\n+fn main() {\n+    FOO = 6; //~ ERROR cannot assign to immutable item `FOO` [E0594]\n+}"}, {"sha": "2e100b269e14bfa440f429d84050a3ad0be50256", "filename": "src/test/run-make/hir-tree/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhir-tree%2FMakefile?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -4,6 +4,5 @@\n # the string constant we would expect to see.\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.hir -Z unstable-options \\\n-\t\t--unpretty=hir-tree input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.hir -Z unpretty=hir-tree input.rs\n \t$(CGREP) '\"Hello, Rustaceans!\\n\"' < $(TMPDIR)/input.hir"}, {"sha": "899457fc7486e5cb9d1689a7d2ba20467782c0a8", "filename": "src/test/run-make/pretty-print-path-suffix/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/foo.out -Z unstable-options --unpretty hir=foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/nest_foo.out -Z unstable-options --unpretty hir=nest::foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/foo_method.out -Z unstable-options --unpretty hir=foo_method input.rs\n+\t$(RUSTC) -o $(TMPDIR)/foo.out -Z unpretty=hir=foo input.rs\n+\t$(RUSTC) -o $(TMPDIR)/nest_foo.out -Z unpretty=hir=nest::foo input.rs\n+\t$(RUSTC) -o $(TMPDIR)/foo_method.out -Z unpretty=hir=foo_method input.rs\n \tdiff -u $(TMPDIR)/foo.out foo.pp\n \tdiff -u $(TMPDIR)/nest_foo.out nest_foo.pp\n \tdiff -u $(TMPDIR)/foo_method.out foo_method.pp"}, {"sha": "b45d4bf41d63583f17528915760d9738b3a28cb1", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/empty-crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![deny(unused_variables)]"}, {"sha": "38a2716aee77beaa56fc164d36e91d26ee8645b0", "filename": "src/test/run-pass-fulldeps/proc-macro/empty-crate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fempty-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fempty-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fempty-crate.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:empty-crate.rs\n+// ignore-stage1\n+\n+#[macro_use]\n+extern crate empty_crate;\n+\n+fn main() {}"}, {"sha": "e2a51bbf14b8984b430e8c18d4c8d48ace76bc79", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions:lexical nll\n+#![cfg_attr(nll, feature(nll))]\n+\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions, slice_patterns, advanced_slice_patterns)]"}, {"sha": "dcb85b5de04adb4eedf121fb27ba5e3f7f13ab01", "filename": "src/test/rustdoc-js/quoted.js", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc-js%2Fquoted.js", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc-js%2Fquoted.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fquoted.js?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = '\"error\"';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'error' },\n+        { 'path': 'std::fmt', 'name': 'Error' },\n+        { 'path': 'std::io', 'name': 'Error' },\n+    ],\n+    'in_args': [],\n+    'returned': [\n+        { 'path': 'std::fmt::LowerExp', 'name': 'fmt' },\n+    ],\n+};"}, {"sha": "1753c0ebf73539ccab0c2634748d610b116883bd", "filename": "src/test/rustdoc/auto-traits.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto-traits.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:auto-traits.rs\n+\n+#![feature(optin_builtin_traits)]\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate auto_traits;\n+\n+// @has 'foo/trait.Foo.html' '//pre' 'pub unsafe auto trait Foo'\n+pub unsafe auto trait Foo {}\n+\n+// @has 'foo/trait.Bar.html' '//pre' 'pub unsafe auto trait Bar'\n+pub use auto_traits::Bar;"}, {"sha": "70299334b46092dbdb1b8f0342eb87d99d299e83", "filename": "src/test/rustdoc/auxiliary/auto-traits.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fauto-traits.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+pub unsafe auto trait Bar {}"}, {"sha": "f31e965ae01c74679ffca4d3b91e70f2ad3694c9", "filename": "src/test/ui/issue-29723.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fui%2Fissue-29723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fui%2Fissue-29723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29723.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+// test for https://github.com/rust-lang/rust/issues/29723\n+\n+fn main() {\n+    let s = String::new();\n+    let _s = match 0 {\n+        0 if { drop(s); false } => String::from(\"oops\"),\n+        _ => {\n+            // This should trigger an error,\n+            // s could have been moved from.\n+            s\n+            //~^ ERROR use of moved value: `s`\n+        }\n+    };\n+}"}, {"sha": "061c3d493238bcb1da3e713e1013a843dca177e6", "filename": "src/test/ui/issue-29723.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fui%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftest%2Fui%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29723.stderr?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `s`\n+  --> $DIR/issue-29723.rs:22:13\n+   |\n+18 |         0 if { drop(s); false } => String::from(\"oops\"),\n+   |                     - value moved here\n+...\n+22 |             s\n+   |             ^ value used here after move\n+   |\n+   = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "bf5fc00428df2cad5558c4527ba9c08f8887d1c3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -466,8 +466,7 @@ impl<'test> TestCx<'test> {\n         let mut rustc = Command::new(&self.config.rustc_path);\n         rustc\n             .arg(\"-\")\n-            .arg(\"-Zunstable-options\")\n-            .args(&[\"--unpretty\", &pretty_type])\n+            .args(&[\"-Z\", &format!(\"unpretty={}\", pretty_type)])\n             .args(&[\"--target\", &self.config.target])\n             .arg(\"-L\")\n             .arg(&aux_dir)"}, {"sha": "bc35cbe9fbba64a3fbb2841f980be0511a515f0c", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -8,5 +8,5 @@ license = \"MIT/Apache-2.0\"\n clap = \"2.25.0\"\n \n [dependencies.mdbook]\n-version = \"0.0.26\"\n+version = \"0.0.28\"\n default-features = false"}, {"sha": "50f4364e448f73a8101aaf925c41e586c915716e", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3901d35f6a8652f67111e7272263c9e62ab3e1/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=4e3901d35f6a8652f67111e7272263c9e62ab3e1", "patch": "@@ -52,12 +52,14 @@ fn main() {\n // Build command implementation\n pub fn build(args: &ArgMatches) -> Result<()> {\n     let book_dir = get_book_dir(args);\n-    let book = MDBook::new(&book_dir).read_config()?;\n+    let mut book = MDBook::new(&book_dir).read_config()?;\n \n-    let mut book = match args.value_of(\"dest-dir\") {\n-        Some(dest_dir) => book.with_destination(dest_dir),\n-        None => book,\n-    };\n+    // Set this to allow us to catch bugs in advance.\n+    book.config.build.create_missing = false;\n+\n+    if let Some(dest_dir) = args.value_of(\"dest-dir\") {\n+        book.config.build.build_dir = PathBuf::from(dest_dir);\n+    }\n \n     book.build()?;\n "}]}