{"sha": "bcd79c222ac7a316502e9537e86fae6512bc697d", "node_id": "C_kwDOAAsO6NoAKGJjZDc5YzIyMmFjN2EzMTY1MDJlOTUzN2U4NmZhZTY1MTJiYzY5N2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-15T17:02:26Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-15T17:02:26Z"}, "message": "fix clippy::{clone_on_copy, useless_conversion}", "tree": {"sha": "a4d475e20f72e13ca4a3e34c2d27e4f335b7cc8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d475e20f72e13ca4a3e34c2d27e4f335b7cc8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd79c222ac7a316502e9537e86fae6512bc697d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd79c222ac7a316502e9537e86fae6512bc697d", "html_url": "https://github.com/rust-lang/rust/commit/bcd79c222ac7a316502e9537e86fae6512bc697d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd79c222ac7a316502e9537e86fae6512bc697d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d666f6bf22b3b46f2f232507b328379e7bfaedb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d666f6bf22b3b46f2f232507b328379e7bfaedb0", "html_url": "https://github.com/rust-lang/rust/commit/d666f6bf22b3b46f2f232507b328379e7bfaedb0"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "70d0a101b4ed908d14dece8ceddb11b8029535a4", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=bcd79c222ac7a316502e9537e86fae6512bc697d", "patch": "@@ -528,7 +528,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n     where\n         F: Fn() -> RegionCtxt,\n     {\n-        let next_region = self.infcx.next_nll_region_var(origin.clone());\n+        let next_region = self.infcx.next_nll_region_var(origin);\n         let vid = next_region.as_var();\n \n         if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {"}, {"sha": "8c414521b7653322205b25b966b89e124acd7bef", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=bcd79c222ac7a316502e9537e86fae6512bc697d", "patch": "@@ -645,9 +645,8 @@ pub(super) fn implied_predicates_with_filter(\n     };\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let implied_bounds = &*tcx\n-        .arena\n-        .alloc_from_iter(superbounds.predicates().into_iter().chain(where_bounds_that_match));\n+    let implied_bounds =\n+        &*tcx.arena.alloc_from_iter(superbounds.predicates().chain(where_bounds_that_match));\n     debug!(?implied_bounds);\n \n     // Now require that immediate supertraits are converted,"}, {"sha": "579a789244bd6136c74b409f547e1925276710d1", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd79c222ac7a316502e9537e86fae6512bc697d/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=bcd79c222ac7a316502e9537e86fae6512bc697d", "patch": "@@ -231,7 +231,7 @@ pub(crate) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             // locked while doing so. Instead we copy out the\n             // `(query_key, dep_node_index)` pairs and release the lock again.\n             let mut query_keys_and_indices = Vec::new();\n-            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((k.clone(), i)));\n+            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((*k, i)));\n \n             // Now actually allocate the strings. If allocating the strings\n             // generates new entries in the query cache, we'll miss them but"}]}