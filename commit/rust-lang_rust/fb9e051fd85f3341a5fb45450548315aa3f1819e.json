{"sha": "fb9e051fd85f3341a5fb45450548315aa3f1819e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOWUwNTFmZDg1ZjMzNDFhNWZiNDU0NTA1NDgzMTVhYTNmMTgxOWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-02T20:57:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-04T05:04:54Z"}, "message": "Format <foo + 'bar> nicely", "tree": {"sha": "21f324094fea8d676f83ce2a13704bac64128f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f324094fea8d676f83ce2a13704bac64128f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9e051fd85f3341a5fb45450548315aa3f1819e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e051fd85f3341a5fb45450548315aa3f1819e", "html_url": "https://github.com/rust-lang/rust/commit/fb9e051fd85f3341a5fb45450548315aa3f1819e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9e051fd85f3341a5fb45450548315aa3f1819e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649be9220498abb5604b8f885be634c00d6d5a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/649be9220498abb5604b8f885be634c00d6d5a5d", "html_url": "https://github.com/rust-lang/rust/commit/649be9220498abb5604b8f885be634c00d6d5a5d"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "972866f26383c84bef764a8b919a302d47fef1c9", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e051fd85f3341a5fb45450548315aa3f1819e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e051fd85f3341a5fb45450548315aa3f1819e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fb9e051fd85f3341a5fb45450548315aa3f1819e", "patch": "@@ -35,7 +35,8 @@ impl<'a> FmtVisitor<'a> {\n \n             if let Some(ref ty) = local.ty {\n                 infix.push_str(\": \");\n-                infix.push_str(&pprust::ty_to_string(ty));\n+                // FIXME silly width, indent\n+                infix.push_str(&ty.rewrite(&self.get_context(), 1000, 0).unwrap());\n             }\n \n             if local.init.is_some() {\n@@ -205,7 +206,7 @@ impl<'a> FmtVisitor<'a> {\n                                                codemap::mk_sp(span.lo,\n                                                               span_for_return(&fd.output).lo)));\n \n-        let ret_str = self.rewrite_return(&fd.output);\n+        let ret_str = self.rewrite_return(&fd.output, indent);\n \n         // Args.\n         let (one_line_budget, multi_line_budget, mut arg_indent) =\n@@ -504,7 +505,11 @@ impl<'a> FmtVisitor<'a> {\n                                              \")\",\n                                              |arg| arg.ty.span.lo,\n                                              |arg| arg.ty.span.hi,\n-                                             |arg| pprust::ty_to_string(&arg.ty),\n+                                             |arg| {\n+                                                 // FIXME silly width, indent\n+                                                 arg.ty.rewrite(&self.get_context(), 1000, 0)\n+                                                       .unwrap()\n+                                             },\n                                              span_after(field.span, \"(\", self.codemap),\n                                              next_span_start);\n \n@@ -731,7 +736,8 @@ impl<'a> FmtVisitor<'a> {\n             ast::StructFieldKind::NamedField(_, vis) |\n             ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis),\n         };\n-        let typ = pprust::ty_to_string(&field.node.ty);\n+        // FIXME silly width, indent\n+        let typ = field.node.ty.rewrite(&self.get_context(), 1000, 0).unwrap();\n \n         let indent = self.block_indent + self.config.tab_spaces;\n         let mut attr_str = field.node.attrs\n@@ -877,11 +883,14 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn rewrite_return(&self, ret: &ast::FunctionRetTy) -> String {\n+    fn rewrite_return(&self, ret: &ast::FunctionRetTy, indent: usize) -> String {\n         match *ret {\n             ast::FunctionRetTy::DefaultReturn(_) => String::new(),\n             ast::FunctionRetTy::NoReturn(_) => \"-> !\".to_owned(),\n-            ast::FunctionRetTy::Return(ref ty) => \"-> \".to_owned() + &pprust::ty_to_string(ty),\n+            ast::FunctionRetTy::Return(ref ty) => {\n+                let ctxt = &self.get_context();\n+                format!(\"-> {}\", ty.rewrite(ctxt, ctxt.config.max_width, indent).unwrap())\n+            }\n         }\n     }\n }"}, {"sha": "c04d694a68ec4ade6c777ee4bca144931728ad8d", "filename": "src/types.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e051fd85f3341a5fb45450548315aa3f1819e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e051fd85f3341a5fb45450548315aa3f1819e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fb9e051fd85f3341a5fb45450548315aa3f1819e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fmt;\n-\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos, CodeMap};\n@@ -108,6 +106,7 @@ fn rewrite_path_segments<'a, I>(mut buffer: String,\n     Some(buffer)\n }\n \n+#[derive(Debug)]\n enum SegmentParam<'a> {\n     LifeTime(&'a ast::Lifetime),\n     Type(&'a ast::Ty),\n@@ -124,19 +123,20 @@ impl<'a> SegmentParam<'a> {\n     }\n }\n \n-impl<'a> fmt::Display for SegmentParam<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            SegmentParam::LifeTime(ref lt) => {\n-                write!(f, \"{}\", pprust::lifetime_to_string(lt))\n-            }\n-            SegmentParam::Type(ref ty) => {\n-                write!(f, \"{}\", pprust::ty_to_string(ty))\n-            }\n-            SegmentParam::Binding(ref binding) => {\n-                write!(f, \"{} = {}\", binding.ident, pprust::ty_to_string(&*binding.ty))\n-            }\n-        }\n+impl<'a> Rewrite for SegmentParam<'a> {\n+    // FIXME doesn't always use width, offset\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        Some(match *self {\n+                SegmentParam::LifeTime(ref lt) => {\n+                    pprust::lifetime_to_string(lt)\n+                }\n+                SegmentParam::Type(ref ty) => {\n+                    try_opt!(ty.rewrite(context, width, offset))\n+                }\n+                SegmentParam::Binding(ref binding) => {\n+                    format!(\"{} = {}\", binding.ident, try_opt!(binding.ty.rewrite(context, width, offset)))\n+                }\n+            })\n     }\n }\n \n@@ -205,19 +205,22 @@ fn rewrite_segment(segment: &ast::PathSegment,\n             let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi), \"<\", context.codemap);\n             let separator = get_path_separator(context.codemap, *span_lo, list_lo);\n \n+            // 1 for <\n+            let extra_offset = 1 + separator.len();\n+            // 1 for >\n+            let list_width = try_opt!(width.checked_sub(extra_offset + 1));\n+\n             let items = itemize_list(context.codemap,\n                                      param_list.into_iter(),\n                                      \">\",\n                                      |param| param.get_span().lo,\n                                      |param| param.get_span().hi,\n-                                     ToString::to_string,\n+                                     |seg| {\n+                                         seg.rewrite(context, list_width, offset + extra_offset).unwrap()\n+                                     },\n                                      list_lo,\n                                      span_hi);\n \n-            // 1 for <\n-            let extra_offset = 1 + separator.len();\n-            // 1 for >\n-            let list_width = try_opt!(width.checked_sub(extra_offset + 1));\n             let fmt = ListFormatting::for_fn(list_width, offset + extra_offset);\n \n             // update pos\n@@ -346,6 +349,13 @@ impl Rewrite for ast::TyParamBound {\n     }\n }\n \n+impl Rewrite for ast::TyParamBounds {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        let strs: Vec<_> = self.iter().map(|b| b.rewrite(context, width, offset).unwrap()).collect();\n+        Some(strs.join(\" + \"))\n+    }\n+}\n+\n // FIXME: this assumes everything will fit on one line\n impl Rewrite for ast::TyParam {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n@@ -389,3 +399,20 @@ impl Rewrite for ast::PolyTraitRef {\n         }\n     }\n }\n+\n+impl Rewrite for ast::Ty {\n+    // FIXME doesn't always use width, offset\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        match self.node {\n+            ast::TyPath(None, ref p) => {\n+                p.rewrite(context, width, offset)\n+            }\n+            ast::TyObjectSum(ref ty, ref bounds) => {\n+                Some(format!(\"{} + {}\",\n+                             try_opt!(ty.rewrite(context, width, offset)),\n+                             try_opt!(bounds.rewrite(context, width, offset))))\n+            }\n+            _ => Some(pprust::ty_to_string(self)),\n+        }\n+    }\n+}"}, {"sha": "abc16035be2fa6b4c690660bec12987969cfc156", "filename": "tests/source/multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e051fd85f3341a5fb45450548315aa3f1819e/tests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e051fd85f3341a5fb45450548315aa3f1819e/tests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmultiple.rs?ref=fb9e051fd85f3341a5fb45450548315aa3f1819e", "patch": "@@ -22,7 +22,7 @@ mod other;\n \n }\n \n-fn foo() where 'a: 'b, for<'a> D<'b>: 'a {\n+fn foo()->Box<Write+'static> where 'a: 'b, for<'a> D<'b>: 'a {\n     hello!()\n }\n "}, {"sha": "9ff3f2cf7a8b8748c7ccf3dc79c984e42018f692", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9e051fd85f3341a5fb45450548315aa3f1819e/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9e051fd85f3341a5fb45450548315aa3f1819e/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=fb9e051fd85f3341a5fb45450548315aa3f1819e", "patch": "@@ -28,7 +28,7 @@ fn foo(a: isize, b: u32 /* blah blah */, c: f64) {\n \n }\n \n-fn foo()\n+fn foo() -> Box<Write + 'static>\n     where 'a: 'b,\n           for<'a> D<'b>: 'a\n {"}]}