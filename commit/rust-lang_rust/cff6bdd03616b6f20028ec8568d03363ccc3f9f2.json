{"sha": "cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjZiZGQwMzYxNmI2ZjIwMDI4ZWM4NTY4ZDAzMzYzY2NjM2Y5ZjI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T09:42:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T10:46:57Z"}, "message": "Change syntax for impl\n\nMove the name of the bundle to the front, allow type parameters (not\nhandled yet), and add a 'for' keyword:\n\n    impl utils for int {\n        fn str() -> str { int::str(self) }\n        fn times(f: block()) { ... }\n    }", "tree": {"sha": "e24a03d847e02bea41bded20923757d64df93da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24a03d847e02bea41bded20923757d64df93da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "html_url": "https://github.com/rust-lang/rust/commit/cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f826d81f611aa9486b25e1e123b24131659bd51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f826d81f611aa9486b25e1e123b24131659bd51", "html_url": "https://github.com/rust-lang/rust/commit/4f826d81f611aa9486b25e1e123b24131659bd51"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "fd79869c27bc4a4cc7200a97428bcb77f7159110", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -505,7 +505,7 @@ tag item_ {\n              node_id /* dtor id */,\n              [ty_param],\n              node_id /* ctor id */);\n-    item_impl(@path /* iface */, @ty /* self */, [@method]);\n+    item_impl([ty_param], @ty /* self */, [@method]);\n }\n \n type native_item ="}, {"sha": "aa949b11f3440fe66f82b14e15026d99de75158c", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -235,8 +235,8 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                       methods: vec::map(fld.fold_method, o.methods)},\n                      typms, d)\n           }\n-          item_impl(iface, ty, methods) {\n-            item_impl(fld.fold_path(iface), fld.fold_ty(ty),\n+          item_impl(tps, ty, methods) {\n+            item_impl(tps, fld.fold_ty(ty),\n                       vec::map(fld.fold_method, methods))\n           }\n           item_res(dtor, did, typms, cid) {"}, {"sha": "3d00c333ad459238d0be818641cc1f0e69095887", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -1859,14 +1859,14 @@ fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n }\n \n fn parse_item_impl(p: parser, attrs: [ast::attribute]) -> @ast::item {\n-    let lo = p.get_last_lo_pos(), ty = parse_ty(p, false);\n-    expect(p, token::COLON);\n-    let path = parse_path(p), meths = [];\n+    let lo = p.get_last_lo_pos(), ident = parse_ident(p),\n+        tps = parse_ty_params(p);\n+    expect_word(p, \"for\");\n+    let ty = parse_ty(p, false), meths = [];\n     expect(p, token::LBRACE);\n     while !eat(p, token::RBRACE) { meths += [parse_method(p)]; }\n-    ret mk_item(p, lo, p.get_last_hi_pos(),\n-                path.node.idents[vec::len(path.node.idents) - 1u],\n-                ast::item_impl(path, ty, meths), attrs);\n+    ret mk_item(p, lo, p.get_last_hi_pos(), ident,\n+                ast::item_impl(tps, ty, meths), attrs);\n }\n \n fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {"}, {"sha": "54388102f535ae36f00ee0a2a68759aea14c4e6d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -347,12 +347,6 @@ fn print_native_item(s: ps, item: @ast::native_item) {\n         end(s); // end the outer ibox\n \n       }\n-\n-\n-\n-\n-\n-\n       ast::native_item_fn(decl, typarams) {\n         print_fn(s, decl, ast::proto_bare, item.ident, typarams,\n                  decl.constraints);\n@@ -483,11 +477,14 @@ fn print_item(s: ps, &&item: @ast::item) {\n         }\n         bclose(s, item.span);\n       }\n-      ast::item_impl(path, ty, methods) {\n+      ast::item_impl(tps, ty, methods) {\n         head(s, \"impl\");\n+        word(s.s, item.ident);\n+        print_type_params(s, tps);\n+        nbsp(s);\n+        word_nbsp(s, \"for\");\n         print_type(s, ty);\n-        word_space(s, \":\");\n-        print_path(s, path, false);\n+        space(s.s);\n         bopen(s);\n         for meth in methods {\n             hardbreak_if_not_bol(s);"}, {"sha": "5091c2d9ea0ed1741c42b5b6fd3a7b13538e0a89", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -105,8 +105,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n                        e, v);\n         }\n       }\n-      item_impl(path, ty, methods) {\n-        visit_path(path, e, v);\n+      item_impl(_, ty, methods) {\n         visit_ty(ty, e, v);\n         for m in methods {\n             v.visit_fn(m.node.meth, [], m.span, some(m.node.ident), m.node.id,"}, {"sha": "ab4fbc5915f4e31dd5d27f812c4e29aae9ff8290", "filename": "src/test/run-pass/static-impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff6bdd03616b6f20028ec8568d03363ccc3f9f2/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=cff6bdd03616b6f20028ec8568d03363ccc3f9f2", "patch": "@@ -0,0 +1,18 @@\n+import a::*;\n+import b::baz;\n+\n+mod a {\n+    impl foo for uint { fn plus() -> int { self as int + 20 } }\n+}\n+\n+mod b {\n+    impl baz for str { fn plus() -> int { 200 } }\n+}\n+\n+fn main() {\n+    impl foo for int { fn plus() -> int { self + 10 } }\n+    assert 10.plus() == 20;\n+    assert 10u.plus() == 30;\n+    assert \"hi\".plus() == 200;\n+}\n+"}]}