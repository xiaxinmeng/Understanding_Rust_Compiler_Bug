{"sha": "5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjJiYjFiY2NkODM5NGRiZDczZmZhNTJkZWExMTUxZGNkMGIwYWQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-13T02:09:57Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-07-13T11:33:48Z"}, "message": "Avoid empty \"static_allocas\" blocks\n\nWhen there are no allocas, we don't need a block for them.", "tree": {"sha": "d152e4d6f2252f903f8113667873ea51a10991a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d152e4d6f2252f903f8113667873ea51a10991a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "html_url": "https://github.com/rust-lang/rust/commit/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcd5d14e6cbb32aeccae3d12951181c525070ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd5d14e6cbb32aeccae3d12951181c525070ee7", "html_url": "https://github.com/rust-lang/rust/commit/dcd5d14e6cbb32aeccae3d12951181c525070ee7"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "1173fa4941963c79d0f55580b448aaddca5c5c37", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "patch": "@@ -1557,7 +1557,7 @@ pub fn alloca_maybe_zeroed(cx: block, ty: Type, name: &str, zero: bool) -> Value\n             return llvm::LLVMGetUndef(ty.to_ref());\n         }\n     }\n-    let initcx = base::raw_block(cx.fcx, false, cx.fcx.llstaticallocas);\n+    let initcx = base::raw_block(cx.fcx, false, cx.fcx.get_llstaticallocas());\n     let p = Alloca(initcx, ty, name);\n     if zero { memzero(initcx, p, ty); }\n     p\n@@ -1570,21 +1570,18 @@ pub fn arrayalloca(cx: block, ty: Type, v: ValueRef) -> ValueRef {\n             return llvm::LLVMGetUndef(ty.to_ref());\n         }\n     }\n-    return ArrayAlloca(base::raw_block(cx.fcx, false, cx.fcx.llstaticallocas), ty, v);\n+    return ArrayAlloca(base::raw_block(cx.fcx, false, cx.fcx.get_llstaticallocas()), ty, v);\n }\n \n pub struct BasicBlocks {\n     sa: BasicBlockRef,\n }\n \n-// Creates the standard set of basic blocks for a function\n-pub fn mk_standard_basic_blocks(llfn: ValueRef) -> BasicBlocks {\n+pub fn mk_staticallocas_basic_block(llfn: ValueRef) -> BasicBlockRef {\n     unsafe {\n         let cx = task_llcx();\n-        BasicBlocks {\n-            sa: str::as_c_str(\"static_allocas\",\n-                           |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)),\n-        }\n+        str::as_c_str(\"static_allocas\",\n+                      |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf))\n     }\n }\n \n@@ -1604,7 +1601,7 @@ pub fn make_return_pointer(fcx: fn_ctxt, output_type: ty::t) -> ValueRef {\n             llvm::LLVMGetParam(fcx.llfn, 0)\n         } else {\n             let lloutputtype = type_of::type_of(fcx.ccx, output_type);\n-            alloca(raw_block(fcx, false, fcx.llstaticallocas), lloutputtype,\n+            alloca(raw_block(fcx, false, fcx.get_llstaticallocas()), lloutputtype,\n                    \"__make_return_pointer\")\n         }\n     }\n@@ -1632,8 +1629,6 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n            id,\n            param_substs.repr(ccx.tcx));\n \n-    let llbbs = mk_standard_basic_blocks(llfndecl);\n-\n     let substd_output_type = match param_substs {\n         None => output_type,\n         Some(substs) => {\n@@ -1647,7 +1642,7 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n               llvm::LLVMGetUndef(Type::i8p().to_ref())\n           },\n           llretptr: None,\n-          llstaticallocas: llbbs.sa,\n+          llstaticallocas: None,\n           llloadenv: None,\n           llreturn: None,\n           llself: None,\n@@ -1821,14 +1816,24 @@ pub fn build_return_block(fcx: fn_ctxt, ret_cx: block) {\n \n pub fn tie_up_header_blocks(fcx: fn_ctxt, lltop: BasicBlockRef) {\n     let _icx = push_ctxt(\"tie_up_header_blocks\");\n-    match fcx.llloadenv {\n+    let llnext = match fcx.llloadenv {\n         Some(ll) => {\n-            Br(raw_block(fcx, false, fcx.llstaticallocas), ll);\n+            unsafe {\n+                llvm::LLVMMoveBasicBlockBefore(ll, lltop);\n+            }\n             Br(raw_block(fcx, false, ll), lltop);\n+            ll\n         }\n-        None => {\n-            Br(raw_block(fcx, false, fcx.llstaticallocas), lltop);\n+        None => lltop\n+    };\n+    match fcx.llstaticallocas {\n+        Some(ll) => {\n+            unsafe {\n+                llvm::LLVMMoveBasicBlockBefore(ll, llnext);\n+            }\n+            Br(raw_block(fcx, false, ll), llnext);\n         }\n+        None => ()\n     }\n }\n "}, {"sha": "83029a90260ff5d3afe35c215fd4815118a356a9", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "patch": "@@ -178,7 +178,7 @@ pub struct fn_ctxt_ {\n     // the function, due to LLVM's quirks.\n     // A block for all the function's static allocas, so that LLVM\n     // will coalesce them into a single alloca call.\n-    llstaticallocas: BasicBlockRef,\n+    llstaticallocas: Option<BasicBlockRef>,\n     // A block containing code that copies incoming arguments to space\n     // already allocated by code in one of the llallocas blocks.\n     // (LLVM requires that arguments be copied to local allocas before\n@@ -251,6 +251,14 @@ impl fn_ctxt_ {\n         }\n     }\n \n+    pub fn get_llstaticallocas(&mut self) -> BasicBlockRef {\n+        if self.llstaticallocas.is_none() {\n+            self.llstaticallocas = Some(base::mk_staticallocas_basic_block(self.llfn));\n+        }\n+\n+        self.llstaticallocas.get()\n+    }\n+\n     pub fn get_llreturn(&mut self) -> BasicBlockRef {\n         if self.llreturn.is_none() {\n             self.llreturn = Some(base::mk_return_basic_block(self.llfn));"}, {"sha": "edf003e3e529ecf77e852443f334d4a9d4f391b5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5df2bb1bccd8394dbd73ffa52dea1151dcd0b0ad", "patch": "@@ -197,7 +197,7 @@ fn build_wrap_fn_(ccx: @mut CrateContext,\n     // the C ABI.\n     if needs_c_return && !ty::type_is_immediate(ccx.tcx, tys.fn_sig.output) {\n         let lloutputtype = type_of::type_of(fcx.ccx, tys.fn_sig.output);\n-        fcx.llretptr = Some(alloca(raw_block(fcx, false, fcx.llstaticallocas),\n+        fcx.llretptr = Some(alloca(raw_block(fcx, false, fcx.get_llstaticallocas()),\n                                    lloutputtype,\n                                    \"\"));\n     }"}]}