{"sha": "5823e9468d99414418e0eead5338a4747b7884f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjNlOTQ2OGQ5OTQxNDQxOGUwZWVhZDUzMzhhNDc0N2I3ODg0ZjE=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-09T15:01:01Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-10T15:46:39Z"}, "message": "New `is_integer_const` to check more const ints\n\nThis mostly affects loop checks and the modulo_one lint. Tests\nwere also updated where applicable.", "tree": {"sha": "aec468cafc0be65f208506abe1409d1d1fbf557e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec468cafc0be65f208506abe1409d1d1fbf557e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5823e9468d99414418e0eead5338a4747b7884f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5823e9468d99414418e0eead5338a4747b7884f1", "html_url": "https://github.com/rust-lang/rust/commit/5823e9468d99414418e0eead5338a4747b7884f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5823e9468d99414418e0eead5338a4747b7884f1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144d940c2fc1055fd9e2bcbd0bd21bf5591a5381", "url": "https://api.github.com/repos/rust-lang/rust/commits/144d940c2fc1055fd9e2bcbd0bd21bf5591a5381", "html_url": "https://github.com/rust-lang/rust/commit/144d940c2fc1055fd9e2bcbd0bd21bf5591a5381"}], "stats": {"total": 118, "additions": 98, "deletions": 20}, "files": [{"sha": "21ff9ff29cf84c9f8279de590085a3e0c6a60f05", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -27,7 +27,7 @@ use syntax_pos::{BytePos, Symbol};\n \n use crate::utils::paths;\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, has_iter_method, higher, is_integer_literal, is_refutable, last_path_segment,\n+    get_enclosing_block, get_parent_expr, has_iter_method, higher, is_integer_const, is_refutable, last_path_segment,\n     match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt, snippet_with_applicability,\n     span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n@@ -1096,7 +1096,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                     return;\n                 }\n \n-                let starts_at_zero = is_integer_literal(start, 0);\n+                let starts_at_zero = is_integer_const(cx, start, 0);\n \n                 let skip = if starts_at_zero {\n                     String::new()\n@@ -2042,7 +2042,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                 match parent.node {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {\n                         if lhs.hir_id == expr.hir_id {\n-                            if op.node == BinOpKind::Add && is_integer_literal(rhs, 1) {\n+                            if op.node == BinOpKind::Add && is_integer_const(self.cx, rhs, 1) {\n                                 *state = match *state {\n                                     VarState::Initial if self.depth == 0 => VarState::IncrOnce,\n                                     _ => VarState::DontWarn,\n@@ -2094,7 +2094,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                     self.name = Some(ident.name);\n \n                     self.state = if let Some(ref init) = local.init {\n-                        if is_integer_literal(init, 0) {\n+                        if is_integer_const(&self.cx, init, 0) {\n                             VarState::Warn\n                         } else {\n                             VarState::Declared\n@@ -2130,7 +2130,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                         self.state = VarState::DontWarn;\n                     },\n                     ExprKind::Assign(ref lhs, ref rhs) if lhs.hir_id == expr.hir_id => {\n-                        self.state = if is_integer_literal(rhs, 0) && self.depth == 0 {\n+                        self.state = if is_integer_const(&self.cx, rhs, 0) && self.depth == 0 {\n                             VarState::Warn\n                         } else {\n                             VarState::DontWarn"}, {"sha": "38fdabaaf7a274a795de49d3a77be30df4325d94", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -12,7 +12,7 @@ use syntax::source_map::{ExpnKind, Span};\n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_item_name, get_parent_expr, implements_trait, in_constant, is_integer_literal, iter_input_pats,\n+    get_item_name, get_parent_expr, implements_trait, in_constant, is_integer_const, iter_input_pats,\n     last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint, span_lint_and_then,\n     span_lint_hir_and_then, walk_ptrs_ty, SpanlessEq,\n };\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         );\n                         db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n                     });\n-                } else if op == BinOpKind::Rem && is_integer_literal(right, 1) {\n+                } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n                 }\n             },"}, {"sha": "0fb40ee9f56b98477d045c97142ef98b5e5e1592", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -8,7 +8,7 @@ use syntax::source_map::Spanned;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n-use crate::utils::{is_integer_literal, paths, snippet, snippet_opt, span_lint, span_lint_and_then};\n+use crate::utils::{is_integer_const, paths, snippet, snippet_opt, span_lint, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n                     if iter_path.ident.name == sym!(iter);\n                     // range expression in `.zip()` call: `0..x.len()`\n                     if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(cx, zip_arg);\n-                    if is_integer_literal(start, 0);\n+                    if is_integer_const(cx, start, 0);\n                     // `.len()` call\n                     if let ExprKind::MethodCall(ref len_path, _, ref len_args) = end.node;\n                     if len_path.ident.name == sym!(len) && len_args.len() == 1;\n@@ -164,7 +164,7 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n             end: Some(end),\n             limits: RangeLimits::HalfOpen\n         }) = higher::range(cx, expr);\n-        if let Some(y) = y_plus_one(end);\n+        if let Some(y) = y_plus_one(cx, end);\n         then {\n             let span = if expr.span.from_expansion() {\n                 expr.span\n@@ -209,7 +209,7 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr) {\n     if_chain! {\n         if let Some(higher::Range { start, end: Some(end), limits: RangeLimits::Closed }) = higher::range(cx, expr);\n-        if let Some(y) = y_minus_one(end);\n+        if let Some(y) = y_minus_one(cx, end);\n         then {\n             span_lint_and_then(\n                 cx,\n@@ -239,7 +239,7 @@ fn has_step_by(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n }\n \n-fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n+fn y_plus_one<'t>(cx: &LateContext<'_, '_>, expr: &'t Expr) -> Option<&'t Expr> {\n     match expr.node {\n         ExprKind::Binary(\n             Spanned {\n@@ -248,9 +248,9 @@ fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n             ref lhs,\n             ref rhs,\n         ) => {\n-            if is_integer_literal(lhs, 1) {\n+            if is_integer_const(cx, lhs, 1) {\n                 Some(rhs)\n-            } else if is_integer_literal(rhs, 1) {\n+            } else if is_integer_const(cx, rhs, 1) {\n                 Some(lhs)\n             } else {\n                 None\n@@ -260,15 +260,15 @@ fn y_plus_one(expr: &Expr) -> Option<&Expr> {\n     }\n }\n \n-fn y_minus_one(expr: &Expr) -> Option<&Expr> {\n+fn y_minus_one<'t>(cx: &LateContext<'_, '_>, expr: &'t Expr) -> Option<&'t Expr> {\n     match expr.node {\n         ExprKind::Binary(\n             Spanned {\n                 node: BinOpKind::Sub, ..\n             },\n             ref lhs,\n             ref rhs,\n-        ) if is_integer_literal(rhs, 1) => Some(lhs),\n+        ) if is_integer_const(cx, rhs, 1) => Some(lhs),\n         _ => None,\n     }\n }"}, {"sha": "438274fad2813bfc3cc2750c94f3e3a5fc83300b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -48,6 +48,7 @@ use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n \n use crate::reexport::*;\n+use crate::consts::{constant, Constant};\n \n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n@@ -669,6 +670,22 @@ pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n     inner(ty, 0)\n }\n \n+/// Checks whether the given expression is a constant integer of the given value.\n+/// unlike `is_integer_literal`, this version does const folding \n+pub fn is_integer_const(cx: &LateContext<'_, '_>, e: &Expr, value: u128) -> bool {\n+    if is_integer_literal(e, value) {\n+        return true;\n+    }\n+    let map = cx.tcx.hir();\n+    let parent_item = map.get_parent_item(e.hir_id);\n+    if let Some((Constant::Int(v), _)) = map.maybe_body_owned_by(parent_item)\n+            .and_then(|body_id| constant(cx, cx.tcx.body_tables(body_id), e)) {\n+        value == v\n+    } else {\n+        false\n+    }\n+}\n+\n /// Checks whether the given expression is a constant literal of the given value.\n pub fn is_integer_literal(expr: &Expr, value: u128) -> bool {\n     // FIXME: use constant folding"}, {"sha": "5d367a62fc933bd09b4558c669ae332800d67ab4", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -275,6 +275,14 @@ fn main() {\n     for mid in 1..vec.len() {\n         let (_, _) = vec.split_at(mid);\n     }\n+\n+    const ZERO: usize = 0;\n+\n+    for i in ZERO..vec.len() {\n+        if f(&vec[i], &vec[i]) {\n+            panic!(\"at the disco\");\n+        }\n+    }\n }\n \n #[allow(dead_code)]"}, {"sha": "0f84abf45ed7592c063ea91f506b68d0a412407b", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -152,5 +152,17 @@ LL |     for _v in vec.iter().next() {}\n    |\n    = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n-error: aborting due to 21 previous errors\n+error: the loop variable `i` is only used to index `vec`.\n+  --> $DIR/for_loop.rs:281:14\n+   |\n+LL |     for i in ZERO..vec.len() {\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-range-loop` implied by `-D warnings`\n+help: consider using an iterator\n+   |\n+LL |     for <item> in &vec {\n+   |         ^^^^^^    ^^^^\n+\n+error: aborting due to 22 previous errors\n "}, {"sha": "cc8c8e7cdaefd5a203b3e9839fe1db98dfdc9fc8", "filename": "tests/ui/modulo_one.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -1,7 +1,14 @@\n #![warn(clippy::modulo_one)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n+static STATIC_ONE: usize = 2 - 1;\n+\n fn main() {\n     10 % 1;\n     10 % 2;\n+\n+    const ONE: u32 = 1 * 1;\n+\n+    2 % ONE;\n+    5 % STATIC_ONE;\n }"}, {"sha": "6bee68360b6fbde118d04883faa81f756cbd78a5", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -1,10 +1,30 @@\n error: any number modulo 1 will be 0\n-  --> $DIR/modulo_one.rs:5:5\n+  --> $DIR/modulo_one.rs:7:5\n    |\n LL |     10 % 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::modulo-one` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: the operation is ineffective. Consider reducing it to `1`\n+  --> $DIR/modulo_one.rs:10:22\n+   |\n+LL |     const ONE: u32 = 1 * 1;\n+   |                      ^^^^^\n+   |\n+   = note: `-D clippy::identity-op` implied by `-D warnings`\n+\n+error: the operation is ineffective. Consider reducing it to `1`\n+  --> $DIR/modulo_one.rs:10:22\n+   |\n+LL |     const ONE: u32 = 1 * 1;\n+   |                      ^^^^^\n+\n+error: any number modulo 1 will be 0\n+  --> $DIR/modulo_one.rs:12:5\n+   |\n+LL |     2 % ONE;\n+   |     ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "6b40211409974089e974b5e7b6ee6ce71c229a69", "filename": "tests/ui/range_plus_minus_one.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.fixed?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -32,6 +32,10 @@ fn main() {\n     let _ = (1..=11);\n     let _ = ((f() + 1)..=f());\n \n+    const ONE: usize = 1;\n+    // integer consts are linted, too\n+    for _ in 1..=ONE {}\n+\n     let mut vec: Vec<()> = std::vec::Vec::new();\n     vec.drain(..);\n }"}, {"sha": "3cfed4125b35c7434dda2950b72e243cbed6e2d5", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -32,6 +32,10 @@ fn main() {\n     let _ = (1..11 + 1);\n     let _ = (f() + 1)..(f() + 1);\n \n+    const ONE: usize = 1;\n+    // integer consts are linted, too\n+    for _ in 1..ONE + ONE {}\n+\n     let mut vec: Vec<()> = std::vec::Vec::new();\n     vec.drain(..);\n }"}, {"sha": "f72943a04f252af9b471324f225ed12a3d79fd4d", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5823e9468d99414418e0eead5338a4747b7884f1/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=5823e9468d99414418e0eead5338a4747b7884f1", "patch": "@@ -50,5 +50,11 @@ error: an inclusive range would be more readable\n LL |     let _ = (f() + 1)..(f() + 1);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: use: `((f() + 1)..=f())`\n \n-error: aborting due to 8 previous errors\n+error: an inclusive range would be more readable\n+  --> $DIR/range_plus_minus_one.rs:37:14\n+   |\n+LL |     for _ in 1..ONE + ONE {}\n+   |              ^^^^^^^^^^^^ help: use: `1..=ONE`\n+\n+error: aborting due to 9 previous errors\n "}]}