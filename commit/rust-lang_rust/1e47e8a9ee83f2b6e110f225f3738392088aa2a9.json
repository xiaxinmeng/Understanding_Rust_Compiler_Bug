{"sha": "1e47e8a9ee83f2b6e110f225f3738392088aa2a9", "node_id": "C_kwDOAAsO6NoAKDFlNDdlOGE5ZWU4M2YyYjZlMTEwZjIyNWYzNzM4MzkyMDg4YWEyYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T05:09:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T05:09:04Z"}, "message": "Rollup merge of #100729 - thomcc:less-initialized, r=ChrisDenton\n\nAvoid zeroing a 1kb stack buffer on every call to `std::sys::windows::fill_utf16_buf`\n\nI've also tried to be slightly more careful about integer overflows, although in practice this is likely still not handled ideally.\n\nr? `@ChrisDenton`", "tree": {"sha": "4496bc5e3b2d4bc204af4f53e8c91a3a7175215e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4496bc5e3b2d4bc204af4f53e8c91a3a7175215e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e47e8a9ee83f2b6e110f225f3738392088aa2a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAGxwCRBK7hj4Ov3rIwAAbC0IAF1NaNObvALdlImIB17XYDj9\nKmBoDRVxKEdunGH3Cve0z1q5f1jGmkMU09k/VKLz9wXCSDlQMW01CBkhxPoyIR4I\nRLvwrYUzxhGJc0OPL4ymP2uW7OKm5MiNm4xbv2RsmDHV62rGz0panpkSYK/cqeuB\nN22f0gY+F3JreW9IjLLGMpbIb/FRATOSfg9V1T2b8TiISmdGndH7Hbw5vfE7VwBG\nTuUDDbJ/bTMQQv14fFKv36hDVCjqnU9lSovo4yZ6VqEiRhxMv7DwI9xL863WaKk6\nJOD9WNxmIlEN1aMwOY6ZXUeWldi2RESKLpc4Ks1tUOvT0o//d8LbMkFucTTcC+A=\n=v7Xx\n-----END PGP SIGNATURE-----\n", "payload": "tree 4496bc5e3b2d4bc204af4f53e8c91a3a7175215e\nparent 84f81e7974da97b293a99087769fe6e9f28fa2c4\nparent d4cba61099b3d0457f4ab63a2cb9ae4ae6cf324e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660972144 +0200\ncommitter GitHub <noreply@github.com> 1660972144 +0200\n\nRollup merge of #100729 - thomcc:less-initialized, r=ChrisDenton\n\nAvoid zeroing a 1kb stack buffer on every call to `std::sys::windows::fill_utf16_buf`\n\nI've also tried to be slightly more careful about integer overflows, although in practice this is likely still not handled ideally.\n\nr? `@ChrisDenton`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e47e8a9ee83f2b6e110f225f3738392088aa2a9", "html_url": "https://github.com/rust-lang/rust/commit/1e47e8a9ee83f2b6e110f225f3738392088aa2a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e47e8a9ee83f2b6e110f225f3738392088aa2a9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f81e7974da97b293a99087769fe6e9f28fa2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f81e7974da97b293a99087769fe6e9f28fa2c4", "html_url": "https://github.com/rust-lang/rust/commit/84f81e7974da97b293a99087769fe6e9f28fa2c4"}, {"sha": "d4cba61099b3d0457f4ab63a2cb9ae4ae6cf324e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4cba61099b3d0457f4ab63a2cb9ae4ae6cf324e", "html_url": "https://github.com/rust-lang/rust/commit/d4cba61099b3d0457f4ab63a2cb9ae4ae6cf324e"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "a9846a484880befb3e0aca62cb9a91d65bc57bca", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e47e8a9ee83f2b6e110f225f3738392088aa2a9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e47e8a9ee83f2b6e110f225f3738392088aa2a9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=1e47e8a9ee83f2b6e110f225f3738392088aa2a9", "patch": "@@ -2,6 +2,7 @@\n \n use crate::ffi::{CStr, OsStr, OsString};\n use crate::io::ErrorKind;\n+use crate::mem::MaybeUninit;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n use crate::time::Duration;\n@@ -204,8 +205,8 @@ where\n     // This initial size also works around `GetFullPathNameW` returning\n     // incorrect size hints for some short paths:\n     // https://github.com/dylni/normpath/issues/5\n-    let mut stack_buf = [0u16; 512];\n-    let mut heap_buf = Vec::new();\n+    let mut stack_buf: [MaybeUninit<u16>; 512] = MaybeUninit::uninit_array();\n+    let mut heap_buf: Vec<MaybeUninit<u16>> = Vec::new();\n     unsafe {\n         let mut n = stack_buf.len();\n         loop {\n@@ -214,6 +215,11 @@ where\n             } else {\n                 let extra = n - heap_buf.len();\n                 heap_buf.reserve(extra);\n+                // We used `reserve` and not `reserve_exact`, so in theory we\n+                // may have gotten more than requested. If so, we'd like to use\n+                // it... so long as we won't cause overflow.\n+                n = heap_buf.capacity().min(c::DWORD::MAX as usize);\n+                // Safety: MaybeUninit<u16> does not need initialization\n                 heap_buf.set_len(n);\n                 &mut heap_buf[..]\n             };\n@@ -228,13 +234,13 @@ where\n             // error\" is still 0 then we interpret it as a 0 length buffer and\n             // not an actual error.\n             c::SetLastError(0);\n-            let k = match f1(buf.as_mut_ptr(), n as c::DWORD) {\n+            let k = match f1(buf.as_mut_ptr().cast::<u16>(), n as c::DWORD) {\n                 0 if c::GetLastError() == 0 => 0,\n                 0 => return Err(crate::io::Error::last_os_error()),\n                 n => n,\n             } as usize;\n             if k == n && c::GetLastError() == c::ERROR_INSUFFICIENT_BUFFER {\n-                n *= 2;\n+                n = n.saturating_mul(2).min(c::DWORD::MAX as usize);\n             } else if k > n {\n                 n = k;\n             } else if k == n {\n@@ -244,7 +250,9 @@ where\n                 // Therefore k never equals n.\n                 unreachable!();\n             } else {\n-                return Ok(f2(&buf[..k]));\n+                // Safety: First `k` values are initialized.\n+                let slice: &[u16] = MaybeUninit::slice_assume_init_ref(&buf[..k]);\n+                return Ok(f2(slice));\n             }\n         }\n     }"}]}