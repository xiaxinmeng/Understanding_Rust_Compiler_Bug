{"sha": "f56f9728e626886a89be852e642b84be7be36ab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NmY5NzI4ZTYyNjg4NmE4OWJlODUyZTY0MmI4NGJlN2JlMzZhYjg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-06T17:11:15Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcore: use unboxed closures in `slice::raw` free functions", "tree": {"sha": "93d4f6fa46d1cfc9eb8ad6ccc08a6c5911cee1cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d4f6fa46d1cfc9eb8ad6ccc08a6c5911cee1cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f56f9728e626886a89be852e642b84be7be36ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f56f9728e626886a89be852e642b84be7be36ab8", "html_url": "https://github.com/rust-lang/rust/commit/f56f9728e626886a89be852e642b84be7be36ab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f56f9728e626886a89be852e642b84be7be36ab8/comments", "author": null, "committer": null, "parents": [{"sha": "c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "html_url": "https://github.com/rust-lang/rust/commit/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "27a4328ba8017fe82e370a0d92c1162e64b36532", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f56f9728e626886a89be852e642b84be7be36ab8/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f56f9728e626886a89be852e642b84be7be36ab8/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f56f9728e626886a89be852e642b84be7be36ab8", "patch": "@@ -1725,15 +1725,17 @@ pub mod raw {\n     use mem::transmute;\n     use ptr::RawPtr;\n     use raw::Slice;\n+    use ops::FnOnce;\n     use option::Option;\n     use option::Option::{None, Some};\n \n     /// Form a slice from a pointer and length (as a number of units,\n     /// not bytes).\n     #[inline]\n     #[deprecated = \"renamed to slice::from_raw_buf\"]\n-    pub unsafe fn buf_as_slice<T,U>(p: *const T, len: uint, f: |v: &[T]| -> U)\n-                               -> U {\n+    pub unsafe fn buf_as_slice<T, U, F>(p: *const T, len: uint, f: F) -> U where\n+        F: FnOnce(&[T]) -> U,\n+    {\n         f(transmute(Slice {\n             data: p,\n             len: len\n@@ -1744,12 +1746,9 @@ pub mod raw {\n     /// not bytes).\n     #[inline]\n     #[deprecated = \"renamed to slice::from_raw_mut_buf\"]\n-    pub unsafe fn mut_buf_as_slice<T,\n-                                   U>(\n-                                   p: *mut T,\n-                                   len: uint,\n-                                   f: |v: &mut [T]| -> U)\n-                                   -> U {\n+    pub unsafe fn mut_buf_as_slice<T, U, F>(p: *mut T, len: uint, f: F) -> U where\n+        F: FnOnce(&mut [T]) -> U,\n+    {\n         f(transmute(Slice {\n             data: p as *const T,\n             len: len"}]}