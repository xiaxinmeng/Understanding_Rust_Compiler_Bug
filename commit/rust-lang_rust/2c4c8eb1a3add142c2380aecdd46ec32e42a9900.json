{"sha": "2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "node_id": "C_kwDOAAsO6NoAKDJjNGM4ZWIxYTNhZGQxNDJjMjM4MGFlY2RkNDZlYzMyZTQyYTk5MDA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T01:36:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T21:26:22Z"}, "message": "Box `PatKind::Range`.\n\nBecause it's the biggest variant. Also, make `PatRange` non-`Copy`,\nbecause it's 104 bytes, which is pretty big.", "tree": {"sha": "96b8d5fc3c85e97a83ff5beef2fc33c2b2f47f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b8d5fc3c85e97a83ff5beef2fc33c2b2f47f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "html_url": "https://github.com/rust-lang/rust/commit/2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1e6836a07fa7b96b41effc3ec90e60aaa494df", "html_url": "https://github.com/rust-lang/rust/commit/bd1e6836a07fa7b96b41effc3ec90e60aaa494df"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "7eaf9c0099cd5006265a130775f2c31ec3ec3b0e", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -628,7 +628,7 @@ pub enum PatKind<'tcx> {\n         value: mir::ConstantKind<'tcx>,\n     },\n \n-    Range(PatRange<'tcx>),\n+    Range(Box<PatRange<'tcx>>),\n \n     /// Matches against a slice, checking the length and extracting elements.\n     /// irrefutable when there is a slice pattern and both `prefix` and `suffix` are empty.\n@@ -653,7 +653,7 @@ pub enum PatKind<'tcx> {\n     },\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, PartialEq, HashStable)]\n pub struct PatRange<'tcx> {\n     pub lo: mir::ConstantKind<'tcx>,\n     pub hi: mir::ConstantKind<'tcx>,\n@@ -767,7 +767,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                 write!(f, \"{}\", subpattern)\n             }\n             PatKind::Constant { value } => write!(f, \"{}\", value),\n-            PatKind::Range(PatRange { lo, hi, end }) => {\n+            PatKind::Range(box PatRange { lo, hi, end }) => {\n                 write!(f, \"{}\", lo)?;\n                 write!(f, \"{}\", end)?;\n                 write!(f, \"{}\", hi)\n@@ -809,8 +809,8 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n-    static_assert_size!(Pat<'_>, 128);\n-    static_assert_size!(PatKind<'_>, 112);\n+    static_assert_size!(Pat<'_>, 112);\n+    static_assert_size!(PatKind<'_>, 96);\n     static_assert_size!(Stmt<'_>, 56);\n     static_assert_size!(StmtKind<'_>, 48);\n }"}, {"sha": "bf56c26074cdbd6626f9fcf89ea2bb4b52c2aade", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -979,7 +979,7 @@ enum TestKind<'tcx> {\n     },\n \n     /// Test whether the value falls within an inclusive or exclusive range\n-    Range(PatRange<'tcx>),\n+    Range(Box<PatRange<'tcx>>),\n \n     /// Test that the length of the slice is equal to `len`.\n     Len { len: u64, op: BinOp },"}, {"sha": "55ed09da64fb866162cddda8d9d6809d360c6f5f", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatKind::Range(PatRange { lo, hi, end }) => {\n+            PatKind::Range(box PatRange { lo, hi, end }) => {\n                 let (range, bias) = match *lo.ty().kind() {\n                     ty::Char => {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)"}, {"sha": "19c303e0bab7400ba0d8e48552ccd0233db9dcc9", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -58,10 +58,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 kind: TestKind::Eq { value, ty: match_pair.pattern.ty },\n             },\n \n-            PatKind::Range(range) => {\n+            PatKind::Range(ref range) => {\n                 assert_eq!(range.lo.ty(), match_pair.pattern.ty);\n                 assert_eq!(range.hi.ty(), match_pair.pattern.ty);\n-                Test { span: match_pair.pattern.span, kind: TestKind::Range(range) }\n+                Test { span: match_pair.pattern.span, kind: TestKind::Range(range.clone()) }\n             }\n \n             PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n@@ -102,9 +102,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatKind::Variant { .. } => {\n                 panic!(\"you should have called add_variants_to_switch instead!\");\n             }\n-            PatKind::Range(range) => {\n+            PatKind::Range(ref range) => {\n                 // Check that none of the switch values are in the range.\n-                self.values_not_contained_in_range(range, options).unwrap_or(false)\n+                self.values_not_contained_in_range(&*range, options).unwrap_or(false)\n             }\n             PatKind::Slice { .. }\n             | PatKind::Array { .. }\n@@ -272,7 +272,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n-            TestKind::Range(PatRange { lo, hi, ref end }) => {\n+            TestKind::Range(box PatRange { lo, hi, ref end }) => {\n                 let lower_bound_success = self.cfg.start_new_block();\n                 let target_blocks = make_target_blocks(self);\n \n@@ -540,9 +540,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Some(index)\n             }\n \n-            (&TestKind::SwitchInt { switch_ty: _, ref options }, &PatKind::Range(range)) => {\n+            (&TestKind::SwitchInt { switch_ty: _, ref options }, &PatKind::Range(ref range)) => {\n                 let not_contained =\n-                    self.values_not_contained_in_range(range, options).unwrap_or(false);\n+                    self.values_not_contained_in_range(&*range, options).unwrap_or(false);\n \n                 if not_contained {\n                     // No switch values are contained in the pattern range,\n@@ -631,7 +631,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n-            (&TestKind::Range(test), &PatKind::Range(pat)) => {\n+            (&TestKind::Range(ref test), &PatKind::Range(ref pat)) => {\n                 use std::cmp::Ordering::*;\n \n                 if test == pat {\n@@ -658,8 +658,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 no_overlap\n             }\n \n-            (&TestKind::Range(range), &PatKind::Constant { value }) => {\n-                if let Some(false) = self.const_range_contains(range, value) {\n+            (&TestKind::Range(ref range), &PatKind::Constant { value }) => {\n+                if let Some(false) = self.const_range_contains(&*range, value) {\n                     // `value` is not contained in the testing range,\n                     // so `value` can be matched only if this test fails.\n                     Some(1)\n@@ -754,7 +754,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn const_range_contains(\n         &self,\n-        range: PatRange<'tcx>,\n+        range: &PatRange<'tcx>,\n         value: ConstantKind<'tcx>,\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n@@ -772,7 +772,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn values_not_contained_in_range(\n         &self,\n-        range: PatRange<'tcx>,\n+        range: &PatRange<'tcx>,\n         options: &FxIndexMap<ConstantKind<'tcx>, u128>,\n     ) -> Option<bool> {\n         for &val in options.keys() {"}, {"sha": "7f975d217bd3719e56b28243bd4be1ad9b2f012c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -252,7 +252,11 @@ impl IntRange {\n         let kind = if lo == hi {\n             PatKind::Constant { value: lo_const }\n         } else {\n-            PatKind::Range(PatRange { lo: lo_const, hi: hi_const, end: RangeEnd::Included })\n+            PatKind::Range(Box::new(PatRange {\n+                lo: lo_const,\n+                hi: hi_const,\n+                end: RangeEnd::Included,\n+            }))\n         };\n \n         Pat { ty, span: DUMMY_SP, kind }\n@@ -1402,7 +1406,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                     }\n                 }\n             }\n-            &PatKind::Range(PatRange { lo, hi, end }) => {\n+            &PatKind::Range(box PatRange { lo, hi, end }) => {\n                 let ty = lo.ty();\n                 ctor = if let Some(int_range) = IntRange::from_range(\n                     cx.tcx,\n@@ -1511,7 +1515,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                 }\n             }\n             &Str(value) => PatKind::Constant { value },\n-            &FloatRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n+            &FloatRange(lo, hi, end) => PatKind::Range(Box::new(PatRange { lo, hi, end })),\n             IntRange(range) => return range.to_pat(cx.tcx, self.ty),\n             Wildcard | NonExhaustive => PatKind::Wild,\n             Missing { .. } => bug!("}, {"sha": "b02b6b6f5ca62c490ceaa566597819f1d13a991f", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -134,7 +134,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         match (end, cmp) {\n             // `x..y` where `x < y`.\n             // Non-empty because the range includes at least `x`.\n-            (RangeEnd::Excluded, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),\n+            (RangeEnd::Excluded, Some(Ordering::Less)) => {\n+                PatKind::Range(Box::new(PatRange { lo, hi, end }))\n+            }\n             // `x..y` where `x >= y`. The range is empty => error.\n             (RangeEnd::Excluded, _) => {\n                 struct_span_err!(\n@@ -149,7 +151,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             // `x..=y` where `x == y`.\n             (RangeEnd::Included, Some(Ordering::Equal)) => PatKind::Constant { value: lo },\n             // `x..=y` where `x < y`.\n-            (RangeEnd::Included, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),\n+            (RangeEnd::Included, Some(Ordering::Less)) => {\n+                PatKind::Range(Box::new(PatRange { lo, hi, end }))\n+            }\n             // `x..=y` where `x > y` hence the range is empty => error.\n             (RangeEnd::Included, _) => {\n                 let mut err = struct_span_err!(\n@@ -735,7 +739,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatKind<'tcx> {\n                 PatKind::Deref { subpattern: subpattern.fold_with(folder) }\n             }\n             PatKind::Constant { value } => PatKind::Constant { value },\n-            PatKind::Range(range) => PatKind::Range(range),\n+            PatKind::Range(ref range) => PatKind::Range(range.clone()),\n             PatKind::Slice { ref prefix, ref slice, ref suffix } => PatKind::Slice {\n                 prefix: prefix.fold_with(folder),\n                 slice: slice.fold_with(folder),"}, {"sha": "bb6b3e1ff5d7482f0700b3d324819ae2df70f3be", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4c8eb1a3add142c2380aecdd46ec32e42a9900/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n                 match pat.kind {\n                     thir::PatKind::Constant { value } => value.has_param_types_or_consts(),\n-                    thir::PatKind::Range(thir::PatRange { lo, hi, .. }) => {\n+                    thir::PatKind::Range(box thir::PatRange { lo, hi, .. }) => {\n                         lo.has_param_types_or_consts() || hi.has_param_types_or_consts()\n                     }\n                     _ => false,"}]}