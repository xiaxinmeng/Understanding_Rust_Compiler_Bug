{"sha": "1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "node_id": "C_kwDOAAsO6NoAKDE0NTliMzEyOGUyODhhODVmY2M0ZGQxZmVlN2FkYTJjZGNmMjg3OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T21:16:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T21:16:57Z"}, "message": "Auto merge of #109538 - matthiaskrgr:rollup-ct58npj, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #106964 (Clarify `Error::last_os_error` can be weird)\n - #107718 (Add `-Z time-passes-format` to allow specifying a JSON output for `-Z time-passes`)\n - #107880 (Lint ambiguous glob re-exports)\n - #108549 (Remove issue number for `link_cfg`)\n - #108588 (Fix the ffi_unwind_calls lint documentation)\n - #109231 (Add `try_canonicalize` to `rustc_fs_util` and use it over `fs::canonicalize`)\n - #109472 (Add parentheses properly for method calls)\n - #109487 (Move useless_anynous_reexport lint into unused_imports)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f31be534855b77ac6d4ac49aeb9374499be2fe0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31be534855b77ac6d4ac49aeb9374499be2fe0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "html_url": "https://github.com/rust-lang/rust/commit/1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2163008763c326ec4003e07b8e6eef0c98f6204", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2163008763c326ec4003e07b8e6eef0c98f6204", "html_url": "https://github.com/rust-lang/rust/commit/e2163008763c326ec4003e07b8e6eef0c98f6204"}, {"sha": "3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "html_url": "https://github.com/rust-lang/rust/commit/3961ef5bc84f8f6057e34bf61b92561bef5c8e64"}], "stats": {"total": 832, "additions": 566, "deletions": 266}, "files": [{"sha": "449f0c73588eb83a52de26215e0b16b5720dc753", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -4523,6 +4523,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n+ \"serde_json\",\n  \"smallvec\",\n  \"stable_deref_trait\",\n  \"stacker\",\n@@ -4826,6 +4827,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n+ \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_hir_analysis\",\n  \"rustc_hir_typeck\",\n@@ -4950,6 +4952,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_feature\",\n+ \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\",\n  \"rustc_index\",\n@@ -5335,6 +5338,7 @@ dependencies = [\n  \"rustc_abi\",\n  \"rustc_data_structures\",\n  \"rustc_feature\",\n+ \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "e5bae009ed64b9651b927d08988b406e7e54987a", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -361,12 +361,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n             .join(sess);\n \n-        sess.time(\"llvm_dump_timing_file\", || {\n-            if sess.opts.unstable_opts.llvm_time_trace {\n+        if sess.opts.unstable_opts.llvm_time_trace {\n+            sess.time(\"llvm_dump_timing_file\", || {\n                 let file_name = outputs.with_extension(\"llvm_timings.json\");\n                 llvm_util::time_trace_profiler_finish(&file_name);\n-            }\n-        });\n+            });\n+        }\n \n         Ok((codegen_results, work_products))\n     }"}, {"sha": "c3c8649dbff47b280bfb944f00d7a002f7c79041", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -786,6 +786,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             total_codegen_time,\n             start_rss.unwrap(),\n             end_rss,\n+            tcx.sess.opts.unstable_opts.time_passes_format,\n         );\n     }\n "}, {"sha": "056ee1f63be0311799a7a49c484e9454c4006347", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -21,6 +21,7 @@ rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n+serde_json = \"1.0.59\"\n smallvec = { version = \"1.8.1\", features = [\n     \"const_generics\",\n     \"union\","}, {"sha": "513df666d0da1bf646056f43e5a701f5ff73effc", "filename": "compiler/rustc_data_structures/src/graph/scc/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -56,7 +56,7 @@ fn test_three_sccs() {\n     assert_eq!(sccs.scc(1), 0);\n     assert_eq!(sccs.scc(2), 0);\n     assert_eq!(sccs.scc(3), 2);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n     assert_eq!(sccs.successors(1), &[0]);\n     assert_eq!(sccs.successors(2), &[0]);\n }\n@@ -113,7 +113,7 @@ fn test_find_state_2() {\n     assert_eq!(sccs.scc(2), 0);\n     assert_eq!(sccs.scc(3), 0);\n     assert_eq!(sccs.scc(4), 0);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n }\n \n #[test]\n@@ -138,7 +138,7 @@ fn test_find_state_3() {\n     assert_eq!(sccs.scc(3), 0);\n     assert_eq!(sccs.scc(4), 0);\n     assert_eq!(sccs.scc(5), 1);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n     assert_eq!(sccs.successors(1), &[0]);\n }\n "}, {"sha": "7c866da60090f9541c333c138f773396c2e4be0c", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -27,11 +27,11 @@ fn successors() {\n     let graph = create_graph();\n     assert_eq!(graph.successors(0), &[1]);\n     assert_eq!(graph.successors(1), &[2, 3]);\n-    assert_eq!(graph.successors(2), &[]);\n+    assert_eq!(graph.successors(2), &[] as &[usize]);\n     assert_eq!(graph.successors(3), &[4]);\n-    assert_eq!(graph.successors(4), &[]);\n+    assert_eq!(graph.successors(4), &[] as &[usize]);\n     assert_eq!(graph.successors(5), &[1]);\n-    assert_eq!(graph.successors(6), &[]);\n+    assert_eq!(graph.successors(6), &[] as &[usize]);\n }\n \n #[test]"}, {"sha": "58a0609e29655dff934ab6f553ba6a6ed1918db3", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -97,6 +97,7 @@ use std::time::{Duration, Instant};\n pub use measureme::EventId;\n use measureme::{EventIdBuilder, Profiler, SerializableString, StringId};\n use parking_lot::RwLock;\n+use serde_json::json;\n use smallvec::SmallVec;\n \n bitflags::bitflags! {\n@@ -145,6 +146,15 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n /// Something that uniquely identifies a query invocation.\n pub struct QueryInvocationId(pub u32);\n \n+/// Which format to use for `-Z time-passes`\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TimePassesFormat {\n+    /// Emit human readable text\n+    Text,\n+    /// Emit structured JSON\n+    Json,\n+}\n+\n /// A reference to the SelfProfiler. It can be cloned and sent across thread\n /// boundaries at will.\n #[derive(Clone)]\n@@ -158,14 +168,14 @@ pub struct SelfProfilerRef {\n     // actually enabled.\n     event_filter_mask: EventFilter,\n \n-    // Print verbose generic activities to stderr?\n-    print_verbose_generic_activities: bool,\n+    // Print verbose generic activities to stderr.\n+    print_verbose_generic_activities: Option<TimePassesFormat>,\n }\n \n impl SelfProfilerRef {\n     pub fn new(\n         profiler: Option<Arc<SelfProfiler>>,\n-        print_verbose_generic_activities: bool,\n+        print_verbose_generic_activities: Option<TimePassesFormat>,\n     ) -> SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n@@ -207,9 +217,10 @@ impl SelfProfilerRef {\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity(&self, event_label: &'static str) -> VerboseTimingGuard<'_> {\n-        let message = self.print_verbose_generic_activities.then(|| event_label.to_owned());\n+        let message_and_format =\n+            self.print_verbose_generic_activities.map(|format| (event_label.to_owned(), format));\n \n-        VerboseTimingGuard::start(message, self.generic_activity(event_label))\n+        VerboseTimingGuard::start(message_and_format, self.generic_activity(event_label))\n     }\n \n     /// Like `verbose_generic_activity`, but with an extra arg.\n@@ -221,11 +232,14 @@ impl SelfProfilerRef {\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = self\n+        let message_and_format = self\n             .print_verbose_generic_activities\n-            .then(|| format!(\"{}({})\", event_label, event_arg.borrow()));\n+            .map(|format| (format!(\"{}({})\", event_label, event_arg.borrow()), format));\n \n-        VerboseTimingGuard::start(message, self.generic_activity_with_arg(event_label, event_arg))\n+        VerboseTimingGuard::start(\n+            message_and_format,\n+            self.generic_activity_with_arg(event_label, event_arg),\n+        )\n     }\n \n     /// Start profiling a generic activity. Profiling continues until the\n@@ -703,17 +717,32 @@ impl<'a> TimingGuard<'a> {\n     }\n }\n \n+struct VerboseInfo {\n+    start_time: Instant,\n+    start_rss: Option<usize>,\n+    message: String,\n+    format: TimePassesFormat,\n+}\n+\n #[must_use]\n pub struct VerboseTimingGuard<'a> {\n-    start_and_message: Option<(Instant, Option<usize>, String)>,\n+    info: Option<VerboseInfo>,\n     _guard: TimingGuard<'a>,\n }\n \n impl<'a> VerboseTimingGuard<'a> {\n-    pub fn start(message: Option<String>, _guard: TimingGuard<'a>) -> Self {\n+    pub fn start(\n+        message_and_format: Option<(String, TimePassesFormat)>,\n+        _guard: TimingGuard<'a>,\n+    ) -> Self {\n         VerboseTimingGuard {\n             _guard,\n-            start_and_message: message.map(|msg| (Instant::now(), get_resident_set_size(), msg)),\n+            info: message_and_format.map(|(message, format)| VerboseInfo {\n+                start_time: Instant::now(),\n+                start_rss: get_resident_set_size(),\n+                message,\n+                format,\n+            }),\n         }\n     }\n \n@@ -726,10 +755,10 @@ impl<'a> VerboseTimingGuard<'a> {\n \n impl Drop for VerboseTimingGuard<'_> {\n     fn drop(&mut self) {\n-        if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n+        if let Some(info) = &self.info {\n             let end_rss = get_resident_set_size();\n-            let dur = start_time.elapsed();\n-            print_time_passes_entry(message, dur, start_rss, end_rss);\n+            let dur = info.start_time.elapsed();\n+            print_time_passes_entry(&info.message, dur, info.start_rss, end_rss, info.format);\n         }\n     }\n }\n@@ -739,7 +768,22 @@ pub fn print_time_passes_entry(\n     dur: Duration,\n     start_rss: Option<usize>,\n     end_rss: Option<usize>,\n+    format: TimePassesFormat,\n ) {\n+    match format {\n+        TimePassesFormat::Json => {\n+            let json = json!({\n+                \"pass\": what,\n+                \"time\": dur.as_secs_f64(),\n+                \"rss_start\": start_rss,\n+                \"rss_end\": end_rss,\n+            });\n+            eprintln!(\"time: {}\", json.to_string());\n+            return;\n+        }\n+        TimePassesFormat::Text => (),\n+    }\n+\n     // Print the pass if its duration is greater than 5 ms, or it changed the\n     // measured RSS.\n     let is_notable = || {"}, {"sha": "1e835f6065a6379d3d6493b16f477837f1d4e852", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -20,7 +20,9 @@ pub extern crate rustc_plugin_impl as plugin;\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::{traits::CodegenBackend, CodegenErrors, CodegenResults};\n-use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n+use rustc_data_structures::profiling::{\n+    get_resident_set_size, print_time_passes_entry, TimePassesFormat,\n+};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{\n@@ -161,7 +163,7 @@ pub trait Callbacks {\n \n #[derive(Default)]\n pub struct TimePassesCallbacks {\n-    time_passes: bool,\n+    time_passes: Option<TimePassesFormat>,\n }\n \n impl Callbacks for TimePassesCallbacks {\n@@ -171,7 +173,8 @@ impl Callbacks for TimePassesCallbacks {\n         // If a --print=... option has been given, we don't print the \"total\"\n         // time because it will mess up the --print output. See #64339.\n         //\n-        self.time_passes = config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes;\n+        self.time_passes = (config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes)\n+            .then(|| config.opts.unstable_opts.time_passes_format);\n         config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n@@ -1354,9 +1357,9 @@ pub fn main() -> ! {\n         RunCompiler::new(&args, &mut callbacks).run()\n     });\n \n-    if callbacks.time_passes {\n+    if let Some(format) = callbacks.time_passes {\n         let end_rss = get_resident_set_size();\n-        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n+        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss, format);\n     }\n \n     process::exit(exit_code)"}, {"sha": "b7d280b8751c91f76f9de918a433da78695dea11", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -160,6 +160,8 @@ declare_features! (\n     (active, intrinsics, \"1.0.0\", None, None),\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n+    /// Allows `#[link(..., cfg(..))]`; perma-unstable per #37406\n+    (active, link_cfg, \"1.14.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n@@ -432,8 +434,6 @@ declare_features! (\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n     /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n-    /// Allows `#[link(..., cfg(..))]`.\n-    (active, link_cfg, \"1.14.0\", Some(37406), None),\n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n     /// Give access to additional metadata about declarative macro meta-variables."}, {"sha": "81d6333814544b84fd8e8a10f85bb3a394d437b2", "filename": "compiler/rustc_fs_util/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_fs_util%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,10 +1,11 @@\n+#![feature(absolute_path)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n use std::ffi::CString;\n use std::fs;\n use std::io;\n-use std::path::{Path, PathBuf};\n+use std::path::{absolute, Path, PathBuf};\n \n // Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n // verbatim paths under the hood to non-verbatim paths! This manifests itself as\n@@ -91,3 +92,8 @@ pub fn path_to_c_string(p: &Path) -> CString {\n pub fn path_to_c_string(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }\n+\n+#[inline]\n+pub fn try_canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n+    fs::canonicalize(&path).or_else(|_| absolute(&path))\n+}"}, {"sha": "465e787c92ae618ee3a0503534af3f3bf104a883", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -133,8 +133,8 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n         check_impl(tcx, impl_def_id, trait_ref);\n         check_object_overlap(tcx, impl_def_id, trait_ref);\n \n-        tcx.sess.time(\"unsafety_checking\", || unsafety::check_item(tcx, impl_def_id));\n-        tcx.sess.time(\"orphan_checking\", || tcx.ensure().orphan_check_impl(impl_def_id));\n+        unsafety::check_item(tcx, impl_def_id);\n+        tcx.ensure().orphan_check_impl(impl_def_id);\n     }\n \n     builtin::check_trait(tcx, def_id);"}, {"sha": "d6f83838a041783d5d0278573acefd3770e0cd07", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -108,7 +108,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_errors::ErrorGuaranteed;\n-use rustc_fs_util::{link_or_copy, LinkOrCopy};\n+use rustc_fs_util::{link_or_copy, try_canonicalize, LinkOrCopy};\n use rustc_session::{Session, StableCrateId};\n use rustc_span::Symbol;\n \n@@ -223,7 +223,7 @@ pub fn prepare_session_directory(\n     // because, on windows, long paths can cause problems;\n     // canonicalization inserts this weird prefix that makes windows\n     // tolerate long paths.\n-    let crate_dir = match crate_dir.canonicalize() {\n+    let crate_dir = match try_canonicalize(&crate_dir) {\n         Ok(v) => v,\n         Err(err) => {\n             return Err(sess.emit_err(errors::CanonicalizePath { path: crate_dir, err }));\n@@ -867,7 +867,7 @@ fn all_except_most_recent(\n /// before passing it to std::fs::remove_dir_all(). This will convert the path\n /// into the '\\\\?\\' format, which supports much longer paths.\n fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n-    let canonicalized = match std_fs::canonicalize(p) {\n+    let canonicalized = match try_canonicalize(p) {\n         Ok(canonicalized) => canonicalized,\n         Err(err) if err.kind() == io::ErrorKind::NotFound => return Ok(()),\n         Err(err) => return Err(err),\n@@ -877,7 +877,7 @@ fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n }\n \n fn safe_remove_file(p: &Path) -> io::Result<()> {\n-    let canonicalized = match std_fs::canonicalize(p) {\n+    let canonicalized = match try_canonicalize(p) {\n         Ok(canonicalized) => canonicalized,\n         Err(err) if err.kind() == io::ErrorKind::NotFound => return Ok(()),\n         Err(err) => return Err(err),"}, {"sha": "96d6a1cb062ee4e3d0705e84e7e5c4a7fbe3d2a8", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -16,6 +16,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "413b40ab808e445998b425300374f82867800a1b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -11,6 +11,7 @@ use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::PResult;\n use rustc_expand::base::{ExtCtxt, LintStoreExpand};\n+use rustc_fs_util::try_canonicalize;\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n@@ -408,12 +409,12 @@ where\n }\n \n fn output_contains_path(output_paths: &[PathBuf], input_path: &Path) -> bool {\n-    let input_path = input_path.canonicalize().ok();\n+    let input_path = try_canonicalize(input_path).ok();\n     if input_path.is_none() {\n         return false;\n     }\n     let check = |output_path: &PathBuf| {\n-        if output_path.canonicalize().ok() == input_path { Some(()) } else { None }\n+        if try_canonicalize(output_path).ok() == input_path { Some(()) } else { None }\n     };\n     check_output(output_paths, check).is_some()\n }"}, {"sha": "eb5990507fb6dc1eb93ff3bc9c22af025141e724", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -2,6 +2,7 @@\n use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::profiling::TimePassesFormat;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n use rustc_session::config::Input;\n@@ -699,6 +700,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(threads, 99);\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n+    untracked!(time_passes_format, TimePassesFormat::Json);\n     untracked!(trace_macros, true);\n     untracked!(track_diagnostics, true);\n     untracked!(trim_diagnostic_paths, false);"}, {"sha": "68e62c9789aed9fda1e5a0118d1642cd4f8c6f95", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -508,6 +508,3 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n-\n-lint_useless_anonymous_reexport = useless anonymous re-export\n-    .note = only anonymous re-exports of traits are useful, this is {$article} `{$desc}`"}, {"sha": "626c09fea07ac46a6ad04969a2780d865eb1267b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -910,6 +910,10 @@ pub trait LintContext: Sized {\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+                BuiltinLintDiagnostics::AmbiguousGlobReexports { name, namespace, first_reexport_span, duplicate_reexport_span } => {\n+                    db.span_label(first_reexport_span, format!(\"the name `{}` in the {} namespace is first re-exported here\", name, namespace));\n+                    db.span_label(duplicate_reexport_span, format!(\"but the name `{}` in the {} namespace is also re-exported here\", name, namespace));\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(db)"}, {"sha": "b3578540516d000b98495ca9044220d37720318d", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -74,7 +74,6 @@ mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n-mod reexports;\n mod traits;\n mod types;\n mod unused;\n@@ -112,7 +111,6 @@ use noop_method_call::*;\n use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n-use reexports::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -244,7 +242,6 @@ late_lint_methods!(\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n             MapUnitFn: MapUnitFn,\n-            UselessAnonymousReexport: UselessAnonymousReexport,\n         ]\n     ]\n );"}, {"sha": "308c02929ca42b2e469d5c01caf5a3ff55b3c086", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1528,11 +1528,3 @@ pub struct UnusedAllocationDiag;\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_allocation_mut)]\n pub struct UnusedAllocationMutDiag;\n-\n-#[derive(LintDiagnostic)]\n-#[diag(lint_useless_anonymous_reexport)]\n-#[note]\n-pub struct UselessAnonymousReexportDiag {\n-    pub article: &'static str,\n-    pub desc: &'static str,\n-}"}, {"sha": "8737a57ea0264cddb1476d51411acbed456d027f", "filename": "compiler/rustc_lint/src/reexports.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2163008763c326ec4003e07b8e6eef0c98f6204/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Freexports.rs?ref=e2163008763c326ec4003e07b8e6eef0c98f6204", "patch": "@@ -1,82 +0,0 @@\n-use crate::lints::UselessAnonymousReexportDiag;\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{Item, ItemKind, UseKind};\n-use rustc_middle::ty::Visibility;\n-use rustc_span::symbol::kw;\n-use rustc_span::Span;\n-\n-declare_lint! {\n-    /// The `useless_anonymous_reexport` lint checks if anonymous re-exports\n-    /// are re-exports of traits.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![deny(useless_anonymous_reexport)]\n-    ///\n-    /// mod sub {\n-    ///     pub struct Bar;\n-    /// }\n-    ///\n-    /// pub use self::sub::Bar as _;\n-    /// # fn main() {}\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Anonymous re-exports are only useful if it's a re-export of a trait\n-    /// in case you want to give access to it. If you re-export any other kind,\n-    /// you won't be able to use it since its name won't be accessible.\n-    pub USELESS_ANONYMOUS_REEXPORT,\n-    Warn,\n-    \"useless anonymous re-export\"\n-}\n-\n-declare_lint_pass!(UselessAnonymousReexport => [USELESS_ANONYMOUS_REEXPORT]);\n-\n-fn emit_err(cx: &LateContext<'_>, span: Span, def_id: DefId) {\n-    let article = cx.tcx.def_descr_article(def_id);\n-    let desc = cx.tcx.def_descr(def_id);\n-    cx.emit_spanned_lint(\n-        USELESS_ANONYMOUS_REEXPORT,\n-        span,\n-        UselessAnonymousReexportDiag { article, desc },\n-    );\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for UselessAnonymousReexport {\n-    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Use(path, kind) = item.kind &&\n-            !matches!(kind, UseKind::Glob) &&\n-            item.ident.name == kw::Underscore &&\n-            // We only want re-exports. If it's just a `use X;`, then we ignore it.\n-            match cx.tcx.local_visibility(item.owner_id.def_id) {\n-                Visibility::Public => true,\n-                Visibility::Restricted(level) => {\n-                    level != cx.tcx.parent_module_from_def_id(item.owner_id.def_id)\n-                }\n-            }\n-        {\n-            for def_id in path.res.iter().filter_map(|r| r.opt_def_id()) {\n-                match cx.tcx.def_kind(def_id) {\n-                    DefKind::Trait | DefKind::TraitAlias => {}\n-                    DefKind::TyAlias => {\n-                        let ty = cx.tcx.type_of(def_id);\n-                        if !ty.0.is_trait() {\n-                            emit_err(cx, item.span, def_id);\n-                            break;\n-                        }\n-                    }\n-                    _ => {\n-                        emit_err(cx, item.span, def_id);\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "9d6ab0b75df177bc86ddf6c2802eb5626e87f6da", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -3230,6 +3230,45 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `ambiguous_glob_reexports` lint detects cases where names re-exported via globs\n+    /// collide. Downstream users trying to use the same name re-exported from multiple globs\n+    /// will receive a warning pointing out redefinition of the same name.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(ambiguous_glob_reexports)]\n+    /// pub mod foo {\n+    ///     pub type X = u8;\n+    /// }\n+    ///\n+    /// pub mod bar {\n+    ///     pub type Y = u8;\n+    ///     pub type X = u8;\n+    /// }\n+    ///\n+    /// pub use foo::*;\n+    /// pub use bar::*;\n+    ///\n+    ///\n+    /// pub fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This was previously accepted but it could silently break a crate's downstream users code.\n+    /// For example, if `foo::*` and `bar::*` were re-exported before `bar::X` was added to the\n+    /// re-exports, down stream users could use `this_crate::X` without problems. However, adding\n+    /// `bar::X` would cause compilation errors in downstream crates because `X` is defined\n+    /// multiple times in the same namespace of `this_crate`.\n+    pub AMBIGUOUS_GLOB_REEXPORTS,\n+    Warn,\n+    \"ambiguous glob re-exports\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3337,6 +3376,7 @@ declare_lint_pass! {\n         NAMED_ARGUMENTS_USED_POSITIONALLY,\n         IMPLIED_BOUNDS_ENTAILMENT,\n         BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n+        AMBIGUOUS_GLOB_REEXPORTS,\n     ]\n }\n \n@@ -3968,14 +4008,9 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,ignore (need FFI)\n-    /// #![feature(ffi_unwind_calls)]\n+    /// ```rust\n     /// #![feature(c_unwind)]\n-    ///\n-    /// # mod impl {\n-    /// #     #[no_mangle]\n-    /// #     pub fn \"C-unwind\" fn foo() {}\n-    /// # }\n+    /// #![warn(ffi_unwind_calls)]\n     ///\n     /// extern \"C-unwind\" {\n     ///     fn foo();"}, {"sha": "69a8b691ab21625147ff4048fc54d31c4c05deb6", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -529,6 +529,16 @@ pub enum BuiltinLintDiagnostics {\n         vis_span: Span,\n         ident_span: Span,\n     },\n+    AmbiguousGlobReexports {\n+        /// The name for which collision(s) have occurred.\n+        name: String,\n+        /// The name space for whihc the collision(s) occurred in.\n+        namespace: String,\n+        /// Span where the name is first re-exported.\n+        first_reexport_span: Span,\n+        /// Span where the same name is also re-exported.\n+        duplicate_reexport_span: Span,\n+    },\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "4d7c133e09bc4f1e19291b2b71153933884bdc48", "filename": "compiler/rustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2FCargo.toml?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -18,6 +18,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_hir_pretty = { path = \"../rustc_hir_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "79c42a128e795a39c345e77e219b7fd502704ca0", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -222,6 +222,7 @@ use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n+use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::FileSearch;\n@@ -236,7 +237,7 @@ use snap::read::FrameDecoder;\n use std::borrow::Cow;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n-use std::{cmp, fmt, fs};\n+use std::{cmp, fmt};\n \n #[derive(Clone)]\n pub(crate) struct CrateLocator<'a> {\n@@ -441,7 +442,7 @@ impl<'a> CrateLocator<'a> {\n                 info!(\"lib candidate: {}\", spf.path.display());\n \n                 let (rlibs, rmetas, dylibs) = candidates.entry(hash.to_string()).or_default();\n-                let path = fs::canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n+                let path = try_canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n                 if seen_paths.contains(&path) {\n                     continue;\n                 };\n@@ -636,7 +637,7 @@ impl<'a> CrateLocator<'a> {\n             // as well.\n             if let Some((prev, _)) = &ret {\n                 let sysroot = self.sysroot;\n-                let sysroot = sysroot.canonicalize().unwrap_or_else(|_| sysroot.to_path_buf());\n+                let sysroot = try_canonicalize(sysroot).unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {\n                     continue;\n                 }"}, {"sha": "dbf6cec788b5a15aebe0e8dd0c25a8180348845c", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -32,9 +32,10 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{pluralize, MultiSpan};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_EXTERN_CRATES, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n@@ -58,6 +59,7 @@ struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n+    base_use_is_pub: bool,\n }\n \n struct ExternCrateToLint {\n@@ -110,6 +112,35 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             unused: Default::default(),\n         })\n     }\n+\n+    fn check_import_as_underscore(&mut self, item: &ast::UseTree, id: ast::NodeId) {\n+        match item.kind {\n+            ast::UseTreeKind::Simple(Some(ident)) => {\n+                if ident.name == kw::Underscore\n+                    && !self\n+                        .r\n+                        .import_res_map\n+                        .get(&id)\n+                        .map(|per_ns| {\n+                            per_ns.iter().filter_map(|res| res.as_ref()).any(|res| {\n+                                matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))\n+                            })\n+                        })\n+                        .unwrap_or(false)\n+                {\n+                    self.unused_import(self.base_id).add(id);\n+                }\n+            }\n+            ast::UseTreeKind::Nested(ref items) => self.check_imports_as_underscore(items),\n+            _ => {}\n+        }\n+    }\n+\n+    fn check_imports_as_underscore(&mut self, items: &[(ast::UseTree, ast::NodeId)]) {\n+        for (item, id) in items {\n+            self.check_import_as_underscore(item, *id);\n+        }\n+    }\n }\n \n impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n@@ -119,7 +150,8 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             // whether they're used or not. Also ignore imports with a dummy span\n             // because this means that they were generated in some fashion by the\n             // compiler and we don't need to consider them.\n-            ast::ItemKind::Use(..) if item.vis.kind.is_pub() || item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) if item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) => self.base_use_is_pub = item.vis.kind.is_pub(),\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 self.extern_crate_items.push(ExternCrateToLint {\n                     id: item.id,\n@@ -146,6 +178,11 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             self.base_use_tree = Some(use_tree);\n         }\n \n+        if self.base_use_is_pub {\n+            self.check_import_as_underscore(use_tree, id);\n+            return;\n+        }\n+\n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n             if items.is_empty() {\n                 self.unused_import(self.base_id).add(id);\n@@ -300,6 +337,7 @@ impl Resolver<'_, '_> {\n             base_use_tree: None,\n             base_id: ast::DUMMY_NODE_ID,\n             item_span: DUMMY_SP,\n+            base_use_is_pub: false,\n         };\n         visit::walk_crate(&mut visitor, krate);\n "}, {"sha": "a1ae9b8a52181c9ba52788fcb181a220ebfa8c30", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -4,6 +4,7 @@ use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n use rustc_ast::Crate;\n use rustc_ast::EnumDef;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_ID;\n@@ -70,11 +71,11 @@ impl Resolver<'_, '_> {\n impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n     /// Fills the `Resolver::effective_visibilities` table with public & exported items\n     /// For now, this doesn't resolve macros (FIXME) and cannot resolve Impl, as we\n-    /// need access to a TyCtxt for that.\n+    /// need access to a TyCtxt for that. Returns the set of ambiguous re-exports.\n     pub(crate) fn compute_effective_visibilities<'c>(\n         r: &'r mut Resolver<'a, 'tcx>,\n         krate: &'c Crate,\n-    ) {\n+    ) -> FxHashSet<Interned<'a, NameBinding<'a>>> {\n         let mut visitor = EffectiveVisibilitiesVisitor {\n             r,\n             def_effective_visibilities: Default::default(),\n@@ -93,18 +94,26 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         }\n         visitor.r.effective_visibilities = visitor.def_effective_visibilities;\n \n+        let mut exported_ambiguities = FxHashSet::default();\n+\n         // Update visibilities for import def ids. These are not used during the\n         // `EffectiveVisibilitiesVisitor` pass, because we have more detailed binding-based\n         // information, but are used by later passes. Effective visibility of an import def id\n         // is the maximum value among visibilities of bindings corresponding to that def id.\n         for (binding, eff_vis) in visitor.import_effective_visibilities.iter() {\n             let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n-            if let Some(node_id) = import.id() {\n-                r.effective_visibilities.update_eff_vis(r.local_def_id(node_id), eff_vis, r.tcx)\n+            if !binding.is_ambiguity() {\n+                if let Some(node_id) = import.id() {\n+                    r.effective_visibilities.update_eff_vis(r.local_def_id(node_id), eff_vis, r.tcx)\n+                }\n+            } else if binding.ambiguity.is_some() && eff_vis.is_public_at_level(Level::Reexported) {\n+                exported_ambiguities.insert(*binding);\n             }\n         }\n \n         info!(\"resolve::effective_visibilities: {:#?}\", r.effective_visibilities);\n+\n+        exported_ambiguities\n     }\n \n     /// Update effective visibilities of bindings in the given module,\n@@ -115,21 +124,44 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         let resolutions = self.r.resolutions(module);\n \n         for (_, name_resolution) in resolutions.borrow().iter() {\n-            if let Some(mut binding) = name_resolution.borrow().binding() && !binding.is_ambiguity() {\n-                // Set the given effective visibility level to `Level::Direct` and\n-                // sets the rest of the `use` chain to `Level::Reexported` until\n-                // we hit the actual exported item.\n-                let mut parent_id = ParentId::Def(module_id);\n-                while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind {\n-                    let binding_id = ImportId::new_unchecked(binding);\n-                    self.update_import(binding_id, parent_id);\n-\n-                    parent_id = ParentId::Import(binding_id);\n-                    binding = nested_binding;\n-                }\n+            if let Some(mut binding) = name_resolution.borrow().binding() {\n+                if !binding.is_ambiguity() {\n+                    // Set the given effective visibility level to `Level::Direct` and\n+                    // sets the rest of the `use` chain to `Level::Reexported` until\n+                    // we hit the actual exported item.\n+                    let mut parent_id = ParentId::Def(module_id);\n+                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n+                    {\n+                        let binding_id = ImportId::new_unchecked(binding);\n+                        self.update_import(binding_id, parent_id);\n+\n+                        parent_id = ParentId::Import(binding_id);\n+                        binding = nested_binding;\n+                    }\n+\n+                    if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n+                        self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                    }\n+                } else {\n+                    // Put the root ambiguity binding and all reexports leading to it into the\n+                    // table. They are used by the `ambiguous_glob_reexports` lint. For all\n+                    // bindings added to the table here `is_ambiguity` returns true.\n+                    let mut parent_id = ParentId::Def(module_id);\n+                    while let NameBindingKind::Import { binding: nested_binding, .. } = binding.kind\n+                    {\n+                        let binding_id = ImportId::new_unchecked(binding);\n+                        self.update_import(binding_id, parent_id);\n \n-                if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n-                    self.update_def(def_id, binding.vis.expect_local(), parent_id);\n+                        if binding.ambiguity.is_some() {\n+                            // Stop at the root ambiguity, further bindings in the chain should not\n+                            // be reexported because the root ambiguity blocks any access to them.\n+                            // (Those further bindings are most likely not ambiguities themselves.)\n+                            break;\n+                        }\n+\n+                        parent_id = ParentId::Import(binding_id);\n+                        binding = nested_binding;\n+                    }\n                 }\n             }\n         }"}, {"sha": "bc17ce571a7c03cdd3f67a7b880f234ed3c559e3", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -19,7 +19,9 @@ use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n-use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n+use rustc_session::lint::builtin::{\n+    AMBIGUOUS_GLOB_REEXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS,\n+};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::LocalExpnId;\n@@ -510,6 +512,34 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn check_reexport_ambiguities(\n+        &mut self,\n+        exported_ambiguities: FxHashSet<Interned<'a, NameBinding<'a>>>,\n+    ) {\n+        for module in self.arenas.local_modules().iter() {\n+            module.for_each_child(self, |this, ident, ns, binding| {\n+                if let NameBindingKind::Import { import, .. } = binding.kind\n+                && let Some((amb_binding, _)) = binding.ambiguity\n+                && binding.res() != Res::Err\n+                && exported_ambiguities.contains(&Interned::new_unchecked(binding))\n+                {\n+                    this.lint_buffer.buffer_lint_with_diagnostic(\n+                        AMBIGUOUS_GLOB_REEXPORTS,\n+                        import.root_id,\n+                        import.root_span,\n+                        \"ambiguous glob re-exports\",\n+                        BuiltinLintDiagnostics::AmbiguousGlobReexports {\n+                            name: ident.to_string(),\n+                            namespace: ns.descr().to_string(),\n+                            first_reexport_span: import.root_span,\n+                            duplicate_reexport_span: amb_binding.span,\n+                        },\n+                    );\n+                }\n+            });\n+        }\n+    }\n+\n     fn throw_unresolved_import_error(&self, errors: Vec<(&Import<'_>, UnresolvedImportError)>) {\n         if errors.is_empty() {\n             return;"}, {"sha": "7afd43c303f4d5a05ce13a26332c1febe041bce8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1475,9 +1475,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         self.tcx.sess.time(\"resolve_crate\", || {\n             self.tcx.sess.time(\"finalize_imports\", || self.finalize_imports());\n-            self.tcx.sess.time(\"compute_effective_visibilities\", || {\n+            let exported_ambiguities = self.tcx.sess.time(\"compute_effective_visibilities\", || {\n                 EffectiveVisibilitiesVisitor::compute_effective_visibilities(self, krate)\n             });\n+            self.tcx.sess.time(\"check_reexport_ambiguities\", || {\n+                self.check_reexport_ambiguities(exported_ambiguities)\n+            });\n             self.tcx.sess.time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions());\n             self.tcx.sess.time(\"late_resolve_crate\", || self.late_resolve_crate(krate));\n             self.tcx.sess.time(\"resolve_main\", || self.resolve_main());"}, {"sha": "2404928b254d6da2de8d6086d8bff53fa8579768", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,6 @@\n //! A module for searching for libraries\n \n+use rustc_fs_util::try_canonicalize;\n use smallvec::{smallvec, SmallVec};\n use std::env;\n use std::fs;\n@@ -125,7 +126,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n     let target = crate::config::host_triple();\n     let mut sysroot_candidates: SmallVec<[PathBuf; 2]> =\n         smallvec![get_or_default_sysroot().expect(\"Failed finding sysroot\")];\n-    let path = current_dll_path().and_then(|s| s.canonicalize().map_err(|e| e.to_string()));\n+    let path = current_dll_path().and_then(|s| try_canonicalize(s).map_err(|e| e.to_string()));\n     if let Ok(dll) = path {\n         // use `parent` twice to chop off the file name and then also the\n         // directory containing the dll which should be either `lib` or `bin`.\n@@ -160,7 +161,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n     // Follow symlinks. If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {\n-        let path = fs::canonicalize(&path).unwrap_or(path);\n+        let path = try_canonicalize(&path).unwrap_or(path);\n         // See comments on this target function, but the gist is that\n         // gcc chokes on verbatim paths which fs::canonicalize generates\n         // so we try to avoid those kinds of paths."}, {"sha": "c75af48e80af47e79797f05c773ea84869e7dfc2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -4,6 +4,7 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n+use rustc_data_structures::profiling::TimePassesFormat;\n use rustc_errors::{LanguageIdentifier, TerminalUrl};\n use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n@@ -365,6 +366,7 @@ mod desc {\n     pub const parse_number: &str = \"a number\";\n     pub const parse_opt_number: &str = parse_number;\n     pub const parse_threads: &str = parse_number;\n+    pub const parse_time_passes_format: &str = \"`text` (default) or `json`\";\n     pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n@@ -829,6 +831,21 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_time_passes_format(slot: &mut TimePassesFormat, v: Option<&str>) -> bool {\n+        match v {\n+            None => true,\n+            Some(\"json\") => {\n+                *slot = TimePassesFormat::Json;\n+                true\n+            }\n+            Some(\"text\") => {\n+                *slot = TimePassesFormat::Text;\n+                true\n+            }\n+            Some(_) => false,\n+        }\n+    }\n+\n     pub(crate) fn parse_dump_mono_stats(slot: &mut DumpMonoStatsFormat, v: Option<&str>) -> bool {\n         match v {\n             None => true,\n@@ -1709,6 +1726,8 @@ options! {\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n+    time_passes_format: TimePassesFormat = (TimePassesFormat::Text, parse_time_passes_format, [UNTRACKED],\n+        \"the format to use for -Z time-passes (`text` (default) or `json`)\"),\n     tiny_const_eval_limit: bool = (false, parse_bool, [TRACKED],\n         \"sets a tiny, non-configurable limit for const eval; useful for compiler tests\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]"}, {"sha": "5730df9d5c6b9663b05c99ab2e4cfbead3331589", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1453,7 +1453,10 @@ pub fn build_session(\n         CguReuseTracker::new_disabled()\n     };\n \n-    let prof = SelfProfilerRef::new(self_profiler, sopts.unstable_opts.time_passes);\n+    let prof = SelfProfilerRef::new(\n+        self_profiler,\n+        sopts.unstable_opts.time_passes.then(|| sopts.unstable_opts.time_passes_format),\n+    );\n \n     let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n         Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,"}, {"sha": "1d15e2c28d837ab158ad33fed369400dd55a02d8", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,6 @@\n use crate::session::Session;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n+use rustc_fs_util::try_canonicalize;\n use std::path::{Path, PathBuf};\n \n impl Session {\n@@ -98,7 +99,7 @@ pub struct CanonicalizedPath {\n \n impl CanonicalizedPath {\n     pub fn new(path: &Path) -> Self {\n-        Self { original: path.to_owned(), canonicalized: std::fs::canonicalize(path).ok() }\n+        Self { original: path.to_owned(), canonicalized: try_canonicalize(path).ok() }\n     }\n \n     pub fn canonicalized(&self) -> &PathBuf {"}, {"sha": "4e7a8d166ae69fbbf38b8b40aa6cbed8d3231f77", "filename": "compiler/rustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2FCargo.toml?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n bitflags = \"1.2.1\"\n tracing = \"0.1\"\n serde_json = \"1.0.59\"\n+rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_abi = { path = \"../rustc_abi\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "2553b11d8789b95c2cf4534b569be9c883378d03", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -40,6 +40,7 @@ use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_fs_util::try_canonicalize;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::symbol::{sym, Symbol};\n use serde_json::Value;\n@@ -2949,7 +2950,7 @@ impl TargetTriple {\n \n     /// Creates a target triple from the passed target path.\n     pub fn from_path(path: &Path) -> Result<Self, io::Error> {\n-        let canonicalized_path = path.canonicalize()?;\n+        let canonicalized_path = try_canonicalize(path)?;\n         let contents = std::fs::read_to_string(&canonicalized_path).map_err(|err| {\n             io::Error::new(\n                 io::ErrorKind::InvalidInput,"}, {"sha": "be0817472ea414499ad52455d2063779db20bfd5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1356,6 +1356,31 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n+                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n+                        let sugg_msg = &format!(\n+                            \"consider{} borrowing here\",\n+                            if is_mut { \" mutably\" } else { \"\" }\n+                        );\n+\n+                        // Issue #109436, we need to add parentheses properly for method calls\n+                        // for example, `foo.into()` should be `(&foo).into()`\n+                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(\n+                            self.tcx.sess.source_map().span_look_ahead(span, Some(\".\"), Some(50)),\n+                        ) {\n+                            if snippet == \".\" {\n+                                err.multipart_suggestion_verbose(\n+                                    sugg_msg,\n+                                    vec![\n+                                        (span.shrink_to_lo(), format!(\"({}\", sugg_prefix)),\n+                                        (span.shrink_to_hi(), \")\".to_string()),\n+                                    ],\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                return true;\n+                            }\n+                        }\n+\n                         // Issue #104961, we need to add parentheses properly for compond expressions\n                         // for example, `x.starts_with(\"hi\".to_string() + \"you\")`\n                         // should be `x.starts_with(&(\"hi\".to_string() + \"you\"))`\n@@ -1372,14 +1397,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             _ => false,\n                         };\n \n-                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n                         let span = if needs_parens { span } else { span.shrink_to_lo() };\n-                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n-                        let sugg_msg = &format!(\n-                            \"consider{} borrowing here\",\n-                            if is_mut { \" mutably\" } else { \"\" }\n-                        );\n-\n                         let suggestions = if !needs_parens {\n                             vec![(span.shrink_to_lo(), format!(\"{}\", sugg_prefix))]\n                         } else {"}, {"sha": "1cedd6eedfaf90397a0d8476dd60cdac036dfedf", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -370,7 +370,7 @@ pub enum ErrorKind {\n \n     // \"Unusual\" error kinds which do not correspond simply to (sets\n     // of) OS error codes, should be added just above this comment.\n-    // `Other` and `Uncategorised` should remain at the end:\n+    // `Other` and `Uncategorized` should remain at the end:\n     //\n     /// A custom error that does not fall under any other I/O error kind.\n     ///\n@@ -882,6 +882,13 @@ impl Error {\n \n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n+    /// This may be a value set by Rust code constructing custom `io::Error`s,\n+    /// or if this `io::Error` was sourced from the operating system,\n+    /// it will be a value inferred from the system's error encoding.\n+    /// See [`last_os_error`] for more details.\n+    ///\n+    /// [`last_os_error`]: Error::last_os_error\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -892,7 +899,8 @@ impl Error {\n     /// }\n     ///\n     /// fn main() {\n-    ///     // Will print \"Uncategorized\".\n+    ///     // As no error has (visibly) occurred, this may print anything!\n+    ///     // It likely prints a placeholder for unidentified (non-)errors.\n     ///     print_error(Error::last_os_error());\n     ///     // Will print \"AddrInUse\".\n     ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));"}, {"sha": "034c6aa0708ec2522a2a389ff32a77d4f76298c6", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 62, "deletions": 33, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -45,6 +45,36 @@ impl Lint {\n     fn check_style(&self) -> Result<(), Box<dyn Error>> {\n         for &expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n             if expected == \"{{produces}}\" && self.is_ignored() {\n+                if self.doc_contains(\"{{produces}}\") {\n+                    return Err(format!(\n+                        \"the lint example has `ignore`, but also contains the {{{{produces}}}} marker\\n\\\n+                        \\n\\\n+                        The documentation generator cannot generate the example output when the \\\n+                        example is ignored.\\n\\\n+                        Manually include the sample output below the example. For example:\\n\\\n+                        \\n\\\n+                        /// ```rust,ignore (needs command line option)\\n\\\n+                        /// #[cfg(widnows)]\\n\\\n+                        /// fn foo() {{}}\\n\\\n+                        /// ```\\n\\\n+                        ///\\n\\\n+                        /// This will produce:\\n\\\n+                        /// \\n\\\n+                        /// ```text\\n\\\n+                        /// warning: unknown condition name used\\n\\\n+                        ///  --> lint_example.rs:1:7\\n\\\n+                        ///   |\\n\\\n+                        /// 1 | #[cfg(widnows)]\\n\\\n+                        ///   |       ^^^^^^^\\n\\\n+                        ///   |\\n\\\n+                        ///   = note: `#[warn(unexpected_cfgs)]` on by default\\n\\\n+                        /// ```\\n\\\n+                        \\n\\\n+                        Replacing the output with the text of the example you \\\n+                        compiled manually yourself.\\n\\\n+                        \"\n+                    ).into());\n+                }\n                 continue;\n             }\n             if !self.doc_contains(expected) {\n@@ -317,10 +347,10 @@ impl<'a> LintExtractor<'a> {\n                             ..,\n                             &format!(\n                                 \"This will produce:\\n\\\n-                            \\n\\\n-                            ```text\\n\\\n-                            {}\\\n-                            ```\",\n+                                \\n\\\n+                                ```text\\n\\\n+                                {}\\\n+                                ```\",\n                                 output\n                             ),\n                         );\n@@ -392,37 +422,36 @@ impl<'a> LintExtractor<'a> {\n             .filter(|line| line.starts_with('{'))\n             .map(serde_json::from_str)\n             .collect::<Result<Vec<serde_json::Value>, _>>()?;\n-        match msgs\n+        // First try to find the messages with the `code` field set to our lint.\n+        let matches: Vec<_> = msgs\n             .iter()\n-            .find(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n-        {\n-            Some(msg) => {\n-                let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                Ok(rendered.to_string())\n-            }\n-            None => {\n-                match msgs.iter().find(\n-                    |msg| matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)),\n-                ) {\n-                    Some(msg) => {\n-                        let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                        Ok(rendered.to_string())\n-                    }\n-                    None => {\n-                        let rendered: Vec<&str> =\n-                            msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n-                        let non_json: Vec<&str> =\n-                            stderr.lines().filter(|line| !line.starts_with('{')).collect();\n-                        Err(format!(\n-                            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-                            name,\n-                            non_json.join(\"\\n\"),\n-                            rendered.join(\"\\n\")\n-                        )\n-                        .into())\n-                    }\n-                }\n+            .filter(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n+            .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+            .collect();\n+        if matches.is_empty() {\n+            // Some lints override their code to something else (E0566).\n+            // Try to find something that looks like it could be our lint.\n+            let matches: Vec<_> = msgs.iter().filter(|msg|\n+                matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)))\n+                .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+                .collect();\n+            if matches.is_empty() {\n+                let rendered: Vec<&str> =\n+                    msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+                let non_json: Vec<&str> =\n+                    stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+                Err(format!(\n+                    \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+                    name,\n+                    non_json.join(\"\\n\"),\n+                    rendered.join(\"\\n\")\n+                )\n+                .into())\n+            } else {\n+                Ok(matches.join(\"\\n\"))\n             }\n+        } else {\n+            Ok(matches.join(\"\\n\"))\n         }\n     }\n "}, {"sha": "72f5f933d8db4ad7c1f48f1c360b0d0cafb4916a", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -183,6 +183,7 @@\n     -Z                               threads=val -- use a thread pool with N threads\n     -Z                      time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                           time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                    time-passes-format=val -- the format to use for -Z time-passes (`text` (default) or `json`)\n     -Z                 tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n     -Z                             tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                          trace-macros=val -- for every macro invocation, print its name and arguments (default: no)"}, {"sha": "97b6cbca41240233d39012b13e2a1274fa46877f", "filename": "tests/ui/feature-gates/feature-gate-link_cfg.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -4,7 +4,6 @@ error[E0658]: link cfg is unstable\n LL | #[link(name = \"foo\", cfg(foo))]\n    |                      ^^^^^^^^\n    |\n-   = note: see issue #37406 <https://github.com/rust-lang/rust/issues/37406> for more information\n    = help: add `#![feature(link_cfg)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "8a146378b439581b0c1b7b3894eebac534f0fbfc", "filename": "tests/ui/imports/auxiliary/glob-conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fauxiliary%2Fglob-conflict.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,3 +1,5 @@\n+#![allow(ambiguous_glob_reexports)]\n+\n mod m1 {\n     pub fn f() {}\n }"}, {"sha": "0e60c73b67a44e274dfc886d4d33e1b26f9262bb", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "031443a1f5df892f2bd5300112d66866cdae0d59", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "6bf228b23aad221d8fbf1a798186f38fb3ebd061", "filename": "tests/ui/imports/issue-99695.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "f7199f1497ab0877b12d9d9e8bb6520dc09fa75d", "filename": "tests/ui/imports/issue-99695.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "ce700ae0de9b12e42c8308a72280acc04f1c5018", "filename": "tests/ui/imports/local-modularized-tricky-fail-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,4 +1,5 @@\n #![feature(decl_macro)]\n+#![allow(ambiguous_glob_reexports)]\n \n macro_rules! define_exported { () => {\n     #[macro_export]"}, {"sha": "52a01e8bcdfe36549db5118ecdc9d3351e882959", "filename": "tests/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,12 +1,12 @@\n error[E0659]: `exported` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:29:1\n    |\n LL | exported!();\n    | ^^^^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a name from a glob import and a macro-expanded name in the same module during import or macro resolution\n note: `exported` could refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:5:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:6:5\n    |\n LL | /     macro_rules! exported {\n LL | |         () => ()\n@@ -16,23 +16,23 @@ LL | |     }\n LL |       define_exported!();\n    |       ------------------ in this macro invocation\n note: `exported` could also refer to the macro imported here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:22:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:23:5\n    |\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n    = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `panic` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n    |\n LL |     panic!();\n    |     ^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution\n    = note: `panic` could refer to a macro from prelude\n note: `panic` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:11:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:12:5\n    |\n LL | /     macro_rules! panic {\n LL | |         () => ()\n@@ -45,15 +45,15 @@ LL |       define_panic!();\n    = note: this error originates in the macro `define_panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `include` is ambiguous\n-  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n    |\n LL | include!();\n    | ^^^^^^^ ambiguous name\n    |\n    = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution\n    = note: `include` could refer to a macro from prelude\n note: `include` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:17:5\n+  --> $DIR/local-modularized-tricky-fail-1.rs:18:5\n    |\n LL | /     macro_rules! include {\n LL | |         () => ()"}, {"sha": "11ac5d07140ba41aff8f1f08cf893641a0d9e33f", "filename": "tests/ui/lint/anonymous-reexport.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,4 +1,4 @@\n-#![deny(useless_anonymous_reexport)]\n+#![deny(unused_imports)]\n #![crate_type = \"rlib\"]\n \n mod my_mod {\n@@ -9,13 +9,11 @@ mod my_mod {\n }\n \n pub use self::my_mod::Foo as _;\n-pub use self::my_mod::TyFoo as _;\n-pub use self::my_mod::Bar as _; //~ ERROR\n-pub use self::my_mod::TyBar as _; //~ ERROR\n-pub use self::my_mod::{Bar as _}; //~ ERROR\n-pub use self::my_mod::{Bar as _, Foo as _}; //~ ERROR\n-pub use self::my_mod::{Bar as _, TyBar as _};\n-//~^ ERROR\n-//~| ERROR\n+pub use self::my_mod::TyFoo as _; //~ ERROR unused import\n+pub use self::my_mod::Bar as _; //~ ERROR unused import\n+pub use self::my_mod::TyBar as _; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _}; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _, Foo as _}; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _, TyBar as _}; //~ ERROR unused imports\n #[allow(unused_imports)]\n use self::my_mod::TyBar as _;"}, {"sha": "e3854a5459ec0b3210d85abd1d362f23649954f3", "filename": "tests/ui/lint/anonymous-reexport.stderr", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.stderr?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -1,55 +1,44 @@\n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:13:1\n+error: unused import: `self::my_mod::TyFoo as _`\n+  --> $DIR/anonymous-reexport.rs:12:9\n    |\n-LL | pub use self::my_mod::Bar as _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub use self::my_mod::TyFoo as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n note: the lint level is defined here\n   --> $DIR/anonymous-reexport.rs:1:9\n    |\n-LL | #![deny(useless_anonymous_reexport)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n \n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:14:1\n+error: unused import: `self::my_mod::Bar as _`\n+  --> $DIR/anonymous-reexport.rs:13:9\n    |\n-LL | pub use self::my_mod::TyBar as _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub use self::my_mod::Bar as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused import: `self::my_mod::TyBar as _`\n+  --> $DIR/anonymous-reexport.rs:14:9\n    |\n-   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+LL | pub use self::my_mod::TyBar as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: useless anonymous re-export\n+error: unused import: `Bar as _`\n   --> $DIR/anonymous-reexport.rs:15:24\n    |\n LL | pub use self::my_mod::{Bar as _};\n    |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n \n-error: useless anonymous re-export\n+error: unused import: `Bar as _`\n   --> $DIR/anonymous-reexport.rs:16:24\n    |\n LL | pub use self::my_mod::{Bar as _, Foo as _};\n    |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n \n-error: useless anonymous re-export\n+error: unused imports: `Bar as _`, `TyBar as _`\n   --> $DIR/anonymous-reexport.rs:17:24\n    |\n LL | pub use self::my_mod::{Bar as _, TyBar as _};\n-   |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n-\n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:17:34\n-   |\n-LL | pub use self::my_mod::{Bar as _, TyBar as _};\n-   |                                  ^^^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+   |                        ^^^^^^^^  ^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "431213e25e462e4ec449ab3a08198cde500c217d", "filename": "tests/ui/resolve/issue-107563-ambiguous-glob-reexports.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -0,0 +1,33 @@\n+#![deny(ambiguous_glob_reexports)]\n+\n+pub mod foo {\n+    pub type X = u8;\n+}\n+\n+pub mod bar {\n+    pub type X = u8;\n+    pub type Y = u8;\n+}\n+\n+pub use foo::*;\n+//~^ ERROR ambiguous glob re-exports\n+pub use bar::*;\n+\n+mod ambiguous {\n+    mod m1 { pub type A = u8; }\n+    mod m2 { pub type A = u8; }\n+    pub use self::m1::*;\n+    //~^ ERROR ambiguous glob re-exports\n+    pub use self::m2::*;\n+}\n+\n+pub mod single {\n+    pub use ambiguous::A;\n+    //~^ ERROR `A` is ambiguous\n+}\n+\n+pub mod glob {\n+    pub use ambiguous::*;\n+}\n+\n+pub fn main() {}"}, {"sha": "07e61dd8643d45b44f2574713c1dcb1f3a6e4ebe", "filename": "tests/ui/resolve/issue-107563-ambiguous-glob-reexports.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-107563-ambiguous-glob-reexports.stderr?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -0,0 +1,47 @@\n+error[E0659]: `A` is ambiguous\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:25:24\n+   |\n+LL |     pub use ambiguous::A;\n+   |                        ^ ambiguous name\n+   |\n+   = note: ambiguous because of multiple glob imports of a name in the same module\n+note: `A` could refer to the type alias imported here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:19:13\n+   |\n+LL |     pub use self::m1::*;\n+   |             ^^^^^^^^^^^\n+   = help: consider adding an explicit import of `A` to disambiguate\n+note: `A` could also refer to the type alias imported here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:21:13\n+   |\n+LL |     pub use self::m2::*;\n+   |             ^^^^^^^^^^^\n+   = help: consider adding an explicit import of `A` to disambiguate\n+\n+error: ambiguous glob re-exports\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:12:9\n+   |\n+LL | pub use foo::*;\n+   |         ^^^^^^ the name `X` in the type namespace is first re-exported here\n+LL |\n+LL | pub use bar::*;\n+   |         ------ but the name `X` in the type namespace is also re-exported here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:1:9\n+   |\n+LL | #![deny(ambiguous_glob_reexports)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: ambiguous glob re-exports\n+  --> $DIR/issue-107563-ambiguous-glob-reexports.rs:19:13\n+   |\n+LL |     pub use self::m1::*;\n+   |             ^^^^^^^^^^^ the name `A` in the type namespace is first re-exported here\n+LL |\n+LL |     pub use self::m2::*;\n+   |             ----------- but the name `A` in the type namespace is also re-exported here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "e45ee5991db288c02b12b959b8b4fb3872cc3e3e", "filename": "tests/ui/suggestions/issue-109436.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fsuggestions%2Fissue-109436.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fsuggestions%2Fissue-109436.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109436.rs?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -0,0 +1,13 @@\n+struct Foo;\n+struct Bar;\n+\n+impl From<&Foo> for Bar {\n+    fn from(foo: &Foo) -> Bar {\n+        Bar\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo;\n+    let b: Bar = foo.into(); //~ ERROR E0277\n+}"}, {"sha": "48518b33d12ac36c36afbe8c8cd7459db83a760a", "filename": "tests/ui/suggestions/issue-109436.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1459b3128e288a85fcc4dd1fee7ada2cdcf28794/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr?ref=1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Foo: Into<_>` is not satisfied\n+  --> $DIR/issue-109436.rs:12:22\n+   |\n+LL |     let b: Bar = foo.into();\n+   |                      ^^^^ the trait `~const Into<_>` is not implemented for `Foo`\n+   |\n+   = note: required for `Foo` to implement `Into<Bar>`\n+help: consider borrowing here\n+   |\n+LL |     let b: Bar = (&foo).into();\n+   |                  ++   +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}