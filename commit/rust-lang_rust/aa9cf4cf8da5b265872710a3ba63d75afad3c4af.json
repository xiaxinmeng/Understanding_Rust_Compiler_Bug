{"sha": "aa9cf4cf8da5b265872710a3ba63d75afad3c4af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOWNmNGNmOGRhNWIyNjU4NzI3MTBhM2JhNjNkNzVhZmFkM2M0YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-23T09:31:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-23T09:31:39Z"}, "message": "auto merge of #11701 : FeGs/rust/stray-debug-in-metadata, r=alexcrichton\n\nWhen there is `println!` macro in the code, compiling is never end.\r\n\r\n```rust\r\n// print.rs\r\nfn main() {\r\n  println!(\"Hello!\");\r\n}\r\n```\r\n\r\n```bash\r\n$ RUST_LOG=rustc rustc print.rs\r\n```\r\n\r\nAnd this is a part of output from stderr.\r\n\r\n```bash\r\n# ...\r\nLooking up syntax::ast::DefId{crate: 1u32, node: 176234u32}\r\nlooking up syntax::ast::DefId{crate: 1u32, node: 176235u32} : extra::ebml::Doc<>{data: &[168u8, 16u8, 0u8, 0u8, 16u8, 51u8, 101u8, 53u8, 97u8, 101u8, 98u8, 56u8, 51u8, 55u8, 97u8, 101u8, 49u8, 54u8, 50u8\r\n# ...\r\n# vector which has infinite length.\r\n```\r\n\r\n* note : rust 0.9, 0.10-pre", "tree": {"sha": "b6049adb82f8ccdd9ee57458369971bd6f028e53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6049adb82f8ccdd9ee57458369971bd6f028e53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa9cf4cf8da5b265872710a3ba63d75afad3c4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9cf4cf8da5b265872710a3ba63d75afad3c4af", "html_url": "https://github.com/rust-lang/rust/commit/aa9cf4cf8da5b265872710a3ba63d75afad3c4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa9cf4cf8da5b265872710a3ba63d75afad3c4af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e0cbe420f7a78077b8009fdf1367073fc0c5eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e0cbe420f7a78077b8009fdf1367073fc0c5eb", "html_url": "https://github.com/rust-lang/rust/commit/19e0cbe420f7a78077b8009fdf1367073fc0c5eb"}, {"sha": "86b0564f737c3d911a4f34115555bb489f01a2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b0564f737c3d911a4f34115555bb489f01a2f6", "html_url": "https://github.com/rust-lang/rust/commit/86b0564f737c3d911a4f34115555bb489f01a2f6"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "ea55e0d3d7297c1a9aa8e7048080a418cd77e728", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa9cf4cf8da5b265872710a3ba63d75afad3c4af/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa9cf4cf8da5b265872710a3ba63d75afad3c4af/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=aa9cf4cf8da5b265872710a3ba63d75afad3c4af", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -211,17 +211,14 @@ pub fn get_field_type(tcx: ty::ctxt, class_id: ast::DefId,\n     let cstore = tcx.cstore;\n     let cdata = cstore.get_crate_data(class_id.crate);\n     let all_items = reader::get_doc(reader::Doc(cdata.data()), tag_items);\n-    debug!(\"Looking up {:?}\", class_id);\n     let class_doc = expect(tcx.diag,\n                            decoder::maybe_find_item(class_id.node, all_items),\n                            || format!(\"get_field_type: class ID {:?} not found\",\n                                    class_id) );\n-    debug!(\"looking up {:?} : {:?}\", def, class_doc);\n     let the_field = expect(tcx.diag,\n         decoder::maybe_find_item(def.node, class_doc),\n         || format!(\"get_field_type: in class {:?}, field ID {:?} not found\",\n                  class_id, def) );\n-    debug!(\"got field data {:?}\", the_field);\n     let ty = decoder::item_type(def, the_field, tcx, cdata);\n     ty::ty_param_bounds_and_ty {\n         generics: ty::Generics {type_param_defs: @~[],"}]}