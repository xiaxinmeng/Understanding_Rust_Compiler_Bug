{"sha": "bb6b433958cf1471f7df02f824a7112c2ef81792", "node_id": "C_kwDOAAsO6NoAKGJiNmI0MzM5NThjZjE0NzFmN2RmMDJmODI0YTcxMTJjMmVmODE3OTI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-04T20:46:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-04T20:46:24Z"}, "message": "Add debug statements.", "tree": {"sha": "eafaca02cccbd26befd46a8fc03c8830315ebb20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eafaca02cccbd26befd46a8fc03c8830315ebb20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6b433958cf1471f7df02f824a7112c2ef81792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6b433958cf1471f7df02f824a7112c2ef81792", "html_url": "https://github.com/rust-lang/rust/commit/bb6b433958cf1471f7df02f824a7112c2ef81792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6b433958cf1471f7df02f824a7112c2ef81792/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364bf39e3179e148742466810d0cb9c8ec1c343a", "url": "https://api.github.com/repos/rust-lang/rust/commits/364bf39e3179e148742466810d0cb9c8ec1c343a", "html_url": "https://github.com/rust-lang/rust/commit/364bf39e3179e148742466810d0cb9c8ec1c343a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "d101f69096fe8e013572d2c605c99dc54a1d938b", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=bb6b433958cf1471f7df02f824a7112c2ef81792", "patch": "@@ -118,13 +118,14 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         // Get components of trait alias.\n         let predicates = tcx.super_predicates_of(trait_ref.def_id());\n+        debug!(?predicates);\n \n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n                 .to_opt_poly_trait_pred()\n                 .map(|trait_ref| item.clone_and_push(trait_ref.map_bound(|t| t.trait_ref), *span))\n         });\n-        debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n+        debug!(\"expand_trait_aliases: items={:?}\", items.clone().collect::<Vec<_>>());\n \n         self.stack.extend(items);\n "}, {"sha": "673a2c2fcaf400bfed0d34707aaef0ae55e18179", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=bb6b433958cf1471f7df02f824a7112c2ef81792", "patch": "@@ -1070,6 +1070,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut bounds = Bounds::default();\n \n         self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        debug!(?bounds);\n \n         bounds\n     }"}, {"sha": "7a7e4a2f2b02b725c48b08a7a8d053810f222630", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6b433958cf1471f7df02f824a7112c2ef81792/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bb6b433958cf1471f7df02f824a7112c2ef81792", "patch": "@@ -52,6 +52,7 @@ use std::iter;\n mod item_bounds;\n mod type_of;\n \n+#[derive(Debug)]\n struct OnlySelfBounds(bool);\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -650,6 +651,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n     /// would create artificial cycles. Instead, we can only convert the\n     /// bounds for a type parameter `X` if `X::Foo` is used.\n+    #[instrument(level = \"trace\", skip(self, ast_generics))]\n     fn type_parameter_bounds_in_generics(\n         &self,\n         ast_generics: &'tcx hir::Generics<'tcx>,\n@@ -659,6 +661,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n+        debug!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -1140,6 +1143,7 @@ fn super_predicates_that_define_assoc_type(\n \n         // Combine the two lists to form the complete set of superbounds:\n         let superbounds = &*tcx.arena.alloc_from_iter(superbounds1.into_iter().chain(superbounds2));\n+        debug!(?superbounds);\n \n         // Now require that immediate supertraits are converted,\n         // which will, in turn, reach indirect supertraits."}]}