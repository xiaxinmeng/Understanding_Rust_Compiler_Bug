{"sha": "4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjNjZDM5Y2E4N2FhMzZhZThkOWE2OWY5YTJjMzQ1YjY5Zjk4ZTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-19T01:31:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-19T01:32:05Z"}, "message": "Boilerplate city, for anyone who wants it.", "tree": {"sha": "a7b8e0aa378681e0f868046d56663dae99d04de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b8e0aa378681e0f868046d56663dae99d04de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "html_url": "https://github.com/rust-lang/rust/commit/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "html_url": "https://github.com/rust-lang/rust/commit/5f2cfa7351ec604de81c1a01a8438ced3b2c0024"}], "stats": {"total": 471, "additions": 471, "deletions": 0}, "files": [{"sha": "c0248864a735a880a95c157283e7da6958a0fec2", "filename": "src/comp/middle/walk.rs", "status": "added", "additions": 471, "deletions": 0, "changes": 471, "blob_url": "https://github.com/rust-lang/rust/blob/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "patch": "@@ -0,0 +1,471 @@\n+import front.ast;\n+\n+import std.option;\n+import std.option.some;\n+import std.option.none;\n+\n+type ast_visitor =\n+    rec(fn () -> bool                 keep_going,\n+        fn () -> bool                 want_crate_directives,\n+        fn (&ast.crate c)             visit_crate_pre,\n+        fn (&ast.crate c)             visit_crate_post,\n+        fn (@ast.crate_directive cd)  visit_crate_directive_pre,\n+        fn (@ast.crate_directive cd)  visit_crate_directive_post,\n+        fn (@ast.view_item i)         visit_view_item_pre,\n+        fn (@ast.view_item i)         visit_view_item_post,\n+        fn (@ast.native_item i)       visit_native_item_pre,\n+        fn (@ast.native_item i)       visit_native_item_post,\n+        fn (@ast.item i)              visit_item_pre,\n+        fn (@ast.item i)              visit_item_post,\n+        fn (&ast.block b)             visit_block_pre,\n+        fn (&ast.block b)             visit_block_post,\n+        fn (@ast.stmt s)              visit_stmt_pre,\n+        fn (@ast.stmt s)              visit_stmt_post,\n+        fn (@ast.decl d)              visit_decl_pre,\n+        fn (@ast.decl d)              visit_decl_post,\n+        fn (@ast.expr e)              visit_expr_pre,\n+        fn (@ast.expr e)              visit_expr_post,\n+        fn (@ast.ty t)                visit_ty_pre,\n+        fn (@ast.ty t)                visit_ty_post);\n+\n+fn walk_crate(&ast_visitor v, &ast.crate c) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_crate_pre(c);\n+    walk_mod(v, c.node.module);\n+    v.visit_crate_post(c);\n+}\n+\n+fn walk_crate_directive(&ast_visitor v, @ast.crate_directive cd) {\n+    if (!v.keep_going()) { ret; }\n+    if (!v.want_crate_directives()) { ret; }\n+    v.visit_crate_directive_pre(cd);\n+    alt (cd.node) {\n+        case (ast.cdir_let(_, ?e, ?cdirs)) {\n+            walk_expr(v, e);\n+            for (@ast.crate_directive cdir in cdirs) {\n+                walk_crate_directive(v, cdir);\n+            }\n+        }\n+        case (ast.cdir_src_mod(_, _)) {}\n+        case (ast.cdir_dir_mod(_, _, ?cdirs)) {\n+            for (@ast.crate_directive cdir in cdirs) {\n+                walk_crate_directive(v, cdir);\n+            }\n+        }\n+        case (ast.cdir_view_item(?vi)) {\n+            walk_view_item(v, vi);\n+        }\n+        case (ast.cdir_meta(_)) {}\n+        case (ast.cdir_syntax(_)) {}\n+        case (ast.cdir_auth(_, _)) {}\n+    }\n+    v.visit_crate_directive_post(cd);\n+}\n+\n+fn walk_mod(&ast_visitor v, &ast._mod m) {\n+    if (!v.keep_going()) { ret; }\n+    for (@ast.view_item vi in m.view_items) {\n+        walk_view_item(v, vi);\n+    }\n+    for (@ast.item i in m.items) {\n+        walk_item(v, i);\n+    }\n+}\n+\n+fn walk_view_item(&ast_visitor v, @ast.view_item vi) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_view_item_pre(vi);\n+    v.visit_view_item_post(vi);\n+}\n+\n+fn walk_item(&ast_visitor v, @ast.item i) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_item_pre(i);\n+    alt (i.node) {\n+        case (ast.item_const(_, ?t, ?e, _, _)) {\n+            walk_ty(v, t);\n+            walk_expr(v, e);\n+        }\n+        case (ast.item_fn(_, ?f, _, _, _)) {\n+            walk_fn(v, f);\n+        }\n+        case (ast.item_mod(_, ?m, _)) {\n+            walk_mod(v, m);\n+        }\n+        case (ast.item_native_mod(_, ?nm, _)) {\n+            walk_native_mod(v, nm);\n+        }\n+        case (ast.item_ty(_, ?t, _, _, _)) {\n+            walk_ty(v, t);\n+        }\n+        case (ast.item_tag(_, ?variants, _, _, _)) {\n+            for (ast.variant vr in variants) {\n+                for (ast.variant_arg va in vr.node.args) {\n+                    walk_ty(v, va.ty);\n+                }\n+            }\n+        }\n+        case (ast.item_obj(_, ?ob, _, _, _)) {\n+            for (ast.obj_field f in ob.fields) {\n+                walk_ty(v, f.ty);\n+            }\n+            for (@ast.method m in ob.methods) {\n+                walk_fn(v, m.node.meth);\n+            }\n+            alt (ob.dtor) {\n+                case (none[@ast.method]) {}\n+                case (some[@ast.method](?m)) {\n+                    walk_fn(v, m.node.meth);\n+                }\n+            }\n+        }\n+\n+    }\n+    v.visit_item_post(i);\n+}\n+\n+fn walk_ty(&ast_visitor v, @ast.ty t) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_ty_pre(t);\n+    alt (t.node) {\n+        case (ast.ty_nil) {}\n+        case (ast.ty_bool) {}\n+        case (ast.ty_int) {}\n+        case (ast.ty_uint) {}\n+        case (ast.ty_float) {}\n+        case (ast.ty_machine(_)) {}\n+        case (ast.ty_char) {}\n+        case (ast.ty_str) {}\n+        case (ast.ty_box(?mt)) { walk_ty(v, mt.ty); }\n+        case (ast.ty_vec(?mt)) { walk_ty(v, mt.ty); }\n+        case (ast.ty_port(?t)) { walk_ty(v, t); }\n+        case (ast.ty_chan(?t)) { walk_ty(v, t); }\n+        case (ast.ty_tup(?mts)) {\n+            for (ast.mt mt in mts) {\n+                walk_ty(v, mt.ty);\n+            }\n+        }\n+        case (ast.ty_rec(?flds)) {\n+            for (ast.ty_field f in flds) {\n+                walk_ty(v, f.mt.ty);\n+            }\n+        }\n+        case (ast.ty_fn(_, _, ?args, ?out)) {\n+            for (ast.ty_arg a in args) {\n+                walk_ty(v, a.ty);\n+            }\n+            walk_ty(v, out);\n+        }\n+        case (ast.ty_obj(?tmeths)) {\n+            for (ast.ty_method m in tmeths) {\n+                for (ast.ty_arg a in m.inputs) {\n+                    walk_ty(v, a.ty);\n+                }\n+                walk_ty(v, m.output);\n+            }\n+        }\n+        case (ast.ty_path(_, _)) {}\n+        case (ast.ty_type) {}\n+        case (ast.ty_constr(?t, _)) { walk_ty(v, t); }\n+    }\n+    v.visit_ty_post(t);\n+}\n+\n+fn walk_native_mod(&ast_visitor v, &ast.native_mod nm) {\n+    if (!v.keep_going()) { ret; }\n+    for (@ast.view_item vi in nm.view_items) {\n+        walk_view_item(v, vi);\n+    }\n+    for (@ast.native_item ni in nm.items) {\n+        walk_native_item(v, ni);\n+    }\n+}\n+\n+fn walk_native_item(&ast_visitor v, @ast.native_item ni) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_native_item_pre(ni);\n+    alt (ni.node) {\n+        case (ast.native_item_fn(_, _, ?fd, _, _, _)) {\n+            walk_fn_decl(v, fd);\n+        }\n+        case (ast.native_item_ty(_, _)) {\n+        }\n+    }\n+    v.visit_native_item_post(ni);\n+}\n+\n+fn walk_fn_decl(&ast_visitor v, &ast.fn_decl fd) {\n+    for (ast.arg a in fd.inputs) {\n+        walk_ty(v, a.ty);\n+    }\n+    walk_ty(v, fd.output);\n+}\n+\n+fn walk_fn(&ast_visitor v, &ast._fn f) {\n+    if (!v.keep_going()) { ret; }\n+    walk_fn_decl(v, f.decl);\n+    walk_block(v, f.body);\n+}\n+\n+fn walk_block(&ast_visitor v, &ast.block b) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_block_pre(b);\n+    for (@ast.stmt s in b.node.stmts) {\n+        walk_stmt(v, s);\n+    }\n+    walk_expr_opt(v, b.node.expr);\n+    v.visit_block_post(b);\n+}\n+\n+fn walk_stmt(&ast_visitor v, @ast.stmt s) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_stmt_pre(s);\n+    alt (s.node) {\n+        case (ast.stmt_decl(?d, _)) {\n+            walk_decl(v, d);\n+        }\n+        case (ast.stmt_expr(?e, _)) {\n+            walk_expr(v, e);\n+        }\n+        case (ast.stmt_crate_directive(?cdir)) {\n+            walk_crate_directive(v, cdir);\n+        }\n+    }\n+    v.visit_stmt_post(s);\n+}\n+\n+fn walk_decl(&ast_visitor v, @ast.decl d) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_decl_pre(d);\n+    alt (d.node) {\n+        case (ast.decl_local(?loc)) {\n+            alt (loc.ty) {\n+                case (none[@ast.ty]) {}\n+                case (some[@ast.ty](?t)) { walk_ty(v, t); }\n+            }\n+            alt (loc.init) {\n+                case (none[ast.initializer]) {}\n+                case (some[ast.initializer](?i)) {\n+                    walk_expr(v, i.expr);\n+                }\n+            }\n+        }\n+        case (ast.decl_item(?it)) {\n+            walk_item(v, it);\n+        }\n+    }\n+    v.visit_decl_post(d);\n+}\n+\n+fn walk_expr_opt(&ast_visitor v, option.t[@ast.expr] eo) {\n+    alt (eo) {\n+        case (none[@ast.expr]) {}\n+        case (some[@ast.expr](?e)) {\n+            walk_expr(v, e);\n+        }\n+    }\n+}\n+\n+fn walk_exprs(&ast_visitor v, vec[@ast.expr] exprs) {\n+    for (@ast.expr e in exprs) {\n+        walk_expr(v, e);\n+    }\n+}\n+\n+fn walk_expr(&ast_visitor v, @ast.expr e) {\n+    if (!v.keep_going()) { ret; }\n+    v.visit_expr_pre(e);\n+    alt (e.node) {\n+        case (ast.expr_vec(?es, _, _)) {\n+            walk_exprs(v, es);\n+        }\n+        case (ast.expr_tup(?elts, _)) {\n+            for (ast.elt e in elts) {\n+                walk_expr(v, e.expr);\n+            }\n+        }\n+        case (ast.expr_rec(?flds, ?base, _)) {\n+            for (ast.field f in flds) {\n+                walk_expr(v, f.expr);\n+            }\n+            walk_expr_opt(v, base);\n+        }\n+        case (ast.expr_call(?callee, ?args, _)) {\n+            walk_expr(v, callee);\n+            walk_exprs(v, args);\n+        }\n+        case (ast.expr_self_method(_, _)) { }\n+        case (ast.expr_bind(?callee, ?args, _)) {\n+            walk_expr(v, callee);\n+            for (option.t[@ast.expr] eo in args) {\n+                walk_expr_opt(v, eo);\n+            }\n+        }\n+        case (ast.expr_spawn(_, _, ?callee, ?args, _)) {\n+            walk_expr(v, callee);\n+            walk_exprs(v, args);\n+        }\n+        case (ast.expr_binary(_, ?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_unary(_, ?a, _)) {\n+            walk_expr(v, a);\n+        }\n+        case (ast.expr_lit(_, _)) { }\n+        case (ast.expr_cast(?x, ?t, _)) {\n+            walk_expr(v, x);\n+            walk_ty(v, t);\n+        }\n+        case (ast.expr_if(?x, ?b, ?eo, _)) {\n+            walk_expr(v, x);\n+            walk_block(v, b);\n+            walk_expr_opt(v, eo);\n+        }\n+        case (ast.expr_while(?x, ?b, _)) {\n+            walk_expr(v, x);\n+            walk_block(v, b);\n+        }\n+        case (ast.expr_for(?dcl, ?x, ?b, _)) {\n+            walk_decl(v, dcl);\n+            walk_expr(v, x);\n+            walk_block(v, b);\n+        }\n+        case (ast.expr_for_each(?dcl, ?x, ?b, _)) {\n+            walk_decl(v, dcl);\n+            walk_expr(v, x);\n+            walk_block(v, b);\n+        }\n+        case (ast.expr_do_while(?b, ?x, _)) {\n+            walk_block(v, b);\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_alt(?x, ?arms, _)) {\n+            walk_expr(v, x);\n+            for (ast.arm a in arms) {\n+                walk_block(v, a.block);\n+            }\n+        }\n+        case (ast.expr_block(?b, _)) {\n+            walk_block(v, b);\n+        }\n+        case (ast.expr_assign(?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_assign_op(_, ?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_send(?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_recv(?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_field(?x, _, _)) {\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_index(?a, ?b, _)) {\n+            walk_expr(v, a);\n+            walk_expr(v, b);\n+        }\n+        case (ast.expr_path(_, _, _)) { }\n+        case (ast.expr_ext(_, ?es, ?eo, ?x, _)) {\n+            walk_exprs(v, es);\n+            walk_expr_opt(v, eo);\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_fail(_)) { }\n+        case (ast.expr_break(_)) { }\n+        case (ast.expr_cont(_)) { }\n+        case (ast.expr_ret(?eo, _)) {\n+            walk_expr_opt(v, eo);\n+        }\n+        case (ast.expr_put(?eo, _)) {\n+            walk_expr_opt(v, eo);\n+        }\n+        case (ast.expr_be(?x, _)) {\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_log(?x, _)) {\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_check_expr(?x, _)) {\n+            walk_expr(v, x);\n+        }\n+        case (ast.expr_port(_)) { }\n+        case (ast.expr_chan(?x, _)) {\n+            walk_expr(v, x);\n+        }\n+    }\n+    v.visit_expr_post(e);\n+}\n+\n+fn def_keep_going() -> bool { ret true; }\n+fn def_want_crate_directives() -> bool { ret false; }\n+fn def_visit_crate(&ast.crate c) { }\n+fn def_visit_crate_directive(@ast.crate_directive c) { }\n+fn def_visit_view_item(@ast.view_item vi) { }\n+fn def_visit_native_item(@ast.native_item ni) { }\n+fn def_visit_item(@ast.item i) { }\n+fn def_visit_block(&ast.block b) { }\n+fn def_visit_stmt(@ast.stmt s) { }\n+fn def_visit_decl(@ast.decl d) { }\n+fn def_visit_expr(@ast.expr e) { }\n+fn def_visit_ty(@ast.ty t) { }\n+\n+fn default_visitor() -> ast_visitor {\n+\n+    auto d_keep_going = def_keep_going;\n+    auto d_want_crate_directives = def_want_crate_directives;\n+    auto d_visit_crate = def_visit_crate;\n+    auto d_visit_crate_directive = def_visit_crate_directive;\n+    auto d_visit_view_item = def_visit_view_item;\n+    auto d_visit_native_item = def_visit_native_item;\n+    auto d_visit_item = def_visit_item;\n+    auto d_visit_block = def_visit_block;\n+    auto d_visit_stmt = def_visit_stmt;\n+    auto d_visit_decl = def_visit_decl;\n+    auto d_visit_expr = def_visit_expr;\n+    auto d_visit_ty = def_visit_ty;\n+\n+    ret rec(keep_going = d_keep_going,\n+            want_crate_directives = d_want_crate_directives,\n+            visit_crate_pre = d_visit_crate,\n+            visit_crate_post = d_visit_crate,\n+            visit_crate_directive_pre = d_visit_crate_directive,\n+            visit_crate_directive_post = d_visit_crate_directive,\n+            visit_view_item_pre = d_visit_view_item,\n+            visit_view_item_post = d_visit_view_item,\n+            visit_native_item_pre = d_visit_native_item,\n+            visit_native_item_post = d_visit_native_item,\n+            visit_item_pre = d_visit_item,\n+            visit_item_post = d_visit_item,\n+            visit_block_pre = d_visit_block,\n+            visit_block_post = d_visit_block,\n+            visit_stmt_pre = d_visit_stmt,\n+            visit_stmt_post = d_visit_stmt,\n+            visit_decl_pre = d_visit_decl,\n+            visit_decl_post = d_visit_decl,\n+            visit_expr_pre = d_visit_expr,\n+            visit_expr_post = d_visit_expr,\n+            visit_ty_pre = d_visit_ty,\n+            visit_ty_post = d_visit_ty);\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//\n+\n+\n+"}]}