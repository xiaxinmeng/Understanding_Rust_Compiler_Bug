{"sha": "0894b06283ac513bd4b6351aa9065fa515e2a71d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTRiMDYyODNhYzUxM2JkNGI2MzUxYWE5MDY1ZmE1MTVlMmE3MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-03T10:12:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-03T10:12:41Z"}, "message": "Auto merge of #32168 - alexcrichton:fix-filecheck, r=aturon\n\nmk: Add configure option for disabling codegen tests\n\nOur `codegen` test suite requires the LLVM `FileCheck` utility but unfortunately\nthis isn't always available in all custom LLVM roots (e.g. those specified via\n`--llvm-root`). This commit adds a `./configure` option called\n`--disable-codegen-tests` which will manually disable running these tests. In\nthe case that this option is passed we can forgo the need for the `FileCheck`\nexecutable. Note that we still require `FileCheck` by default as we will attempt\nto run these tests.\n\nCloses #28667", "tree": {"sha": "0d77fe64898a944c35e9335d85e05759be0ab356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d77fe64898a944c35e9335d85e05759be0ab356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0894b06283ac513bd4b6351aa9065fa515e2a71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0894b06283ac513bd4b6351aa9065fa515e2a71d", "html_url": "https://github.com/rust-lang/rust/commit/0894b06283ac513bd4b6351aa9065fa515e2a71d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0894b06283ac513bd4b6351aa9065fa515e2a71d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09f386e8d1c31133f0ce1123fbeaedcff40a77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09f386e8d1c31133f0ce1123fbeaedcff40a77d", "html_url": "https://github.com/rust-lang/rust/commit/a09f386e8d1c31133f0ce1123fbeaedcff40a77d"}, {"sha": "a3fdde7453d82870868a1bf8db448afcf966fb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fdde7453d82870868a1bf8db448afcf966fb34", "html_url": "https://github.com/rust-lang/rust/commit/a3fdde7453d82870868a1bf8db448afcf966fb34"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "da5468a0ce61dbc6657c1f727c2d1351704a4864", "filename": "configure", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0894b06283ac513bd4b6351aa9065fa515e2a71d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0894b06283ac513bd4b6351aa9065fa515e2a71d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0894b06283ac513bd4b6351aa9065fa515e2a71d", "patch": "@@ -608,6 +608,7 @@ opt inject-std-version 1 \"inject the current compiler version of libstd into pro\n opt llvm-version-check 1 \"check if the LLVM version is supported, build anyway\"\n opt rustbuild 0 \"use the rust and cargo based build system\"\n opt orbit 0 \"get MIR where it belongs - everywhere; most importantly, in orbit\"\n+opt codegen-tests 1 \"run the src/test/codegen tests\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\"\n@@ -1497,7 +1498,9 @@ do\n         LLVM_INST_DIR=$CFG_LLVM_ROOT\n         do_reconfigure=0\n         # Check that LLVm FileCheck is available. Needed for the tests\n-        need_cmd $LLVM_INST_DIR/bin/FileCheck\n+        if [ -z \"$CFG_DISABLE_CODEGEN_TESTS\" ]; then\n+            need_cmd $LLVM_INST_DIR/bin/FileCheck\n+        fi\n     fi\n \n     if [ ${do_reconfigure} -ne 0 ]"}, {"sha": "1a02b5c228104dd4d6e2db4058712fdd91fe53c5", "filename": "mk/tests.mk", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0894b06283ac513bd4b6351aa9065fa515e2a71d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0894b06283ac513bd4b6351aa9065fa515e2a71d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0894b06283ac513bd4b6351aa9065fa515e2a71d", "patch": "@@ -305,11 +305,15 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-units-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n+ifndef CFG_DISABLE_CODEGEN_TESTS\n+check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-units-exec\n+endif\n+\n # Only test the compiler-dependent crates when the target is\n # able to build a compiler (when the target triple is in the set of host triples)\n ifneq ($$(findstring $(2),$$(CFG_HOST)),)"}]}