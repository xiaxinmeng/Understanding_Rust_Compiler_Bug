{"sha": "49ce8a22b05d779da4ffc531a44380656d51404b", "node_id": "C_kwDOAAsO6NoAKDQ5Y2U4YTIyYjA1ZDc3OWRhNGZmYzUzMWE0NDM4MDY1NmQ1MTQwNGI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-10-18T17:05:17Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-10-19T19:49:39Z"}, "message": "Do anonymous lifetimes remapping correctly for nested rpits", "tree": {"sha": "f84e388b7699bac88463166c0242db04dc6acca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f84e388b7699bac88463166c0242db04dc6acca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ce8a22b05d779da4ffc531a44380656d51404b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmNQVNMACgkQgTGiTgx5\n76+AnhAAjk+w5KyXgTJGi9cVO6e7hQTxqCAVda4t6dtJdh8KZDNB+VmvJC96Fu48\nh84nlcxI9qtPZEiVsaQqNmAoLfEuX5Q9JFaZdAfeu3F2Fg1fIyLLuh5eaI6Aj0gH\nNjy7c2RxoPmHXobCR2/F7r8KCwH9EAHHZUaM1p4/CkjBuK74QjkKcCmjjLz4I/Xw\nokDXw69W7QKZ8XyUqezP34PSSOY0stbkiz3AAz+vs0knaYaujch1I5x2bV1F0kH/\n+qMw3c/Wlh1dF6d2QRb+rRZVX/7PsiowmrNzhP/suBNtMCJE/cqEfpEVQQCGRLUj\nziG/uZjeKWKNuHbRHqTX7BkUOZs65bbn0F6DJC0wVc1jQTepSXO39Nfh+XncQ8bf\nWCKLO/uXYa/iPrGfLnj1kux9XGqVIfnjCbZ3/V4uovUCFCzC69RwtKbmt+TM0s7F\nF10Si4UBvKlqtYV2aUdm8ADKLfiEbmztFupCPE2hF4QDF7ed1fP6tnlqhi2lREA1\nCIgsTkM6muXfAibMATdFexP8FGQmxipPNjZaWK18dks4HH78bgBSddULQjCEuQpT\nUrUCqK3oRIyaEmPXXqwMfE/pTu4PmQJBK2VjpProcd04z053uX2UX5ZdbCEZCvab\nJ7jgM+MHXH5gu8cL+Ugm6T5K62Ccx4zatOWygPlOh2O7NU4Ey+s=\n=pTOz\n-----END PGP SIGNATURE-----", "payload": "tree f84e388b7699bac88463166c0242db04dc6acca0\nparent fb5475887f8f3641aea994e1f8f8954d1290449a\nauthor Santiago Pastorino <spastorino@gmail.com> 1666112717 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1666208979 -0300\n\nDo anonymous lifetimes remapping correctly for nested rpits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ce8a22b05d779da4ffc531a44380656d51404b", "html_url": "https://github.com/rust-lang/rust/commit/49ce8a22b05d779da4ffc531a44380656d51404b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ce8a22b05d779da4ffc531a44380656d51404b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5475887f8f3641aea994e1f8f8954d1290449a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5475887f8f3641aea994e1f8f8954d1290449a", "html_url": "https://github.com/rust-lang/rust/commit/fb5475887f8f3641aea994e1f8f8954d1290449a"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "427b71722abcc5cfc4cc8cb5668d6aefb8f0976a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49ce8a22b05d779da4ffc531a44380656d51404b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ce8a22b05d779da4ffc531a44380656d51404b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=49ce8a22b05d779da4ffc531a44380656d51404b", "patch": "@@ -540,9 +540,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     /// Get the previously recorded `to` local def id given the `from` local def id, obtained using\n     /// `generics_def_id_map` field.\n-    fn get_remapped_def_id(&self, mut local_def_id: LocalDefId) -> LocalDefId {\n+    fn get_remapped_def_id(&self, local_def_id: LocalDefId) -> LocalDefId {\n         // `generics_def_id_map` is a stack of mappings. As we go deeper in impl traits nesting we\n-        // push new mappings so we need to try first the latest mappings, hence `iter().rev()`.\n+        // push new mappings, so we first need to get the latest (innermost) mappings, hence `iter().rev()`.\n         //\n         // Consider:\n         //\n@@ -552,18 +552,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         //\n         // `[[fn#'b -> impl_trait#'b], [fn#'b -> impl_sized#'b]]`\n         //\n-        // for the opaque type generated on `impl Sized + 'b`, We want the result to be:\n-        // impl_sized#'b, so iterating forward is the wrong thing to do.\n-        for map in self.generics_def_id_map.iter().rev() {\n-            if let Some(r) = map.get(&local_def_id) {\n-                debug!(\"def_id_remapper: remapping from `{local_def_id:?}` to `{r:?}`\");\n-                local_def_id = *r;\n-            } else {\n-                debug!(\"def_id_remapper: no remapping for `{local_def_id:?}` found in map\");\n-            }\n-        }\n-\n-        local_def_id\n+        // for the opaque type generated on `impl Sized + 'b`, we want the result to be: impl_sized#'b.\n+        // So, if we were trying to find first from the start (outermost) would give the wrong result, impl_trait#'b.\n+        self.generics_def_id_map\n+            .iter()\n+            .rev()\n+            .find_map(|map| map.get(&local_def_id).map(|local_def_id| *local_def_id))\n+            .unwrap_or(local_def_id)\n     }\n \n     /// Freshen the `LoweringContext` and ready it to lower a nested item.\n@@ -1641,7 +1636,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 LifetimeRes::Fresh { param, binder: _ } => {\n                     debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n-                    if let Some(old_def_id) = self.opt_local_def_id(param) && remapping.get(&old_def_id).is_none() {\n+                    if let Some(old_def_id) = self.orig_opt_local_def_id(param) && remapping.get(&old_def_id).is_none() {\n                         let node_id = self.next_node_id();\n \n                         let new_def_id = self.create_def(\n@@ -1886,7 +1881,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let extra_lifetime_params = self.resolver.take_extra_lifetime_params(opaque_ty_node_id);\n         debug!(?extra_lifetime_params);\n         for (ident, outer_node_id, outer_res) in extra_lifetime_params {\n-            let outer_def_id = self.local_def_id(outer_node_id);\n+            let outer_def_id = self.orig_local_def_id(outer_node_id);\n             let inner_node_id = self.next_node_id();\n \n             // Add a definition for the in scope lifetime def."}, {"sha": "287a030cf876b851b58669ce99ee59660e374a6a", "filename": "src/test/ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/49ce8a22b05d779da4ffc531a44380656d51404b/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-with-anonymous-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ce8a22b05d779da4ffc531a44380656d51404b/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-with-anonymous-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-with-anonymous-lifetimes.rs?ref=49ce8a22b05d779da4ffc531a44380656d51404b", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+pub struct VecNumber<'s> {\n+    pub vec_number: Vec<Number<'s>>,\n+    pub auxiliary_object: &'s Vec<usize>,\n+}\n+\n+pub struct Number<'s> {\n+    pub number: &'s usize,\n+}\n+\n+impl<'s> VecNumber<'s> {\n+    pub fn vec_number_iterable_per_item_in_auxiliary_object(\n+        &self,\n+    ) -> impl Iterator<Item = (&'s usize, impl Iterator<Item = &Number<'s>>)> {\n+        self.auxiliary_object.iter().map(move |n| {\n+            let iter_number = self.vec_number.iter();\n+            (n, iter_number)\n+        })\n+    }\n+}\n+\n+fn main() {}"}]}