{"sha": "1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjODU1MWIwZWJiNGVmYzcyZGQxZDU3MDM1NjcyZTViMWM5MTVhYzI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-16T15:30:02Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-17T16:59:27Z"}, "message": "renamve hir_to_string to node_to_string", "tree": {"sha": "25a93234222ce5933929d07763f56d8945b67729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a93234222ce5933929d07763f56d8945b67729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "html_url": "https://github.com/rust-lang/rust/commit/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d996c4d5a383744ec7550b59943b5744f4bcd122", "url": "https://api.github.com/repos/rust-lang/rust/commits/d996c4d5a383744ec7550b59943b5744f4bcd122", "html_url": "https://github.com/rust-lang/rust/commit/d996c4d5a383744ec7550b59943b5744f4bcd122"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "66963e5856eec85b9ba5454c8ee7a6e5ec86b1bf", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -26,7 +26,7 @@ impl<'a, 'tcx> LabelledCFG<'a, 'tcx> {\n             owner: self.tcx.hir().def_index_to_hir_id(self.cfg.owner_def_id.index).owner,\n             local_id\n         };\n-        let s = self.tcx.hir().hir_to_string(hir_id);\n+        let s = self.tcx.hir().node_to_string(hir_id);\n \n         // Replacing newlines with \\\\l causes each line to be left-aligned,\n         // improving presentation of (long) pretty-printed expressions."}, {"sha": "d6ac7ea2ed703cd93582a7a8d99ac941e3488ffc", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                 let hir_id = self.hir_map.node_to_hir_id(node_id);\n                 missing_items.push(format!(\"[local_id: {}, node:{}]\",\n                                            local_id,\n-                                           self.hir_map.hir_to_string(hir_id)));\n+                                           self.hir_map.node_to_string(hir_id)));\n             }\n             self.error(|| format!(\n                 \"ItemLocalIds not assigned densely in {}. \\\n@@ -139,7 +139,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                         owner: owner_def_index,\n                         local_id,\n                     })\n-                    .map(|h| format!(\"({:?} {})\", h, self.hir_map.hir_to_string(h)))\n+                    .map(|h| format!(\"({:?} {})\", h, self.hir_map.node_to_string(h)))\n                     .collect::<Vec<_>>()));\n         }\n     }\n@@ -157,14 +157,14 @@ impl<'a, 'hir: 'a> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n \n         if hir_id == hir::DUMMY_HIR_ID {\n             self.error(|| format!(\"HirIdValidator: HirId {:?} is invalid\",\n-                                  self.hir_map.hir_to_string(hir_id)));\n+                                  self.hir_map.node_to_string(hir_id)));\n             return;\n         }\n \n         if owner != hir_id.owner {\n             self.error(|| format!(\n                 \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n-                self.hir_map.hir_to_string(hir_id),\n+                self.hir_map.node_to_string(hir_id),\n                 self.hir_map.def_path(DefId::local(hir_id.owner)).to_string_no_crate(),\n                 self.hir_map.def_path(DefId::local(owner)).to_string_no_crate()));\n         }"}, {"sha": "26c08154647e29069cc1618f7fc97bf78051df5a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -453,7 +453,7 @@ impl<'hir> Map<'hir> {\n     pub fn body_owned_by(&self, id: HirId) -> BodyId {\n         self.maybe_body_owned_by(id).unwrap_or_else(|| {\n             span_bug!(self.span(id), \"body_owned_by: {} has no associated body\",\n-                      self.hir_to_string(id));\n+                      self.node_to_string(id));\n         })\n     }\n \n@@ -486,7 +486,7 @@ impl<'hir> Map<'hir> {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => id,\n             Node::GenericParam(_) => self.get_parent_node_by_hir_id(id),\n-            _ => bug!(\"ty_param_owner: {} not a type parameter\", self.hir_to_string(id))\n+            _ => bug!(\"ty_param_owner: {} not a type parameter\", self.node_to_string(id))\n         }\n     }\n \n@@ -495,7 +495,7 @@ impl<'hir> Map<'hir> {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => kw::SelfUpper,\n             Node::GenericParam(param) => param.name.ident().name,\n-            _ => bug!(\"ty_param_name: {} not a type parameter\", self.hir_to_string(id)),\n+            _ => bug!(\"ty_param_name: {} not a type parameter\", self.node_to_string(id)),\n         }\n     }\n \n@@ -874,27 +874,27 @@ impl<'hir> Map<'hir> {\n                 return nm.abi;\n             }\n         }\n-        bug!(\"expected foreign mod or inlined parent, found {}\", self.hir_to_string(parent))\n+        bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n     }\n \n     pub fn expect_item(&self, id: HirId) -> &'hir Item {\n         match self.find_by_hir_id(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n-            _ => bug!(\"expected item, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem {\n         match self.find_by_hir_id(id) {\n             Some(Node::ImplItem(item)) => item,\n-            _ => bug!(\"expected impl item, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem {\n         match self.find_by_hir_id(id) {\n             Some(Node::TraitItem(item)) => item,\n-            _ => bug!(\"expected trait item, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -904,26 +904,26 @@ impl<'hir> Map<'hir> {\n                 match i.node {\n                     ItemKind::Struct(ref struct_def, _) |\n                     ItemKind::Union(ref struct_def, _) => struct_def,\n-                    _ => bug!(\"struct ID bound to non-struct {}\", self.hir_to_string(id))\n+                    _ => bug!(\"struct ID bound to non-struct {}\", self.node_to_string(id))\n                 }\n             }\n             Some(Node::Variant(variant)) => &variant.node.data,\n             Some(Node::Ctor(data)) => data,\n-            _ => bug!(\"expected struct or variant, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected struct or variant, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_variant(&self, id: HirId) -> &'hir Variant {\n         match self.find_by_hir_id(id) {\n             Some(Node::Variant(variant)) => variant,\n-            _ => bug!(\"expected variant, found {}\", self.hir_to_string(id)),\n+            _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem {\n         match self.find_by_hir_id(id) {\n             Some(Node::ForeignItem(item)) => item,\n-            _ => bug!(\"expected foreign item, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -936,7 +936,7 @@ impl<'hir> Map<'hir> {\n     pub fn expect_expr_by_hir_id(&self, id: HirId) -> &'hir Expr {\n         match self.find_by_hir_id(id) { // read recorded by find\n             Some(Node::Expr(expr)) => expr,\n-            _ => bug!(\"expected expr, found {}\", self.hir_to_string(id))\n+            _ => bug!(\"expected expr, found {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -959,7 +959,7 @@ impl<'hir> Map<'hir> {\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { node: PatKind::Binding(_, _, l, _), .. }) => l.name,\n             Node::Ctor(..) => self.name_by_hir_id(self.get_parent_item(id)),\n-            _ => bug!(\"no name for {}\", self.hir_to_string(id))\n+            _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -1071,7 +1071,7 @@ impl<'hir> Map<'hir> {\n         self.as_local_hir_id(id).map(|id| self.span(id))\n     }\n \n-    pub fn hir_to_string(&self, id: HirId) -> String {\n+    pub fn node_to_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id, true)\n     }\n "}, {"sha": "328ace51a58282c96b0ef8e87151f3de9c976f9c", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -819,7 +819,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                             },\n                             _ => bug!(\n                                 \"expected (impl) item, found {}\",\n-                                tcx.hir().hir_to_string(opaque_hir_id),\n+                                tcx.hir().node_to_string(opaque_hir_id),\n                             ),\n                         };\n                         if in_definition_scope {"}, {"sha": "192e72383acee591d12134ee7bb78ce798de1a91", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n                 bug!(\"no type for node {}: {} in mem_categorization\",\n-                     id, self.tcx.hir().hir_to_string(id));\n+                     id, self.tcx.hir().node_to_string(id));\n             }\n         }\n     }"}, {"sha": "628a44cbfe01fa7b3c0cadb5a0d2b4c89735aec5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             _ => {\n                 bug!(\n                     \"found unexpected node kind in worklist: {} ({:?})\",\n-                    self.tcx.hir().hir_to_string(search_item),\n+                    self.tcx.hir().node_to_string(search_item),\n                     node,\n                 );\n             }"}, {"sha": "76bff500634a91fdead737b81c8135536ea16133", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -2696,7 +2696,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         debug!(\n             \"insert_lifetime: {} resolved to {:?} span={:?}\",\n-            self.tcx.hir().hir_to_string(lifetime_ref.hir_id),\n+            self.tcx.hir().node_to_string(lifetime_ref.hir_id),\n             def,\n             self.tcx.sess.source_map().span_to_string(lifetime_ref.span)\n         );"}, {"sha": "b84ebd8afe8852bfdff20a09ef7ab7bd07dd8e96", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -252,7 +252,7 @@ fn validate_hir_id_for_typeck_tables(local_id_root: Option<DefId>,\n                 ty::tls::with(|tcx| {\n                     bug!(\"node {} with HirId::owner {:?} cannot be placed in \\\n                           TypeckTables with local_id_root {:?}\",\n-                         tcx.hir().hir_to_string(hir_id),\n+                         tcx.hir().node_to_string(hir_id),\n                          DefId::local(hir_id.owner),\n                          local_id_root)\n                 });\n@@ -554,7 +554,7 @@ impl<'tcx> TypeckTables<'tcx> {\n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(||\n             bug!(\"node_type: no type for node `{}`\",\n-                 tls::with(|tcx| tcx.hir().hir_to_string(id)))\n+                 tls::with(|tcx| tcx.hir().node_to_string(id)))\n         )\n     }\n "}, {"sha": "23b28952935d1f043ba5042dccbf6daef4356f94", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -1508,12 +1508,12 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.kind {\n             LpVar(id) => {\n-                write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().hir_to_string(id)))\n+                write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir().node_to_string(id)))\n             }\n \n             LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath {hir_id: var_id}, closure_expr_id }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    tcx.hir().hir_to_string(var_id)\n+                    tcx.hir().node_to_string(var_id)\n                 });\n                 write!(f, \"$({} captured by id={:?})\", s, closure_expr_id)\n             }\n@@ -1547,7 +1547,7 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n \n             LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    tcx.hir().hir_to_string(hir_id)\n+                    tcx.hir().node_to_string(hir_id)\n                 });\n                 write!(f, \"$({} captured by closure)\", s)\n             }"}, {"sha": "10bfe9e034d32c09faf2b2d8167c0bd3d27669c4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -2181,7 +2181,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn local_ty(&self, span: Span, nid: hir::HirId) -> LocalTy<'tcx> {\n         self.locals.borrow().get(&nid).cloned().unwrap_or_else(||\n             span_bug!(span, \"no type for local variable {}\",\n-                      self.tcx.hir().hir_to_string(nid))\n+                      self.tcx.hir().node_to_string(nid))\n         )\n     }\n \n@@ -2518,7 +2518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None if self.is_tainted_by_errors() => self.tcx.types.err,\n             None => {\n                 bug!(\"no type for node {}: {} in fcx {}\",\n-                     id, self.tcx.hir().hir_to_string(id),\n+                     id, self.tcx.hir().node_to_string(id),\n                      self.tag());\n             }\n         }"}, {"sha": "4e6fcfe0593e2393a5bb0f765c6fd5c310af2ec3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -26,7 +26,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n         // \"Trait\" impl\n         if let hir::ItemKind::Impl(.., Some(_), _, _) = item.node {\n             debug!(\"coherence2::orphan check: trait impl {}\",\n-                   self.tcx.hir().hir_to_string(item.hir_id));\n+                   self.tcx.hir().node_to_string(item.hir_id));\n             let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n             let trait_def_id = trait_ref.def_id;\n             let cm = self.tcx.sess.source_map();"}, {"sha": "99f87ccb6f65e76fd465784fb09ea63da1520a33", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8551b0ebb4efc72dd1d57035672e5b1c915ac2/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=1c8551b0ebb4efc72dd1d57035672e5b1c915ac2", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         debug!(\"add_inferreds for item {}\",\n-               self.tcx.hir().hir_to_string(item.hir_id));\n+               self.tcx.hir().node_to_string(item.hir_id));\n \n         match item.node {\n             hir::ItemKind::Struct(ref struct_def, _) |"}]}