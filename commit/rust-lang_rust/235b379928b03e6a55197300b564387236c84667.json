{"sha": "235b379928b03e6a55197300b564387236c84667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNWIzNzk5MjhiMDNlNmE1NTE5NzMwMGI1NjQzODcyMzZjODQ2Njc=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril@gmail.com", "date": "2019-09-23T19:24:58Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T11:36:22Z"}, "message": "Rename Constructor::Slice to FixedLenSlice", "tree": {"sha": "9e05df736ef2deda2ec69b82bf61c18d078ae20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e05df736ef2deda2ec69b82bf61c18d078ae20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/235b379928b03e6a55197300b564387236c84667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/235b379928b03e6a55197300b564387236c84667", "html_url": "https://github.com/rust-lang/rust/commit/235b379928b03e6a55197300b564387236c84667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/235b379928b03e6a55197300b564387236c84667/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc5697bd2799916f342810d054f3bcc00471689", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc5697bd2799916f342810d054f3bcc00471689", "html_url": "https://github.com/rust-lang/rust/commit/4dc5697bd2799916f342810d054f3bcc00471689"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "057fea0146d6a73ff91c079073a7e5f70ce9d99b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/235b379928b03e6a55197300b564387236c84667/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235b379928b03e6a55197300b564387236c84667/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=235b379928b03e6a55197300b564387236c84667", "patch": "@@ -587,7 +587,7 @@ enum Constructor<'tcx> {\n     /// Ranges of literal values (`2..=5` and `2..5`).\n     ConstantRange(u128, u128, Ty<'tcx>, RangeEnd, Span),\n     /// Array patterns of length n.\n-    Slice(u64),\n+    FixedLenSlice(u64),\n }\n \n // Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n@@ -601,7 +601,7 @@ impl<'tcx> std::cmp::PartialEq for Constructor<'tcx> {\n                 Constructor::ConstantRange(a_start, a_end, a_ty, a_range_end, _),\n                 Constructor::ConstantRange(b_start, b_end, b_ty, b_range_end, _),\n             ) => a_start == b_start && a_end == b_end && a_ty == b_ty && a_range_end == b_range_end,\n-            (Constructor::Slice(a), Constructor::Slice(b)) => a == b,\n+            (Constructor::FixedLenSlice(a), Constructor::FixedLenSlice(b)) => a == b,\n             _ => false,\n         }\n     }\n@@ -610,7 +610,7 @@ impl<'tcx> std::cmp::PartialEq for Constructor<'tcx> {\n impl<'tcx> Constructor<'tcx> {\n     fn is_slice(&self) -> bool {\n         match self {\n-            Slice { .. } => true,\n+            FixedLenSlice { .. } => true,\n             _ => false,\n         }\n     }\n@@ -644,7 +644,7 @@ impl<'tcx> Constructor<'tcx> {\n                     ty::Const::from_bits(tcx, *hi, ty),\n                 )\n             }\n-            Constructor::Slice(val) => format!(\"[{}]\", val),\n+            Constructor::FixedLenSlice(val) => format!(\"[{}]\", val),\n             _ => bug!(\"bad constructor being displayed: `{:?}\", self),\n         }\n     }\n@@ -707,7 +707,7 @@ impl<'tcx> Constructor<'tcx> {\n         match ty.kind {\n             ty::Tuple(ref fs) => fs.len() as u64,\n             ty::Slice(..) | ty::Array(..) => match *self {\n-                Slice(length) => length,\n+                FixedLenSlice(length) => length,\n                 ConstantValue(..) => 0,\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n             },\n@@ -980,14 +980,14 @@ fn all_constructors<'a, 'tcx>(\n             .collect(),\n         ty::Array(ref sub_ty, len) if len.try_eval_usize(cx.tcx, cx.param_env).is_some() => {\n             let len = len.eval_usize(cx.tcx, cx.param_env);\n-            if len != 0 && cx.is_uninhabited(sub_ty) { vec![] } else { vec![Slice(len)] }\n+            if len != 0 && cx.is_uninhabited(sub_ty) { vec![] } else { vec![FixedLenSlice(len)] }\n         }\n         // Treat arrays of a constant but unknown length like slices.\n         ty::Array(ref sub_ty, _) | ty::Slice(ref sub_ty) => {\n             if cx.is_uninhabited(sub_ty) {\n-                vec![Slice(0)]\n+                vec![FixedLenSlice(0)]\n             } else {\n-                (0..pcx.max_slice_length + 1).map(|length| Slice(length)).collect()\n+                (0..pcx.max_slice_length + 1).map(|length| FixedLenSlice(length)).collect()\n             }\n         }\n         ty::Adt(def, substs) if def.is_enum() => def\n@@ -1711,15 +1711,17 @@ fn pat_constructors<'tcx>(\n             pat.span,\n         )]),\n         PatKind::Array { .. } => match pcx.ty.kind {\n-            ty::Array(_, length) => Some(vec![Slice(length.eval_usize(cx.tcx, cx.param_env))]),\n+            ty::Array(_, length) => {\n+                Some(vec![FixedLenSlice(length.eval_usize(cx.tcx, cx.param_env))])\n+            }\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty),\n         },\n         PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n             let pat_len = prefix.len() as u64 + suffix.len() as u64;\n             if slice.is_some() {\n-                Some((pat_len..pcx.max_slice_length + 1).map(Slice).collect())\n+                Some((pat_len..pcx.max_slice_length + 1).map(FixedLenSlice).collect())\n             } else {\n-                Some(vec![Slice(pat_len)])\n+                Some(vec![FixedLenSlice(pat_len)])\n             }\n         }\n         PatKind::Or { .. } => {\n@@ -1741,7 +1743,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx>(\n     match ty.kind {\n         ty::Tuple(ref fs) => fs.into_iter().map(|t| t.expect_ty()).collect(),\n         ty::Slice(ty) | ty::Array(ty, _) => match *ctor {\n-            Slice(length) => (0..length).map(|_| ty).collect(),\n+            FixedLenSlice(length) => (0..length).map(|_| ty).collect(),\n             ConstantValue(..) => vec![],\n             _ => bug!(\"bad slice pattern {:?} {:?}\", ctor, ty),\n         },\n@@ -2238,7 +2240,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n \n         PatKind::Array { ref prefix, ref slice, ref suffix }\n         | PatKind::Slice { ref prefix, ref slice, ref suffix } => match *constructor {\n-            Slice(..) => {\n+            FixedLenSlice(..) => {\n                 let pat_len = prefix.len() + suffix.len();\n                 if let Some(slice_count) = ctor_wild_subpatterns.len().checked_sub(pat_len) {\n                     if slice_count == 0 || slice.is_some() {"}]}