{"sha": "a0771bdabbd23738e73a7745d1b224d53db8c826", "node_id": "C_kwDOAAsO6NoAKGEwNzcxYmRhYmJkMjM3MzhlNzNhNzc0NWQxYjIyNGQ1M2RiOGM4MjY", "commit": {"author": {"name": "David Rheinsberg", "email": "david.rheinsberg@gmail.com", "date": "2022-11-21T15:47:02Z"}, "committer": {"name": "David Rheinsberg", "email": "david.rheinsberg@gmail.com", "date": "2022-11-29T09:57:25Z"}, "message": "codegen-llvm: never combine DSOLocal and DllImport\n\nPrevent DllImport from being attached to DSOLocal definitions in the\nLLVM IR. The combination makes no sense, since definitions local to the\ncompilation unit will never be imported from external objects.\n\nAdditionally, LLVM will refuse the IR if it encounters the\ncombination (introduced in [1]):\n\n  if (GV.hasDLLImportStorageClass())\n    Assert(!GV.isDSOLocal(),\n           \"GlobalValue with DLLImport Storage is dso_local!\", &GV);\n\nRight now, codegen-llvm will only apply DllImport to constants and rely\non call-stubs for functions. Hence, we simply extend the codegen of\nconstants to skip DllImport for any local definitions.\n\nThis was discovered when switching the EFI targets to the static\nrelocation model [2]. With this fixed, we can start another attempt at\nthis.\n\n[1] https://smlnj-gitlab.cs.uchicago.edu/manticore/llvm/commit/509132b368efed10bbdad825403f45e9cf1d6e38\n[2] https://github.com/rust-lang/rust/issues/101656", "tree": {"sha": "91918419f4c7675ad8ada38c00a41594c79717a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91918419f4c7675ad8ada38c00a41594c79717a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0771bdabbd23738e73a7745d1b224d53db8c826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0771bdabbd23738e73a7745d1b224d53db8c826", "html_url": "https://github.com/rust-lang/rust/commit/a0771bdabbd23738e73a7745d1b224d53db8c826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0771bdabbd23738e73a7745d1b224d53db8c826/comments", "author": {"login": "dvdhrm", "id": 623857, "node_id": "MDQ6VXNlcjYyMzg1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/623857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvdhrm", "html_url": "https://github.com/dvdhrm", "followers_url": "https://api.github.com/users/dvdhrm/followers", "following_url": "https://api.github.com/users/dvdhrm/following{/other_user}", "gists_url": "https://api.github.com/users/dvdhrm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvdhrm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvdhrm/subscriptions", "organizations_url": "https://api.github.com/users/dvdhrm/orgs", "repos_url": "https://api.github.com/users/dvdhrm/repos", "events_url": "https://api.github.com/users/dvdhrm/events{/privacy}", "received_events_url": "https://api.github.com/users/dvdhrm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvdhrm", "id": 623857, "node_id": "MDQ6VXNlcjYyMzg1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/623857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvdhrm", "html_url": "https://github.com/dvdhrm", "followers_url": "https://api.github.com/users/dvdhrm/followers", "following_url": "https://api.github.com/users/dvdhrm/following{/other_user}", "gists_url": "https://api.github.com/users/dvdhrm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvdhrm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvdhrm/subscriptions", "organizations_url": "https://api.github.com/users/dvdhrm/orgs", "repos_url": "https://api.github.com/users/dvdhrm/repos", "events_url": "https://api.github.com/users/dvdhrm/events{/privacy}", "received_events_url": "https://api.github.com/users/dvdhrm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "html_url": "https://github.com/rust-lang/rust/commit/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "3c324359565c1081699b70ea2e432b23322ced98", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a0771bdabbd23738e73a7745d1b224d53db8c826/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0771bdabbd23738e73a7745d1b224d53db8c826/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=a0771bdabbd23738e73a7745d1b224d53db8c826", "patch": "@@ -295,8 +295,18 @@ impl<'ll> CodegenCx<'ll, '_> {\n             llvm::set_thread_local_mode(g, self.tls_model);\n         }\n \n+        let dso_local = unsafe { self.should_assume_dso_local(g, true) };\n+        if dso_local {\n+            unsafe {\n+                llvm::LLVMRustSetDSOLocal(g, true);\n+            }\n+        }\n+\n         if !def_id.is_local() {\n             let needs_dll_storage_attr = self.use_dll_storage_attrs && !self.tcx.is_foreign_item(def_id) &&\n+                // Local definitions can never be imported, so we must not apply\n+                // the DLLImport annotation.\n+                !dso_local &&\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n                 // dynamic linking when linker plugin based LTO is enabled.\n@@ -340,12 +350,6 @@ impl<'ll> CodegenCx<'ll, '_> {\n             }\n         }\n \n-        unsafe {\n-            if self.should_assume_dso_local(g, true) {\n-                llvm::LLVMRustSetDSOLocal(g, true);\n-            }\n-        }\n-\n         self.instances.borrow_mut().insert(instance, g);\n         g\n     }"}]}