{"sha": "abcbe276954525bc7902a5a20762a580d5ed4ea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiY2JlMjc2OTU0NTI1YmM3OTAyYTVhMjA3NjJhNTgwZDVlZDRlYTI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-06T02:11:46Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-01-06T20:15:07Z"}, "message": "syntax/rustc: implement isize/usize", "tree": {"sha": "826496ef8bfb39fd1df126951e451a3a51ccd742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826496ef8bfb39fd1df126951e451a3a51ccd742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abcbe276954525bc7902a5a20762a580d5ed4ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abcbe276954525bc7902a5a20762a580d5ed4ea2", "html_url": "https://github.com/rust-lang/rust/commit/abcbe276954525bc7902a5a20762a580d5ed4ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abcbe276954525bc7902a5a20762a580d5ed4ea2/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6539cb417f4a7c2d9d1afce44c196578d2b67f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/6539cb417f4a7c2d9d1afce44c196578d2b67f38", "html_url": "https://github.com/rust-lang/rust/commit/6539cb417f4a7c2d9d1afce44c196578d2b67f38"}], "stats": {"total": 159, "additions": 81, "deletions": 78}, "files": [{"sha": "64ca49d76f3c8789ff32b34cfe158bde176998a7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -46,7 +46,7 @@ use syntax::ast_util::is_shift_binop;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token;\n-use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n+use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ast_util;\n use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n@@ -216,7 +216,7 @@ impl LintPass for TypeLimits {\n                         match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                let int_type = if t == ast::TyI {\n+                                let int_type = if t == ast::TyIs {\n                                     cx.sess().target.int_type\n                                 } else { t };\n                                 let (min, max) = int_ty_range(int_type);\n@@ -233,7 +233,7 @@ impl LintPass for TypeLimits {\n                         };\n                     },\n                     ty::ty_uint(t) => {\n-                        let uint_type = if t == ast::TyU {\n+                        let uint_type = if t == ast::TyUs {\n                             cx.sess().target.uint_type\n                         } else { t };\n                         let (min, max) = uint_ty_range(uint_type);\n@@ -296,7 +296,7 @@ impl LintPass for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) {\n             match int_ty {\n-                ast::TyI =>    (i64::MIN,        i64::MAX),\n+                ast::TyIs=>    (i64::MIN,        i64::MAX),\n                 ast::TyI8 =>   (i8::MIN  as i64, i8::MAX  as i64),\n                 ast::TyI16 =>  (i16::MIN as i64, i16::MAX as i64),\n                 ast::TyI32 =>  (i32::MIN as i64, i32::MAX as i64),\n@@ -306,7 +306,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) {\n             match uint_ty {\n-                ast::TyU =>   (u64::MIN,         u64::MAX),\n+                ast::TyUs=>   (u64::MIN,         u64::MAX),\n                 ast::TyU8 =>  (u8::MIN   as u64, u8::MAX   as u64),\n                 ast::TyU16 => (u16::MIN  as u64, u16::MAX  as u64),\n                 ast::TyU32 => (u32::MIN  as u64, u32::MAX  as u64),\n@@ -323,7 +323,7 @@ impl LintPass for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyI =>    int_ty_bits(target_int_ty, target_int_ty),\n+                ast::TyIs=>    int_ty_bits(target_int_ty, target_int_ty),\n                 ast::TyI8 =>   i8::BITS  as u64,\n                 ast::TyI16 =>  i16::BITS as u64,\n                 ast::TyI32 =>  i32::BITS as u64,\n@@ -333,7 +333,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyU =>    uint_ty_bits(target_uint_ty, target_uint_ty),\n+                ast::TyUs=>    uint_ty_bits(target_uint_ty, target_uint_ty),\n                 ast::TyU8 =>   u8::BITS  as u64,\n                 ast::TyU16 =>  u16::BITS as u64,\n                 ast::TyU32 =>  u32::BITS as u64,\n@@ -404,14 +404,14 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_def(&mut self, sp: Span, ty_id: ast::NodeId, path_id: ast::NodeId) {\n         match self.cx.tcx.def_map.borrow()[path_id].clone() {\n-            def::DefPrimTy(ast::TyInt(ast::TyI)) => {\n+            def::DefPrimTy(ast::TyInt(ast::TyIs)) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n-                                  \"found rust type `int` in foreign module, while \\\n+                                  \"found rust type `isize` in foreign module, while \\\n                                    libc::c_int or libc::c_long should be used\");\n             }\n-            def::DefPrimTy(ast::TyUint(ast::TyU)) => {\n+            def::DefPrimTy(ast::TyUint(ast::TyUs)) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n-                                  \"found rust type `uint` in foreign module, while \\\n+                                  \"found rust type `usize` in foreign module, while \\\n                                    libc::c_uint or libc::c_ulong should be used\");\n             }\n             def::DefTy(..) => {"}, {"sha": "a39126f0851649e30e62d1cc4b50a9c70b8317ae", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -443,8 +443,8 @@ fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> w\n     let tcx = st.tcx;\n     match next(st) {\n       'b' => return tcx.types.bool,\n-      'i' => return tcx.types.int,\n-      'u' => return tcx.types.uint,\n+      'i' => { /* eat the s of is */ next(st); return tcx.types.int },\n+      'u' => { /* eat the s of us */ next(st); return tcx.types.uint },\n       'M' => {\n         match next(st) {\n           'b' => return tcx.types.u8,"}, {"sha": "c019d129218b659ea878992351cb223157ca4742", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -61,7 +61,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_char => mywrite!(w, \"c\"),\n         ty::ty_int(t) => {\n             match t {\n-                ast::TyI => mywrite!(w, \"i\"),\n+                ast::TyIs => mywrite!(w, \"is\"),\n                 ast::TyI8 => mywrite!(w, \"MB\"),\n                 ast::TyI16 => mywrite!(w, \"MW\"),\n                 ast::TyI32 => mywrite!(w, \"ML\"),\n@@ -70,7 +70,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         }\n         ty::ty_uint(t) => {\n             match t {\n-                ast::TyU => mywrite!(w, \"u\"),\n+                ast::TyUs => mywrite!(w, \"us\"),\n                 ast::TyU8 => mywrite!(w, \"Mb\"),\n                 ast::TyU16 => mywrite!(w, \"Mw\"),\n                 ast::TyU32 => mywrite!(w, \"Ml\"),"}, {"sha": "1aec7252a3c1d4d379bd45fb8452053dc25de9da", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -528,12 +528,12 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n \n         eval_const_expr_partial(tcx, &**base)\n             .and_then(|val| define_casts!(val, {\n-                ty::ty_int(ast::TyI) => (int, const_int, i64),\n+                ty::ty_int(ast::TyIs) => (int, const_int, i64),\n                 ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n                 ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n                 ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n                 ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n-                ty::ty_uint(ast::TyU) => (uint, const_uint, u64),\n+                ty::ty_uint(ast::TyUs) => (uint, const_uint, u64),\n                 ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n                 ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n                 ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),"}, {"sha": "62f1a2b49d444dd07ee5bb2358ca1cd0c7e54b6e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -2302,12 +2302,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: intern_ty(arena, interner, ty_bool),\n             char: intern_ty(arena, interner, ty_char),\n             err: intern_ty(arena, interner, ty_err),\n-            int: intern_ty(arena, interner, ty_int(ast::TyI)),\n+            int: intern_ty(arena, interner, ty_int(ast::TyIs)),\n             i8: intern_ty(arena, interner, ty_int(ast::TyI8)),\n             i16: intern_ty(arena, interner, ty_int(ast::TyI16)),\n             i32: intern_ty(arena, interner, ty_int(ast::TyI32)),\n             i64: intern_ty(arena, interner, ty_int(ast::TyI64)),\n-            uint: intern_ty(arena, interner, ty_uint(ast::TyU)),\n+            uint: intern_ty(arena, interner, ty_uint(ast::TyUs)),\n             u8: intern_ty(arena, interner, ty_uint(ast::TyU8)),\n             u16: intern_ty(arena, interner, ty_uint(ast::TyU16)),\n             u32: intern_ty(arena, interner, ty_uint(ast::TyU32)),\n@@ -2653,7 +2653,7 @@ impl FlagComputation {\n \n pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyI    => tcx.types.int,\n+        ast::TyIs   => tcx.types.int,\n         ast::TyI8   => tcx.types.i8,\n         ast::TyI16  => tcx.types.i16,\n         ast::TyI32  => tcx.types.i32,\n@@ -2663,7 +2663,7 @@ pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n \n pub fn mk_mach_uint<'tcx>(tcx: &ctxt<'tcx>, tm: ast::UintTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyU    => tcx.types.uint,\n+        ast::TyUs   => tcx.types.uint,\n         ast::TyU8   => tcx.types.u8,\n         ast::TyU16  => tcx.types.u16,\n         ast::TyU32  => tcx.types.u32,\n@@ -3324,7 +3324,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n \n         let result = match ty.sty {\n             // uint and int are ffi-unsafe\n-            ty_uint(ast::TyU) | ty_int(ast::TyI) => {\n+            ty_uint(ast::TyUs) | ty_int(ast::TyIs) => {\n                 TC::ReachesFfiUnsafe\n             }\n \n@@ -3896,7 +3896,7 @@ pub fn type_is_fresh(ty: Ty) -> bool {\n \n pub fn type_is_uint(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_infer(IntVar(_)) | ty_uint(ast::TyU) => true,\n+      ty_infer(IntVar(_)) | ty_uint(ast::TyUs) => true,\n       _ => false\n     }\n }\n@@ -3942,7 +3942,7 @@ pub fn type_is_signed(ty: Ty) -> bool {\n \n pub fn type_is_machine(ty: Ty) -> bool {\n     match ty.sty {\n-        ty_int(ast::TyI) | ty_uint(ast::TyU) => false,\n+        ty_int(ast::TyIs) | ty_uint(ast::TyUs) => false,\n         ty_int(..) | ty_uint(..) | ty_float(..) => true,\n         _ => false\n     }"}, {"sha": "cc9abecc20fc8a360c82c1623a5a1bb773ef7dc3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -86,9 +86,9 @@ use syntax::ast::{PolyTraitRef, PrimTy, SelfExplicit};\n use syntax::ast::{RegionTyParamBound, StructField};\n use syntax::ast::{TraitRef, TraitTyParamBound};\n use syntax::ast::{Ty, TyBool, TyChar, TyF32};\n-use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt, TyObjectSum};\n+use syntax::ast::{TyF64, TyFloat, TyIs, TyI8, TyI16, TyI32, TyI64, TyInt, TyObjectSum};\n use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyPolyTraitRef, TyQPath};\n-use syntax::ast::{TyRptr, TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n+use syntax::ast::{TyRptr, TyStr, TyUs, TyU8, TyU16, TyU32, TyU64, TyUint};\n use syntax::ast::{TypeImplItem};\n use syntax::ast;\n use syntax::ast_map;\n@@ -833,13 +833,15 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\",    TyChar);\n         table.intern(\"f32\",     TyFloat(TyF32));\n         table.intern(\"f64\",     TyFloat(TyF64));\n-        table.intern(\"int\",     TyInt(TyI));\n+        table.intern(\"int\",     TyInt(TyIs));\n+        table.intern(\"isize\",     TyInt(TyIs));\n         table.intern(\"i8\",      TyInt(TyI8));\n         table.intern(\"i16\",     TyInt(TyI16));\n         table.intern(\"i32\",     TyInt(TyI32));\n         table.intern(\"i64\",     TyInt(TyI64));\n         table.intern(\"str\",     TyStr);\n-        table.intern(\"uint\",    TyUint(TyU));\n+        table.intern(\"uint\",    TyUint(TyUs));\n+        table.intern(\"usize\",    TyUint(TyUs));\n         table.intern(\"u8\",      TyUint(TyU8));\n         table.intern(\"u16\",     TyUint(TyU16));\n         table.intern(\"u32\",     TyUint(TyU32));"}, {"sha": "b889b52207885a655a17e4651dad05df432dcd50", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -903,8 +903,8 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             ty::ty_int(t) => {\n                 let llty = Type::int_from_ty(cx.ccx(), t);\n                 let min = match t {\n-                    ast::TyI if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                    ast::TyI => i64::MIN as u64,\n+                    ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                    ast::TyIs => i64::MIN as u64,\n                     ast::TyI8 => i8::MIN as u64,\n                     ast::TyI16 => i16::MIN as u64,\n                     ast::TyI32 => i32::MIN as u64,"}, {"sha": "c099c80f86334fd8810810383751bf3e6e0322fb", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -1797,14 +1797,14 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool => (\"bool\".to_string(), DW_ATE_boolean),\n         ty::ty_char => (\"char\".to_string(), DW_ATE_unsigned_char),\n         ty::ty_int(int_ty) => match int_ty {\n-            ast::TyI => (\"int\".to_string(), DW_ATE_signed),\n+            ast::TyIs => (\"isize\".to_string(), DW_ATE_signed),\n             ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n             ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n             ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n             ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n         },\n         ty::ty_uint(uint_ty) => match uint_ty {\n-            ast::TyU => (\"uint\".to_string(), DW_ATE_unsigned),\n+            ast::TyUs => (\"usize\".to_string(), DW_ATE_unsigned),\n             ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n             ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n             ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n@@ -3729,12 +3729,12 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool              => output.push_str(\"bool\"),\n         ty::ty_char              => output.push_str(\"char\"),\n         ty::ty_str               => output.push_str(\"str\"),\n-        ty::ty_int(ast::TyI)     => output.push_str(\"int\"),\n+        ty::ty_int(ast::TyIs)     => output.push_str(\"isize\"),\n         ty::ty_int(ast::TyI8)    => output.push_str(\"i8\"),\n         ty::ty_int(ast::TyI16)   => output.push_str(\"i16\"),\n         ty::ty_int(ast::TyI32)   => output.push_str(\"i32\"),\n         ty::ty_int(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::ty_uint(ast::TyU)    => output.push_str(\"uint\"),\n+        ty::ty_uint(ast::TyUs)    => output.push_str(\"usize\"),\n         ty::ty_uint(ast::TyU8)   => output.push_str(\"u8\"),\n         ty::ty_uint(ast::TyU16)  => output.push_str(\"u16\"),\n         ty::ty_uint(ast::TyU32)  => output.push_str(\"u32\"),"}, {"sha": "88199f97b54ba575c007731610e8ad98dc64671c", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -112,7 +112,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::TyI => ccx.int_type(),\n+            ast::TyIs => ccx.int_type(),\n             ast::TyI8 => Type::i8(ccx),\n             ast::TyI16 => Type::i16(ccx),\n             ast::TyI32 => Type::i32(ccx),\n@@ -122,7 +122,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::TyU => ccx.int_type(),\n+            ast::TyUs => ccx.int_type(),\n             ast::TyU8 => Type::i8(ccx),\n             ast::TyU16 => Type::i16(ccx),\n             ast::TyU32 => Type::i32(ccx),"}, {"sha": "d2f33c03ed549980c893c1fc411e705f65ae8a4a", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -264,7 +264,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n         }\n \n         match unsized_part_of_type(cx.tcx(), t).sty {\n-            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyU),\n+            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs),\n             ty::ty_trait(_) => Type::vtable_ptr(cx),\n             _ => panic!(\"Unexpected type returned from unsized_part_of_type : {}\",\n                        t.repr(cx.tcx()))"}, {"sha": "7be383f2a026da6cb8de696d0c6af91a17e89d8b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -4859,7 +4859,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n                 ast::TyU32 => disr as u32 as Disr == disr,\n                 ast::TyU64 => disr as u64 as Disr == disr,\n-                ast::TyU => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n+                ast::TyUs => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n             }\n         }\n         fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool {\n@@ -4868,7 +4868,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyI16 => disr as i16 as Disr == disr,\n                 ast::TyI32 => disr as i32 as Disr == disr,\n                 ast::TyI64 => disr as i64 as Disr == disr,\n-                ast::TyI => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n+                ast::TyIs => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n             }\n         }\n         match ty {"}, {"sha": "60faa09b964ddcd7dccac7117f922a4c0c634263", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -1238,8 +1238,8 @@ pub enum Type {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy)]\n pub enum PrimitiveType {\n-    Int, I8, I16, I32, I64,\n-    Uint, U8, U16, U32, U64,\n+    Isize, I8, I16, I32, I64,\n+    Usize, U8, U16, U32, U64,\n     F32, F64,\n     Char,\n     Bool,\n@@ -1264,12 +1264,12 @@ pub enum TypeKind {\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s.as_slice() {\n-            \"int\" => Some(Int),\n+            \"isize\" | \"int\" => Some(Isize),\n             \"i8\" => Some(I8),\n             \"i16\" => Some(I16),\n             \"i32\" => Some(I32),\n             \"i64\" => Some(I64),\n-            \"uint\" => Some(Uint),\n+            \"usize\" | \"uint\" => Some(Usize),\n             \"u8\" => Some(U8),\n             \"u16\" => Some(U16),\n             \"u32\" => Some(U32),\n@@ -1308,12 +1308,12 @@ impl PrimitiveType {\n \n     pub fn to_string(&self) -> &'static str {\n         match *self {\n-            Int => \"int\",\n+            Isize => \"isize\",\n             I8 => \"i8\",\n             I16 => \"i16\",\n             I32 => \"i32\",\n             I64 => \"i64\",\n-            Uint => \"uint\",\n+            Usize => \"usize\",\n             U8 => \"u8\",\n             U16 => \"u16\",\n             U32 => \"u32\",\n@@ -1387,12 +1387,12 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n         match self.sty {\n             ty::ty_bool => Primitive(Bool),\n             ty::ty_char => Primitive(Char),\n-            ty::ty_int(ast::TyI) => Primitive(Int),\n+            ty::ty_int(ast::TyIs) => Primitive(Isize),\n             ty::ty_int(ast::TyI8) => Primitive(I8),\n             ty::ty_int(ast::TyI16) => Primitive(I16),\n             ty::ty_int(ast::TyI32) => Primitive(I32),\n             ty::ty_int(ast::TyI64) => Primitive(I64),\n-            ty::ty_uint(ast::TyU) => Primitive(Uint),\n+            ty::ty_uint(ast::TyUs) => Primitive(Usize),\n             ty::ty_uint(ast::TyU8) => Primitive(U8),\n             ty::ty_uint(ast::TyU16) => Primitive(U16),\n             ty::ty_uint(ast::TyU32) => Primitive(U32),\n@@ -2265,12 +2265,12 @@ fn resolve_type(cx: &DocContext,\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n             ast::TyChar => return Primitive(Char),\n-            ast::TyInt(ast::TyI) => return Primitive(Int),\n+            ast::TyInt(ast::TyIs) => return Primitive(Isize),\n             ast::TyInt(ast::TyI8) => return Primitive(I8),\n             ast::TyInt(ast::TyI16) => return Primitive(I16),\n             ast::TyInt(ast::TyI32) => return Primitive(I32),\n             ast::TyInt(ast::TyI64) => return Primitive(I64),\n-            ast::TyUint(ast::TyU) => return Primitive(Uint),\n+            ast::TyUint(ast::TyUs) => return Primitive(Usize),\n             ast::TyUint(ast::TyU8) => return Primitive(U8),\n             ast::TyUint(ast::TyU16) => return Primitive(U16),\n             ast::TyUint(ast::TyU32) => return Primitive(U32),"}, {"sha": "032ab05a418b27e7db6d9b8280bff092efef0b2e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -1087,7 +1087,7 @@ pub struct Typedef {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n-    TyI,\n+    TyIs,\n     TyI8,\n     TyI16,\n     TyI32,\n@@ -1103,7 +1103,7 @@ impl fmt::Show for IntTy {\n impl IntTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyI => 1,\n+            TyIs => 1,\n             TyI8 => 2,\n             TyI16 | TyI32 | TyI64  => 3,\n         }\n@@ -1112,7 +1112,7 @@ impl IntTy {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n-    TyU,\n+    TyUs,\n     TyU8,\n     TyU16,\n     TyU32,\n@@ -1122,7 +1122,7 @@ pub enum UintTy {\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyU => 1,\n+            TyUs => 1,\n             TyU8 => 2,\n             TyU16 | TyU32 | TyU64  => 3,\n         }"}, {"sha": "d6df9f46621a7b29e916d033717c3eac3e8d01fe", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -120,8 +120,8 @@ pub fn is_path(e: P<Expr>) -> bool {\n /// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n     let s = match t {\n-        TyI if val.is_some() => \"i\",\n-        TyI => \"int\",\n+        TyIs if val.is_some() => \"is\",\n+        TyIs => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n@@ -141,7 +141,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n         TyI8 => 0x80u64,\n         TyI16 => 0x8000u64,\n-        TyI | TyI32 => 0x80000000u64, // actually ni about TyI\n+        TyIs | TyI32 => 0x80000000u64, // actually ni about TyIm\n         TyI64 => 0x8000000000000000u64\n     }\n }\n@@ -150,8 +150,8 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n /// We want to avoid \"42uint\" in favor of \"42u\"\n pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n     let s = match t {\n-        TyU if val.is_some() => \"u\",\n-        TyU => \"uint\",\n+        TyUs if val.is_some() => \"us\",\n+        TyUs => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\",\n@@ -168,7 +168,7 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n         TyU8 => 0xffu64,\n         TyU16 => 0xffffu64,\n-        TyU | TyU32 => 0xffffffffu64, // actually ni about TyU\n+        TyUs | TyU32 => 0xffffffffu64, // actually ni about TyUm\n         TyU64 => 0xffffffffffffffffu64\n     }\n }"}, {"sha": "523477eef22c8537c19cd1f323ad3f883f2959ba", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -457,8 +457,10 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u32\" => Some(UnsignedInt(ast::TyU32)),\n         \"i64\" => Some(SignedInt(ast::TyI64)),\n         \"u64\" => Some(UnsignedInt(ast::TyU64)),\n-        \"int\" => Some(SignedInt(ast::TyI)),\n-        \"uint\" => Some(UnsignedInt(ast::TyU)),\n+        \"int\" => Some(SignedInt(ast::TyIs)),\n+        \"uint\" => Some(UnsignedInt(ast::TyUs)),\n+        \"isize\" => Some(SignedInt(ast::TyIs)),\n+        \"usize\" => Some(UnsignedInt(ast::TyUs)),\n         _ => None\n     }\n }\n@@ -502,7 +504,7 @@ impl IntType {\n             SignedInt(ast::TyI16) | UnsignedInt(ast::TyU16) |\n             SignedInt(ast::TyI32) | UnsignedInt(ast::TyU32) |\n             SignedInt(ast::TyI64) | UnsignedInt(ast::TyU64) => true,\n-            SignedInt(ast::TyI) | UnsignedInt(ast::TyU) => false\n+            SignedInt(ast::TyIs) | UnsignedInt(ast::TyUs) => false\n         }\n     }\n }"}, {"sha": "843172cee19b1afaae69e8d2299b4571cff146c2", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -642,10 +642,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprLit(P(respan(sp, lit))))\n     }\n     fn expr_uint(&self, span: Span, i: uint) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyU)))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n     }\n     fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyI, ast::Sign::new(i))))\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs, ast::Sign::new(i))))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))"}, {"sha": "1112eaa789026c412d51bd3aea2b44fb7a098985", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -1031,7 +1031,7 @@ impl<'a> MethodDef<'a> {\n             let arms: Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, variant)| {\n                     let pat = variant_to_pat(cx, sp, type_ident, &**variant);\n-                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyU));\n+                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n "}, {"sha": "ccc15449834c1a60775bd74b57e1e94b3bc32c02", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -273,13 +273,13 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_source_int! { signed, int, TyI }\n+    impl_to_source_int! { signed, int, TyIs }\n     impl_to_source_int! { signed, i8,  TyI8 }\n     impl_to_source_int! { signed, i16, TyI16 }\n     impl_to_source_int! { signed, i32, TyI32 }\n     impl_to_source_int! { signed, i64, TyI64 }\n \n-    impl_to_source_int! { unsigned, uint, TyU }\n+    impl_to_source_int! { unsigned, uint, TyUs }\n     impl_to_source_int! { unsigned, u8,   TyU8 }\n     impl_to_source_int! { unsigned, u16,  TyU16 }\n     impl_to_source_int! { unsigned, u32,  TyU32 }"}, {"sha": "c26613b4d6cb35a4dd2e135bfead1fcecf29d22f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -701,12 +701,14 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n     if let Some(suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match suf {\n-            \"i\"   => ast::SignedIntLit(ast::TyI, ast::Plus),\n+            \"i\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n+            \"is\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n             \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n             \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n             \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n             \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"u\"   => ast::UnsignedIntLit(ast::TyU),\n+            \"u\"   => ast::UnsignedIntLit(ast::TyUs),\n+            \"us\"   => ast::UnsignedIntLit(ast::TyUs),\n             \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n             \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n             \"u32\" => ast::UnsignedIntLit(ast::TyU32),"}, {"sha": "59e79fe9266f0aa7e28edd81a746c98f5409727b", "filename": "src/test/run-fail/assert-as-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-as-macro.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:assertion failed: 1i == 2\n+// error-pattern:assertion failed: 1is == 2\n \n fn main() {\n-    assert!(1i == 2);\n+    assert!(1is == 2);\n }"}, {"sha": "dd4c58f176c84ad8e1691800fd646eeb3a1b108d", "filename": "src/test/run-fail/panic.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -8,8 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-// error-pattern:1i == 2\n-fn main() { assert!((1i == 2)); }\n+// error-pattern:1is == 2\n+fn main() { assert!((1is == 2)); }"}, {"sha": "e3b148ac92db6fbe1e4a8e6c43027176454c1fc1", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abcbe276954525bc7902a5a20762a580d5ed4ea2/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=abcbe276954525bc7902a5a20762a580d5ed4ea2", "patch": "@@ -17,7 +17,7 @@ struct Foo<T> {\n \n pub fn main() {\n     unsafe {\n-        assert_eq!((*get_tydesc::<int>()).name, \"int\");\n-        assert_eq!((*get_tydesc::<Foo<uint>>()).name, \"Foo<uint>\");\n+        assert_eq!((*get_tydesc::<int>()).name, \"isize\");\n+        assert_eq!((*get_tydesc::<Foo<uint>>()).name, \"Foo<usize>\");\n     }\n }"}]}