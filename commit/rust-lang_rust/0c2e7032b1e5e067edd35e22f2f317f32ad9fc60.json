{"sha": "0c2e7032b1e5e067edd35e22f2f317f32ad9fc60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMmU3MDMyYjFlNWUwNjdlZGQzNWUyMmYyZjMxN2YzMmFkOWZjNjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-30T12:18:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-30T12:18:32Z"}, "message": "Merge #2952\n\n2952: Simplify fixture parsing r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "299e54b269981c198ed761bb85a724738aa95ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/299e54b269981c198ed761bb85a724738aa95ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMsmYCRBK7hj4Ov3rIwAAdHIIAE4U9X7QS1M3J6zMjQ7tuaK0\nbi2CVSw6nRkKRLza0ojfsfXDvFdOw4ac387++ObsYGNsF1SoQWkKR8/YTnP5iQay\nS5WNJBIBuBdz23W6YubMl7Pw+JT7V+7GLAo0NPIrr6g7CsmfrCRSgx1jKuIwV5Ux\nLumoBJaVTx63ek8TOQEMNV2FjyvVf0KGOOYg+4Gos0wEGhvFp6m4g+MR1S6INtKJ\nA2haV9HCN8x+u6QqXa9ZLipz8L/GifJKGKQPUYnwNW2XYIkxhn5umrib//L26pIa\nGbu9ZVb0LSxxE8ZX/8yyxMEYeq9HsaHzudB3Ukc1+sl8ga2nDl2GSbTuRasRrFQ=\n=NNdh\n-----END PGP SIGNATURE-----\n", "payload": "tree 299e54b269981c198ed761bb85a724738aa95ae4\nparent 5dcd9fdf5e95573de9bc46f32b86d6fbc5e7c18d\nparent c445c72eb355dfd45d1ce1dd68087f7cf7c05877\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580386712 +0000\ncommitter GitHub <noreply@github.com> 1580386712 +0000\n\nMerge #2952\n\n2952: Simplify fixture parsing r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60", "html_url": "https://github.com/rust-lang/rust/commit/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcd9fdf5e95573de9bc46f32b86d6fbc5e7c18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcd9fdf5e95573de9bc46f32b86d6fbc5e7c18d", "html_url": "https://github.com/rust-lang/rust/commit/5dcd9fdf5e95573de9bc46f32b86d6fbc5e7c18d"}, {"sha": "c445c72eb355dfd45d1ce1dd68087f7cf7c05877", "url": "https://api.github.com/repos/rust-lang/rust/commits/c445c72eb355dfd45d1ce1dd68087f7cf7c05877", "html_url": "https://github.com/rust-lang/rust/commit/c445c72eb355dfd45d1ce1dd68087f7cf7c05877"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "336c594a638a461ea7aae6061408f09c713e7084", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2e7032b1e5e067edd35e22f2f317f32ad9fc60/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=0c2e7032b1e5e067edd35e22f2f317f32ad9fc60", "patch": "@@ -188,29 +188,16 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n             }\n         });\n \n-    let mut res = Vec::new();\n-    let mut meta = None;\n-    loop {\n-        let mut next_meta = None;\n-        let mut text = String::new();\n-        for line in lines.by_ref() {\n-            if line.starts_with(\"//-\") {\n-                next_meta = Some(line[\"//-\".len()..].trim().to_string());\n-                break;\n-            }\n-            text.push_str(line);\n-            text.push('\\n');\n-        }\n-\n-        if let Some(meta) = meta {\n-            res.push(FixtureEntry { meta, text });\n-        }\n-        meta = next_meta;\n-        if meta.is_none() {\n-            break;\n+    let mut res: Vec<FixtureEntry> = Vec::new();\n+    for line in lines.by_ref() {\n+        if line.starts_with(\"//-\") {\n+            let meta = line[\"//-\".len()..].trim().to_string();\n+            res.push(FixtureEntry { meta, text: String::new() })\n+        } else if let Some(entry) = res.last_mut() {\n+            entry.text.push_str(line);\n+            entry.text.push('\\n');\n         }\n     }\n-\n     res\n }\n "}]}