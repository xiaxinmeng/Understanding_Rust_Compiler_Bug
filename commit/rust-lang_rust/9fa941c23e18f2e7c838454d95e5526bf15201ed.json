{"sha": "9fa941c23e18f2e7c838454d95e5526bf15201ed", "node_id": "C_kwDOAAsO6NoAKDlmYTk0MWMyM2UxOGYyZTdjODM4NDU0ZDk1ZTU1MjZiZjE1MjAxZWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-06T21:06:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-06T21:06:06Z"}, "message": "Rollup merge of #95649 - ouz-a:mir-opt, r=oli-obk\n\nNew mir-opt deref_separator\n\nThis adds a new mir-opt that split certain derefs into this form:\n`let x = (*a.b).c;` to => `tmp = a.b; let x = (*tmp).c;`\n\nHuge thanks to ``@oli-obk`` for his patient mentoring.", "tree": {"sha": "09a59aa4ded0fc9890bc8a938c79198bfe66b9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a59aa4ded0fc9890bc8a938c79198bfe66b9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa941c23e18f2e7c838454d95e5526bf15201ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTgC+CRBK7hj4Ov3rIwAAPf8IAI6+Upk2S1tzKxuOqWfYvEez\nWZMC/clO+mixmMjIuZ2b4aNMcKGREFGkWu4q360I79EOzpCs/txJsd1gNC2mBUxM\nMmm73c6SxNlo5W3F4038n2UZNeauN9oEjILy2uH1dPrL00hsriczjea7g/VWK3KT\nrjTrzC2nohbS5gIvuOr0RzKx8tuYwpdE5WhQvd1AR54mdfvGdfa74OezjPlOsGAG\ngNNjt+Zb6KEoZIXG6TFAbyBQA70NTe2aaDM/wMP9/yYr7t8xLwtYilNF0rp4J5bk\nSHI7GyNKra4Ir0YzU2a3cdPVGcE6brg486t5C5YfH5yQQHpxMCqsHYcPzUkX85g=\n=Cowa\n-----END PGP SIGNATURE-----\n", "payload": "tree 09a59aa4ded0fc9890bc8a938c79198bfe66b9f0\nparent 76cd8f8bf0cb68febbe2c967db1ca4bc6eabf3aa\nparent 1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649279166 +0200\ncommitter GitHub <noreply@github.com> 1649279166 +0200\n\nRollup merge of #95649 - ouz-a:mir-opt, r=oli-obk\n\nNew mir-opt deref_separator\n\nThis adds a new mir-opt that split certain derefs into this form:\n`let x = (*a.b).c;` to => `tmp = a.b; let x = (*tmp).c;`\n\nHuge thanks to ``@oli-obk`` for his patient mentoring.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa941c23e18f2e7c838454d95e5526bf15201ed", "html_url": "https://github.com/rust-lang/rust/commit/9fa941c23e18f2e7c838454d95e5526bf15201ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa941c23e18f2e7c838454d95e5526bf15201ed/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76cd8f8bf0cb68febbe2c967db1ca4bc6eabf3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/76cd8f8bf0cb68febbe2c967db1ca4bc6eabf3aa", "html_url": "https://github.com/rust-lang/rust/commit/76cd8f8bf0cb68febbe2c967db1ca4bc6eabf3aa"}, {"sha": "1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7", "html_url": "https://github.com/rust-lang/rust/commit/1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7"}], "stats": {"total": 197, "additions": 193, "deletions": 4}, "files": [{"sha": "79aac163550612d0fc7f65d516ae9beaac8df474", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -0,0 +1,72 @@\n+use crate::MirPass;\n+use rustc_middle::mir::patch::MirPatch;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+pub struct Derefer;\n+\n+pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let mut patch = MirPatch::new(body);\n+    let (basic_blocks, local_decl) = body.basic_blocks_and_local_decls_mut();\n+    for (block, data) in basic_blocks.iter_enumerated_mut() {\n+        for (i, stmt) in data.statements.iter_mut().enumerate() {\n+            match stmt.kind {\n+                StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n+                    for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n+                        if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n+                            // The type that we are derefing.\n+                            let ty = p_ref.ty(local_decl, tcx).ty;\n+                            let temp = patch.new_temp(ty, stmt.source_info.span);\n+\n+                            // Because we are assigning this right before original statement\n+                            // we are using index i of statement.\n+                            let loc = Location { block: block, statement_index: i };\n+                            patch.add_statement(loc, StatementKind::StorageLive(temp));\n+\n+                            // We are adding current p_ref's projections to our\n+                            // temp value.\n+                            let deref_place =\n+                                Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n+                            patch.add_assign(\n+                                loc,\n+                                Place::from(temp),\n+                                Rvalue::Use(Operand::Move(deref_place)),\n+                            );\n+\n+                            // We are creating a place by using our temp value's location\n+                            // and copying derefed values which we need to create new statement.\n+                            let temp_place =\n+                                Place::from(temp).project_deeper(&place.projection[idx..], tcx);\n+                            let new_stmt = Statement {\n+                                source_info: stmt.source_info,\n+                                kind: StatementKind::Assign(Box::new((\n+                                    og_place,\n+                                    Rvalue::Ref(region, borrow_knd, temp_place),\n+                                ))),\n+                            };\n+\n+                            // Replace current statement with newly created one.\n+                            *stmt = new_stmt;\n+\n+                            // Since our job with the temp is done it should be gone\n+                            let loc = Location { block: block, statement_index: i + 1 };\n+                            patch.add_statement(loc, StatementKind::StorageDead(temp));\n+\n+                            // As all projections are off the base projection, if there are\n+                            // multiple derefs in the middle of projection, it might cause\n+                            // unsoundness, to not let that happen we break the loop.\n+                            break;\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+    patch.apply(body);\n+}\n+\n+impl<'tcx> MirPass<'tcx> for Derefer {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        deref_finder(tcx, body);\n+    }\n+}"}, {"sha": "059ee09dfd794519b346a709eba017217864704d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -53,6 +53,7 @@ mod const_prop_lint;\n mod coverage;\n mod deaggregator;\n mod deduplicate_blocks;\n+mod deref_separator;\n mod dest_prop;\n pub mod dump_mir;\n mod early_otherwise_branch;\n@@ -431,6 +432,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n         // and it can help optimizations.\n         &deaggregator::Deaggregator,\n+        &deref_separator::Derefer,\n         &Lint(const_prop_lint::ConstProp),\n     ];\n "}, {"sha": "e9a45656ebf8def5f8a39f68eb0391f1b640a8f0", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test.rs:2:11: 2:11\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n+      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:4:22: 4:28\n++     let mut _6: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:5:13: 5:26\n++     let mut _7: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test.rs:6:13: 6:26\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/derefer_test.rs:3:9: 3:14\n+          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n+          scope 2 {\n+              debug b => _2;               // in scope 2 at $DIR/derefer_test.rs:4:9: 4:14\n+              let _4: &mut i32;            // in scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n+              scope 3 {\n+                  debug x => _4;           // in scope 3 at $DIR/derefer_test.rs:5:9: 5:10\n+                  let _5: &mut i32;        // in scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+                  scope 4 {\n+                      debug y => _5;       // in scope 4 at $DIR/derefer_test.rs:6:9: 6:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_test.rs:3:9: 3:14\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/derefer_test.rs:3:17: 3:24\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_test.rs:4:9: 4:14\n+          StorageLive(_3);                 // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n+          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test.rs:4:22: 4:28\n+          (_2.0: i32) = const 99_i32;      // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n+          (_2.1: &mut (i32, i32)) = move _3; // scope 1 at $DIR/derefer_test.rs:4:17: 4:29\n+          StorageDead(_3);                 // scope 1 at $DIR/derefer_test.rs:4:28: 4:29\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n+-         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _6 = move (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+          StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n+-         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _7 = move (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n+          _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n+          StorageDead(_5);                 // scope 3 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:7:1: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_test.rs:2:1: 7:2\n+      }\n+  }\n+  "}, {"sha": "2ebc0d343bd74123c3db5362f3ebeccd723c13e5", "filename": "src/test/mir-opt/derefer_test.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Fderefer_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.rs?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -0,0 +1,7 @@\n+// EMIT_MIR derefer_test.main.Derefer.diff\n+fn main() {\n+    let mut a = (42,43);\n+    let mut b = (99, &mut a);\n+    let x = &mut (*b.1).0;\n+    let y = &mut (*b.1).1;\n+}"}, {"sha": "a18ff0e35fe9a0c2f834596b9817539bf5cab550", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -10,6 +10,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _7: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n@@ -19,7 +20,10 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _7 = move (*_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = &mut (*_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "d079ba59ffc3d5ecd9ed677bb018aeb9f0ad12cd", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -7,13 +7,17 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _4: std::boxed::Box<T>;  // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        _2 = &(*(*_3));                  // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _4 = move (*_3);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _2 = &(*_4);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}, {"sha": "2e03467018693b54934618980b7162ee836d23f4", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -64,5 +64,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:11:5: 11:6\n           return;                          // scope 0 at $DIR/lower_array_len.rs:12:2: 12:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:6:1: 12:2\n+      }\n   }\n   "}, {"sha": "6aa77a9ed6013481c93f9ca643db528c1652599f", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -77,5 +77,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:24:5: 24:6\n           return;                          // scope 0 at $DIR/lower_array_len.rs:25:2: 25:2\n       }\n+  \n+      bb7 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:17:1: 25:2\n+      }\n   }\n   "}, {"sha": "b41582477c692a2d67176fba8e45e51ef93ead19", "filename": "src/test/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14\n           return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:30:1: 32:2\n+      }\n   }\n   "}, {"sha": "92ec7a3633e9462b7b85afd35e0d43d3abc20e05", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -26,5 +26,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:13: 38:14\n           return;                          // scope 0 at $DIR/lower_array_len.rs:39:2: 39:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_array_len.rs:37:1: 39:2\n+      }\n   }\n   "}, {"sha": "2210ad54e8d3d02975cb6108fb94baea1d87e594", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -59,5 +59,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_slice_len.rs:9:5: 9:6\n           return;                          // scope 0 at $DIR/lower_slice_len.rs:10:2: 10:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_slice_len.rs:4:1: 10:2\n+      }\n   }\n   "}, {"sha": "868eeb6367e33badc2a89a89bcdfa9321b49c054", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.eliminate_fallthrough.UninhabitedEnumBranching.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           _2 = discriminant(_1);           // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:11: 22:12\n -         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n-+         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n++         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:22:5: 22:12\n       }\n   \n       bb1: {\n@@ -29,9 +29,13 @@\n   \n       bb4: {\n           return;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:27:2: 27:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:21:1: 27:2\n +     }\n + \n-+     bb5: {\n++     bb6: {\n +         unreachable;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:25:14: 25:15\n       }\n   }"}, {"sha": "33c1458dc0c17bdb3cca1226e860e5287956eb7b", "filename": "src/test/mir-opt/uninhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_fallthrough_elimination.keep_fallthrough.UninhabitedEnumBranching.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -30,5 +30,9 @@\n       bb4: {\n           return;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:18:2: 18:2\n       }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:12:1: 18:2\n+      }\n   }\n   "}, {"sha": "380844f8861f6286ef28f4185f82dee94c14e6d0", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -64,6 +64,10 @@\n           _0 = const ();                   // scope 0 at $DIR/unreachable.rs:19:6: 19:6\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable.rs:20:2: 20:2\n+-     }\n+- \n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unreachable.rs:8:1: 20:2\n       }\n   }\n   "}, {"sha": "e26990b1def8946a3c7305f2fd9d7c61c01a7336", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -69,6 +69,10 @@\n           StorageDead(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           StorageDead(_2);                 // scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           return;                          // scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n+-     }\n+- \n+-     bb7 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unreachable_diverging.rs:12:1: 20:2\n       }\n   }\n   "}, {"sha": "4e8936905c440a3fbd0b3f6f6163121c19543698", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9fa941c23e18f2e7c838454d95e5526bf15201ed/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=9fa941c23e18f2e7c838454d95e5526bf15201ed", "patch": "@@ -23,6 +23,10 @@ fn foo() -> i32 {\n         _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n         return;                          // scope 0 at main.rs:6:2: 6:2\n     }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at main.rs:4:1: 6:2\n+    }\n }\n \n fn main() -> () {"}]}