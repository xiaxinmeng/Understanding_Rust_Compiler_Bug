{"sha": "8521a8c92da6c0c845d4f6394e903651a227946a", "node_id": "C_kwDOAAsO6NoAKDg1MjFhOGM5MmRhNmMwYzg0NWQ0ZjYzOTRlOTAzNjUxYTIyNzk0NmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T07:55:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T07:55:44Z"}, "message": "Auto merge of #100726 - jswrenn:transmute, r=oli-obk\n\nsafe transmute: use `Assume` struct to provide analysis options\n\nThis task was left as a TODO in #92268; resolving it brings [`BikeshedIntrinsicFrom`](https://doc.rust-lang.org/nightly/core/mem/trait.BikeshedIntrinsicFrom.html) more in line with the API defined in [MCP411](https://github.com/rust-lang/compiler-team/issues/411).\n\n**Before:**\n```rust\npub unsafe trait BikeshedIntrinsicFrom<\n    Src,\n    Context,\n    const ASSUME_ALIGNMENT: bool,\n    const ASSUME_LIFETIMES: bool,\n    const ASSUME_VALIDITY: bool,\n    const ASSUME_VISIBILITY: bool,\n> where\n    Src: ?Sized,\n{}\n```\n**After:**\n```rust\npub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\nwhere\n    Src: ?Sized,\n{}\n```\n\n`Assume::visibility` has also been renamed to `Assume::safety`, as library safety invariants are what's actually being assumed; visibility is just the mechanism by which it is currently checked (and that may change).\n\nr? `@oli-obk`\n\n---\n\nRelated:\n- https://github.com/rust-lang/compiler-team/issues/411\n- https://github.com/rust-lang/rust/issues/99571", "tree": {"sha": "18fff039f86b368a19865a2c5a563987ef4185d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fff039f86b368a19865a2c5a563987ef4185d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8521a8c92da6c0c845d4f6394e903651a227946a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8521a8c92da6c0c845d4f6394e903651a227946a", "html_url": "https://github.com/rust-lang/rust/commit/8521a8c92da6c0c845d4f6394e903651a227946a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8521a8c92da6c0c845d4f6394e903651a227946a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d140bd36e7fcdc894b7c342fd81a63fdd66373", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d140bd36e7fcdc894b7c342fd81a63fdd66373", "html_url": "https://github.com/rust-lang/rust/commit/c2d140bd36e7fcdc894b7c342fd81a63fdd66373"}, {"sha": "fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcc038a224e58f7d3aca25c7f2321f11ce5513d", "html_url": "https://github.com/rust-lang/rust/commit/fbcc038a224e58f7d3aca25c7f2321f11ce5513d"}], "stats": {"total": 2053, "additions": 1319, "deletions": 734}, "files": [{"sha": "2a38ed1f8db270611df10a603f6ba3926923497b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4234,6 +4234,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"itertools\",\n  \"rustc_data_structures\",\n+ \"rustc_hir\",\n  \"rustc_infer\",\n  \"rustc_macros\",\n  \"rustc_middle\","}, {"sha": "f19d07d98dcb29fb5653b1077eeacbb63db6e2bb", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -193,7 +193,8 @@ language_item_table! {\n     DispatchFromDyn,         sym::dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);\n \n     // language items relating to transmutability\n-    TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(6);\n+    TransmuteOpts,           sym::transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n+    TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n \n     Add(Op),                 sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n     Sub(Op),                 sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);"}, {"sha": "c501fba21c60fea362714130e68880c4c0dff132", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -339,6 +339,7 @@ symbols! {\n         alias,\n         align,\n         align_offset,\n+        alignment,\n         alignstack,\n         all,\n         alloc,\n@@ -866,6 +867,7 @@ symbols! {\n         lib,\n         libc,\n         lifetime,\n+        lifetimes,\n         likely,\n         line,\n         line_macro,\n@@ -1294,6 +1296,7 @@ symbols! {\n         rustfmt,\n         rvalue_static_promotion,\n         s,\n+        safety,\n         sanitize,\n         sanitizer_runtime,\n         saturating_add,\n@@ -1478,6 +1481,7 @@ symbols! {\n         trait_alias,\n         trait_upcasting,\n         transmute,\n+        transmute_opts,\n         transmute_trait,\n         transparent,\n         transparent_enums,\n@@ -1573,6 +1577,7 @@ symbols! {\n         va_list,\n         va_start,\n         val,\n+        validity,\n         values,\n         var,\n         variant_count,"}, {"sha": "e44f66657955e694e5e5c4a40dfda4a87b586324", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -279,29 +279,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let predicate = obligation.predicate;\n \n         let type_at = |i| predicate.map_bound(|p| p.trait_ref.substs.type_at(i));\n-        let bool_at = |i| {\n-            predicate\n-                .skip_binder()\n-                .trait_ref\n-                .substs\n-                .const_at(i)\n-                .try_eval_bool(self.tcx(), obligation.param_env)\n-                .unwrap_or(true)\n-        };\n+        let const_at = |i| predicate.skip_binder().trait_ref.substs.const_at(i);\n \n         let src_and_dst = predicate.map_bound(|p| rustc_transmute::Types {\n-            src: p.trait_ref.substs.type_at(1),\n             dst: p.trait_ref.substs.type_at(0),\n+            src: p.trait_ref.substs.type_at(1),\n         });\n \n         let scope = type_at(2).skip_binder();\n \n-        let assume = rustc_transmute::Assume {\n-            alignment: bool_at(3),\n-            lifetimes: bool_at(4),\n-            validity: bool_at(5),\n-            visibility: bool_at(6),\n-        };\n+        let assume =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3));\n \n         let cause = obligation.cause.clone();\n "}, {"sha": "aa6fe7d241968ffd239887c4ddd93d3326268be3", "filename": "compiler/rustc_transmute/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2FCargo.toml?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,7 +7,8 @@ edition = \"2021\"\n \n [dependencies]\n tracing = \"0.1\"\n-rustc_data_structures = { path = \"../rustc_data_structures\", optional = true}\n+rustc_data_structures = { path = \"../rustc_data_structures\"}\n+rustc_hir = { path = \"../rustc_hir\", optional = true}\n rustc_infer = { path = \"../rustc_infer\", optional = true}\n rustc_macros = { path = \"../rustc_macros\", optional = true}\n rustc_middle = { path = \"../rustc_middle\", optional = true}\n@@ -17,7 +18,7 @@ rustc_target = { path = \"../rustc_target\", optional = true}\n [features]\n rustc = [\n     \"rustc_middle\",\n-    \"rustc_data_structures\",\n+    \"rustc_hir\",\n     \"rustc_infer\",\n     \"rustc_macros\",\n     \"rustc_span\","}, {"sha": "b8922696e3067248fee95c81d28d042a623a7c4f", "filename": "compiler/rustc_transmute/src/layout/dfa.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -104,7 +104,6 @@ where\n     }\n \n     #[instrument(level = \"debug\")]\n-    #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n     pub(crate) fn from_nfa(nfa: Nfa<R>) -> Self {\n         let Nfa { transitions: nfa_transitions, start: nfa_start, accepting: nfa_accepting } = nfa;\n "}, {"sha": "c2bc47bc043a0d358bf77a7826423b05cad1cedb", "filename": "compiler/rustc_transmute/src/layout/nfa.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -119,8 +119,6 @@ where\n \n         let mut transitions: Map<State, Map<Transition<R>, Set<State>>> = self.transitions;\n \n-        // the iteration order doesn't matter\n-        #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n         for (source, transition) in other.transitions {\n             let fix_state = |state| if state == other.start { self.accepting } else { state };\n             let entry = transitions.entry(fix_state(source)).or_default();\n@@ -142,8 +140,6 @@ where\n \n         let mut transitions: Map<State, Map<Transition<R>, Set<State>>> = self.transitions.clone();\n \n-        // the iteration order doesn't matter\n-        #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n         for (&(mut source), transition) in other.transitions.iter() {\n             // if source is starting state of `other`, replace with starting state of `self`\n             if source == other.start {\n@@ -152,8 +148,6 @@ where\n             let entry = transitions.entry(source).or_default();\n             for (edge, destinations) in transition {\n                 let entry = entry.entry(edge.clone()).or_default();\n-                // the iteration order doesn't matter\n-                #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n                 for &(mut destination) in destinations {\n                     // if dest is accepting state of `other`, replace with accepting state of `self`\n                     if destination == other.accepting {"}, {"sha": "64cd70d3678777920897b2330d14b0b28d26c3fd", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,11 +6,7 @@\n #[macro_use]\n extern crate tracing;\n \n-#[cfg(feature = \"rustc\")]\n-pub(crate) use rustc_data_structures::fx::{FxHashMap as Map, FxHashSet as Set};\n-\n-#[cfg(not(feature = \"rustc\"))]\n-pub(crate) use std::collections::{HashMap as Map, HashSet as Set};\n+pub(crate) use rustc_data_structures::fx::{FxIndexMap as Map, FxIndexSet as Set};\n \n pub(crate) mod layout;\n pub(crate) mod maybe_transmutable;\n@@ -19,8 +15,8 @@ pub(crate) mod maybe_transmutable;\n pub struct Assume {\n     pub alignment: bool,\n     pub lifetimes: bool,\n+    pub safety: bool,\n     pub validity: bool,\n-    pub visibility: bool,\n }\n \n /// The type encodes answers to the question: \"Are these types transmutable?\"\n@@ -62,11 +58,17 @@ pub enum Reason {\n \n #[cfg(feature = \"rustc\")]\n mod rustc {\n+    use super::*;\n+\n+    use rustc_hir::lang_items::LangItem;\n     use rustc_infer::infer::InferCtxt;\n     use rustc_macros::{TypeFoldable, TypeVisitable};\n     use rustc_middle::traits::ObligationCause;\n     use rustc_middle::ty::Binder;\n+    use rustc_middle::ty::Const;\n+    use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::Ty;\n+    use rustc_middle::ty::TyCtxt;\n \n     /// The source and destination types of a transmutation.\n     #[derive(TypeFoldable, TypeVisitable, Debug, Clone, Copy)]\n@@ -106,6 +108,54 @@ mod rustc {\n             .answer()\n         }\n     }\n+\n+    impl Assume {\n+        /// Constructs an `Assume` from a given const-`Assume`.\n+        pub fn from_const<'tcx>(\n+            tcx: TyCtxt<'tcx>,\n+            param_env: ParamEnv<'tcx>,\n+            c: Const<'tcx>,\n+        ) -> Self {\n+            use rustc_middle::ty::ScalarInt;\n+            use rustc_middle::ty::TypeVisitable;\n+            use rustc_span::symbol::sym;\n+\n+            let c = c.eval(tcx, param_env);\n+\n+            if let Some(err) = c.error_reported() {\n+                return Self { alignment: true, lifetimes: true, safety: true, validity: true };\n+            }\n+\n+            let adt_def = c.ty().ty_adt_def().expect(\"The given `Const` must be an ADT.\");\n+\n+            assert_eq!(\n+                tcx.require_lang_item(LangItem::TransmuteOpts, None),\n+                adt_def.did(),\n+                \"The given `Const` was not marked with the `{}` lang item.\",\n+                LangItem::TransmuteOpts.name(),\n+            );\n+\n+            let variant = adt_def.non_enum_variant();\n+            let fields = c.to_valtree().unwrap_branch();\n+\n+            let get_field = |name| {\n+                let (field_idx, _) = variant\n+                    .fields\n+                    .iter()\n+                    .enumerate()\n+                    .find(|(_, field_def)| name == field_def.name)\n+                    .expect(&format!(\"There were no fields named `{name}`.\"));\n+                fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n+            };\n+\n+            Self {\n+                alignment: get_field(sym::alignment),\n+                lifetimes: get_field(sym::lifetimes),\n+                safety: get_field(sym::safety),\n+                validity: get_field(sym::validity),\n+            }\n+        }\n+    }\n }\n \n #[cfg(feature = \"rustc\")]"}, {"sha": "1186eac37abd9083144470f235b0f3965153a06d", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -105,7 +105,7 @@ where\n     #[inline(always)]\n     #[instrument(level = \"debug\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n     pub(crate) fn answer(self) -> Answer<<C as QueryContext>::Ref> {\n-        let assume_visibility = self.assume.visibility;\n+        let assume_visibility = self.assume.safety;\n         let query_or_answer = self.map_layouts(|src, dst, scope, context| {\n             // Remove all `Def` nodes from `src`, without checking their visibility.\n             let src = src.prune(&|def| true);"}, {"sha": "4d5772a4f2ea5d17366b852eca4418e40d0582f3", "filename": "compiler/rustc_transmute/src/maybe_transmutable/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -13,7 +13,7 @@ mod bool {\n             layout::Tree::<Def, !>::bool(),\n             layout::Tree::<Def, !>::bool(),\n             (),\n-            crate::Assume { alignment: false, lifetimes: false, validity: true, visibility: false },\n+            crate::Assume { alignment: false, lifetimes: false, validity: true, safety: false },\n             UltraMinimal,\n         )\n         .answer();\n@@ -26,7 +26,7 @@ mod bool {\n             layout::Dfa::<!>::bool(),\n             layout::Dfa::<!>::bool(),\n             (),\n-            crate::Assume { alignment: false, lifetimes: false, validity: true, visibility: false },\n+            crate::Assume { alignment: false, lifetimes: false, validity: true, safety: false },\n             UltraMinimal,\n         )\n         .answer();"}, {"sha": "9d857eb63da9cfbec44d8c009e9279c9d168e750", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -93,6 +93,7 @@\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n+#![allow(incomplete_features)]\n //\n // Library features:\n #![feature(const_align_offset)]\n@@ -160,6 +161,7 @@\n //\n // Language features:\n #![feature(abi_unadjusted)]\n+#![feature(adt_const_params)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]"}, {"sha": "87a378631050a941a45094f29bc8735b0bb8ab3b", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 76, "deletions": 12, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,25 +4,20 @@\n /// any value of type `Self` are safely transmutable into a value of type `Dst`, in a given `Context`,\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[lang = \"transmute_trait\"]\n+#[cfg_attr(not(bootstrap), lang = \"transmute_trait\")]\n #[rustc_on_unimplemented(\n     message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n     label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n )]\n-pub unsafe trait BikeshedIntrinsicFrom<\n-    Src,\n-    Context,\n-    const ASSUME_ALIGNMENT: bool,\n-    const ASSUME_LIFETIMES: bool,\n-    const ASSUME_VALIDITY: bool,\n-    const ASSUME_VISIBILITY: bool,\n-> where\n+pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n+where\n     Src: ?Sized,\n {\n }\n \n /// What transmutation safety conditions shall the compiler assume that *you* are checking?\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+#[cfg_attr(not(bootstrap), lang = \"transmute_opts\")]\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub struct Assume {\n     /// When `true`, the compiler assumes that *you* are ensuring (either dynamically or statically) that\n@@ -33,11 +28,80 @@ pub struct Assume {\n     /// that violates Rust's memory model.\n     pub lifetimes: bool,\n \n+    /// When `true`, the compiler assumes that *you* have ensured that it is safe for you to violate the\n+    /// type and field privacy of the destination type (and sometimes of the source type, too).\n+    pub safety: bool,\n+\n     /// When `true`, the compiler assumes that *you* are ensuring that the source type is actually a valid\n     /// instance of the destination type.\n     pub validity: bool,\n+}\n \n-    /// When `true`, the compiler assumes that *you* have ensured that it is safe for you to violate the\n-    /// type and field privacy of the destination type (and sometimes of the source type, too).\n-    pub visibility: bool,\n+impl Assume {\n+    /// Do not assume that *you* have ensured any safety properties are met.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const NOTHING: Self =\n+        Self { alignment: false, lifetimes: false, safety: false, validity: false };\n+\n+    /// Assume only that alignment conditions are met.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const ALIGNMENT: Self = Self { alignment: true, ..Self::NOTHING };\n+\n+    /// Assume only that lifetime conditions are met.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const LIFETIMES: Self = Self { lifetimes: true, ..Self::NOTHING };\n+\n+    /// Assume only that safety conditions are met.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const SAFETY: Self = Self { safety: true, ..Self::NOTHING };\n+\n+    /// Assume only that dynamically-satisfiable validity conditions are met.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const VALIDITY: Self = Self { validity: true, ..Self::NOTHING };\n+\n+    /// Assume both `self` and `other_assumptions`.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const fn and(self, other_assumptions: Self) -> Self {\n+        Self {\n+            alignment: self.alignment || other_assumptions.alignment,\n+            lifetimes: self.lifetimes || other_assumptions.lifetimes,\n+            safety: self.safety || other_assumptions.safety,\n+            validity: self.validity || other_assumptions.validity,\n+        }\n+    }\n+\n+    /// Assume `self`, excepting `other_assumptions`.\n+    #[unstable(feature = \"transmutability\", issue = \"99571\")]\n+    pub const fn but_not(self, other_assumptions: Self) -> Self {\n+        Self {\n+            alignment: self.alignment && !other_assumptions.alignment,\n+            lifetimes: self.lifetimes && !other_assumptions.lifetimes,\n+            safety: self.safety && !other_assumptions.safety,\n+            validity: self.validity && !other_assumptions.validity,\n+        }\n+    }\n+}\n+\n+// FIXME(jswrenn): This const op is not actually usable. Why?\n+// https://github.com/rust-lang/rust/pull/100726#issuecomment-1219928926\n+#[unstable(feature = \"transmutability\", issue = \"99571\")]\n+#[rustc_const_unstable(feature = \"transmutability\", issue = \"99571\")]\n+impl const core::ops::Add for Assume {\n+    type Output = Assume;\n+\n+    fn add(self, other_assumptions: Assume) -> Assume {\n+        self.and(other_assumptions)\n+    }\n+}\n+\n+// FIXME(jswrenn): This const op is not actually usable. Why?\n+// https://github.com/rust-lang/rust/pull/100726#issuecomment-1219928926\n+#[unstable(feature = \"transmutability\", issue = \"99571\")]\n+#[rustc_const_unstable(feature = \"transmutability\", issue = \"99571\")]\n+impl const core::ops::Sub for Assume {\n+    type Output = Assume;\n+\n+    fn sub(self, other_assumptions: Assume) -> Assume {\n+        self.but_not(other_assumptions)\n+    }\n }"}, {"sha": "0225c4230dc4de91cd58e13cc200174f5046133a", "filename": "src/test/ui/transmutability/abstraction/abstracted_assume.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -3,6 +3,7 @@\n //! provided indirectly through an abstraction.\n \n #![crate_type = \"lib\"]\n+#![feature(adt_const_params)]\n #![feature(transmutability)]\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n@@ -13,19 +14,13 @@ mod assert {\n         Src,\n         Dst,\n         Context,\n-        const ASSUME_ALIGNMENT: bool,\n-        const ASSUME_LIFETIMES: bool,\n-        const ASSUME_VALIDITY: bool,\n-        const ASSUME_VISIBILITY: bool,\n+        const ASSUME: std::mem::Assume,\n     >()\n     where\n         Dst: BikeshedIntrinsicFrom<\n             Src,\n             Context,\n-            ASSUME_ALIGNMENT,\n-            ASSUME_LIFETIMES,\n-            ASSUME_VALIDITY,\n-            ASSUME_VISIBILITY,\n+            ASSUME,\n         >,\n     {}\n }\n@@ -35,7 +30,7 @@ fn direct() {\n     #[repr(C)] struct Src;\n     #[repr(C)] struct Dst;\n \n-    assert::is_transmutable::<Src, Dst, Context, false, false, false, false>();\n+    assert::is_transmutable::<Src, Dst, Context, { std::mem::Assume::NOTHING }>();\n }\n \n fn via_const() {\n@@ -45,7 +40,7 @@ fn via_const() {\n \n     const FALSE: bool = false;\n \n-    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n+    assert::is_transmutable::<Src, Dst, Context, { std::mem::Assume::NOTHING }>();\n }\n \n fn via_associated_const() {\n@@ -65,9 +60,13 @@ fn via_associated_const() {\n         Src,\n         Dst,\n         Context,\n-        {Ty::FALSE},\n-        {Ty::FALSE},\n-        {Ty::FALSE},\n-        {Ty::FALSE}\n+        {\n+            std::mem::Assume {\n+                alignment: {Ty::FALSE},\n+                lifetimes: {Ty::FALSE},\n+                safety: {Ty::FALSE},\n+                validity: {Ty::FALSE},\n+            }\n+        }\n     >();\n }"}, {"sha": "e693a09570f3adb7be5be9243234b992cf9a4715", "filename": "src/test/ui/transmutability/abstraction/const_generic_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fconst_generic_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fconst_generic_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fconst_generic_fn.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,13 +6,13 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn array_like<T, E, const N: usize>()\n     where\n-        T: BikeshedIntrinsicFrom<[E; N], Context, false, false, false, true>,\n-        [E; N]: BikeshedIntrinsicFrom<T, Context, false, false, false, true>\n+        T: BikeshedIntrinsicFrom<[E; N], Context, { Assume::SAFETY }>,\n+        [E; N]: BikeshedIntrinsicFrom<T, Context, { Assume::SAFETY }>\n     {}\n }\n "}, {"sha": "353797d0c4bb0062124410e180f727b09fd92b0c", "filename": "src/test/ui/transmutability/arrays/should_have_correct_length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_have_correct_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_have_correct_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_have_correct_length.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,12 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n     {}\n }\n "}, {"sha": "b00e5c7e4008caae923f013ff808af552fc56ec0", "filename": "src/test/ui/transmutability/arrays/should_inherit_alignment.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_inherit_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_inherit_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_inherit_alignment.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,17 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "853bd9cbc0fb3c4cd8c0b65322a8660ec135fafe", "filename": "src/test/ui/transmutability/arrays/should_require_well_defined_layout.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,12 +5,17 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "96a2fdc54dbb42e86a62ffbfa4fced74fcb1df83", "filename": "src/test/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 78, "deletions": 42, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,98 +1,134 @@\n error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:21:52\n+  --> $DIR/should_require_well_defined_layout.rs:26:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:22:47\n+  --> $DIR/should_require_well_defined_layout.rs:27:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 0]`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 0]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:27:52\n+  --> $DIR/should_require_well_defined_layout.rs:32:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:28:47\n+  --> $DIR/should_require_well_defined_layout.rs:33:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 1]`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 1]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:33:52\n+  --> $DIR/should_require_well_defined_layout.rs:38:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:34:47\n+  --> $DIR/should_require_well_defined_layout.rs:39:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `[String; 2]`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 2]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "940f070e7e3605b840a9285d6f261df864982cbb", "filename": "src/test/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,11 +5,18 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "4da5fcea3374c1c4cbeab386c65c944384a7b963", "filename": "src/test/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 280, "deletions": 140, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,322 +1,462 @@\n error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:41:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:48:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0i8`\n+   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:43:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:50:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, true, true, true, true>` is not implemented for `u16`\n+   = help: the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:49:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:56:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, true, true, true, true>` is not implemented for `V0u8`\n+   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:51:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:58:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, true, true, true, true>` is not implemented for `u16`\n+   = help: the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:65:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:72:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0i16`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:67:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:74:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, true, true, true, true>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:73:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:80:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, true, true, true, true>` is not implemented for `V0u16`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:75:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:82:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, true, true, true, true>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:89:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:96:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0i32`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:91:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:98:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, true, true, true, true>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:97:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:104:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, true, true, true, true>` is not implemented for `V0u32`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:99:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:106:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, true, true, true, true>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:113:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:120:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0i64`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:115:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:122:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, true, true, true, true>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:121:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:128:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, true, true, true, true>` is not implemented for `V0u64`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:123:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:130:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, true, true, true, true>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:137:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:144:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0isize`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0isize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:139:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:146:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n+   = help: the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:145:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:152:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n    |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, true, true, true, true>` is not implemented for `V0usize`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0usize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n-  --> $DIR/primitive_reprs_should_have_correct_length.rs:147:44\n+  --> $DIR/primitive_reprs_should_have_correct_length.rs:154:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n    |                                            ^^^^^^ `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, true, true, true, true>` is not implemented for `[usize; 2]`\n+   = help: the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error: aborting due to 20 previous errors\n "}, {"sha": "102111ae291c6200d6a57103e7b2a130e4d68b4d", "filename": "src/test/ui/transmutability/enums/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "510b8c56e5ab8712ff456d0d0d2c7c1f37918789", "filename": "src/test/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 84, "deletions": 42, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,98 +1,140 @@\n error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:21:52\n+  --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:22:47\n+  --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `void::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `void::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:27:52\n+  --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:28:47\n+  --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `singleton::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `singleton::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:33:52\n+  --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:34:47\n+  --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `duplex::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `duplex::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b753cf0e62d5943dbe40b2b84551ab1d38cf14bf", "filename": "src/test/ui/transmutability/enums/should_order_correctly.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_order_correctly.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,12 +7,17 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "c077c52a36ac7913cf4309cbb867345bdf8c49be", "filename": "src/test/ui/transmutability/enums/should_pad_variants.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,11 +6,16 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "a823503d594e9715847ec46d38ecf76a78dd6b1a", "filename": "src/test/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,24 @@\n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n-  --> $DIR/should_pad_variants.rs:39:36\n+  --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "19ff690050031e16698eeeffdb952f971b6175eb", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,12 +7,17 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "fcb70813bd961f76bbffa57ea04dc6dedbcfbd42", "filename": "src/test/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,24 @@\n error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n-  --> $DIR/should_respect_endianness.rs:32:36\n+  --> $DIR/should_respect_endianness.rs:37:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n    |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, true, true, true, true>` is not implemented for `Unexpected`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_respect_endianness.rs:15:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "b3a1e13b85bed0595c5bfa4d43e2c1e86de9c070", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/unknown_dst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -10,7 +10,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n+        Dst: BikeshedIntrinsicFrom<Src, Context>\n     {}\n }\n "}, {"sha": "092b205b770270e8983d920239201cb8175897ef", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/unknown_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -10,7 +10,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n+        Dst: BikeshedIntrinsicFrom<Src, Context>\n     {}\n }\n "}, {"sha": "ebe34e13432b55614d454538ca275dca63789319", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/unknown_src_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -10,7 +10,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n+        Dst: BikeshedIntrinsicFrom<Src, Context>\n     {}\n }\n "}, {"sha": "354abf99d4d07ae29bae4d46e27d0c1550936188", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -2,31 +2,48 @@\n //! provided.\n \n #![crate_type = \"lib\"]\n+#![feature(adt_const_params)]\n+#![feature(generic_const_exprs)]\n #![feature(transmutability)]\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<\n         Src,\n         Dst,\n         Context,\n         const ASSUME_ALIGNMENT: bool,\n         const ASSUME_LIFETIMES: bool,\n+        const ASSUME_SAFETY: bool,\n         const ASSUME_VALIDITY: bool,\n-        const ASSUME_VISIBILITY: bool,\n     >()\n     where\n         Dst: BikeshedIntrinsicFrom<\n             Src,\n             Context,\n-            ASSUME_ALIGNMENT,\n-            ASSUME_LIFETIMES,\n-            ASSUME_VALIDITY,\n-            ASSUME_VISIBILITY,\n+            { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }\n+            //~^ ERROR E0080\n+            //~| ERROR E0080\n+            //~| ERROR E0080\n+            //~| ERROR E0080\n         >,\n     {}\n+\n+    const fn from_options(\n+        alignment: bool,\n+        lifetimes: bool,\n+        safety: bool,\n+        validity: bool,\n+    ) -> Assume {\n+        Assume {\n+            alignment,\n+            lifetimes,\n+            safety,\n+            validity,\n+        }\n+    }\n }\n \n fn test() {"}, {"sha": "a258f2ecea6d9a0c34b6312996d1f3a9f26c9a38", "filename": "src/test/ui/transmutability/malformed-program-gracefulness/wrong-type-assume.stderr", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Fwrong-type-assume.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,27 +1,52 @@\n error[E0308]: mismatched types\n-  --> $DIR/wrong-type-assume.rs:36:51\n+  --> $DIR/wrong-type-assume.rs:53:51\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context, {0u8}, false, false, false>();\n    |                                                   ^^^ expected `bool`, found `u8`\n \n+error[E0080]: evaluation of `assert::is_transmutable::<test::Src, test::Dst, test::Context, {0u8}, false, false, false>::{constant#0}` failed\n+  --> $DIR/wrong-type-assume.rs:26:15\n+   |\n+LL |             { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/wrong-type-assume.rs:37:58\n+  --> $DIR/wrong-type-assume.rs:54:58\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context, false, {0u8}, false, false>();\n    |                                                          ^^^ expected `bool`, found `u8`\n \n+error[E0080]: evaluation of `assert::is_transmutable::<test::Src, test::Dst, test::Context, false, {0u8}, false, false>::{constant#0}` failed\n+  --> $DIR/wrong-type-assume.rs:26:15\n+   |\n+LL |             { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/wrong-type-assume.rs:38:65\n+  --> $DIR/wrong-type-assume.rs:55:65\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context, false, false, {0u8}, false>();\n    |                                                                 ^^^ expected `bool`, found `u8`\n \n+error[E0080]: evaluation of `assert::is_transmutable::<test::Src, test::Dst, test::Context, false, false, {0u8}, false>::{constant#0}` failed\n+  --> $DIR/wrong-type-assume.rs:26:15\n+   |\n+LL |             { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/wrong-type-assume.rs:39:72\n+  --> $DIR/wrong-type-assume.rs:56:72\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context, false, false, false, {0u8}>();\n    |                                                                        ^^^ expected `bool`, found `u8`\n \n-error: aborting due to 4 previous errors\n+error[E0080]: evaluation of `assert::is_transmutable::<test::Src, test::Dst, test::Context, false, false, false, {0u8}>::{constant#0}` failed\n+  --> $DIR/wrong-type-assume.rs:26:15\n+   |\n+LL |             { from_options(ASSUME_ALIGNMENT, ASSUME_LIFETIMES, ASSUME_SAFETY, ASSUME_VALIDITY) }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "eebb74fff471ce9ec240c27a876dd2a79f026776", "filename": "src/test/ui/transmutability/primitives/bool.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,17 +4,17 @@\n #![allow(incomplete_features)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n     {}\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n     {}\n }\n "}, {"sha": "214b5e150edd23de17a4d3a3f0d3feebda09a07f", "filename": "src/test/ui/transmutability/primitives/bool.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,15 +4,15 @@ error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope\n LL |     assert::is_transmutable::<u8, bool>();\n    |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, true>` is not implemented for `bool`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "0df43d2045f72aeca46bf958ff981118c849daa3", "filename": "src/test/ui/transmutability/primitives/numbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -9,7 +9,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n+        Dst: BikeshedIntrinsicFrom<Src, Context>\n     {}\n }\n "}, {"sha": "7cb7ca8e6db524a7255ea08a0c6e1ba7b6165589", "filename": "src/test/ui/transmutability/primitives/numbers.stderr", "status": "modified", "additions": 171, "deletions": 171, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,911 +4,911 @@ error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope\n LL |     assert::is_transmutable::<   i8,   i16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i16`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:63:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u16`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:64:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n    |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:70:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:71:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n    |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:73:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i16`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:74:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u16`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:75:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n    |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:81:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:82:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n    |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:84:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:85:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:86:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n    |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:90:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:91:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n    |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:93:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i32`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:94:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f32`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:95:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u32`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n    |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:99:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:100:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n    |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:102:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:103:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:104:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n    |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:105:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:106:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n    |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:108:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:109:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:110:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n    |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:111:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:112:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n    |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:114:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u64`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:115:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i64`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:116:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n    |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `f64`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:117:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:118:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n    |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n    |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n    |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `u128`\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n    |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, false, false, false, false>` is not implemented for `i128`\n+   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to 57 previous errors\n "}, {"sha": "1975a61de988215663bf94801d225a7f8504584a", "filename": "src/test/ui/transmutability/primitives/unit.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,11 +5,16 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "8cabe44a0538c817219df58c0a20e801ce6701ca", "filename": "src/test/ui/transmutability/primitives/unit.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,24 @@\n error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n-  --> $DIR/unit.rs:23:35\n+  --> $DIR/unit.rs:28:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n    |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, true, true, true, true>` is not implemented for `u8`\n+   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:12:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "af3ff0ec1d20567c52647b53fd1271fca50d7527", "filename": "src/test/ui/transmutability/references.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,12 +5,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "e9c7b144a826cfca705b0860cfcd3ff98745d7e6", "filename": "src/test/ui/transmutability/references.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,25 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:19:52\n+  --> $DIR/references.rs:26:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n    |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n+   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "ea9bf2a237ed38ef124fda5a178cd5d36b484a9d", "filename": "src/test/ui/transmutability/structs/repr/should_handle_align.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_align.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "17dc995fcd961b975c2e51a1b3008803f38dd715", "filename": "src/test/ui/transmutability/structs/repr/should_handle_packed.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_handle_packed.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "9a65b4d702da68ab92de277d0b5ac8ae1a3f81ea", "filename": "src/test/ui/transmutability/structs/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,12 +5,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "621dbee849f0c21157cb1f6194622b233fa5935d", "filename": "src/test/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 168, "deletions": 84, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,194 +1,278 @@\n error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:21:52\n+  --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:22:47\n+  --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:27:52\n+  --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:28:47\n+  --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:33:52\n+  --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:34:47\n+  --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:39:52\n+  --> $DIR/should_require_well_defined_layout.rs:46:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:40:47\n+  --> $DIR/should_require_well_defined_layout.rs:47:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `aligned::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `aligned::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:45:52\n+  --> $DIR/should_require_well_defined_layout.rs:52:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                    ^^ `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:46:47\n+  --> $DIR/should_require_well_defined_layout.rs:53:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `packed::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `packed::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:52:49\n+  --> $DIR/should_require_well_defined_layout.rs:59:49\n    |\n LL |         assert::is_maybe_transmutable::<repr_c, ()>();\n    |                                                 ^^ `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:53:47\n+  --> $DIR/should_require_well_defined_layout.rs:60:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_c>();\n    |                                               ^^^^^^ `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `nested::repr_c`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `nested::repr_c`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "28724562bad2c6433bcb222d4240b4795c53a14c", "filename": "src/test/ui/transmutability/structs/should_order_fields_correctly.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Fshould_order_fields_correctly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Fshould_order_fields_correctly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fstructs%2Fshould_order_fields_correctly.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,17 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "e469c497353bb82bd13025044fbbdcd008c4bafb", "filename": "src/test/ui/transmutability/unions/boolish.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fboolish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fboolish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fboolish.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,12 +7,12 @@\n #![allow(incomplete_features)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n     {}\n }\n "}, {"sha": "09c13cc4dc75985aebcca20b5bc7a8952b898855", "filename": "src/test/ui/transmutability/unions/repr/should_handle_align.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_align.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "24c2abd698e704d95a9558a254c7569834b7ea2d", "filename": "src/test/ui/transmutability/unions/repr/should_handle_packed.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_handle_packed.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,12 +6,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "b1d5f71dcc585e97cd396c2f2bd30ee162e6f67f", "filename": "src/test/ui/transmutability/unions/repr/should_require_well_defined_layout.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,12 +5,19 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: true,\n+                safety: true,\n+                validity: true,\n+            }\n+        }>\n     {}\n }\n "}, {"sha": "523bde85adfa9f524246f80cc6a9646e0d8e5b17", "filename": "src/test/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,34 +1,48 @@\n error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:23:48\n+  --> $DIR/should_require_well_defined_layout.rs:30:48\n    |\n LL |     assert::is_maybe_transmutable::<repr_rust, ()>();\n    |                                                ^^ `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, true, true, true, true>` is not implemented for `()`\n+   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n-  --> $DIR/should_require_well_defined_layout.rs:24:43\n+  --> $DIR/should_require_well_defined_layout.rs:31:43\n    |\n LL |     assert::is_maybe_transmutable::<u128, repr_rust>();\n    |                                           ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, true, true, true, true>` is not implemented for `should_reject_repr_rust::repr_rust`\n+   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n-LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |       pub fn is_maybe_transmutable<Src, Dst>()\n+   |              --------------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume {\n+LL | |                 alignment: true,\n+LL | |                 lifetimes: true,\n+...  |\n+LL | |             }\n+LL | |         }>\n+   | |__________^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cabe544677e0fb195f5ea05be699d2e234ae7f93", "filename": "src/test/ui/transmutability/unions/should_pad_variants.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,11 +6,16 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume::ALIGNMENT\n+                .and(Assume::LIFETIMES)\n+                .and(Assume::SAFETY)\n+                .and(Assume::VALIDITY)\n+        }>\n     {}\n }\n "}, {"sha": "a823503d594e9715847ec46d38ecf76a78dd6b1a", "filename": "src/test/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,24 @@\n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n-  --> $DIR/should_pad_variants.rs:39:36\n+  --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, true, true, true, true>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |\n-LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n-LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, true, true, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |       pub fn is_transmutable<Src, Dst, Context>()\n+   |              --------------- required by a bound in this\n+LL |       where\n+LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n+   |  ______________^\n+LL | |             Assume::ALIGNMENT\n+LL | |                 .and(Assume::LIFETIMES)\n+LL | |                 .and(Assume::SAFETY)\n+LL | |                 .and(Assume::VALIDITY)\n+LL | |         }>\n+   | |__________^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "1007fdd795422f04ec863e5d7a825fa4df3ba304", "filename": "src/test/ui/transmutability/unions/should_permit_intersecting_if_validity_is_assumed.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_permit_intersecting_if_validity_is_assumed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_permit_intersecting_if_validity_is_assumed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_permit_intersecting_if_validity_is_assumed.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,13 +7,12 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n-        // validity IS assumed --------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n     {}\n }\n "}, {"sha": "a24dfccd3187d585b84f73e1c6239c01a2f7fec8", "filename": "src/test/ui/transmutability/unions/should_reject_contraction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,12 +5,12 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n     {}\n }\n "}, {"sha": "41f0cedc3a31197d10379976fe3a83afa169b1ee", "filename": "src/test/ui/transmutability/unions/should_reject_contraction.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,15 +4,15 @@ error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defini\n LL |     assert::is_transmutable::<Superset, Subset>();\n    |                                         ^^^^^^ `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Superset, assert::Context, false, false, false, true>` is not implemented for `Subset`\n+   = help: the trait `BikeshedIntrinsicFrom<Superset, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `Subset`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_contraction.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "43aaa6905fd4ff72e8d2c75f12621661da0aca5b", "filename": "src/test/ui/transmutability/unions/should_reject_disjoint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -5,13 +5,12 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_maybe_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n-        // validity IS assumed --------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n     {}\n }\n "}, {"sha": "4323f9740665fcfd818bc6b0fb1334b8016caef0", "filename": "src/test/ui/transmutability/unions/should_reject_disjoint.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,34 +1,34 @@\n error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n-  --> $DIR/should_reject_disjoint.rs:34:40\n+  --> $DIR/should_reject_disjoint.rs:33:40\n    |\n LL |     assert::is_maybe_transmutable::<A, B>();\n    |                                        ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, true, true>` is not implemented for `B`\n+   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `B`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n LL |     pub fn is_maybe_transmutable<Src, Dst>()\n    |            --------------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n-  --> $DIR/should_reject_disjoint.rs:35:40\n+  --> $DIR/should_reject_disjoint.rs:34:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n    |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, true, true>` is not implemented for `A`\n+   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n LL |     pub fn is_maybe_transmutable<Src, Dst>()\n    |            --------------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, true, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9cd4233ee74551aa742905c0875af9aedc90de87", "filename": "src/test/ui/transmutability/unions/should_reject_intersecting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -6,13 +6,13 @@\n #![allow(dead_code, incomplete_features, non_camel_case_types)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n \n     pub fn is_transmutable<Src, Dst>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // validity is NOT assumed ----------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // validity is NOT assumed --------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "e009888ae8d31d7f289921c6e9aa1e02c38ad4c1", "filename": "src/test/ui/transmutability/unions/should_reject_intersecting.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -4,31 +4,31 @@ error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of\n LL |     assert::is_transmutable::<A, B>();\n    |                                  ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, false, false, false, true>` is not implemented for `B`\n+   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `B`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n   --> $DIR/should_reject_intersecting.rs:37:34\n    |\n LL |     assert::is_transmutable::<B, A>();\n    |                                  ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, false, false, false, true>` is not implemented for `A`\n+   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `A`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a41669c65e74ca88609fb61d99720d49cef8e9f", "filename": "src/test/ui/transmutability/visibility/assume/should_accept_if_dst_has_private_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,12 +7,12 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // visibility IS assumed -------------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // safety IS assumed --------------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "dd57b877d78c0a8d1234e49a0fc19f2a7710263f", "filename": "src/test/ui/transmutability/visibility/assume/should_accept_if_dst_has_private_variant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_private_variant.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -7,12 +7,12 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // visibility IS assumed -------------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // safety IS assumed --------------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "ebce8ce87dfda697a800d8f38728f4f5b767c5ae", "filename": "src/test/ui/transmutability/visibility/assume/should_accept_if_dst_has_tricky_unreachable_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_tricky_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_tricky_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_tricky_unreachable_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -13,12 +13,12 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // visibility IS assumed -------------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // safety IS assumed --------------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "546fcbaa3de2375d7b80c2e0ce2162ce5f6aa6e0", "filename": "src/test/ui/transmutability/visibility/assume/should_accept_if_dst_has_unreachable_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -8,12 +8,12 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // visibility IS assumed -------------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // safety IS assumed --------------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "b9b74d18338af0c1fbbcada00b77d90287757987", "filename": "src/test/ui/transmutability/visibility/assume/should_accept_if_dst_has_unreachable_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fassume%2Fshould_accept_if_dst_has_unreachable_ty.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -8,12 +8,12 @@\n #![allow(dead_code)]\n \n mod assert {\n-    use std::mem::BikeshedIntrinsicFrom;\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, true>\n-        // visibility IS assumed -------------------------------------^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+        // safety IS assumed --------------------^^^^^^^^^^^^^^^^^^\n     {}\n }\n "}, {"sha": "5a0df09d492621a2845adfcb36524fb6ad169955", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_private_field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -11,8 +11,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "0f69630cc64fa589cc1f603586f957576f529c7b", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_private_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_private_variant.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -11,8 +11,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "9c8345a8e91a99df811df3e820b2fcf99828c183", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_unreachable_field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -11,8 +11,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "39b73302e364d22145f4b1a188efb5e1f86504ef", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_unreachable_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_field.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,5 +1,5 @@\n error[E0446]: private type `src::Zst` in public interface\n-  --> $DIR/should_accept_if_src_has_unreachable_field.rs:23:9\n+  --> $DIR/should_accept_if_src_has_unreachable_field.rs:22:9\n    |\n LL |     #[repr(C)] pub(self) struct Zst; // <- unreachable type\n    |                -------------------- `src::Zst` declared as private"}, {"sha": "acf9f2302500a25216951a85b3955eb73621f551", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_unreachable_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -11,8 +11,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "76dc7f3407555c0a0513200ca6c371120fe30ef2", "filename": "src/test/ui/transmutability/visibility/should_accept_if_src_has_unreachable_ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_accept_if_src_has_unreachable_ty.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,11 +1,11 @@\n error[E0603]: struct `Src` is private\n-  --> $DIR/should_accept_if_src_has_unreachable_ty.rs:38:36\n+  --> $DIR/should_accept_if_src_has_unreachable_ty.rs:37:36\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                    ^^^ private struct\n    |\n note: the struct `Src` is defined here\n-  --> $DIR/should_accept_if_src_has_unreachable_ty.rs:23:16\n+  --> $DIR/should_accept_if_src_has_unreachable_ty.rs:22:16\n    |\n LL |     #[repr(C)] pub(self) struct Src {\n    |                ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e8c3fbc9a0469d0baf76950f6d29a38a4cb11719", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -10,8 +10,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "d5d6d431b6f62454234d1fb751c51b95fa2e7e99", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_field.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n-  --> $DIR/should_reject_if_dst_has_private_field.rs:36:41\n+  --> $DIR/should_reject_if_dst_has_private_field.rs:35:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "47bca27abaa887711a5053ac78761fe88876261f", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -10,8 +10,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "a1ca2ced53f291ec40e02bcfca4ad777e32bd1ab", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n-  --> $DIR/should_reject_if_dst_has_private_variant.rs:37:41\n+  --> $DIR/should_reject_if_dst_has_private_variant.rs:36:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "662c32af17aa888bcfd9feaa0985928a84f5f54d", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_tricky_unreachable_field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_tricky_unreachable_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -23,8 +23,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "d7e21676fd385731ec3fb41d8d7228e8cf2a4072", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -12,8 +12,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "4e648664d5abb6bf4bedf183cbba6f2b4ec8a13f", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,18 +1,18 @@\n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n-  --> $DIR/should_reject_if_dst_has_unreachable_field.rs:38:41\n+  --> $DIR/should_reject_if_dst_has_unreachable_field.rs:37:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to previous error\n "}, {"sha": "c7b59f15b99cc273546c9f9872d89bf62e52afa9", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.rs?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -12,8 +12,7 @@ mod assert {\n \n     pub fn is_transmutable<Src, Dst, Context>()\n     where\n-        Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-        // visibility is NOT assumed ---------------------------------^^^^^\n+        Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n     {}\n }\n "}, {"sha": "bd72d64ccd75f9e4e449724fca2bd3bfc959917a", "filename": "src/test/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8521a8c92da6c0c845d4f6394e903651a227946a/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr?ref=8521a8c92da6c0c845d4f6394e903651a227946a", "patch": "@@ -1,30 +1,30 @@\n error[E0603]: struct `Dst` is private\n-  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:39:46\n+  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:38:46\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                              ^^^ private struct\n    |\n note: the struct `Dst` is defined here\n-  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:32:16\n+  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:31:16\n    |\n LL |     #[repr(C)] pub(self) struct Dst {\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n-  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:39:41\n+  --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:38:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n    |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, false, false, false, false>` is not implemented for `Dst`\n+   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n    |            --------------- required by a bound in this\n LL |     where\n-LL |         Dst: BikeshedIntrinsicFrom<Src, Context, false, false, false, false>\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n error: aborting due to 2 previous errors\n "}]}