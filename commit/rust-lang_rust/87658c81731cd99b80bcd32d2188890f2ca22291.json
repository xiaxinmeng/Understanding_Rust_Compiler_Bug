{"sha": "87658c81731cd99b80bcd32d2188890f2ca22291", "node_id": "C_kwDOAAsO6NoAKDg3NjU4YzgxNzMxY2Q5OWI4MGJjZDMyZDIxODg4OTBmMmNhMjIyOTE", "commit": {"author": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T15:52:10Z"}, "committer": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T15:52:10Z"}, "message": "refactor hover\n\nchange struct_rest_pat to guarentee a HoverResult\n\nMove token and node matching out of struct_rest_pat into hover", "tree": {"sha": "9de0e3ae9c5c0deedb13a58f198a087bfc40f71d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de0e3ae9c5c0deedb13a58f198a087bfc40f71d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87658c81731cd99b80bcd32d2188890f2ca22291", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE+fRQYdEX7Emd36W/pQASwjJOXfAFAmN4+6oACgkQpQASwjJO\nXfCkQA/+JnqB+9k8ch9WiMCUs+HKqVdLHbpD3UaYzREbwDhb6M2vOrR6ncyYScsD\nn9KA8gDWVbzuTxbT3xHirnhFAU4mia3CWdVxPYL9AvSwqwGOtZ9SLAFlj0Ai26bc\nr7ksvCoh0+kedqT2vnZCfPi8AlIqWINGZIfEjASv9o92TgWtkrjMohwNHycHrIQ2\nHaHrI1LJ51oWLuS84XGcOcms51+mBY96QY5KVzO7bbEV3NxHmoERo/nMe0jDRMcL\nz3+w2Hg97DOSPaWzVYi4AjNL1leLW3H3GHRnKKlgIOccZMzup4gXUq7uf/0DcNCk\n6mgO1BAbQveDAzcUodZblpsxlO8QY5QCvYKBY0SlpufqCO+r+ZoFHsnFf2g3V/GF\niDyUvokambFrW31YkKbz1b7ukw+Hmi95C2ydxnERpHK1DAYMB116XkacQ7dnZzQ/\n3qQNeTrILt9Qoang3j99UfRMYFOZUAt4oDOQ2IvRX7+z1FW0AKW8HEzJZ3Oc/M22\njvTl93eUEGb+uJx5ZG+8trD86XE4GgojgUv53CjMaFAwGrWRMsfBKZPSenQk2CVE\n+sSsDkI/7aKvmTwHzyW4URBhwvBqB9f5a//UQCAI8Z6bfnLsM5uk61o/BjprjpCL\nhULWRsVBQ5zvKYq9d96KYgAT6sFnQzeWjRaA7HetMfVGrZm676c=\n=IcCe\n-----END PGP SIGNATURE-----", "payload": "tree 9de0e3ae9c5c0deedb13a58f198a087bfc40f71d\nparent 8b176810588734bdba3b5ea3374d39046f184f45\nauthor Kartavya Vashishtha <sendtokartavya@gmail.com> 1668873130 +0530\ncommitter Kartavya Vashishtha <sendtokartavya@gmail.com> 1668873130 +0530\n\nrefactor hover\n\nchange struct_rest_pat to guarentee a HoverResult\n\nMove token and node matching out of struct_rest_pat into hover\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87658c81731cd99b80bcd32d2188890f2ca22291", "html_url": "https://github.com/rust-lang/rust/commit/87658c81731cd99b80bcd32d2188890f2ca22291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87658c81731cd99b80bcd32d2188890f2ca22291/comments", "author": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b176810588734bdba3b5ea3374d39046f184f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b176810588734bdba3b5ea3374d39046f184f45", "html_url": "https://github.com/rust-lang/rust/commit/8b176810588734bdba3b5ea3374d39046f184f45"}], "stats": {"total": 127, "additions": 66, "deletions": 61}, "files": [{"sha": "1e07e7dbac9c34afcf034a9262f1df0ba275ceeb", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/87658c81731cd99b80bcd32d2188890f2ca22291/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87658c81731cd99b80bcd32d2188890f2ca22291/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=87658c81731cd99b80bcd32d2188890f2ca22291", "patch": "@@ -127,6 +127,7 @@ pub(crate) fn hover(\n             original_token.parent().and_then(ast::TokenTree::cast),\n             Some(tt) if tt.syntax().ancestors().any(|it| ast::Meta::can_cast(it.kind()))\n         );\n+        \n     // prefer descending the same token kind in attribute expansions, in normal macros text\n     // equivalency is more important\n     let descended = if in_attr {\n@@ -135,54 +136,68 @@ pub(crate) fn hover(\n         sema.descend_into_macros_with_same_text(original_token.clone())\n     };\n \n-    // FIXME: Definition should include known lints and the like instead of having this special case here\n-    let hovered_lint = descended.iter().find_map(|token| {\n-        let attr = token.parent_ancestors().find_map(ast::Attr::cast)?;\n-        render::try_for_lint(&attr, token)\n-    });\n-    if let Some(res) = hovered_lint {\n-        return Some(RangeInfo::new(original_token.text_range(), res));\n-    }\n-\n+    // try lint hover\n     let result = descended\n         .iter()\n-        .filter_map(|token| {\n-            let node = token.parent()?;\n-            let class = IdentClass::classify_token(sema, token)?;\n-            if let IdentClass::Operator(OperatorClass::Await(_)) = class {\n-                // It's better for us to fall back to the keyword hover here,\n-                // rendering poll is very confusing\n-                return None;\n-            }\n-            Some(class.definitions().into_iter().zip(iter::once(node).cycle()))\n+        .find_map(|token| {\n+            // FIXME: Definition should include known lints and the like instead of having this special case here\n+            let attr = token.parent_ancestors().find_map(ast::Attr::cast)?;\n+            render::try_for_lint(&attr, token)\n         })\n-        .flatten()\n-        .unique_by(|&(def, _)| def)\n-        .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n-        .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n-            acc.actions.extend(actions);\n-            acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n-            acc\n-        });\n+        // try item definitions\n+        .or_else(|| {\n+            descended\n+                .iter()\n+                .filter_map(|token| {\n+                    let node = token.parent()?;\n+                    let class = IdentClass::classify_token(sema, token)?;\n+                    if let IdentClass::Operator(OperatorClass::Await(_)) = class {\n+                        // It's better for us to fall back to the keyword hover here,\n+                        // rendering poll is very confusing\n+                        return None;\n+                    }\n+                    Some(class.definitions().into_iter().zip(iter::once(node).cycle()))\n+                })\n+                .flatten()\n+                .unique_by(|&(def, _)| def)\n+                .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n+                .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n+                    acc.actions.extend(actions);\n+                    acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n+                    acc\n+                })\n+        })\n+        // try keywords\n+        .or_else(|| {\n+            descended.iter().find_map(|token| render::keyword(sema, config, token))\n+        })\n+        // try rest item hover\n+        .or_else(|| {\n+            descended.iter().find_map(|token| {\n+                if token.kind() != DOT2 {\n+                    return None;\n+                }\n \n-    if result.is_none() {\n-        // fallbacks, show keywords or types\n+                let record_pat_field_list =\n+                    token.parent_ancestors().find_map(ast::RecordPatFieldList::cast)?;\n \n-        let res = descended.iter().find_map(|token| render::keyword(sema, config, token));\n-        if let Some(res) = res {\n-            return Some(RangeInfo::new(original_token.text_range(), res));\n-        }\n-        let res = descended\n-            .iter()\n-            .find_map(|token| hover_type_fallback(sema, config, token, &original_token));\n-        if let Some(_) = res {\n-            return res;\n-        }\n-    }\n-    result.map(|mut res: HoverResult| {\n-        res.actions = dedupe_or_merge_hover_actions(res.actions);\n-        RangeInfo::new(original_token.text_range(), res)\n-    })\n+                let record_pat =\n+                    record_pat_field_list.syntax().parent().and_then(ast::RecordPat::cast)?;\n+\n+                Some(render::struct_rest_pat(sema, config, &record_pat))\n+            })\n+        });\n+\n+    result\n+        .map(|mut res: HoverResult| {\n+            res.actions = dedupe_or_merge_hover_actions(res.actions);\n+            RangeInfo::new(original_token.text_range(), res)\n+        })\n+        // fallback to type hover if there aren't any other suggestions\n+        // this finds its own range instead of using the closest token's range\n+        .or_else(|| {\n+            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, &token))\n+        })\n }\n \n pub(crate) fn hover_for_definition(\n@@ -268,8 +283,7 @@ fn hover_type_fallback(\n         }\n     };\n \n-    let res = render::type_info(sema, config, &expr_or_pat)\n-        .or_else(|| render::struct_rest_pat(sema, config, &expr_or_pat))?;\n+    let res = render::type_info(sema, config, &expr_or_pat)?;\n \n     let range = sema\n         .original_range_opt(&node)"}, {"sha": "fb00a40f96199cdf989d72b3f41db69e07f45785", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87658c81731cd99b80bcd32d2188890f2ca22291/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87658c81731cd99b80bcd32d2188890f2ca22291/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=87658c81731cd99b80bcd32d2188890f2ca22291", "patch": "@@ -252,24 +252,15 @@ pub(super) fn keyword(\n     Some(HoverResult { markup, actions })\n }\n \n+/// Returns missing types in a record pattern.\n+/// Only makes sense when there's a rest pattern in the record pattern.\n+/// i.e. `let S {a, ..} = S {a: 1, b: 2}`\n pub(super) fn struct_rest_pat(\n     sema: &Semantics<'_, RootDatabase>,\n     config: &HoverConfig,\n-    expr_or_pat: &Either<ast::Expr, ast::Pat>,\n-) -> Option<HoverResult> {\n-    let pat = expr_or_pat.as_ref().right()?;\n-\n-    let mut ancestors = pat.syntax().ancestors();\n-    let _record_pat_field_list = ancestors.next()?;\n-    let record_pat = ancestors.next()?;\n-    let pattern = sema\n-        .find_nodes_at_offset_with_descend::<RecordPat>(\n-            &record_pat,\n-            record_pat.text_range().start(),\n-        )\n-        .next()?;\n-\n-    let missing_fields = sema.record_pattern_missing_fields(&pattern);\n+    pattern: &RecordPat,\n+) -> HoverResult {\n+    let missing_fields = sema.record_pattern_missing_fields(pattern);\n \n     // if there are no missing fields, the end result is a hover that shows \"..\"\n     // should be left in to indicate that there are no more fields in the pattern\n@@ -302,7 +293,7 @@ pub(super) fn struct_rest_pat(\n         }\n     };\n     res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n-    Some(res)\n+    res\n }\n \n pub(super) fn try_for_lint(attr: &ast::Attr, token: &SyntaxToken) -> Option<HoverResult> {"}]}