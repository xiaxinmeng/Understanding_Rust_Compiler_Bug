{"sha": "80d5ba68da2785280cf154d5d812915b99fc0e87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDViYTY4ZGEyNzg1MjgwY2YxNTRkNWQ4MTI5MTViOTlmYzBlODc=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-14T22:42:32Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-14T22:42:32Z"}, "message": "vscode: renamed langServer to server", "tree": {"sha": "e40a833dd72df793cb3d81d298e4c5a2564ff552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40a833dd72df793cb3d81d298e4c5a2564ff552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d5ba68da2785280cf154d5d812915b99fc0e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d5ba68da2785280cf154d5d812915b99fc0e87", "html_url": "https://github.com/rust-lang/rust/commit/80d5ba68da2785280cf154d5d812915b99fc0e87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d5ba68da2785280cf154d5d812915b99fc0e87/comments", "author": null, "committer": null, "parents": [{"sha": "f61134e1980580050f34701db3441081a5519e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f61134e1980580050f34701db3441081a5519e4c", "html_url": "https://github.com/rust-lang/rust/commit/f61134e1980580050f34701db3441081a5519e4c"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "12c97be2feeb783a5c2316fbbad560e50ec3e261", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=80d5ba68da2785280cf154d5d812915b99fc0e87", "patch": "@@ -2,7 +2,7 @@ import * as lc from 'vscode-languageclient';\n import * as vscode from 'vscode';\n \n import { Config } from './config';\n-import { ensureLangServerBinary } from './installation/lang_server';\n+import { ensureServerBinary } from './installation/server';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n \n export async function createClient(config: Config): Promise<null | lc.LanguageClient> {\n@@ -11,11 +11,11 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const langServerPath = await ensureLangServerBinary(config.langServerBinarySource);\n-    if (!langServerPath) return null;\n+    const serverPath = await ensureServerBinary(config.serverBinarySource);\n+    if (!serverPath) return null;\n \n     const run: lc.Executable = {\n-        command: langServerPath,\n+        command: serverPath,\n         options: { cwd: workspaceFolderPath },\n     };\n     const serverOptions: lc.ServerOptions = {"}, {"sha": "7866ed7e1b511cde60a7a892e47ea82eb4c85355", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=80d5ba68da2785280cf154d5d812915b99fc0e87", "patch": "@@ -68,7 +68,7 @@ export class Config {\n      * `platform` on GitHub releases. (It is also stored under the same name when\n      * downloaded by the extension).\n      */\n-    get prebuiltLangServerFileName(): null | string {\n+    get prebuiltServerFileName(): null | string {\n         // See possible `arch` values here:\n         // https://nodejs.org/api/process.html#process_process_arch\n \n@@ -98,17 +98,17 @@ export class Config {\n         }\n     }\n \n-    get langServerBinarySource(): null | BinarySource {\n-        const langServerPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n+    get serverBinarySource(): null | BinarySource {\n+        const serverPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n \n-        if (langServerPath) {\n+        if (serverPath) {\n             return {\n                 type: BinarySource.Type.ExplicitPath,\n-                path: Config.replaceTildeWithHomeDir(langServerPath)\n+                path: Config.replaceTildeWithHomeDir(serverPath)\n             };\n         }\n \n-        const prebuiltBinaryName = this.prebuiltLangServerFileName;\n+        const prebuiltBinaryName = this.prebuiltServerFileName;\n \n         if (!prebuiltBinaryName) return null;\n "}, {"sha": "406e2299c3b5f34e2768242b52bf43c580a8d60f", "filename": "editors/code/src/installation/server.ts", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/80d5ba68da2785280cf154d5d812915b99fc0e87/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=80d5ba68da2785280cf154d5d812915b99fc0e87", "patch": "@@ -10,7 +10,7 @@ import { BinarySource } from \"./interfaces\";\n import { fetchLatestArtifactReleaseInfo } from \"./fetch_latest_artifact_release_info\";\n import { downloadFile } from \"./download_file\";\n \n-export async function downloadLatestLangServer(\n+export async function downloadLatestServer(\n     {file: artifactFileName, dir: installationDir, repo}: BinarySource.GithubRelease\n ) {\n     const { releaseName, downloadUrl } = (await fetchLatestArtifactReleaseInfo(\n@@ -53,11 +53,11 @@ export async function downloadLatestLangServer(\n     );\n     console.timeEnd(\"Downloading ra_lsp_server\");\n }\n-export async function ensureLangServerBinary(\n-    langServerSource: null | BinarySource\n+export async function ensureServerBinary(\n+    serverSource: null | BinarySource\n ): Promise<null | string> {\n \n-    if (!langServerSource) {\n+    if (!serverSource) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n@@ -69,21 +69,21 @@ export async function ensureLangServerBinary(\n         return null;\n     }\n \n-    switch (langServerSource.type) {\n+    switch (serverSource.type) {\n         case BinarySource.Type.ExplicitPath: {\n-            if (isBinaryAvailable(langServerSource.path)) {\n-                return langServerSource.path;\n+            if (isBinaryAvailable(serverSource.path)) {\n+                return serverSource.path;\n             }\n \n             vscode.window.showErrorMessage(\n-                `Unable to run ${langServerSource.path} binary. ` +\n+                `Unable to run ${serverSource.path} binary. ` +\n                 `To use the pre-built language server, set \"rust-analyzer.raLspServerPath\" ` +\n                 \"value to `null` or remove it from the settings to use it by default.\"\n             );\n             return null;\n         }\n         case BinarySource.Type.GithubRelease: {\n-            const prebuiltBinaryPath = path.join(langServerSource.dir, langServerSource.file);\n+            const prebuiltBinaryPath = path.join(serverSource.dir, serverSource.file);\n \n             if (isBinaryAvailable(prebuiltBinaryPath)) {\n                 return prebuiltBinaryPath;\n@@ -97,10 +97,10 @@ export async function ensureLangServerBinary(\n             if (userResponse !== \"Download now\") return null;\n \n             try {\n-                await downloadLatestLangServer(langServerSource);\n+                await downloadLatestServer(serverSource);\n             } catch (err) {\n                 vscode.window.showErrorMessage(\n-                    `Failed to download language server from ${langServerSource.repo.name} ` +\n+                    `Failed to download language server from ${serverSource.repo.name} ` +\n                     `GitHub repository: ${err.message}`\n                 );\n \n@@ -122,7 +122,7 @@ export async function ensureLangServerBinary(\n \n             if (!isBinaryAvailable(prebuiltBinaryPath)) assert(false,\n                 `Downloaded language server binary is not functional.` +\n-                `Downloaded from: ${JSON.stringify(langServerSource)}`\n+                `Downloaded from: ${JSON.stringify(serverSource)}`\n             );\n \n ", "previous_filename": "editors/code/src/installation/lang_server.ts"}]}