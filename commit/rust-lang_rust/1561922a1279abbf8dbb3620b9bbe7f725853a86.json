{"sha": "1561922a1279abbf8dbb3620b9bbe7f725853a86", "node_id": "C_kwDOAAsO6NoAKDE1NjE5MjJhMTI3OWFiYmY4ZGJiMzYyMGI5YmJlN2Y3MjU4NTNhODY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T15:18:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T15:18:34Z"}, "message": "Rollup merge of #101041 - LuisCardosoOliveira:translation-rename-attr-warning-pt2, r=davidtwco\n\ntranslations(rustc_session): migrates rustc_session to use SessionDiagnostic - Pt. 2\n\n# Description\n\nThis is the second part of the `rustc_session` [migration](https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883).\n\n**Please only review this [commit](https://github.com/rust-lang/rust/pull/101041/commits/501858195734ec77f6b121ef753b03c40645df23) that belongs to the part 2. The other ones are from the PR [#100753](https://github.com/rust-lang/rust/pull/100753) that is not yet merged.**\n\nIn this PR, we migrate the files `session.rs` and `config.rs`.\n\nPlease not that we have to `allow` the lints rules in some functions from `session.rs` because they are (at least I believe) part of the diagnostic machinery.", "tree": {"sha": "162afadcb2fca3c00de5fdb0e6aa7852f2c536fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162afadcb2fca3c00de5fdb0e6aa7852f2c536fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1561922a1279abbf8dbb3620b9bbe7f725853a86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGgfKCRBK7hj4Ov3rIwAAEhkIAH3sOfvC5BfWFSwqrZdI29yJ\nkn6xxKxskxcANDPUWR8xwir5cmTJGPUIBwycuFQCU7SlOpr45YRV8F4yiz/7/ed3\nh50Gphmzeo8GUY1GNMYdojLY1sRVzYp3+EPwCEuuVJ8jU/ItMVe15y0UGqPDLNXS\n1Sf89nnrJL6n8LhEm33vR8T2DHLnH5T2mN6/zi/aRl8cCvryVmuQkOhDvWjQAJ/v\nJe75J2nyhpLzMDujWqJ1x14oWwd5Huib5weB8DygFnCUQDFK/qj63Hny9S6ZQ/IE\nWhfDH8JAC07YL3OFuKKum5BuqN/4GlOXSJEiUYYhXj3XcI6dUUBaKWf542S7kng=\n=O0oF\n-----END PGP SIGNATURE-----\n", "payload": "tree 162afadcb2fca3c00de5fdb0e6aa7852f2c536fb\nparent d392838b69a4f9d2c4a109412820f454a1dfa2cf\nparent 0e497a714ebfefbee094b8475ea9aa4eeaa7b692\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662650314 +0530\ncommitter GitHub <noreply@github.com> 1662650314 +0530\n\nRollup merge of #101041 - LuisCardosoOliveira:translation-rename-attr-warning-pt2, r=davidtwco\n\ntranslations(rustc_session): migrates rustc_session to use SessionDiagnostic - Pt. 2\n\n# Description\n\nThis is the second part of the `rustc_session` [migration](https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883).\n\n**Please only review this [commit](https://github.com/rust-lang/rust/pull/101041/commits/501858195734ec77f6b121ef753b03c40645df23) that belongs to the part 2. The other ones are from the PR [#100753](https://github.com/rust-lang/rust/pull/100753) that is not yet merged.**\n\nIn this PR, we migrate the files `session.rs` and `config.rs`.\n\nPlease not that we have to `allow` the lints rules in some functions from `session.rs` because they are (at least I believe) part of the diagnostic machinery.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1561922a1279abbf8dbb3620b9bbe7f725853a86", "html_url": "https://github.com/rust-lang/rust/commit/1561922a1279abbf8dbb3620b9bbe7f725853a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1561922a1279abbf8dbb3620b9bbe7f725853a86/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d392838b69a4f9d2c4a109412820f454a1dfa2cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d392838b69a4f9d2c4a109412820f454a1dfa2cf", "html_url": "https://github.com/rust-lang/rust/commit/d392838b69a4f9d2c4a109412820f454a1dfa2cf"}, {"sha": "0e497a714ebfefbee094b8475ea9aa4eeaa7b692", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e497a714ebfefbee094b8475ea9aa4eeaa7b692", "html_url": "https://github.com/rust-lang/rust/commit/0e497a714ebfefbee094b8475ea9aa4eeaa7b692"}], "stats": {"total": 333, "additions": 258, "deletions": 75}, "files": [{"sha": "d2a2958f62436180cee3436fec51d91694485772", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -14,3 +14,45 @@ session_feature_diagnostic_for_issue =\n \n session_feature_diagnostic_help =\n     add `#![feature({$feature})]` to the crate attributes to enable\n+\n+session_not_circumvent_feature = `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n+\n+session_profile_use_file_does_not_exist = file `{$path}` passed to `-C profile-use` does not exist.\n+\n+session_linker_plugin_lto_windows_not_supported = linker plugin based LTO is not supported together with `-C prefer-dynamic` when targeting Windows-like targets\n+\n+session_profile_sample_use_file_does_not_exist = file `{$path}` passed to `-C profile-sample-use` does not exist.\n+\n+session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`\n+\n+session_sanitizer_not_supported = {$us} sanitizer is not supported for this target\n+\n+session_sanitizers_not_supported = {$us} sanitizers are not supported for this target\n+\n+session_cannot_mix_and_match_sanitizers = `-Zsanitizer={$first}` is incompatible with `-Zsanitizer={$second}`\n+\n+session_cannot_enable_crt_static_linux = sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n+\n+session_sanitizer_cfi_enabled = `-Zsanitizer=cfi` requires `-Clto`\n+\n+session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination` requires `-Clto`\n+\n+session_unsupported_dwarf_version = requested DWARF version {$dwarf_version} is greater than 5\n+\n+session_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n+\n+session_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n+\n+session_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n+\n+session_target_invalid_bits_size = {$err}\n+\n+session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n+\n+session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform"}, {"sha": "a774b52c8a592e75a321efa8b377c04167b2fd92", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -10,10 +10,11 @@ use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_span::{edition::Edition, Span, DUMMY_SP};\n-use rustc_target::spec::PanicStrategy;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n@@ -91,6 +92,10 @@ into_diagnostic_arg_using_display!(\n     Edition,\n     Ident,\n     MacroRulesNormalizedIdent,\n+    ParseIntError,\n+    StackProtector,\n+    &TargetTriple,\n+    SplitDebuginfo\n );\n \n impl IntoDiagnosticArg for bool {"}, {"sha": "53e91e48c24d013275e5de85b3edd8ffa5fc9414", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -1252,7 +1252,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.fatal(&err);\n+            s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "8bb3878fbbb4752c8d7f4371cab537ba6b39a658", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -898,7 +898,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.fatal(&err);\n+        sess.emit_fatal(err);\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "3c93cfab183d24206e796c2ebd9e0e808fc00e0a", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -1,10 +1,12 @@\n use std::num::NonZeroU32;\n \n-use crate as rustc_session;\n use crate::cgu_reuse_tracker::CguReuse;\n-use rustc_errors::MultiSpan;\n+use crate::{self as rustc_session, SessionDiagnostic};\n+use rustc_errors::{fluent, DiagnosticBuilder, Handler, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n #[derive(SessionDiagnostic)]\n #[diag(session::incorrect_cgu_reuse_type)]\n@@ -43,3 +45,128 @@ pub struct FeatureDiagnosticForIssue {\n pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n+\n+impl SessionDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n+    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, !> {\n+        let mut diag;\n+        match self {\n+            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_address_space);\n+                diag.set_arg(\"addr_space\", addr_space);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_bits);\n+                diag.set_arg(\"kind\", kind);\n+                diag.set_arg(\"bit\", bit);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::MissingAlignment { cause } => {\n+                diag = sess.struct_fatal(fluent::session::target_missing_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n+                diag = sess.struct_fatal(fluent::session::target_inconsistent_architecture);\n+                diag.set_arg(\"dl\", dl);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n+                diag = sess.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n+                diag.set_arg(\"pointer_size\", pointer_size);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_bits_size);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::not_circumvent_feature)]\n+pub struct NotCircumventFeature;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::linker_plugin_lto_windows_not_supported)]\n+pub struct LinkerPluginToWindowsNotSupported;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::profile_use_file_does_not_exist)]\n+pub struct ProfileUseFileDoesNotExist<'a> {\n+    pub path: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::profile_sample_use_file_does_not_exist)]\n+pub struct ProfileSampleUseFileDoesNotExist<'a> {\n+    pub path: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::target_requires_unwind_tables)]\n+pub struct TargetRequiresUnwindTables;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizer_not_supported)]\n+pub struct SanitizerNotSupported {\n+    pub us: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizers_not_supported)]\n+pub struct SanitizersNotSupported {\n+    pub us: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::cannot_mix_and_match_sanitizers)]\n+pub struct CannotMixAndMatchSanitizers {\n+    pub first: String,\n+    pub second: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::cannot_enable_crt_static_linux)]\n+pub struct CannotEnableCrtStaticLinux;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::sanitizer_cfi_enabled)]\n+pub struct SanitizerCfiEnabled;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::unstable_virtual_function_elimination)]\n+pub struct UnstableVirtualFunctionElimination;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::unsupported_dwarf_version)]\n+pub struct UnsupportedDwarfVersion {\n+    pub dwarf_version: u32,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::target_stack_protector_not_supported)]\n+pub struct StackProtectorNotSupportedForTarget<'a> {\n+    pub stack_protector: StackProtector,\n+    pub target_triple: &'a TargetTriple,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::split_debuginfo_unstable_platform)]\n+pub struct SplitDebugInfoUnstablePlatform {\n+    pub debuginfo: SplitDebuginfo,\n+}"}, {"sha": "caf9d582ab09970db94218b3da91b47994f89fe6", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -2,6 +2,13 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n+use crate::errors::{\n+    CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers, LinkerPluginToWindowsNotSupported,\n+    NotCircumventFeature, ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist,\n+    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported,\n+    SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n+    TargetRequiresUnwindTables, UnstableVirtualFunctionElimination, UnsupportedDwarfVersion,\n+};\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n use crate::{filesearch, lint};\n@@ -235,6 +242,9 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n+            // FIXME(#100717): needs eager translation/lists\n+            #[allow(rustc::untranslatable_diagnostic)]\n+            #[allow(rustc::diagnostic_outside_of_impl)]\n             let mut diag = self.struct_warn(\"skipping const checks\");\n             for &(span, feature_gate) in unleashed_features.iter() {\n                 // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n@@ -250,10 +260,7 @@ impl Session {\n             // If we should err, make sure we did.\n             if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n-                self.err(\n-                    \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n-                     gates, except when testing error paths in the CTFE engine\",\n-                );\n+                self.emit_err(NotCircumventFeature);\n             }\n         }\n     }\n@@ -534,9 +541,13 @@ impl Session {\n             Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         }\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -585,6 +596,8 @@ impl Session {\n     ) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -1469,40 +1482,28 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         && sess.opts.cg.prefer_dynamic\n         && sess.target.is_like_windows\n     {\n-        sess.err(\n-            \"Linker plugin based LTO is not supported together with \\\n-                  `-C prefer-dynamic` when targeting Windows-like targets\",\n-        );\n+        sess.emit_err(LinkerPluginToWindowsNotSupported);\n     }\n \n     // Make sure that any given profiling data actually exists so LLVM can't\n     // decide to silently skip PGO.\n     if let Some(ref path) = sess.opts.cg.profile_use {\n         if !path.exists() {\n-            sess.err(&format!(\n-                \"File `{}` passed to `-C profile-use` does not exist.\",\n-                path.display()\n-            ));\n+            sess.emit_err(ProfileUseFileDoesNotExist { path });\n         }\n     }\n \n     // Do the same for sample profile data.\n     if let Some(ref path) = sess.opts.unstable_opts.profile_sample_use {\n         if !path.exists() {\n-            sess.err(&format!(\n-                \"File `{}` passed to `-C profile-sample-use` does not exist.\",\n-                path.display()\n-            ));\n+            sess.emit_err(ProfileSampleUseFileDoesNotExist { path });\n         }\n     }\n \n     // Unwind tables cannot be disabled if the target requires them.\n     if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n         if sess.target.requires_uwtable && !include_uwtables {\n-            sess.err(\n-                \"target requires unwind tables, they cannot be disabled with \\\n-                     `-C force-unwind-tables=no`.\",\n-            );\n+            sess.emit_err(TargetRequiresUnwindTables);\n         }\n     }\n \n@@ -1512,64 +1513,55 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     match unsupported_sanitizers.into_iter().count() {\n         0 => {}\n         1 => {\n-            sess.err(&format!(\n-                \"{} sanitizer is not supported for this target\",\n-                unsupported_sanitizers\n-            ));\n+            sess.emit_err(SanitizerNotSupported { us: unsupported_sanitizers.to_string() });\n         }\n         _ => {\n-            sess.err(&format!(\n-                \"{} sanitizers are not supported for this target\",\n-                unsupported_sanitizers\n-            ));\n+            sess.emit_err(SanitizersNotSupported { us: unsupported_sanitizers.to_string() });\n         }\n     }\n     // Cannot mix and match sanitizers.\n     let mut sanitizer_iter = sess.opts.unstable_opts.sanitizer.into_iter();\n     if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n-        sess.err(&format!(\"`-Zsanitizer={first}` is incompatible with `-Zsanitizer={second}`\"));\n+        sess.emit_err(CannotMixAndMatchSanitizers {\n+            first: first.to_string(),\n+            second: second.to_string(),\n+        });\n     }\n \n     // Cannot enable crt-static with sanitizers on Linux\n     if sess.crt_static(None) && !sess.opts.unstable_opts.sanitizer.is_empty() {\n-        sess.err(\n-            \"sanitizer is incompatible with statically linked libc, \\\n-                                disable it using `-C target-feature=-crt-static`\",\n-        );\n+        sess.emit_err(CannotEnableCrtStaticLinux);\n     }\n \n     // LLVM CFI and VFE both require LTO.\n     if sess.lto() != config::Lto::Fat {\n         if sess.is_sanitizer_cfi_enabled() {\n-            sess.err(\"`-Zsanitizer=cfi` requires `-Clto`\");\n+            sess.emit_err(SanitizerCfiEnabled);\n         }\n         if sess.opts.unstable_opts.virtual_function_elimination {\n-            sess.err(\"`-Zvirtual-function-elimination` requires `-Clto`\");\n+            sess.emit_err(UnstableVirtualFunctionElimination);\n         }\n     }\n \n     if sess.opts.unstable_opts.stack_protector != StackProtector::None {\n         if !sess.target.options.supports_stack_protector {\n-            sess.warn(&format!(\n-                \"`-Z stack-protector={}` is not supported for target {} and will be ignored\",\n-                sess.opts.unstable_opts.stack_protector, sess.opts.target_triple\n-            ))\n+            sess.emit_warning(StackProtectorNotSupportedForTarget {\n+                stack_protector: sess.opts.unstable_opts.stack_protector,\n+                target_triple: &sess.opts.target_triple,\n+            });\n         }\n     }\n \n     if let Some(dwarf_version) = sess.opts.unstable_opts.dwarf_version {\n         if dwarf_version > 5 {\n-            sess.err(&format!(\"requested DWARF version {} is greater than 5\", dwarf_version));\n+            sess.emit_err(UnsupportedDwarfVersion { dwarf_version });\n         }\n     }\n \n     if !sess.target.options.supported_split_debuginfo.contains(&sess.split_debuginfo())\n         && !sess.opts.unstable_opts.unstable_options\n     {\n-        sess.err(&format!(\n-            \"`-Csplit-debuginfo={}` is unstable on this platform\",\n-            sess.split_debuginfo()\n-        ));\n+        sess.emit_err(SplitDebugInfoUnstablePlatform { debuginfo: sess.split_debuginfo() });\n     }\n }\n \n@@ -1614,14 +1606,20 @@ fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler\n     rustc_errors::Handler::with_emitter(true, None, emitter)\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n     early_error_handler(output).struct_err(msg).emit()\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     early_error_handler(output).struct_fatal(msg).emit()\n }\n \n+#[allow(rustc::untranslatable_diagnostic)]\n+#[allow(rustc::diagnostic_outside_of_impl)]\n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     early_error_handler(output).struct_warn(msg).emit()\n }"}, {"sha": "ec334e5887ab765bfcacababdd2823bfe026a7f1", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561922a1279abbf8dbb3620b9bbe7f725853a86/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=1561922a1279abbf8dbb3620b9bbe7f725853a86", "patch": "@@ -7,7 +7,7 @@ use crate::spec::Target;\n use std::convert::{TryFrom, TryInto};\n use std::fmt;\n use std::iter::Step;\n-use std::num::NonZeroUsize;\n+use std::num::{NonZeroUsize, ParseIntError};\n use std::ops::{Add, AddAssign, Deref, Mul, RangeInclusive, Sub};\n use std::str::FromStr;\n \n@@ -69,34 +69,46 @@ impl Default for TargetDataLayout {\n     }\n }\n \n+pub enum TargetDataLayoutErrors<'a> {\n+    InvalidAddressSpace { addr_space: &'a str, cause: &'a str, err: ParseIntError },\n+    InvalidBits { kind: &'a str, bit: &'a str, cause: &'a str, err: ParseIntError },\n+    MissingAlignment { cause: &'a str },\n+    InvalidAlignment { cause: &'a str, err: String },\n+    InconsistentTargetArchitecture { dl: &'a str, target: &'a str },\n+    InconsistentTargetPointerWidth { pointer_size: u64, target: u32 },\n+    InvalidBitsSize { err: String },\n+}\n+\n impl TargetDataLayout {\n-    pub fn parse(target: &Target) -> Result<TargetDataLayout, String> {\n+    pub fn parse<'a>(target: &'a Target) -> Result<TargetDataLayout, TargetDataLayoutErrors<'a>> {\n         // Parse an address space index from a string.\n-        let parse_address_space = |s: &str, cause: &str| {\n+        let parse_address_space = |s: &'a str, cause: &'a str| {\n             s.parse::<u32>().map(AddressSpace).map_err(|err| {\n-                format!(\"invalid address space `{}` for `{}` in \\\"data-layout\\\": {}\", s, cause, err)\n+                TargetDataLayoutErrors::InvalidAddressSpace { addr_space: s, cause, err }\n             })\n         };\n \n         // Parse a bit count from a string.\n-        let parse_bits = |s: &str, kind: &str, cause: &str| {\n-            s.parse::<u64>().map_err(|err| {\n-                format!(\"invalid {} `{}` for `{}` in \\\"data-layout\\\": {}\", kind, s, cause, err)\n+        let parse_bits = |s: &'a str, kind: &'a str, cause: &'a str| {\n+            s.parse::<u64>().map_err(|err| TargetDataLayoutErrors::InvalidBits {\n+                kind,\n+                bit: s,\n+                cause,\n+                err,\n             })\n         };\n \n         // Parse a size string.\n-        let size = |s: &str, cause: &str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n+        let size = |s: &'a str, cause: &'a str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n \n         // Parse an alignment string.\n-        let align = |s: &[&str], cause: &str| {\n+        let align = |s: &[&'a str], cause: &'a str| {\n             if s.is_empty() {\n-                return Err(format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n+                return Err(TargetDataLayoutErrors::MissingAlignment { cause });\n             }\n             let align_from_bits = |bits| {\n-                Align::from_bits(bits).map_err(|err| {\n-                    format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\", cause, err)\n-                })\n+                Align::from_bits(bits)\n+                    .map_err(|err| TargetDataLayoutErrors::InvalidAlignment { cause, err })\n             };\n             let abi = parse_bits(s[0], \"alignment\", cause)?;\n             let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n@@ -158,25 +170,24 @@ impl TargetDataLayout {\n \n         // Perform consistency checks against the Target information.\n         if dl.endian != target.endian {\n-            return Err(format!(\n-                \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                dl.endian.as_str(),\n-                target.endian.as_str(),\n-            ));\n+            return Err(TargetDataLayoutErrors::InconsistentTargetArchitecture {\n+                dl: dl.endian.as_str(),\n+                target: target.endian.as_str(),\n+            });\n         }\n \n         let target_pointer_width: u64 = target.pointer_width.into();\n         if dl.pointer_size.bits() != target_pointer_width {\n-            return Err(format!(\n-                \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                 pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n-                dl.pointer_size.bits(),\n-                target.pointer_width\n-            ));\n+            return Err(TargetDataLayoutErrors::InconsistentTargetPointerWidth {\n+                pointer_size: dl.pointer_size.bits(),\n+                target: target.pointer_width,\n+            });\n         }\n \n-        dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;\n+        dl.c_enum_min_size = match Integer::from_size(Size::from_bits(target.c_enum_min_bits)) {\n+            Ok(bits) => bits,\n+            Err(err) => return Err(TargetDataLayoutErrors::InvalidBitsSize { err }),\n+        };\n \n         Ok(dl)\n     }"}]}