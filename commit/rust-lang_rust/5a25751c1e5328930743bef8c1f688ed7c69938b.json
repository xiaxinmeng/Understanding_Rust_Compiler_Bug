{"sha": "5a25751c1e5328930743bef8c1f688ed7c69938b", "node_id": "C_kwDOAAsO6NoAKDVhMjU3NTFjMWU1MzI4OTMwNzQzYmVmOGMxZjY4OGVkN2M2OTkzOGI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-04T16:57:40Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-11-16T18:52:59Z"}, "message": "Add new tests for compatible variant diagnostics.", "tree": {"sha": "936a79abc125a21d3053be6c94417e398e69aafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936a79abc125a21d3053be6c94417e398e69aafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a25751c1e5328930743bef8c1f688ed7c69938b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a25751c1e5328930743bef8c1f688ed7c69938b", "html_url": "https://github.com/rust-lang/rust/commit/5a25751c1e5328930743bef8c1f688ed7c69938b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a25751c1e5328930743bef8c1f688ed7c69938b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48777561ca67abcd259c870f8da28d0062ce6857", "url": "https://api.github.com/repos/rust-lang/rust/commits/48777561ca67abcd259c870f8da28d0062ce6857", "html_url": "https://github.com/rust-lang/rust/commit/48777561ca67abcd259c870f8da28d0062ce6857"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "fb6b6a5673d90ec59711df4b53a715fb5b5ee7d6", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5a25751c1e5328930743bef8c1f688ed7c69938b/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a25751c1e5328930743bef8c1f688ed7c69938b/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=5a25751c1e5328930743bef8c1f688ed7c69938b", "patch": "@@ -0,0 +1,43 @@\n+enum Hey<A, B> {\n+    A(A),\n+    B(B),\n+}\n+\n+fn f() {}\n+\n+fn a() -> Option<()> {\n+    while false {\n+        //~^ ERROR mismatched types\n+        f();\n+    }\n+    //~^ HELP try adding an expression\n+}\n+\n+fn b() -> Result<(), ()> {\n+    f()\n+    //~^ ERROR mismatched types\n+    //~| HELP try adding an expression\n+}\n+\n+fn main() {\n+    let _: Option<()> = while false {};\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<()> = {\n+        while false {}\n+        //~^ ERROR mismatched types\n+        //~| HELP try adding an expression\n+    };\n+    let _: Result<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, bool> = false;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+}"}, {"sha": "e77949687fcb2035bed74253e028ea6a0ae479ac", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/5a25751c1e5328930743bef8c1f688ed7c69938b/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a25751c1e5328930743bef8c1f688ed7c69938b/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=5a25751c1e5328930743bef8c1f688ed7c69938b", "patch": "@@ -0,0 +1,137 @@\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:9:5\n+   |\n+LL |   fn a() -> Option<()> {\n+   |             ---------- expected `Option<()>` because of return type\n+LL | /     while false {\n+LL | |\n+LL | |         f();\n+LL | |     }\n+   | |_____^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     }\n+LL +     None\n+   |\n+LL ~     }\n+LL +     Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:17:5\n+   |\n+LL | fn b() -> Result<(), ()> {\n+   |           -------------- expected `Result<(), ()>` because of return type\n+LL |     f()\n+   |     ^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), ()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     f();\n+LL +     Ok(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:23:25\n+   |\n+LL |     let _: Option<()> = while false {};\n+   |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<()> = Some(while false {});\n+   |                         +++++              +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:27:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~         while false {}\n+LL +         None\n+   |\n+LL ~         while false {}\n+LL +         Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:31:31\n+   |\n+LL |     let _: Result<i32, i32> = 1;\n+   |            ----------------   ^ expected enum `Result`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Result<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Result`\n+   |\n+LL |     let _: Result<i32, i32> = Ok(1);\n+   |                               +++ +\n+LL |     let _: Result<i32, i32> = Err(1);\n+   |                               ++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:34:26\n+   |\n+LL |     let _: Option<i32> = 1;\n+   |            -----------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<i32> = Some(1);\n+   |                          +++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:37:28\n+   |\n+LL |     let _: Hey<i32, i32> = 1;\n+   |            -------------   ^ expected enum `Hey`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Hey`\n+   |\n+LL |     let _: Hey<i32, i32> = Hey::A(1);\n+   |                            +++++++ +\n+LL |     let _: Hey<i32, i32> = Hey::B(1);\n+   |                            +++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:40:29\n+   |\n+LL |     let _: Hey<i32, bool> = false;\n+   |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, bool>`\n+              found type `bool`\n+help: try wrapping the expression in `Hey::B`\n+   |\n+LL |     let _: Hey<i32, bool> = Hey::B(false);\n+   |                             +++++++     +\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}