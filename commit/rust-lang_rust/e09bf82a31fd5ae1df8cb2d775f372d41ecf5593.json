{"sha": "e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWJmODJhMzFmZDVhZTFkZjhjYjJkNzc1ZjM3MmQ0MWVjZjU1OTM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-12T00:28:58Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-17T02:57:42Z"}, "message": "enable enum_set tests", "tree": {"sha": "8d256f626f58224b0c03de3751b7c3e92a46b481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d256f626f58224b0c03de3751b7c3e92a46b481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "html_url": "https://github.com/rust-lang/rust/commit/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593/comments", "author": null, "committer": null, "parents": [{"sha": "a079d5e4d23dca9dfb68cb3a75a6d6a9babe2f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a079d5e4d23dca9dfb68cb3a75a6d6a9babe2f84", "html_url": "https://github.com/rust-lang/rust/commit/a079d5e4d23dca9dfb68cb3a75a6d6a9babe2f84"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "f04367147cb9d03377fc70bc45c84a0b95c3e2f8", "filename": "src/libcollectionstest/enum_set.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593/src%2Flibcollectionstest%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593/src%2Flibcollectionstest%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fenum_set.rs?ref=e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "patch": "@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::EnumSet;\n+use std::mem;\n+\n+use collections::enum_set::{CLike, EnumSet};\n+\n+use self::Foo::*;\n \n #[derive(Copy, PartialEq, Debug)]\n #[repr(usize)]\n@@ -144,23 +148,23 @@ fn test_contains() {\n fn test_iterator() {\n     let mut e1: EnumSet<Foo> = EnumSet::new();\n \n-    let elems: ::vec::Vec<Foo> = e1.iter().collect();\n+    let elems: Vec<Foo> = e1.iter().collect();\n     assert!(elems.is_empty());\n \n     e1.insert(A);\n-    let elems: ::vec::Vec<_> = e1.iter().collect();\n+    let elems: Vec<_> = e1.iter().collect();\n     assert_eq!([A], elems);\n \n     e1.insert(C);\n-    let elems: ::vec::Vec<_> = e1.iter().collect();\n+    let elems: Vec<_> = e1.iter().collect();\n     assert_eq!([A,C], elems);\n \n     e1.insert(C);\n-    let elems: ::vec::Vec<_> = e1.iter().collect();\n+    let elems: Vec<_> = e1.iter().collect();\n     assert_eq!([A,C], elems);\n \n     e1.insert(B);\n-    let elems: ::vec::Vec<_> = e1.iter().collect();\n+    let elems: Vec<_> = e1.iter().collect();\n     assert_eq!([A,B,C], elems);\n }\n \n@@ -178,35 +182,35 @@ fn test_operators() {\n     e2.insert(C);\n \n     let e_union = e1 | e2;\n-    let elems: ::vec::Vec<_> = e_union.iter().collect();\n+    let elems: Vec<_> = e_union.iter().collect();\n     assert_eq!([A,B,C], elems);\n \n     let e_intersection = e1 & e2;\n-    let elems: ::vec::Vec<_> = e_intersection.iter().collect();\n+    let elems: Vec<_> = e_intersection.iter().collect();\n     assert_eq!([C], elems);\n \n     // Another way to express intersection\n     let e_intersection = e1 - (e1 - e2);\n-    let elems: ::vec::Vec<_> = e_intersection.iter().collect();\n+    let elems: Vec<_> = e_intersection.iter().collect();\n     assert_eq!([C], elems);\n \n     let e_subtract = e1 - e2;\n-    let elems: ::vec::Vec<_> = e_subtract.iter().collect();\n+    let elems: Vec<_> = e_subtract.iter().collect();\n     assert_eq!([A], elems);\n \n     // Bitwise XOR of two sets, aka symmetric difference\n     let e_symmetric_diff = e1 ^ e2;\n-    let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n+    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n     assert_eq!([A,B], elems);\n \n     // Another way to express symmetric difference\n     let e_symmetric_diff = (e1 - e2) | (e2 - e1);\n-    let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n+    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n     assert_eq!([A,B], elems);\n \n     // Yet another way to express symmetric difference\n     let e_symmetric_diff = (e1 | e2) - (e1 & e2);\n-    let elems: ::vec::Vec<_> = e_symmetric_diff.iter().collect();\n+    let elems: Vec<_> = e_symmetric_diff.iter().collect();\n     assert_eq!([A,B], elems);\n }\n "}, {"sha": "7f029340d25949bc44f7a18fcc7877a3d4da6eaf", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bf82a31fd5ae1df8cb2d775f372d41ecf5593/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=e09bf82a31fd5ae1df8cb2d775f372d41ecf5593", "patch": "@@ -32,8 +32,7 @@ extern crate unicode;\n mod binary_heap;\n mod bit;\n mod btree;\n-// FIXME(japaric) privacy\n-//mod enum_set;\n+mod enum_set;\n mod fmt;\n mod linked_list;\n mod slice;"}]}