{"sha": "63e097d8c34143411ea6d3146493bd6d8f3428d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZTA5N2Q4YzM0MTQzNDExZWE2ZDMxNDY0OTNiZDZkOGYzNDI4ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T00:01:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-17T00:01:30Z"}, "message": "auto merge of #9634 : blake2-ppc/rust/by-ref-iter, r=thestinger\n\nstd::iter: Introduce .by_ref() adaptor\r\n\r\nCreates a wrapper around a mutable reference to the iterator.\r\n\r\nThis is useful to allow applying iterator adaptors while still\r\nretaining ownership of the original iterator value.\r\n\r\nExample::\r\n\r\n    let mut xs = range(0, 10);\r\n    // sum the first five values\r\n    let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\r\n    assert!(partial_sum == 10);\r\n    // xs.next() is now `5`\r\n    assert!(xs.next() == Some(5));\r\n\r\n---\r\n\r\nThis adaptor requires the user to have good understanding of\r\niterators or what a particular adaptor does. There could be some\r\npitfalls here with the iterator protocol, it's mostly the same issues\r\nas other places regarding what happens after the iterator\r\nreturns None for the first time.\r\n\r\nThere could also be other ways to achieve the same thing, for\r\nexample Implementing iterator on `&mut T` itself:\r\n`impl <T: Iterator<..>> Iterator for &mut T`  but that would only\r\nlead to confusion I think.", "tree": {"sha": "0a266bf84cbfe54491e671445faa14d50bb67261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a266bf84cbfe54491e671445faa14d50bb67261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63e097d8c34143411ea6d3146493bd6d8f3428d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63e097d8c34143411ea6d3146493bd6d8f3428d7", "html_url": "https://github.com/rust-lang/rust/commit/63e097d8c34143411ea6d3146493bd6d8f3428d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63e097d8c34143411ea6d3146493bd6d8f3428d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6c251881584181a0022dc41832398af2136f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c251881584181a0022dc41832398af2136f19", "html_url": "https://github.com/rust-lang/rust/commit/9d6c251881584181a0022dc41832398af2136f19"}, {"sha": "8163cb53903dd09e920b6267eba72793394b77d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8163cb53903dd09e920b6267eba72793394b77d0", "html_url": "https://github.com/rust-lang/rust/commit/8163cb53903dd09e920b6267eba72793394b77d0"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "4d2abd2633f93959481540e1c934f761be9a7e31", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/63e097d8c34143411ea6d3146493bd6d8f3428d7/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e097d8c34143411ea6d3146493bd6d8f3428d7/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=63e097d8c34143411ea6d3146493bd6d8f3428d7", "patch": "@@ -405,6 +405,25 @@ pub trait Iterator<A> {\n         Inspect{iter: self, f: f}\n     }\n \n+    /// Creates a wrapper around a mutable reference to the iterator.\n+    ///\n+    /// This is useful to allow applying iterator adaptors while still\n+    /// retaining ownership of the original iterator value.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut xs = range(0, 10);\n+    /// // sum the first five values\n+    /// let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n+    /// assert!(partial_sum == 10);\n+    /// // xs.next() is now `5`\n+    /// assert!(xs.next() == Some(5));\n+    /// ```\n+    fn by_ref<'r>(&'r mut self) -> ByRef<'r, Self> {\n+        ByRef{iter: self}\n+    }\n+\n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n     /// # Example\n@@ -771,6 +790,22 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n     }\n }\n \n+/// A mutable reference to an iterator\n+pub struct ByRef<'self, T> {\n+    priv iter: &'self mut T\n+}\n+\n+impl<'self, A, T: Iterator<A>> Iterator<A> for ByRef<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { self.iter.next() }\n+    // FIXME: #9629 we cannot implement &self methods like size_hint on ByRef\n+}\n+\n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for ByRef<'self, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.iter.next_back() }\n+}\n+\n /// A trait for iterators over elements which can be added together\n pub trait AdditiveIterator<A> {\n     /// Iterates over the entire iterator, summing up all the elements\n@@ -2500,6 +2535,15 @@ mod tests {\n         assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_by_ref() {\n+        let mut xs = range(0, 10);\n+        // sum the first five values\n+        let partial_sum = xs.by_ref().take(5).fold(0, |a, b| a + b);\n+        assert_eq!(partial_sum, 10);\n+        assert_eq!(xs.next(), Some(5));\n+    }\n+\n     #[test]\n     fn test_invert() {\n         let xs = [2, 4, 6, 8, 10, 12, 14, 16];"}]}