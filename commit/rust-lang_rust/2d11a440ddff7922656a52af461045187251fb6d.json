{"sha": "2d11a440ddff7922656a52af461045187251fb6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTFhNDQwZGRmZjc5MjI2NTZhNTJhZjQ2MTA0NTE4NzI1MWZiNmQ=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T18:38:43Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T18:38:43Z"}, "message": "Add run-rustfix to replace_const test", "tree": {"sha": "e4bd53af26803f15a414b9ea1d2d48d8e1f91d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4bd53af26803f15a414b9ea1d2d48d8e1f91d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d11a440ddff7922656a52af461045187251fb6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d11a440ddff7922656a52af461045187251fb6d", "html_url": "https://github.com/rust-lang/rust/commit/2d11a440ddff7922656a52af461045187251fb6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d11a440ddff7922656a52af461045187251fb6d/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1793e9c49733f4241d075dd08fb55e948d53e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1793e9c49733f4241d075dd08fb55e948d53e0", "html_url": "https://github.com/rust-lang/rust/commit/aa1793e9c49733f4241d075dd08fb55e948d53e0"}], "stats": {"total": 175, "additions": 138, "deletions": 37}, "files": [{"sha": "96a1281e478c89a4ad6fcd058aa33f9fb80985f5", "filename": "tests/ui/replace_consts.fixed", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=2d11a440ddff7922656a52af461045187251fb6d", "patch": "@@ -0,0 +1,100 @@\n+// run-rustfix\n+#![feature(integer_atomics)]\n+#![allow(unused_variables, clippy::blacklisted_name)]\n+#![deny(clippy::replace_consts)]\n+\n+use std::sync::atomic::*;\n+use std::sync::{Once, ONCE_INIT};\n+\n+#[rustfmt::skip]\n+fn bad() {\n+    // Once\n+    { let foo = ONCE_INIT; };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+#[rustfmt::skip]\n+fn good() {\n+    // Once\n+    { let foo = Once::new(); };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+fn main() {\n+    bad();\n+    good();\n+}"}, {"sha": "b61293cc6e911f1b41c0b57acb8db54652bc02b2", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=2d11a440ddff7922656a52af461045187251fb6d", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![feature(integer_atomics)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(unused_variables, clippy::blacklisted_name)]\n #![deny(clippy::replace_consts)]\n \n use std::sync::atomic::*;"}, {"sha": "6f2155406cd2fa4d5d4597d2c572045ddd9aeefa", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d11a440ddff7922656a52af461045187251fb6d/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=2d11a440ddff7922656a52af461045187251fb6d", "patch": "@@ -1,215 +1,215 @@\n error: using `ATOMIC_BOOL_INIT`\n-  --> $DIR/replace_consts.rs:13:17\n+  --> $DIR/replace_consts.rs:14:17\n    |\n LL |     { let foo = ATOMIC_BOOL_INIT; };\n    |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n    |\n note: lint level defined here\n-  --> $DIR/replace_consts.rs:3:9\n+  --> $DIR/replace_consts.rs:4:9\n    |\n LL | #![deny(clippy::replace_consts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `ATOMIC_ISIZE_INIT`\n-  --> $DIR/replace_consts.rs:14:17\n+  --> $DIR/replace_consts.rs:15:17\n    |\n LL |     { let foo = ATOMIC_ISIZE_INIT; };\n    |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n \n error: using `ATOMIC_I8_INIT`\n-  --> $DIR/replace_consts.rs:15:17\n+  --> $DIR/replace_consts.rs:16:17\n    |\n LL |     { let foo = ATOMIC_I8_INIT; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n \n error: using `ATOMIC_I16_INIT`\n-  --> $DIR/replace_consts.rs:16:17\n+  --> $DIR/replace_consts.rs:17:17\n    |\n LL |     { let foo = ATOMIC_I16_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n \n error: using `ATOMIC_I32_INIT`\n-  --> $DIR/replace_consts.rs:17:17\n+  --> $DIR/replace_consts.rs:18:17\n    |\n LL |     { let foo = ATOMIC_I32_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n \n error: using `ATOMIC_I64_INIT`\n-  --> $DIR/replace_consts.rs:18:17\n+  --> $DIR/replace_consts.rs:19:17\n    |\n LL |     { let foo = ATOMIC_I64_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n \n error: using `ATOMIC_USIZE_INIT`\n-  --> $DIR/replace_consts.rs:19:17\n+  --> $DIR/replace_consts.rs:20:17\n    |\n LL |     { let foo = ATOMIC_USIZE_INIT; };\n    |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n \n error: using `ATOMIC_U8_INIT`\n-  --> $DIR/replace_consts.rs:20:17\n+  --> $DIR/replace_consts.rs:21:17\n    |\n LL |     { let foo = ATOMIC_U8_INIT; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n \n error: using `ATOMIC_U16_INIT`\n-  --> $DIR/replace_consts.rs:21:17\n+  --> $DIR/replace_consts.rs:22:17\n    |\n LL |     { let foo = ATOMIC_U16_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n \n error: using `ATOMIC_U32_INIT`\n-  --> $DIR/replace_consts.rs:22:17\n+  --> $DIR/replace_consts.rs:23:17\n    |\n LL |     { let foo = ATOMIC_U32_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n \n error: using `ATOMIC_U64_INIT`\n-  --> $DIR/replace_consts.rs:23:17\n+  --> $DIR/replace_consts.rs:24:17\n    |\n LL |     { let foo = ATOMIC_U64_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:25:17\n+  --> $DIR/replace_consts.rs:26:17\n    |\n LL |     { let foo = std::isize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:26:17\n+  --> $DIR/replace_consts.rs:27:17\n    |\n LL |     { let foo = std::i8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:27:17\n+  --> $DIR/replace_consts.rs:28:17\n    |\n LL |     { let foo = std::i16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:28:17\n+  --> $DIR/replace_consts.rs:29:17\n    |\n LL |     { let foo = std::i32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:29:17\n+  --> $DIR/replace_consts.rs:30:17\n    |\n LL |     { let foo = std::i64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:30:17\n+  --> $DIR/replace_consts.rs:31:17\n    |\n LL |     { let foo = std::i128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:31:17\n+  --> $DIR/replace_consts.rs:32:17\n    |\n LL |     { let foo = std::usize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:32:17\n+  --> $DIR/replace_consts.rs:33:17\n    |\n LL |     { let foo = std::u8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:33:17\n+  --> $DIR/replace_consts.rs:34:17\n    |\n LL |     { let foo = std::u16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:34:17\n+  --> $DIR/replace_consts.rs:35:17\n    |\n LL |     { let foo = std::u32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:35:17\n+  --> $DIR/replace_consts.rs:36:17\n    |\n LL |     { let foo = std::u64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:36:17\n+  --> $DIR/replace_consts.rs:37:17\n    |\n LL |     { let foo = std::u128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:38:17\n+  --> $DIR/replace_consts.rs:39:17\n    |\n LL |     { let foo = std::isize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:39:17\n+  --> $DIR/replace_consts.rs:40:17\n    |\n LL |     { let foo = std::i8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:40:17\n+  --> $DIR/replace_consts.rs:41:17\n    |\n LL |     { let foo = std::i16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:41:17\n+  --> $DIR/replace_consts.rs:42:17\n    |\n LL |     { let foo = std::i32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:42:17\n+  --> $DIR/replace_consts.rs:43:17\n    |\n LL |     { let foo = std::i64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:43:17\n+  --> $DIR/replace_consts.rs:44:17\n    |\n LL |     { let foo = std::i128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:44:17\n+  --> $DIR/replace_consts.rs:45:17\n    |\n LL |     { let foo = std::usize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:45:17\n+  --> $DIR/replace_consts.rs:46:17\n    |\n LL |     { let foo = std::u8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:46:17\n+  --> $DIR/replace_consts.rs:47:17\n    |\n LL |     { let foo = std::u16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:47:17\n+  --> $DIR/replace_consts.rs:48:17\n    |\n LL |     { let foo = std::u32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:48:17\n+  --> $DIR/replace_consts.rs:49:17\n    |\n LL |     { let foo = std::u64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:49:17\n+  --> $DIR/replace_consts.rs:50:17\n    |\n LL |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`"}]}