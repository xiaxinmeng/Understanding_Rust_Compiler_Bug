{"sha": "44670448b2449fc63756ab1c82bbf104d79a050a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NjcwNDQ4YjI0NDlmYzYzNzU2YWIxYzgyYmJmMTA0ZDc5YTA1MGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-21T18:50:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-21T18:50:47Z"}, "message": "Rollup merge of #46780 - varkor:contrib-5, r=arielb1\n\nFix ICE when calling non-functions within closures\n\nThe visitor for walking function bodies did not previously properly\nhandle error-cases for function calls. These are now ignored,\npreventing the panic. This fixes #46771.", "tree": {"sha": "08a5bd13a0d046cad219beecb08b4c8ba07786ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a5bd13a0d046cad219beecb08b4c8ba07786ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44670448b2449fc63756ab1c82bbf104d79a050a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44670448b2449fc63756ab1c82bbf104d79a050a", "html_url": "https://github.com/rust-lang/rust/commit/44670448b2449fc63756ab1c82bbf104d79a050a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44670448b2449fc63756ab1c82bbf104d79a050a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c6d23612e808dc87cfe55f40e95bdc66af1806", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c6d23612e808dc87cfe55f40e95bdc66af1806", "html_url": "https://github.com/rust-lang/rust/commit/71c6d23612e808dc87cfe55f40e95bdc66af1806"}, {"sha": "5741dcd1f88a692ad7913c1c27b2461a0509e7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5741dcd1f88a692ad7913c1c27b2461a0509e7f4", "html_url": "https://github.com/rust-lang/rust/commit/5741dcd1f88a692ad7913c1c27b2461a0509e7f4"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "3bcde93fde502cd1704ceb77a0d586c497d5e934", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/44670448b2449fc63756ab1c82bbf104d79a050a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44670448b2449fc63756ab1c82bbf104d79a050a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=44670448b2449fc63756ab1c82bbf104d79a050a", "patch": "@@ -558,24 +558,29 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n             ty::TyError => { }\n             _ => {\n-                let def_id = self.mc.tables.type_dependent_defs()[call.hir_id].def_id();\n-                let call_scope = region::Scope::Node(call.hir_id.local_id);\n-                match OverloadedCallType::from_method_id(self.tcx(), def_id) {\n-                    FnMutOverloadedCall => {\n-                        let call_scope_r = self.tcx().mk_region(ty::ReScope(call_scope));\n-                        self.borrow_expr(callee,\n-                                         call_scope_r,\n-                                         ty::MutBorrow,\n-                                         ClosureInvocation);\n-                    }\n-                    FnOverloadedCall => {\n-                        let call_scope_r = self.tcx().mk_region(ty::ReScope(call_scope));\n-                        self.borrow_expr(callee,\n-                                         call_scope_r,\n-                                         ty::ImmBorrow,\n-                                         ClosureInvocation);\n+                if let Some(def) = self.mc.tables.type_dependent_defs().get(call.hir_id) {\n+                    let def_id = def.def_id();\n+                    let call_scope = region::Scope::Node(call.hir_id.local_id);\n+                    match OverloadedCallType::from_method_id(self.tcx(), def_id) {\n+                        FnMutOverloadedCall => {\n+                            let call_scope_r = self.tcx().mk_region(ty::ReScope(call_scope));\n+                            self.borrow_expr(callee,\n+                                            call_scope_r,\n+                                            ty::MutBorrow,\n+                                            ClosureInvocation);\n+                        }\n+                        FnOverloadedCall => {\n+                            let call_scope_r = self.tcx().mk_region(ty::ReScope(call_scope));\n+                            self.borrow_expr(callee,\n+                                            call_scope_r,\n+                                            ty::ImmBorrow,\n+                                            ClosureInvocation);\n+                        }\n+                        FnOnceOverloadedCall => self.consume_expr(callee),\n                     }\n-                    FnOnceOverloadedCall => self.consume_expr(callee),\n+                } else {\n+                    self.tcx().sess.delay_span_bug(call.span,\n+                                                   \"no type-dependent def for overloaded call\");\n                 }\n             }\n         }"}, {"sha": "f8bcd8861f3a6c0da29c89bc5b175889f7cf5cfa", "filename": "src/test/compile-fail/issue-46771.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44670448b2449fc63756ab1c82bbf104d79a050a/src%2Ftest%2Fcompile-fail%2Fissue-46771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44670448b2449fc63756ab1c82bbf104d79a050a/src%2Ftest%2Fcompile-fail%2Fissue-46771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46771.rs?ref=44670448b2449fc63756ab1c82bbf104d79a050a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    struct Foo;\n+    (1 .. 2).find(|_| Foo(0) == 0); //~ ERROR expected function, found `main::Foo`\n+}"}]}