{"sha": "028b4745f4db7297c5082caabff986a477662375", "node_id": "C_kwDOAAsO6NoAKDAyOGI0NzQ1ZjRkYjcyOTdjNTA4MmNhYWJmZjk4NmE0Nzc2NjIzNzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-04T19:20:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-25T18:01:07Z"}, "message": "Move SimplifyLocals before ConstProp.", "tree": {"sha": "471e65b47e23f3a0b14dd2d5d3b6165248f0ae31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/471e65b47e23f3a0b14dd2d5d3b6165248f0ae31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028b4745f4db7297c5082caabff986a477662375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028b4745f4db7297c5082caabff986a477662375", "html_url": "https://github.com/rust-lang/rust/commit/028b4745f4db7297c5082caabff986a477662375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028b4745f4db7297c5082caabff986a477662375/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e9e52c842a1fe4e259e8ac74f0388afdc29e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e9e52c842a1fe4e259e8ac74f0388afdc29e28", "html_url": "https://github.com/rust-lang/rust/commit/22e9e52c842a1fe4e259e8ac74f0388afdc29e28"}], "stats": {"total": 784, "additions": 348, "deletions": 436}, "files": [{"sha": "09546330cec92672a2a5c906ba1d1847c108e7ed", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -71,7 +71,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n         bbs[block].statements[statement_index].make_nop();\n     }\n \n-    crate::simplify::SimplifyLocals.run_pass(tcx, body)\n+    crate::simplify::simplify_locals(body, tcx)\n }\n \n pub struct DeadStoreElimination;"}, {"sha": "43271b013ae9c1545d4dc7cc57a591340c4dad82", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -560,6 +560,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &instcombine::InstCombine,\n             &separate_const_switch::SeparateConstSwitch,\n+            &simplify::SimplifyLocals::new(\"before-const-prop\"),\n             //\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,\n@@ -578,7 +579,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n             &o1(simplify::SimplifyCfg::new(\"final\")),\n             &nrvo::RenameReturnPlace,\n-            &simplify::SimplifyLocals,\n+            &simplify::SimplifyLocals::new(\"final\"),\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &deduplicate_blocks::DeduplicateBlocks,\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends."}, {"sha": "b7aa277ae5e2fef9a8c75bff0e745256dba7435d", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -379,9 +379,21 @@ fn save_unreachable_coverage(\n     ));\n }\n \n-pub struct SimplifyLocals;\n+pub struct SimplifyLocals {\n+    label: String,\n+}\n+\n+impl SimplifyLocals {\n+    pub fn new(label: &str) -> SimplifyLocals {\n+        SimplifyLocals { label: format!(\"SimplifyLocals-{}\", label) }\n+    }\n+}\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n+    fn name(&self) -> &str {\n+        &self.label\n+    }\n+\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         sess.mir_opt_level() > 0\n     }"}, {"sha": "20bad942c8d71257acc30d32dee6dafde2ccb979", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -8,8 +8,8 @@\n       let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n       let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n       let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _12: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n -         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n +         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n@@ -29,23 +29,21 @@\n                       scope 5 {\n -                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n +                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _16: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _17: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                          let _18: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _14: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _15: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _16: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => (bool, bool, u32){ .0 => _16, .1 => _17, .2 => _18, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              let _10: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n-                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                  let _19: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                  let _20: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  debug o => _10; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                                  let _17: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _18: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => Point{ .0 => _19, .1 => _20, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => Point{ .0 => _17, .1 => _18, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _11: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _11; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n +                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n@@ -83,41 +81,41 @@\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          StorageLive(_14);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_15);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n           StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_17);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          StorageLive(_18);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          Deinit(_14);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          Deinit(_15);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n           Deinit(_16);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          Deinit(_17);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          Deinit(_18);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _16 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _17 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          _18 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          StorageLive(_19);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          StorageLive(_20);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          Deinit(_19);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          Deinit(_20);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _19 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _20 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n-          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n-          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          _14 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+          Deinit(_10);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          ((_10 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          discriminant(_10) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          StorageLive(_17);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          StorageLive(_18);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          Deinit(_17);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          Deinit(_18);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _17 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _18 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_11);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          StorageLive(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          _12 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _13 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+          _11 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n+          StorageDead(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n           nop;                             // scope 0 at $DIR/const_debuginfo.rs:+0:11: +14:2\n-          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_19);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_20);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_11);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_17);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_18);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_10);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_14);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_15);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_17);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_18);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+14:1: +14:2"}, {"sha": "567f6ede8bc6e5cfbaf3b827554451cc9a7c1b99", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -6,17 +6,16 @@\n       let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n       let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _5: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _6: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _4: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _4;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n@@ -25,30 +24,30 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n           StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _7 = Lt(const 3_usize, _6);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _4 = (*_1)[_5];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n           nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }"}, {"sha": "567f6ede8bc6e5cfbaf3b827554451cc9a7c1b99", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -6,17 +6,16 @@\n       let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n       let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n-      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _5: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _6: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _4: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _4;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n@@ -25,30 +24,30 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n           StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _7 = Lt(const 3_usize, _6);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _4 = (*_1)[_5];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n           nop;                             // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          StorageDead(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }"}, {"sha": "8dd0a08e319f522c7f943df04f2c8dc001bdc717", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -7,8 +7,6 @@\n       let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n       let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n       let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n-      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n-      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n       scope 1 {\n           debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n           let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n@@ -17,9 +15,9 @@\n               let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n               scope 5 {\n                   debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  let _7: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   scope 7 {\n-                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                      debug _non_utf8_str => _7; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   }\n               }\n               scope 6 {\n@@ -57,17 +55,11 @@\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n           StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n-          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          Deinit(_8);                      // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n-          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n           nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n           nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n-          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n-          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n-          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+          StorageLive(_7);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n           nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n-          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_7);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2"}, {"sha": "1c07d5ec0a8d983111333b2625dac793c41919ec", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -5,18 +5,15 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n       let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n           nop;                             // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n           Deinit(_2);                      // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           nop;                             // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:21: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue_66971.rs:17:5: 17:11"}, {"sha": "b34df3b877eee07e14ff8740749b0750fab1f1cc", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -4,39 +4,36 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n       let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _2: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _3: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          let _4: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+              debug y => _4;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n           _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _3 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:10:13: 10:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n+          _2 = (*_3);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _1 = move _2;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n+          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n           nop;                             // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n+          StorageLive(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          _4 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n           nop;                             // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n       }"}, {"sha": "7485a0f9176852499f5a9fe64ab8a5ed6bfb25df", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -4,20 +4,19 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          let mut _7: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => (i32, i32){ .0 => _6, .1 => _7, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _4;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n               }\n           }\n@@ -32,26 +31,26 @@\n       }\n   \n       bb1: {\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          StorageLive(_7);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          Deinit(_5);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n           Deinit(_6);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          Deinit(_7);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _6 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _7 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _7 = move _3;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = _7;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = _6;                         // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n-+         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_4);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _4 = _5;                         // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _4 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n           nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n-          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_7);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "6e32c65921f2385fddd5bc9017679cb6770adf2c", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -9,9 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-      let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-      let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -53,16 +51,12 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = _9;                         // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-          StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "6e32c65921f2385fddd5bc9017679cb6770adf2c", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -9,9 +9,7 @@\n       let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-      let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-      let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _9: u32;                     // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -53,16 +51,12 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _9 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = _9;                         // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n-          StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "d926b9df73317fe6ffbcaaec89d09ad4b471fd48", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` after SimplifyLocals\n+// MIR for `main` after SimplifyLocals-final\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir"}, {"sha": "d926b9df73317fe6ffbcaaec89d09ad4b471fd48", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main` after SimplifyLocals\n+// MIR for `main` after SimplifyLocals-final\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir"}, {"sha": "abea07e2025b77b28b33fbe0b059a8d9d08acf8f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -9,7 +9,7 @@ struct Point {\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR optimizes_into_variable.main.ScalarReplacementOfAggregates.diff\n // EMIT_MIR optimizes_into_variable.main.ConstProp.diff\n-// EMIT_MIR optimizes_into_variable.main.SimplifyLocals.after.mir\n+// EMIT_MIR optimizes_into_variable.main.SimplifyLocals-final.after.mir\n // EMIT_MIR optimizes_into_variable.main.PreCodegen.after.mir\n fn main() {\n     let x = 2 + 2;"}, {"sha": "b93e9788a460064dd55c153f5520bc06b9c7da0e", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -3,25 +3,21 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n-      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+      let mut _1: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+      let mut _2: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          _2 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n-          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n-          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n-          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n+          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n+          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n           nop;                             // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n       }"}, {"sha": "46df47440120cc7b7b7e06296c668fb1104a1db5", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -4,37 +4,34 @@\n   fn bar() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n       let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+      let mut _2: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n       scope 1 {\n           debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+              debug y => _3;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n           Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n-          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n+          StorageLive(_2);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          _2 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          (*_2) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n+          StorageDead(_2);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n           nop;                             // scope 2 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n-          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:5: +4:6\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n-          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n-          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n-          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n-          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n+          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n+          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n           nop;                             // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +6:2\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+6:2: +6:2\n       }"}, {"sha": "fe5be7d8a6333fd30ecc6a18da606cda77932dfa", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -5,39 +5,34 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow.rs:+0:11: +0:11\n       let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n       scope 1 {\n       }\n       scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:7:13: 7:47\n-          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          debug self => _1;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          debug other => _2;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _3: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           let mut _4: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _5: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _6: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _5: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _3 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _4 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _5 = const 1_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _6 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _4 = const 1_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb1: {\n--         _1 = move (_6.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-+         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:47: +3:48\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           nop;                             // scope 0 at $DIR/inherit_overflow.rs:+0:11: +4:2\n           return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n       }"}, {"sha": "a67b49ee6086d15eac1c019cb1d63dbe3445e007", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 83, "deletions": 90, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -7,41 +7,36 @@\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue_73223.rs:+1:23: +1:30\n       let mut _3: isize;                   // in scope 0 at $DIR/issue_73223.rs:+2:9: +2:16\n       let _4: i32;                         // in scope 0 at $DIR/issue_73223.rs:+2:14: +2:15\n-      let mut _5: !;                       // in scope 0 at $DIR/issue_73223.rs:+3:17: +3:23\n-      let mut _7: i32;                     // in scope 0 at $DIR/issue_73223.rs:+6:22: +6:27\n-      let _8: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _12: i32;                        // in scope 0 at $DIR/issue_73223.rs:+7:23: +7:24\n-      let mut _15: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: i32;                     // in scope 0 at $DIR/issue_73223.rs:+6:22: +6:27\n+      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _14: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _20: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _21: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _24: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _29: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _30: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue_73223.rs:+1:9: +1:14\n-          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n+          let _5: std::option::Option<i32>; // in scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n           scope 3 {\n-              debug _prev => _6;           // in scope 3 at $DIR/issue_73223.rs:+6:9: +6:14\n-              let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              debug _prev => _5;           // in scope 3 at $DIR/issue_73223.rs:+6:9: +6:14\n+              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _23: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _15: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _15;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -77,70 +72,69 @@\n           _1 = _4;                         // scope 2 at $DIR/issue_73223.rs:+2:20: +2:21\n           StorageDead(_4);                 // scope 0 at $DIR/issue_73223.rs:+2:20: +2:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue_73223.rs:+4:6: +4:7\n-          StorageLive(_6);                 // scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n-          StorageLive(_7);                 // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n-          _7 = _1;                         // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n-          Deinit(_6);                      // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n-          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n-          discriminant(_6) = 1;            // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n-          StorageDead(_7);                 // scope 1 at $DIR/issue_73223.rs:+6:27: +6:28\n+          StorageLive(_5);                 // scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n+          StorageLive(_6);                 // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n+          _6 = _1;                         // scope 1 at $DIR/issue_73223.rs:+6:22: +6:27\n+          Deinit(_5);                      // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          ((_5 as Some).0: i32) = move _6; // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          discriminant(_5) = 1;            // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n+          StorageDead(_6);                 // scope 1 at $DIR/issue_73223.rs:+6:27: +6:28\n+          StorageLive(_24);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_29);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_30);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_29);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_30);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _29 = move _10;                  // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _30 = move _11;                  // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = _29;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = _30;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = _23;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_24);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_25);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = move _7;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = move _8;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = _24;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = _25;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb4: {\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_15);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_15) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = _21;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_22);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_22) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _18, move _20, move _22); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n@@ -151,14 +145,13 @@\n   \n       bb5: {\n           nop;                             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_29);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_24);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_25);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           nop;                             // scope 0 at $DIR/issue_73223.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/issue_73223.rs:+8:1: +8:2\n+          StorageDead(_5);                 // scope 1 at $DIR/issue_73223.rs:+8:1: +8:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue_73223.rs:+8:1: +8:2\n           return;                          // scope 0 at $DIR/issue_73223.rs:+8:2: +8:2\n       }"}, {"sha": "483d16775dfe964caeeafe4c0abe51b6261b1d6a", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 23, "deletions": 51, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -11,26 +11,19 @@\n       let mut _6: T;                       // in scope 0 at $DIR/issue_76432.rs:+1:21: +1:22\n       let mut _7: T;                       // in scope 0 at $DIR/issue_76432.rs:+1:24: +1:25\n       let mut _8: T;                       // in scope 0 at $DIR/issue_76432.rs:+1:27: +1:28\n-      let _9: [*const T; 3];               // in scope 0 at $DIR/issue_76432.rs:+2:5: +5:6\n+      let mut _9: usize;                   // in scope 0 at $DIR/issue_76432.rs:+3:9: +3:33\n       let mut _10: usize;                  // in scope 0 at $DIR/issue_76432.rs:+3:9: +3:33\n-      let mut _11: usize;                  // in scope 0 at $DIR/issue_76432.rs:+3:9: +3:33\n-      let mut _12: bool;                   // in scope 0 at $DIR/issue_76432.rs:+3:9: +3:33\n-      let mut _16: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:38: +3:52\n-      let mut _17: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:38: +3:52\n-      let mut _18: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:54: +3:68\n-      let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:54: +3:68\n-      let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n-      let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n-      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $DIR/issue_76432.rs:+3:9: +3:33\n+      let mut _15: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:+1:9: +1:10\n-          let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          let _15: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n+          let _12: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n+          let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n+          let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n           scope 2 {\n-              debug v1 => _13;             // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n-              debug v2 => _14;             // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n-              debug v3 => _15;             // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n+              debug v1 => _12;             // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n+              debug v2 => _13;             // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n+              debug v3 => _14;             // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n           }\n       }\n   \n@@ -54,18 +47,17 @@\n           _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n           StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:29: +1:30\n-          StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:+2:5: +5:6\n-          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n--         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n--         switchInt(move _12) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+          _9 = Len((*_2));                 // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+          _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         _11 = Eq(move _9, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n +         nop;                             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-+         switchInt(move _10) -> [3: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n++         switchInt(move _9) -> [3: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n       }\n   \n       bb1: {\n-          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n-          _22 = core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_15);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _15 = core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }\n@@ -75,35 +67,15 @@\n       }\n   \n       bb2: {\n-          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          _13 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          _14 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          StorageLive(_15);                // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          _15 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          StorageLive(_16);                // scope 2 at $DIR/issue_76432.rs:+3:38: +3:52\n-          StorageLive(_17);                // scope 2 at $DIR/issue_76432.rs:+3:38: +3:52\n-          _17 = &raw const (*_13);         // scope 2 at $DIR/issue_76432.rs:+3:38: +3:40\n-          _16 = _17;                       // scope 2 at $DIR/issue_76432.rs:+3:38: +3:52\n-          StorageLive(_18);                // scope 2 at $DIR/issue_76432.rs:+3:54: +3:68\n-          StorageLive(_19);                // scope 2 at $DIR/issue_76432.rs:+3:54: +3:68\n-          _19 = &raw const (*_14);         // scope 2 at $DIR/issue_76432.rs:+3:54: +3:56\n-          _18 = _19;                       // scope 2 at $DIR/issue_76432.rs:+3:54: +3:68\n-          StorageLive(_20);                // scope 2 at $DIR/issue_76432.rs:+3:70: +3:84\n-          StorageLive(_21);                // scope 2 at $DIR/issue_76432.rs:+3:70: +3:84\n-          _21 = &raw const (*_15);         // scope 2 at $DIR/issue_76432.rs:+3:70: +3:72\n-          _20 = _21;                       // scope 2 at $DIR/issue_76432.rs:+3:70: +3:84\n-          _9 = [move _16, move _18, move _20]; // scope 2 at $DIR/issue_76432.rs:+3:37: +3:85\n-          StorageDead(_21);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_20);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_19);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_18);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_17);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_16);                // scope 2 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_15);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n+          StorageLive(_12);                // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n+          _12 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n+          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n+          _13 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n+          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n+          _14 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n           StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n           StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_9);                 // scope 1 at $DIR/issue_76432.rs:+5:6: +5:7\n+          StorageDead(_12);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n           nop;                             // scope 0 at $DIR/issue_76432.rs:+0:44: +6:2\n           StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2"}, {"sha": "1be27e96397de144c3f25752c79a1545ea5fb755", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `c` before SimplifyLocals\n-+ // MIR for `c` after SimplifyLocals\n+- // MIR for `c` before SimplifyLocals-before-const-prop\n++ // MIR for `c` after SimplifyLocals-before-const-prop\n   \n   fn c() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:8: +0:8", "previous_filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff"}, {"sha": "9817380301862f9d5aeffb9b83d220babdccc957", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `d1` before SimplifyLocals\n-+ // MIR for `d1` after SimplifyLocals\n+- // MIR for `d1` before SimplifyLocals-before-const-prop\n++ // MIR for `d1` after SimplifyLocals-before-const-prop\n   \n   fn d1() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff"}, {"sha": "b152dc8cca3a9ce12a2697a455e4eedd6f672435", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `d2` before SimplifyLocals\n-+ // MIR for `d2` after SimplifyLocals\n+- // MIR for `d2` before SimplifyLocals-before-const-prop\n++ // MIR for `d2` after SimplifyLocals-before-const-prop\n   \n   fn d2() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff"}, {"sha": "9ca1dbbd071b06f43af07edb34f581e2f83f20fb", "filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.expose_addr.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `expose_addr` before SimplifyLocals\n-+ // MIR for `expose_addr` after SimplifyLocals\n+- // MIR for `expose_addr` before SimplifyLocals-before-const-prop\n++ // MIR for `expose_addr` after SimplifyLocals-before-const-prop\n   \n   fn expose_addr(_1: *const usize) -> () {\n       debug p => _1;                       // in scope 0 at $DIR/simplify_locals.rs:+0:16: +0:17", "previous_filename": "src/test/mir-opt/simplify_locals.expose_addr.SimplifyLocals.diff"}, {"sha": "19dacb427f5773dcdd87a6801313c771eb099ab0", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `r` before SimplifyLocals\n-+ // MIR for `r` after SimplifyLocals\n+- // MIR for `r` before SimplifyLocals-before-const-prop\n++ // MIR for `r` after SimplifyLocals-before-const-prop\n   \n   fn r() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:8: +0:8", "previous_filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff"}, {"sha": "7bbc0481c68a49a8010d1c228423a6cc413df2f6", "filename": "src/test/mir-opt/simplify_locals.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// unit-test: SimplifyLocals\n+// unit-test: SimplifyLocals-before-const-prop\n \n \n #![feature(thread_local)]\n@@ -9,26 +9,26 @@ enum E {\n      B,\n }\n \n-// EMIT_MIR simplify_locals.c.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.c.SimplifyLocals-before-const-prop.diff\n fn c() {\n     let bytes = [0u8; 10];\n     // Unused cast\n     let _: &[u8] = &bytes;\n }\n \n-// EMIT_MIR simplify_locals.d1.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.d1.SimplifyLocals-before-const-prop.diff\n fn d1() {\n     // Unused set discriminant\n     let _ = E::A;\n }\n \n-// EMIT_MIR simplify_locals.d2.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.d2.SimplifyLocals-before-const-prop.diff\n fn d2() {\n     // Unused set discriminant\n     {(10, E::A)}.1 = E::B;\n }\n \n-// EMIT_MIR simplify_locals.r.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.r.SimplifyLocals-before-const-prop.diff\n fn r() {\n     let mut a = 1;\n     // Unused references\n@@ -38,31 +38,31 @@ fn r() {\n \n #[thread_local] static mut X: u32 = 0;\n \n-// EMIT_MIR simplify_locals.t1.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.t1.SimplifyLocals-before-const-prop.diff\n fn t1() {\n     // Unused thread local\n     unsafe { X };\n }\n \n-// EMIT_MIR simplify_locals.t2.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.t2.SimplifyLocals-before-const-prop.diff\n fn t2() {\n     // Unused thread local\n     unsafe { &mut X };\n }\n \n-// EMIT_MIR simplify_locals.t3.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.t3.SimplifyLocals-before-const-prop.diff\n fn t3() {\n     // Unused thread local\n     unsafe { *&mut X };\n }\n \n-// EMIT_MIR simplify_locals.t4.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.t4.SimplifyLocals-before-const-prop.diff\n fn t4() -> u32 {\n     // Used thread local\n     unsafe { X + 1 }\n }\n \n-// EMIT_MIR simplify_locals.expose_addr.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals.expose_addr.SimplifyLocals-before-const-prop.diff\n fn expose_addr(p: *const usize) {\n     // Used pointer to address cast. Has a side effect of exposing the provenance.\n     p as usize;"}, {"sha": "1b2e1158e45cc3855537bbbd8e7bb4ac8c3f3f07", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `t1` before SimplifyLocals\n-+ // MIR for `t1` after SimplifyLocals\n+- // MIR for `t1` before SimplifyLocals-before-const-prop\n++ // MIR for `t1` after SimplifyLocals-before-const-prop\n   \n   fn t1() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff"}, {"sha": "cf019357be776f8c064710682a0da8aeb8f9c8cc", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `t2` before SimplifyLocals\n-+ // MIR for `t2` after SimplifyLocals\n+- // MIR for `t2` before SimplifyLocals-before-const-prop\n++ // MIR for `t2` after SimplifyLocals-before-const-prop\n   \n   fn t2() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff"}, {"sha": "90ee215808c7a84f0444a8619e6117ba5b8a8aa2", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `t3` before SimplifyLocals\n-+ // MIR for `t3` after SimplifyLocals\n+- // MIR for `t3` before SimplifyLocals-before-const-prop\n++ // MIR for `t3` after SimplifyLocals-before-const-prop\n   \n   fn t3() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals.rs:+0:9: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff"}, {"sha": "9add9a6c5e061469c53807fbca04c26f0c17fb6b", "filename": "src/test/mir-opt/simplify_locals.t4.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `t4` before SimplifyLocals\n-+ // MIR for `t4` after SimplifyLocals\n+- // MIR for `t4` before SimplifyLocals-before-const-prop\n++ // MIR for `t4` after SimplifyLocals-before-const-prop\n   \n   fn t4() -> u32 {\n       let mut _0: u32;                     // return place in scope 0 at $DIR/simplify_locals.rs:+0:12: +0:15", "previous_filename": "src/test/mir-opt/simplify_locals.t4.SimplifyLocals.diff"}, {"sha": "f888c622d90856b46ec46cb31df263ae65de58cf", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `foo` before SimplifyLocals\n-+ // MIR for `foo` after SimplifyLocals\n+- // MIR for `foo` before SimplifyLocals-final\n++ // MIR for `foo` after SimplifyLocals-final\n   \n   fn foo() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals_fixedpoint.rs:+0:13: +0:13", "previous_filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff"}, {"sha": "1fdba6e99e3ede935872c9e9af7c058e29a2a358", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     foo::<()>();\n }\n \n-// EMIT_MIR simplify_locals_fixedpoint.foo.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals_fixedpoint.foo.SimplifyLocals-final.diff"}, {"sha": "efb2b0961cc1dee2e05fe83e5bffe67ca8ac7303", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `main` before SimplifyLocals\n-+ // MIR for `main` after SimplifyLocals\n+- // MIR for `main` before SimplifyLocals-before-const-prop\n++ // MIR for `main` after SimplifyLocals-before-const-prop\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_locals_removes_unused_consts.rs:+0:11: +0:11", "previous_filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff"}, {"sha": "7a03a2837ae7ffdf59c21495871f4774e007a6ca", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// unit-test: SimplifyLocals\n+// unit-test: SimplifyLocals-before-const-prop\n // compile-flags: -C overflow-checks=no\n \n fn use_zst(_: ((), ())) {}\n@@ -9,7 +9,7 @@ struct Temp {\n \n fn use_u8(_: u8) {}\n \n-// EMIT_MIR simplify_locals_removes_unused_consts.main.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals_removes_unused_consts.main.SimplifyLocals-before-const-prop.diff\n fn main() {\n     let ((), ()) = ((), ());\n     use_zst(((), ()));"}, {"sha": "027c983e6b4c80c263638ec60433915717dfa9f7", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `map` before SimplifyLocals\n-+ // MIR for `map` after SimplifyLocals\n+- // MIR for `map` before SimplifyLocals-before-const-prop\n++ // MIR for `map` after SimplifyLocals-before-const-prop\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n       debug x => _1;                       // in scope 0 at $DIR/simplify_locals_removes_unused_discriminant_reads.rs:+0:8: +0:9", "previous_filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff"}, {"sha": "de65857412cfc7a422194a4956461295349b4c6f", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// unit-test: SimplifyLocals\n+// unit-test: SimplifyLocals-before-const-prop\n \n fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n     match x {\n@@ -11,4 +11,4 @@ fn main() {\n     map(None);\n }\n \n-// EMIT_MIR simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff\n+// EMIT_MIR simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals-before-const-prop.diff"}, {"sha": "b4fb330f3df2437f638b187bccf08ab13222e446", "filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals-final.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals-final.after.mir?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `process_never` after SimplifyLocals\n+// MIR for `process_never` after SimplifyLocals-final\n \n fn process_never(_1: *const !) -> () {\n     debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:22: +0:27", "previous_filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals.after.mir"}, {"sha": "2af864998cb08a490b32fd31a4744d565c808625", "filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals-final.after.mir", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `process_void` after SimplifyLocals\n+// MIR for `process_void` after SimplifyLocals-final\n \n fn process_void(_1: *const Void) -> () {\n     debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:21: +0:26", "previous_filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals.after.mir"}, {"sha": "19db548157a66742a63a97e77e580e62efc26c8d", "filename": "src/test/mir-opt/uninhabited_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.rs?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -2,13 +2,13 @@\n \n pub enum Void {}\n \n-// EMIT_MIR uninhabited_enum.process_never.SimplifyLocals.after.mir\n+// EMIT_MIR uninhabited_enum.process_never.SimplifyLocals-final.after.mir\n #[no_mangle]\n pub fn process_never(input: *const !) {\n    let _input = unsafe { &*input };\n }\n \n-// EMIT_MIR uninhabited_enum.process_void.SimplifyLocals.after.mir\n+// EMIT_MIR uninhabited_enum.process_void.SimplifyLocals-final.after.mir\n #[no_mangle]\n pub fn process_void(input: *const Void) {\n    let _input = unsafe { &*input };"}, {"sha": "8d74dc84caee5a1a39d50e7d4f2abb1efd8f429f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -4,13 +4,8 @@\n   fn change_loop_body() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n       let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:+0:1: +6:2\n-      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n-      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n-      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:33: +5:6\n-      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let _7: ();                          // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n-      let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n+      let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n+      let mut _3: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n           scope 2 {\n@@ -20,17 +15,17 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n-          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n--         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          StorageLive(_2);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+          Deinit(_2);                      // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+          discriminant(_2) = 0;            // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+-         _3 = discriminant(_2);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+-         switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n++         _3 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n +         switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          switchInt(((_2 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb2: {\n@@ -40,14 +35,12 @@\n       }\n   \n       bb3: {\n-          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n           nop;                             // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n-          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n           goto -> bb4;                     // scope 1 at no-location\n       }\n   \n       bb4: {\n-          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n+          StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n           StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n       }"}, {"sha": "b95d91b13dd7976c646481fc8425b4754b874095", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -44,7 +44,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb5: {\n         StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n-        goto -> bb8;                     // scope 0 at no-location\n+        goto -> bb7;                     // scope 0 at no-location\n     }\n \n     bb6: {\n@@ -54,10 +54,6 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb7: {\n-        goto -> bb8;                     // scope 0 at no-location\n-    }\n-\n-    bb8: {\n         StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n         return;                          // scope 0 at $DIR/while_storage.rs:+6:2: +6:2\n     }"}, {"sha": "0dd18a55786ad34cdb3a2d2a5b6cc1ee57ab9eef", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -21,12 +21,6 @@ note: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^\n \n-note: erroneous constant used\n-  --> $DIR/invalid-union.rs:43:25\n-   |\n-LL |     let _: &'static _ = &C;\n-   |                         ^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "07f36ee283264dc9181a92f7de95e759313f83d9", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/028b4745f4db7297c5082caabff986a477662375/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=028b4745f4db7297c5082caabff986a477662375", "patch": "@@ -21,12 +21,6 @@ note: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^\n \n-note: erroneous constant used\n-  --> $DIR/invalid-union.rs:43:25\n-   |\n-LL |     let _: &'static _ = &C;\n-   |                         ^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}]}