{"sha": "c2891cc48798908a96d1b3f847d2cf241fcc58bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyODkxY2M0ODc5ODkwOGE5NmQxYjNmODQ3ZDJjZjI0MWZjYzU4YmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:38:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:12Z"}, "message": "Fallout: EnumSet, add Marker.", "tree": {"sha": "8f08d88bd4375474c153f51e3260a04e70573ca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f08d88bd4375474c153f51e3260a04e70573ca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2891cc48798908a96d1b3f847d2cf241fcc58bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2891cc48798908a96d1b3f847d2cf241fcc58bb", "html_url": "https://github.com/rust-lang/rust/commit/c2891cc48798908a96d1b3f847d2cf241fcc58bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2891cc48798908a96d1b3f847d2cf241fcc58bb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ebe640b6c99f53fee53671e09c673c8c17726a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ebe640b6c99f53fee53671e09c673c8c17726a", "html_url": "https://github.com/rust-lang/rust/commit/68ebe640b6c99f53fee53671e09c673c8c17726a"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "16041dea7d929d4610728e43bf138dc28f7d14ed", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2891cc48798908a96d1b3f847d2cf241fcc58bb/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2891cc48798908a96d1b3f847d2cf241fcc58bb/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=c2891cc48798908a96d1b3f847d2cf241fcc58bb", "patch": "@@ -14,6 +14,7 @@\n //! representation to hold C-like enum variants.\n \n use core::prelude::*;\n+use core::marker;\n use core::fmt;\n use core::num::Int;\n use core::iter::{FromIterator, IntoIterator};\n@@ -26,7 +27,8 @@ use core::ops::{Sub, BitOr, BitAnd, BitXor};\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists\n-    bits: usize\n+    bits: usize,\n+    marker: marker::PhantomData<E>,\n }\n \n impl<E> Copy for EnumSet<E> {}\n@@ -86,7 +88,7 @@ impl<E:CLike> EnumSet<E> {\n     #[unstable(feature = \"collections\",\n                reason = \"matches collection reform specification, waiting for dust to settle\")]\n     pub fn new() -> EnumSet<E> {\n-        EnumSet {bits: 0}\n+        EnumSet {bits: 0, marker: marker::PhantomData}\n     }\n \n     /// Returns the number of elements in the given `EnumSet`.\n@@ -130,12 +132,14 @@ impl<E:CLike> EnumSet<E> {\n \n     /// Returns the union of both `EnumSets`.\n     pub fn union(&self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits | e.bits}\n+        EnumSet {bits: self.bits | e.bits,\n+                 marker: marker::PhantomData}\n     }\n \n     /// Returns the intersection of both `EnumSets`.\n     pub fn intersection(&self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits & e.bits}\n+        EnumSet {bits: self.bits & e.bits,\n+                 marker: marker::PhantomData}\n     }\n \n     /// Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before\n@@ -175,38 +179,39 @@ impl<E:CLike> Sub for EnumSet<E> {\n     type Output = EnumSet<E>;\n \n     fn sub(self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits & !e.bits}\n+        EnumSet {bits: self.bits & !e.bits, marker: marker::PhantomData}\n     }\n }\n \n impl<E:CLike> BitOr for EnumSet<E> {\n     type Output = EnumSet<E>;\n \n     fn bitor(self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits | e.bits}\n+        EnumSet {bits: self.bits | e.bits, marker: marker::PhantomData}\n     }\n }\n \n impl<E:CLike> BitAnd for EnumSet<E> {\n     type Output = EnumSet<E>;\n \n     fn bitand(self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits & e.bits}\n+        EnumSet {bits: self.bits & e.bits, marker: marker::PhantomData}\n     }\n }\n \n impl<E:CLike> BitXor for EnumSet<E> {\n     type Output = EnumSet<E>;\n \n     fn bitxor(self, e: EnumSet<E>) -> EnumSet<E> {\n-        EnumSet {bits: self.bits ^ e.bits}\n+        EnumSet {bits: self.bits ^ e.bits, marker: marker::PhantomData}\n     }\n }\n \n /// An iterator over an EnumSet\n pub struct Iter<E> {\n     index: usize,\n     bits: usize,\n+    marker: marker::PhantomData<E>,\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n@@ -215,13 +220,14 @@ impl<E> Clone for Iter<E> {\n         Iter {\n             index: self.index,\n             bits: self.bits,\n+            marker: marker::PhantomData,\n         }\n     }\n }\n \n impl<E:CLike> Iter<E> {\n     fn new(bits: usize) -> Iter<E> {\n-        Iter { index: 0, bits: bits }\n+        Iter { index: 0, bits: bits, marker: marker::PhantomData }\n     }\n }\n "}]}