{"sha": "8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "node_id": "C_kwDOAAsO6NoAKDgyNTJhNmVkZGZjNTkzMjhmZTZhYzM2ZWYwOWZlYjI4NDRmMjhmYTI", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-21T21:54:53Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-21T21:54:53Z"}, "message": "address review", "tree": {"sha": "784b84ea334cbabc7b71dbaf993ee17c6b0f20f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/784b84ea334cbabc7b71dbaf993ee17c6b0f20f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "html_url": "https://github.com/rust-lang/rust/commit/8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9843d61440edb19642920f2f8f33652e9c83971", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9843d61440edb19642920f2f8f33652e9c83971", "html_url": "https://github.com/rust-lang/rust/commit/c9843d61440edb19642920f2f8f33652e9c83971"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "622b57c7b7f2b20f73b6b59835dce177748529c2", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "patch": "@@ -505,7 +505,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n     {\n         let next_region = self.infcx.next_region_var(origin);\n         let vid = next_region\n-            .try_get_var()\n+            .as_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n         if cfg!(debug_assertions) {\n@@ -534,7 +534,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n     {\n         let next_region = self.infcx.next_nll_region_var(origin.clone());\n         let vid = next_region\n-            .try_get_var()\n+            .as_var()\n             .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n \n         if cfg!(debug_assertions) {"}, {"sha": "8c374c2164c7b2942c148999cabc4d73ec539da6", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "patch": "@@ -261,10 +261,10 @@ fn sccs_info<'cx, 'tcx>(\n     }\n     debug!(debug_str);\n \n-    let num_components = sccs.scc_data.ranges.len();\n+    let num_components = sccs.scc_data().ranges().len();\n     let mut components = vec![FxHashSet::default(); num_components];\n \n-    for (reg_var_idx, scc_idx) in sccs.scc_indices.iter().enumerate() {\n+    for (reg_var_idx, scc_idx) in sccs.scc_indices().iter().enumerate() {\n         let reg_var = ty::RegionVid::from_usize(reg_var_idx);\n         let origin = var_to_origin.get(&reg_var).unwrap_or_else(|| &RegionCtxt::Unknown);\n         components[scc_idx.as_usize()].insert((reg_var, *origin));\n@@ -298,8 +298,8 @@ fn sccs_info<'cx, 'tcx>(\n \n     let mut scc_node_to_edges = FxHashMap::default();\n     for (scc_idx, repr) in components_representatives.iter() {\n-        let edges_range = sccs.scc_data.ranges[*scc_idx].clone();\n-        let edges = &sccs.scc_data.all_successors[edges_range];\n+        let edges_range = sccs.scc_data().ranges()[*scc_idx].clone();\n+        let edges = &sccs.scc_data().all_successors()[edges_range];\n         let edge_representatives =\n             edges.iter().map(|scc_idx| components_representatives[scc_idx]).collect::<Vec<_>>();\n         scc_node_to_edges.insert((scc_idx, repr), edge_representatives);"}, {"sha": "d96372fb99baab5c4c38b4228dee79ca0bb340c3", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "patch": "@@ -130,9 +130,8 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n         };\n \n-        let reg_var = reg\n-            .try_get_var()\n-            .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+        let reg_var =\n+            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n         let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n         let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n         assert!(matches!(prev, None));\n@@ -147,9 +146,8 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             universe,\n         );\n \n-        let reg_var = reg\n-            .try_get_var()\n-            .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+        let reg_var =\n+            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n \n         if cfg!(debug_assertions) {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();"}, {"sha": "c4b11951ab7a08d477005d57ea2e2eb03a032887", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "patch": "@@ -21,28 +21,36 @@ mod tests;\n pub struct Sccs<N: Idx, S: Idx> {\n     /// For each node, what is the SCC index of the SCC to which it\n     /// belongs.\n-    pub scc_indices: IndexVec<N, S>,\n+    scc_indices: IndexVec<N, S>,\n \n     /// Data about each SCC.\n-    pub scc_data: SccData<S>,\n+    scc_data: SccData<S>,\n }\n \n pub struct SccData<S: Idx> {\n     /// For each SCC, the range of `all_successors` where its\n     /// successors can be found.\n-    pub ranges: IndexVec<S, Range<usize>>,\n+    ranges: IndexVec<S, Range<usize>>,\n \n     /// Contains the successors for all the Sccs, concatenated. The\n     /// range of indices corresponding to a given SCC is found in its\n     /// SccData.\n-    pub all_successors: Vec<S>,\n+    all_successors: Vec<S>,\n }\n \n impl<N: Idx, S: Idx + Ord> Sccs<N, S> {\n     pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {\n         SccsConstruction::construct(graph)\n     }\n \n+    pub fn scc_indices(&self) -> &IndexVec<N, S> {\n+        &self.scc_indices\n+    }\n+\n+    pub fn scc_data(&self) -> &SccData<S> {\n+        &self.scc_data\n+    }\n+\n     /// Returns the number of SCCs in the graph.\n     pub fn num_sccs(&self) -> usize {\n         self.scc_data.len()\n@@ -115,6 +123,14 @@ impl<S: Idx> SccData<S> {\n         self.ranges.len()\n     }\n \n+    pub fn ranges(&self) -> &IndexVec<S, Range<usize>> {\n+        &self.ranges\n+    }\n+\n+    pub fn all_successors(&self) -> &Vec<S> {\n+        &self.all_successors\n+    }\n+\n     /// Returns the successors of the given SCC.\n     fn successors(&self, scc: S) -> &[S] {\n         // Annoyingly, `range` does not implement `Copy`, so we have"}, {"sha": "35ff71d888501915dfd7f02c8a0ab34e0dac4158", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8252a6eddfc59328fe6ac36ef09feb2844f28fa2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=8252a6eddfc59328fe6ac36ef09feb2844f28fa2", "patch": "@@ -1752,7 +1752,7 @@ impl<'tcx> Region<'tcx> {\n         matches!(self.kind(), ty::ReVar(_))\n     }\n \n-    pub fn try_get_var(self) -> Option<RegionVid> {\n+    pub fn as_var(self) -> Option<RegionVid> {\n         match self.kind() {\n             ty::ReVar(vid) => Some(vid),\n             _ => None,"}]}