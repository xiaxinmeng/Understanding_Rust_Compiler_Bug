{"sha": "13bd25e4722a02f7b38797c7d116bfb9d1667e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYmQyNWU0NzIyYTAyZjdiMzg3OTdjN2QxMTZiZmI5ZDE2NjdlNzI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-01T16:17:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-04T19:01:18Z"}, "message": "Do not lose or reorder user-provided linker arguments", "tree": {"sha": "7827efeafd89a61f84ab96fad16bc80bf3c3d840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7827efeafd89a61f84ab96fad16bc80bf3c3d840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bd25e4722a02f7b38797c7d116bfb9d1667e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bd25e4722a02f7b38797c7d116bfb9d1667e72", "html_url": "https://github.com/rust-lang/rust/commit/13bd25e4722a02f7b38797c7d116bfb9d1667e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bd25e4722a02f7b38797c7d116bfb9d1667e72/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff07db629d7522a0ae4e05865f66f3186e70970", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff07db629d7522a0ae4e05865f66f3186e70970", "html_url": "https://github.com/rust-lang/rust/commit/cff07db629d7522a0ae4e05865f66f3186e70970"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "49786bc3b068d75e6444f6a8772f027f850cf563", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=13bd25e4722a02f7b38797c7d116bfb9d1667e72", "patch": "@@ -505,10 +505,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             cmd.args(args);\n         }\n     }\n-    if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n-        cmd.args(args);\n-    }\n-    cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n+    cmd.args(&sess.opts.debugging_opts.pre_link_args);\n \n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {\n@@ -1302,18 +1299,17 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.gc_sections(keep_metadata);\n     }\n \n-    let used_link_args = &codegen_results.crate_info.link_args;\n+    let attr_link_args = codegen_results.crate_info.link_args.iter();\n+    let user_link_args: Vec<_> =\n+        sess.opts.cg.link_args.iter().chain(attr_link_args).cloned().collect();\n \n     if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n-            let empty_vec = Vec::new();\n-            let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-            let more_args = &sess.opts.cg.link_arg;\n-            let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n-\n-            if is_pic(sess) && !sess.crt_static(Some(crate_type)) && !args.any(|x| *x == \"-static\")\n+            if is_pic(sess)\n+                && !sess.crt_static(Some(crate_type))\n+                && !user_link_args.iter().any(|x| x == \"-static\")\n             {\n                 position_independent_executable = true;\n             }\n@@ -1444,11 +1440,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n \n     // Finally add all the linker arguments provided on the command line along\n     // with any #[link_args] attributes found inside the crate\n-    if let Some(ref args) = sess.opts.cg.link_args {\n-        cmd.args(args);\n-    }\n-    cmd.args(&sess.opts.cg.link_arg);\n-    cmd.args(&used_link_args);\n+    cmd.args(&user_link_args);\n }\n \n // # Native library linking"}, {"sha": "b452ccfe33a522847d480bdbb38d4e68bbd152f0", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=13bd25e4722a02f7b38797c7d116bfb9d1667e72", "patch": "@@ -382,7 +382,7 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.linker = Some(PathBuf::from(\"linker\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.link_args = Some(vec![String::from(\"abc\"), String::from(\"def\")]);\n+    opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.link_dead_code = true;"}, {"sha": "8cd6ca86f46897e88145e709b282e973e6ee6427", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=13bd25e4722a02f7b38797c7d116bfb9d1667e72", "patch": "@@ -296,9 +296,17 @@ macro_rules! options {\n         use std::path::PathBuf;\n         use std::str::FromStr;\n \n+        // Sometimes different options need to build a common structure.\n+        // That structure can kept in one of the options' fields, the others become dummy.\n+        macro_rules! redirect_field {\n+            ($cg:ident.link_arg) => { $cg.link_args };\n+            ($cg:ident.pre_link_arg) => { $cg.pre_link_args };\n+            ($cg:ident.$field:ident) => { $cg.$field };\n+        }\n+\n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n-                $parse(&mut cg.$opt, v)\n+                $parse(&mut redirect_field!(cg.$opt), v)\n             }\n         )*\n \n@@ -643,9 +651,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n-    link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+    link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n-    link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n+    link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n         \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n@@ -876,9 +884,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"make rustc print the total optimization fuel used by a crate\"),\n     force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n         \"force all crates to be `rustc_private` unstable\"),\n-    pre_link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+    pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n-    pre_link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n+    pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),"}, {"sha": "98c1e0eac3b0e36952db62944255ec67e265f091", "filename": "src/test/run-make-fulldeps/link-args-order/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile?ref=13bd25e4722a02f7b38797c7d116bfb9d1667e72", "patch": "@@ -0,0 +1,10 @@\n+# ignore-msvc\n+\n+-include ../tools.mk\n+\n+RUSTC_FLAGS = -C linker-flavor=ld -C link-arg=a -C link-args=\"b c\" -C link-args=\"d e\" -C link-arg=f\n+RUSTC_FLAGS_PRE = -C linker-flavor=ld -Z pre-link-arg=a -Z pre-link-args=\"b c\" -Z pre-link-args=\"d e\" -Z pre-link-arg=f\n+\n+all:\n+\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"'\n+\t$(RUSTC) $(RUSTC_FLAGS_PRE) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'"}, {"sha": "2439171004b5f9f0ead91624fbf5d78d583a6946", "filename": "src/test/run-make-fulldeps/link-args-order/empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bd25e4722a02f7b38797c7d116bfb9d1667e72/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs?ref=13bd25e4722a02f7b38797c7d116bfb9d1667e72", "patch": "@@ -0,0 +1,6 @@\n+#![feature(link_args)]\n+\n+#[link_args = \"g\"]\n+extern \"C\" {}\n+\n+fn main() {}"}]}