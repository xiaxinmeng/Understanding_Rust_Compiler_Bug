{"sha": "7269a884c91d539c6e6ec275a6d9ef6d6bd5f142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjlhODg0YzkxZDUzOWM2ZTZlYzI3NWE2ZDllZjZkNmJkNWYxNDI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-22T15:46:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-22T15:46:45Z"}, "message": "Expose `AllocId`s for priroda", "tree": {"sha": "1479d74bd6b567a3495bf56ca1e54ad59bb9b852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1479d74bd6b567a3495bf56ca1e54ad59bb9b852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142", "html_url": "https://github.com/rust-lang/rust/commit/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd85d2a2767b37f9869b719a74e3da99087c31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd85d2a2767b37f9869b719a74e3da99087c31a", "html_url": "https://github.com/rust-lang/rust/commit/1cd85d2a2767b37f9869b719a74e3da99087c31a"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "56d6e1400f3eae5cb40d8ba97a7681096e126ca5", "filename": "src/mono_hash_map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142/src%2Fmono_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7269a884c91d539c6e6ec275a6d9ef6d6bd5f142/src%2Fmono_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_hash_map.rs?ref=7269a884c91d539c6e6ec275a6d9ef6d6bd5f142", "patch": "@@ -18,8 +18,11 @@ use crate::AllocMap;\n pub struct MonoHashMap<K: Hash + Eq, V>(RefCell<FxHashMap<K, Box<V>>>);\n \n impl<K: Hash + Eq, V> MonoHashMap<K, V> {\n-    pub fn values<T>(&self, f: impl FnOnce(&mut dyn Iterator<Item=&V>) -> T) -> T {\n-        f(&mut self.0.borrow().values().map(|v| &**v))\n+    /// This function exists for priroda to be able to iterate over all evaluator memory\n+    ///\n+    /// The memory of constants does not show up in this list.\n+    pub fn iter<T>(&self, f: impl FnOnce(&mut dyn Iterator<Item=(&K, &V)>) -> T) -> T {\n+        f(&mut self.0.borrow().iter().map(|(k, v)| (k, &**v)))\n     }\n }\n "}]}