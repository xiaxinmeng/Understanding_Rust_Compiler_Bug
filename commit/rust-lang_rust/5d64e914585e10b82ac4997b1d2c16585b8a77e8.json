{"sha": "5d64e914585e10b82ac4997b1d2c16585b8a77e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNjRlOTE0NTg1ZTEwYjgyYWM0OTk3YjFkMmMxNjU4NWI4YTc3ZTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-19T01:14:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-04T16:53:15Z"}, "message": "review comment: use `body_id`", "tree": {"sha": "1d328898ee2037cc0a6a92e55a5027d837bde087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d328898ee2037cc0a6a92e55a5027d837bde087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d64e914585e10b82ac4997b1d2c16585b8a77e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d64e914585e10b82ac4997b1d2c16585b8a77e8", "html_url": "https://github.com/rust-lang/rust/commit/5d64e914585e10b82ac4997b1d2c16585b8a77e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d64e914585e10b82ac4997b1d2c16585b8a77e8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93c660b0de0f5df4ae8699e983b7cd67738b2a9", "html_url": "https://github.com/rust-lang/rust/commit/c93c660b0de0f5df4ae8699e983b7cd67738b2a9"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "04267ccba669f8f158a10f3fb832a905f15e98b0", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5d64e914585e10b82ac4997b1d2c16585b8a77e8/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d64e914585e10b82ac4997b1d2c16585b8a77e8/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5d64e914585e10b82ac4997b1d2c16585b8a77e8", "patch": "@@ -321,10 +321,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else if let ty::Param(p) = lhs_ty.kind {\n                                     suggest_constraining_param(\n                                         self.tcx,\n+                                        self.body_id,\n                                         &mut err,\n                                         lhs_ty,\n                                         rhs_ty,\n-                                        &expr,\n                                         missing_trait,\n                                         p,\n                                         false,\n@@ -481,10 +481,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else if let ty::Param(p) = lhs_ty.kind {\n                                     suggest_constraining_param(\n                                         self.tcx,\n+                                        self.body_id,\n                                         &mut err,\n                                         lhs_ty,\n                                         rhs_ty,\n-                                        &expr,\n                                         missing_trait,\n                                         p,\n                                         use_output,\n@@ -938,10 +938,10 @@ fn suggest_impl_missing(err: &mut DiagnosticBuilder<'_>, ty: Ty<'_>, missing_tra\n \n fn suggest_constraining_param(\n     tcx: TyCtxt<'_>,\n+    body_id: hir::HirId,\n     mut err: &mut DiagnosticBuilder<'_>,\n     lhs_ty: Ty<'_>,\n     rhs_ty: Ty<'_>,\n-    expr: &hir::Expr<'_>,\n     missing_trait: &str,\n     p: ty::ParamTy,\n     set_output: bool,\n@@ -951,33 +951,26 @@ fn suggest_constraining_param(\n     // Try to find the def-id and details for the parameter p. We have only the index,\n     // so we have to find the enclosing function's def-id, then look through its declared\n     // generic parameters to get the declaration.\n-    if let Some(def_id) = hir\n-        .find(hir.get_parent_item(expr.hir_id))\n-        .and_then(|node| node.hir_id())\n-        .and_then(|hir_id| hir.opt_local_def_id(hir_id))\n+    let def_id = hir.body_owner_def_id(hir::BodyId { hir_id: body_id });\n+    let generics = tcx.generics_of(def_id);\n+    let param_def_id = generics.type_param(&p, tcx).def_id;\n+    if let Some(generics) = hir\n+        .as_local_hir_id(param_def_id)\n+        .and_then(|id| hir.find(hir.get_parent_item(id)))\n+        .as_ref()\n+        .and_then(|node| node.generics())\n     {\n-        let generics = tcx.generics_of(def_id);\n-        let param_def_id = generics.type_param(&p, tcx).def_id;\n-        if let Some(generics) = hir\n-            .as_local_hir_id(param_def_id)\n-            .and_then(|id| hir.find(hir.get_parent_item(id)))\n-            .as_ref()\n-            .and_then(|node| node.generics())\n-        {\n-            let output = if set_output { format!(\"<Output = {}>\", rhs_ty) } else { String::new() };\n-            suggest_constraining_type_param(\n-                tcx,\n-                generics,\n-                &mut err,\n-                &format!(\"{}\", lhs_ty),\n-                &format!(\"{}{}\", missing_trait, output),\n-                None,\n-            );\n-        } else {\n-            let span = tcx.def_span(param_def_id);\n-            err.span_label(span, msg);\n-        }\n+        let output = if set_output { format!(\"<Output = {}>\", rhs_ty) } else { String::new() };\n+        suggest_constraining_type_param(\n+            tcx,\n+            generics,\n+            &mut err,\n+            &format!(\"{}\", lhs_ty),\n+            &format!(\"{}{}\", missing_trait, output),\n+            None,\n+        );\n     } else {\n-        err.note(&msg);\n+        let span = tcx.def_span(param_def_id);\n+        err.span_label(span, msg);\n     }\n }"}]}