{"sha": "0119669711af204d1205cf64fed11f5ad3c1bbdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTk2Njk3MTFhZjIwNGQxMjA1Y2Y2NGZlZDExZjVhZDNjMWJiZGQ=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T18:50:55Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:15:37Z"}, "message": "use retain to avoid the allocation", "tree": {"sha": "59dbb209dc225b1d290c3623e8ab79e9b53d27e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59dbb209dc225b1d290c3623e8ab79e9b53d27e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0119669711af204d1205cf64fed11f5ad3c1bbdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0119669711af204d1205cf64fed11f5ad3c1bbdd", "html_url": "https://github.com/rust-lang/rust/commit/0119669711af204d1205cf64fed11f5ad3c1bbdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0119669711af204d1205cf64fed11f5ad3c1bbdd/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "html_url": "https://github.com/rust-lang/rust/commit/8a356011aeae6895e4d89dd95b37e8c7706ec5a3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "624636652f38816d50e6a3669fdc96f4ce3c357b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0119669711af204d1205cf64fed11f5ad3c1bbdd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0119669711af204d1205cf64fed11f5ad3c1bbdd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=0119669711af204d1205cf64fed11f5ad3c1bbdd", "patch": "@@ -251,7 +251,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         var_infos: VarInfos,\n         universal_regions: UniversalRegions<'tcx>,\n         mir: &Mir<'tcx>,\n-        outlives_constraints: Vec<OutlivesConstraint>,\n+        mut outlives_constraints: Vec<OutlivesConstraint>,\n         type_tests: Vec<TypeTest<'tcx>>,\n     ) -> Self {\n         // The `next` field should not yet have been initialized:\n@@ -268,22 +268,22 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .map(|info| RegionDefinition::new(info.origin))\n             .collect();\n \n+        let mut seen_constraints: FxHashSet<(RegionVid, RegionVid)> = Default::default();\n+\n+        outlives_constraints.retain(|c| c.sup != c.sub && seen_constraints.insert(c.dedup_key()));\n+\n         let mut result = Self {\n             definitions,\n             elements: elements.clone(),\n             liveness_constraints: RegionValues::new(elements, num_region_variables),\n             inferred_values: None,\n             dependency_map: None,\n-            constraints: Default::default(),\n-            seen_constraints: Default::default(),\n+            constraints: IndexVec::from_raw(outlives_constraints),\n+            seen_constraints,\n             type_tests,\n             universal_regions,\n         };\n \n-        for c in outlives_constraints {\n-            result.add_outlives_iner(c);\n-        }\n-\n         result.init_universal_regions();\n \n         result"}]}