{"sha": "59eff14120a067d04832142c8198f0132db2acb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWZmMTQxMjBhMDY3ZDA0ODMyMTQyYzgxOThmMDEzMmRiMmFjYjA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-19T12:49:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-19T15:46:03Z"}, "message": "Also catch static mutation at evaluation time", "tree": {"sha": "28fc4e62adb89b04e76c4215c59d6cb2720924f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fc4e62adb89b04e76c4215c59d6cb2720924f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59eff14120a067d04832142c8198f0132db2acb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59eff14120a067d04832142c8198f0132db2acb0", "html_url": "https://github.com/rust-lang/rust/commit/59eff14120a067d04832142c8198f0132db2acb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59eff14120a067d04832142c8198f0132db2acb0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "html_url": "https://github.com/rust-lang/rust/commit/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1"}], "stats": {"total": 117, "additions": 82, "deletions": 35}, "files": [{"sha": "fc970400f6ccf98c5fbe7ecf893fd94641af588f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -423,6 +423,7 @@ impl_stable_hash_for!(\n         CalledClosureAsFunction,\n         VtableForArgumentlessMethod,\n         ModifiedConstantMemory,\n+        ModifiedStatic,\n         AssumptionNotHeld,\n         InlineAsm,\n         ReallocateNonBasePtr,"}, {"sha": "5895b6cab9abd41336a2ef77e59eb200dbfef2e0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -276,6 +276,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n     ModifiedConstantMemory,\n+    ModifiedStatic,\n     AssumptionNotHeld,\n     InlineAsm,\n     TypeNotPrimitive(Ty<'tcx>),\n@@ -380,6 +381,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"tried to call a vtable function without arguments\",\n             ModifiedConstantMemory =>\n                 \"tried to modify constant memory\",\n+            ModifiedStatic =>\n+                \"tried to modify a static's initial value from another static's initializer\",\n             AssumptionNotHeld =>\n                 \"`assume` argument was false\",\n             InlineAsm =>"}, {"sha": "68a91b0a3bd2806ec12fb15976ce0ef7d640f017", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -423,10 +423,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             if alloc.mutability == Mutability::Immutable {\n                 return err!(ModifiedConstantMemory);\n             }\n-            let kind = M::STATIC_KIND.expect(\n-                \"An allocation is being mutated but the machine does not expect that to happen\"\n-            );\n-            Ok((MemoryKind::Machine(kind), alloc.into_owned()))\n+            match M::STATIC_KIND {\n+                Some(kind) => Ok((MemoryKind::Machine(kind), alloc.into_owned())),\n+                None => err!(ModifiedStatic),\n+            }\n         });\n         // Unpack the error type manually because type inference doesn't\n         // work otherwise (and we cannot help it because `impl Trait`)"}, {"sha": "51327464266d5baf45b45d088a9ab6ccd4aedb5d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -197,6 +197,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     | CalledClosureAsFunction\n                     | VtableForArgumentlessMethod\n                     | ModifiedConstantMemory\n+                    | ModifiedStatic\n                     | AssumptionNotHeld\n                     // FIXME: should probably be removed and turned into a bug! call\n                     | TypeNotPrimitive(_)"}, {"sha": "1371b9a9977075b766e6e864634595a62144cb1b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -249,7 +249,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 match dest {\n                     Place::Local(index) => break *index,\n                     Place::Projection(proj) => dest = &proj.base,\n-                    Place::Promoted(..) | Place::Static(..) => {\n+                    Place::Promoted(..) => bug!(\"promoteds don't exist yet during promotion\"),\n+                    Place::Static(..) => {\n                         // Catch more errors in the destination.\n                         self.visit_place(\n                             dest,\n@@ -495,6 +496,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // Only allow statics (not consts) to refer to other statics.\n                 if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n                     if context.is_mutating_use() {\n+                        // this is not strictly necessary as miri will also bail out\n+                        // For interior mutability we can't really catch this statically as that\n+                        // goes through raw pointers and intermediate temporaries, so miri has\n+                        // to catch this anyway\n                         self.tcx.sess.span_err(\n                             self.span,\n                             \"cannot mutate statics in the initializer of another static\","}, {"sha": "ef0de61d219adbbb91b553b34b405b54b315271f", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// New test for #53818: modifying static memory at compile-time is not allowed.\n+// The test should never compile successfully\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n+\n+use std::cell::UnsafeCell;\n+\n+struct Foo(UnsafeCell<u32>);\n+\n+unsafe impl Send for Foo {}\n+unsafe impl Sync for Foo {}\n+\n+static FOO: Foo = Foo(UnsafeCell::new(42));\n+\n+static BAR: () = unsafe {\n+    *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n+};\n+\n+fn main() {}"}, {"sha": "0892b05a69df273ea05da0cba2433462b118c3e9", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/assign-to-static-within-other-static-2.rs:27:5\n+   |\n+LL |     *FOO.0.get() = 5; //~ ERROR could not evaluate static initializer\n+   |     ^^^^^^^^^^^^^^^^ tried to modify a static's initial value from another static's initializer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6f16f644eec68177c7d9161f7c29d7b0c6589cb3", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -16,20 +16,9 @@\n \n use std::cell::UnsafeCell;\n \n-struct Foo(UnsafeCell<u32>);\n-\n-unsafe impl Send for Foo {}\n-unsafe impl Sync for Foo {}\n-\n-static FOO: Foo = Foo(UnsafeCell::new(42));\n-\n-static BAR: () = unsafe {\n-    *FOO.0.get() = 5;\n-};\n-\n-static mut FOO2: u32 = 42;\n-static BOO2: () = unsafe {\n-    FOO2 = 5;\n+static mut FOO: u32 = 42;\n+static BOO: () = unsafe {\n+    FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n };\n \n fn main() {}"}, {"sha": "ca652c9df32adb2c1f6869e2fcfc35d5118dbdca", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -1,8 +1,8 @@\n error: cannot mutate statics in the initializer of another static\n-  --> $DIR/assign-to-static-within-other-static.rs:32:5\n+  --> $DIR/assign-to-static-within-other-static.rs:21:5\n    |\n-LL |     FOO2 = 5;\n-   |     ^^^^^^^^\n+LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+   |     ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bf400fde365bea419f99a853a2ecb2781f179c05", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -14,5 +14,6 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n+                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n fn main() {}"}, {"sha": "94a90d92d3e77a43b0af0e2223b8fc70a1586fee", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0017.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0017.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                            ^\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0017.rs:17:38\n+  --> $DIR/E0017.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "3203798c70958de0538b45e5116264ab86da45d4", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -14,6 +14,7 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n+                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n \n fn main() {}"}, {"sha": "46efda9147b6d5b686049e7cb7bea7e353504e90", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -4,6 +4,12 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                              ^^^^^^ constants require immutable values\n \n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/E0388.rs:15:39\n+   |\n+LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+   |                                       ^^^^^^\n+\n error[E0017]: references in statics may only refer to immutable values\n   --> $DIR/E0388.rs:15:39\n    |\n@@ -17,12 +23,12 @@ LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                            ^\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0388.rs:17:38\n+  --> $DIR/E0388.rs:18:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "191f09b54ee7324a334877e8dc4405af6586dd81", "filename": "src/test/ui/write-to-static-mut-in-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.rs?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -12,10 +12,10 @@\n \n pub static mut A: u32 = 0;\n pub static mut B: () = unsafe { A = 1; };\n-//~^ ERROR statements in statics are unstable\n+//~^ ERROR cannot mutate statics in the initializer of another static\n \n pub static mut C: u32 = unsafe { C = 1; 0 };\n-//~^ ERROR statements in statics are unstable\n+//~^ ERROR cannot mutate statics in the initializer of another static\n \n pub static D: u32 = D;\n "}, {"sha": "673a71b4642f39028ae47e1a13b093819a9fc8ef", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59eff14120a067d04832142c8198f0132db2acb0/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=59eff14120a067d04832142c8198f0132db2acb0", "patch": "@@ -1,19 +1,14 @@\n-error[E0658]: statements in statics are unstable (see issue #48821)\n+error: cannot mutate statics in the initializer of another static\n   --> $DIR/write-to-static-mut-in-static.rs:14:33\n    |\n LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error[E0658]: statements in statics are unstable (see issue #48821)\n+error: cannot mutate statics in the initializer of another static\n   --> $DIR/write-to-static-mut-in-static.rs:17:34\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}