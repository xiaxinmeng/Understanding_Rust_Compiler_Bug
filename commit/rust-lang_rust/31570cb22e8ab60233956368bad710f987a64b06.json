{"sha": "31570cb22e8ab60233956368bad710f987a64b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTcwY2IyMmU4YWI2MDIzMzk1NjM2OGJhZDcxMGY5ODdhNjRiMDY=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-04T05:24:33Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-04T21:36:56Z"}, "message": "librustc: Don't create &[T] slices with NULL as the ptr.", "tree": {"sha": "c2dd21e1205201f95131ff4aa417c983ac84590d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2dd21e1205201f95131ff4aa417c983ac84590d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31570cb22e8ab60233956368bad710f987a64b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31570cb22e8ab60233956368bad710f987a64b06", "html_url": "https://github.com/rust-lang/rust/commit/31570cb22e8ab60233956368bad710f987a64b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31570cb22e8ab60233956368bad710f987a64b06/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e646188f66e40781131940d3b4d74a94cb2b10bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e646188f66e40781131940d3b4d74a94cb2b10bf", "html_url": "https://github.com/rust-lang/rust/commit/e646188f66e40781131940d3b4d74a94cb2b10bf"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "a284ef402575d3f08309c683700618a6f50a229a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/31570cb22e8ab60233956368bad710f987a64b06/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31570cb22e8ab60233956368bad710f987a64b06/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=31570cb22e8ab60233956368bad710f987a64b06", "patch": "@@ -27,6 +27,10 @@ use {Collection, Mutable};\n use slice::{MutableOrdVector, MutableVectorAllocating, CloneableVector};\n use slice::{Items, MutItems};\n \n+\n+#[doc(hidden)]\n+pub static PTR_MARKER: u8 = 0;\n+\n /// An owned, growable vector.\n ///\n /// # Examples\n@@ -71,7 +75,13 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn new() -> Vec<T> {\n-        Vec { len: 0, cap: 0, ptr: 0 as *mut T }\n+        // If we have a 0-sized vector, then the base pointer should not be NULL\n+        // because an iterator over the slice will attempt to yield the base\n+        // pointer as the first element in the vector, but this will end up\n+        // being Some(NULL) which is optimized to None. So instead we set ptr\n+        // to some arbitrary non-null value which is fine since we never call\n+        // deallocate on the ptr if cap is 0.\n+        Vec { len: 0, cap: 0, ptr: &PTR_MARKER as *const _ as *mut T }\n     }\n \n     /// Constructs a new, empty `Vec` with the specified capacity.\n@@ -88,7 +98,7 @@ impl<T> Vec<T> {\n     #[inline]\n     pub fn with_capacity(capacity: uint) -> Vec<T> {\n         if mem::size_of::<T>() == 0 {\n-            Vec { len: 0, cap: uint::MAX, ptr: 0 as *mut T }\n+            Vec { len: 0, cap: uint::MAX, ptr: &PTR_MARKER as *const _ as *mut T }\n         } else if capacity == 0 {\n             Vec::new()\n         } else {\n@@ -1206,15 +1216,7 @@ impl<T> Vec<T> {\n     /// would also make any pointers to it invalid.\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n-        // If we have a 0-sized vector, then the base pointer should not be NULL\n-        // because an iterator over the slice will attempt to yield the base\n-        // pointer as the first element in the vector, but this will end up\n-        // being Some(NULL) which is optimized to None.\n-        if mem::size_of::<T>() == 0 {\n-            1 as *const T\n-        } else {\n-            self.ptr as *const T\n-        }\n+        self.ptr as *const T\n     }\n \n     /// Returns a mutable unsafe pointer to the vector's buffer.\n@@ -1226,12 +1228,7 @@ impl<T> Vec<T> {\n     /// would also make any pointers to it invalid.\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n-        // see above for the 0-size check\n-        if mem::size_of::<T>() == 0 {\n-            1 as *mut T\n-        } else {\n-            self.ptr\n-        }\n+        self.ptr\n     }\n \n     /// Retains only the elements specified by the predicate."}, {"sha": "19d7d6c6a0091472d94a075a3d9f252fbd0f0c21", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31570cb22e8ab60233956368bad710f987a64b06/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31570cb22e8ab60233956368bad710f987a64b06/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=31570cb22e8ab60233956368bad710f987a64b06", "patch": "@@ -155,8 +155,9 @@ pub fn trans_slice_vstore<'a>(\n     let llcount = C_uint(ccx, count);\n     let llfixed;\n     if count == 0 {\n-        // Zero-length array: just use NULL as the data pointer\n-        llfixed = C_null(vt.llunit_ty.ptr_to());\n+        // Just create a zero-sized alloca to preserve\n+        // the non-null invariant of the inner slice ptr\n+        llfixed = base::arrayalloca(bcx, vt.llunit_ty, llcount);\n     } else {\n         // Make a fixed-length backing array and allocate it on the stack.\n         llfixed = base::arrayalloca(bcx, vt.llunit_ty, llcount);"}]}