{"sha": "eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzBkNTZkMzcxMWU2NDk0ZTRmNGRkZGY4ZTFhZjY0ZTQ5MmZhMWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-08T07:43:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-08T07:43:47Z"}, "message": "Rollup merge of #56599 - dlrobertson:fix_va_arg, r=eddyb\n\ncodegen: Fix va_list - aarch64 iOS/Windows\n\n## Summary\n\nFix code generated for `VaList` on Aarch64 iOS/Windows.\n\n## Details\n\nAccording to the [Apple - ARM64 Function Calling Conventions]:\n\n> ... the type va_list is an alias for char * rather than for the struct\n> type specified in the generic PCS.\n\nThe current implementation uses the generic Aarch64 structure for `VaList`\nfor Aarch64 iOS. Switch to using the `char *` variant of the `VaList`\nand use the corresponding `emit_ptr_va_arg` for the `va_arg` intrinsic.\n\nWindows always uses the `char *` variant of the `VaList`. Update the `va_arg`\nintrinsic to use `emit_ptr_va_arg`.\n\n[Apple - ARM64 Function Calling Conventions]: https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html", "tree": {"sha": "2d4efe625b99d6189c9d8cd9d96e0c8a612ea773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d4efe625b99d6189c9d8cd9d96e0c8a612ea773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcC3YzCRBK7hj4Ov3rIwAAdHIIAK5KwLtSGNr0sD3v7OpD1k4S\nK9dA5hP7yWf53REm/9RIe5JoF3quGPWJIwQRm5K8HHd/KVl8O+kMg02WldjVt1OG\ngIMKHPVc8BGJso3kGrZ748smhML0fbaPgp+7jKa8LJ1NdqojMAzMTcwoWzxofj3d\nKtXLTVwygJkmy2aLoCYoEQvBpCr8xb82DhF2HNaMZvm0qmaEkEcs4pw6/G4pck3Y\n8DY4vTDZnRr4BbKFnwI3JTVcaz6ayFaePLjL6MACq9pBFxe9tmAI93W5WaiXKpHs\n0LulgxxE4ItLYmtNZsxF9SaZJQ/3oKQhBLUO2tqEctNioiU8XXOM70CSJob4Ze0=\n=k7mu\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d4efe625b99d6189c9d8cd9d96e0c8a612ea773\nparent 253c448886da3eda55bef7bd68245f7d72c2e3b0\nparent 3dfd8f7a64067d8b348ba597db10a06e2eccb773\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544255027 +0100\ncommitter GitHub <noreply@github.com> 1544255027 +0100\n\nRollup merge of #56599 - dlrobertson:fix_va_arg, r=eddyb\n\ncodegen: Fix va_list - aarch64 iOS/Windows\n\n## Summary\n\nFix code generated for `VaList` on Aarch64 iOS/Windows.\n\n## Details\n\nAccording to the [Apple - ARM64 Function Calling Conventions]:\n\n> ... the type va_list is an alias for char * rather than for the struct\n> type specified in the generic PCS.\n\nThe current implementation uses the generic Aarch64 structure for `VaList`\nfor Aarch64 iOS. Switch to using the `char *` variant of the `VaList`\nand use the corresponding `emit_ptr_va_arg` for the `va_arg` intrinsic.\n\nWindows always uses the `char *` variant of the `VaList`. Update the `va_arg`\nintrinsic to use `emit_ptr_va_arg`.\n\n[Apple - ARM64 Function Calling Conventions]: https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "html_url": "https://github.com/rust-lang/rust/commit/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253c448886da3eda55bef7bd68245f7d72c2e3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/253c448886da3eda55bef7bd68245f7d72c2e3b0", "html_url": "https://github.com/rust-lang/rust/commit/253c448886da3eda55bef7bd68245f7d72c2e3b0"}, {"sha": "3dfd8f7a64067d8b348ba597db10a06e2eccb773", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfd8f7a64067d8b348ba597db10a06e2eccb773", "html_url": "https://github.com/rust-lang/rust/commit/3dfd8f7a64067d8b348ba597db10a06e2eccb773"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "d7a112eb90df84b124718b6b5182a903b6ef579c", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "patch": "@@ -45,6 +45,7 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n               not(target_arch = \"x86_64\")),\n+          all(target_arch = \"aarch4\", target_os = \"ios\"),\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -192,6 +193,7 @@ impl<'a> VaList<'a> {\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n                       not(target_arch = \"x86_64\")),\n+                  all(target_arch = \"aarch4\", target_os = \"ios\"),\n                   windows))]\n         let mut ap = va_copy(self);\n         #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),"}, {"sha": "1e5bb03ddb12b9387622a1ac32ba2bc4e314b9fe", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb30d56d3711e6494e4f4dddf8e1af64e492fa1a/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=eb30d56d3711e6494e4f4dddf8e1af64e492fa1a", "patch": "@@ -105,13 +105,30 @@ pub(super) fn emit_va_arg(\n ) -> &'ll Value {\n     // Determine the va_arg implementation to use. The LLVM va_arg instruction\n     // is lacking in some instances, so we should only use it as a fallback.\n+    let target = &bx.cx.tcx.sess.target.target;\n     let arch = &bx.cx.tcx.sess.target.target.arch;\n-    match (&**arch,\n-           bx.cx.tcx.sess.target.target.options.is_like_windows) {\n+    match (&**arch, target.options.is_like_windows) {\n+        // Windows x86\n         (\"x86\", true) => {\n             emit_ptr_va_arg(bx, addr, target_ty, false,\n                             Align::from_bytes(4).unwrap(), false)\n         }\n+        // Generic x86\n+        (\"x86\", _) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(4).unwrap(), true)\n+        }\n+        // Windows Aarch64\n+        (\"aarch4\", true) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), false)\n+        }\n+        // iOS Aarch64\n+        (\"aarch4\", _) if target.target_os == \"ios\" => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), true)\n+        }\n+        // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect = if target_ty_size > 8 || !target_ty_size.is_power_of_two() {\n@@ -122,15 +139,14 @@ pub(super) fn emit_va_arg(\n             emit_ptr_va_arg(bx, addr, target_ty, indirect,\n                             Align::from_bytes(8).unwrap(), false)\n         }\n-        (\"x86\", false) => {\n-            emit_ptr_va_arg(bx, addr, target_ty, false,\n-                            Align::from_bytes(4).unwrap(), true)\n-        }\n+        // For all other architecture/OS combinations fall back to using\n+        // the LLVM va_arg instruction.\n+        // https://llvm.org/docs/LangRef.html#va-arg-instruction\n         _ => {\n-            let va_list = if (bx.tcx().sess.target.target.arch == \"aarch64\" ||\n-                              bx.tcx().sess.target.target.arch == \"x86_64\" ||\n-                              bx.tcx().sess.target.target.arch == \"powerpc\") &&\n-                             !bx.tcx().sess.target.target.options.is_like_windows {\n+            let va_list = if (target.arch == \"aarch64\" ||\n+                              target.arch == \"x86_64\" ||\n+                              target.arch == \"powerpc\") &&\n+                             !target.options.is_like_windows {\n                 bx.load(addr.immediate(), bx.tcx().data_layout.pointer_align.abi)\n             } else {\n                 addr.immediate()"}]}