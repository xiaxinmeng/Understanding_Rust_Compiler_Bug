{"sha": "cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "node_id": "C_kwDOAAsO6NoAKGNmYWQ4ODI3NDVmMDQyNWYwZDZkZjQ0ZmExZjIyZjdmOWEyYTI1MDk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T08:17:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T08:23:07Z"}, "message": "fix: Fix `trait_impls_in_deps_query` being called directly instead of as a query", "tree": {"sha": "7e492d6ced30d19735b663c7b7942cadfc52663d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e492d6ced30d19735b663c7b7942cadfc52663d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "html_url": "https://github.com/rust-lang/rust/commit/cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84544134f6e2e1f53a9ce3f821dbe7a70f924145", "url": "https://api.github.com/repos/rust-lang/rust/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "html_url": "https://github.com/rust-lang/rust/commit/84544134f6e2e1f53a9ce3f821dbe7a70f924145"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "b385b1cafaefd09f3db05d293cb88fb0737e1f6b", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "patch": "@@ -53,7 +53,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::lower::field_types_query)]\n     fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Binders<Ty>>>;\n \n-    #[salsa::invoke(crate::callable_item_sig)]\n+    #[salsa::invoke(crate::lower::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDefId) -> PolyFnSig;\n \n     #[salsa::invoke(crate::lower::return_type_impl_traits)]"}, {"sha": "d7fc90bda1aa8982da781b11a527ef41e421a475", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "patch": "@@ -52,8 +52,8 @@ pub use infer::{\n };\n pub use interner::Interner;\n pub use lower::{\n-    associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n-    TyDefId, TyLoweringContext, ValueTyDefId,\n+    associated_type_shorthand_candidates, CallableDefId, ImplTraitLoweringMode, TyDefId,\n+    TyLoweringContext, ValueTyDefId,\n };\n pub use mapping::{\n     from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id, from_placeholder_idx,"}, {"sha": "59d390794067af4c9877ed2dc1ff458bf6c9667c", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "patch": "@@ -1033,7 +1033,7 @@ fn count_impl_traits(type_ref: &TypeRef) -> usize {\n }\n \n /// Build the signature of a callable item (function, struct or enum variant).\n-pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDefId) -> PolyFnSig {\n+pub(crate) fn callable_item_sig(db: &dyn HirDatabase, def: CallableDefId) -> PolyFnSig {\n     match def {\n         CallableDefId::FunctionId(f) => fn_sig_for_fn(db, f),\n         CallableDefId::StructId(s) => fn_sig_for_struct_constructor(db, s),"}, {"sha": "7e1c45f57acd93c236638db24b3dba58fcc6ad2d", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad882745f0425f0d6df44fa1f22f7f9a2a2509/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=cfad882745f0425f0d6df44fa1f22f7f9a2a2509", "patch": "@@ -137,7 +137,7 @@ pub struct TraitImpls {\n \n impl TraitImpls {\n     pub(crate) fn trait_impls_in_crate_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = profile::span(\"trait_impls_in_crate_query\");\n+        let _p = profile::span(\"trait_impls_in_crate_query\").detail(|| format!(\"{krate:?}\"));\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n@@ -162,7 +162,7 @@ impl TraitImpls {\n     }\n \n     pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = profile::span(\"trait_impls_in_deps_query\");\n+        let _p = profile::span(\"trait_impls_in_deps_query\").detail(|| format!(\"{krate:?}\"));\n         let crate_graph = db.crate_graph();\n         let mut res = Self { map: FxHashMap::default() };\n \n@@ -214,8 +214,7 @@ impl TraitImpls {\n         for (trait_, other_map) in &other.map {\n             let map = self.map.entry(*trait_).or_default();\n             for (fp, impls) in other_map {\n-                let vec = map.entry(*fp).or_default();\n-                vec.extend(impls);\n+                map.entry(*fp).or_default().extend(impls);\n             }\n         }\n     }\n@@ -584,7 +583,7 @@ pub fn lookup_impl_method(\n     name: &Name,\n ) -> Option<FunctionId> {\n     let self_ty_fp = TyFingerprint::for_trait_impl(self_ty)?;\n-    let trait_impls = TraitImpls::trait_impls_in_deps_query(db, env.krate);\n+    let trait_impls = db.trait_impls_in_deps(env.krate);\n     let impls = trait_impls.for_trait_and_self_ty(trait_, self_ty_fp);\n     let mut table = InferenceTable::new(db, env.clone());\n     find_matching_impl(impls, &mut table, &self_ty).and_then(|data| {"}]}