{"sha": "b9cef6984b606705f42adf9587f4f1c3babf4d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5Y2VmNjk4NGI2MDY3MDVmNDJhZGY5NTg3ZjRmMWMzYmFiZjRkNGQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-22T00:04:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-01T22:01:02Z"}, "message": "Simplify various `Symbol` use points.\n\nIncluding removing a bunch of unnecessary `.as_str()` calls, and a bunch\nof unnecessary sigils.", "tree": {"sha": "361f6ab139c3f9fd37c3a8bf7263ac5937ddb82f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361f6ab139c3f9fd37c3a8bf7263ac5937ddb82f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9cef6984b606705f42adf9587f4f1c3babf4d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cef6984b606705f42adf9587f4f1c3babf4d4d", "html_url": "https://github.com/rust-lang/rust/commit/b9cef6984b606705f42adf9587f4f1c3babf4d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9cef6984b606705f42adf9587f4f1c3babf4d4d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc7084f7e1be9da93bb014e05f19a80ff6fa188", "html_url": "https://github.com/rust-lang/rust/commit/5bc7084f7e1be9da93bb014e05f19a80ff6fa188"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "3cc5c001300559023d518b7070a69f199b061dc2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -3423,7 +3423,7 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n         ExprKind::Call(ref func, _) => {\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.kind {\n                 if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.kind {\n-                    let new_call = segment.ident.as_str() == \"new\";\n+                    let new_call = segment.ident.name == sym::new;\n                     return is_range_path(&path) && is_lit(sess, &expr.span) && new_call;\n                 }\n             }"}, {"sha": "a54635c3d51a3189a63e0706cbc1d7f541093ceb", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -486,7 +486,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n         if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n-            let cgu_name = &cgu_name.as_str()[..];\n+            let cgu_name = &cgu_name.as_str();\n             Symbol::intern(&CodegenUnit::mangle_name(cgu_name))\n         }\n     }"}, {"sha": "184bbe0842b928457db270acb96266790c558734", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -1130,7 +1130,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let restrict_msg = \"consider further restricting this bound\";\n                     let param_name = self_ty.to_string();\n                     for param in generics.params.iter().filter(|p| {\n-                        &param_name == std::convert::AsRef::<str>::as_ref(&p.name.ident().as_str())\n+                        p.name.ident().as_str() == param_name\n                     }) {\n                         if param_name.starts_with(\"impl \") {\n                             // `impl Trait` in argument:"}, {"sha": "6f4e7d0f0caf5a00572dc174d9843fa47964781c", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -314,7 +314,7 @@ pub fn from_fn_attrs(\n             codegen_fn_attrs.target_features\n                 .iter()\n                 .map(|f| {\n-                    let feature = &*f.as_str();\n+                    let feature = &f.as_str();\n                     format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n                 })\n         )"}, {"sha": "482bcf2aa5835ca1d47ee7c535c81a5e1847ae6a", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -34,11 +34,11 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n     });\n \n     let namespace_name = match def_key.disambiguated_data.data {\n-        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_symbol().as_str()\n+        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate),\n+        data => data.as_symbol()\n     };\n \n-    let namespace_name = SmallCStr::new(&namespace_name);\n+    let namespace_name = SmallCStr::new(&namespace_name.as_str());\n \n     let scope = unsafe {\n         llvm::LLVMRustDIBuilderCreateNameSpace("}, {"sha": "35b62603b076afb3e88059184115250200086d67", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -129,9 +129,9 @@ fn reachable_non_generics_provider(\n                 //\n                 // In general though we won't link right if these\n                 // symbols are stripped, and LTO currently strips them.\n-                if &*name == \"rust_eh_personality\" ||\n-                   &*name == \"rust_eh_register_frames\" ||\n-                   &*name == \"rust_eh_unregister_frames\" {\n+                if name == \"rust_eh_personality\" ||\n+                   name == \"rust_eh_register_frames\" ||\n+                   name == \"rust_eh_unregister_frames\" {\n                     SymbolExportLevel::C\n                 } else {\n                     SymbolExportLevel::Rust"}, {"sha": "66e1b6d949ef7254a7f87615a350b926b0df9ca8", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -121,9 +121,10 @@ fn get_symbol_hash<'tcx>(\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {\n-            (&tcx.original_crate_name(instantiating_crate).as_str()[..])\n+            tcx.original_crate_name(instantiating_crate).as_str()\n+                .hash_stable(&mut hcx, &mut hasher);\n+            tcx.crate_disambiguator(instantiating_crate)\n                 .hash_stable(&mut hcx, &mut hasher);\n-            (&tcx.crate_disambiguator(instantiating_crate)).hash_stable(&mut hcx, &mut hasher);\n         }\n \n         // We want to avoid accidental collision between different types of instances."}, {"sha": "483b515f2ba4ddfa1bdb2f250795e2ba3b69c44b", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -67,7 +67,7 @@ impl AssertModuleSource<'tcx> {\n         } else if attr.check_name(ATTR_PARTITION_CODEGENED) {\n             (CguReuse::No, ComparisonKind::Exact)\n         } else if attr.check_name(ATTR_EXPECTED_CGU_REUSE) {\n-            match &self.field(attr, sym::kind).as_str()[..] {\n+            match &*self.field(attr, sym::kind).as_str() {\n                 \"no\" => (CguReuse::No, ComparisonKind::Exact),\n                 \"pre-lto\" => (CguReuse::PreLto, ComparisonKind::Exact),\n                 \"post-lto\" => (CguReuse::PostLto, ComparisonKind::Exact),"}, {"sha": "ea156a94ea17be34cf88a0249688d2d1057f0220", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -303,7 +303,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(LABEL) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return Some(self.resolve_labels(&item, value.as_str().as_ref()));\n+                return Some(self.resolve_labels(&item, &value.as_str()));\n             }\n         }\n         None\n@@ -314,7 +314,7 @@ impl DirtyCleanVisitor<'tcx> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(EXCEPT) {\n                 let value = expect_associated_value(self.tcx, &item);\n-                return self.resolve_labels(&item, value.as_str().as_ref());\n+                return self.resolve_labels(&item, &value.as_str());\n             }\n         }\n         // if no `label` or `except` is given, only the node's group are asserted"}, {"sha": "30d68fd0bfcb14cc416f1a6a6f0995a719595eb5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -1476,14 +1476,12 @@ impl KeywordIdents {\n         let mut lint = cx.struct_span_lint(\n             KEYWORD_IDENTS,\n             ident.span,\n-            &format!(\"`{}` is a keyword in the {} edition\",\n-                     ident.as_str(),\n-                     next_edition),\n+            &format!(\"`{}` is a keyword in the {} edition\", ident, next_edition),\n         );\n         lint.span_suggestion(\n             ident.span,\n             \"you can use a raw identifier to stay compatible\",\n-            format!(\"r#{}\", ident.as_str()),\n+            format!(\"r#{}\", ident),\n             Applicability::MachineApplicable,\n         );\n         lint.emit()"}, {"sha": "483b1a40e44d60152bbc677ef84fd9801ee4d243", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -121,7 +121,7 @@ impl<'a> CrateLoader<'a> {\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n             let source = &self.cstore.get_crate_data(cnum).source;\n-            if let Some(entry) = self.sess.opts.externs.get(&*name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 let found = entry.locations.iter().filter_map(|l| l.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();"}, {"sha": "c9de66a5c87262422bb8593cab060406f755508d", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -68,7 +68,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         Some(name) => name,\n                         None => continue, // skip like historical compilers\n                     };\n-                    lib.kind = match &kind.as_str()[..] {\n+                    lib.kind = match &*kind.as_str() {\n                         \"static\" => cstore::NativeStatic,\n                         \"static-nobundle\" => cstore::NativeStaticNobundle,\n                         \"dylib\" => cstore::NativeUnknown,"}, {"sha": "0913d743328a7934dbc299bea52198c14ab61699", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -974,7 +974,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n         let what_was_dropped = match self.describe_place(place.as_ref()) {\n-            Some(name) => format!(\"`{}`\", name.as_str()),\n+            Some(name) => format!(\"`{}`\", name),\n             None => String::from(\"temporary value\"),\n         };\n "}, {"sha": "f8aec4a369d05fbf4c62f01ceed539f81cb19daf", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -95,7 +95,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, bool> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = &*self.tcx.item_name(instance.def_id()).as_str();\n         match intrinsic_name {\n             \"caller_location\" => {\n                 let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());"}, {"sha": "7d5507168587b400dfa21731709ba75932d6d85c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -642,17 +642,17 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} is unsafe and requires unsafe function or block\", description)\n-                    .span_label(source_info.span, &description.as_str()[..])\n-                    .note(&details.as_str()[..])\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_hir_id) => {\n                 tcx.lint_node_note(SAFE_EXTERN_STATICS,\n                               lint_hir_id,\n                               source_info.span,\n                               &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                        (error E0133)\", &description.as_str()[..]),\n-                              &details.as_str()[..]);\n+                                        (error E0133)\", description),\n+                              &details.as_str());\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -662,8 +662,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                                   lint_hir_id,\n                                   source_info.span,\n                                   &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                            (error E0133)\", &description.as_str()[..]),\n-                                  &details.as_str()[..]);\n+                                            (error E0133)\", description),\n+                                  &details.as_str());\n                 }\n             }\n         }"}, {"sha": "518f23e23fe91fdc7a289223e938e38a8370af45", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -537,7 +537,7 @@ impl Qualif for IsNotPromotable {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!cx.tcx.is_const_fn(def_id));\n-                        match &cx.tcx.item_name(def_id).as_str()[..] {\n+                        match &*cx.tcx.item_name(def_id).as_str() {\n                             | \"size_of\"\n                             | \"min_align_of\"\n                             | \"needs_drop\"\n@@ -1476,7 +1476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                         Abi::RustIntrinsic |\n                         Abi::PlatformIntrinsic => {\n                             assert!(!self.tcx.is_const_fn(def_id));\n-                            match &self.tcx.item_name(def_id).as_str()[..] {\n+                            match &*self.tcx.item_name(def_id).as_str() {\n                                 // special intrinsic that can be called diretly without an intrinsic\n                                 // feature gate needs a language feature gate\n                                 \"transmute\" => {"}, {"sha": "da1fba2518ac77dc80bd8e303d7109dd0719738f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -402,7 +402,7 @@ fn check_terminator(\n ///\n /// Adding more intrinsics requires sign-off from @rust-lang/lang.\n fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    match &tcx.item_name(def_id).as_str()[..] {\n+    match &*tcx.item_name(def_id).as_str() {\n         | \"size_of\"\n         | \"min_align_of\"\n         | \"needs_drop\""}, {"sha": "038de870174b72a7a7b70bab15899f97e9451928", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -1876,7 +1876,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                     None\n                                 }\n                             });\n-                            find_best_match_for_name(names, &*ident.as_str(), None)\n+                            find_best_match_for_name(names, &ident.as_str(), None)\n                         });\n                         self.r.record_partial_res(expr.id, PartialRes::new(Res::Err));\n                         self.r.report_error("}, {"sha": "2961d80e7763972b6d566bf1cd1b24b6280f77bd", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }) = parent {\n                 if let Ok(src) = cm.span_to_snippet(sp) {\n                     for field in fields {\n-                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n+                        if field.ident.as_str() == src && field.is_shorthand {\n                             return true;\n                         }\n                     }\n@@ -409,13 +409,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut sugg_sp = sp;\n                     if let hir::ExprKind::MethodCall(segment, _sp, args) = &expr.kind {\n                         let clone_trait = self.tcx.lang_items().clone_trait().unwrap();\n-                        if let ([arg], Some(true), \"clone\") = (\n+                        if let ([arg], Some(true), sym::clone) = (\n                             &args[..],\n                             self.tables.borrow().type_dependent_def_id(expr.hir_id).map(|did| {\n                                 let ai = self.tcx.associated_item(did);\n                                 ai.container == ty::TraitContainer(clone_trait)\n                             }),\n-                            &segment.ident.as_str()[..],\n+                            segment.ident.name,\n                         ) {\n                             // If this expression had a clone call when suggesting borrowing\n                             // we want to suggest removing it because it'd now be unecessary."}, {"sha": "b7b7861ebef3eb8b7473f9fb146397d65e6761f8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -835,11 +835,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     sp,\n                                     &message(format!(\n                                         \"restrict type parameter `{}` with\",\n-                                        param.name.ident().as_str(),\n+                                        param.name.ident(),\n                                     )),\n                                     candidates.iter().map(|t| format!(\n                                         \"{}{} {}{}\",\n-                                        param.name.ident().as_str(),\n+                                        param.name.ident(),\n                                         if impl_trait { \" +\" } else { \":\" },\n                                         self.tcx.def_path_str(t.def_id),\n                                         if has_bounds.is_some() { \" + \"} else { \"\" },"}, {"sha": "f3f4abf01ebdd3b5d9428f22a082de4189477143", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n \n                     // we don't want to throw `E0027` in case we have thrown `E0026` for them\n-                    unmentioned_fields.retain(|&x| x.as_str() != suggested_name.as_str());\n+                    unmentioned_fields.retain(|&x| x.name != suggested_name);\n                 }\n             }\n         }"}, {"sha": "b6c0b0d09fdf36d93f94b35f10acf17b5253dfd9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -2404,7 +2404,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrinsic_operation_unsafety(&*tcx.item_name(def_id).as_str())\n+        intrinsic_operation_unsafety(&tcx.item_name(def_id).as_str())\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "09f4873967ed52df4ad4b954fa9606a3f9b31b49", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -404,7 +404,7 @@ impl<'a> fmt::Display for Html<'a> {\n                 if !human_readable.is_empty() {\n                     fmt.write_str(human_readable)\n                 } else if let Some(v) = value {\n-                    write!(fmt, \"<code>{}=\\\"{}\\\"</code>\", Escape(n), Escape(&*v.as_str()))\n+                    write!(fmt, \"<code>{}=\\\"{}\\\"</code>\", Escape(n), Escape(&v.as_str()))\n                 } else {\n                     write!(fmt, \"<code>{}</code>\", Escape(n))\n                 }"}, {"sha": "e7f7615525292c7cc2d97c00a4230953aa79cb3a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -3704,7 +3704,7 @@ fn qpath_to_string(p: &hir::QPath) -> String {\n             s.push_str(\"::\");\n         }\n         if seg.ident.name != kw::PathRoot {\n-            s.push_str(&*seg.ident.as_str());\n+            s.push_str(&seg.ident.as_str());\n         }\n     }\n     s"}, {"sha": "29f0b99d8ee69608b2a78d4f2ce339ba35257ad9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -2964,7 +2964,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     if attr.is_word() {\n         Some(path)\n     } else if let Some(v) = attr.value_str() {\n-        Some(format!(\"{} = {:?}\", path, v.as_str()))\n+        Some(format!(\"{} = {:?}\", path, v))\n     } else if let Some(values) = attr.meta_item_list() {\n         let display: Vec<_> = values.iter().filter_map(|attr| {\n             attr.meta_item().and_then(|mi| render_attribute(mi))"}, {"sha": "8af38507b48d141e6df3c626e90306873013af3b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -90,7 +90,7 @@ impl fmt::Debug for Lifetime {\n \n impl fmt::Display for Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ident.name.as_str())\n+        write!(f, \"{}\", self.ident.name)\n     }\n }\n "}, {"sha": "4389dae2770ad98a094246c67524b921dd26de22", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -730,7 +730,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             if let Some(allowed) = allow_features.as_ref() {\n-                if allowed.iter().find(|&f| f == &name.as_str() as &str).is_none() {\n+                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n                     span_err!(span_handler, mi.span(), E0725,\n                               \"the feature `{}` is not in the list of allowed features\",\n                               name);"}, {"sha": "c42f4aa25cc96c9441fe0b4bdc21e620c7731a6b", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -134,9 +134,9 @@ impl LitKind {\n         let (kind, symbol, suffix) = match *self {\n             LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n                 // Don't re-intern unless the escaped string is different.\n-                let s: &str = &symbol.as_str();\n+                let s = symbol.as_str();\n                 let escaped = s.escape_default().to_string();\n-                let symbol = if escaped == *s { symbol } else { Symbol::intern(&escaped) };\n+                let symbol = if s == escaped { symbol } else { Symbol::intern(&escaped) };\n                 (token::Str, symbol, None)\n             }\n             LitKind::Str(symbol, ast::StrStyle::Raw(n)) => {"}, {"sha": "e80b1a7f60785fb163edd65b316f37561fe80ea8", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -229,7 +229,7 @@ impl<'a> Parser<'a> {\n         // `./<id>.rs` and `./<id>/mod.rs`.\n         let relative_prefix_string;\n         let relative_prefix = if let Some(ident) = relative {\n-            relative_prefix_string = format!(\"{}{}\", ident.as_str(), path::MAIN_SEPARATOR);\n+            relative_prefix_string = format!(\"{}{}\", ident, path::MAIN_SEPARATOR);\n             &relative_prefix_string\n         } else {\n             \"\""}, {"sha": "6fb48bf81735b398010dbe5fbd8a89c5827190b4", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -21,7 +21,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     };\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let e = match env::var(&*var.as_str()) {\n+    let e = match env::var(&var.as_str()) {\n         Err(..) => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));\n             cx.expr_path(cx.path_all(sp,"}, {"sha": "57b948858aa12e8c94288d471c684422bb0e00b1", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9cef6984b606705f42adf9587f4f1c3babf4d4d/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=b9cef6984b606705f42adf9587f4f1c3babf4d4d", "patch": "@@ -992,7 +992,7 @@ pub fn expand_preparsed_format_args(\n         vec![]\n     };\n \n-    let fmt_str = &*fmt_str.as_str();  // for the suggestions below\n+    let fmt_str = &fmt_str.as_str();  // for the suggestions below\n     let mut parser = parse::Parser::new(fmt_str, str_style, skips, append_newline);\n \n     let mut unverified_pieces = Vec::new();"}]}