{"sha": "3c1ca175d131011d87a9db0ffbb833b1d884f900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMWNhMTc1ZDEzMTAxMWQ4N2E5ZGIwZmZiYjgzM2IxZDg4NGY5MDA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-06T23:07:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-07T23:07:07Z"}, "message": "Require that types cannot implement both Drop and Copy.\n\nOpt-in built-in traits allowed one to explicitly implement both `Drop`\nand `Copy` for a type. This can theoretically make some sense, but the\ncurrent implementation means it is codegened totally incorrectly which\ncan lead to memory unsafety, so this feature is disabled for now.\n\nFixes #20126.", "tree": {"sha": "5ca5804f853f68a8614b5d737fc02f777101084a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca5804f853f68a8614b5d737fc02f777101084a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1ca175d131011d87a9db0ffbb833b1d884f900", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ca175d131011d87a9db0ffbb833b1d884f900", "html_url": "https://github.com/rust-lang/rust/commit/3c1ca175d131011d87a9db0ffbb833b1d884f900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1ca175d131011d87a9db0ffbb833b1d884f900/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "html_url": "https://github.com/rust-lang/rust/commit/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "22f5c5cdbcda41f45564e2f9e49b34a0a8f8f46e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3c1ca175d131011d87a9db0ffbb833b1d884f900", "patch": "@@ -6891,6 +6891,7 @@ pub enum CopyImplementationError {\n     FieldDoesNotImplementCopy(ast::Name),\n     VariantDoesNotImplementCopy(ast::Name),\n     TypeIsStructural,\n+    TypeHasDestructor,\n }\n \n pub fn can_type_implement_copy<'a,'tcx>(param_env: &ParameterEnvironment<'a, 'tcx>,\n@@ -6900,14 +6901,15 @@ pub fn can_type_implement_copy<'a,'tcx>(param_env: &ParameterEnvironment<'a, 'tc\n {\n     let tcx = param_env.tcx;\n \n-    match self_type.sty {\n+    let did = match self_type.sty {\n         ty::ty_struct(struct_did, substs) => {\n             let fields = ty::struct_fields(tcx, struct_did, substs);\n             for field in fields.iter() {\n                 if type_moves_by_default(param_env, span, field.mt.ty) {\n                     return Err(FieldDoesNotImplementCopy(field.name))\n                 }\n             }\n+            struct_did\n         }\n         ty::ty_enum(enum_did, substs) => {\n             let enum_variants = ty::enum_variants(tcx, enum_did);\n@@ -6920,8 +6922,13 @@ pub fn can_type_implement_copy<'a,'tcx>(param_env: &ParameterEnvironment<'a, 'tc\n                     }\n                 }\n             }\n+            enum_did\n         }\n         _ => return Err(TypeIsStructural),\n+    };\n+\n+    if ty::has_dtor(tcx, did) {\n+        return Err(TypeHasDestructor)\n     }\n \n     Ok(())"}, {"sha": "de1f1a3cd352afd7335cbf331c1dfcdb6d6df037", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=3c1ca175d131011d87a9db0ffbb833b1d884f900", "patch": "@@ -507,6 +507,11 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                   for this type; type is not a structure or \\\n                                   enumeration\")\n                 }\n+                Err(ty::TypeHasDestructor) => {\n+                    span_err!(tcx.sess, span, E0184,\n+                              \"the trait `Copy` may not be implemented for this type; \\\n+                               the type has a destructor\");\n+                }\n             }\n         }\n     }"}, {"sha": "c9e15b93ad4c5fa2dda4bbbdd97ff1bf408692b4", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3c1ca175d131011d87a9db0ffbb833b1d884f900", "patch": "@@ -157,5 +157,6 @@ register_diagnostics! {\n     E0180,\n     E0181,\n     E0182,\n-    E0183\n+    E0183,\n+    E0184\n }"}, {"sha": "d35157e26b2bdb9becb7a67ba0309e34acf05e8b", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=3c1ca175d131011d87a9db0ffbb833b1d884f900", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl Drop for int {\n+impl<'a> Drop for &'a mut int {\n     //~^ ERROR the Drop trait may only be implemented on structures\n     //~^^ ERROR cannot provide an extension implementation\n     fn drop(&mut self) {"}, {"sha": "17453bc677f2bc0a61004533b39c432f3f98b654", "filename": "src/test/compile-fail/exclusive-drop-and-copy.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1ca175d131011d87a9db0ffbb833b1d884f900/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs?ref=3c1ca175d131011d87a9db0ffbb833b1d884f900", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsafe_destructor)]\n+\n+// issue #20126\n+\n+#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+struct Bar<T>;\n+\n+#[unsafe_destructor]\n+impl<T> Drop for Bar<T> {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}]}