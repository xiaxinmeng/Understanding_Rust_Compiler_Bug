{"sha": "909a33d3b4035c29ceb9cd79da4191b32a5a4391", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOWEzM2QzYjQwMzVjMjljZWI5Y2Q3OWRhNDE5MWIzMmE1YTQzOTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T01:57:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T13:57:06Z"}, "message": "rustdoc: Implement `is_primitive` in terms of `primitive_type()`\n\nPreviously, they disagreed about what types were primitives.\n\nThis also fixes a bug where rustdoc would mark any type with a reference\nas a primitive.", "tree": {"sha": "e7da0fe5e3312fc6600b1233bf5a880a2bb6ff55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7da0fe5e3312fc6600b1233bf5a880a2bb6ff55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/909a33d3b4035c29ceb9cd79da4191b32a5a4391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/909a33d3b4035c29ceb9cd79da4191b32a5a4391", "html_url": "https://github.com/rust-lang/rust/commit/909a33d3b4035c29ceb9cd79da4191b32a5a4391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/909a33d3b4035c29ceb9cd79da4191b32a5a4391/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f4afdf0255600306bf67432da722c7b5d2cbf82", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f4afdf0255600306bf67432da722c7b5d2cbf82", "html_url": "https://github.com/rust-lang/rust/commit/7f4afdf0255600306bf67432da722c7b5d2cbf82"}], "stats": {"total": 9, "additions": 1, "deletions": 8}, "files": [{"sha": "30dc2d1e4a264f619bc00cfb88ad676dabd3aac7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/909a33d3b4035c29ceb9cd79da4191b32a5a4391/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909a33d3b4035c29ceb9cd79da4191b32a5a4391/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=909a33d3b4035c29ceb9cd79da4191b32a5a4391", "patch": "@@ -1413,7 +1413,6 @@ impl Type {\n                 }\n             }\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n-            BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n             Never => Some(PrimitiveType::Never),\n             _ => None,\n@@ -1472,13 +1471,7 @@ impl Type {\n     }\n \n     crate fn is_primitive(&self) -> bool {\n-        match self {\n-            Self::Primitive(_) => true,\n-            Self::BorrowedRef { ref type_, .. } | Self::RawPointer(_, ref type_) => {\n-                type_.is_primitive()\n-            }\n-            _ => false,\n-        }\n+        self.primitive_type().is_some()\n     }\n \n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {"}]}