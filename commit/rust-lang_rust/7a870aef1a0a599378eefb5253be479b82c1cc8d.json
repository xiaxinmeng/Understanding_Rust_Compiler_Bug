{"sha": "7a870aef1a0a599378eefb5253be479b82c1cc8d", "node_id": "C_kwDOAAsO6NoAKDdhODcwYWVmMWEwYTU5OTM3OGVlZmI1MjUzYmU0NzliODJjMWNjOGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T15:47:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T15:47:00Z"}, "message": "Auto merge of #10432 - samueltardieu:issue-10430, r=Manishearth\n\nNew lint: detect `if` expressions with simple boolean assignments to the same target\n\nCloses #10430\n\nchangelog: [`needless_bool_assign`] new lint to detect simple boolean assignment to the same target in `if` branches", "tree": {"sha": "b78fcdebbf0065309e377c60bfea4bb879936530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78fcdebbf0065309e377c60bfea4bb879936530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a870aef1a0a599378eefb5253be479b82c1cc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a870aef1a0a599378eefb5253be479b82c1cc8d", "html_url": "https://github.com/rust-lang/rust/commit/7a870aef1a0a599378eefb5253be479b82c1cc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a870aef1a0a599378eefb5253be479b82c1cc8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797a7fed6792e9825ac24063682d7213530cd56b", "url": "https://api.github.com/repos/rust-lang/rust/commits/797a7fed6792e9825ac24063682d7213530cd56b", "html_url": "https://github.com/rust-lang/rust/commit/797a7fed6792e9825ac24063682d7213530cd56b"}, {"sha": "69da902f417547831009a4957037cd21b5aab678", "url": "https://api.github.com/repos/rust-lang/rust/commits/69da902f417547831009a4957037cd21b5aab678", "html_url": "https://github.com/rust-lang/rust/commit/69da902f417547831009a4957037cd21b5aab678"}], "stats": {"total": 204, "additions": 201, "deletions": 3}, "files": [{"sha": "b3a340d0cc83120c778c4bb6005589bbf158cba5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -4864,6 +4864,7 @@ Released 2018-09-13\n [`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n [`needless_bitwise_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bitwise_bool\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n+[`needless_bool_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool_assign\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n [`needless_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect"}, {"sha": "4aebd0b7d011f97e43569265ef0eb1354cf10115", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -446,6 +446,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE_INFO,\n     crate::needless_bool::BOOL_COMPARISON_INFO,\n     crate::needless_bool::NEEDLESS_BOOL_INFO,\n+    crate::needless_bool::NEEDLESS_BOOL_ASSIGN_INFO,\n     crate::needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE_INFO,\n     crate::needless_continue::NEEDLESS_CONTINUE_INFO,\n     crate::needless_for_each::NEEDLESS_FOR_EACH_INFO,"}, {"sha": "71281a0b40b0acb04f0eb2bffc63855b073cb7c9", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -3,10 +3,12 @@\n //! This lint is **warn** by default\n \n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n-use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_node, is_else_clause, is_expn_of, peel_blocks, peel_blocks_with_stmt};\n+use clippy_utils::{\n+    get_parent_node, is_else_clause, is_expn_of, peel_blocks, peel_blocks_with_stmt, span_extract_comment,\n+};\n+use clippy_utils::{higher, SpanlessEq};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Node, UnOp};\n@@ -77,7 +79,39 @@ declare_clippy_lint! {\n     \"comparing a variable to a boolean, e.g., `if x == true` or `if x != true`\"\n }\n \n-declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for expressions of the form `if c { x = true } else { x = false }`\n+    /// (or vice versa) and suggest assigning the variable directly from the\n+    /// condition.\n+    ///\n+    /// ### Why is this bad?\n+    /// Redundant code.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// # fn must_keep(x: i32, y: i32) -> bool { x == y }\n+    /// # let x = 32; let y = 10;\n+    /// # let mut skip: bool;\n+    /// if must_keep(x, y) {\n+    ///     skip = false;\n+    /// } else {\n+    ///     skip = true;\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// # fn must_keep(x: i32, y: i32) -> bool { x == y }\n+    /// # let x = 32; let y = 10;\n+    /// # let mut skip: bool;\n+    /// skip = !must_keep(x, y);\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub NEEDLESS_BOOL_ASSIGN,\n+    complexity,\n+    \"setting the same boolean variable in both branches of an if-statement\"\n+}\n+declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL, NEEDLESS_BOOL_ASSIGN]);\n \n fn condition_needs_parentheses(e: &Expr<'_>) -> bool {\n     let mut inner = e;\n@@ -173,6 +207,29 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                     _ => (),\n                 }\n             }\n+            if let Some((lhs_a, a)) = fetch_assign(then) &&\n+                let Some((lhs_b, b)) = fetch_assign(r#else) &&\n+                SpanlessEq::new(cx).eq_expr(lhs_a, lhs_b) &&\n+                span_extract_comment(cx.tcx.sess.source_map(), e.span).is_empty()\n+            {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let cond = Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability);\n+                let lhs = snippet_with_applicability(cx, lhs_a.span, \"..\", &mut applicability);\n+                let sugg = if a == b {\n+                    format!(\"{cond}; {lhs} = {a:?};\")\n+                } else {\n+                    format!(\"{lhs} = {};\", if a { cond } else { !cond })\n+                };\n+                span_lint_and_sugg(\n+                    cx,\n+                    NEEDLESS_BOOL_ASSIGN,\n+                    e.span,\n+                    \"this if-then-else expression assigns a bool literal\",\n+                    \"you can reduce it to\",\n+                    sugg,\n+                    applicability\n+                );\n+            }\n         }\n     }\n }\n@@ -376,3 +433,11 @@ fn fetch_bool_expr(expr: &Expr<'_>) -> Option<bool> {\n     }\n     None\n }\n+\n+fn fetch_assign<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, bool)> {\n+    if let ExprKind::Assign(lhs, rhs, _) = peel_blocks_with_stmt(expr).kind {\n+        fetch_bool_expr(rhs).map(|b| (lhs, b))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "3ed31d4d711fac4b0ce60d5e583cb3fa7b2553d3", "filename": "tests/ui/needless_bool_assign.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.fixed?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -0,0 +1,33 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::needless_bool_assign)]\n+\n+fn random() -> bool {\n+    true\n+}\n+\n+fn main() {\n+    struct Data {\n+        field: bool,\n+    };\n+    let mut a = Data { field: false };\n+    a.field = random() && random();\n+    a.field = !(random() && random());\n+    // Do not lint\u2026\n+    if random() {\n+        a.field = false;\n+    } else {\n+        // \u2026to avoid losing this comment\n+        a.field = true\n+    }\n+    // This one also triggers lint `clippy::if_same_then_else`\n+    // which does not suggest a rewrite.\n+    random(); a.field = true;\n+    let mut b = false;\n+    if random() {\n+        a.field = false;\n+    } else {\n+        b = true;\n+    }\n+}"}, {"sha": "efaeb67fa45de3ec84ce22d9292f95f565618a25", "filename": "tests/ui/needless_bool_assign.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.rs?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -0,0 +1,45 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::needless_bool_assign)]\n+\n+fn random() -> bool {\n+    true\n+}\n+\n+fn main() {\n+    struct Data {\n+        field: bool,\n+    };\n+    let mut a = Data { field: false };\n+    if random() && random() {\n+        a.field = true;\n+    } else {\n+        a.field = false\n+    }\n+    if random() && random() {\n+        a.field = false;\n+    } else {\n+        a.field = true\n+    }\n+    // Do not lint\u2026\n+    if random() {\n+        a.field = false;\n+    } else {\n+        // \u2026to avoid losing this comment\n+        a.field = true\n+    }\n+    // This one also triggers lint `clippy::if_same_then_else`\n+    // which does not suggest a rewrite.\n+    if random() {\n+        a.field = true;\n+    } else {\n+        a.field = true;\n+    }\n+    let mut b = false;\n+    if random() {\n+        a.field = false;\n+    } else {\n+        b = true;\n+    }\n+}"}, {"sha": "601bbed5493b9d64746df4c47fa9e16417607723", "filename": "tests/ui/needless_bool_assign.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a870aef1a0a599378eefb5253be479b82c1cc8d/tests%2Fui%2Fneedless_bool_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool_assign.stderr?ref=7a870aef1a0a599378eefb5253be479b82c1cc8d", "patch": "@@ -0,0 +1,53 @@\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:15:5\n+   |\n+LL | /     if random() && random() {\n+LL | |         a.field = true;\n+LL | |     } else {\n+LL | |         a.field = false\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `a.field = random() && random();`\n+   |\n+   = note: `-D clippy::needless-bool-assign` implied by `-D warnings`\n+\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:20:5\n+   |\n+LL | /     if random() && random() {\n+LL | |         a.field = false;\n+LL | |     } else {\n+LL | |         a.field = true\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `a.field = !(random() && random());`\n+\n+error: this if-then-else expression assigns a bool literal\n+  --> $DIR/needless_bool_assign.rs:34:5\n+   |\n+LL | /     if random() {\n+LL | |         a.field = true;\n+LL | |     } else {\n+LL | |         a.field = true;\n+LL | |     }\n+   | |_____^ help: you can reduce it to: `random(); a.field = true;`\n+\n+error: this `if` has identical blocks\n+  --> $DIR/needless_bool_assign.rs:34:17\n+   |\n+LL |       if random() {\n+   |  _________________^\n+LL | |         a.field = true;\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/needless_bool_assign.rs:36:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         a.field = true;\n+LL | |     }\n+   | |_____^\n+   = note: `#[deny(clippy::if_same_then_else)]` on by default\n+\n+error: aborting due to 4 previous errors\n+"}]}