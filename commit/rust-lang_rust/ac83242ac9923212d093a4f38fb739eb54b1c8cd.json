{"sha": "ac83242ac9923212d093a4f38fb739eb54b1c8cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODMyNDJhYzk5MjMyMTJkMDkzYTRmMzhmYjczOWViNTRiMWM4Y2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-31T00:19:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-31T00:19:37Z"}, "message": "test: Deny warnings in {core,collections}test\n\nHelp cleans up our build a bit and stays in line with the rest of our crates\ndenying warnings traditionally.", "tree": {"sha": "7a4c91606d31d9fde1d272ee67d1a15e60fd6bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4c91606d31d9fde1d272ee67d1a15e60fd6bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac83242ac9923212d093a4f38fb739eb54b1c8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac83242ac9923212d093a4f38fb739eb54b1c8cd", "html_url": "https://github.com/rust-lang/rust/commit/ac83242ac9923212d093a4f38fb739eb54b1c8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac83242ac9923212d093a4f38fb739eb54b1c8cd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "url": "https://api.github.com/repos/rust-lang/rust/commits/449e8bf3048d144fd5b82dd1a1a1060ff86b2877", "html_url": "https://github.com/rust-lang/rust/commit/449e8bf3048d144fd5b82dd1a1a1060ff86b2877"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "7f368f0205b922f1b45c56e3a2e627f3cbacd77b", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -379,6 +379,7 @@ fn test_clone() {\n }\n \n #[test]\n+#[allow(dead_code)]\n fn test_variance() {\n     use std::collections::btree_map::{Iter, IntoIter, Range, Keys, Values};\n "}, {"sha": "3928804a8ed1b8c82e1819263f79bc207fa87c21", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -256,6 +256,7 @@ fn test_recovery() {\n }\n \n #[test]\n+#[allow(dead_code)]\n fn test_variance() {\n     use std::collections::btree_set::{IntoIter, Iter, Range};\n "}, {"sha": "891ca22265e990b4aadd1d016588d9053c446831", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n #![feature(ascii)]\n #![feature(binary_heap_extras)]\n #![feature(box_syntax)]\n@@ -16,27 +18,20 @@\n #![feature(collections_bound)]\n #![feature(const_fn)]\n #![feature(fn_traits)]\n-#![feature(deque_extras)]\n-#![feature(drain)]\n #![feature(enumset)]\n-#![feature(into_cow)]\n #![feature(iter_arith)]\n #![feature(pattern)]\n #![feature(rand)]\n-#![feature(range_inclusive)]\n #![feature(rustc_private)]\n #![feature(set_recovery)]\n #![feature(slice_bytes)]\n-#![feature(slice_splits)]\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(str_escape)]\n-#![feature(str_match_indices)]\n #![feature(str_utf16)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(vec_push_all)]\n \n #[macro_use] extern crate log;\n "}, {"sha": "cde7fcaaf51a29d5a4e113908ebb25fca527c024", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -866,6 +866,7 @@ fn test_vec_default() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_bytes_set_memory() {\n     use std::slice::bytes::MutableByteVector;\n "}, {"sha": "158145af2bbef52f1b389eb07353c696792f6eb1", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -8,11 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::borrow::{IntoCow, Cow};\n+use std::borrow::Cow;\n use std::iter::repeat;\n \n use test::Bencher;\n \n+pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n+    fn into_cow(self) -> Cow<'a, B>;\n+}\n+\n+impl<'a> IntoCow<'a, str> for String {\n+    fn into_cow(self) -> Cow<'a, str> {\n+        Cow::Owned(self)\n+    }\n+}\n+\n+impl<'a> IntoCow<'a, str> for &'a str {\n+    fn into_cow(self) -> Cow<'a, str> {\n+        Cow::Borrowed(self)\n+    }\n+}\n+\n #[test]\n fn test_from_str() {\n   let owned: Option<::std::string::String> = \"string\".parse().ok();\n@@ -175,7 +191,7 @@ fn test_push_bytes() {\n     let mut s = String::from(\"ABC\");\n     unsafe {\n         let mv = s.as_mut_vec();\n-        mv.push_all(&[b'D']);\n+        mv.extend_from_slice(&[b'D']);\n     }\n     assert_eq!(s, \"ABCD\");\n }"}, {"sha": "b799be218e624cf7d98116c213647f50c9c48632", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -686,7 +686,7 @@ fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n \n     b.iter(|| {\n         let mut dst = dst.clone();\n-        dst.push_all(&src);\n+        dst.extend_from_slice(&src);\n         assert_eq!(dst.len(), dst_len + src_len);\n         assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n     });"}, {"sha": "2d3c05ea4ab14232d327e5597eddc022a75793b2", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use core::fmt::radix;\n \n #[test]\n fn test_format_int() {\n@@ -153,17 +152,22 @@ fn test_format_int_twos_complement() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_format_radix() {\n+    use core::fmt::radix;\n     assert!(format!(\"{:04}\", radix(3, 2)) == \"0011\");\n     assert!(format!(\"{}\", radix(55, 36)) == \"1j\");\n }\n \n #[test]\n #[should_panic]\n+#[allow(deprecated)]\n fn test_radix_base_too_large() {\n+    use core::fmt::radix;\n     let _ = radix(55, 37);\n }\n \n+#[allow(deprecated)]\n mod u32 {\n     use test::Bencher;\n     use core::fmt::radix;\n@@ -207,6 +211,7 @@ mod u32 {\n     }\n }\n \n+#[allow(deprecated)]\n mod i32 {\n     use test::Bencher;\n     use core::fmt::radix;"}, {"sha": "da9062b8a92ec307e5dc06a38888037cb903327a", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -607,15 +607,15 @@ fn test_count() {\n }\n \n #[test]\n-fn test_max_by() {\n+fn test_max_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n-    assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n+    assert_eq!(*xs.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n }\n \n #[test]\n-fn test_min_by() {\n+fn test_min_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n-    assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n+    assert_eq!(*xs.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n }\n \n #[test]\n@@ -961,18 +961,18 @@ fn bench_multiple_take(b: &mut Bencher) {\n fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n \n #[bench]\n-fn bench_max_by(b: &mut Bencher) {\n+fn bench_max_by_key(b: &mut Bencher) {\n     b.iter(|| {\n         let it = 0..100;\n-        it.max_by(|&x| scatter(x))\n+        it.max_by_key(|&x| scatter(x))\n     })\n }\n \n // http://www.reddit.com/r/rust/comments/31syce/using_iterators_to_find_the_index_of_the_min_or/\n #[bench]\n-fn bench_max_by2(b: &mut Bencher) {\n+fn bench_max_by_key2(b: &mut Bencher) {\n     fn max_index_iter(array: &[i32]) -> usize {\n-        array.iter().enumerate().max_by(|&(_, item)| item).unwrap().0\n+        array.iter().enumerate().max_by_key(|&(_, item)| item).unwrap().0\n     }\n \n     let mut data = vec![0i32; 1638];"}, {"sha": "f23ddea5cc99d187ee0f397ad967b3aa5553e48a", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -8,42 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n #![feature(as_unsafe_cell)]\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n #![feature(cell_extras)]\n #![feature(const_fn)]\n-#![feature(core)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n #![feature(decode_utf16)]\n #![feature(fixed_size_array)]\n #![feature(float_extras)]\n-#![feature(float_from_str_radix)]\n #![feature(flt2dec)]\n #![feature(fmt_radix)]\n #![feature(iter_arith)]\n #![feature(iter_arith)]\n-#![feature(iter_cmp)]\n-#![feature(iter_order)]\n #![feature(libc)]\n #![feature(nonzero)]\n-#![feature(num_bits_bytes)]\n #![feature(peekable_is_empty)]\n #![feature(ptr_as_ref)]\n #![feature(rand)]\n-#![feature(range_inclusive)]\n #![feature(raw)]\n-#![feature(slice_bytes)]\n #![feature(slice_patterns)]\n #![feature(step_by)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(clone_from_slice)]\n \n extern crate core;\n extern crate test;"}, {"sha": "afcf836ad10f520c7b1cef4d3e0886334db18c2d", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -14,6 +14,8 @@ mod tests {\n     use core::$T_i::*;\n     use core::isize;\n     use core::ops::{Shl, Shr, Not, BitXor, BitAnd, BitOr};\n+    use core::mem;\n+\n     use num;\n \n     #[test]\n@@ -85,9 +87,10 @@ mod tests {\n \n     #[test]\n     fn test_count_zeros() {\n-        assert!(A.count_zeros() == BITS as u32 - 3);\n-        assert!(B.count_zeros() == BITS as u32 - 2);\n-        assert!(C.count_zeros() == BITS as u32 - 5);\n+        let bits = mem::size_of::<$T>() * 8;\n+        assert!(A.count_zeros() == bits as u32 - 3);\n+        assert!(B.count_zeros() == bits as u32 - 2);\n+        assert!(C.count_zeros() == bits as u32 - 5);\n     }\n \n     #[test]"}, {"sha": "daa1cc3a7f4fb860b90335063f72bcbfefab31d8", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac83242ac9923212d093a4f38fb739eb54b1c8cd/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=ac83242ac9923212d093a4f38fb739eb54b1c8cd", "patch": "@@ -15,6 +15,7 @@ mod tests {\n     use num;\n     use core::ops::{BitOr, BitAnd, BitXor, Shl, Shr, Not};\n     use std::str::FromStr;\n+    use std::mem;\n \n     #[test]\n     fn test_overflows() {\n@@ -54,9 +55,10 @@ mod tests {\n \n     #[test]\n     fn test_count_zeros() {\n-        assert!(A.count_zeros() == BITS as u32 - 3);\n-        assert!(B.count_zeros() == BITS as u32 - 2);\n-        assert!(C.count_zeros() == BITS as u32 - 5);\n+        let bits = mem::size_of::<$T>() * 8;\n+        assert!(A.count_zeros() == bits as u32 - 3);\n+        assert!(B.count_zeros() == bits as u32 - 2);\n+        assert!(C.count_zeros() == bits as u32 - 5);\n     }\n \n     #[test]"}]}