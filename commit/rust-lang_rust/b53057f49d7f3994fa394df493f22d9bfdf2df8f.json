{"sha": "b53057f49d7f3994fa394df493f22d9bfdf2df8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzA1N2Y0OWQ3ZjM5OTRmYTM5NGRmNDkzZjIyZDliZmRmMmRmOGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-24T01:22:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-26T23:21:04Z"}, "message": "test: Remove uses of oldmap::HashMap", "tree": {"sha": "e384d0a8fd42a81caa0f7235a8be4346f03ea80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e384d0a8fd42a81caa0f7235a8be4346f03ea80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53057f49d7f3994fa394df493f22d9bfdf2df8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53057f49d7f3994fa394df493f22d9bfdf2df8f", "html_url": "https://github.com/rust-lang/rust/commit/b53057f49d7f3994fa394df493f22d9bfdf2df8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53057f49d7f3994fa394df493f22d9bfdf2df8f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17459d0bd355e550a06ee044de077bcd552e9cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/17459d0bd355e550a06ee044de077bcd552e9cc5", "html_url": "https://github.com/rust-lang/rust/commit/17459d0bd355e550a06ee044de077bcd552e9cc5"}], "stats": {"total": 204, "additions": 88, "deletions": 116}, "files": [{"sha": "fad72ee4eb3601ec7a9b533aa53c4cc1d68d75dd", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -13,11 +13,11 @@\n \n extern mod std;\n \n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearMap;\n \n-pub type header_map = HashMap<~str, @mut ~[@~str]>;\n+pub type header_map = LinearMap<~str, @mut ~[@~str]>;\n \n // the unused ty param is necessary so this gets monomorphized\n-pub fn request<T:Copy>(req: header_map) {\n-  let _x = copy *(copy *req.get(&~\"METHOD\"))[0u];\n+pub fn request<T:Copy>(req: &header_map) {\n+  let _x = copy *(copy **req.get(&~\"METHOD\"))[0u];\n }"}, {"sha": "42c79f3af7168e7c14d2c5a162e8d5bb9e355014", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -14,7 +14,6 @@ extern mod std;\n \n use std::time::precise_time_s;\n use std::oldmap;\n-use std::oldmap::{Map, HashMap};\n \n use core::io::{Reader, ReaderUtil};\n use core::rand::RngUtil;\n@@ -29,7 +28,6 @@ fn main() {\n \n     bench!(shift_push);\n     bench!(read_line);\n-    bench!(str_set);\n     bench!(vec_plus);\n     bench!(vec_append);\n     bench!(vec_push_all);\n@@ -73,24 +71,6 @@ fn read_line() {\n     }\n }\n \n-fn str_set() {\n-    let r = rand::Rng();\n-\n-    let s = oldmap::HashMap();\n-\n-    for int::range(0, 1000) |_i| {\n-        oldmap::set_add(s, r.gen_str(10));\n-    }\n-\n-    let mut found = 0;\n-    for int::range(0, 1000) |_i| {\n-        match s.find(&r.gen_str(10)) {\n-          Some(_) => { found += 1; }\n-          None => { }\n-        }\n-    }\n-}\n-\n fn vec_plus() {\n     let r = rand::Rng();\n "}, {"sha": "899b86b5cfb03da68eb6e058aeb516266203f795", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -22,11 +22,9 @@ An implementation of the Graph500 Breadth First Search problem in Rust.\n extern mod std;\n use std::arc;\n use std::time;\n-use std::oldmap;\n-use std::oldmap::Map;\n-use std::oldmap::HashMap;\n use std::deque::Deque;\n use std::par;\n+use core::hashmap::linear::{LinearMap, LinearSet};\n use core::io::WriterUtil;\n use core::int::abs;\n use core::rand::RngUtil;\n@@ -82,27 +80,31 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n }\n \n fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n-    let graph = do vec::from_fn(N) |_i| {\n-        oldmap::HashMap::<node_id, ()>()\n+    let mut graph = do vec::from_fn(N) |_i| {\n+        LinearSet::new()\n     };\n \n     do vec::each(edges) |e| {\n         match *e {\n             (i, j) => {\n-                oldmap::set_add(graph[i], j);\n-                oldmap::set_add(graph[j], i);\n+                graph[i].insert(j);\n+                graph[j].insert(i);\n             }\n         }\n         true\n     }\n \n-    do graph.map() |v| {\n-        oldmap::vec_from_set(*v)\n+    do vec::map_consume(graph) |mut v| {\n+        let mut vec = ~[];\n+        do v.consume |i| {\n+            vec.push(i);\n+        }\n+        vec\n     }\n }\n \n fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n-    let keys = oldmap::HashMap::<node_id, ()>();\n+    let mut keys = LinearSet::new();\n     let r = rand::Rng();\n \n     while keys.len() < n {\n@@ -111,10 +113,14 @@ fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n         if graph[k].len() > 0u && vec::any(graph[k], |i| {\n             *i != k as node_id\n         }) {\n-            oldmap::set_add(keys, k as node_id);\n+            keys.insert(k as node_id);\n         }\n     }\n-    oldmap::vec_from_set(keys)\n+    let mut vec = ~[];\n+    do keys.consume |i| {\n+        vec.push(i);\n+    }\n+    return vec;\n }\n \n /**"}, {"sha": "a81f7fd76e77bc0659e3b5e8eb1038ccea637111", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -11,8 +11,6 @@\n // chameneos\n \n extern mod std;\n-use std::oldmap;\n-use std::oldmap::HashMap;\n use std::sort;\n use core::cell::Cell;\n use core::comm::*;"}, {"sha": "f4ae799aace703facca44bd2e67d9e0ffbe29fea", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -14,15 +14,14 @@\n #[legacy_modes];\n \n extern mod std;\n-use std::oldmap;\n-use std::oldmap::HashMap;\n use std::sort;\n+use core::hashmap::linear::LinearMap;\n use core::io::ReaderUtil;\n use core::comm::{stream, Port, Chan};\n use core::cmp::Ord;\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n+fn sort_and_fmt(mm: &LinearMap<~[u8], uint>, total: uint) -> ~str {\n    fn pct(xx: uint, yy: uint) -> float {\n       return (xx as float) * 100f / (yy as float);\n    }\n@@ -49,7 +48,7 @@ fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n    let mut pairs = ~[];\n \n    // map -> [(k,%)]\n-   for mm.each |&key, &val| {\n+   for mm.each |&(&key, &val)| {\n       pairs.push((key, pct(val, total)));\n    }\n \n@@ -68,17 +67,21 @@ fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n }\n \n // given a map, search for the frequency of a pattern\n-fn find(mm: HashMap<~[u8], uint>, key: ~str) -> uint {\n+fn find(mm: &LinearMap<~[u8], uint>, key: ~str) -> uint {\n    match mm.find(&str::to_bytes(str::to_lower(key))) {\n       option::None      => { return 0u; }\n-      option::Some(num) => { return num; }\n+      option::Some(&num) => { return num; }\n    }\n }\n \n // given a map, increment the counter for a key\n-fn update_freq(mm: HashMap<~[u8], uint>, key: &[u8]) {\n+fn update_freq(mm: &mut LinearMap<~[u8], uint>, key: &[u8]) {\n     let key = vec::slice(key, 0, key.len()).to_vec();\n-    mm.update(key, 1, |v,v1| { v+v1 });\n+    let newval = match mm.pop(&key) {\n+        Some(v) => v + 1,\n+        None => 1\n+    };\n+    mm.insert(key, newval);\n }\n \n // given a ~[u8], for each window call a function\n@@ -100,7 +103,7 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n                            to_parent: comm::Chan<~str>) {\n \n-   let freqs: HashMap<~[u8], uint> = oldmap::HashMap();\n+   let mut freqs: LinearMap<~[u8], uint> = LinearMap::new();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n \n@@ -112,19 +115,19 @@ fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n       if line == ~[] { break; }\n \n        carry = windows_with_carry(carry + line, sz, |window| {\n-         update_freq(freqs, window);\n+         update_freq(&mut freqs, window);\n          total += 1u;\n       });\n    }\n \n    let buffer = match sz {\n-       1u => { sort_and_fmt(freqs, total) }\n-       2u => { sort_and_fmt(freqs, total) }\n-       3u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGT\"), ~\"GGT\") }\n-       4u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGTA\"), ~\"GGTA\") }\n-       6u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGTATT\"), ~\"GGTATT\") }\n-      12u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGTATTTTAATT\"), ~\"GGTATTTTAATT\") }\n-      18u => { fmt!(\"%u\\t%s\", find(freqs, ~\"GGTATTTTAATTTATAGT\"), ~\"GGTATTTTAATTTATAGT\") }\n+       1u => { sort_and_fmt(&freqs, total) }\n+       2u => { sort_and_fmt(&freqs, total) }\n+       3u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGT\"), ~\"GGT\") }\n+       4u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTA\"), ~\"GGTA\") }\n+       6u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATT\"), ~\"GGTATT\") }\n+      12u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATT\"), ~\"GGTATTTTAATT\") }\n+      18u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATTTATAGT\"), ~\"GGTATTTTAATTTATAGT\") }\n         _ => { ~\"\" }\n    };\n "}, {"sha": "6dbfa5dd538475cf7c38db3806b991f60d0b624b", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n //buggy.rs\n-extern mod std;\n-use std::oldmap::HashMap;\n+\n+use core::hashmap::linear::LinearMap;\n \n fn main() {\n-    let buggy_map :HashMap<uint, &uint> =\n-      HashMap::<uint, &uint>();\n+    let mut buggy_map :LinearMap<uint, &uint> =\n+      LinearMap::new::<uint, &uint>();\n     buggy_map.insert(42, &*~1); //~ ERROR illegal borrow\n \n     // but it is ok if we use a temporary"}, {"sha": "918d8f00d78420a3aaab6a213ab4f4adf2213270", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -10,11 +10,11 @@\n \n // error-pattern: mismatched types\n extern mod std;\n-use std::oldmap::HashMap;\n use std::bitv;\n+use core::hashmap::linear::LinearMap;\n \n struct FnInfo {\n-    vars: HashMap<uint, VarInfo>\n+    vars: LinearMap<uint, VarInfo>\n }\n \n struct VarInfo {\n@@ -27,7 +27,7 @@ fn bitv_to_str(enclosing: FnInfo, v: ~bitv::Bitv) -> str {\n \n     // error is that the value type in the hash map is var_info, not a box\n     for enclosing.vars.each_value |val| {\n-        if v.get(val) { s += \"foo\"; }\n+        if *v.get(val) { s += \"foo\"; }\n     }\n     return s;\n }"}, {"sha": "b6b2e0042633d72075270951b223f08f01cdc5a5", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n extern mod std;\n-use std::oldmap::HashMap;\n+use std::json::Object;\n \n pub fn main() {\n     io::println(\"Hello world!\");"}, {"sha": "4234c064e8d3883f540a87035b748a9402cd2a26", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -16,17 +16,10 @@\n    This originally came from the word-count benchmark.\n */\n \n-extern mod std;\n-\n-use std::oldmap;\n-use std::oldmap::HashMap;\n-use core::comm::*;\n-\n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use std::oldmap;\n-    use std::oldmap::HashMap;\n+    use core::hashmap::linear::LinearMap;\n     use core::comm::*;\n \n     pub type putter = @fn(~str, ~str);\n@@ -44,23 +37,20 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: SharedChan<ctrl_proto>, input: ~str) {\n-        let intermediates = oldmap::HashMap();\n-\n-        fn emit(im: oldmap::HashMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n-                val: ~str) {\n-            let mut c;\n-            match im.find(&key) {\n-              Some(_c) => { c = _c }\n-              None => {\n-                  let (pp, cc) = stream();\n-                error!(\"sending find_reducer\");\n-                ctrl.send(find_reducer(str::to_bytes(key), cc));\n-                error!(\"receiving\");\n-                c = pp.recv();\n-                error!(c);\n-                im.insert(key, c);\n-              }\n+        let intermediates = @mut LinearMap::new();\n+\n+        fn emit(im: &mut LinearMap<~str, int>, ctrl: SharedChan<ctrl_proto>, key: ~str,\n+                _val: ~str) {\n+            if im.contains_key(&key) {\n+                return;\n             }\n+            let (pp, cc) = stream();\n+            error!(\"sending find_reducer\");\n+            ctrl.send(find_reducer(str::to_bytes(key), cc));\n+            error!(\"receiving\");\n+            let c = pp.recv();\n+            error!(c);\n+            im.insert(key, c);\n         }\n \n         let ctrl_clone = ctrl.clone();\n@@ -75,9 +65,9 @@ mod map_reduce {\n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let mut reducers: oldmap::HashMap<~str, int>;\n+        let mut reducers: LinearMap<~str, int>;\n \n-        reducers = oldmap::HashMap();\n+        reducers = LinearMap::new();\n \n         start_mappers(ctrl_chan, inputs.clone());\n \n@@ -89,7 +79,7 @@ mod map_reduce {\n               find_reducer(k, cc) => {\n                 let mut c;\n                 match reducers.find(&str::from_bytes(k)) {\n-                  Some(_c) => { c = _c; }\n+                  Some(&_c) => { c = _c; }\n                   None => { c = 0; }\n                 }\n                 cc.send(c);"}, {"sha": "5f8b8d29830720b1353c25e1868bc642000ccba9", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -10,11 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearMap;\n \n pub fn main() {\n-    let m = HashMap();\n+    let mut m = LinearMap::new();\n     m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n     error!(m);\n }"}, {"sha": "b22c423ed041284801abb07f6d9199ee7bd8f76e", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -12,14 +12,13 @@\n // aux-build:issue-2631-a.rs\n \n extern mod req;\n-extern mod std;\n \n use req::*;\n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];\n-  let m: req::header_map = HashMap();\n+  let mut m: req::header_map = LinearMap::new();\n   m.insert(~\"METHOD\", @mut v);\n-  request::<int>(m);\n+  request::<int>(&m);\n }"}, {"sha": "8934c3935c08719381f75493494ad62104532521", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -12,11 +12,11 @@\n \n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n-extern mod std;\n-use std::oldmap::HashMap;\n \n-fn add_interfaces(managed_ip: ~str, device: std::oldmap::HashMap<~str, int>)  {\n-     error!(\"%s, %?\", managed_ip, device[~\"interfaces\"]);\n+use core::hashmap::linear::LinearMap;\n+\n+fn add_interfaces(managed_ip: ~str, device: LinearMap<~str, int>)  {\n+     error!(\"%s, %?\", managed_ip, device.get(&~\"interfaces\"));\n }\n \n pub fn main() {}"}, {"sha": "3d1a2c3df5d3b5fc0a9738e748720ebc87f75a83", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -11,8 +11,7 @@\n // except according to those terms.\n \n extern mod std;\n-use core::io::WriterUtil;\n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearMap;\n use std::json;\n \n enum object {\n@@ -59,19 +58,20 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n     }\n }\n \n-fn add_interfaces(store: int, managed_ip: ~str, device: std::oldmap::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n+fn add_interfaces(store: int, managed_ip: ~str, device: LinearMap<~str, std::json::Json>) -> ~[(~str, object)]\n {\n-    match device[~\"interfaces\"]\n+    match device.get(&~\"interfaces\")\n     {\n-        std::json::List(interfaces) =>\n+        &std::json::List(ref interfaces) =>\n         {\n-          do vec::map(interfaces) |interface| {\n+          do interfaces.map |interface| {\n                 add_interface(store, copy managed_ip, copy *interface)\n           }\n         }\n         _ =>\n         {\n-            error!(\"Expected list for %s interfaces but found %?\", managed_ip, device[~\"interfaces\"]);\n+            error!(\"Expected list for %s interfaces but found %?\", managed_ip,\n+                   device.get(&~\"interfaces\"));\n             ~[]\n         }\n     }"}, {"sha": "022d3f6fceb057d212701c8d41c4cc9a546b27d4", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -10,12 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::oldmap::HashMap;\n-use std::oldmap;\n+use core::hashmap::linear::LinearMap;\n \n pub fn main() {\n-    let buggy_map :HashMap<uint, &uint> = HashMap::<uint, &uint>();\n+    let mut buggy_map: LinearMap<uint, &uint> = LinearMap::new::<uint, &uint>();\n     let x = ~1;\n     buggy_map.insert(42, &*x);\n }"}, {"sha": "46a02ff15929ca92994812e6dcec50c08812c3a6", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -14,7 +14,6 @@\n extern mod std;\n \n use core::io::{WriterUtil};\n-use std::oldmap::*;\n \n #[cfg(test)]\n fn check_strs(actual: &str, expected: &str) -> bool\n@@ -30,7 +29,7 @@ fn check_strs(actual: &str, expected: &str) -> bool\n #[test]\n fn tester()\n {\n-    let table = HashMap();\n+    let mut table = core::hashmap::linear::LinearMap();\n     table.insert(@~\"one\", 1);\n     table.insert(@~\"two\", 2);\n     fail_unless!(check_strs(table.to_str(), ~\"xxx\"));   // not sure what expected should be"}, {"sha": "85cb3e3207ee7ff65d051627629e996b7d7298dc", "filename": "src/test/run-pass/issue-4092.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53057f49d7f3994fa394df493f22d9bfdf2df8f/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4092.rs?ref=b53057f49d7f3994fa394df493f22d9bfdf2df8f", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+use core::hashmap::linear::LinearMap;\n \n pub fn main() {\n-    let x = std::oldmap::HashMap();\n+    let mut x = LinearMap::new();\n     x.insert((@\"abc\", 0), 0);\n }"}]}