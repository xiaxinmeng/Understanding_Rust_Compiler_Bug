{"sha": "500857c944d140a3e4ab0e1ffded0226c8866794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMDg1N2M5NDRkMTQwYTNlNGFiMGUxZmZkZWQwMjI2Yzg4NjY3OTQ=", "commit": {"author": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-31T23:17:42Z"}, "committer": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-31T23:17:42Z"}, "message": "Merge remote-tracking branch 'upstream/master' into luckily_literals_love_lints", "tree": {"sha": "12f3e4c4954891ed0b98bc448c3572c0c8251b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f3e4c4954891ed0b98bc448c3572c0c8251b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500857c944d140a3e4ab0e1ffded0226c8866794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500857c944d140a3e4ab0e1ffded0226c8866794", "html_url": "https://github.com/rust-lang/rust/commit/500857c944d140a3e4ab0e1ffded0226c8866794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500857c944d140a3e4ab0e1ffded0226c8866794/comments", "author": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fd8784d7c9c74a9be210c900492430cbe9eb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fd8784d7c9c74a9be210c900492430cbe9eb40", "html_url": "https://github.com/rust-lang/rust/commit/06fd8784d7c9c74a9be210c900492430cbe9eb40"}, {"sha": "f1fa1768a27c4bb5c47ce0bd002258474aa64cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa1768a27c4bb5c47ce0bd002258474aa64cbe", "html_url": "https://github.com/rust-lang/rust/commit/f1fa1768a27c4bb5c47ce0bd002258474aa64cbe"}], "stats": {"total": 232, "additions": 160, "deletions": 72}, "files": [{"sha": "9e17f0574e3fd2cfb7b42f6eef45b7d41489e204", "filename": ".travis.yml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -34,6 +34,12 @@ script:\n  - cp clippy_tests/target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n  - PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy\n  - cd clippy_lints && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n+ - cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n+ - cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n+ - cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../..\n+ - cd clippy_workspace_tests/subcrate/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../../..\n+ - PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=clippy_workspace_tests/Cargo.toml -- -D clippy\n+ - cd clippy_workspace_tests/subcrate && PATH=$PATH:~/rust/cargo/bin cargo clippy --manifest-path=../Cargo.toml -- -D clippy && cd ../..\n  - set +e\n \n after_success: |"}, {"sha": "7aa51038ea3b1cf52299854ba8bcd90b9922759c", "filename": "CHANGELOG.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,6 +1,14 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.147\n+* Update to *rustc 1.21.0-nightly (aac223f4f 2017-07-30)*\n+\n+## 0.0.146\n+* Update to *rustc 1.21.0-nightly (52a330969 2017-07-27)*\n+* Fixes false positives in `inline_always`\n+* Fixes false negatives in `panic_params`\n+\n ## 0.0.145\n * Update to *rustc 1.20.0-nightly (afe145d22 2017-07-23)*\n "}, {"sha": "55a784ab45af2790dcaf6f1cec9cd1debbe8b819", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.145\"\n+version = \"0.0.147\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -32,7 +32,7 @@ path = \"src/main.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.145\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.147\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n "}, {"sha": "3db8beed6c791008d74796f812671a07c82bb6d6", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.145\"\n+version = \"0.0.147\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n@@ -27,6 +27,7 @@ serde = \"1.0\"\n serde_derive = \"1.0\"\n toml = \"0.4\"\n unicode-normalization = \"0.1\"\n+pulldown-cmark = \"0.0.15\"\n \n [features]\n debugging = []"}, {"sha": "baac8d790ba5386349f25e9238715021aa9258af", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::{ConstUsize, ConstIsize, ConstInt};\n use rustc::hir;\n@@ -62,7 +63,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             if let ty::TyArray(_, size) = ty.sty {\n                 let size = ConstInt::Usize(ConstUsize::new(size as u64, cx.sess().target.uint_type)\n                     .expect(\"array size is invalid\"));\n-                let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+                let parent_item = cx.tcx.hir.get_parent(e.id);\n+                let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+                let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+                let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n \n                 // Index is a constant uint\n                 let const_index = constcx.eval(index);"}, {"sha": "c1fbd33b2a5ea48834c62c69c91c288566466c93", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -249,7 +249,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n         ExprPath(ref qpath) => {\n             let def = cx.tables.qpath_def(qpath, lit.id);\n             if let Def::Const(def_id) = def {\n-                lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| {\n+                lookup_const_by_id(cx.tcx, cx.param_env.and((def_id, Substs::empty()))).and_then(|(l, _ty)| {\n                     let body = if let Some(id) = cx.tcx.hir.as_local_node_id(l) {\n                         cx.tcx.mir_const_qualif(def_id);\n                         cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))"}, {"sha": "54b297d588d56b47e96c7b397935b0c4cd2e9240", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -225,6 +225,7 @@ pub fn constant(lcx: &LateContext, e: &Expr) -> Option<(Constant, bool)> {\n     let mut cx = ConstEvalLateContext {\n         tcx: lcx.tcx,\n         tables: lcx.tables,\n+        param_env: lcx.param_env,\n         needed_resolution: false,\n         substs: lcx.tcx.intern_substs(&[]),\n     };\n@@ -238,6 +239,7 @@ pub fn constant_simple(lcx: &LateContext, e: &Expr) -> Option<Constant> {\n struct ConstEvalLateContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     needed_resolution: bool,\n     substs: &'tcx Substs<'tcx>,\n }\n@@ -292,12 +294,14 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 } else {\n                     substs.subst(self.tcx, self.substs)\n                 };\n-                if let Some((def_id, substs)) = lookup_const_by_id(self.tcx, def_id, substs) {\n+                let param_env = self.param_env.and((def_id, substs));\n+                if let Some((def_id, substs)) = lookup_const_by_id(self.tcx, param_env) {\n                     let mut cx = ConstEvalLateContext {\n                         tcx: self.tcx,\n                         tables: self.tcx.typeck_tables_of(def_id),\n                         needed_resolution: false,\n                         substs: substs,\n+                        param_env: param_env.param_env,\n                     };\n                     let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                         self.tcx.mir_const_qualif(def_id);"}, {"sha": "3741b3934bdf5f59b1c652d21dca61e502ecc7fe", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -4,6 +4,9 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_math::*;\n use rustc::hir::*;\n+use rustc::ty;\n+use rustc::traits::Reveal;\n+use rustc::ty::subst::Substs;\n use utils::span_lint;\n \n /// **What it does:** Checks for C-like enumerations that are\n@@ -43,9 +46,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n             for var in &def.variants {\n                 let variant = &var.node;\n                 if let Some(body_id) = variant.disr_expr {\n-                    use rustc_const_eval::*;\n-                    let constcx = ConstContext::with_tables(cx.tcx, cx.tcx.body_tables(body_id));\n-                    let bad = match constcx.eval(&cx.tcx.hir.body(body_id).value) {\n+                    let expr = &cx.tcx.hir.body(body_id).value;\n+                    let did = cx.tcx.hir.body_owner_def_id(body_id);\n+                    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                    let substs = Substs::identity_for_item(cx.tcx.global_tcx(), did);\n+                    let bad = match cx.tcx.at(expr.span).const_eval(param_env.and((did, substs))) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "8b31969d2549643587efdeb52ed9d1f79098bced", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -8,7 +8,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::{self, Ty};\n-use rustc::ty::subst::Subst;\n+use rustc::ty::subst::{Subst, Substs};\n use rustc_const_eval::ConstContext;\n use std::collections::{HashMap, HashSet};\n use syntax::ast;\n@@ -685,7 +685,10 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     // if this for loop is iterating over a two-sided range...\n     if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(arg) {\n         // ...and both sides are compile-time constant integers...\n-        let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+        let parent_item = cx.tcx.hir.get_parent(arg.id);\n+        let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+        let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+        let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n         if let Ok(start_idx) = constcx.eval(start) {\n             if let Ok(end_idx) = constcx.eval(end) {\n                 // ...and the start index is greater than the end index,"}, {"sha": "5f92ca7b19ae8d10c51bdd04be331b7ebe51940c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -2,11 +2,13 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstInt;\n use std::cmp::Ordering;\n use std::collections::Bound;\n use syntax::ast::LitKind;\n+use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, span_lint_and_sugg, in_external_macro,\n@@ -307,7 +309,7 @@ fn check_match_bool(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n \n fn check_overlapping_arms(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n     if arms.len() >= 2 && cx.tables.expr_ty(ex).is_integral() {\n-        let ranges = all_ranges(cx, arms);\n+        let ranges = all_ranges(cx, arms, ex.id);\n         let type_ranges = type_ranges(&ranges);\n         if !type_ranges.is_empty() {\n             if let Some((start, end)) = overlapping(&type_ranges) {\n@@ -390,8 +392,11 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n }\n \n /// Get all arms that are unbounded `PatRange`s.\n-fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm]) -> Vec<SpannedRange<ConstVal<'tcx>>> {\n-    let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n+fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &[Arm], id: NodeId) -> Vec<SpannedRange<ConstVal<'tcx>>> {\n+    let parent_item = cx.tcx.hir.get_parent(id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let constcx = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables);\n     arms.iter()\n         .flat_map(|arm| {\n             if let Arm { ref pats, guard: None, .. } = *arm {"}, {"sha": "1c6f7dd214ed0261e066c3df45a01e07ed6009a0", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -3,6 +3,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::hir::def::Def;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use std::borrow::Cow;\n use std::fmt;\n@@ -1226,7 +1227,10 @@ fn lint_chars_next(cx: &LateContext, expr: &hir::Expr, chain: &hir::Expr, other:\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n-    if let Ok(ConstVal::Str(r)) = ConstContext::with_tables(cx.tcx, cx.tables).eval(arg) {\n+    let parent_item = cx.tcx.hir.get_parent(arg.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    if let Ok(ConstVal::Str(r)) = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(arg) {\n         if r.len() == 1 {\n             let hint = snippet(cx, expr.span, \"..\").replace(&format!(\"\\\"{}\\\"\", r), &format!(\"'{}'\", r));\n             span_lint_and_then(cx,"}, {"sha": "dfdf00cb4e7571488135114fd6dfb8e5f1fcf80f", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, ExpnFormat};\n@@ -389,7 +390,10 @@ fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n }\n \n fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n-    let res = ConstContext::with_tables(cx.tcx, cx.tables).eval(expr);\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let res = ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr);\n     if let Ok(ConstVal::Float(val)) = res {\n         use std::cmp::Ordering;\n         match val {"}, {"sha": "f022559157113b5229e28b8ad43108b505a40f48", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -3,6 +3,7 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval::ConstContext;\n+use rustc::ty::subst::Substs;\n use std::collections::HashSet;\n use std::error::Error;\n use syntax::ast::{LitKind, NodeId};\n@@ -150,7 +151,10 @@ fn str_span(base: Span, s: &str, c: usize) -> Span {\n }\n \n fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(e) {\n+    let parent_item = cx.tcx.hir.get_parent(e.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(e) {\n         Ok(ConstVal::Str(r)) => Some(r),\n         _ => None,\n     }"}, {"sha": "66cb5671c775a3157187cac2961a3c6c5b10c3b3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{FnKind, Visitor, walk_ty, NestedVisitorMap};\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::attr::IntType;\n@@ -977,7 +978,10 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         _ => return None,\n     };\n \n-    let cv = match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    let cv = match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr) {\n         Ok(val) => val,\n         Err(_) => return None,\n     };\n@@ -1174,7 +1178,10 @@ fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n     use rustc::middle::const_val::ConstVal::*;\n     use rustc_const_eval::ConstContext;\n \n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n+    let parent_item = cx.tcx.hir.get_parent(expr.id);\n+    let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+    let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+    match ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(expr) {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n                 match const_int.int_type() {"}, {"sha": "059f4e36a035ea6ede311f51fe134fd6f9d6aaa5", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n+use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use syntax::codemap::Span;\n use utils::{higher, is_copy, snippet, span_lint_and_sugg};\n@@ -59,7 +60,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n     let snippet = match *vec_args {\n         higher::VecArgs::Repeat(elem, len) => {\n-            if ConstContext::with_tables(cx.tcx, cx.tables).eval(len).is_ok() {\n+            let parent_item = cx.tcx.hir.get_parent(len.id);\n+            let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n+            let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n+            if ConstContext::new(cx.tcx, cx.param_env.and(substs), cx.tables).eval(len).is_ok() {\n                 format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n             } else {\n                 return;"}, {"sha": "ce56b8e6e3c6d465cf673de4415d7473a854cd85", "filename": "clippy_tests/examples/attrs.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_tests%2Fexamples%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_tests%2Fexamples%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fattrs.stderr?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -6,24 +6,6 @@ error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usuall\n   |\n   = note: `-D inline-always` implied by `-D warnings`\n \n-error: you have declared `#[inline(always)]` on `false_positive_expr`. This is usually a bad idea\n-  --> attrs.rs:11:1\n-   |\n-11 | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n-error: you have declared `#[inline(always)]` on `false_positive_stmt`. This is usually a bad idea\n-  --> attrs.rs:16:1\n-   |\n-16 | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n-error: you have declared `#[inline(always)]` on `empty_and_false_positive_stmt`. This is usually a bad idea\n-  --> attrs.rs:21:1\n-   |\n-21 | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n error: the since field must contain a semver-compliant version\n   --> attrs.rs:27:14\n    |\n@@ -38,7 +20,7 @@ error: the since field must contain a semver-compliant version\n 30 | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n \n To learn more, run the command again with --verbose."}, {"sha": "e8c3fffce05143051f33f9cf344fe29e455f4a41", "filename": "clippy_tests/examples/panic.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_tests%2Fexamples%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_tests%2Fexamples%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fpanic.stderr?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -0,0 +1,32 @@\n+error: you probably are missing some parameter in your format string\n+ --> panic.rs:8:16\n+  |\n+8 |         panic!(\"{}\");\n+  |                ^^^^\n+  |\n+  = note: `-D panic-params` implied by `-D warnings`\n+\n+error: you probably are missing some parameter in your format string\n+  --> panic.rs:10:16\n+   |\n+10 |         panic!(\"{:?}\");\n+   |                ^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> panic.rs:12:23\n+   |\n+12 |         assert!(true, \"here be missing values: {}\");\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> panic.rs:22:5\n+   |\n+22 |     assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to 4 previous errors\n+\n+\n+To learn more, run the command again with --verbose."}, {"sha": "a282378c951c6f008ce19ab304936c4989ca7586", "filename": "clippy_workspace_tests/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2FCargo.toml?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"clippy_workspace_tests\"\n+version = \"0.1.0\"\n+\n+[workspace]\n+members = [\"subcrate\"]"}, {"sha": "f79c691f0853c5b08e114041f7c8db43b0452fe0", "filename": "clippy_workspace_tests/src/main.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsrc%2Fmain.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -0,0 +1,2 @@\n+fn main() {\n+}"}, {"sha": "83ea5868160bbaeae2cd25b3a37a4e0b4ba38b2c", "filename": "clippy_workspace_tests/subcrate/Cargo.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2FCargo.toml?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -0,0 +1,3 @@\n+[package]\n+name = \"subcrate\"\n+version = \"0.1.0\""}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "clippy_workspace_tests/subcrate/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fsubcrate%2Fsrc%2Flib.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794"}, {"sha": "266c1373ff25b1f57a86d64a7f6239408e6d796e", "filename": "src/main.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -15,6 +15,7 @@ extern crate syntax;\n use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n use rustc::session::{config, Session, CompileIncomplete};\n use rustc::session::config::{Input, ErrorOutputType};\n+use std::collections::HashMap;\n use std::path::PathBuf;\n use std::process::{self, Command};\n use syntax::ast;\n@@ -158,12 +159,6 @@ fn show_version() {\n     println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n }\n \n-// FIXME: false positive for needless_lifetimes\n-#[allow(needless_lifetimes)]\n-fn has_prefix<'a, T: PartialEq, I: Iterator<Item = &'a T>>(v: &'a [T], itr: I) -> bool {\n-    v.iter().zip(itr).all(|(a, b)| a == b)\n-}\n-\n pub fn main() {\n     use std::env;\n \n@@ -196,46 +191,52 @@ pub fn main() {\n                 process::exit(101);\n             };\n \n-        let manifest_path = manifest_path_arg.map(|arg| PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..])));\n+        let manifest_path = manifest_path_arg.map(|arg| Path::new(&arg[\"--manifest-path=\".len()..])\n+            .canonicalize().expect(\"manifest path could not be canonicalized\"));\n \n         let package_index = {\n-                let mut iterator = metadata.packages.iter();\n-\n-                if let Some(ref manifest_path) = manifest_path {\n-                    iterator.position(|package| {\n-                        let package_manifest_path = Path::new(&package.manifest_path);\n+                if let Some(manifest_path) = manifest_path {\n+                    metadata.packages.iter().position(|package| {\n+                        let package_manifest_path = Path::new(&package.manifest_path)\n+                            .canonicalize().expect(\"package manifest path could not be canonicalized\");\n                         package_manifest_path == manifest_path\n                     })\n                 } else {\n+                    let package_manifest_paths: HashMap<_, _> =\n+                        metadata.packages.iter()\n+                        .enumerate()\n+                        .map(|(i, package)| {\n+                            let package_manifest_path = Path::new(&package.manifest_path)\n+                                .parent()\n+                                .expect(\"could not find parent directory of package manifest\")\n+                                .canonicalize()\n+                                .expect(\"package directory cannot be canonicalized\");\n+                            (package_manifest_path, i)\n+                        })\n+                        .collect();\n+\n                     let current_dir = std::env::current_dir()\n                         .expect(\"could not read current directory\")\n                         .canonicalize()\n                         .expect(\"current directory cannot be canonicalized\");\n-                    let current_dir_components = current_dir.components().collect::<Vec<_>>();\n+\n+                    let mut current_path: &Path = &current_dir;\n \n                     // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n                     // reach).\n-                    iterator\n-                        .enumerate()\n-                        .filter_map(|(i, package)| {\n-                            let package_manifest_path = Path::new(&package.manifest_path);\n-                            let canonical_path = package_manifest_path\n+                    loop {\n+                        if let Some(&package_index) = package_manifest_paths.get(current_path) {\n+                            break Some(package_index);\n+                        }\n+                        else {\n+                            // We'll never reach the filesystem root, because to get to this point in the code\n+                            // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n+                            // unwrap the current path's parent.\n+                            current_path = current_path\n                                 .parent()\n-                                .expect(\"could not find parent directory of package manifest\")\n-                                .canonicalize()\n-                                .expect(\"package directory cannot be canonicalized\");\n-\n-                            // TODO: We can do this in `O(1)` by combining the `len` and the\n-                            //       iteration.\n-                            let components = canonical_path.components().collect::<Vec<_>>();\n-                            if has_prefix(&current_dir_components, components.iter()) {\n-                                Some((i, components.len()))\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .max_by_key(|&(_, length)| length)\n-                        .map(|(i, _)| i)\n+                                .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n+                        }\n+                    }\n                 }\n             }\n             .expect(\"could not find matching package\");"}, {"sha": "02dbdfef04c2a696e10958788812d66dd956b870", "filename": "tests/examples.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/500857c944d140a3e4ab0e1ffded0226c8866794/tests%2Fexamples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500857c944d140a3e4ab0e1ffded0226c8866794/tests%2Fexamples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fexamples.rs?ref=500857c944d140a3e4ab0e1ffded0226c8866794", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: rustc doesn't generate expansion info for `cfg!` anymore\n+#![allow(logic_bug)]\n+\n #[macro_use]\n extern crate duct;\n "}]}