{"sha": "c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNWUxM2FlMTY3YjNmNzIyNzBlMGI5OTMzM2U3MWJhMWJlZjlmZmM=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-13T16:52:40Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-14T07:46:07Z"}, "message": "Remove `DUMMY_HIR_ID`", "tree": {"sha": "1e7b6c4a244eeb7bea0bca65841731a387c3248d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e7b6c4a244eeb7bea0bca65841731a387c3248d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "html_url": "https://github.com/rust-lang/rust/commit/c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9161ab880cb4f58b2b2e74b7a8bed2514f8a753", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9161ab880cb4f58b2b2e74b7a8bed2514f8a753", "html_url": "https://github.com/rust-lang/rust/commit/b9161ab880cb4f58b2b2e74b7a8bed2514f8a753"}], "stats": {"total": 77, "additions": 13, "deletions": 64}, "files": [{"sha": "1ac23677d473917f4074aa5ac874be80dc53ccbe", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -7,7 +7,6 @@\n pub use crate::def_id::DefPathHash;\n use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n-use crate::hir_id::DUMMY_HIR_ID;\n \n use rustc_ast::ast;\n use rustc_ast::crate_disambiguator::CrateDisambiguator;\n@@ -345,8 +344,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<hir::HirId> {\n         if let Some(def_id) = def_id.as_local() {\n-            let hir_id = self.local_def_id_to_hir_id(def_id);\n-            if hir_id != DUMMY_HIR_ID { Some(hir_id) } else { None }\n+            Some(self.local_def_id_to_hir_id(def_id))\n         } else {\n             None\n         }"}, {"sha": "d782c3dd70a2c53c139020cc4f5dc0f9c1c72b6e", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -45,7 +45,4 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     local_id: ItemLocalId::from_u32(0),\n };\n \n-pub const DUMMY_HIR_ID: HirId =\n-    HirId { owner: LocalDefId { local_def_index: CRATE_DEF_INDEX }, local_id: DUMMY_ITEM_LOCAL_ID };\n-\n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "2906da437abac1c10b4ae6841ef9a6223c9c57a0", "filename": "src/librustc_middle/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -250,23 +250,16 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node),\n                 };\n \n-                let forgot_str = if hir_id == hir::DUMMY_HIR_ID {\n-                    format!(\"\\nMaybe you forgot to lower the node id {:?}?\", node_id)\n-                } else {\n-                    String::new()\n-                };\n-\n                 span_bug!(\n                     span,\n                     \"inconsistent DepNode at `{:?}` for `{}`: \\\n-                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}){}\",\n+                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n                     self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n                     self.current_dep_node_owner,\n                     self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n                     hir_id.owner,\n-                    forgot_str,\n                 )\n             }\n         }"}, {"sha": "1dd14b7c4ffdaced3d5aa013a06d8a867af5a74d", "filename": "src/librustc_middle/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -215,7 +215,6 @@ fn late_report_deprecation(\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n-    def_id: DefId,\n     hir_id: HirId,\n ) {\n     if span.in_derive_expansion() {\n@@ -229,9 +228,6 @@ fn late_report_deprecation(\n         }\n         diag.emit()\n     });\n-    if hir_id == hir::DUMMY_HIR_ID {\n-        span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n-    }\n }\n \n /// Result of `TyCtxt::eval_stability`.\n@@ -296,7 +292,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if !skip {\n                     let (message, lint) =\n                         deprecation_message(&depr_entry.attr, &self.def_path_str(def_id));\n-                    late_report_deprecation(self, &message, None, lint, span, def_id, id);\n+                    late_report_deprecation(self, &message, None, lint, span, id);\n                 }\n             };\n         }\n@@ -319,15 +315,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if let Some(depr) = &stability.rustc_depr {\n                     let (message, lint) =\n                         rustc_deprecation_message(depr, &self.def_path_str(def_id));\n-                    late_report_deprecation(\n-                        self,\n-                        &message,\n-                        depr.suggestion,\n-                        lint,\n-                        span,\n-                        def_id,\n-                        id,\n-                    );\n+                    late_report_deprecation(self, &message, depr.suggestion, lint, span, id);\n                 }\n             }\n         }"}, {"sha": "1e31b7c74b6f054f8e840770820ec4311c1441f5", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -143,16 +143,6 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     fn visit_id(&mut self, hir_id: HirId) {\n         let owner = self.owner.expect(\"no owner\");\n \n-        if hir_id == hir::DUMMY_HIR_ID {\n-            self.error(|| {\n-                format!(\n-                    \"HirIdValidator: HirId {:?} is invalid\",\n-                    self.hir_map.node_to_string(hir_id)\n-                )\n-            });\n-            return;\n-        }\n-\n         if owner != hir_id.owner {\n             self.error(|| {\n                 format!("}, {"sha": "5bfb5aa2440b731e6ec4bcee67371944266ca781", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -2704,14 +2704,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n-        if lifetime_ref.hir_id == hir::DUMMY_HIR_ID {\n-            span_bug!(\n-                lifetime_ref.span,\n-                \"lifetime reference not renumbered, \\\n-                 probably a bug in rustc_ast::fold\"\n-            );\n-        }\n-\n         debug!(\n             \"insert_lifetime: {} resolved to {:?} span={:?}\",\n             self.tcx.hir().node_to_string(lifetime_ref.hir_id),"}, {"sha": "66d3d68c18daa4bbe804d60e751d81cd5553f298", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -860,9 +860,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &mut self,\n         expr_hir_id: hir::HirId,\n     ) -> Result<(), MethodError<'tcx>> {\n-        if expr_hir_id == hir::DUMMY_HIR_ID {\n-            return Ok(());\n-        }\n         let mut duplicates = FxHashSet::default();\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {"}, {"sha": "6e50264c098b67adf771f2db5a6e31572e7bee91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -375,18 +375,16 @@ impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n \n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext<'_>) -> Lifetime {\n-        if self.hir_id != hir::DUMMY_HIR_ID {\n-            let def = cx.tcx.named_region(self.hir_id);\n-            match def {\n-                Some(rl::Region::EarlyBound(_, node_id, _))\n-                | Some(rl::Region::LateBound(_, node_id, _))\n-                | Some(rl::Region::Free(_, node_id)) => {\n-                    if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n-                        return lt;\n-                    }\n+        let def = cx.tcx.named_region(self.hir_id);\n+        match def {\n+            Some(rl::Region::EarlyBound(_, node_id, _))\n+            | Some(rl::Region::LateBound(_, node_id, _))\n+            | Some(rl::Region::Free(_, node_id)) => {\n+                if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n+                    return lt;\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n         Lifetime(self.name.ident().to_string())\n     }"}, {"sha": "316cf84152842bc56b8af8567b886584c21f6180", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15e13ae167b3f72270e0b99333e71ba1bef9ffc/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c15e13ae167b3f72270e0b99333e71ba1bef9ffc", "patch": "@@ -580,11 +580,7 @@ pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n \n /// Given a type Path, resolve it to a Type using the TyCtxt\n pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n-    if id == hir::DUMMY_HIR_ID {\n-        debug!(\"resolve_type({:?})\", path);\n-    } else {\n-        debug!(\"resolve_type({:?},{:?})\", path, id);\n-    }\n+    debug!(\"resolve_type({:?},{:?})\", path, id);\n \n     let is_generic = match path.res {\n         Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),"}]}