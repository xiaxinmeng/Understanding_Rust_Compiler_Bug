{"sha": "34575e693b8ab1b91f75141067d2730ea069b806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NTc1ZTY5M2I4YWIxYjkxZjc1MTQxMDY3ZDI3MzBlYTA2OWI4MDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T21:04:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "now that we can handle subtyping, fix higher-ranked equality", "tree": {"sha": "6c9f18c47350f4ed673c32cd77f6251ee08a7e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9f18c47350f4ed673c32cd77f6251ee08a7e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34575e693b8ab1b91f75141067d2730ea069b806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34575e693b8ab1b91f75141067d2730ea069b806", "html_url": "https://github.com/rust-lang/rust/commit/34575e693b8ab1b91f75141067d2730ea069b806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34575e693b8ab1b91f75141067d2730ea069b806/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e21b1e4ba50d1e4a19723f478bb8b76dde2e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e21b1e4ba50d1e4a19723f478bb8b76dde2e86", "html_url": "https://github.com/rust-lang/rust/commit/07e21b1e4ba50d1e4a19723f478bb8b76dde2e86"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "195a284e69e26ac8772eb3ebfb47ad1aa9667199", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/34575e693b8ab1b91f75141067d2730ea069b806/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34575e693b8ab1b91f75141067d2730ea069b806/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=34575e693b8ab1b91f75141067d2730ea069b806", "patch": "@@ -458,19 +458,30 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n             self.b_scopes.push(b_scope);\n             self.a_scopes.push(a_scope);\n \n-            // FIXME -- to be fully correct, we would set the ambient\n-            // variance to Covariant here. As is, we will sometimes\n-            // propagate down an ambient variance of Equal -- this in\n-            // turn causes us to report errors in some cases where\n-            // types perhaps *ought* to be equal. See the\n-            // `hr-fn-aau-eq-abu.rs` test for an example. Fixing this\n-            // though is a bit nontrivial: in particular, it would\n-            // require a more involved handling of canonical\n-            // variables, since we would no longer be able to rely on\n-            // having an `==` relationship for canonical variables.\n+            // Reset the ambient variance to covariant. This is needed\n+            // to correctly handle cases like\n+            //\n+            //     for<'a> fn(&'a u32, &'a u3) == for<'b, 'c> fn(&'b u32, &'c u32)\n+            //\n+            // Somewhat surprisingly, these two types are actually\n+            // **equal**, even though the one on the right looks more\n+            // polymorphic. The reason is due to subtyping. To see it,\n+            // consider that each function can call the other:\n+            //\n+            // - The left function can call the right with `'b` and\n+            //   `'c` both equal to `'a`\n+            //\n+            // - The right function can call the left with `'a` set to\n+            //   `{P}`, where P is the point in the CFG where the call\n+            //   itself occurs. Note that `'b` and `'c` must both\n+            //   include P. At the point, the call works because of\n+            //   subtyping (i.e., `&'b u32 <: &{P} u32`).\n+            let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n+            self.ambient_variance = variance;\n+\n             self.b_scopes.pop().unwrap();\n             self.a_scopes.pop().unwrap();\n         }\n@@ -491,8 +502,14 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n             self.a_scopes.push(a_scope);\n             self.b_scopes.push(b_scope);\n \n+            // Reset ambient variance to contravariance. See the\n+            // covariant case above for an explanation.\n+            let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n+\n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n+            self.ambient_variance = variance;\n+\n             self.b_scopes.pop().unwrap();\n             self.a_scopes.pop().unwrap();\n         }"}, {"sha": "bc7b031f72c0bc319fc8bddec7204fface35834d", "filename": "src/test/ui/nll/relate_tys/hr-fn-aau-eq-abu.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34575e693b8ab1b91f75141067d2730ea069b806/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34575e693b8ab1b91f75141067d2730ea069b806/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.rs?ref=34575e693b8ab1b91f75141067d2730ea069b806", "patch": "@@ -16,9 +16,7 @@\n // another -- effectively, the single lifetime `'a` is just inferred\n // to be the intersection of the two distinct lifetimes.\n //\n-// FIXME: However, we currently reject this example with an error,\n-// because of how we handle binders and equality in `relate_tys`.\n-//\n+// compile-pass\n // compile-flags:-Zno-leak-check\n \n #![feature(nll)]\n@@ -31,7 +29,6 @@ fn make_cell_aa() -> Cell<for<'a> fn(&'a u32, &'a u32)> {\n \n fn aa_eq_ab() {\n     let a: Cell<for<'a, 'b> fn(&'a u32, &'b u32)> = make_cell_aa();\n-    //~^ ERROR higher-ranked subtype error\n     drop(a);\n }\n "}, {"sha": "17e8a32cb2ad95d790206326dc529fa310a1d5b1", "filename": "src/test/ui/nll/relate_tys/hr-fn-aau-eq-abu.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07e21b1e4ba50d1e4a19723f478bb8b76dde2e86/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e21b1e4ba50d1e4a19723f478bb8b76dde2e86/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aau-eq-abu.stderr?ref=07e21b1e4ba50d1e4a19723f478bb8b76dde2e86", "patch": "@@ -1,8 +0,0 @@\n-error: higher-ranked subtype error\n-  --> $DIR/hr-fn-aau-eq-abu.rs:33:53\n-   |\n-LL |     let a: Cell<for<'a, 'b> fn(&'a u32, &'b u32)> = make_cell_aa();\n-   |                                                     ^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}