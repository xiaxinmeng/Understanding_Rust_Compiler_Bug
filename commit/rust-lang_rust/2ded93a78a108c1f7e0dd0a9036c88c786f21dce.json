{"sha": "2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWQ5M2E3OGExMDhjMWY3ZTBkZDBhOTAzNmM4OGM3ODZmMjFkY2U=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-20T12:51:30Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-20T12:51:30Z"}, "message": "Merge #143\n\n143: Implement Find All References and Rename for local variables r=matklad a=kjeremy\n\nExpose `find_all_refs` in `Analysis`. This currently only works for local variables.\r\n\r\nUse this in the LSP to implement find all references and rename.\n\nCo-authored-by: Jeremy A. Kolb <jkolb@ara.com>", "tree": {"sha": "4656be95dde6ebd9a38e680dba161aa53357acfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4656be95dde6ebd9a38e680dba161aa53357acfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "html_url": "https://github.com/rust-lang/rust/commit/2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4dbf0379ccd5c7643d48658f0ecc224add5a5c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf0379ccd5c7643d48658f0ecc224add5a5c5c", "html_url": "https://github.com/rust-lang/rust/commit/4dbf0379ccd5c7643d48658f0ecc224add5a5c5c"}, {"sha": "3de77908eb52362e1acc3feed6186a18d8026f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de77908eb52362e1acc3feed6186a18d8026f6e", "html_url": "https://github.com/rust-lang/rust/commit/3de77908eb52362e1acc3feed6186a18d8026f6e"}], "stats": {"total": 189, "additions": 174, "deletions": 15}, "files": [{"sha": "a67b1717a7eac8d58efaca8eef8527c3b0c49a57", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -257,6 +257,38 @@ impl AnalysisImpl {\n         vec![]\n     }\n \n+    pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, _token: &JobToken) -> Vec<(FileId, TextRange)> {\n+        let root = self.root(file_id);\n+        let file = root.syntax(file_id);\n+        let syntax = file.syntax();\n+\n+        let mut ret = vec![];\n+\n+        // Find the symbol we are looking for\n+        if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n+\n+            // We are only handing local references for now\n+            if let Some(resolved) = resolve_local_name(&file, offset, name_ref) {\n+\n+                ret.push((file_id, resolved.1));\n+\n+                if let Some(fn_def) = find_node_at_offset::<ast::FnDef>(syntax, offset) {\n+\n+                    let refs : Vec<_> = fn_def.syntax().descendants()\n+                        .filter_map(ast::NameRef::cast)\n+                        .filter(|n: &ast::NameRef| resolve_local_name(&file, n.syntax().range().start(), *n) == Some(resolved.clone()))\n+                        .collect();\n+\n+                    for r in refs {\n+                        ret.push((file_id, r.syntax().range()));\n+                    }\n+                }\n+            }\n+        }\n+\n+        ret\n+    }\n+\n     pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n         let root = self.root(file_id);\n         let module_tree = root.module_tree();"}, {"sha": "46cc0722b2cf03278a1bb32877b22d05aeec56e8", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -217,6 +217,9 @@ impl Analysis {\n         self.imp\n             .approximately_resolve_symbol(file_id, offset, token)\n     }\n+    pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, token: &JobToken) -> Vec<(FileId, TextRange)> {\n+        self.imp.find_all_refs(file_id, offset, token)\n+    }\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)\n     }"}, {"sha": "0c2c69ea0da66566d667c58c2b07007d0d196e56", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -10,6 +10,8 @@ use std::sync::Arc;\n use ra_analysis::{\n     Analysis, AnalysisHost, CrateGraph, CrateId, FileId, FileResolver, FnDescriptor, JobHandle,\n };\n+use ra_syntax::TextRange;\n+\n use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n use test_utils::{assert_eq_dbg, extract_offset};\n@@ -225,3 +227,43 @@ fn bar() {\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, Some(1));\n }\n+\n+fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n+    let (offset, code) = extract_offset(text);\n+    let code = code.as_str();\n+\n+    let (_handle, token) = JobHandle::new();\n+    let snap = analysis(&[(\"/lib.rs\", code)]);\n+\n+    snap.find_all_refs(FileId(1), offset, &token)\n+}\n+\n+#[test]\n+fn test_find_all_refs_for_local() {\n+    let code = r#\"\n+    fn main() {\n+        let mut i = 1;\n+        let j = 1;\n+        i = i<|> + j;\n+\n+        {\n+            i = 0;\n+        }\n+\n+        i = 5;\n+    }\"#;\n+\n+    let refs = get_all_refs(code);\n+    assert_eq!(refs.len(), 5);\n+}\n+\n+#[test]\n+fn test_find_all_refs_for_param_inside() {\n+    let code = r#\"\n+    fn foo(i : u32) -> u32 {\n+        i<|>\n+    }\"#;\n+\n+    let refs = get_all_refs(code);\n+    assert_eq!(refs.len(), 2);\n+}\n\\ No newline at end of file"}, {"sha": "f10bdf65717b31b2c3f009ab2e18befdeafa70ef", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -270,7 +270,6 @@ pub fn resolve_local_name<'a>(\n         .filter(|entry| shadowed.insert(entry.name()))\n         .filter(|entry| entry.name() == name_ref.text())\n         .nth(0);\n-    eprintln!(\"ret = {:?}\", ret);\n     ret\n }\n "}, {"sha": "b6436b646c47ca2e8981ee2aabba179e339622fd", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -2,7 +2,7 @@ use languageserver_types::{\n     CodeActionProviderCapability, CompletionOptions, DocumentOnTypeFormattingOptions,\n     ExecuteCommandOptions, FoldingRangeProviderCapability, ServerCapabilities,\n     SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions,\n+    TextDocumentSyncOptions, RenameProviderCapability, RenameOptions\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -27,7 +27,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         definition_provider: Some(true),\n         type_definition_provider: None,\n         implementation_provider: None,\n-        references_provider: None,\n+        references_provider: Some(true),\n         document_highlight_provider: None,\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),\n@@ -40,7 +40,9 @@ pub fn server_capabilities() -> ServerCapabilities {\n             more_trigger_character: None,\n         }),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),\n-        rename_provider: None,\n+        rename_provider: Some(RenameProviderCapability::Options(RenameOptions{\n+            prepare_provider: Some(true)\n+        })),\n         color_provider: None,\n         execute_command_provider: Some(ExecuteCommandOptions {\n             commands: vec![\"apply_code_action\".to_string()],"}, {"sha": "639fe45537a845ea7e8e6b49befb0ea01e8cb3a4", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -4,6 +4,7 @@ use languageserver_types::{\n     CodeActionResponse, Command, CompletionItem, CompletionItemKind, Diagnostic,\n     DiagnosticSeverity, DocumentSymbol, FoldingRange, FoldingRangeKind, FoldingRangeParams,\n     InsertTextFormat, Location, Position, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    RenameParams, WorkspaceEdit, PrepareRenameResponse\n };\n use ra_analysis::{FileId, FoldKind, JobToken, Query, RunnableKind};\n use ra_syntax::text_utils::contains_offset_nonstrict;\n@@ -17,6 +18,8 @@ use crate::{\n     Result,\n };\n \n+use std::collections::HashMap;\n+\n pub fn handle_syntax_tree(\n     world: ServerWorld,\n     params: req::SyntaxTreeParams,\n@@ -460,6 +463,81 @@ pub fn handle_signature_help(\n     }\n }\n \n+pub fn handle_prepare_rename(\n+    world: ServerWorld,\n+    params: req::TextDocumentPositionParams,\n+    token: JobToken,\n+) -> Result<Option<PrepareRenameResponse>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+    let offset = params.position.conv_with(&line_index);\n+\n+    // We support renaming references like handle_rename does.\n+    // In the future we may want to reject the renaming of things like keywords here too.\n+    let refs = world.analysis().find_all_refs(file_id, offset, &token);\n+    if refs.is_empty() {\n+        return Ok(None);\n+    }\n+\n+    let r = refs.first().unwrap();\n+    let loc = to_location(r.0, r.1, &world, &line_index)?;\n+\n+    Ok(Some(PrepareRenameResponse::Range(loc.range)))\n+}\n+\n+pub fn handle_rename(\n+    world: ServerWorld,\n+    params: RenameParams,\n+    token: JobToken,\n+) -> Result<Option<WorkspaceEdit>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+    let offset = params.position.conv_with(&line_index);\n+\n+    if params.new_name.is_empty() {\n+        return Ok(None);\n+    }\n+\n+    let refs = world.analysis().find_all_refs(file_id, offset, &token);\n+    if refs.is_empty() {\n+        return Ok(None);\n+    }\n+\n+    let mut changes = HashMap::new();\n+    for r in refs {\n+        if let Ok(loc) = to_location(r.0, r.1, &world, &line_index) {\n+            changes.entry(loc.uri).or_insert(Vec::new()).push(\n+                TextEdit {\n+                    range: loc.range,\n+                    new_text: params.new_name.clone()\n+                });\n+        }\n+    }\n+\n+    Ok(Some(WorkspaceEdit {\n+        changes: Some(changes),\n+\n+        // TODO: return this instead if client/server support it. See #144\n+        document_changes : None,\n+    }))\n+}\n+\n+pub fn handle_references(\n+    world: ServerWorld,\n+    params: req::ReferenceParams,\n+    token: JobToken,\n+) -> Result<Option<Vec<Location>>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+    let offset = params.position.conv_with(&line_index);\n+\n+    let refs = world.analysis().find_all_refs(file_id, offset, &token);\n+\n+    Ok(Some(refs.into_iter()\n+        .filter_map(|r| to_location(r.0, r.1, &world, &line_index).ok())\n+        .collect()))\n+}\n+\n pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,"}, {"sha": "165f2e78f0398486ae17bcc14c41a924bd93016c", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -248,6 +248,9 @@ fn on_request(\n         .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<req::FoldingRangeRequest>(handlers::handle_folding_range)?\n         .on::<req::SignatureHelpRequest>(handlers::handle_signature_help)?\n+        .on::<req::PrepareRenameRequest>(handlers::handle_prepare_rename)?\n+        .on::<req::Rename>(handlers::handle_rename)?\n+        .on::<req::References>(handlers::handle_references)?\n         .finish();\n     match req {\n         Ok((id, handle)) => {"}, {"sha": "6cd04d84cdaf25f66ea518c826b291b2b3af1c6d", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -7,7 +7,7 @@ pub use languageserver_types::{\n     CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, SignatureHelp, TextDocumentEdit, TextDocumentPositionParams,\n-    TextEdit, WorkspaceSymbolParams,\n+    TextEdit, WorkspaceSymbolParams, ReferenceParams,\n };\n \n pub enum SyntaxTree {}"}, {"sha": "fe304623fea3f219ce1e91c8f6c0fd0a38b549c9", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -2074,8 +2074,7 @@\n         \"semver\": {\n             \"version\": \"5.5.1\",\n             \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.5.1.tgz\",\n-            \"integrity\": \"sha512-PqpAxfrEhlSUWge8dwIp4tZnQ25DIOthpiaHNIthsjEFQD6EvqUKUDM7L8O2rShkFccYo1VjJR0coWfNkCubRw==\",\n-            \"dev\": true\n+            \"integrity\": \"sha512-PqpAxfrEhlSUWge8dwIp4tZnQ25DIOthpiaHNIthsjEFQD6EvqUKUDM7L8O2rShkFccYo1VjJR0coWfNkCubRw==\"\n         },\n         \"source-map\": {\n             \"version\": \"0.6.1\",\n@@ -2509,9 +2508,9 @@\n             }\n         },\n         \"vsce\": {\n-            \"version\": \"1.51.1\",\n-            \"resolved\": \"https://registry.npmjs.org/vsce/-/vsce-1.51.1.tgz\",\n-            \"integrity\": \"sha512-Hf2HE9O/MRQHxUUgWHAm7mOkz0K5swuF2smaE/sP7+OWp/5DdIPFwmLEYCCZHxG25l3GBRoO0dAL8S5w//et+g==\",\n+            \"version\": \"1.52.0\",\n+            \"resolved\": \"https://registry.npmjs.org/vsce/-/vsce-1.52.0.tgz\",\n+            \"integrity\": \"sha512-k+KYoTx1sacpYf2BHTA7GN82MNSlf2N4EuppFWwtTN/Sh6fWzIJafxxCNBCDK0H+5NDWfRGZheBY8C3/HOE2ZA==\",\n             \"dev\": true,\n             \"requires\": {\n                 \"cheerio\": \"1.0.0-rc.2\",\n@@ -2561,10 +2560,11 @@\n             \"integrity\": \"sha512-perEnXQdQOJMTDFNv+UF3h1Y0z4iSiaN9jIlb0OqIYgosPCZGYh/MCUlkFtV2668PL69lRDO32hmvL2yiidUYg==\"\n         },\n         \"vscode-languageclient\": {\n-            \"version\": \"4.4.2\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-4.4.2.tgz\",\n-            \"integrity\": \"sha512-9TUzsg1UM6n1UEyPlWbDf7tK1wJAK7UGFRmGDN8sz4KmbbDiVRh6YicaB/5oRSVTpuV47PdJpYlOl3SJ0RiK1Q==\",\n+            \"version\": \"5.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-5.1.1.tgz\",\n+            \"integrity\": \"sha512-jMxshi+BPRQFNG8GB00dJv7ldqMda0be26laYYll/udtJuHbog6RqK10GSxHWDN0PgY0b0m5fePyTk3bq8a0TA==\",\n             \"requires\": {\n+                \"semver\": \"5.5.1\",\n                 \"vscode-languageserver-protocol\": \"3.13.0\"\n             }\n         },"}, {"sha": "ea84a1ccb408b23c399cf06b0e958ee151b97261", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/2ded93a78a108c1f7e0dd0a9036c88c786f21dce/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=2ded93a78a108c1f7e0dd0a9036c88c786f21dce", "patch": "@@ -28,7 +28,7 @@\n         \"singleQuote\": true\n     },\n     \"dependencies\": {\n-        \"vscode-languageclient\": \"^4.4.0\"\n+        \"vscode-languageclient\": \"^5.1.1\"\n     },\n     \"devDependencies\": {\n         \"@types/mocha\": \"^2.2.42\",\n@@ -37,7 +37,7 @@\n         \"tslint\": \"^5.11.0\",\n         \"tslint-config-prettier\": \"^1.15.0\",\n         \"typescript\": \"^2.6.1\",\n-        \"vsce\": \"^1.51.1\",\n+        \"vsce\": \"^1.52.0\",\n         \"vscode\": \"^1.1.21\"\n     },\n     \"activationEvents\": ["}]}