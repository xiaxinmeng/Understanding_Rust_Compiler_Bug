{"sha": "7e4ff91403dd4752cc643e9dff55d93076e4802c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNGZmOTE0MDNkZDQ3NTJjYzY0M2U5ZGZmNTVkOTMwNzZlNDgwMmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T14:00:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T14:00:51Z"}, "message": "Rollup merge of #65192 - estebank:restrict-bound, r=matthewjasper\n\nUse structured suggestion for restricting bounds\n\nWhen a trait bound is not met and restricting a type parameter would\nmake the restriction hold, use a structured suggestion pointing at an\nappropriate place (type param in param list or `where` clause).\n\nAccount for opaque parameters where instead of suggesting extending\nthe `where` clause, we suggest appending the new restriction:\n`fn foo(impl Trait + UnmetTrait)`. Fix #64565, fix #41817, fix #24354,\ncc #26026, cc #37808, cc #24159, fix #37138, fix #24354, cc #20671.", "tree": {"sha": "e16ec2df278bb50ca2d3e2d48ceb7157cbf3b8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16ec2df278bb50ca2d3e2d48ceb7157cbf3b8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4ff91403dd4752cc643e9dff55d93076e4802c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqxcTCRBK7hj4Ov3rIwAAdHIIAA+XAb5edipQvFmDgwK6DJXR\ncr4gnDilIWlsZ+FseTKbn9p4u71LZ0CLvcE732Qfe3Va9JbHaCMOnJEjRNuSnKYo\n1GosXaTifTttrM9fEMhHr+FptBWWKv/XWk24gCWmF8KMVTqMqIvs6N4weqSHeYQL\nvXsIOnm4qHkIBwMFW0EUvndxCg83HxDQ16EXoqoiwItXZ6zWntEhvSfpuWrgjhNn\ntpPB9PZ3AOTS42yG8AwQvtUjDx4X/YwpxYyzrZxez1WhN0julMtZtuEGNq6zREov\nwIIxVn05Pq8A+MV7TLIX0iyb4shG2MnOIbaotSkvdxFZB+yQ//1FB1QXM31BIe0=\n=Ez6q\n-----END PGP SIGNATURE-----\n", "payload": "tree e16ec2df278bb50ca2d3e2d48ceb7157cbf3b8bb\nparent 53a3bfc82bb962b4b604d489646567714fe4e2a2\nparent c6dce7802dc49a2e4b6049ad8971ba6f18252e64\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571493651 +0200\ncommitter GitHub <noreply@github.com> 1571493651 +0200\n\nRollup merge of #65192 - estebank:restrict-bound, r=matthewjasper\n\nUse structured suggestion for restricting bounds\n\nWhen a trait bound is not met and restricting a type parameter would\nmake the restriction hold, use a structured suggestion pointing at an\nappropriate place (type param in param list or `where` clause).\n\nAccount for opaque parameters where instead of suggesting extending\nthe `where` clause, we suggest appending the new restriction:\n`fn foo(impl Trait + UnmetTrait)`. Fix #64565, fix #41817, fix #24354,\ncc #26026, cc #37808, cc #24159, fix #37138, fix #24354, cc #20671.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4ff91403dd4752cc643e9dff55d93076e4802c", "html_url": "https://github.com/rust-lang/rust/commit/7e4ff91403dd4752cc643e9dff55d93076e4802c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4ff91403dd4752cc643e9dff55d93076e4802c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a3bfc82bb962b4b604d489646567714fe4e2a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a3bfc82bb962b4b604d489646567714fe4e2a2", "html_url": "https://github.com/rust-lang/rust/commit/53a3bfc82bb962b4b604d489646567714fe4e2a2"}, {"sha": "c6dce7802dc49a2e4b6049ad8971ba6f18252e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6dce7802dc49a2e4b6049ad8971ba6f18252e64", "html_url": "https://github.com/rust-lang/rust/commit/c6dce7802dc49a2e4b6049ad8971ba6f18252e64"}], "stats": {"total": 1090, "additions": 847, "deletions": 243}, "files": [{"sha": "568e051aaf08fc750e618bad84e220338dde626b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -669,6 +669,12 @@ impl WhereClause {\n             Some(self.span)\n         }\n     }\n+\n+    /// The `WhereClause` under normal circumstances points at either the predicates or the empty\n+    /// space where the `where` clause should be. Only of use for diagnostic suggestions.\n+    pub fn span_for_predicates_or_empty_place(&self) -> Span {\n+        self.span\n+    }\n }\n \n /// A single predicate in a where-clause."}, {"sha": "daa4a215a238a4623f1f73685ce4e1bb112dc4b4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 174, "deletions": 2, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -715,8 +715,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             // these notes will often be of the form\n                             //     \"the type `T` can't be frobnicated\"\n                             // which is somewhat confusing.\n-                            err.help(&format!(\"consider adding a `where {}` bound\",\n-                                              trait_ref.to_predicate()));\n+                            self.suggest_restricting_param_bound(\n+                                &mut err,\n+                                &trait_ref,\n+                                obligation.cause.body_id,\n+                            );\n                         } else {\n                             if !have_alt_message {\n                                 // Can't show anything else useful, try to find similar impls.\n@@ -960,6 +963,175 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_restricting_param_bound(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::PolyTraitRef<'_>,\n+        body_id: hir::HirId,\n+    ) {\n+        let self_ty = trait_ref.self_ty();\n+        let (param_ty, projection) = match &self_ty.kind {\n+            ty::Param(_) => (true, None),\n+            ty::Projection(projection) => (false, Some(projection)),\n+            _ => return,\n+        };\n+\n+        let mut suggest_restriction = |generics: &hir::Generics, msg| {\n+            let span = generics.where_clause.span_for_predicates_or_empty_place();\n+            if !span.from_expansion() && span.desugaring_kind().is_none() {\n+                err.span_suggestion(\n+                    generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi(),\n+                    &format!(\"consider further restricting {}\", msg),\n+                    format!(\n+                        \"{} {} \",\n+                        if !generics.where_clause.predicates.is_empty() {\n+                            \",\"\n+                        } else {\n+                            \" where\"\n+                        },\n+                        trait_ref.to_predicate(),\n+                    ),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        };\n+\n+        // FIXME: Add check for trait bound that is already present, particularly `?Sized` so we\n+        //        don't suggest `T: Sized + ?Sized`.\n+        let mut hir_id = body_id;\n+        while let Some(node) = self.tcx.hir().find(hir_id) {\n+            match node {\n+                hir::Node::TraitItem(hir::TraitItem {\n+                    generics,\n+                    kind: hir::TraitItemKind::Method(..), ..\n+                }) if param_ty && self_ty == self.tcx.types.self_param => {\n+                    // Restricting `Self` for a single method.\n+                    suggest_restriction(&generics, \"`Self`\");\n+                    return;\n+                }\n+\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(_, _, generics, _), ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem {\n+                    generics,\n+                    kind: hir::TraitItemKind::Method(..), ..\n+                }) |\n+                hir::Node::ImplItem(hir::ImplItem {\n+                    generics,\n+                    kind: hir::ImplItemKind::Method(..), ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(_, _, generics, _, _), ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(_, _, _, generics, ..), ..\n+                }) if projection.is_some() => {\n+                    // Missing associated type bound.\n+                    suggest_restriction(&generics, \"the associated type\");\n+                    return;\n+                }\n+\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(_, generics), span, .. }) |\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(_, generics), span, .. }) |\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(_, generics), span, .. }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(_, _, generics, ..), span, ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(_, _, _, generics, ..), span, ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(_, _, generics, _), span, ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::TyAlias(_, generics), span, ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::TraitAlias(generics, _), span, ..\n+                }) |\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }), span, ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem { generics, span, .. }) |\n+                hir::Node::ImplItem(hir::ImplItem { generics, span, .. })\n+                if param_ty => {\n+                    // Missing generic type parameter bound.\n+                    let restrict_msg = \"consider further restricting this bound\";\n+                    let param_name = self_ty.to_string();\n+                    for param in generics.params.iter().filter(|p| {\n+                        &param_name == std::convert::AsRef::<str>::as_ref(&p.name.ident().as_str())\n+                    }) {\n+                        if param_name.starts_with(\"impl \") {\n+                            // `impl Trait` in argument:\n+                            // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n+                            err.span_suggestion(\n+                                param.span,\n+                                restrict_msg,\n+                                // `impl CurrentTrait + MissingTrait`\n+                                format!(\"{} + {}\", param.name.ident(), trait_ref),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if generics.where_clause.predicates.is_empty() &&\n+                                param.bounds.is_empty()\n+                        {\n+                            // If there are no bounds whatsoever, suggest adding a constraint\n+                            // to the type parameter:\n+                            // `fn foo<T>(t: T) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n+                            err.span_suggestion(\n+                                param.span,\n+                                \"consider restricting this bound\",\n+                                format!(\"{}\", trait_ref.to_predicate()),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else if !generics.where_clause.predicates.is_empty() {\n+                            // There is a `where` clause, so suggest expanding it:\n+                            // `fn foo<T>(t: T) where T: Debug {}` \u2192\n+                            // `fn foo<T>(t: T) where T: Debug, T: Trait {}`\n+                            err.span_suggestion(\n+                                generics.where_clause.span().unwrap().shrink_to_hi(),\n+                                &format!(\n+                                    \"consider further restricting type parameter `{}`\",\n+                                    param_name,\n+                                ),\n+                                format!(\", {}\", trait_ref.to_predicate()),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            // If there is no `where` clause lean towards constraining to the\n+                            // type parameter:\n+                            // `fn foo<X: Bar, T>(t: T, x: X) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n+                            // `fn foo<T: Bar>(t: T) {}` \u2192 `fn foo<T: Bar + Trait>(t: T) {}`\n+                            let sp = param.span.with_hi(span.hi());\n+                            let span = self.tcx.sess.source_map()\n+                                .span_through_char(sp, ':');\n+                            if sp != param.span && sp != span {\n+                                // Only suggest if we have high certainty that the span\n+                                // covers the colon in `foo<T: Trait>`.\n+                                err.span_suggestion(span, restrict_msg, format!(\n+                                    \"{} + \",\n+                                    trait_ref.to_predicate(),\n+                                ), Applicability::MachineApplicable);\n+                            } else {\n+                                err.span_label(param.span, &format!(\n+                                    \"consider adding a `where {}` bound\",\n+                                    trait_ref.to_predicate(),\n+                                ));\n+                            }\n+                        }\n+                        return;\n+                    }\n+                }\n+\n+                hir::Node::Crate => return,\n+\n+                _ => {}\n+            }\n+\n+            hir_id = self.tcx.hir().get_parent_item(hir_id);\n+        }\n+    }\n+\n     /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n     /// suggestion to borrow the initializer in order to use have a slice instead.\n     fn suggest_borrow_on_unsized_slice("}, {"sha": "677e2ea3566281fa0800b1c9bacd6e9ef04d980f", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -350,11 +350,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If the span is from a macro, then it's hard to extract the text\n         // and make a good suggestion, so don't bother.\n-        let is_desugaring = match sp.desugaring_kind() {\n-            Some(k) => sp.is_desugaring(k),\n-            None => false\n-        };\n-        let is_macro = sp.from_expansion() && !is_desugaring;\n+        let is_macro = sp.from_expansion() && sp.desugaring_kind().is_none();\n \n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();"}, {"sha": "c258892057bf26be1598d0445d5f34feedc209cc", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array = [4; <A as Foo>::Y];\n    |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: Foo` bound\n \n error: aborting due to previous error\n "}, {"sha": "f6c8e99e27a8158cfd0276f0d789350a498a9a50", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array: [u32; <A as Foo>::Y];\n    |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: Foo` bound\n \n error: aborting due to previous error\n "}, {"sha": "9f6a73cfe39104f15fe8a5564f00e2747f0dc566", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -9,7 +9,10 @@ LL | impl Case1 for S1 {\n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -19,15 +22,17 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator` bound\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -37,15 +42,17 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send` bound\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n LL |   trait Case1 {\n    |   ----------- required by `Case1`\n ...\n-LL | / fn assume_case1<T: Case1>() {\n+LL |   fn assume_case1<T: Case1>() {\n+   |   ^                          - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n+   |  _|\n+   | |\n LL | |\n LL | |\n LL | |\n@@ -55,7 +62,6 @@ LL | | }\n    | |_^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n-   = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync` bound\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1"}, {"sha": "cc47f31d0045687a8a7f38a27756fb1635ba9398", "filename": "src/test/ui/associated-types/associated-types-bound-failure.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+// Test equality constraints on associated types in a where clause.\n+#![allow(dead_code)]\n+\n+pub trait ToInt {\n+    fn to_int(&self) -> isize;\n+}\n+\n+pub trait GetToInt\n+{\n+    type R;\n+\n+    fn get(&self) -> <Self as GetToInt>::R;\n+}\n+\n+fn foo<G>(g: G) -> isize\n+    where G : GetToInt, <G as GetToInt>::R: ToInt \n+{\n+    ToInt::to_int(&g.get()) //~ ERROR E0277\n+}\n+\n+fn bar<G : GetToInt>(g: G) -> isize\n+    where G::R : ToInt\n+{\n+    ToInt::to_int(&g.get()) // OK\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "31e073cc7a8bde695fe07ad887dae1c4677ea596", "filename": "src/test/ui/associated-types/associated-types-bound-failure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n // Test equality constraints on associated types in a where clause.\n+#![allow(dead_code)]\n \n pub trait ToInt {\n     fn to_int(&self) -> isize;"}, {"sha": "c420c86a2758f1b696d9df295e80dee25902750e", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,13 +1,14 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n-  --> $DIR/associated-types-bound-failure.rs:17:19\n+  --> $DIR/associated-types-bound-failure.rs:19:19\n    |\n LL |     fn to_int(&self) -> isize;\n    |     -------------------------- required by `ToInt::to_int`\n ...\n+LL |     where G : GetToInt\n+   |                       - help: consider further restricting the associated type: `, <G as GetToInt>::R: ToInt`\n+LL | {\n LL |     ToInt::to_int(&g.get())\n    |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n-   |\n-   = help: consider adding a `where <G as GetToInt>::R: ToInt` bound\n \n error: aborting due to previous error\n "}, {"sha": "aa23326506f63e6b2f097a41a5048205104d4739", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+trait Get {\n+    type Value;\n+    fn get(&self) -> <Self as Get>::Value;\n+}\n+\n+trait Other {\n+    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get  {}\n+    //~^ ERROR the trait bound `Self: Get` is not satisfied\n+}\n+\n+fn main() {\n+}"}, {"sha": "0f6cea8e69fcf29ef4e43816581e868427216875", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;"}, {"sha": "83d5390417e77c771b336a27c610e6ffa69d0ff4", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-for-unimpl-trait.rs:7:5\n+  --> $DIR/associated-types-for-unimpl-trait.rs:10:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n+   |     |                                                       |\n+   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "0b8b7fab1359ffcaafd27b7d0c530f364fb98ab4", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `T: Foo<usize>` is not satisfied\n   --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:10:12\n    |\n+LL | fn f<T:Foo<isize>>(t: &T) {\n+   |      -- help: consider further restricting this bound: `T: Foo<usize> +`\n LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<usize>` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Foo<usize>` bound\n \n error: aborting due to previous error\n "}, {"sha": "78198322913c7579fd92590525fb33c46843e0d6", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `T: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-bound.rs:11:5\n    |\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Get` bound\n+   |     ^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |       |\n+   |     |       help: consider restricting this bound: `T: Get`\n+   |     the trait `Get` is not implemented for `T`\n \n error: aborting due to previous error\n "}, {"sha": "6aa0403088d3c1586facd10853ced9358efacd3e", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n+   |     |                                                       |\n+   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "8c242be979611c32df6c6e44b85592177909c89b", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,10 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n+   |     |                                                       |\n+   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:22:5"}, {"sha": "f357045a456e604be9652adf46c5e958ed761756", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+// Check that we get an error when you use `<Self as Get>::Value` in\n+// the trait definition even if there is no default method.\n+\n+trait Get {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get ;\n+    //~^ ERROR E0277\n+}\n+\n+impl Get for () {\n+    type Value = f32;\n+}\n+\n+impl Get for f64 {\n+    type Value = u32;\n+}\n+\n+impl Other for () {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+impl Other for f64 {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+fn main() { }"}, {"sha": "549fc8fc618e03d7b2155a2c294ac01f9ddd935b", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition even if there is no default method.\n "}, {"sha": "cb01488fa34d46d417c1c6269199dbdea2ceaee6", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:9:5\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:5\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Get` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                                                       |\n+   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n+   |     the trait `Get` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "f780d171fee8e029030a462fb5a6fd0370af26a1", "filename": "src/test/ui/associated-types/associated-types-unsized.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+trait Get {\n+    type Value: ?Sized;\n+    fn get(&self) -> <Self as Get>::Value;\n+}\n+\n+fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized  {\n+    let x = t.get(); //~ ERROR the size for values of type\n+}\n+\n+fn main() {\n+}"}, {"sha": "bdba4c7ff16a10344f5465b87147da0cb55de27b", "filename": "src/test/ui/associated-types/associated-types-unsized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n trait Get {\n     type Value: ?Sized;\n     fn get(&self) -> <Self as Get>::Value;"}, {"sha": "2352ac4ad3822cdd0770c326b4d4ecf76dfb3815", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,12 +1,13 @@\n error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n-  --> $DIR/associated-types-unsized.rs:7:9\n+  --> $DIR/associated-types-unsized.rs:10:9\n    |\n+LL | fn foo<T:Get>(t: T) {\n+   |                    - help: consider further restricting the associated type: `where <T as Get>::Value: std::marker::Sized`\n LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "740667f1466801c4605a3ddf6ce2967021c9de91", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,11 +1,12 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/bad-method-typaram-kind.rs:2:7\n    |\n+LL | fn foo<T:'static>() {\n+   |        -- help: consider further restricting this bound: `T: std::marker::Send +`\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "5be6ab05d6607d014eadda611c8bc6f5494cd116", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,20 +2,22 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |       --               ^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because it appears within the type `(T,)`\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |                ^^^ `T` cannot be shared between threads safely\n+   |       --       ^^^ `T` cannot be shared between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Sync +`\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because it appears within the type `(T, T)`\n \n error: aborting due to 2 previous errors"}, {"sha": "8cce9bfdf52a82915d1ff85c07e1f0eb9f557fb7", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,10 +2,11 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |       --              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because it appears within the type `X<T>`\n \n error: aborting due to previous error"}, {"sha": "4381a5b8682628a4274b9dd262db6326180e9ec2", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,10 +2,11 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |                        ^^^ `T` cannot be sent between threads safely\n+   |       --               ^^^ `T` cannot be sent between threads safely\n+   |       |\n+   |       help: consider further restricting this bound: `T: std::marker::Send +`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "3c8f637e13369722bcb1157496ac9e677851272c", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,14 +4,16 @@ error[E0277]: `F` cannot be sent between threads safely\n LL |   struct X<F> where F: FnOnce() + 'static + Send {\n    |   ---------------------------------------------- required by `X`\n ...\n-LL | / fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+LL |   fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+   |   ^                                                    - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n+   |  _|\n+   | |\n LL | |\n LL | |     return X { field: blk };\n LL | | }\n    | |_^ `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n-   = help: consider adding a `where F: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "05d5bb1e8d5a8d35fdada3b1859c57d02022f3cb", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,11 +4,13 @@ error[E0277]: `F` cannot be shared between threads safely\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    |    ----------------                              ---- required by this bound in `take_const_owned`\n ...\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send {\n+   |                                                - help: consider further restricting type parameter `F`: `, F: std::marker::Sync`\n+LL |     take_any(f);\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n-   = help: consider adding a `where F: std::marker::Sync` bound\n \n error: aborting due to previous error\n "}, {"sha": "2fb9977f4d700a87d0fed2afab0fbc2ec5fc5f06", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -16,26 +16,30 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n    |\n LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n+LL | \n+LL | impl<A, B> Foo<A, B> {\n+   |      - help: consider restricting this bound: `A: std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where A: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n+LL | \n+LL | impl<A, B> Foo<A, B> {\n+   |         - help: consider restricting this bound: `B: std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `B`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where B: std::marker::Sized` bound\n \n error: aborting due to 3 previous errors\n "}, {"sha": "40db575eabd38c5c278385ddb7877e446521e0c9", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,23 +1,25 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n+LL | fn test1<T: ?Sized + Foo>(t: &T) {\n+   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n+LL | fn test2<T: ?Sized + Foo>(t: &T) {\n+   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time"}, {"sha": "afcb467ad471170a2e9503b2edf7404dc1218182", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -6,10 +6,11 @@ LL | fn want_bar_for_any_ccx<B>(b: &B)\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ...\n+LL |     where B : Qux\n+   |                  - help: consider further restricting type parameter `B`: `, for<'ccx> B: Bar<'ccx>`\n+...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to previous error\n "}, {"sha": "20913b4f28c8e7a3da9aa9ed4d874e126a1f5ff1", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,28 +1,30 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n+LL |     where F : Foo<'x>\n+   |                      - help: consider further restricting type parameter `F`: `, for<'tcx> F: Foo<'tcx>`\n+...\n LL |     want_foo_for_any_tcx(f);\n    |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n    |    --------------------\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ------------------- required by this bound in `want_foo_for_any_tcx`\n-   |\n-   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n+LL |     where B : Bar<'x>\n+   |                      - help: consider further restricting type parameter `B`: `, for<'ccx> B: Bar<'ccx>`\n+...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n    |    --------------------\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d8ee61b5ba13926040563ae61e362b76e227449", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:5\n    |\n+LL | impl<S: Default> Bar for S {\n+   |      -- help: consider further restricting this bound: `S: std::marker::Copy +`\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n    |\n-   = help: consider adding a `where S: std::marker::Copy` bound\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n \n@@ -13,8 +14,10 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n+...\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |            -- help: consider further restricting this bound: `T: std::marker::Copy +`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "31376f2d1be0fa557a43dfdacb6521eaecbf69e5", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -7,13 +7,13 @@ LL |   trait From<Src> {\n LL | /     fn to<Dst>(\n LL | |         self\n LL | |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n+   | |                                                           - help: consider further restricting `Self`: `, Self: std::marker::Sized`\n LL | |         From::from(self)\n LL | |     }\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Self: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "50fdf2d6185be93f30e276adb11f6f8ee27a01d6", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,9 +5,9 @@ LL | pub struct Foo<T: Bound>(T);\n    | ---------------------------- required by `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n-   |         ^^^^^^ the trait `Bound` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Bound` bound\n+   |      -  ^^^^^^ the trait `Bound` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: Bound`\n \n error: aborting due to previous error\n "}, {"sha": "283a5e04a8b6f8d19199e5cb28e65719999c9731", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,11 +1,12 @@\n error[E0277]: `<P as Process<'_>>::Item` is not an iterator\n   --> $DIR/issue-22872.rs:20:40\n    |\n+LL | fn push_process<P>(process: P) where P: Process<'static> {\n+   |                                                         - help: consider further restricting the associated type: `, <P as Process<'_>>::Item: std::iter::Iterator`\n LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<P as Process<'_>>::Item`\n-   = help: consider adding a `where <P as Process<'_>>::Item: std::iter::Iterator` bound\n    = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n    = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n "}, {"sha": "553041c5106c56c3102398c83d54e46b7976376b", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,12 +1,13 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/issue-27060-2.rs:3:5\n    |\n+LL | pub struct Bad<T: ?Sized> {\n+   |                -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     data: T,\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n \n error: aborting due to previous error"}, {"sha": "fbc72d063f37cc687a1862ecaf9446f38193852b", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-27078.rs:5:12\n    |\n LL |     fn foo(self) -> &'static i32 {\n-   |            ^^^^ doesn't have a size known at compile-time\n+   |            ^^^^                 - help: consider further restricting `Self`: `where Self: std::marker::Sized`\n+   |            |\n+   |            doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "0687fc940dec1ce9b5642ae9aa055a212d92f613", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,7 +4,6 @@ error[E0277]: the trait bound `<Col as Expression>::SqlType: NotNull` is not sat\n LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n-   = help: consider adding a `where <Col as Expression>::SqlType: NotNull` bound\n    = note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n \n error: aborting due to previous error"}, {"sha": "6688203147eaf2ea38323f9dd07304e66f7119d2", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `<Self as std::ops::Deref>::Target` ca\n   --> $DIR/issue-42312.rs:4:29\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref {}\n-   |                             ^ doesn't have a size known at compile-time\n+   |                             ^                - help: consider further restricting the associated type: `, <Self as std::ops::Deref>::Target: std::marker::Sized`\n+   |                             |\n+   |                             doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "e91e53499ce6c1f83218c9a96e24deb4449c5a05", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:13:9\n    |\n LL | impl<T> Complete for T {\n-   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "5ac32041bce481291119238c5dc3e2c6421c4d26", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:8:9\n    |\n LL | impl<T> Complete for T {}\n-   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: std::marker::Copy`\n \n error: aborting due to previous error\n "}, {"sha": "82efa83990553e16cc68326b257343b6710af87d", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,42 +1,50 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n "}, {"sha": "777a553c2a58a7900cdaf40da1ec43fafc7e7b4c", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,42 +1,50 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n+LL | fn f<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Send`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n+LL | fn g<T>(val: T) {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n "}, {"sha": "6acc09b62c811cf97a2b3ab4a34e7134cdc9f8db", "filename": "src/test/ui/partialeq_help.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpartialeq_help.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,7 +5,6 @@ LL |     a == b;\n    |       ^^ no implementation for `&T == T`\n    |\n    = help: the trait `std::cmp::PartialEq<T>` is not implemented for `&T`\n-   = help: consider adding a `where &T: std::cmp::PartialEq<T>` bound\n \n error: aborting due to previous error\n "}, {"sha": "4d9d06b8986d5c6b15c94cb52cd12a184b149776", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -3,12 +3,13 @@ error[E0277]: `T` cannot be shared between threads safely\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n-...\n+LL | \n+LL | fn not_sync<T>(x: Guard<T>) {\n+   |             - help: consider restricting this bound: `T: std::marker::Sync`\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n@@ -19,11 +20,12 @@ error[E0277]: `T` cannot be shared between threads safely\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n ...\n+LL | fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n+   |                    - help: consider restricting this bound: `T: std::marker::Sync`\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Sync` bound\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`"}, {"sha": "5275b7b1ddfa57e11fa37710d48c8ffc448a76b9", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n LL | default impl<U> Foo<'static, U> for () {}\n-   |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::cmp::Eq` bound\n+   |              -  ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n+   |              |\n+   |              help: consider restricting this bound: `U: std::cmp::Eq`\n \n error: aborting due to previous error\n "}, {"sha": "265ccb3125ca3b015d2c9e7009e5932f72c0d6cb", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,25 @@\n+// Running rustfix would cause the same suggestion to be applied multiple times, which results in\n+// invalid code.\n+\n+trait Parent {\n+    type Ty;\n+    type Assoc: Child<Self::Ty>;\n+}\n+\n+trait Child<T> {}\n+\n+struct ChildWrapper<T>(T);\n+\n+impl<A, T> Child<A> for ChildWrapper<T> where T: Child<A> {}\n+\n+struct ParentWrapper<T>(T);\n+\n+impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+    //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+    //~| ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+    type Ty = A;\n+    type Assoc = ChildWrapper<T::Assoc>;\n+    //~^ ERROR the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "bdea8ab97e5b52f163171b8d9377ebce10c624b7", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:1\n+   |\n+LL |   trait Parent {\n+   |   ------------ required by `Parent`\n+...\n+LL |   impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |   ^                                                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |  _|\n+   | |\n+LL | |\n+LL | |\n+LL | |     type Ty = A;\n+LL | |     type Assoc = ChildWrapper<T::Assoc>;\n+LL | |\n+LL | | }\n+   | |_^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:17:28\n+   |\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                            ^^^^^^                     - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+   |                            |\n+   |                            the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |\n+   = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n+\n+error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n+  --> $DIR/missing-assoc-type-bound-restriction.rs:21:5\n+   |\n+LL | trait Parent {\n+   | ------------ required by `Parent`\n+...\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n+...\n+LL |     type Assoc = ChildWrapper<T::Assoc>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c4ebfbe922c094182ecbe9d5a65302421bf5f154", "filename": "src/test/ui/suggestions/restrict-type-argument.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,31 @@\n+fn is_send<T: Send>(val: T) {}\n+\n+fn use_impl_sync(val: impl Sync) {\n+    is_send(val); //~ ERROR `impl Sync` cannot be sent between threads safely\n+}\n+\n+fn use_where<S>(val: S) where S: Sync {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound<S: Sync>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound_2<\n+    S // Make sure we can synthezise a correct suggestion span for this case\n+    :\n+    Sync\n+>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn use_unbound<S>(val: S) {\n+    is_send(val); //~ ERROR `S` cannot be sent between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "d6840ca4d7265d3c5ec1b1f9456b8ac8a1adf309", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,83 @@\n+error[E0277]: `impl Sync` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:4:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+LL | \n+LL | fn use_impl_sync(val: impl Sync) {\n+   |                       --------- help: consider further restricting this bound: `impl Sync + std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `impl Sync` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:8:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_where<S>(val: S) where S: Sync {\n+   |                                      - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:12:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_bound<S: Sync>(val: S) {\n+   |              -- help: consider further restricting this bound: `S: std::marker::Send +`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:20:13\n+   |\n+LL |   fn is_send<T: Send>(val: T) {}\n+   |      -------    ---- required by this bound in `is_send`\n+...\n+LL | /     S // Make sure we can synthezise a correct suggestion span for this case\n+LL | |     :\n+   | |_____- help: consider further restricting this bound: `S: std::marker::Send +`\n+...\n+LL |       is_send(val);\n+   |               ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:24:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n+   |                                                                 - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error[E0277]: `S` cannot be sent between threads safely\n+  --> $DIR/restrict-type-argument.rs:28:13\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n+...\n+LL | fn use_unbound<S>(val: S) {\n+   |                - help: consider restricting this bound: `S: std::marker::Send`\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `S`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4355a517bd724dad62cbafa094128ed54d7012f0", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,9 +4,10 @@ error[E0277]: the trait bound `T: Foo` is not satisfied\n LL | trait A<T: Foo> {}\n    | --------------- required by `A`\n LL | trait B<T> = A<T>;\n-   | ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Foo` bound\n+   | ^^^^^^^^-^^^^^^^^^\n+   | |       |\n+   | |       help: consider restricting this bound: `T: Foo`\n+   | the trait `Foo` is not implemented for `T`\n \n error: aborting due to previous error\n "}, {"sha": "96bbd1f3e4f1753add73e5010fcab1dd0c79b6cf", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,9 +5,9 @@ LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n LL | impl<T> Foo<T> {\n-   |         ^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Trait` bound\n+   |      -  ^^^^^^ the trait `Trait` is not implemented for `T`\n+   |      |\n+   |      help: consider restricting this bound: `T: Trait`\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n@@ -33,21 +33,21 @@ error[E0277]: the trait bound `U: Trait` is not satisfied\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n+LL | struct Badness<U> {\n+   |                - help: consider restricting this bound: `U: Trait`\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: Trait` bound\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n    | ----------------- required by `Bar`\n ...\n+LL | enum MoreBadness<V> {\n+   |                  - help: consider restricting this bound: `V: Trait`\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n-   |\n-   = help: consider adding a `where V: Trait` bound\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5"}, {"sha": "f1004ea9dc6ee3e0eb823048ada3f9db22f2aaec", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:9:20\n    |\n+LL | fn check<T: Iterator, U: ?Sized>() {\n+   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n    | \n@@ -11,11 +14,13 @@ LL | pub const fn size_of<T>() -> usize {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where U: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:12:5\n    |\n+LL | fn check<T: Iterator, U: ?Sized>() {\n+   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    | \n@@ -26,7 +31,6 @@ LL | pub const fn size_of<T>() -> usize {\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n@@ -35,7 +39,6 @@ error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n    |\n-   = help: consider adding a `where u64: std::convert::From<T>` bound\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n@@ -44,7 +47,6 @@ error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n    |\n-   = help: consider adding a `where u64: std::convert::From<<T as std::iter::Iterator>::Item>` bound\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied"}, {"sha": "85c7a55c31379c14bf696804401ed5890d9fbe5a", "filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -7,10 +7,10 @@ LL |     c.same_as(22)\n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:30:7\n    |\n+LL | fn with_trait<C:CompareToInts>(c: &C) -> bool {\n+   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n-   |\n-   = help: consider adding a `where C: CompareTo<i32>` bound\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n@@ -27,10 +27,10 @@ error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n ...\n+LL | fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n+   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n-   |\n-   = help: consider adding a `where C: CompareTo<i32>` bound\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:42:23"}, {"sha": "63c07224353e2e018343760e098e2b0834a031bc", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -9,8 +9,10 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+...\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                   - help: consider restricting this bound: `T: Trait`\n    |\n-   = help: consider adding a `where T: Trait` bound\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "ba892f6ed7c7b7918811f34d0816e7fd1d92973a", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -15,19 +15,23 @@ error[E0277]: `U` doesn't implement `std::fmt::Debug`\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+...\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                     - help: consider restricting this bound: `U: std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n-   = help: consider adding a `where U: std::fmt::Debug` bound\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:14:1\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+...\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                         - help: consider restricting this bound: `V: std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n-   = help: consider adding a `where V: std::fmt::Debug` bound\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 4 previous errors"}, {"sha": "6802bc38b89c9fce2598826baec09d3d1edd6ab2", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -52,9 +52,10 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | trait Super<T: Copy> { }\n    | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n+   | ^^^^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |          |\n+   | |          help: consider restricting this bound: `T: std::marker::Copy`\n+   | the trait `std::marker::Copy` is not implemented for `T`\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "7ce249a60b85eefa6bb0f11f5ac8b21c157719b3", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,21 +4,21 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n+LL |     fn test<U>(u: U) -> Self {\n+   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Tr<U>` bound\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:16:9\n    |\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n+LL |     fn test<U>(u: U) -> Self {\n+   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: Tr<U>` bound\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a108d880bed3df1f4dbc5578c9d5dacc3986608", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+// Test that we do not consider associated types to be sendable without\n+// some applicable trait bound (and we don't ICE).\n+#![allow(dead_code)]\n+\n+trait Trait {\n+    type AssocType;\n+    fn dummy(&self) { }\n+}\n+fn bar<T:Trait+Send>() where <T as Trait>::AssocType: std::marker::Send  {\n+    is_send::<T::AssocType>(); //~ ERROR E0277\n+}\n+\n+fn is_send<T:Send>() {\n+}\n+\n+fn main() { }"}, {"sha": "bafc1657737f44c0110ebfefd3e05e349e8d0894", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.rs?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n+#![allow(dead_code)]\n \n trait Trait {\n     type AssocType;"}, {"sha": "2e54cdf01320d50beb13b6690b35102a2b709a5f", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,14 +1,15 @@\n error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-assoc-type.rs:9:5\n+  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:5\n    |\n+LL | fn bar<T:Trait+Send>() {\n+   |                       - help: consider further restricting the associated type: `where <T as Trait>::AssocType: std::marker::Send`\n LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n-   = help: consider adding a `where <T as Trait>::AssocType: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "a84aef5fdbdb66d5090c008114f82b442f21b079", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,14 +1,15 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-send-param.rs:5:15\n    |\n+LL | fn foo<T>() {\n+   |        - help: consider restricting this bound: `T: std::marker::Send`\n LL |     is_send::<T>()\n    |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n \n error: aborting due to previous error\n "}, {"sha": "c9fec1d21d152026214290203c561e73e648843b", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,34 +1,37 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:4:5\n    |\n+LL | union Foo<T: ?Sized> {\n+   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:9:5\n    |\n+LL | struct Foo2<T: ?Sized> {\n+   |             -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:15:11\n    |\n+LL | enum Foo3<T: ?Sized> {\n+   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to 3 previous errors"}, {"sha": "bd97b0203b5104fcde519a193e7bef21440efd9e", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,11 +4,12 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T: Sized>() { }\n    |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |                             ^ doesn't have a size known at compile-time\n+   |        --                   ^ doesn't have a size known at compile-time\n+   |        |\n+   |        help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "341d3e4cc2df2926248e5ea81459b4b122e9c6a8", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,11 +5,12 @@ LL | enum Foo<U> { FooSome(U), FooNone }\n    | ----------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |                                    ^^^^^^ doesn't have a size known at compile-time\n+   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "e85b6d662f9d56b8e3c8cc5976b744818b2f928c", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,45 +1,53 @@\n error[E0277]: the size for values of type `W` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |        -- help: consider further restricting this bound: `W: std::marker::Sized +`\n+LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:25:8\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                   -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                              -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:29:18\n    |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |                                         -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+...\n LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time"}, {"sha": "280b8fd43cab0ecc07fa18e55b8c44d3719fc6d1", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,11 +5,12 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "2894d5d56710dd3384ad1b7ad6732863dc3e5590", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,11 +5,12 @@ LL | struct Foo<T> { data: T }\n    | ------------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |                                    ^^^^^^ doesn't have a size known at compile-time\n+   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n@@ -18,11 +19,12 @@ LL | fn is_sized<T:Sized>() { }\n    |    -------- - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         --             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required because it appears within the type `Bar<T>`\n \n error: aborting due to 2 previous errors"}, {"sha": "ba1550439c0d9b51bae147932d593f65fbf956d4", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,11 +5,12 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "41371d63f9e53eaa0215188b7094934d07c2ed97", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |                 ^^^^^ doesn't have a size known at compile-time\n+   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "232296ad09126b3e7194f6d848e8c01a56fbae4b", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:7:13\n    |\n+LL | fn f1<X: ?Sized>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -9,11 +11,12 @@ LL | fn f2<X>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n    |\n+LL | fn f3<X: ?Sized + T>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -22,43 +25,45 @@ LL | fn f4<X: T>(x: &X) {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n+LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:40:8\n    |\n+LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:9\n    |\n+LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n@@ -69,12 +74,13 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n+LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n "}, {"sha": "bfd3f4aa691eb7deae80216873bc2034816db17d", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,23 +1,26 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:4:5\n    |\n+LL | struct S1<X: ?Sized> {\n+   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:10:5\n    |\n+LL | struct S2<X: ?Sized> {\n+   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+LL |     f: isize,\n LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -43,23 +46,25 @@ LL |     f: [u8],\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:25:8\n    |\n+LL | enum E<X: ?Sized> {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized5.rs:29:8\n    |\n+LL | enum F<X: ?Sized> {\n+   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to 6 previous errors"}, {"sha": "95acd987a5a272f11f9d92f1a8a449a8e861f06a", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -1,153 +1,174 @@\n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:9:9\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                             -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                  -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized6.rs:11:12\n    |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                                        -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:15:9\n    |\n+LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n    |\n+LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n+   |                  -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:22:9\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:26:10\n    |\n+LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:30:9\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:34:10\n    |\n+LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:38:18\n    |\n LL | fn g1<X: ?Sized>(x: X) {}\n-   |                  ^ doesn't have a size known at compile-time\n+   |       --         ^ doesn't have a size known at compile-time\n+   |       |\n+   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n    |\n LL | fn g2<X: ?Sized + T>(x: X) {}\n-   |                      ^ doesn't have a size known at compile-time\n+   |       --             ^ doesn't have a size known at compile-time\n+   |       |\n+   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "c77503a6f87aa705a74d87c466bae6425d3fbba0", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -2,11 +2,12 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized7.rs:12:21\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |                     ^^^^^ doesn't have a size known at compile-time\n+   |      --             ^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error\n "}, {"sha": "eaacd6b6881eff2831f1479c23aaaa5be4abe570", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -6,12 +6,11 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / enum SomeEnum<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | |     SomeVariant(T,U)\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "52882c460d228ad7f707bd583dc1cdbdd2470c78", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | enum AnotherEnum<A> {\n+   |                  - help: consider restricting this bound: `A: std::marker::Copy`\n+LL |     AnotherVariant {\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "0fea35d68ea6ff435e206ae6ca743aedaae9790a", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | enum SomeEnum<A> {\n+   |               - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "9b8b04a7b86a3153d6236de59c7e8037552d340a", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / fn foo<T,U>() where T: ExtraCopy<U>\n+LL |   fn foo<T,U>() where T: ExtraCopy<U>\n+   |   ^                                  - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:1"}, {"sha": "6d71670e6a84c0e8b091891cd5cce241e27b207b", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `T: MyHash` is not satisfied\n LL | pub struct MySet<T:MyHash> {\n    | -------------------------- required by `MySet`\n ...\n+LL | impl<T> Foo for T {\n+   |      - help: consider restricting this bound: `T: MyHash`\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: MyHash` bound\n \n error: aborting due to previous error\n "}, {"sha": "3798ba1ec6e75a095479ffca6a14ce081c5f9cec", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   struct MustBeCopy<T:Copy> {\n    |   ------------------------- required by `MustBeCopy`\n ...\n-LL | / fn bar<T>(_: &MustBeCopy<T>)\n+LL |   fn bar<T>(_: &MustBeCopy<T>)\n+   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2e46ce4900033f132b03ce3c392365f64424c9d5", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   struct MustBeCopy<T:Copy> {\n    |   ------------------------- required by `MustBeCopy`\n ...\n-LL | / fn bar<T>() -> MustBeCopy<T>\n+LL |   fn bar<T>() -> MustBeCopy<T>\n+   |   ^      - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "db4fb9f97f52d6377753177f0d9c404a3184edd6", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Bar<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: Copy\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "09f8aa2a2018202c8f3a90ef2e5028c083234fe3", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Foo<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: 'static\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "979802dec49986d050d293ec70d790cfdbebf0ed", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -6,11 +6,10 @@ LL |   trait MustBeCopy<T:Copy> {\n ...\n LL | / fn bar<T,U>()\n LL | |     where T: MustBeCopy<U>\n+   | |                           - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2711820d82c651081bd2a150b9da056d7577249f", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n+LL | struct Bar<T> {\n+   |            - help: consider restricting this bound: `T: std::marker::Copy`\n+LL |     // needs T: Copy\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "21f825ac9ef9af71085207a9ea7a00e766df68e0", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n ...\n+LL |   impl<T,U> Foo<T,U> {\n+   |          - help: consider restricting this bound: `U: std::marker::Copy`\n LL | /     fn foo(self) where T: ExtraCopy<U>\n LL | |     {}\n    | |______^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "35b90933813299c85f42b27509d8556aebd88ca7", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n ...\n-LL | / impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+LL |   impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+   |   ^                                       - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "2155977349256cd9378a8583f0d5674b44c523b9", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -6,12 +6,11 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / struct SomeStruct<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | |     data: (T,U)\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "6ac4f1e2da8d22a428a57a177ae0d66f2988e604", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,10 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n+LL | struct SomeStruct<A> {\n+   |                   - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n-   |\n-   = help: consider adding a `where A: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "af0433fd22f6e30f4997eeb8c86b785f62954180", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,12 +4,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / trait SomeTrait<T> {\n+LL |   trait SomeTrait<T> {\n+   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | |     type Type1: ExtraCopy<T>;\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "93cb948cdbfcb0674080e6729f698e8c582110b7", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -3,11 +3,12 @@ error[E0277]: the trait bound `<Self as SomeTrait>::Type1: std::marker::Copy` is\n    |\n LL | struct IsCopy<T:Copy> { x: T }\n    | --------------------- required by `IsCopy`\n-...\n+LL | \n+LL | trait SomeTrait {\n+   |                - help: consider further restricting the associated type: `where <Self as SomeTrait>::Type1: std::marker::Copy`\n+LL |     type Type1;\n LL |     type Type2 = IsCopy<Self::Type1>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `<Self as SomeTrait>::Type1`\n-   |\n-   = help: consider adding a `where <Self as SomeTrait>::Type1: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "13e2f8f590149f0e17633d4c00fa5a84754d14d0", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -6,11 +6,10 @@ LL |   trait ExtraCopy<T:Copy> { }\n LL | \n LL | / trait SomeTrait<T,U>\n LL | |     where T: ExtraCopy<U>\n+   | |                          - help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n-   |\n-   = help: consider adding a `where U: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "9f3545b9c6a6b3d10c5fc41c91899c95b38f07e9", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,14 +4,15 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |   ----------------------- required by `Bar`\n ...\n-LL | /     fn bar(&self, x: &Bar<Self>) {\n+LL |       fn bar(&self, x: &Bar<Self>) {\n+   |       ^                           - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "e32630a5a4a400025b55a06774fd01768d910fce", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,15 +4,16 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |   ----------------------- required by `Bar`\n ...\n-LL | /     fn bar(&self) -> Bar<Self> {\n+LL |       fn bar(&self) -> Bar<Self> {\n+   |       ^                         - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |         loop { }\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "a443ff1bb63969ed2a9ecd16f3c311f04b9e726e", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,14 +4,15 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n LL |   trait Bar<T:Eq+?Sized> { }\n    |   ---------------------- required by `Bar`\n ...\n-LL | /     fn bar<A>(&self) where A: Bar<Self> {\n+LL |       fn bar<A>(&self) where A: Bar<Self> {\n+   |       ^                                  - help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |  _____|\n+   | |\n LL | |\n LL | |         //\n LL | |         // Here, Eq ought to be implemented.\n LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n \n error: aborting due to previous error\n "}, {"sha": "42a28ee676373c9638965f9f8b8739d2944a4341", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                           |\n+   |     |                           help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "7ec4dbe0056b4acdf505748aae7b422d74176494", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                          |\n+   |     |                          help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "256edb5b2ca1d0a3fe8fc4855412268452279dc0", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -5,9 +5,10 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    | ----------------------- required by `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n-   |\n-   = help: consider adding a `where Self: std::cmp::Eq` bound\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |     |                                               |\n+   |     |                                               help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n+   |     the trait `std::cmp::Eq` is not implemented for `Self`\n \n error: aborting due to previous error\n "}, {"sha": "a61b8dd3a3849ffff54cf1f48ee62ae6213582ab", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,11 +4,12 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |   trait ExtraCopy<T:Copy> { }\n    |   ----------------------- required by `ExtraCopy`\n LL | \n-LL | / trait SomeTrait<T>: ExtraCopy<T> {\n+LL |   trait SomeTrait<T>: ExtraCopy<T> {\n+   |   ^               - help: consider restricting this bound: `T: std::marker::Copy`\n+   |  _|\n+   | |\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "995b544600389fb58411d3cd654eaf236142b601", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | fn require_copy<T: Copy>(x: T) {}\n    |    ------------    ---- required by this bound in `require_copy`\n ...\n+LL | impl<T> Foo<T> {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "fe575f3a28a9ea13c32c7ec8a366480de2b546ff", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e4ff91403dd4752cc643e9dff55d93076e4802c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=7e4ff91403dd4752cc643e9dff55d93076e4802c", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | fn require_copy<T: Copy>(x: T) {}\n    |    ------------    ---- required by this bound in `require_copy`\n ...\n+LL | impl<T> Foo<T> for Bar<T> {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}]}