{"sha": "c193fe4f3c5a1e325ff5491b62094b7bf7036de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTNmZTRmM2M1YTFlMzI1ZmY1NDkxYjYyMDk0YjdiZjcwMzZkZTc=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-25T03:59:17Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-26T04:44:22Z"}, "message": "infer: Drop pointless format! calls", "tree": {"sha": "b75578f553b7554d327b48f99bd2ba40ed4d9247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75578f553b7554d327b48f99bd2ba40ed4d9247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c193fe4f3c5a1e325ff5491b62094b7bf7036de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c193fe4f3c5a1e325ff5491b62094b7bf7036de7", "html_url": "https://github.com/rust-lang/rust/commit/c193fe4f3c5a1e325ff5491b62094b7bf7036de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c193fe4f3c5a1e325ff5491b62094b7bf7036de7/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15bebfefa34e155101663f2e110903911c37492", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15bebfefa34e155101663f2e110903911c37492", "html_url": "https://github.com/rust-lang/rust/commit/e15bebfefa34e155101663f2e110903911c37492"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "80e8ed47d305299a24db2908d4e9fc3fb1e7ec92", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c193fe4f3c5a1e325ff5491b62094b7bf7036de7/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c193fe4f3c5a1e325ff5491b62094b7bf7036de7/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=c193fe4f3c5a1e325ff5491b62094b7bf7036de7", "patch": "@@ -1481,38 +1481,38 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::Subtype(ref trace) => {\n                 let desc = match trace.origin {\n                     infer::Misc(_) => {\n-                        format!(\"types are compatible\")\n+                        \"types are compatible\"\n                     }\n                     infer::MethodCompatCheck(_) => {\n-                        format!(\"method type is compatible with trait\")\n+                        \"method type is compatible with trait\"\n                     }\n                     infer::ExprAssignable(_) => {\n-                        format!(\"expression is assignable\")\n+                        \"expression is assignable\"\n                     }\n                     infer::RelateTraitRefs(_) => {\n-                        format!(\"traits are compatible\")\n+                        \"traits are compatible\"\n                     }\n                     infer::RelateSelfType(_) => {\n-                        format!(\"self type matches impl self type\")\n+                        \"self type matches impl self type\"\n                     }\n                     infer::RelateOutputImplTypes(_) => {\n-                        format!(\"trait type parameters matches those \\\n-                                 specified on the impl\")\n+                        \"trait type parameters matches those \\\n+                                 specified on the impl\"\n                     }\n                     infer::MatchExpressionArm(_, _) => {\n-                        format!(\"match arms have compatible types\")\n+                        \"match arms have compatible types\"\n                     }\n                     infer::IfExpression(_) => {\n-                        format!(\"if and else have compatible types\")\n+                        \"if and else have compatible types\"\n                     }\n                     infer::IfExpressionWithNoElse(_) => {\n-                        format!(\"if may be missing an else clause\")\n+                        \"if may be missing an else clause\"\n                     }\n                     infer::RangeExpression(_) => {\n-                        format!(\"start and end of range have compatible types\")\n+                        \"start and end of range have compatible types\"\n                     }\n                     infer::EquatePredicate(_) => {\n-                        format!(\"equality where clause is satisfied\")\n+                        \"equality where clause is satisfied\"\n                     }\n                 };\n \n@@ -1652,8 +1652,8 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::RelateRegionParamBound(span) => {\n                 self.tcx.sess.span_note(\n                     span,\n-                    &format!(\"...so that the declared lifetime parameter bounds \\\n-                                are satisfied\"));\n+                    \"...so that the declared lifetime parameter bounds \\\n+                                are satisfied\");\n             }\n             infer::SafeDestructor(span) => {\n                 self.tcx.sess.span_note("}]}