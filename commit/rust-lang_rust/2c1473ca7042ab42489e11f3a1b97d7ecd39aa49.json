{"sha": "2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "node_id": "C_kwDOAAsO6NoAKDJjMTQ3M2NhNzA0MmFiNDI0ODllMTFmM2ExYjk3ZDdlY2QzOWFhNDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T20:23:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T22:07:57Z"}, "message": "Normalize anon consts in new solver", "tree": {"sha": "4f54d49e97985c9e2a56f3514f4386fec478e570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f54d49e97985c9e2a56f3514f4386fec478e570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "html_url": "https://github.com/rust-lang/rust/commit/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbb43e70f7d4d35702f0b5b3069931123262b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbb43e70f7d4d35702f0b5b3069931123262b71", "html_url": "https://github.com/rust-lang/rust/commit/4fbb43e70f7d4d35702f0b5b3069931123262b71"}], "stats": {"total": 157, "additions": 115, "deletions": 42}, "files": [{"sha": "ed532aa2e8ba8ef2c587146f90c93114bfce1eae", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n-                if self.tcx.features().generic_const_exprs =>\n+                if self.tcx.features().generic_const_exprs || self.tcx.trait_solver_next() =>\n             {\n                 relation.register_const_equate_obligation(a, b);\n                 return Ok(b);"}, {"sha": "a004e903b5ea5f5347701367969cbe755c23eeca", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -772,4 +772,21 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n         values\n     }\n+\n+    // Try to evaluate a const, or return `None` if the const is too generic.\n+    // This doesn't mean the const isn't evaluatable, though, and should be treated\n+    // as an ambiguity rather than no-solution.\n+    pub(super) fn try_const_eval_resolve(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        unevaluated: ty::UnevaluatedConst<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Option<ty::Const<'tcx>> {\n+        use rustc_middle::mir::interpret::ErrorHandled;\n+        match self.infcx.try_const_eval_resolve(param_env, unevaluated, ty, None) {\n+            Ok(ct) => Some(ct),\n+            Err(ErrorHandled::Reported(e)) => Some(self.tcx().const_error(ty, e.into())),\n+            Err(ErrorHandled::TooGeneric) => None,\n+        }\n+    }\n }"}, {"sha": "99ed9ac7b6208cdb0f419986c689a0c4fe79ebcf", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -22,25 +22,55 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        match goal.predicate.projection_ty.kind(self.tcx()) {\n-            ty::AliasKind::Projection => {\n-                // To only compute normalization once for each projection we only\n-                // normalize if the expected term is an unconstrained inference variable.\n-                //\n-                // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n-                // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n-                // `U` and equate it with `u32`. This means that we don't need a separate\n-                // projection cache in the solver.\n-                if self.term_is_fully_unconstrained(goal) {\n-                    let candidates = self.assemble_and_evaluate_candidates(goal);\n-                    self.merge_candidates(candidates)\n-                } else {\n-                    self.set_normalizes_to_hack_goal(goal);\n-                    self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+        let def_id = goal.predicate.def_id();\n+        match self.tcx().def_kind(def_id) {\n+            DefKind::AssocTy | DefKind::AssocConst => {\n+                match self.tcx().associated_item(def_id).container {\n+                    ty::AssocItemContainer::TraitContainer => {\n+                        // To only compute normalization once for each projection we only\n+                        // normalize if the expected term is an unconstrained inference variable.\n+                        //\n+                        // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n+                        // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n+                        // `U` and equate it with `u32`. This means that we don't need a separate\n+                        // projection cache in the solver.\n+                        if self.term_is_fully_unconstrained(goal) {\n+                            let candidates = self.assemble_and_evaluate_candidates(goal);\n+                            self.merge_candidates(candidates)\n+                        } else {\n+                            self.set_normalizes_to_hack_goal(goal);\n+                            self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+                        }\n+                    }\n+                    ty::AssocItemContainer::ImplContainer => bug!(\"IATs not supported here yet\"),\n                 }\n             }\n-            ty::AliasKind::Opaque => self.normalize_opaque_type(goal),\n-            ty::AliasKind::Inherent => bug!(\"IATs not supported here yet\"),\n+            DefKind::AnonConst => self.normalize_anon_const(goal),\n+            DefKind::OpaqueTy => self.normalize_opaque_type(goal),\n+            kind => bug!(\"uknown DefKind {} in projection goal: {goal:#?}\", kind.descr(def_id)),\n+        }\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn normalize_anon_const(\n+        &mut self,\n+        goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(normalized_const) = self.try_const_eval_resolve(\n+            goal.param_env,\n+            ty::UnevaluatedConst::new(\n+                goal.predicate.projection_ty.def_id,\n+                goal.predicate.projection_ty.substs,\n+            ),\n+            self.tcx()\n+                .type_of(goal.predicate.projection_ty.def_id)\n+                .no_bound_vars()\n+                .expect(\"const ty should not rely on other generics\"),\n+        ) {\n+            self.eq(goal.param_env, normalized_const, goal.predicate.term.ct().unwrap())?;\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+        } else {\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n         }\n     }\n }"}, {"sha": "5077137b09b4b1f3951c8088d0d2117b0350f200", "filename": "tests/ui/traits/new-solver/array-default.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn has_default<const N: usize>() where [(); N]: Default {}\n+\n+fn main() {\n+    has_default::<1>();\n+}"}, {"sha": "01899c9ad645f2994c08090a7fad4f19c40068ab", "filename": "tests/ui/traits/new-solver/structural-resolve-field.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -1,35 +1,13 @@\n // compile-flags: -Ztrait-solver=next\n // check-pass\n \n+#[derive(Default)]\n struct Foo {\n     x: i32,\n }\n \n-impl MyDefault for Foo {\n-    fn my_default() -> Self {\n-        Self {\n-            x: 0,\n-        }\n-    }\n-}\n-\n-trait MyDefault {\n-    fn my_default() -> Self;\n-}\n-\n-impl MyDefault for [Foo; 0]  {\n-    fn my_default() -> Self {\n-        []\n-    }\n-}\n-impl MyDefault for [Foo; 1] {\n-    fn my_default() -> Self {\n-        [Foo::my_default(); 1]\n-    }\n-}\n-\n fn main() {\n-    let mut xs = <[Foo; 1]>::my_default();\n+    let mut xs = <[Foo; 1]>::default();\n     xs[0].x = 1;\n     (&mut xs[0]).x = 2;\n }"}, {"sha": "072ac32a5de9764cf1daf8bf767d64390e3f09b3", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.fails.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Trait<1>` is not satisfied\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:20:13\n+   |\n+LL |     needs::<1>();\n+   |             ^ the trait `Trait<1>` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `Trait<N>`:\n+             <() as Trait<0>>\n+             <() as Trait<2>>\n+note: required by a bound in `needs`\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:10:38\n+   |\n+LL | fn needs<const N: usize>() where (): Trait<N> {}\n+   |                                      ^^^^^^^^ required by this bound in `needs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "26c595bc974286b45d7a9b916c850721f6a0713f", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1473ca7042ab42489e11f3a1b97d7ecd39aa49/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs?ref=2c1473ca7042ab42489e11f3a1b97d7ecd39aa49", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: works fails\n+//[works] check-pass\n+\n+trait Trait<const N: usize> {}\n+\n+impl Trait<{ 1 - 1 }> for () {}\n+impl Trait<{ 1 + 1 }> for () {}\n+\n+fn needs<const N: usize>() where (): Trait<N> {}\n+\n+#[cfg(works)]\n+fn main() {\n+    needs::<0>();\n+    needs::<2>();\n+}\n+\n+#[cfg(fails)]\n+fn main() {\n+    needs::<1>();\n+    //[fails]~^ ERROR the trait bound `(): Trait<1>` is not satisfied\n+}"}]}