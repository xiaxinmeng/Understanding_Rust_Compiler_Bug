{"sha": "27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzRmZjY5Njc1YWQyMTZiYmY0OTJkNmM5ZDliZjRjNDFkY2QwZGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T16:25:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T16:36:24Z"}, "message": "rustc: Remove `specailization_cache` in favor of a query\n\nThis commit removes the `specialization_cache` field of `TyCtxt` by moving it to\na dedicated query, which it turned out was already quite easily structured to do\nso!", "tree": {"sha": "afd28ee6097bbd7830233967de708d23f144a0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afd28ee6097bbd7830233967de708d23f144a0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "html_url": "https://github.com/rust-lang/rust/commit/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf477a8c232d0442d16a4025f49d3ae1519131e", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf477a8c232d0442d16a4025f49d3ae1519131e", "html_url": "https://github.com/rust-lang/rust/commit/faf477a8c232d0442d16a4025f49d3ae1519131e"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "5114b94571d5a6b4eb5351ce8a0623758baf17e6", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -527,6 +527,7 @@ define_dep_nodes!( <'tcx>\n     [] HasGlobalAllocator(DefId),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n+    [] Specializes { impl1: DefId, impl2: DefId },\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "019f0a709116c7622167bad613d6dca6ac164a40", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -38,7 +38,7 @@ pub use self::project::{ProjectionCache, ProjectionCacheSnapshot, Reveal};\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n-pub use self::specialize::{OverlapError, specialization_graph, specializes, translate_substs};\n+pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;\n@@ -831,6 +831,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n+        specializes: specialize::specializes,\n         ..*providers\n     };\n }\n@@ -839,6 +840,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n+        specializes: specialize::specializes,\n         ..*providers\n     };\n }"}, {"sha": "8856176dcb07ddcb5ca62a0de403f42c4281d47d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -36,7 +36,6 @@ use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener};\n use ty::subst::{Kind, Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n-use traits;\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n use middle::lang_items;\n@@ -1927,7 +1926,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if other.evaluation == EvaluatedToOk {\n                     if let ImplCandidate(victim_def) = victim.candidate {\n                         let tcx = self.tcx().global_tcx();\n-                        return traits::specializes(tcx, other_def, victim_def) ||\n+                        return tcx.specializes((other_def, victim_def)) ||\n                             tcx.impls_are_allowed_to_overlap(other_def, victim_def);\n                     }\n                 }"}, {"sha": "2dd6ca4b5a92853964c67d81921b0178f2ef920d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -150,15 +150,12 @@ pub fn find_associated_item<'a, 'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// impl1 specializes impl2 if it applies to a subset of the types impl2 applies\n /// to.\n-pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             impl1_def_id: DefId,\n-                             impl2_def_id: DefId) -> bool {\n+pub(super) fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    (impl1_def_id, impl2_def_id): (DefId, DefId))\n+    -> bool\n+{\n     debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n \n-    if let Some(r) = tcx.specializes_cache.borrow().check(impl1_def_id, impl2_def_id) {\n-        return r;\n-    }\n-\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&\n@@ -188,7 +185,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap();\n \n     // Create a infcx, taking the predicates of impl1 as assumptions:\n-    let result = tcx.infer_ctxt().enter(|infcx| {\n+    tcx.infer_ctxt().enter(|infcx| {\n         // Normalize the trait reference. The WF rules ought to ensure\n         // that this always succeeds.\n         let impl1_trait_ref =\n@@ -204,10 +201,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Attempt to prove that impl2 applies, given all of the above.\n         fulfill_implication(&infcx, penv, impl1_trait_ref, impl2_def_id).is_ok()\n-    });\n-\n-    tcx.specializes_cache.borrow_mut().insert(impl1_def_id, impl2_def_id, result);\n-    result\n+    })\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with"}, {"sha": "5242accceabb3418d3f9b11746861c8a4604de23", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{OverlapError, specializes};\n+use super::OverlapError;\n \n use hir::def_id::DefId;\n use traits;\n@@ -118,8 +118,8 @@ impl<'a, 'gcx, 'tcx> Children {\n                         return Ok((false, false));\n                     }\n \n-                    let le = specializes(tcx, impl_def_id, possible_sibling);\n-                    let ge = specializes(tcx, possible_sibling, impl_def_id);\n+                    let le = tcx.specializes((impl_def_id, possible_sibling));\n+                    let ge = tcx.specializes((possible_sibling, impl_def_id));\n \n                     if le == ge {\n                         // overlap, but no specialization; error out"}, {"sha": "1255a9c1f1e5c1dfa9835d657791dd846999dffe", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -808,8 +808,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub sess: &'tcx Session,\n \n-    pub specializes_cache: RefCell<traits::SpecializesCache>,\n-\n     pub trans_trait_caches: traits::trans::TransTraitCaches<'tcx>,\n \n     pub dep_graph: DepGraph,\n@@ -1072,7 +1070,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n-            specializes_cache: RefCell::new(traits::SpecializesCache::new()),\n             global_arenas: arenas,\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),"}, {"sha": "c7303c749a4af6623b326d28ae0e1124db8466ae", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=27c4ff69675ad216bbf492d6c9d9bf4c41dcd0de", "patch": "@@ -540,6 +540,12 @@ impl<'tcx> QueryDescription for queries::lint_levels<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::specializes<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: (DefId, DefId)) -> String {\n+        format!(\"computing whether impls specialize one another\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1108,6 +1114,8 @@ define_maps! { <'tcx>\n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n \n     [] lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n+\n+    [] specializes: specializes_node((DefId, DefId)) -> bool,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1183,3 +1191,7 @@ fn layout_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'\n fn lint_levels<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LintLevels\n }\n+\n+fn specializes_node<'tcx>((a, b): (DefId, DefId)) -> DepConstructor<'tcx> {\n+    DepConstructor::Specializes { impl1: a, impl2: b }\n+}"}]}