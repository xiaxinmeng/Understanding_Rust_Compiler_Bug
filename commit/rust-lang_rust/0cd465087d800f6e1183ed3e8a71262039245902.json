{"sha": "0cd465087d800f6e1183ed3e8a71262039245902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDQ2NTA4N2Q4MDBmNmUxMTgzZWQzZThhNzEyNjIwMzkyNDU5MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-11T19:46:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-11T19:46:16Z"}, "message": "Auto merge of #50105 - mixi:crt-included, r=alexcrichton\n\nUse the correct crt*.o files when linking musl targets.\n\nThis is supposed to support optionally using the system copy of musl\nlibc instead of the included one if supported. This currently only\naffects the start files, which is enough to allow building rustc on musl\ntargets.\n\nMost of the changes are analogous to crt-static.\n\nExcluding the start files is something musl based distributions usually patch into their copy of rustc:\n  - https://github.com/alpinelinux/aports/blob/eb064c8/community/rust/musl-fix-linux_musl_base.patch\n  - https://github.com/voidlinux/void-packages/blob/77400fc/srcpkgs/rust/patches/link-musl-dynamically.patch\n\nFor third-party distributions that not yet carry those patches it would be nice if it was supported without the need to patch upstream sources.\n\n## Reasons\n### What breaks?\nSome start files were missed when originally writing the logic to swap in musl start files (gcc comes with its own start files, which are suppressed by -nostdlib, but not manually included later on). This caused #36710, which also affects rustc with the internal llvm copy or any other system libraries that need crtbegin/crtend.\n\n### How is it fixed?\nThe system linker already has all the logic to decide which start files to include, so we can just defer to it (except of course if it doesn't target musl).\n\n### Why is it optional?\nIn #40113 it was first tried to remove the start files, which broke compiling musl-targeting static binaries with a glibc-targeting compiler. This is why it eventually landed without removing the start files. Being an option side-steps the issue.\n\n### Why are the start files still installed?\nThis has the nice side-effect, that the produced rust-std-* binaries can still be used by on a glibc-targeting system with a rustc built against glibc.\n\n## Does it work?\nWith the following build script (using [musl-cross-make](https://github.com/richfelker/musl-cross-make)): https://shadowice.org/~mixi/rust-musl/build.sh, I was able to cross-compile a musl-host musl-targeting rustc on a glibc-based system. The resulting binaries are at https://shadowice.org/~mixi/rust-musl/binaries/. This also requires #50103 and #50104 (which are also applied to the branch the build script uses).", "tree": {"sha": "1c864a01f0253070fc94f1b861bc581bb65dabae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c864a01f0253070fc94f1b861bc581bb65dabae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd465087d800f6e1183ed3e8a71262039245902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd465087d800f6e1183ed3e8a71262039245902", "html_url": "https://github.com/rust-lang/rust/commit/0cd465087d800f6e1183ed3e8a71262039245902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd465087d800f6e1183ed3e8a71262039245902/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecbe9b7f71b41422f9c9e45b1d31eefacea31a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecbe9b7f71b41422f9c9e45b1d31eefacea31a3", "html_url": "https://github.com/rust-lang/rust/commit/6ecbe9b7f71b41422f9c9e45b1d31eefacea31a3"}, {"sha": "490d05055abd36521abc41c2e551ac789820e80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/490d05055abd36521abc41c2e551ac789820e80f", "html_url": "https://github.com/rust-lang/rust/commit/490d05055abd36521abc41c2e551ac789820e80f"}], "stats": {"total": 178, "additions": 163, "deletions": 15}, "files": [{"sha": "76d0e6e28aeda75e779ea703e8563dc01e2b4004", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -268,6 +268,15 @@ fn main() {\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n+\n+        if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n+            if s == \"true\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n+            }\n+            if s == \"false\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n+            }\n+        }\n     }\n \n     if env::var_os(\"RUSTC_PARALLEL_QUERIES\").is_some() {"}, {"sha": "28f5192f2cdf455d9e6730f64ce324ab679a8af5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -489,7 +489,7 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n-    def get_toml(self, key):\n+    def get_toml(self, key, section=None):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n \n         >>> rb = RustBuild()\n@@ -501,12 +501,29 @@ def get_toml(self, key):\n \n         >>> rb.get_toml(\"key3\") is None\n         True\n+\n+        Optionally also matches the section the key appears in\n+\n+        >>> rb.config_toml = '[a]\\\\nkey = \"value1\"\\\\n[b]\\\\nkey = \"value2\"'\n+        >>> rb.get_toml('key', 'a')\n+        'value1'\n+        >>> rb.get_toml('key', 'b')\n+        'value2'\n+        >>> rb.get_toml('key', 'c') is None\n+        True\n         \"\"\"\n+\n+        cur_section = None\n         for line in self.config_toml.splitlines():\n+            section_match = re.match(r'^\\s*\\[(.*)\\]\\s*$', line)\n+            if section_match is not None:\n+                cur_section = section_match.group(1)\n+\n             match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n             if match is not None:\n                 value = match.group(1)\n-                return self.get_string(value) or value.strip()\n+                if section is None or section == cur_section:\n+                    return self.get_string(value) or value.strip()\n         return None\n \n     def cargo(self):\n@@ -589,7 +606,17 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n-        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2\"\n+        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2 \"\n+\n+        build_section = \"target.{}\".format(self.build_triple())\n+        target_features = []\n+        if self.get_toml(\"crt-static\", build_section) == \"true\":\n+            target_features += [\"+crt-static\"]\n+        elif self.get_toml(\"crt-static\", build_section) == \"false\":\n+            target_features += [\"-crt-static\"]\n+        if target_features:\n+            env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n+\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):"}, {"sha": "17f19222e6ea65637828e5cae38dbb0ab8e604d2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -690,6 +690,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n         }\n \n+        if let Some(x) = self.crt_static(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);"}, {"sha": "4594d450c1507f7a05dbd9078d0f3c9d90dab2c4", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -15,7 +15,8 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n+    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -55,9 +56,11 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n-    base.post_link_objects.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n+    base.pre_link_objects_exe_crt_sys.push(\"crtbegin.o\".to_string());\n+    base.post_link_objects_crt_sys.push(\"crtend.o\".to_string());\n+    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "708a3865b23b910fa88920f25044b18287686f69", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -421,20 +421,26 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are unconditionally passed *before* any\n-    /// user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n-    /// Objects to link before all others, always found within the\n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs, // ... unconditionally\n+    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n+    /// Objects to link before all others, all except *_sys found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n+    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n+    pub pre_link_objects_exe_crt_sys: Vec<String>, // ... when linking an executable with a bundled\n+                                                   //  crt, from the system library search path\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n-    /// Objects to link after all others, always found within the\n+    /// Objects to link after all others, all except *_sys found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>, // ... unconditionally\n+    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n+    pub post_link_objects_crt_sys: Vec<String>, // ... when linking with a bundled crt, from the\n+                                                //  system library search path\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -634,6 +640,7 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n+            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -667,8 +674,12 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n+            pre_link_objects_exe_crt: Vec::new(),\n+            pre_link_objects_exe_crt_sys: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n+            post_link_objects_crt: Vec::new(),\n+            post_link_objects_crt_sys: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -887,10 +898,15 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n+        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n+        key!(pre_link_objects_exe_crt, list);\n+        key!(pre_link_objects_exe_crt_sys, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n+        key!(post_link_objects_crt, list);\n+        key!(post_link_objects_crt_sys, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1092,10 +1108,15 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n+        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n+        target_option_val!(pre_link_objects_exe_crt);\n+        target_option_val!(pre_link_objects_exe_crt_sys);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n+        target_option_val!(post_link_objects_crt);\n+        target_option_val!(post_link_objects_crt_sys);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}, {"sha": "299075ed03ad9ec0cfbc922c89f624227f8048fb", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -621,6 +621,11 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n+        if sess.crt_static() {\n+            cmd.args(args);\n+        }\n+    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -635,6 +640,18 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n+    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt_sys {\n+            if flavor == LinkerFlavor::Gcc {\n+                cmd.arg(format!(\"-l:{}\", obj));\n+            }\n+        }\n+    }\n+\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -656,6 +673,16 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n+    if sess.crt_static() {\n+        for obj in &sess.target.target.options.post_link_objects_crt_sys {\n+            if flavor == LinkerFlavor::Gcc {\n+                cmd.arg(format!(\"-l:{}\", obj));\n+            }\n+        }\n+        for obj in &sess.target.target.options.post_link_objects_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "2cb0b4ccf2652e23addd8fab49c020f7c9781490", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -0,0 +1,12 @@\n+-include ../tools.mk\n+\n+all: foo\n+\t$(call RUN,foo)\n+\n+foo: foo.rs $(call NATIVE_STATICLIB,foo)\n+\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n+\n+$(TMPDIR)/libfoo.o: foo.cpp\n+\t$(call COMPILE_OBJ_CXX,$@,$<)\n+\n+.PHONY: all"}, {"sha": "fbd0ead7a506cb9de7ea3766d3b8c4a68c1a7738", "filename": "src/test/run-make-fulldeps/issue-36710/foo.cpp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdint.h>\n+\n+struct A {\n+    A() { v = 1234; }\n+    ~A() { v = 1; }\n+    uint32_t v;\n+};\n+\n+A a;\n+\n+extern \"C\" {\n+    uint32_t get() {\n+        return a.v;\n+    }\n+}"}, {"sha": "6e50566ddfde02850b20ff9acf743915ad94d7f3", "filename": "src/test/run-make-fulldeps/issue-36710/foo.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that linking to C++ code with global destructors works.\n+\n+extern { fn get() -> u32; }\n+\n+fn main() {\n+    let i = unsafe { get() };\n+    assert_eq!(i, 1234);\n+}"}, {"sha": "3de358fa50007140e480d160ec4b66e01d70d08d", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -59,12 +59,14 @@ endif\n \n ifdef IS_MSVC\n COMPILE_OBJ = $(CC) -c -Fo:`cygpath -w $(1)` $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -Fo:`cygpath -w $(1)` $(2)\n NATIVE_STATICLIB_FILE = $(1).lib\n NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n \t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n else\n COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -o $(1) $(2)\n NATIVE_STATICLIB_FILE = lib$(1).a\n NATIVE_STATICLIB = $(call STATICLIB,$(1))\n OUT_EXE=-o $(TMPDIR)/$(1)"}, {"sha": "4f18f238cab903af72e49191325c5c28ba385e1c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd465087d800f6e1183ed3e8a71262039245902/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0cd465087d800f6e1183ed3e8a71262039245902", "patch": "@@ -2524,7 +2524,7 @@ impl<'test> TestCx<'test> {\n                 .env(\"IS_WINDOWS\", \"1\")\n                 .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                 .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n-                .env(\"CXX\", &self.config.cxx);\n+                .env(\"CXX\", format!(\"'{}'\", &self.config.cxx));\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n                 .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))"}]}