{"sha": "5665a2d36778693ca19215540a518ccf04eb0b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjVhMmQzNjc3ODY5M2NhMTkyMTU1NDBhNTE4Y2NmMDRlYjBiMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T13:42:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T13:42:23Z"}, "message": "Auto merge of #52506 - alexcrichton:dont-duplicate-wasm-sections, r=michaelwoerister\n\nrustc: Work around an upstream wasm ThinLTO bug\n\nThis commit implements a workaround for an [upstream LLVM bug][1] where custom\nsections were accidentally duplicated amongst codegen units when ThinLTO passes\nwere performed. This is due to the fact that custom sections for wasm are stored\nas metadata nodes which are automatically imported into modules when ThinLTO\nhappens. The fix here is to forcibly delete the metadata node from imported\nmodules before LLVM has a chance to try to copy it over.\n\n[1]: https://bugs.llvm.org/show_bug.cgi?id=38184", "tree": {"sha": "783a29af3cb65ecdaeefe2f62046424862164ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783a29af3cb65ecdaeefe2f62046424862164ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5665a2d36778693ca19215540a518ccf04eb0b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5665a2d36778693ca19215540a518ccf04eb0b1a", "html_url": "https://github.com/rust-lang/rust/commit/5665a2d36778693ca19215540a518ccf04eb0b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5665a2d36778693ca19215540a518ccf04eb0b1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970102f24c7e7d088917b4da2eca3fd1e067efe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/970102f24c7e7d088917b4da2eca3fd1e067efe8", "html_url": "https://github.com/rust-lang/rust/commit/970102f24c7e7d088917b4da2eca3fd1e067efe8"}, {"sha": "e08fcbbd8d241ab68d72dc8b288ca55b8c1114fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08fcbbd8d241ab68d72dc8b288ca55b8c1114fe", "html_url": "https://github.com/rust-lang/rust/commit/e08fcbbd8d241ab68d72dc8b288ca55b8c1114fe"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "85fbc4bf378a5358fe91d38ca7f4c5b52161f1da", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=5665a2d36778693ca19215540a518ccf04eb0b1a", "patch": "@@ -1084,11 +1084,40 @@ LLVMRustPrepareThinLTOInternalize(const LLVMRustThinLTOData *Data, LLVMModuleRef\n extern \"C\" bool\n LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   Module &Mod = *unwrap(M);\n+\n   const auto &ImportList = Data->ImportLists.lookup(Mod.getModuleIdentifier());\n   auto Loader = [&](StringRef Identifier) {\n     const auto &Memory = Data->ModuleMap.lookup(Identifier);\n     auto &Context = Mod.getContext();\n-    return getLazyBitcodeModule(Memory, Context, true, true);\n+    auto MOrErr = getLazyBitcodeModule(Memory, Context, true, true);\n+\n+    if (!MOrErr)\n+      return std::move(MOrErr);\n+\n+    // The rest of this closure is a workaround for\n+    // https://bugs.llvm.org/show_bug.cgi?id=38184 where during ThinLTO imports\n+    // we accidentally import wasm custom sections into different modules,\n+    // duplicating them by in the final output artifact.\n+    //\n+    // The issue is worked around here by manually removing the\n+    // `wasm.custom_sections` named metadata node from any imported module. This\n+    // we know isn't used by any optimization pass so there's no need for it to\n+    // be imported.\n+    //\n+    // Note that the metadata is currently lazily loaded, so we materialize it\n+    // here before looking up if there's metadata inside. The `FunctionImporter`\n+    // will immediately materialize metadata anyway after an import, so this\n+    // shouldn't be a perf hit.\n+    if (Error Err = (*MOrErr)->materializeMetadata()) {\n+      Expected<std::unique_ptr<Module>> Ret(std::move(Err));\n+      return std::move(Ret);\n+    }\n+\n+    auto *WasmCustomSections = (*MOrErr)->getNamedMetadata(\"wasm.custom_sections\");\n+    if (WasmCustomSections)\n+      WasmCustomSections->eraseFromParent();\n+\n+    return std::move(MOrErr);\n   };\n   FunctionImporter Importer(Data->Index, Loader);\n   Expected<bool> Result = Importer.importFunctions(Mod, ImportList);"}, {"sha": "63644c513c30db5c0662663039ea96eed37e1be7", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=5665a2d36778693ca19215540a518ccf04eb0b1a", "patch": "@@ -0,0 +1,9 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(TARGET),wasm32-unknown-unknown)\n+all:\n+\t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown\n+\t$(NODE) foo.js $(TMPDIR)/foo.wasm\n+else\n+all:\n+endif"}, {"sha": "1d1a9bd13eea78dea5bfd141ccd9ebd719fb4f64", "filename": "src/test/run-make/wasm-custom-sections-opt/foo.js", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.js", "raw_url": "https://github.com/rust-lang/rust/raw/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.js?ref=5665a2d36778693ca19215540a518ccf04eb0b1a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const fs = require('fs');\n+const process = require('process');\n+const assert = require('assert');\n+const buffer = fs.readFileSync(process.argv[2]);\n+\n+let m = new WebAssembly.Module(buffer);\n+\n+sections = WebAssembly.Module.customSections(m, \"foo\");\n+console.log('section foo', sections);\n+assert.strictEqual(sections.length, 1, \"didn't create `foo` section\");\n+section = new Uint8Array(sections[0]);\n+console.log('contents', section);\n+assert.strictEqual(section.length, 4, \"didn't concatenate `foo` sections\");\n+\n+process.exit(0);"}, {"sha": "4d983514a2360b359025dc8834defe804b289061", "filename": "src/test/run-make/wasm-custom-sections-opt/foo.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5665a2d36778693ca19215540a518ccf04eb0b1a/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2Ffoo.rs?ref=5665a2d36778693ca19215540a518ccf04eb0b1a", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"cdylib\"]\n+#![deny(warnings)]\n+\n+#[link_section = \"foo\"]\n+pub static A: [u8; 2] = [1, 2];\n+\n+// make sure this is in another CGU\n+pub mod another {\n+    #[link_section = \"foo\"]\n+    pub static FOO: [u8; 2] = [3, 4];\n+\n+    pub fn foo() {}\n+}\n+\n+#[no_mangle]\n+pub extern fn foo() {\n+    // This will import `another::foo` through ThinLTO passes, and it better not\n+    // also accidentally import the `FOO` custom section into this module as\n+    // well\n+    another::foo();\n+}"}]}