{"sha": "351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "node_id": "C_kwDOAAsO6NoAKDM1MWFhMWI1ZGFiZTUxYWU0ZmNkZmMyM2RiNTFjZTYwZjY2OTljZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-17T05:29:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-17T05:29:59Z"}, "message": "Rollup merge of #93693 - rukai:91550, r=davidtwco\n\nSuggest deriving required supertraits\n\ncloses https://github.com/rust-lang/rust/issues/91550\n\nI chose to just hardcode handling for PartialOrd and PartialEq because that should be robust enough and I dont know how to go about doing it generically\n\nr? rust-lang/diagnostics", "tree": {"sha": "6b74c442c2d009ddb4420aca2924db45c8d78161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b74c442c2d009ddb4420aca2924db45c8d78161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDd1YCRBK7hj4Ov3rIwAAtIwIAEV4ZVKtX2jircK6MpAS6w1+\nKI1433Sv01tNArKprtzkLrlZrgI7k2LbxeSYrPbUA5sAz3IB8/LowVcM00MZ3/A4\nkoa7ZBlAnEhapZv0Fs2Bnsr9Rk/t2+9IyF/9XRBKiJbRQWBXyInD7jnh+u8tCAFb\nr5rjUVJi8lAmqI5CGS7XB15h++iGInGE7hisTn8jcNqSB1/l6WHIyCEbUok+g+1F\nDwmGaBb4TxtS5STJZh6oPeNecyN5+g3PkVH7kg1sn9E1BzehCqcyqPkJG/RIKta4\ntzf4yTqfR2ZeiOhyDbPoTivasPXX7LjbMXMthEAfjbcU+NEGKYDtBSo4HsXmqE0=\n=21k/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b74c442c2d009ddb4420aca2924db45c8d78161\nparent d855121a44afd0fc9a5f1c2d263af48e9857a5f4\nparent 1973f277a3e79861df2f5bff88aedaf127d833c8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645075799 +0100\ncommitter GitHub <noreply@github.com> 1645075799 +0100\n\nRollup merge of #93693 - rukai:91550, r=davidtwco\n\nSuggest deriving required supertraits\n\ncloses https://github.com/rust-lang/rust/issues/91550\n\nI chose to just hardcode handling for PartialOrd and PartialEq because that should be robust enough and I dont know how to go about doing it generically\n\nr? rust-lang/diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "html_url": "https://github.com/rust-lang/rust/commit/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d855121a44afd0fc9a5f1c2d263af48e9857a5f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d855121a44afd0fc9a5f1c2d263af48e9857a5f4", "html_url": "https://github.com/rust-lang/rust/commit/d855121a44afd0fc9a5f1c2d263af48e9857a5f4"}, {"sha": "1973f277a3e79861df2f5bff88aedaf127d833c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1973f277a3e79861df2f5bff88aedaf127d833c8", "html_url": "https://github.com/rust-lang/rust/commit/1973f277a3e79861df2f5bff88aedaf127d833c8"}], "stats": {"total": 179, "additions": 154, "deletions": 25}, "files": [{"sha": "fc9e14b0000c0a5aa8f77e5f2e03c9acbd75404b", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -9,8 +9,10 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams};\n use rustc_middle::ty::print::with_crate_prefix;\n+use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -1196,26 +1198,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(adt) if adt.did.is_local() => adt,\n                 _ => continue,\n             };\n-            let can_derive = match self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n-                Some(sym::Default) => !adt.is_enum(),\n-                Some(\n+            if let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n+                let can_derive = match diagnostic_name {\n+                    sym::Default => !adt.is_enum(),\n                     sym::Eq\n                     | sym::PartialEq\n                     | sym::Ord\n                     | sym::PartialOrd\n                     | sym::Clone\n                     | sym::Copy\n                     | sym::Hash\n-                    | sym::Debug,\n-                ) => true,\n-                _ => false,\n-            };\n-            if can_derive {\n-                derives.push((\n-                    format!(\"{}\", trait_pred.self_ty()),\n-                    self.tcx.def_span(adt.did),\n-                    format!(\"{}\", trait_pred.trait_ref.print_only_trait_name()),\n-                ));\n+                    | sym::Debug => true,\n+                    _ => false,\n+                };\n+                if can_derive {\n+                    let self_name = trait_pred.self_ty().to_string();\n+                    let self_span = self.tcx.def_span(adt.did);\n+                    if let Some(poly_trait_ref) = pred.to_opt_poly_trait_pred() {\n+                        for super_trait in supertraits(self.tcx, poly_trait_ref.to_poly_trait_ref())\n+                        {\n+                            if let Some(parent_diagnostic_name) =\n+                                self.tcx.get_diagnostic_name(super_trait.def_id())\n+                            {\n+                                derives.push((\n+                                    self_name.clone(),\n+                                    self_span.clone(),\n+                                    parent_diagnostic_name.to_string(),\n+                                ));\n+                            }\n+                        }\n+                    }\n+                    derives.push((self_name, self_span, diagnostic_name.to_string()));\n+                } else {\n+                    traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                }\n             } else {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }"}, {"sha": "1875ea06a06d5adf1f83b98c059b94a4a8d46f43", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -272,9 +272,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n@@ -290,9 +290,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n@@ -308,9 +308,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n@@ -326,9 +326,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error: aborting due to 15 previous errors"}, {"sha": "56fd5ffa89eea4080af1e38377f57702ae1885cd", "filename": "src/test/ui/derives/issue-91550.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -0,0 +1,29 @@\n+use std::collections::HashSet;\n+\n+/// natural case from the issue\n+struct Value(u32);\n+\n+fn main() {\n+    let hs = HashSet::<Value>::new();\n+    hs.insert(Value(0)); //~ ERROR\n+}\n+\n+/// synthetic cases\n+pub struct NoDerives;\n+\n+struct Object<T>(T);\n+impl<T: Eq> Object<T> {\n+    fn use_eq(&self) {}\n+}\n+impl<T: Ord> Object<T> {\n+    fn use_ord(&self) {}\n+}\n+impl<T: Ord + PartialOrd> Object<T> {\n+    fn use_ord_and_partial_ord(&self) {}\n+}\n+\n+fn function(foo: Object<NoDerives>) {\n+    foo.use_eq(); //~ ERROR\n+    foo.use_ord(); //~ ERROR\n+    foo.use_ord_and_partial_ord(); //~ ERROR\n+}"}, {"sha": "bf4b7c7da0d50b319271bd7f3dfb7f65c7e34ef0", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -0,0 +1,84 @@\n+error[E0599]: the method `insert` exists for struct `HashSet<Value>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:8:8\n+   |\n+LL | struct Value(u32);\n+   | ------------------\n+   | |\n+   | doesn't satisfy `Value: Eq`\n+   | doesn't satisfy `Value: Hash`\n+...\n+LL |     hs.insert(Value(0));\n+   |        ^^^^^^ method cannot be called on `HashSet<Value>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Value: Eq`\n+           `Value: Hash`\n+help: consider annotating `Value` with `#[derive(Eq, Hash, PartialEq)]`\n+   |\n+LL | #[derive(Eq, Hash, PartialEq)]\n+   |\n+\n+error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:26:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Eq`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_eq` not found for this\n+...\n+LL |     foo.use_eq();\n+   |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Eq`\n+help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n+   |\n+LL | #[derive(Eq, PartialEq)]\n+   |\n+\n+error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:27:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Ord`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_ord` not found for this\n+...\n+LL |     foo.use_ord();\n+   |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Ord`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n+   |\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+   |\n+\n+error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:28:9\n+   |\n+LL | pub struct NoDerives;\n+   | ---------------------\n+   | |\n+   | doesn't satisfy `NoDerives: Ord`\n+   | doesn't satisfy `NoDerives: PartialOrd`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_ord_and_partial_ord` not found for this\n+...\n+LL |     foo.use_ord_and_partial_ord();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Ord`\n+           `NoDerives: PartialOrd`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n+   |\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=351aa1b5dabe51ae4fcdfc23db51ce60f6699cf0", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}]}