{"sha": "77838d6ba78c23fdc337da7ece974beda95280df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ODM4ZDZiYTc4YzIzZmRjMzM3ZGE3ZWNlOTc0YmVkYTk1MjgwZGY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-30T13:10:19Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-30T13:10:19Z"}, "message": "New lint for issue\n#72", "tree": {"sha": "fc47af30de8208330a6d41f542d2e92ec5368c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc47af30de8208330a6d41f542d2e92ec5368c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77838d6ba78c23fdc337da7ece974beda95280df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77838d6ba78c23fdc337da7ece974beda95280df", "html_url": "https://github.com/rust-lang/rust/commit/77838d6ba78c23fdc337da7ece974beda95280df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77838d6ba78c23fdc337da7ece974beda95280df/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d651c72ff4c8833046dbdad0049893fbc57bef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d651c72ff4c8833046dbdad0049893fbc57bef2", "html_url": "https://github.com/rust-lang/rust/commit/0d651c72ff4c8833046dbdad0049893fbc57bef2"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "3ad3889f9db2537d6bb2fcbdd23b2d4d8e11b33d", "filename": "src/attrs.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/77838d6ba78c23fdc337da7ece974beda95280df/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77838d6ba78c23fdc337da7ece974beda95280df/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=77838d6ba78c23fdc337da7ece974beda95280df", "patch": "@@ -0,0 +1,48 @@\n+/// checks for attributes\n+\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use syntax::ast::*;\n+use syntax::ptr::P;\n+use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+\n+declare_lint! { pub INLINE_ALWAYS, Warn,\n+    \"#[inline(always)] is usually a bad idea.\"}\n+\n+\n+#[derive(Copy,Clone)]\n+pub struct AttrPass;\n+\n+impl LintPass for AttrPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INLINE_ALWAYS)\n+    }\n+    \n+    fn check_item(&mut self, cx: &Context, item: &Item) {\n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+    \n+    fn check_impl_item(&mut self, cx: &Context, item: &ImplItem) { \n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+        \n+\tfn check_trait_item(&mut self, cx: &Context, item: &TraitItem) {\n+\t\tcheck_attrs(cx, &item.ident, &item.attrs)\n+\t}\n+}\n+\n+fn check_attrs(cx: &Context, ident: &Ident, attrs: &[Attribute]) {\n+\tfor attr in attrs {\n+\t\tif let MetaList(ref inline, ref values) = attr.node.value.node {\n+\t\t\tif values.len() != 1 || inline != &\"inline\" { continue; }\n+\t\t\tif let MetaWord(ref always) = values[0].node {\n+\t\t\t\tif always != &\"always\" { continue; }\n+\t\t\t\tcx.span_lint(INLINE_ALWAYS, attr.span, &format!(\n+\t\t\t\t\t\"You have declared #[inline(always)] on {}. This \\\n+\t\t\t\t\tis usually a bad idea. Are you sure?\", \n+\t\t\t\t\tident.as_str()));\n+\t\t\t}\n+\t\t}\n+\t}\n+}"}, {"sha": "918f8813cd205f7424c7a54e0c5220479a3e465f", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77838d6ba78c23fdc337da7ece974beda95280df/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77838d6ba78c23fdc337da7ece974beda95280df/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=77838d6ba78c23fdc337da7ece974beda95280df", "patch": "@@ -24,6 +24,7 @@ pub mod eta_reduction;\n pub mod identity_op;\n pub mod mut_mut;\n pub mod len_zero;\n+pub mod attrs;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -44,6 +45,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box mut_mut::MutMut as LintPassObject);\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n+    reg.register_lint_pass(box attrs::AttrPass as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -60,5 +62,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            mut_mut::MUT_MUT,\n                                            len_zero::LEN_ZERO,\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n+                                           attrs::INLINE_ALWAYS,\n                                            ]);\n }"}, {"sha": "30ce191d3db89d3f6b87a2af3d3b153a7640b50d", "filename": "tests/compile-fail/attrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77838d6ba78c23fdc337da7ece974beda95280df/tests%2Fcompile-fail%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77838d6ba78c23fdc337da7ece974beda95280df/tests%2Fcompile-fail%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fattrs.rs?ref=77838d6ba78c23fdc337da7ece974beda95280df", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(inline_always)]\n+#[inline(always)] //~ERROR You have declared #[inline(always)] on test_attr_lint.\n+fn test_attr_lint() {\n+\tassert!(true)\n+}\n+\n+fn main() {\n+\ttest_attr_lint()\n+}"}]}