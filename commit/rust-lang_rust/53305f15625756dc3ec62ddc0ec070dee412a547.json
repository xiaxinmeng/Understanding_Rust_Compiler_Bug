{"sha": "53305f15625756dc3ec62ddc0ec070dee412a547", "node_id": "C_kwDOAAsO6NoAKDUzMzA1ZjE1NjI1NzU2ZGMzZWM2MmRkYzBlYzA3MGRlZTQxMmE1NDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-12T12:41:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-12T12:41:06Z"}, "message": "Auto merge of #98025 - Dylan-DPC:rollup-cwt2hb7, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97921 (additional docs example for replace **all** of str)\n - #97970 (Fix Termination impl panic on closed stderr)\n - #97991 (Use safer `strip=symbols`-flag for dylibs on macOS)\n - #97992 (Stabilize scoped threads.)\n - #98012 (`ValuePairs::PolyTraitRefs` should be called \"trait\"s in type error diagnostics)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "de706dd27f442cd8d7c5748c4f491c5b33870a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de706dd27f442cd8d7c5748c4f491c5b33870a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53305f15625756dc3ec62ddc0ec070dee412a547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53305f15625756dc3ec62ddc0ec070dee412a547", "html_url": "https://github.com/rust-lang/rust/commit/53305f15625756dc3ec62ddc0ec070dee412a547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53305f15625756dc3ec62ddc0ec070dee412a547/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2aa18d7467e212c4e961378b1061628abdb358", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2aa18d7467e212c4e961378b1061628abdb358", "html_url": "https://github.com/rust-lang/rust/commit/ae2aa18d7467e212c4e961378b1061628abdb358"}, {"sha": "53090fefd1e532dfc7e82714ce062d62f7799c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/53090fefd1e532dfc7e82714ce062d62f7799c0c", "html_url": "https://github.com/rust-lang/rust/commit/53090fefd1e532dfc7e82714ce062d62f7799c0c"}], "stats": {"total": 111, "additions": 61, "deletions": 50}, "files": [{"sha": "82213e7d748478c684311d62d6f77b7a8559d0a3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -1003,10 +1003,14 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     let strip = strip_value(sess);\n \n     if sess.target.is_like_osx {\n-        match strip {\n-            Strip::Debuginfo => strip_symbols_in_osx(sess, &out_filename, Some(\"-S\")),\n-            Strip::Symbols => strip_symbols_in_osx(sess, &out_filename, None),\n-            Strip::None => {}\n+        match (strip, crate_type) {\n+            (Strip::Debuginfo, _) => strip_symbols_in_osx(sess, &out_filename, Some(\"-S\")),\n+            // Per the manpage, `-x` is the maximum safe strip level for dynamic libraries. (#93988)\n+            (Strip::Symbols, CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro) => {\n+                strip_symbols_in_osx(sess, &out_filename, Some(\"-x\"))\n+            }\n+            (Strip::Symbols, _) => strip_symbols_in_osx(sess, &out_filename, None),\n+            (Strip::None, _) => {}\n         }\n     }\n }"}, {"sha": "3eeea7fdb13e22bfd09f37b664b60bc307b2ce45", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -1588,7 +1588,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             Mismatch::Variable(infer::ExpectedFound { expected, found }),\n                         )\n                     }\n-                    ValuePairs::TraitRefs(_) => (false, Mismatch::Fixed(\"trait\")),\n+                    ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n+                        (false, Mismatch::Fixed(\"trait\"))\n+                    }\n                     _ => (false, Mismatch::Fixed(\"type\")),\n                 };\n                 let vals = match self.values_str(values) {"}, {"sha": "d5ed2c4adf4f14532afd840ac73451ca2de8d81f", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -271,6 +271,7 @@ impl str {\n     /// let s = \"this is old\";\n     ///\n     /// assert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n+    /// assert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n     /// ```\n     ///\n     /// When the pattern doesn't match:"}, {"sha": "cedeb27d6d95a3c26b496e8029872b05eb410241", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -350,7 +350,7 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// #![feature(atomic_from_mut, inline_const)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bools = [const { AtomicBool::new(false) }; 10];\n@@ -381,7 +381,7 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// #![feature(atomic_from_mut)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bools = [false; 10];\n@@ -1015,7 +1015,7 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// #![feature(atomic_from_mut, inline_const)]\n     /// use std::ptr::null_mut;\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n@@ -1052,7 +1052,7 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// #![feature(atomic_from_mut)]\n     /// use std::ptr::null_mut;\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n@@ -1607,7 +1607,7 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+            /// #![feature(atomic_from_mut, inline_const)]\n             #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n             ///\n             #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n@@ -1640,7 +1640,7 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_from_mut, scoped_threads)]\n+            /// #![feature(atomic_from_mut)]\n             #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n             ///\n             /// let mut some_ints = [0; 10];"}, {"sha": "e733766741d5e9ccd4fa3442507b6ac8e43a0830", "filename": "library/std/src/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -2161,7 +2161,9 @@ impl Termination for ! {\n impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n-        eprintln!(\"Error: {err:?}\");\n+        // Ignore error if the write fails, for example because stderr is\n+        // already closed. There is not much point panicking at this point.\n+        let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n         ExitCode::FAILURE\n     }\n }"}, {"sha": "f7af66ae5b51f77f68aff283b2e08c779af63c44", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -183,10 +183,10 @@ use crate::time::Duration;\n #[macro_use]\n mod local;\n \n-#[unstable(feature = \"scoped_threads\", issue = \"93203\")]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n mod scoped;\n \n-#[unstable(feature = \"scoped_threads\", issue = \"93203\")]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub use scoped::{scope, Scope, ScopedJoinHandle};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4fd076e4a2d4be477070e26855fe9deb4f66a1c2", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -9,6 +9,7 @@ use crate::sync::Arc;\n /// A scope to spawn scoped threads in.\n ///\n /// See [`scope`] for details.\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct Scope<'scope, 'env: 'scope> {\n     data: ScopeData,\n     /// Invariance over 'scope, to make sure 'scope cannot shrink,\n@@ -17,8 +18,6 @@ pub struct Scope<'scope, 'env: 'scope> {\n     /// Without invariance, this would compile fine but be unsound:\n     ///\n     /// ```compile_fail,E0373\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// std::thread::scope(|s| {\n     ///     s.spawn(|| {\n     ///         let a = String::from(\"abcd\");\n@@ -33,6 +32,7 @@ pub struct Scope<'scope, 'env: 'scope> {\n /// An owned permission to join on a scoped thread (block on its termination).\n ///\n /// See [`Scope::spawn`] for details.\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct ScopedJoinHandle<'scope, T>(JoinInner<'scope, T>);\n \n pub(super) struct ScopeData {\n@@ -82,7 +82,6 @@ impl ScopeData {\n /// # Example\n ///\n /// ```\n-/// #![feature(scoped_threads)]\n /// use std::thread;\n ///\n /// let mut a = vec![1, 2, 3];\n@@ -126,6 +125,7 @@ impl ScopeData {\n ///\n /// The `'env: 'scope` bound is part of the definition of the `Scope` type.\n #[track_caller]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub fn scope<'env, F, T>(f: F) -> T\n where\n     F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,\n@@ -183,6 +183,7 @@ impl<'scope, 'env> Scope<'scope, 'env> {\n     /// to recover from such errors.\n     ///\n     /// [`join`]: ScopedJoinHandle::join\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\n     where\n         F: FnOnce() -> T + Send + 'scope,\n@@ -207,7 +208,6 @@ impl Builder {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n     /// use std::thread;\n     ///\n     /// let mut a = vec![1, 2, 3];\n@@ -240,6 +240,7 @@ impl Builder {\n     /// a.push(4);\n     /// assert_eq!(x, a.len());\n     /// ```\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn spawn_scoped<'scope, 'env, F, T>(\n         self,\n         scope: &'scope Scope<'scope, 'env>,\n@@ -259,8 +260,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n@@ -271,6 +270,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// });\n     /// ```\n     #[must_use]\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n@@ -292,8 +292,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n@@ -303,6 +301,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///     assert!(t.join().is_err());\n     /// });\n     /// ```\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn join(self) -> Result<T> {\n         self.0.join()\n     }\n@@ -316,11 +315,13 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// This function does not block. To block while waiting on the thread to finish,\n     /// use [`join`][Self::join].\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1\n     }\n }\n \n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n impl fmt::Debug for Scope<'_, '_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scope\")\n@@ -331,6 +332,7 @@ impl fmt::Debug for Scope<'_, '_> {\n     }\n }\n \n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n impl<'scope, T> fmt::Debug for ScopedJoinHandle<'scope, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"ScopedJoinHandle\").finish_non_exhaustive()"}, {"sha": "34ee4036cc56c8392940f9a0278359d8b81ca4dc", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     test(gen);\n    |     ^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'a> Generator<&'a mut bool>`\n-              found type `Generator<&mut bool>`\n+   = note: expected trait `for<'a> Generator<&'a mut bool>`\n+              found trait `Generator<&mut bool>`\n note: the lifetime requirement is introduced here\n   --> $DIR/resume-arg-late-bound.rs:8:17\n    |"}, {"sha": "1e2575116a85a4128084c755f182c3e79f245dfa", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r, 's> FnOnce<(&'r &'s str,)>`\n-              found type `for<'r> FnOnce<(&'r &str,)>`\n+   = note: expected trait `for<'r, 's> FnOnce<(&'r &'s str,)>`\n+              found trait `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `FnOnce<(&&str,)>`\n-              found type `for<'r> FnOnce<(&'r &str,)>`\n+   = note: expected trait `FnOnce<(&&str,)>`\n+              found trait `for<'r> FnOnce<(&'r &str,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:45:24\n    |\n@@ -42,8 +42,8 @@ error[E0308]: mismatched types\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n-              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+   = note: expected trait `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n+              found trait `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |\n@@ -61,8 +61,8 @@ error[E0308]: mismatched types\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `FnOnce<(&Wrapper<'_>,)>`\n-              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+   = note: expected trait `FnOnce<(&Wrapper<'_>,)>`\n+              found trait `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-71955.rs:48:24\n    |"}, {"sha": "7ea9345a668a84feb69f4655dab028c293462d6c", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     fn select(&self) -> BufferViewHandle<R>;\n    |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Resources<'_>`\n-              found type `Resources<'a>`\n+   = note: expected trait `Resources<'_>`\n+              found trait `Resources<'a>`\n note: the anonymous lifetime defined here...\n   --> $DIR/issue-27942.rs:5:15\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     fn select(&self) -> BufferViewHandle<R>;\n    |                         ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Resources<'_>`\n-              found type `Resources<'a>`\n+   = note: expected trait `Resources<'_>`\n+              found trait `Resources<'a>`\n note: the lifetime `'a` as defined here...\n   --> $DIR/issue-27942.rs:3:18\n    |"}, {"sha": "6d8f2f5668321072fbfc30822ffa7836c0939cbe", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -31,8 +31,8 @@ error[E0308]: mismatched types\n LL |     take_foo(|a| a);\n    |     ^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r> Fn<(&'r i32,)>`\n-              found type `Fn<(&i32,)>`\n+   = note: expected trait `for<'r> Fn<(&'r i32,)>`\n+              found trait `Fn<(&i32,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187-2.rs:8:14\n    |"}, {"sha": "1d89d4dac5ed3a265ead3b3b6f0cb28533dfa308", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     thing(f);\n    |     ^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r> FnOnce<(&'r u32,)>`\n-              found type `FnOnce<(&u32,)>`\n+   = note: expected trait `for<'r> FnOnce<(&'r u32,)>`\n+              found trait `FnOnce<(&u32,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-79187.rs:4:13\n    |"}, {"sha": "d82b2684cce58396bea267452aacb073a23640d5", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -15,8 +15,8 @@ error[E0308]: mismatched types\n LL |     f(data, identity)\n    |     ^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r> Fn<(&'r T,)>`\n-              found type `Fn<(&T,)>`\n+   = note: expected trait `for<'r> Fn<(&'r T,)>`\n+              found trait `Fn<(&T,)>`\n note: the lifetime requirement is introduced here\n   --> $DIR/issue_74400.rs:8:34\n    |"}, {"sha": "c1a29dfc9339f140040ee2f74f9c07aed91f0409", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     baz(|_| ());\n    |     ^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r> Fn<(&'r (),)>`\n-              found type `Fn<(&(),)>`\n+   = note: expected trait `for<'r> Fn<(&'r (),)>`\n+              found trait `Fn<(&(),)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/closure-mismatch.rs:8:9\n    |"}, {"sha": "b15a4cb110b7364e774055648d7456aba2dda4c4", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     f: &id,\n    |        ^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n-              found type `Fn<(&Foo<'_>,)>`\n+   = note: expected trait `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n+              found trait `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n   --> $DIR/rfc1623.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n-              found type `Fn<(&Foo<'_>,)>`\n+   = note: expected trait `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n+              found trait `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:28:8"}, {"sha": "ed1cf1852e76ad632b6bc9f2caa5bce2e9dcf64b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53305f15625756dc3ec62ddc0ec070dee412a547/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=53305f15625756dc3ec62ddc0ec070dee412a547", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         |x| x\n    |         ^^^^^ one type is more general than the other\n    |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&X,)>`\n+   = note: expected trait `for<'r> Fn<(&'r X,)>`\n+              found trait `Fn<(&X,)>`\n note: this closure does not fulfill the lifetime requirements\n   --> $DIR/issue-57611-trait-alias.rs:21:9\n    |"}]}