{"sha": "51357cf1cd8804a69450a2908f24c4b50942c067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMzU3Y2YxY2Q4ODA0YTY5NDUwYTI5MDhmMjRjNGI1MDk0MmMwNjc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-05T13:27:18Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-04-05T13:29:00Z"}, "message": "Apply review feedback", "tree": {"sha": "499edc1ac0660cff2dd55f9fbfe408012f93bcf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499edc1ac0660cff2dd55f9fbfe408012f93bcf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51357cf1cd8804a69450a2908f24c4b50942c067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51357cf1cd8804a69450a2908f24c4b50942c067", "html_url": "https://github.com/rust-lang/rust/commit/51357cf1cd8804a69450a2908f24c4b50942c067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51357cf1cd8804a69450a2908f24c4b50942c067/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7365748c0cce005795feeb6a220c238fb0c71c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7365748c0cce005795feeb6a220c238fb0c71c84", "html_url": "https://github.com/rust-lang/rust/commit/7365748c0cce005795feeb6a220c238fb0c71c84"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "7c94681151c454fc72244ae2ae7cffd6fecd393a", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/51357cf1cd8804a69450a2908f24c4b50942c067/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51357cf1cd8804a69450a2908f24c4b50942c067/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=51357cf1cd8804a69450a2908f24c4b50942c067", "patch": "@@ -2728,8 +2728,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n         let mut at_leaf = true;\n         while cur_node.len() < node::MIN_LEN {\n             match handle_underfull_node(cur_node) {\n-                AtRoot(_) => break,\n-                EmptyParent(_) => unreachable!(),\n+                AtRoot => break,\n                 Merged(edge, merged_with_left, offset) => {\n                     // If we merged with our right sibling then our tracked\n                     // position has not changed. However if we merged with our\n@@ -2740,7 +2739,6 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n                             Leaf(leaf) => leaf,\n                             Internal(_) => unreachable!(),\n                         };\n-                        debug_assert!(idx <= node.len());\n                         pos = unsafe { Handle::new_edge(node, idx) };\n                     }\n \n@@ -2754,7 +2752,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n                         at_leaf = false;\n                     }\n                 }\n-                Stole(_, stole_from_left) => {\n+                Stole(stole_from_left) => {\n                     // Adjust the tracked position if we stole from a left sibling\n                     if stole_from_left && at_leaf {\n                         // SAFETY: This is safe since we just added an element to our node.\n@@ -2781,28 +2779,25 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n }\n \n enum UnderflowResult<'a, K, V> {\n-    AtRoot(NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>),\n-    EmptyParent(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n+    AtRoot,\n     Merged(Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>, bool, usize),\n-    Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>, bool),\n+    Stole(bool),\n }\n \n fn handle_underfull_node<K, V>(\n     node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>,\n ) -> UnderflowResult<'_, K, V> {\n     let parent = match node.ascend() {\n         Ok(parent) => parent,\n-        Err(root) => return AtRoot(root),\n+        Err(_) => return AtRoot,\n     };\n \n     let (is_left, mut handle) = match parent.left_kv() {\n         Ok(left) => (true, left),\n-        Err(parent) => match parent.right_kv() {\n-            Ok(right) => (false, right),\n-            Err(parent) => {\n-                return EmptyParent(parent.into_node());\n-            }\n-        },\n+        Err(parent) => {\n+            let right = unsafe { unwrap_unchecked(parent.right_kv().ok()) };\n+            (false, right)\n+        }\n     };\n \n     if handle.can_merge() {\n@@ -2814,7 +2809,7 @@ fn handle_underfull_node<K, V>(\n         } else {\n             handle.steal_right();\n         }\n-        Stole(handle.into_node(), is_left)\n+        Stole(is_left)\n     }\n }\n "}]}