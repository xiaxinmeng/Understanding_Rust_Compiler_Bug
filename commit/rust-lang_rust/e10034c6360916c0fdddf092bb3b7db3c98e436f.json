{"sha": "e10034c6360916c0fdddf092bb3b7db3c98e436f", "node_id": "C_kwDOAAsO6NoAKGUxMDAzNGM2MzYwOTE2YzBmZGRkZjA5MmJiM2I3ZGIzYzk4ZTQzNmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T15:35:53Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T17:49:48Z"}, "message": "Properly implement explicit_item_bounds for RPITITs trait assoc ty", "tree": {"sha": "8c33b87d0e5de43de717b3d77b59e969cde55668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c33b87d0e5de43de717b3d77b59e969cde55668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e10034c6360916c0fdddf092bb3b7db3c98e436f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQGJ7wACgkQgTGiTgx5\n768Y0Q//ewu4MqGvPoHigvgdgVHg8S7+V4ILVf+foPoIIeURPowP1DkmTto7ofe1\nvy1WRxdVubMrjLx/c5KFuoRQl0VUWo/kgZL/nl3lwbDOhvzXgu6SdMbhaM0rHb1p\ngjZgepD6Rb7ZrCsLqX2Hty6iqoPREaJ7N1QV00cydqDJV+YLqkDrJGSnDRg6shaY\niF2uasgKt8u5tJubTPeHycNRC5IcX3+x8UYze7jMCxEAaPuE58GWV2BpTioPyJBK\n1uE6fpEhAbQfQtcfLDFh9/wvTQ1vRHjePlmLQKCMGhgy/m4yE/dTfxAB0x1pqL+4\nVPzm1vDEXkK48LWTvJhJfQj0ZDkQB6fqAndRPHeE1zHFZf17vL7XCcrjyspL2pJl\nzcVb85KDusvXrLpw5A9AmepRakfSwqaGnfDnr+qkN/pWB6EPw1sN2YDmJfMoyGwT\n3tLCrsdEt+QaQFtwQ8ttfuksmpD/ciaIo9Zx4Huj3ThbCZsOovQkhFlguPqAYVix\nI7ebPj01/QMjpPJPjpuiKkAmwSpH7Jy+hZECMiWFGxGNYqMvMzccak61IkOkt86w\nhj12ntYuU4D1yVxTMQRUTFPYZhoRzy/isdq/f32lc5QuJm5v3CBzJxag054q1Iqh\nlclRFOmlLP8dIbCvL9HJ9ZNK1Iv7GB8cidnibMz15x9cyF/7a3Y=\n=up5E\n-----END PGP SIGNATURE-----", "payload": "tree 8c33b87d0e5de43de717b3d77b59e969cde55668\nparent 83c0ff8fa5eb1789b9d5caa1d5bb2b344165e897\nauthor Santiago Pastorino <spastorino@gmail.com> 1677857753 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678124988 -0300\n\nProperly implement explicit_item_bounds for RPITITs trait assoc ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e10034c6360916c0fdddf092bb3b7db3c98e436f", "html_url": "https://github.com/rust-lang/rust/commit/e10034c6360916c0fdddf092bb3b7db3c98e436f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e10034c6360916c0fdddf092bb3b7db3c98e436f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c0ff8fa5eb1789b9d5caa1d5bb2b344165e897", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c0ff8fa5eb1789b9d5caa1d5bb2b344165e897", "html_url": "https://github.com/rust-lang/rust/commit/83c0ff8fa5eb1789b9d5caa1d5bb2b344165e897"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "7dce29cc0bbe39b748f60ab0180d9ebcc4917921", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e10034c6360916c0fdddf092bb3b7db3c98e436f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10034c6360916c0fdddf092bb3b7db3c98e436f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=e10034c6360916c0fdddf092bb3b7db3c98e436f", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -58,17 +58,10 @@ fn opaque_type_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     opaque_def_id: DefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n+    item_ty: Ty<'tcx>,\n     span: Span,\n-    in_trait: bool,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n-        let substs = InternalSubsts::identity_for_item(tcx, opaque_def_id);\n-        let item_ty = if in_trait {\n-            tcx.mk_projection(opaque_def_id, substs)\n-        } else {\n-            tcx.mk_opaque(opaque_def_id, substs)\n-        };\n-\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n         let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n@@ -83,7 +76,18 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n+    // generated the synthesized associate type.\n+    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n+        tcx.opt_rpitit_info(def_id)\n+    {\n+        Some(opaque_def_id)\n+    } else {\n+        None\n+    };\n+\n+    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -94,7 +98,15 @@ pub(super) fn explicit_item_bounds(\n             kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n             ..\n-        }) => opaque_type_bounds(tcx, def_id, bounds, *span, *in_trait),\n+        }) => {\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+            let item_ty = if *in_trait || rpitit_info.is_some() {\n+                tcx.mk_projection(def_id, substs)\n+            } else {\n+                tcx.mk_opaque(def_id, substs)\n+            };\n+            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+        }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }\n }"}, {"sha": "f67566a7d0e063bf59e1b70aaecb60ffb416934f", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e10034c6360916c0fdddf092bb3b7db3c98e436f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10034c6360916c0fdddf092bb3b7db3c98e436f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=e10034c6360916c0fdddf092bb3b7db3c98e436f", "patch": "@@ -302,9 +302,6 @@ fn associated_item_for_impl_trait_in_trait(\n     // There are no inferred outlives for the synthesized associated type.\n     trait_assoc_ty.inferred_outlives_of(&[]);\n \n-    // FIXME implement this.\n-    trait_assoc_ty.explicit_item_bounds(&[]);\n-\n     local_def_id\n }\n "}]}