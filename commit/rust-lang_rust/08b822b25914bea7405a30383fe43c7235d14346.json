{"sha": "08b822b25914bea7405a30383fe43c7235d14346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YjgyMmIyNTkxNGJlYTc0MDVhMzAzODNmZTQzYzcyMzVkMTQzNDY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-20T17:46:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-20T17:46:22Z"}, "message": "Update completions test output", "tree": {"sha": "4e630c8f220b5b6b95131e7557957c876d545cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e630c8f220b5b6b95131e7557957c876d545cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b822b25914bea7405a30383fe43c7235d14346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b822b25914bea7405a30383fe43c7235d14346", "html_url": "https://github.com/rust-lang/rust/commit/08b822b25914bea7405a30383fe43c7235d14346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b822b25914bea7405a30383fe43c7235d14346/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "html_url": "https://github.com/rust-lang/rust/commit/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707"}], "stats": {"total": 102, "additions": 66, "deletions": 36}, "files": [{"sha": "a289efc34eb9a37b11432a6ad7a163c2608e3560", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=08b822b25914bea7405a30383fe43c7235d14346", "patch": "@@ -165,8 +165,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n             \"#]],\n         );\n@@ -187,8 +187,8 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                bn b      i32\n-                bn a\n+                lc b      i32\n+                lc a\n                 fn quux() fn quux()\n             \"#]],\n         );\n@@ -203,7 +203,7 @@ fn quux() {\n }\n \"#,\n             expect![[r#\"\n-                bn x\n+                lc x\n                 fn quux() fn quux()\n             \"#]],\n         );\n@@ -263,7 +263,7 @@ fn main() {\n         check(\n             r#\"struct S<T> { x: $0}\"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 tp T\n                 st S<\u2026>\n             \"#]],\n@@ -275,7 +275,7 @@ fn main() {\n         check(\n             r#\"enum X { Y($0) }\"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 en X\n             \"#]],\n         );\n@@ -378,8 +378,8 @@ fn foo() {\n \"#,\n             // FIXME: should be only one bar here\n             expect![[r#\"\n-                bn bar   i32\n-                bn bar   i32\n+                lc bar   i32\n+                lc bar   i32\n                 fn foo() fn foo()\n             \"#]],\n         );\n@@ -390,8 +390,8 @@ fn foo() {\n         check(\n             r#\"impl S { fn foo(&self) { $0 } }\"#,\n             expect![[r#\"\n-                bn self &{unknown}\n-                tp Self\n+                lc self &{unknown}\n+                sp Self\n             \"#]],\n         );\n     }\n@@ -575,8 +575,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -594,8 +594,8 @@ fn quux(x: i32) {\n }\n \",\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -613,8 +613,8 @@ fn quux(x: i32) {\n }\n \"#,\n             expect![[r#\"\n-                bn y       i32\n-                bn x       i32\n+                lc y       i32\n+                lc x       i32\n                 fn quux(\u2026) fn quux(x: i32)\n                 ma m!(\u2026)   macro_rules! m\n             \"#]],\n@@ -750,7 +750,7 @@ struct MyStruct {}\n impl My$0\n \"#,\n             expect![[r#\"\n-                tp Self\n+                sp Self\n                 tt MyTrait\n                 st MyStruct\n             \"#]],"}, {"sha": "d2e6a6aeb4fb2e1ada6208be9cf9138091b6b69b", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=08b822b25914bea7405a30383fe43c7235d14346", "patch": "@@ -121,9 +121,9 @@ pub enum CompletionScore {\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum CompletionItemKind {\n     SymbolKind(SymbolKind),\n-    BuiltinType,\n     Attribute,\n     Binding,\n+    BuiltinType,\n     Keyword,\n     Method,\n     Snippet,"}, {"sha": "fa594b5e527bd704b25cc0f67f1f21976eda81b4", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b822b25914bea7405a30383fe43c7235d14346/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=08b822b25914bea7405a30383fe43c7235d14346", "patch": "@@ -409,7 +409,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 54..56,\n                         delete: 54..56,\n                         insert: \"Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"{ x: i32, y: i32 }\",\n                     },\n                 ]\n@@ -432,7 +434,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 46..48,\n                         delete: 46..48,\n                         insert: \"Foo($0)\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Foo\",\n                         detail: \"(i32, i32)\",\n                         trigger_call_info: true,\n@@ -457,7 +461,9 @@ fn main() { Foo::Fo$0 }\n                         source_range: 35..37,\n                         delete: 35..37,\n                         insert: \"Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"()\",\n                     },\n                 ]\n@@ -481,7 +487,9 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"Spam::Bar($0)\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Spam::Bar\",\n                         detail: \"(i32)\",\n                         trigger_call_info: true,\n@@ -491,14 +499,18 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"m\",\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                     },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"m::Spam::Foo\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         lookup: \"Spam::Foo\",\n                         detail: \"()\",\n                     },\n@@ -507,7 +519,9 @@ fn main() { let _: m::Spam = S$0 }\n                         source_range: 75..76,\n                         delete: 75..76,\n                         insert: \"main()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"main\",\n                         detail: \"fn main()\",\n                     },\n@@ -534,7 +548,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"main()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"main\",\n                         detail: \"fn main()\",\n                     },\n@@ -543,7 +559,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"something_deprecated()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"something_deprecated\",\n                         detail: \"fn something_deprecated()\",\n                         deprecated: true,\n@@ -553,7 +571,9 @@ fn main() { som$0 }\n                         source_range: 127..130,\n                         delete: 127..130,\n                         insert: \"something_else_deprecated()$0\",\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         lookup: \"something_else_deprecated\",\n                         detail: \"fn something_else_deprecated()\",\n                         deprecated: true,\n@@ -574,7 +594,9 @@ fn foo() { A { the$0 } }\n                         source_range: 57..60,\n                         delete: 57..60,\n                         insert: \"the_field\",\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: \"u32\",\n                         deprecated: true,\n                     },\n@@ -614,7 +636,9 @@ impl S {\n                         source_range: 94..94,\n                         delete: 94..94,\n                         insert: \"foo\",\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: \"{unknown}\",\n                         documentation: Documentation(\n                             \"Field docs\",\n@@ -645,7 +669,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"E\",\n-                        kind: Enum,\n+                        kind: SymbolKind(\n+                            Enum,\n+                        ),\n                         documentation: Documentation(\n                             \"enum docs\",\n                         ),\n@@ -655,7 +681,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"V\",\n-                        kind: EnumVariant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: \"()\",\n                         documentation: Documentation(\n                             \"variant docs\",\n@@ -666,7 +694,9 @@ use self::E::*;\n                         source_range: 10..12,\n                         delete: 10..12,\n                         insert: \"my\",\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                         documentation: Documentation(\n                             \"mod docs\",\n                         ),\n@@ -892,7 +922,7 @@ struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n-                bn world [type+name]\n+                lc world [type+name]\n                 st WorldSnapshot []\n                 fn go(\u2026) []\n             \"#]],\n@@ -909,7 +939,7 @@ fn f(foo: &Foo) { f(foo, w$0) }\n             expect![[r#\"\n                 st Foo []\n                 fn f(\u2026) []\n-                bn foo []\n+                lc foo []\n             \"#]],\n         );\n     }"}]}