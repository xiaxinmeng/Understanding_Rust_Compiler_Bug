{"sha": "4ea246b0b353daf6ea87e20cfbe51abe90875b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYTI0NmIwYjM1M2RhZjZlYTg3ZTIwY2ZiZTUxYWJlOTA4NzViMjE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-08-20T02:24:07Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-09-04T12:50:55Z"}, "message": "use a structured suggestion for char-lit-as-u8", "tree": {"sha": "84893f07eb671845245dc765219ac1dbe0ee06d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84893f07eb671845245dc765219ac1dbe0ee06d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea246b0b353daf6ea87e20cfbe51abe90875b21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl1vszAWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdF4pB/45bdOR/v2iJTMs32l3T8VMr+0N\njWeUWuEZdrTJ9B48JoZK1gkjyOyGFOfDF/EjipkCXAze3pxwXwVvuaTvriwWzDpd\n1Rhh1OW4QLNZCYXHHfZrz9K2IRfmYlfHIEoIc91BlDDN01P+Lneipv+neiShcvSB\n+Jj23Dlk4w+pgyMcwRuAvTnKFOsNoe2tNnpFcikpIn9dt7EzcozJJBZRhtaX3AY6\ncCNgVuAQmjRJPtv2a9dRqsp59wkvTYbtIf0/KKn2cNRR321PE8kYRvLIgbr8Wk7Y\nTy2e1C2FE98GwF1Qo1RRlEwEMDfFfnY+xngmDBPAq32xlHJMdoW7zBVQsEQn\n=Djh0\n-----END PGP SIGNATURE-----", "payload": "tree 84893f07eb671845245dc765219ac1dbe0ee06d1\nparent 70e7d075df7b3e11e61fa99b30e1ede26cee6afd\nauthor Andy Russell <arussell123@gmail.com> 1566267847 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1567601455 -0400\n\nuse a structured suggestion for char-lit-as-u8\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea246b0b353daf6ea87e20cfbe51abe90875b21", "html_url": "https://github.com/rust-lang/rust/commit/4ea246b0b353daf6ea87e20cfbe51abe90875b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea246b0b353daf6ea87e20cfbe51abe90875b21/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "html_url": "https://github.com/rust-lang/rust/commit/70e7d075df7b3e11e61fa99b30e1ede26cee6afd"}], "stats": {"total": 114, "additions": 89, "deletions": 25}, "files": [{"sha": "f11bcf25aec4b1f16fad9253ded65bad2ede29a3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -15,7 +15,7 @@ use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n-use syntax::ast::{FloatTy, IntTy, UintTy};\n+use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n use syntax::symbol::sym;\n@@ -1122,7 +1122,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.node {\n-                use syntax::ast::{LitIntType, LitKind};\n                 if let LitKind::Int(n, _) = lit.node {\n                     if cast_to.is_floating_point() {\n                         let from_nbits = 128 - n.leading_zeros();\n@@ -1473,29 +1472,40 @@ declare_clippy_lint! {\n     /// ```\n     pub CHAR_LIT_AS_U8,\n     complexity,\n-    \"casting a character literal to u8\"\n+    \"casting a character literal to u8 truncates\"\n }\n \n declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use syntax::ast::LitKind;\n-\n-        if let ExprKind::Cast(ref e, _) = expr.node {\n-            if let ExprKind::Lit(ref l) = e.node {\n-                if let LitKind::Char(_) = l.node {\n-                    if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty && !expr.span.from_expansion() {\n-                        let msg = \"casting character literal to u8. `char`s \\\n-                                   are 4 bytes wide in rust, so casting to u8 \\\n-                                   truncates them\";\n-                        let help = format!(\n-                            \"Consider using a byte literal instead:\\nb{}\",\n-                            snippet(cx, e.span, \"'x'\")\n-                        );\n-                        span_help_and_lint(cx, CHAR_LIT_AS_U8, expr.span, msg, &help);\n-                    }\n-                }\n+        if_chain! {\n+            if !expr.span.from_expansion();\n+            if let ExprKind::Cast(e, _) = &expr.node;\n+            if let ExprKind::Lit(l) = &e.node;\n+            if let LitKind::Char(c) = l.node;\n+            if ty::Uint(UintTy::U8) == cx.tables.expr_ty(expr).sty;\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let snippet = snippet_with_applicability(cx, e.span, \"'x'\", &mut applicability);\n+\n+                span_lint_and_then(\n+                    cx,\n+                    CHAR_LIT_AS_U8,\n+                    expr.span,\n+                    \"casting a character literal to `u8` truncates\",\n+                    |db| {\n+                        db.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n+\n+                        if c.is_ascii() {\n+                            db.span_suggestion(\n+                                expr.span,\n+                                \"use a byte literal instead\",\n+                                format!(\"b{}\", snippet),\n+                                applicability,\n+                            );\n+                        }\n+                });\n             }\n         }\n     }"}, {"sha": "0a53a3d6490a3d8ade83eb4de080af0da6fc31ba", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::char_lit_as_u8)]\n-#![allow(unused_variables)]\n+\n fn main() {\n-    let c = 'a' as u8;\n+    let _ = '\u2764' as u8; // no suggestion, since a byte literal won't work.\n }"}, {"sha": "b9836d2f25532d5806663ac9c865fd6430fe867a", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -1,12 +1,11 @@\n-error: casting character literal to u8. `char`s are 4 bytes wide in rust, so casting to u8 truncates them\n+error: casting a character literal to `u8` truncates\n   --> $DIR/char_lit_as_u8.rs:4:13\n    |\n-LL |     let c = 'a' as u8;\n+LL |     let _ = '\u2764' as u8; // no suggestion, since a byte literal won't work.\n    |             ^^^^^^^^^\n    |\n    = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n-   = help: Consider using a byte literal instead:\n-           b'a'\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n \n error: aborting due to previous error\n "}, {"sha": "3dc3cb4e7573dbb3147ac20f4a876c655da51a5d", "filename": "tests/ui/char_lit_as_u8_suggestions.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.fixed?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::char_lit_as_u8)]\n+\n+fn main() {\n+    let _ = b'a';\n+    let _ = b'\\n';\n+    let _ = b'\\0';\n+    let _ = b'\\x01';\n+}"}, {"sha": "d379a0234942ab46864a666ac5c4237a498db9ca", "filename": "tests/ui/char_lit_as_u8_suggestions.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.rs?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::char_lit_as_u8)]\n+\n+fn main() {\n+    let _ = 'a' as u8;\n+    let _ = '\\n' as u8;\n+    let _ = '\\0' as u8;\n+    let _ = '\\x01' as u8;\n+}"}, {"sha": "bf7cb1607b4e208cbf7d633d2a29e068b2269f3d", "filename": "tests/ui/char_lit_as_u8_suggestions.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ea246b0b353daf6ea87e20cfbe51abe90875b21/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8_suggestions.stderr?ref=4ea246b0b353daf6ea87e20cfbe51abe90875b21", "patch": "@@ -0,0 +1,35 @@\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:6:13\n+   |\n+LL |     let _ = 'a' as u8;\n+   |             ^^^^^^^^^ help: use a byte literal instead: `b'a'`\n+   |\n+   = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:7:13\n+   |\n+LL |     let _ = '/n' as u8;\n+   |             ^^^^^^^^^^ help: use a byte literal instead: `b'/n'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:8:13\n+   |\n+LL |     let _ = '/0' as u8;\n+   |             ^^^^^^^^^^ help: use a byte literal instead: `b'/0'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: casting a character literal to `u8` truncates\n+  --> $DIR/char_lit_as_u8_suggestions.rs:9:13\n+   |\n+LL |     let _ = '/x01' as u8;\n+   |             ^^^^^^^^^^^^ help: use a byte literal instead: `b'/x01'`\n+   |\n+   = note: `char` is four bytes wide, but `u8` is a single byte\n+\n+error: aborting due to 4 previous errors\n+"}]}