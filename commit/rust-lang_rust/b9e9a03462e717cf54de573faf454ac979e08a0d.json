{"sha": "b9e9a03462e717cf54de573faf454ac979e08a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZTlhMDM0NjJlNzE3Y2Y1NGRlNTczZmFmNDU0YWM5NzllMDhhMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-29T06:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-29T06:16:22Z"}, "message": "Auto merge of #41564 - gaurikholkar:master, r=nikomatsakis\n\nDisable ref hint for pattern in let and adding ui tests #40402\n\nA fix to #40402\n\nThe `to prevent move, use ref e or ref mut e ` has been disabled.\n```\nfn main() {\n    let v = vec![String::from(\"oh no\")];\n\n    let e = v[0];\n}\n```\nnow gives\n```\nerror[E0507]: cannot move out of indexed content\n --> example.rs:4:13\n  |\n4 |     let e = v[0];\n  |             ^^^^ cannot move out of indexed content\n\nerror: aborting due to previous error\n```\nI have added ui tests for the same and also modified a compile-fail test.", "tree": {"sha": "85d85104af5cfd5075eb32cebca6aff83c1d61c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d85104af5cfd5075eb32cebca6aff83c1d61c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9e9a03462e717cf54de573faf454ac979e08a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e9a03462e717cf54de573faf454ac979e08a0d", "html_url": "https://github.com/rust-lang/rust/commit/b9e9a03462e717cf54de573faf454ac979e08a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9e9a03462e717cf54de573faf454ac979e08a0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95467d33cb98c8a9be12da15be559e60628180f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/95467d33cb98c8a9be12da15be559e60628180f5", "html_url": "https://github.com/rust-lang/rust/commit/95467d33cb98c8a9be12da15be559e60628180f5"}, {"sha": "ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "html_url": "https://github.com/rust-lang/rust/commit/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85"}], "stats": {"total": 165, "additions": 146, "deletions": 19}, "files": [{"sha": "f193588dd7d6c605e77849de7abd94b2c249d2e2", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -11,7 +11,7 @@\n //! Computes moves.\n \n use borrowck::*;\n-use borrowck::gather_loans::move_error::MoveSpanAndPath;\n+use borrowck::gather_loans::move_error::MovePlace;\n use borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n use borrowck::move_data::*;\n use rustc::middle::expr_use_visitor as euv;\n@@ -23,13 +23,67 @@ use rustc::ty::{self, Ty};\n use std::rc::Rc;\n use syntax::ast;\n use syntax_pos::Span;\n-use rustc::hir::{self, PatKind};\n+use rustc::hir::*;\n+use rustc::hir::map::Node::*;\n \n struct GatherMoveInfo<'tcx> {\n     id: ast::NodeId,\n     kind: MoveKind,\n     cmt: mc::cmt<'tcx>,\n-    span_path_opt: Option<MoveSpanAndPath>\n+    span_path_opt: Option<MovePlace<'tcx>>\n+}\n+\n+/// Represents the kind of pattern\n+#[derive(Debug, Clone, Copy)]\n+pub enum PatternSource<'tcx> {\n+    MatchExpr(&'tcx Expr),\n+    LetDecl(&'tcx Local),\n+    Other,\n+}\n+\n+/// Analyzes the context where the pattern appears to determine the\n+/// kind of hint we want to give. In particular, if the pattern is in a `match`\n+/// or nested within other patterns, we want to suggest a `ref` binding:\n+///\n+///     let (a, b) = v[0]; // like the `a` and `b` patterns here\n+///     match v[0] { a => ... } // or the `a` pattern here\n+///\n+/// But if the pattern is the outermost pattern in a `let`, we would rather\n+/// suggest that the author add a `&` to the initializer:\n+///\n+///     let x = v[0]; // suggest `&v[0]` here\n+///\n+/// In this latter case, this function will return `PatternSource::LetDecl`\n+/// with a reference to the let\n+fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n+\n+    let parent = tcx.hir.get_parent_node(pat.id);\n+\n+    match tcx.hir.get(parent) {\n+        NodeExpr(ref e) => {\n+            // the enclosing expression must be a `match` or something else\n+            assert!(match e.node {\n+                        ExprMatch(..) => true,\n+                        _ => return PatternSource::Other,\n+                    });\n+            PatternSource::MatchExpr(e)\n+        }\n+        NodeStmt(ref s) => {\n+            // the enclosing statement must be a `let` or something else\n+            match s.node {\n+                StmtDecl(ref decl, _) => {\n+                    match decl.node {\n+                        DeclLocal(ref local) => PatternSource::LetDecl(local),\n+                        _ => return PatternSource::Other,\n+                    }\n+                }\n+                _ => return PatternSource::Other,\n+            }\n+        }\n+\n+        _ => return PatternSource::Other,\n+\n+    }\n }\n \n pub fn gather_decl<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n@@ -95,11 +149,15 @@ pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                       move_error_collector: &mut MoveErrorCollector<'tcx>,\n                                       move_pat: &hir::Pat,\n                                       cmt: mc::cmt<'tcx>) {\n+    let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n         PatKind::Binding(_, _, ref path1, _) => {\n-            Some(MoveSpanAndPath{span: move_pat.span,\n-                                 name: path1.node})\n-        },\n+            Some(MovePlace {\n+                     span: move_pat.span,\n+                     name: path1.node,\n+                     pat_source: source,\n+                 })\n+        }\n         _ => None,\n     };\n     let move_info = GatherMoveInfo {\n@@ -108,6 +166,11 @@ pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         cmt: cmt,\n         span_path_opt: pat_span_path_opt,\n     };\n+\n+    debug!(\"gather_move_from_pat: move_pat={:?} source={:?}\",\n+           move_pat,\n+           source);\n+\n     gather_move(bccx, move_data, move_error_collector, move_info);\n }\n "}, {"sha": "9a72f3866a0e1c34579ccdbe53a2aa8590f8b897", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -17,6 +17,7 @@ use rustc::ty;\n use syntax::ast;\n use syntax_pos;\n use errors::DiagnosticBuilder;\n+use borrowck::gather_loans::gather_moves::PatternSource;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>\n@@ -40,12 +41,12 @@ impl<'tcx> MoveErrorCollector<'tcx> {\n \n pub struct MoveError<'tcx> {\n     move_from: mc::cmt<'tcx>,\n-    move_to: Option<MoveSpanAndPath>\n+    move_to: Option<MovePlace<'tcx>>\n }\n \n impl<'tcx> MoveError<'tcx> {\n     pub fn with_move_info(move_from: mc::cmt<'tcx>,\n-                          move_to: Option<MoveSpanAndPath>)\n+                          move_to: Option<MovePlace<'tcx>>)\n                           -> MoveError<'tcx> {\n         MoveError {\n             move_from: move_from,\n@@ -55,30 +56,41 @@ impl<'tcx> MoveError<'tcx> {\n }\n \n #[derive(Clone)]\n-pub struct MoveSpanAndPath {\n+pub struct MovePlace<'tcx> {\n     pub span: syntax_pos::Span,\n     pub name: ast::Name,\n+    pub pat_source: PatternSource<'tcx>,\n }\n \n pub struct GroupedMoveErrors<'tcx> {\n     move_from: mc::cmt<'tcx>,\n-    move_to_places: Vec<MoveSpanAndPath>\n+    move_to_places: Vec<MovePlace<'tcx>>\n }\n \n-fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n-                                errors: &Vec<MoveError<'tcx>>) {\n+fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<MoveError<'tcx>>) {\n     let grouped_errors = group_errors_with_same_origin(errors);\n     for error in &grouped_errors {\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n         let mut is_first_note = true;\n-        for move_to in &error.move_to_places {\n-            err = note_move_destination(err, move_to.span, move_to.name, is_first_note);\n-            is_first_note = false;\n+        match error.move_to_places.get(0) {\n+            Some(&MovePlace { pat_source: PatternSource::LetDecl(_), .. }) => {\n+                // ignore patterns that are found at the top-level of a `let`;\n+                // see `get_pattern_source()` for details\n+            }\n+            _ => {\n+                for move_to in &error.move_to_places {\n+\n+                    err = note_move_destination(err, move_to.span, move_to.name, is_first_note);\n+                    is_first_note = false;\n+                }\n+            }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            err.span_label(bccx.tcx.hir.span(upvar_id.var_id), &\"captured outer variable\");\n+            err.span_label(bccx.tcx.hir.span(upvar_id.var_id),\n+                           &\"captured outer variable\");\n         }\n         err.emit();\n+\n     }\n }\n "}, {"sha": "98bb6b14b945c37fa9c6d8614fc0d6033b0af985", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -54,7 +54,6 @@ fn c() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE to prevent move\n     //~| cannot move out of here\n }\n \n@@ -68,7 +67,6 @@ fn d() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE to prevent move\n     //~| cannot move out of here\n }\n \n@@ -84,7 +82,6 @@ fn e() {\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n-    //~^ NOTE to prevent move\n     //~| cannot move out of here\n }\n "}, {"sha": "7efa3bd9d5b311980e104b5c90b9b9050c409c2c", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we do not suggest `ref f` here in the `main()` function.\n+struct Foo {\n+    pub v: Vec<String>,\n+}\n+\n+fn main() {\n+    let mut f = Foo { v: Vec::new() };\n+    f.v.push(\"hello\".to_string());\n+    let e = f.v[0];\n+}"}, {"sha": "5e743b6bd3fe7b2ec2188e1ca22077b7466c377d", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -0,0 +1,8 @@\n+error[E0507]: cannot move out of indexed content\n+  --> $DIR/issue-40402-1.rs:19:13\n+   |\n+19 |     let e = f.v[0];\n+   |             ^^^^^^ cannot move out of indexed content\n+\n+error: aborting due to previous error\n+"}, {"sha": "76e038b696e8fe7122f9ffd6183da01c2bbbafbd", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we do suggest `(ref a, ref b)` here, since `a` and `b`\n+// are nested within a pattern\n+fn main() {\n+    let x = vec![(String::new(), String::new())];\n+    let (a, b) = x[0];\n+}"}, {"sha": "0060b683bba43637789a732186b8de60b21e75f5", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9e9a03462e717cf54de573faf454ac979e08a0d/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=b9e9a03462e717cf54de573faf454ac979e08a0d", "patch": "@@ -0,0 +1,11 @@\n+error[E0507]: cannot move out of indexed content\n+  --> $DIR/issue-40402-2.rs:15:18\n+   |\n+15 |     let (a, b) = x[0];\n+   |          -  -    ^^^^ cannot move out of indexed content\n+   |          |  |\n+   |          |  ...and here (use `ref b` or `ref mut b`)\n+   |          hint: to prevent move, use `ref a` or `ref mut a`\n+\n+error: aborting due to previous error\n+"}]}