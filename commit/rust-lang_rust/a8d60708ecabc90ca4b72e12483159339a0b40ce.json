{"sha": "a8d60708ecabc90ca4b72e12483159339a0b40ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDYwNzA4ZWNhYmM5MGNhNGI3MmUxMjQ4MzE1OTMzOWEwYjQwY2U=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-02T23:11:48Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-02T23:11:48Z"}, "message": "Refactor candidate selection", "tree": {"sha": "c24b5c03dc1977e3c3267f3ad91dafa3ba45def9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24b5c03dc1977e3c3267f3ad91dafa3ba45def9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d60708ecabc90ca4b72e12483159339a0b40ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d60708ecabc90ca4b72e12483159339a0b40ce", "html_url": "https://github.com/rust-lang/rust/commit/a8d60708ecabc90ca4b72e12483159339a0b40ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d60708ecabc90ca4b72e12483159339a0b40ce/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21", "html_url": "https://github.com/rust-lang/rust/commit/25e4389866d8a4483d7a20b5d3a72c2b00dd9c21"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "038c414662a8a2ec6e61aee7304fa1d5d51d21b3", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8d60708ecabc90ca4b72e12483159339a0b40ce/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d60708ecabc90ca4b72e12483159339a0b40ce/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=a8d60708ecabc90ca4b72e12483159339a0b40ce", "patch": "@@ -240,23 +240,24 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                 let mut impl_candidates = Vec::new();\n                                 let trait_def = infcx.tcx.lookup_trait_def(trait_ref.def_id());\n \n-                                trait_def.for_each_impl(infcx.tcx, |def_id| {\n-                                    let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n-                                    if let Some(simp) = simp {\n+                                match simp {\n+                                    Some(simp) => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+                                        let imp = infcx.tcx.impl_trait_ref(def_id).unwrap();\n                                         let imp_simp = fast_reject::simplify_type(infcx.tcx,\n                                                                                   imp.self_ty(),\n                                                                                   true);\n                                         if let Some(imp_simp) = imp_simp {\n-                                            if simp == imp_simp {\n-                                                impl_candidates.push(imp);\n+                                            if simp != imp_simp {\n+                                                return;\n                                             }\n-                                        } else {\n-                                            impl_candidates.push(imp);\n                                         }\n-                                    } else {\n                                         impl_candidates.push(imp);\n-                                    }\n-                                });\n+                                    }),\n+                                    None => trait_def.for_each_impl(infcx.tcx, |def_id| {\n+                                        impl_candidates.push(\n+                                            infcx.tcx.impl_trait_ref(def_id).unwrap());\n+                                    })\n+                                };\n \n                                 if impl_candidates.len() > 0 {\n                                     err.fileline_help(\n@@ -266,7 +267,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                     let end = cmp::min(4, impl_candidates.len());\n                                     for candidate in &impl_candidates[0..end] {\n                                         err.fileline_help(obligation.cause.span,\n-                                                                     candidate);\n+                                                          &format!(\"  {:?}\", candidate));\n                                     }\n                                     if impl_candidates.len() > 4 {\n                                         err.fileline_help(obligation.cause.span,"}]}