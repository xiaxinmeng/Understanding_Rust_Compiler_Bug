{"sha": "3076f4ec30632a063d0737bef589e1c4859ad23c", "node_id": "C_kwDOAAsO6NoAKDMwNzZmNGVjMzA2MzJhMDYzZDA3MzdiZWY1ODllMWM0ODU5YWQyM2M", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-29T16:54:09Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-29T16:54:09Z"}, "message": "std: pass hint to id-based parking functions", "tree": {"sha": "8198c5469f8c0131175a8d79474f207a8994ba92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8198c5469f8c0131175a8d79474f207a8994ba92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3076f4ec30632a063d0737bef589e1c4859ad23c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmOtxjEACgkQcE4BSbAZ\nSzw8lhAAnaqd3DshHBuVNn3dP+igYBa3OljTOrJlV9EIFgy5ch5PIMh8MN6a+6yV\nAC3+745w2mU6mCjmjxOEFasvPfQG1XsE8Ha0XIxEaM3LM3/mloeC9HQW2TLYR/iN\nnCR4QcW9/TynhMEmpXG4m688T2xuXf2mIN8UXXaBoX9u3GhGVq6VuPoaQOllS7ds\nt4tXX7KxoHYNKZWYZSSMswLfAYmYw6tDSk29N+/8fZg2d3NgkaFhDsH+ZK+dCgLo\ncd8Andvy5Ypxvwnl9e17UZlgmm8LkisbSpvwq3awsClbN9INUDdNAUcWnFlNAJge\nLpIw9hqmOiy6nYdFalIh+XbCsFbWVOkvdBESjmc6ULCVMBf2bVwbRjLqt3kJkvDe\nxhZ2Q+b6haaIpv+ek/Hxy1viL0pmufzJzHtMO1lf3ZH/Dlq4FJxr2dHcIFPO34Ae\nL2RQ6xSGg69YH/zYAni1Ink8q7n77isixLkmJenXw5y8tB7U49y8obP36MgH20lw\nYrhYi8Hs3xkVh+nI61qWAfEHlOQPP4j2RmbhkuhBP9XDZa08ZlAD9rHF47cLdeiC\nCsyl1gMnFmOaNf1d6/UMTjXups6F7EbrDLnIAroQRYcCreIwnw8ti6+lGRb2T4Ow\nJt2An/CXupv6lRwIVj6rHZcqpz/aTDnLh7s6a4XS0NbVoC7GAuU=\n=Jxbq\n-----END PGP SIGNATURE-----", "payload": "tree 8198c5469f8c0131175a8d79474f207a8994ba92\nparent a9e5c1a309df80434ebc4c1f6bfaa5cb119b465d\nauthor joboet <jonasboettiger@icloud.com> 1672332849 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1672332849 +0100\n\nstd: pass hint to id-based parking functions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3076f4ec30632a063d0737bef589e1c4859ad23c", "html_url": "https://github.com/rust-lang/rust/commit/3076f4ec30632a063d0737bef589e1c4859ad23c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3076f4ec30632a063d0737bef589e1c4859ad23c/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e5c1a309df80434ebc4c1f6bfaa5cb119b465d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e5c1a309df80434ebc4c1f6bfaa5cb119b465d", "html_url": "https://github.com/rust-lang/rust/commit/a9e5c1a309df80434ebc4c1f6bfaa5cb119b465d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "0006cd4f1be2502a1bdc182be8fb37d3981effde", "filename": "library/std/src/sys/sgx/thread_parking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parking.rs?ref=3076f4ec30632a063d0737bef589e1c4859ad23c", "patch": "@@ -7,17 +7,17 @@ pub type ThreadId = fortanix_sgx_abi::Tcs;\n \n pub use super::abi::thread::current;\n \n-pub fn park() {\n+pub fn park(_hint: usize) {\n     usercalls::wait(EV_UNPARK, WAIT_INDEFINITE).unwrap();\n }\n \n-pub fn park_timeout(dur: Duration) {\n+pub fn park_timeout(dur: Duration, _hint: usize) {\n     let timeout = u128::min(dur.as_nanos(), WAIT_INDEFINITE as u128 - 1) as u64;\n     if let Err(e) = usercalls::wait(EV_UNPARK, timeout) {\n         assert!(matches!(e.kind(), ErrorKind::TimedOut | ErrorKind::WouldBlock))\n     }\n }\n \n-pub fn unpark(tid: ThreadId) {\n+pub fn unpark(tid: ThreadId, _hint: usize) {\n     let _ = usercalls::send(EV_UNPARK, Some(tid));\n }"}, {"sha": "7107ff733bd1237f1dfe91aed9069034a07a7d64", "filename": "library/std/src/sys/unix/thread_parking/netbsd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fnetbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fnetbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fnetbsd.rs?ref=3076f4ec30632a063d0737bef589e1c4859ad23c", "patch": "@@ -1,7 +1,7 @@\n #![cfg(target_os = \"netbsd\")]\n \n use crate::ffi::{c_int, c_void};\n-use crate::ptr::{null, null_mut};\n+use crate::ptr;\n use crate::time::Duration;\n use libc::{_lwp_self, clockid_t, lwpid_t, time_t, timespec, CLOCK_MONOTONIC};\n \n@@ -25,13 +25,13 @@ pub fn current() -> ThreadId {\n }\n \n #[inline]\n-pub fn park() {\n+pub fn park(hint: usize) {\n     unsafe {\n-        ___lwp_park60(0, 0, null_mut(), 0, null(), null());\n+        ___lwp_park60(0, 0, ptr::null_mut(), 0, ptr::invalid(hint), ptr::null());\n     }\n }\n \n-pub fn park_timeout(dur: Duration) {\n+pub fn park_timeout(dur: Duration, hint: usize) {\n     let mut timeout = timespec {\n         // Saturate so that the operation will definitely time out\n         // (even if it is after the heat death of the universe).\n@@ -42,13 +42,13 @@ pub fn park_timeout(dur: Duration) {\n     // Timeout needs to be mutable since it is modified on NetBSD 9.0 and\n     // above.\n     unsafe {\n-        ___lwp_park60(CLOCK_MONOTONIC, 0, &mut timeout, 0, null(), null());\n+        ___lwp_park60(CLOCK_MONOTONIC, 0, &mut timeout, 0, ptr::invalid(hint), ptr::null());\n     }\n }\n \n #[inline]\n-pub fn unpark(tid: ThreadId) {\n+pub fn unpark(tid: ThreadId, hint: usize) {\n     unsafe {\n-        _lwp_unpark(tid, null());\n+        _lwp_unpark(tid, ptr::invalid(hint));\n     }\n }"}, {"sha": "32e2195b80828256aed5a91dfc91335770dde638", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3076f4ec30632a063d0737bef589e1c4859ad23c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=3076f4ec30632a063d0737bef589e1c4859ad23c", "patch": "@@ -56,7 +56,7 @@ impl Parker {\n         if state == PARKED {\n             // Loop to guard against spurious wakeups.\n             while state == PARKED {\n-                park();\n+                park(self.state.as_mut_ptr().addr());\n                 state = self.state.load(Acquire);\n             }\n \n@@ -72,7 +72,7 @@ impl Parker {\n \n         let state = self.state.fetch_sub(1, Acquire).wrapping_sub(1);\n         if state == PARKED {\n-            park_timeout(dur);\n+            park_timeout(dur, self.state.as_mut_ptr().addr());\n             // Swap to ensure that we observe all state changes with acquire\n             // ordering, even if the state has been changed after the timeout\n             // occured.\n@@ -95,7 +95,7 @@ impl Parker {\n             // and terminated before this call is made. This call then returns an\n             // error or wakes up an unrelated thread. The platform API and\n             // environment does allow this, however.\n-            unpark(tid);\n+            unpark(tid, self.state.as_mut_ptr().addr());\n         }\n     }\n }"}]}