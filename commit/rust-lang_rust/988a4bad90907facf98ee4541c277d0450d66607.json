{"sha": "988a4bad90907facf98ee4541c277d0450d66607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OGE0YmFkOTA5MDdmYWNmOThlZTQ1NDFjMjc3ZDA0NTBkNjY2MDc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-18T15:29:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-18T15:29:40Z"}, "message": "Rollup merge of #62712 - limira:self-type-help, r=estebank\n\nUpdate the help message on error for self type\n\nFix #62609", "tree": {"sha": "9ac7282e0c9810c7919f89613015b120242f4d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac7282e0c9810c7919f89613015b120242f4d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988a4bad90907facf98ee4541c277d0450d66607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdMJBkCRBK7hj4Ov3rIwAAdHIIAEvis8Tx5Pl9wOdGJySfOocd\nu/tb09YXh7R/GHVw7hGOppaQM8Rnr3iqsMUge7Gjff2JzdOaKoYghnY7rvkpICzU\nJRq1du/e7iTdBSesgBImIGNfkQ6bIUwxpZk1t8aCH61984goqWUdE//8cwXZtGIA\nkrFrY4KJIKYaSKVFGanTDujwaE19dS63PHOB9Vo7OU8vm6QUyHMk2bwim3w0oAgU\n5F+nM2BVABHfMjAJFUTi5ea/EeiFSlcF++51pkVEHCQ4+rkPMpjh3Dx+fYwZL3N4\n4VK+ttP/EH6QoHSffV3gaQJerVu6/rfgLumH253CkYbBMfBFUEFTr0aYgVtDHSo=\n=N97s\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ac7282e0c9810c7919f89613015b120242f4d79\nparent df21a6f040a7011d509769a61ac7af9502636b33\nparent b7cbd4ec47640323e5b25cc64110f5ff414e4946\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563463780 -0400\ncommitter GitHub <noreply@github.com> 1563463780 -0400\n\nRollup merge of #62712 - limira:self-type-help, r=estebank\n\nUpdate the help message on error for self type\n\nFix #62609\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988a4bad90907facf98ee4541c277d0450d66607", "html_url": "https://github.com/rust-lang/rust/commit/988a4bad90907facf98ee4541c277d0450d66607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988a4bad90907facf98ee4541c277d0450d66607/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df21a6f040a7011d509769a61ac7af9502636b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/df21a6f040a7011d509769a61ac7af9502636b33", "html_url": "https://github.com/rust-lang/rust/commit/df21a6f040a7011d509769a61ac7af9502636b33"}, {"sha": "b7cbd4ec47640323e5b25cc64110f5ff414e4946", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cbd4ec47640323e5b25cc64110f5ff414e4946", "html_url": "https://github.com/rust-lang/rust/commit/b7cbd4ec47640323e5b25cc64110f5ff414e4946"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "32f1f8c6188fea4cd6dc5659fd79b45f8b324791", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -769,6 +769,10 @@ fn check_method_receiver<'fcx, 'tcx>(\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n+    const HELP_FOR_SELF_TYPE: &str =\n+        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n     debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n            method, self_ty);\n@@ -805,7 +809,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n             fcx.tcx.sess.diagnostic().mut_span_err(\n                 span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n             ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+            .help(HELP_FOR_SELF_TYPE)\n             .code(DiagnosticId::Error(\"E0307\".into()))\n             .emit();\n         }\n@@ -823,14 +827,14 @@ fn check_method_receiver<'fcx, 'tcx>(\n                             the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n-                ).help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                ).help(HELP_FOR_SELF_TYPE)\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n                 fcx.tcx.sess.diagnostic().mut_span_err(\n                     span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n                 ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .help(HELP_FOR_SELF_TYPE)\n                 .code(DiagnosticId::Error(\"E0307\".into()))\n                 .emit();\n             }"}, {"sha": "a70bf1f1990ad99925548b3d3171ac3e9266d82f", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -6,7 +6,7 @@ LL |     fn foo(self: Ptr<Self>);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:22:18\n@@ -16,7 +16,7 @@ LL |     fn foo(self: Ptr<Self>) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:26:18\n@@ -26,7 +26,7 @@ LL |     fn bar(self: Box<Ptr<Self>>) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0f8863b87150f64001c9db5925a6515c3354420b", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -6,7 +6,7 @@ LL |     fn bar(self: *const Self);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:4:18\n@@ -16,7 +16,7 @@ LL |     fn foo(self: *const Self) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n@@ -26,7 +26,7 @@ LL |     fn bar(self: *const Self) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fae6a26720f3605edc527afdf6d42960b9a1e595", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -5,7 +5,7 @@ LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n "}, {"sha": "88dfee1cada3fed971c49f8053167259b62e9a27", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -5,7 +5,7 @@ LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n "}, {"sha": "6da20e37577b08e03ab5e474deba4e43eb934ece", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/988a4bad90907facf98ee4541c277d0450d66607/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=988a4bad90907facf98ee4541c277d0450d66607", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0307]: invalid method receiver type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n@@ -14,7 +14,7 @@ LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0307]: invalid method receiver type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n@@ -23,7 +23,7 @@ LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0308]: mismatched method receiver\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21"}]}