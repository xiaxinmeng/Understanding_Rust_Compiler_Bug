{"sha": "01a15d5870169636cec50a1f9d98bc967472a680", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTE1ZDU4NzAxNjk2MzZjZWM1MGExZjlkOThiYzk2NzQ3MmE2ODA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-03-12T17:38:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-13T12:21:46Z"}, "message": "Tweak comments", "tree": {"sha": "18c3a5d50b89479e251ae74e622690bc741b36eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c3a5d50b89479e251ae74e622690bc741b36eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a15d5870169636cec50a1f9d98bc967472a680", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a15d5870169636cec50a1f9d98bc967472a680", "html_url": "https://github.com/rust-lang/rust/commit/01a15d5870169636cec50a1f9d98bc967472a680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a15d5870169636cec50a1f9d98bc967472a680/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7db0d5d30adbaec2b4ec6e009a0bf9c7850f9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7db0d5d30adbaec2b4ec6e009a0bf9c7850f9be", "html_url": "https://github.com/rust-lang/rust/commit/a7db0d5d30adbaec2b4ec6e009a0bf9c7850f9be"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "1278bfb2e168f086e526d7873b94ca421ed82faa", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01a15d5870169636cec50a1f9d98bc967472a680/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a15d5870169636cec50a1f9d98bc967472a680/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=01a15d5870169636cec50a1f9d98bc967472a680", "patch": "@@ -509,8 +509,8 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             };\n             match ty::get(base_ty).sty {\n                 ty::ty_rptr(r_ptr, _) => {\n-                    mk_subregion_due_to_derefence(rcx, expr.span,\n-                                                  ty::ReScope(expr.id), r_ptr);\n+                    mk_subregion_due_to_dereference(rcx, expr.span,\n+                                                    ty::ReScope(expr.id), r_ptr);\n                 }\n                 _ => {}\n             }\n@@ -843,10 +843,9 @@ fn constrain_autoderefs(rcx: &mut Rcx,\n                         derefs: uint,\n                         mut derefd_ty: ty::t) {\n     /*!\n-     * Invoked on any dereference that occurs, whether explicitly\n-     * or through an auto-deref.  Checks that if this is a region\n-     * pointer being derefenced, the lifetime of the pointer includes\n-     * the deref expr.\n+     * Invoked on any auto-dereference that occurs.  Checks that if\n+     * this is a region pointer being dereferenced, the lifetime of\n+     * the pointer includes the deref expr.\n      */\n     let r_deref_expr = ty::ReScope(deref_expr.id);\n     for i in range(0u, derefs) {\n@@ -887,8 +886,8 @@ fn constrain_autoderefs(rcx: &mut Rcx,\n \n         match ty::get(derefd_ty).sty {\n             ty::ty_rptr(r_ptr, _) => {\n-                mk_subregion_due_to_derefence(rcx, deref_expr.span,\n-                                              r_deref_expr, r_ptr);\n+                mk_subregion_due_to_dereference(rcx, deref_expr.span,\n+                                                r_deref_expr, r_ptr);\n             }\n             _ => {}\n         }\n@@ -902,10 +901,10 @@ fn constrain_autoderefs(rcx: &mut Rcx,\n     }\n }\n \n-pub fn mk_subregion_due_to_derefence(rcx: &mut Rcx,\n-                                     deref_span: Span,\n-                                     minimum_lifetime: ty::Region,\n-                                     maximum_lifetime: ty::Region) {\n+pub fn mk_subregion_due_to_dereference(rcx: &mut Rcx,\n+                                       deref_span: Span,\n+                                       minimum_lifetime: ty::Region,\n+                                       maximum_lifetime: ty::Region) {\n     rcx.fcx.mk_subr(true, infer::DerefPointer(deref_span),\n                     minimum_lifetime, maximum_lifetime)\n }"}]}