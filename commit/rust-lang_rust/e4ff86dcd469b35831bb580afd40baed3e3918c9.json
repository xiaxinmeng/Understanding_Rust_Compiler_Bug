{"sha": "e4ff86dcd469b35831bb580afd40baed3e3918c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZmY4NmRjZDQ2OWIzNTgzMWJiNTgwYWZkNDBiYWVkM2UzOTE4Yzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T16:03:32Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "map_unit_fn: make test rustfixable", "tree": {"sha": "6111643d2ea4981f7fb5dcd1fac62709d796cabb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6111643d2ea4981f7fb5dcd1fac62709d796cabb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ff86dcd469b35831bb580afd40baed3e3918c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff86dcd469b35831bb580afd40baed3e3918c9", "html_url": "https://github.com/rust-lang/rust/commit/e4ff86dcd469b35831bb580afd40baed3e3918c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ff86dcd469b35831bb580afd40baed3e3918c9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0e7c8e7fc0bff76c245fef53527f3df79a3a96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0e7c8e7fc0bff76c245fef53527f3df79a3a96", "html_url": "https://github.com/rust-lang/rust/commit/ad0e7c8e7fc0bff76c245fef53527f3df79a3a96"}], "stats": {"total": 231, "additions": 197, "deletions": 34}, "files": [{"sha": "ad153e4fc1948f9a5824ba9e3a8a8cf225d7fc9e", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -0,0 +1,78 @@\n+// run-rustfix\n+\n+#![warn(clippy::option_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasOption {\n+    field: Option<usize>,\n+}\n+\n+impl HasOption {\n+    fn do_option_nothing(self: &Self, value: usize) {}\n+\n+    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+#[rustfmt::skip]\n+fn option_map_unit_fn() {\n+    let x = HasOption { field: Some(10) };\n+\n+    x.field.map(plus_one);\n+    let _ : Option<()> = x.field.map(do_nothing);\n+\n+    if let Some(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Some(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Some(x_field) = x.field { diverge(x_field) }\n+\n+    let captured = 10;\n+    if let Some(value) = x.field { do_nothing(value + captured) };\n+    let _ : Option<()> = x.field.map(|value| do_nothing(value + captured));\n+\n+    if let Some(value) = x.field { x.do_option_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { x.do_option_plus_one(value + captured); }\n+\n+\n+    if let Some(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured); }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured); }\n+\n+\n+    if let Some(value) = x.field { diverge(value + captured) }\n+\n+    if let Some(value) = x.field { diverge(value + captured) }\n+\n+    if let Some(value) = x.field { diverge(value + captured); }\n+\n+    if let Some(value) = x.field { diverge(value + captured); }\n+\n+\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| { plus_one(value + captured) });\n+    if let Some(value) = x.field { let y = plus_one(value + captured); }\n+\n+    if let Some(value) = x.field { plus_one(value + captured); }\n+\n+    if let Some(value) = x.field { plus_one(value + captured); }\n+\n+\n+    if let Some(ref value) = x.field { do_nothing(value + captured) }}\n+\n+fn main() {}"}, {"sha": "6926498341ac2e0a6cb8fe4969b3a37cee930195", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n "}, {"sha": "6e87b070909ee754d6bbeb7700eb288f78565324", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:32:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:34:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,127 +9,127 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:34:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:36:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:42:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:44:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:44:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:47:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:56:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:67:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:71:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:74:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "64d39516be71329c4aec67a2dc9db9a6c7c5313d", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -0,0 +1,81 @@\n+// run-rustfix\n+\n+#![feature(never_type)]\n+#![warn(clippy::result_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasResult {\n+    field: Result<usize, usize>,\n+}\n+\n+impl HasResult {\n+    fn do_result_nothing(self: &Self, value: usize) {}\n+\n+    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn result_map_unit_fn() {\n+    let x = HasResult { field: Ok(10) };\n+\n+    x.field.map(plus_one);\n+    let _: Result<(), usize> = x.field.map(do_nothing);\n+\n+    if let Ok(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Ok(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Ok(x_field) = x.field { diverge(x_field) }\n+\n+    let captured = 10;\n+    if let Ok(value) = x.field { do_nothing(value + captured) };\n+    let _: Result<(), usize> = x.field.map(|value| do_nothing(value + captured));\n+\n+    if let Ok(value) = x.field { x.do_result_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }\n+\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured); }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured); }\n+\n+\n+    if let Ok(value) = x.field { diverge(value + captured) }\n+\n+    if let Ok(value) = x.field { diverge(value + captured) }\n+\n+    if let Ok(value) = x.field { diverge(value + captured); }\n+\n+    if let Ok(value) = x.field { diverge(value + captured); }\n+\n+\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| { plus_one(value + captured) });\n+    if let Ok(value) = x.field { let y = plus_one(value + captured); }\n+\n+    if let Ok(value) = x.field { plus_one(value + captured); }\n+\n+    if let Ok(value) = x.field { plus_one(value + captured); }\n+\n+\n+    if let Ok(ref value) = x.field { do_nothing(value + captured) }\n+}\n+\n+fn main() {}"}, {"sha": "bf4aba8a7cc134b04c882521a86d3b38e0f60750", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]"}, {"sha": "db72c64d52e23f2b2e75c972b9eecbdd25645221", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ff86dcd469b35831bb580afd40baed3e3918c9/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=e4ff86dcd469b35831bb580afd40baed3e3918c9", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:34:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,127 +9,127 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:36:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:40:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:44:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:46:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:48:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:49:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:51:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:57:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:58:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:60:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:66:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:69:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:71:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:75:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:76:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:78:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-"}]}