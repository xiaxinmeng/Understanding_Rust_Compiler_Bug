{"sha": "4da6488d95cec9709bf77a28913c8040cc0508ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTY0ODhkOTVjZWM5NzA5YmY3N2EyODkxM2M4MDQwY2MwNTA4ZWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T17:21:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T17:21:29Z"}, "message": "Always emit .eh_frame section", "tree": {"sha": "82255543011592d38ee9c883441c4f607d4d369b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82255543011592d38ee9c883441c4f607d4d369b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da6488d95cec9709bf77a28913c8040cc0508ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da6488d95cec9709bf77a28913c8040cc0508ee", "html_url": "https://github.com/rust-lang/rust/commit/4da6488d95cec9709bf77a28913c8040cc0508ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da6488d95cec9709bf77a28913c8040cc0508ee/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485e52e1539d7fb1916c201a73f3d467a18646bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/485e52e1539d7fb1916c201a73f3d467a18646bf", "html_url": "https://github.com/rust-lang/rust/commit/485e52e1539d7fb1916c201a73f3d467a18646bf"}], "stats": {"total": 136, "additions": 82, "deletions": 54}, "files": [{"sha": "5077c77ec3379ed1403f3a075ba66b85c40231e6", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -1,4 +1,4 @@\n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::Session;\n@@ -45,7 +45,6 @@ pub(crate) trait WriteDebugInfo {\n     fn add_debug_reloc(\n         &mut self,\n         section_map: &FxHashMap<SectionId, Self::SectionId>,\n-        symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     );\n@@ -75,7 +74,6 @@ impl WriteDebugInfo for ObjectProduct {\n     fn add_debug_reloc(\n         &mut self,\n         section_map: &FxHashMap<SectionId, Self::SectionId>,\n-        symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n     ) {\n@@ -84,7 +82,7 @@ impl WriteDebugInfo for ObjectProduct {\n                 (section_map.get(&id).unwrap().1, 0)\n             }\n             DebugRelocName::Symbol(id) => {\n-                let symbol_id = self.function_symbol(*symbol_map.get_index(id).unwrap().0);\n+                let symbol_id = self.function_symbol(FuncId::from_u32(id.try_into().unwrap()));\n                 self.object.symbol_section_and_offset(symbol_id).expect(\"Debug reloc for undef sym???\")\n             }\n         };"}, {"sha": "cbef8d288c8e3a651409d19efc0f1e144db104b2", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -124,10 +124,12 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Define debuginfo for function\n     let isa = cx.module.isa();\n+    let unwind_context = &mut cx.unwind_context;\n     tcx.sess.time(\"generate debug info\", || {\n         debug_context\n             .as_mut()\n             .map(|x| x.define(context, isa, &source_info_set, local_map));\n+        unwind_context.add_function(func_id, &context, isa);\n     });\n \n     // Clear context to make it usable for the next function"}, {"sha": "af93620fa8a9f61965819561cbc0639bc77bd65f", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n \n-use gimli::write::{Address, AttributeValue, EhFrame, EndianVec, Result, Sections, Writer, Section};\n+use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n use gimli::{RunTimeEndian, SectionId};\n \n use crate::backend::WriteDebugInfo;\n@@ -17,12 +17,9 @@ impl DebugContext<'_> {\n             AttributeValue::RangeListRef(unit_range_list_id),\n         );\n \n-        let mut sections = Sections::new(WriterRelocate::new(self));\n+        let mut sections = Sections::new(WriterRelocate::new(self.endian));\n         self.dwarf.write(&mut sections).unwrap();\n \n-        let mut eh_frame = EhFrame::from(WriterRelocate::new(self));\n-        self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n-\n         let mut section_map = FxHashMap::default();\n         let _: Result<()> = sections.for_each_mut(|id, section| {\n             if !section.writer.slice().is_empty() {\n@@ -35,21 +32,11 @@ impl DebugContext<'_> {\n         let _: Result<()> = sections.for_each(|id, section| {\n             if let Some(section_id) = section_map.get(&id) {\n                 for reloc in &section.relocs {\n-                    product.add_debug_reloc(&section_map, &self.symbols, section_id, reloc);\n+                    product.add_debug_reloc(&section_map, section_id, reloc);\n                 }\n             }\n             Ok(())\n         });\n-\n-        if !eh_frame.0.writer.slice().is_empty() {\n-            let id = eh_frame.id();\n-            let section_id = product.add_debug_section(id, eh_frame.0.writer.into_vec());\n-            section_map.insert(id, section_id);\n-\n-            for reloc in &eh_frame.0.relocs {\n-                product.add_debug_reloc(&section_map, &self.symbols, &section_id, reloc);\n-            }\n-        }\n     }\n }\n \n@@ -68,16 +55,16 @@ pub(crate) enum DebugRelocName {\n }\n \n #[derive(Clone)]\n-struct WriterRelocate {\n-    relocs: Vec<DebugReloc>,\n-    writer: EndianVec<RunTimeEndian>,\n+pub(super) struct WriterRelocate {\n+    pub(super) relocs: Vec<DebugReloc>,\n+    pub(super) writer: EndianVec<RunTimeEndian>,\n }\n \n impl WriterRelocate {\n-    fn new(ctx: &DebugContext<'_>) -> Self {\n+    pub(super) fn new(endian: RunTimeEndian) -> Self {\n         WriterRelocate {\n             relocs: Vec::new(),\n-            writer: EndianVec::new(ctx.endian),\n+            writer: EndianVec::new(endian),\n         }\n     }\n }"}, {"sha": "2a360dd00c282fae7c71f8f05ab537acfa811721", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -11,12 +11,13 @@ use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n-    self, Address, AttributeValue, CieId, DwarfUnit, Expression, FrameTable, LineProgram,\n+    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram,\n     LineString, Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n \n pub(crate) use emit::{DebugReloc, DebugRelocName};\n+pub(crate) use unwind::UnwindContext;\n \n fn target_endian(tcx: TyCtxt<'_>) -> RunTimeEndian {\n     use rustc_target::abi::Endian;\n@@ -31,13 +32,10 @@ pub(crate) struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n     endian: RunTimeEndian,\n-    symbols: indexmap::IndexMap<FuncId, String>,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n-    frame_table: FrameTable,\n \n-    cie: CieId,\n     clif_types: FxHashMap<Type, UnitEntryId>,\n     types: FxHashMap<Ty<'tcx>, UnitEntryId>,\n }\n@@ -111,20 +109,14 @@ impl<'tcx> DebugContext<'tcx> {\n             );\n         }\n \n-        let mut frame_table = FrameTable::default();\n-        let cie = frame_table.add_cie(isa.create_systemv_cie().expect(\"SystemV unwind info CIE\"));\n-\n         DebugContext {\n             tcx,\n \n             endian: target_endian(tcx),\n-            symbols: indexmap::IndexMap::new(),\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n-            frame_table,\n \n-            cie,\n             clif_types: FxHashMap::default(),\n             types: FxHashMap::default(),\n         }\n@@ -267,8 +259,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     ) -> Self {\n         let mir = debug_context.tcx.instance_mir(instance.def);\n \n-        let (symbol, _) = debug_context.symbols.insert_full(func_id, name.to_string());\n-\n         // FIXME: add to appropriate scope intead of root\n         let scope = debug_context.dwarf.unit.root();\n \n@@ -291,7 +281,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         FunctionDebugContext {\n             debug_context,\n             entry_id,\n-            symbol,\n+            symbol: func_id.as_u32() as usize,\n             instance,\n             mir,\n         }\n@@ -320,8 +310,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n         local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n-        self.create_unwind_info(context, isa);\n-\n         let end = self.create_debug_lines(context, isa, source_info_set);\n \n         self.debug_context"}, {"sha": "987c4d8f3e8caf4c8da98ba3d8b5fcc51e913cc8", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -1,15 +1,35 @@\n use crate::prelude::*;\n \n-use cranelift_codegen::isa::unwind::UnwindInfo;\n+use cranelift_codegen::isa::{TargetIsa, unwind::UnwindInfo};\n \n-use gimli::write::Address;\n+use gimli::write::{Address, CieId, EhFrame, FrameTable, Section};\n \n-impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n-    pub(super) fn create_unwind_info(\n-        &mut self,\n-        context: &Context,\n-        isa: &dyn cranelift_codegen::isa::TargetIsa,\n-    ) {\n+use crate::backend::WriteDebugInfo;\n+\n+pub(crate) struct UnwindContext<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    frame_table: FrameTable,\n+    cie_id: CieId,\n+}\n+\n+impl<'tcx> UnwindContext<'tcx> {\n+    pub(crate) fn new(\n+        tcx: TyCtxt<'tcx>,\n+        module: &mut Module<impl Backend>,\n+    ) -> Self {\n+        let mut frame_table = FrameTable::default();\n+        let cie = module.isa().create_systemv_cie().expect(\"SystemV unwind info CIE\");\n+\n+        let cie_id = frame_table.add_cie(cie);\n+\n+        UnwindContext {\n+            tcx,\n+            frame_table,\n+            cie_id,\n+        }\n+    }\n+\n+    pub(crate) fn add_function(&mut self, func_id: FuncId, context: &Context, isa: &dyn TargetIsa) {\n         let unwind_info = if let Some(unwind_info) = context.create_unwind_info(isa).unwrap() {\n             unwind_info\n         } else {\n@@ -18,8 +38,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n         match unwind_info {\n             UnwindInfo::SystemV(unwind_info) => {\n-                self.debug_context.frame_table.add_fde(self.debug_context.cie, unwind_info.to_fde(Address::Symbol {\n-                    symbol: self.symbol,\n+                self.frame_table.add_fde(self.cie_id, unwind_info.to_fde(Address::Symbol {\n+                    symbol: func_id.as_u32() as usize,\n                     addend: 0,\n                 }));\n             },\n@@ -28,4 +48,20 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    pub(crate) fn emit<P: WriteDebugInfo>(self, product: &mut P) {\n+        let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(super::target_endian(self.tcx)));\n+        self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n+\n+        if !eh_frame.0.writer.slice().is_empty() {\n+            let id = eh_frame.id();\n+            let section_id = product.add_debug_section(id, eh_frame.0.writer.into_vec());\n+            let mut section_map = FxHashMap::default();\n+            section_map.insert(id, section_id);\n+\n+            for reloc in &eh_frame.0.relocs {\n+                product.add_debug_reloc(&section_map, &section_id, reloc);\n+            }\n+        }\n+    }\n }"}, {"sha": "9454f43f23ade45d74ad0844d37e37993e9f87b5", "filename": "src/driver/aot.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -32,6 +32,7 @@ fn emit_module<B: Backend>(\n     kind: ModuleKind,\n     mut module: Module<B>,\n     debug: Option<DebugContext<'_>>,\n+    unwind_context: UnwindContext<'_>,\n ) -> ModuleCodegenResult\n     where B::Product: Emit + WriteDebugInfo,\n {\n@@ -42,6 +43,8 @@ fn emit_module<B: Backend>(\n         debug.emit(&mut product);\n     }\n \n+    unwind_context.emit(&mut product);\n+\n     let tmp_file = tcx\n         .output_filenames(LOCAL_CRATE)\n         .temp_path(OutputType::Object, Some(&name));\n@@ -125,7 +128,9 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         None\n     };\n \n-    super::codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n+    let mut unwind_context = UnwindContext::new(tcx, &mut module);\n+\n+    super::codegen_mono_items(tcx, &mut module, debug.as_mut(), &mut unwind_context, mono_items);\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n \n     emit_module(\n@@ -134,6 +139,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         ModuleKind::Regular,\n         module,\n         debug,\n+        unwind_context,\n     )\n }\n \n@@ -190,12 +196,16 @@ pub(super) fn run_aot(\n     let created_alloc_shim = crate::allocator::codegen(tcx, &mut allocator_module);\n \n     let allocator_module = if created_alloc_shim {\n+        // FIXME create .eh_frame for allocator shim\n+        let unwind_context = UnwindContext::new(tcx, &mut allocator_module);\n+\n         let ModuleCodegenResult(module, work_product) = emit_module(\n             tcx,\n             \"allocator_shim\".to_string(),\n             ModuleKind::Allocator,\n             allocator_module,\n             None,\n+            unwind_context,\n         );\n         if let Some((id, product)) = work_product {\n             work_products.insert(id, product);"}, {"sha": "4d7ca34d1ba39548fb07a52b15707c04051ad5ca", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -52,8 +52,11 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n+    // FIXME register with unwind runtime\n+    let mut unwind_context = UnwindContext::new(tcx, &mut jit_module);\n+\n     super::time(tcx, \"codegen mono items\", || {\n-        super::codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n+        super::codegen_mono_items(tcx, &mut jit_module, None, &mut unwind_context, mono_items);\n     });\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module);\n     crate::allocator::codegen(tcx, &mut jit_module);"}, {"sha": "bf3241b8834cc7115c960c606c895adcccb7e629", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -33,9 +33,10 @@ fn codegen_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n+    unwind_context: &mut UnwindContext<'tcx>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n-    let mut cx = CodegenCx::new(tcx, module, debug_context);\n+    let mut cx = CodegenCx::new(tcx, module, debug_context, unwind_context);\n \n     tcx.sess.time(\"predefine functions\", || {\n         for &(mono_item, (linkage, visibility)) in &mono_items {"}, {"sha": "8af309a22bac75358ca97c591ea660f497b8e9f1", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da6488d95cec9709bf77a28913c8040cc0508ee/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4da6488d95cec9709bf77a28913c8040cc0508ee", "patch": "@@ -106,7 +106,7 @@ mod prelude {\n     pub(crate) use crate::base::{trans_operand, trans_place};\n     pub(crate) use crate::cast::*;\n     pub(crate) use crate::common::*;\n-    pub(crate) use crate::debuginfo::{DebugContext, FunctionDebugContext};\n+    pub(crate) use crate::debuginfo::{DebugContext, FunctionDebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n     pub(crate) use crate::trap::*;\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n@@ -133,13 +133,15 @@ pub(crate) struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n     cached_context: Context,\n     vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n     debug_context: Option<&'clif mut DebugContext<'tcx>>,\n+    unwind_context: &'clif mut UnwindContext<'tcx>,\n }\n \n impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n         module: &'clif mut Module<B>,\n         debug_context: Option<&'clif mut DebugContext<'tcx>>,\n+        unwind_context: &'clif mut UnwindContext<'tcx>,\n     ) -> Self {\n         CodegenCx {\n             tcx,\n@@ -148,6 +150,7 @@ impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n             cached_context: Context::new(),\n             vtables: FxHashMap::default(),\n             debug_context,\n+            unwind_context,\n         }\n     }\n "}]}