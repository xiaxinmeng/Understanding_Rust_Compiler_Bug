{"sha": "6d03c8d751128ce064fac4f607e5478db41b04b5", "node_id": "C_kwDOAAsO6NoAKDZkMDNjOGQ3NTExMjhjZTA2NGZhYzRmNjA3ZTU0NzhkYjQxYjA0YjU", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-28T20:08:28Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-06-29T00:05:02Z"}, "message": "fix comments", "tree": {"sha": "bccbee24bd4091a42c4b1536209ff5de2141bb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bccbee24bd4091a42c4b1536209ff5de2141bb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d03c8d751128ce064fac4f607e5478db41b04b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d03c8d751128ce064fac4f607e5478db41b04b5", "html_url": "https://github.com/rust-lang/rust/commit/6d03c8d751128ce064fac4f607e5478db41b04b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d03c8d751128ce064fac4f607e5478db41b04b5/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9772d76198ec04c9e610ce5d95bb9453021aa1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9772d76198ec04c9e610ce5d95bb9453021aa1c", "html_url": "https://github.com/rust-lang/rust/commit/c9772d76198ec04c9e610ce5d95bb9453021aa1c"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2f384247caa3bb1a8d2e2c62c5623013b624604a", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d03c8d751128ce064fac4f607e5478db41b04b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d03c8d751128ce064fac4f607e5478db41b04b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=6d03c8d751128ce064fac4f607e5478db41b04b5", "patch": "@@ -168,18 +168,18 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n         mplace: &MPlaceTy<'tcx>,\n         fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,\n     ) -> InterpResult<'tcx> {\n-        // We want to walk the aggregate to look for reference types to intern. While doing that we\n+        // We want to walk the aggregate to look for references to intern. While doing that we\n         // also need to take special care of interior mutability.\n         //\n-        // As an optimization, however, if the allocation does not contain any pointers: we don't\n+        // As an optimization, however, if the allocation does not contain any references: we don't\n         // need to do the walk. It can be costly for big arrays for example (e.g. issue #93215).\n         let is_walk_needed = |mplace: &MPlaceTy<'tcx>| -> InterpResult<'tcx, bool> {\n             // ZSTs cannot contain pointers, we can avoid the interning walk.\n             if mplace.layout.is_zst() {\n                 return Ok(false);\n             }\n \n-            // Now, check whether this allocation contains reference types (as relocations).\n+            // Now, check whether this allocation could contain references.\n             //\n             // Note, this check may sometimes not be cheap, so we only do it when the walk we'd like\n             // to avoid could be expensive: on the potentially larger types, arrays and slices,\n@@ -191,8 +191,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n                     return Ok(true);\n                 };\n \n-                // If there are no refs or relocations in this allocation, we can avoid the\n-                // interning walk.\n+                // If there are no relocations in this allocation, it does not contain references\n+                // that point to another allocation, and we can avoid the interning walk.\n                 if let Some(alloc) = self.ecx.get_ptr_alloc(mplace.ptr, size, align)? {\n                     if !alloc.has_relocations() {\n                         return Ok(false);"}]}