{"sha": "a300cab526497909ebb3bb0f744bcf3279dd2762", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDBjYWI1MjY0OTc5MDllYmIzYmIwZjc0NGJjZjMyNzlkZDI3NjI=", "commit": {"author": {"name": "Jesper Steen M\u00f8ller", "email": "jesper@selskabet.org", "date": "2019-05-02T06:27:57Z"}, "committer": {"name": "Jesper Steen M\u00f8ller", "email": "jesper@selskabet.org", "date": "2019-05-04T18:29:34Z"}, "message": "Revert the introduced typedefs", "tree": {"sha": "1df4032856abcc6a2790bd76350d01e6f1eb166a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df4032856abcc6a2790bd76350d01e6f1eb166a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a300cab526497909ebb3bb0f744bcf3279dd2762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a300cab526497909ebb3bb0f744bcf3279dd2762", "html_url": "https://github.com/rust-lang/rust/commit/a300cab526497909ebb3bb0f744bcf3279dd2762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a300cab526497909ebb3bb0f744bcf3279dd2762/comments", "author": {"login": "jespersm", "id": 664940, "node_id": "MDQ6VXNlcjY2NDk0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/664940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jespersm", "html_url": "https://github.com/jespersm", "followers_url": "https://api.github.com/users/jespersm/followers", "following_url": "https://api.github.com/users/jespersm/following{/other_user}", "gists_url": "https://api.github.com/users/jespersm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jespersm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jespersm/subscriptions", "organizations_url": "https://api.github.com/users/jespersm/orgs", "repos_url": "https://api.github.com/users/jespersm/repos", "events_url": "https://api.github.com/users/jespersm/events{/privacy}", "received_events_url": "https://api.github.com/users/jespersm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jespersm", "id": 664940, "node_id": "MDQ6VXNlcjY2NDk0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/664940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jespersm", "html_url": "https://github.com/jespersm", "followers_url": "https://api.github.com/users/jespersm/followers", "following_url": "https://api.github.com/users/jespersm/following{/other_user}", "gists_url": "https://api.github.com/users/jespersm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jespersm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jespersm/subscriptions", "organizations_url": "https://api.github.com/users/jespersm/orgs", "repos_url": "https://api.github.com/users/jespersm/repos", "events_url": "https://api.github.com/users/jespersm/events{/privacy}", "received_events_url": "https://api.github.com/users/jespersm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2be7d1fa6e420b4265dfc27a622405bd4fc5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2be7d1fa6e420b4265dfc27a622405bd4fc5b1", "html_url": "https://github.com/rust-lang/rust/commit/5d2be7d1fa6e420b4265dfc27a622405bd4fc5b1"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "9ce300ce0484aed49e7ac0360bb4927bd494a2eb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a300cab526497909ebb3bb0f744bcf3279dd2762", "patch": "@@ -2506,16 +2506,13 @@ pub type FreevarMap = NodeMap<Vec<Freevar<ast::NodeId>>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n \n-pub type SmallHirIdVec = SmallVec<[HirId;1]>;\n-pub type SmallNodeIdVec = SmallVec<[NodeId;1]>;\n-\n  // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n  // has length > 0 if the trait is found through an chain of imports, starting with the\n  // import/use statement in the scope where the trait is used.\n #[derive(Clone, Debug)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n-    pub import_ids: SmallNodeIdVec,\n+    pub import_ids: SmallVec<[NodeId; 1]>,\n }\n \n // Trait method resolution"}, {"sha": "635185fe2258a7613a5447b7bb6cd20722f432cc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a300cab526497909ebb3bb0f744bcf3279dd2762", "patch": "@@ -29,7 +29,7 @@ use rustc::hir::def::{\n };\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n-use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap, SmallNodeIdVec};\n+use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::{bug, span_bug};\n@@ -67,6 +67,7 @@ use std::collections::BTreeSet;\n use std::mem::replace;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n+use smallvec::SmallVec;\n \n use diagnostics::{find_span_of_binding_until_next_binding, extend_span_to_previous_binding};\n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n@@ -4658,10 +4659,9 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn find_transitive_imports(&mut self, kind: &NameBindingKind<'_>,\n-                               trait_name: &Ident) -> SmallNodeIdVec {\n+    fn find_transitive_imports(&mut self, mut kind: &NameBindingKind<'_>,\n+                               trait_name: &Ident) -> SmallVec<[NodeId; 1]> {\n         let mut import_ids = smallvec![];\n-        let mut kind = kind;\n         while let NameBindingKind::Import { directive, binding, .. } = *kind {\n             self.maybe_unused_trait_imports.insert(directive.id);\n             self.add_to_glob_map(&directive, *trait_name);"}, {"sha": "314f7e97cd28d921d2e633fe5d0b27f4f499ae8e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300cab526497909ebb3bb0f744bcf3279dd2762/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a300cab526497909ebb3bb0f744bcf3279dd2762", "patch": "@@ -7,7 +7,6 @@ use crate::check::autoderef::{self, Autoderef};\n use crate::check::FnCtxt;\n use crate::hir::def_id::DefId;\n use crate::hir::def::DefKind;\n-use crate::hir::SmallHirIdVec;\n use crate::namespace::Namespace;\n \n use rustc_data_structures::sync::Lrc;\n@@ -36,7 +35,7 @@ use std::mem;\n use std::ops::Deref;\n use std::cmp::max;\n \n-use smallvec::smallvec;\n+use smallvec::{smallvec, SmallVec};\n \n use self::CandidateKind::*;\n pub use self::PickKind::*;\n@@ -124,7 +123,7 @@ struct Candidate<'tcx> {\n     xform_ret_ty: Option<Ty<'tcx>>,\n     item: ty::AssociatedItem,\n     kind: CandidateKind<'tcx>,\n-    import_ids: SmallHirIdVec,\n+    import_ids: SmallVec<[hir::HirId; 1]>,\n }\n \n #[derive(Debug)]\n@@ -149,7 +148,7 @@ enum ProbeResult {\n pub struct Pick<'tcx> {\n     pub item: ty::AssociatedItem,\n     pub kind: PickKind<'tcx>,\n-    pub import_ids: hir::SmallHirIdVec,\n+    pub import_ids: SmallVec<[hir::HirId; 1]>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -894,7 +893,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n-                                               import_ids: SmallHirIdVec,\n+                                               import_ids: SmallVec<[hir::HirId; 1]>,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\","}]}