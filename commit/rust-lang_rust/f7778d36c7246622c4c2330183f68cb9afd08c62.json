{"sha": "f7778d36c7246622c4c2330183f68cb9afd08c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Nzc4ZDM2YzcyNDY2MjJjNGMyMzMwMTgzZjY4Y2I5YWZkMDhjNjI=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T21:09:56Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-06T22:43:16Z"}, "message": "Use assoc integer constants in librustc_*", "tree": {"sha": "4e1f71148f69599930eadf1e603f1ca8910e127d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1f71148f69599930eadf1e603f1ca8910e127d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7778d36c7246622c4c2330183f68cb9afd08c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7778d36c7246622c4c2330183f68cb9afd08c62", "html_url": "https://github.com/rust-lang/rust/commit/f7778d36c7246622c4c2330183f68cb9afd08c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7778d36c7246622c4c2330183f68cb9afd08c62/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8df0157ac0e537b4948d7487bb50519464ecc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8df0157ac0e537b4948d7487bb50519464ecc2", "html_url": "https://github.com/rust-lang/rust/commit/cf8df0157ac0e537b4948d7487bb50519464ecc2"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "ca349a7890a580278ab090e2733f92b50233f580", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -1528,7 +1528,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     }\n }\n \n-pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n+pub const CODEGEN_WORKER_ID: usize = usize::MAX;\n \n /// `FatalError` is explicitly not `Send`.\n #[must_use]"}, {"sha": "8bd4ffd0a565ecedbc24bda2ad1d4be876b51353", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -507,7 +507,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n+pub const CODEGEN_WORKER_ID: usize = usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,"}, {"sha": "3f5738a93a96d8f64e0347efed242e18e186ff45", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -1361,7 +1361,7 @@ impl EmitterWriter {\n                 let mut multilines = FxHashMap::default();\n \n                 // Get the left-side margin to remove it\n-                let mut whitespace_margin = std::usize::MAX;\n+                let mut whitespace_margin = usize::MAX;\n                 for line_idx in 0..annotated_file.lines.len() {\n                     let file = annotated_file.file.clone();\n                     let line = &annotated_file.lines[line_idx];\n@@ -1373,19 +1373,19 @@ impl EmitterWriter {\n                         }\n                     }\n                 }\n-                if whitespace_margin == std::usize::MAX {\n+                if whitespace_margin == usize::MAX {\n                     whitespace_margin = 0;\n                 }\n \n                 // Left-most column any visible span points at.\n-                let mut span_left_margin = std::usize::MAX;\n+                let mut span_left_margin = usize::MAX;\n                 for line in &annotated_file.lines {\n                     for ann in &line.annotations {\n                         span_left_margin = min(span_left_margin, ann.start_col);\n                         span_left_margin = min(span_left_margin, ann.end_col);\n                     }\n                 }\n-                if span_left_margin == std::usize::MAX {\n+                if span_left_margin == usize::MAX {\n                     span_left_margin = 0;\n                 }\n \n@@ -1421,7 +1421,7 @@ impl EmitterWriter {\n                 } else {\n                     termize::dimensions()\n                         .map(|(w, _)| w.saturating_sub(code_offset))\n-                        .unwrap_or(std::usize::MAX)\n+                        .unwrap_or(usize::MAX)\n                 };\n \n                 let margin = Margin::new("}, {"sha": "46c38840516e2bc133ad393d7ed9f0d108bc25be", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -307,7 +307,7 @@ impl<'a, T: Idx> BitIter<'a, T> {\n         // additional state about whether we have started.\n         BitIter {\n             word: 0,\n-            offset: std::usize::MAX - (WORD_BITS - 1),\n+            offset: usize::MAX - (WORD_BITS - 1),\n             iter: words.iter(),\n             marker: PhantomData,\n         }"}, {"sha": "a4c5ec2f17e66146dbdc2bb5683b851064d39c6e", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -616,7 +616,7 @@ fn receiver_is_dispatchable<'tcx>(\n     // FIXME(mikeyhew) this is a total hack. Once object_safe_for_dispatch is stabilized, we can\n     // replace this with `dyn Trait`\n     let unsized_self_ty: Ty<'tcx> =\n-        tcx.mk_ty_param(::std::u32::MAX, Symbol::intern(\"RustaceansAreAwesome\"));\n+        tcx.mk_ty_param(u32::MAX, Symbol::intern(\"RustaceansAreAwesome\"));\n \n     // `Receiver[Self => U]`\n     let unsized_receiver_ty ="}, {"sha": "827792585e3f4725442090a5b789561fc312f972", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -3625,11 +3625,7 @@ struct ProvisionalEvaluation {\n \n impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {\n     fn default() -> Self {\n-        Self {\n-            dfn: Cell::new(0),\n-            reached_depth: Cell::new(std::usize::MAX),\n-            map: Default::default(),\n-        }\n+        Self { dfn: Cell::new(0), reached_depth: Cell::new(usize::MAX), map: Default::default() }\n     }\n }\n \n@@ -3728,7 +3724,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n             op(fresh_trait_ref, eval.result);\n         }\n \n-        self.reached_depth.set(std::usize::MAX);\n+        self.reached_depth.set(usize::MAX);\n     }\n }\n "}, {"sha": "c5e9a288c9ce89994a7ebea3211cd587f5451736", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -2620,13 +2620,13 @@ fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n         _ => None,\n     };\n     if let Some(Lit { kind: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n-        if *ordinal <= std::usize::MAX as u128 {\n+        if *ordinal <= usize::MAX as u128 {\n             Some(*ordinal as usize)\n         } else {\n             let msg = format!(\"ordinal value in `link_ordinal` is too large: `{}`\", &ordinal);\n             tcx.sess\n                 .struct_span_err(attr.span, &msg)\n-                .note(\"the value may not exceed `std::usize::MAX`\")\n+                .note(\"the value may not exceed `usize::MAX`\")\n                 .emit();\n             None\n         }"}, {"sha": "b9b877aa0566c8c8404da64323d95d645c9377c1", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7778d36c7246622c4c2330183f68cb9afd08c62/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=f7778d36c7246622c4c2330183f68cb9afd08c62", "patch": "@@ -12,7 +12,7 @@ error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n LL |     #[link_ordinal(18446744073709551616)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the value may not exceed `std::usize::MAX`\n+   = note: the value may not exceed `usize::MAX`\n \n error: aborting due to previous error\n "}]}