{"sha": "74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "node_id": "C_kwDOAAsO6NoAKDc0YmE3ZTFiOTkwMzRlZjdhZDE4M2I4YjNkNDFmNmU1MDYzZmJkZjA", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-10-08T08:49:00Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-10-12T01:27:41Z"}, "message": "Handle panic! inline_format-arg before ed2021", "tree": {"sha": "2df0ca46c4efcbd3d7306aa9533a2318159fd8a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df0ca46c4efcbd3d7306aa9533a2318159fd8a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "html_url": "https://github.com/rust-lang/rust/commit/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854015c33cb0978e6334d95a832819331cb71d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/854015c33cb0978e6334d95a832819331cb71d9a", "html_url": "https://github.com/rust-lang/rust/commit/854015c33cb0978e6334d95a832819331cb71d9a"}], "stats": {"total": 244, "additions": 239, "deletions": 5}, "files": [{"sha": "97d2973cce8e7054014bc6357c42ce0a2c75424c", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n-use clippy_utils::macros::{is_format_macro, FormatArgsExpn, FormatParam, FormatParamUsage};\n+use clippy_utils::macros::{is_format_macro, is_panic, FormatArgsExpn, FormatParam, FormatParamUsage};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n@@ -13,6 +13,8 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::DefId;\n+use rustc_span::edition::Edition::Edition2021;\n use rustc_span::{sym, ExpnData, ExpnKind, Span, Symbol};\n \n declare_clippy_lint! {\n@@ -149,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                     check_to_string_in_format_args(cx, name, arg.param.value);\n                 }\n                 if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n-                    check_uninlined_args(cx, &format_args, outermost_expn_data.call_site);\n+                    check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n                 }\n             }\n         }\n@@ -158,10 +160,14 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span) {\n+fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span, def_id: DefId) {\n     if args.format_string.span.from_expansion() {\n         return;\n     }\n+    if call_site.edition() < Edition2021 && is_panic(cx, def_id) {\n+        // panic! before 2021 edition considers a single string argument as non-format\n+        return;\n+    }\n \n     let mut fixes = Vec::new();\n     // If any of the arguments are referenced by an index number,"}, {"sha": "106274479751d7439a50bc2411b9106317447f3b", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -150,6 +150,19 @@ fn tester(fn_arg: i32) {\n \n     println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n     println!(\"{}\", with_span!(span val));\n+\n+    if local_i32 > 0 {\n+        panic!(\"p1 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p2 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p3 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p4 {local_i32}\");\n+    }\n }\n \n fn main() {"}, {"sha": "8e495ebd083a55e6eacae4ba91dbc7859c5d2ec6", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -150,6 +150,19 @@ fn tester(fn_arg: i32) {\n \n     println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n     println!(\"{}\", with_span!(span val));\n+\n+    if local_i32 > 0 {\n+        panic!(\"p1 {}\", local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p2 {0}\", local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p4 {local_i32}\");\n+    }\n }\n \n fn main() {"}, {"sha": "2ce3b7fa960c6159e3c3a237d43220aa195f1516", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -828,7 +828,43 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:168:5\n+  --> $DIR/uninlined_format_args.rs:155:9\n+   |\n+LL |         panic!(\"p1 {}\", local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p1 {}\", local_i32);\n+LL +         panic!(\"p1 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:158:9\n+   |\n+LL |         panic!(\"p2 {0}\", local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p2 {0}\", local_i32);\n+LL +         panic!(\"p2 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:161:9\n+   |\n+LL |         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+LL +         panic!(\"p3 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:181:5\n    |\n LL |     println!(\"expand='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -839,5 +875,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 70 previous errors\n+error: aborting due to 73 previous errors\n "}, {"sha": "2acccc25dd284f30375d9c2f4111849f1e321fc5", "filename": "tests/ui/uninlined_format_args_2018.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2018.fixed?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let var = 1;\n+\n+    println!(\"val='{var}'\");\n+\n+    if var > 0 {\n+        panic!(\"p1 {}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p2 {0}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p3 {var}\", var = var);\n+    }\n+\n+    #[allow(non_fmt_panics)]\n+    {\n+        if var > 0 {\n+            panic!(\"p4 {var}\");\n+        }\n+    }\n+}"}, {"sha": "e3c91778202dbd9899f306273b06de1c879ff8ca", "filename": "tests/ui/uninlined_format_args_2018.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2018.rs?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let var = 1;\n+\n+    println!(\"val='{}'\", var);\n+\n+    if var > 0 {\n+        panic!(\"p1 {}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p2 {0}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p3 {var}\", var = var);\n+    }\n+\n+    #[allow(non_fmt_panics)]\n+    {\n+        if var > 0 {\n+            panic!(\"p4 {var}\");\n+        }\n+    }\n+}"}, {"sha": "43e21326d321c457c714404a26c2a56ea2effa18", "filename": "tests/ui/uninlined_format_args_2018.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2018.stderr?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,15 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_2018.rs:9:5\n+   |\n+LL |     println!(\"val='{}'\", var);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", var);\n+LL +     println!(\"val='{var}'\");\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "0a9a4ee407ed3f4b01c5321b67f389aa57809d77", "filename": "tests/ui/uninlined_format_args_2021.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2021.fixed?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+// edition:2021\n+\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let var = 1;\n+\n+    println!(\"val='{var}'\");\n+\n+    if var > 0 {\n+        panic!(\"p1 {var}\");\n+    }\n+    if var > 0 {\n+        panic!(\"p2 {var}\");\n+    }\n+    if var > 0 {\n+        panic!(\"p3 {var}\");\n+    }\n+    if var > 0 {\n+        panic!(\"p4 {var}\");\n+    }\n+}"}, {"sha": "960b159dc36d1730ad341142a87b74958cd9f5fc", "filename": "tests/ui/uninlined_format_args_2021.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2021.rs?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+// edition:2021\n+\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let var = 1;\n+\n+    println!(\"val='{}'\", var);\n+\n+    if var > 0 {\n+        panic!(\"p1 {}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p2 {0}\", var);\n+    }\n+    if var > 0 {\n+        panic!(\"p3 {var}\", var = var);\n+    }\n+    if var > 0 {\n+        panic!(\"p4 {var}\");\n+    }\n+}"}, {"sha": "bc2572650ccbf1cb1d17358ad0d387f567810e06", "filename": "tests/ui/uninlined_format_args_2021.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0/tests%2Fui%2Funinlined_format_args_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_2021.stderr?ref=74ba7e1b99034ef7ad183b8b3d41f6e5063fbdf0", "patch": "@@ -0,0 +1,51 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_2021.rs:9:5\n+   |\n+LL |     println!(\"val='{}'\", var);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", var);\n+LL +     println!(\"val='{var}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_2021.rs:12:9\n+   |\n+LL |         panic!(\"p1 {}\", var);\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p1 {}\", var);\n+LL +         panic!(\"p1 {var}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_2021.rs:15:9\n+   |\n+LL |         panic!(\"p2 {0}\", var);\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p2 {0}\", var);\n+LL +         panic!(\"p2 {var}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args_2021.rs:18:9\n+   |\n+LL |         panic!(\"p3 {var}\", var = var);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p3 {var}\", var = var);\n+LL +         panic!(\"p3 {var}\");\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}