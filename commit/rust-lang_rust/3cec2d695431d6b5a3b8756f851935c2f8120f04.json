{"sha": "3cec2d695431d6b5a3b8756f851935c2f8120f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZWMyZDY5NTQzMWQ2YjVhM2I4NzU2Zjg1MTkzNWMyZjgxMjBmMDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T22:21:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T22:21:25Z"}, "message": "rustdoc: Teach rustdoc to run pandoc", "tree": {"sha": "5fdea38bea164f1d79aefd1afa7226533757a873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fdea38bea164f1d79aefd1afa7226533757a873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cec2d695431d6b5a3b8756f851935c2f8120f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cec2d695431d6b5a3b8756f851935c2f8120f04", "html_url": "https://github.com/rust-lang/rust/commit/3cec2d695431d6b5a3b8756f851935c2f8120f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cec2d695431d6b5a3b8756f851935c2f8120f04/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42799a5faf9b2291d20a5dd5481a1e317b283c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/42799a5faf9b2291d20a5dd5481a1e317b283c10", "html_url": "https://github.com/rust-lang/rust/commit/42799a5faf9b2291d20a5dd5481a1e317b283c10"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "d33c4589016b3919a8156f9b5e5db2a8f1f97707", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3cec2d695431d6b5a3b8756f851935c2f8120f04/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cec2d695431d6b5a3b8756f851935c2f8120f04/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=3cec2d695431d6b5a3b8756f851935c2f8120f04", "patch": "@@ -26,11 +26,79 @@ impl writer_util for writer {\n }\n \n fn make_writer(config: config::config) -> writer {\n-    markdown_writer(config)\n+    alt config.output_format {\n+      config::markdown {\n+        markdown_writer(config)\n+      }\n+      config::pandoc_html {\n+        pandoc_writer(config)\n+      }\n+    }\n }\n \n fn markdown_writer(config: config::config) -> writer {\n-    let filename = make_filename(config);\n+    let filename = make_filename(config, \"md\");\n+    generic_writer {|markdown|\n+        write_file(filename, markdown);\n+    }\n+}\n+\n+fn pandoc_writer(config: config::config) -> writer {\n+    assert option::is_some(config.pandoc_cmd);\n+    let pandoc_cmd = option::get(config.pandoc_cmd);\n+    let filename = make_filename(config, \"html\");\n+\n+    let pandoc_args = [\n+        \"--standalone\",\n+        \"--toc\",\n+        \"--section-divs\",\n+        \"--from=markdown\",\n+        \"--to=html\",\n+        \"--css=rust.css\",\n+        \"--output=\" + filename\n+    ];\n+\n+    generic_writer {|markdown|\n+        import std::run;\n+        import std::os;\n+        import std::io;\n+        import std::io::writer_util;\n+\n+        #debug(\"pandoc cmd: %s\", pandoc_cmd);\n+        #debug(\"pandoc args: %s\", str::connect(pandoc_args, \" \"));\n+\n+        let pipe_in = os::pipe();\n+        let pipe_out = os::pipe();\n+        let pipe_err = os::pipe();\n+        let pid = run::spawn_process(\n+            pandoc_cmd, pandoc_args, none, none,\n+            pipe_in.in, pipe_out.out, pipe_err.out);\n+\n+        if pid != -1 as ctypes::pid_t {\n+            let writer = io::fd_writer(pipe_in.out, false);\n+            writer.write_str(markdown);\n+        }\n+\n+        os::close(pipe_in.in);\n+        os::close(pipe_out.out);\n+        os::close(pipe_err.out);\n+        os::close(pipe_in.out);\n+        os::close(pipe_out.in);\n+        os::close(pipe_err.in);\n+\n+        if pid == -1 as ctypes::pid_t {\n+            fail \"failed to run pandoc\";\n+        }\n+\n+        let status = run::waitpid(pid);\n+        #debug(\"pandoc result: %i\", status);\n+        if status != 0 {\n+            fail \"pandoc failed\";\n+        }\n+    }\n+}\n+\n+fn generic_writer(process: fn~(markdown: str)) -> writer {\n     let ch = task::spawn_listener {|po: comm::port<writeinstr>|\n         let markdown = \"\";\n         let keep_going = true;\n@@ -40,19 +108,19 @@ fn markdown_writer(config: config::config) -> writer {\n               done { keep_going = false; }\n             }\n         }\n-        write_file(filename, markdown);\n+        process(markdown);\n     };\n \n     fn~(+instr: writeinstr) {\n         comm::send(ch, instr);\n     }\n }\n \n-fn make_filename(config: config::config) -> str {\n+fn make_filename(config: config::config, ext: str) -> str {\n     import std::fs;\n     let cratefile = fs::basename(config.input_crate);\n     let cratename = tuple::first(fs::splitext(cratefile));\n-    fs::connect(config.output_dir, cratename + \".md\")\n+    fs::connect(config.output_dir, cratename + \".\" + ext)\n }\n \n fn write_file(path: str, s: str) {\n@@ -73,7 +141,7 @@ fn should_use_markdown_file_name_based_off_crate() {\n         output_dir: \"output/dir\"\n         with config::default_config(\"input/test.rc\")\n     };\n-    assert make_filename(config) == \"output/dir/test.md\";\n+    assert make_filename(config, \"md\") == \"output/dir/test.md\";\n }\n \n fn future_writer() -> (writer, future::future<str>) {"}]}