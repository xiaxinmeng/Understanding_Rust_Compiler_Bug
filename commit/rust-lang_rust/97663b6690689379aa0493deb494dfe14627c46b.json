{"sha": "97663b6690689379aa0493deb494dfe14627c46b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjYzYjY2OTA2ODkzNzlhYTA0OTNkZWI0OTRkZmUxNDYyN2M0NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T21:54:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-21T21:54:09Z"}, "message": "Auto merge of #82834 - nikic:mutable-noalias, r=nagisa\n\nEnable mutable noalias for LLVM >= 12\n\nEnable mutable noalias by default on LLVM 12, as previously known miscompiles have been resolved. Now it's time to find the next one ;)\n\n * The `-Z mutable-noalias` option no longer has an explicit default and accepts `-Z mutable-noalias=yes` and `-Z mutable-noalias=no` to override the LLVM version based default behavior.\n * The decision on whether to apply the noalias attribute is moved into rustc_codegen_llvm. rustc_middle only provides us with the necessary information to make the decision.\n * `noalias` is not emitted for types that are `!Unpin`, as a heuristic for self-referential structures (see #54878 and #63818).", "tree": {"sha": "db6239ac4e1a2b0da3a393e7c2b8751b3d7c2979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db6239ac4e1a2b0da3a393e7c2b8751b3d7c2979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97663b6690689379aa0493deb494dfe14627c46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97663b6690689379aa0493deb494dfe14627c46b", "html_url": "https://github.com/rust-lang/rust/commit/97663b6690689379aa0493deb494dfe14627c46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97663b6690689379aa0493deb494dfe14627c46b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82664191d0e8764b7435b9d72eb0e366b8b1464", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464", "html_url": "https://github.com/rust-lang/rust/commit/f82664191d0e8764b7435b9d72eb0e366b8b1464"}, {"sha": "68a62b76d49328719c491da385b1123721689523", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a62b76d49328719c491da385b1123721689523", "html_url": "https://github.com/rust-lang/rust/commit/68a62b76d49328719c491da385b1123721689523"}], "stats": {"total": 222, "additions": 165, "deletions": 57}, "files": [{"sha": "854e3ccc21b4fa75efe7bcd92e72fd105fa9d153", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -1,6 +1,7 @@\n use crate::builder::Builder;\n use crate::context::CodegenCx;\n use crate::llvm::{self, AttributePlace};\n+use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -41,12 +42,29 @@ impl ArgAttributeExt for ArgAttribute {\n }\n \n pub trait ArgAttributesExt {\n-    fn apply_attrs_to_llfn(&self, idx: AttributePlace, llfn: &Value);\n-    fn apply_attrs_to_callsite(&self, idx: AttributePlace, callsite: &Value);\n+    fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value);\n+    fn apply_attrs_to_callsite(\n+        &self,\n+        idx: AttributePlace,\n+        cx: &CodegenCx<'_, '_>,\n+        callsite: &Value,\n+    );\n+}\n+\n+fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n+    // LLVM prior to version 12 has known miscompiles in the presence of\n+    // noalias attributes (see #54878). Only enable mutable noalias by\n+    // default for versions we believe to be safe.\n+    cx.tcx\n+        .sess\n+        .opts\n+        .debugging_opts\n+        .mutable_noalias\n+        .unwrap_or_else(|| llvm_util::get_version() >= (12, 0, 0))\n }\n \n impl ArgAttributesExt for ArgAttributes {\n-    fn apply_attrs_to_llfn(&self, idx: AttributePlace, llfn: &Value) {\n+    fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -62,6 +80,9 @@ impl ArgAttributesExt for ArgAttributes {\n                 llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n+            if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n+                llvm::Attribute::NoAlias.apply_llfn(idx, llfn);\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => {\n@@ -74,7 +95,12 @@ impl ArgAttributesExt for ArgAttributes {\n         }\n     }\n \n-    fn apply_attrs_to_callsite(&self, idx: AttributePlace, callsite: &Value) {\n+    fn apply_attrs_to_callsite(\n+        &self,\n+        idx: AttributePlace,\n+        cx: &CodegenCx<'_, '_>,\n+        callsite: &Value,\n+    ) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -98,6 +124,9 @@ impl ArgAttributesExt for ArgAttributes {\n                 );\n             }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n+            if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n+                llvm::Attribute::NoAlias.apply_callsite(idx, callsite);\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => {\n@@ -419,13 +448,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_attrs_to_llfn(llvm::AttributePlace::Argument(i), llfn);\n+            attrs.apply_attrs_to_llfn(llvm::AttributePlace::Argument(i), cx, llfn);\n             i += 1;\n             i - 1\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_attrs_to_llfn(llvm::AttributePlace::ReturnValue, llfn);\n+                attrs.apply_attrs_to_llfn(llvm::AttributePlace::ReturnValue, cx, llfn);\n             }\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n@@ -480,18 +509,18 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         // FIXME(wesleywiser, eddyb): We should apply `nounwind` and `noreturn` as appropriate to this callsite.\n \n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_attrs_to_callsite(llvm::AttributePlace::Argument(i), callsite);\n+        let mut apply = |cx: &CodegenCx<'_, '_>, attrs: &ArgAttributes| {\n+            attrs.apply_attrs_to_callsite(llvm::AttributePlace::Argument(i), cx, callsite);\n             i += 1;\n             i - 1\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_attrs_to_callsite(llvm::AttributePlace::ReturnValue, callsite);\n+                attrs.apply_attrs_to_callsite(llvm::AttributePlace::ReturnValue, &bx.cx, callsite);\n             }\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n-                let i = apply(attrs);\n+                let i = apply(bx.cx, attrs);\n                 unsafe {\n                     llvm::LLVMRustAddStructRetCallSiteAttr(\n                         callsite,\n@@ -517,12 +546,12 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(bx.cx, &ArgAttributes::new());\n             }\n             match arg.mode {\n                 PassMode::Ignore => {}\n                 PassMode::Indirect { ref attrs, extra_attrs: None, on_stack: true } => {\n-                    let i = apply(attrs);\n+                    let i = apply(bx.cx, attrs);\n                     unsafe {\n                         llvm::LLVMRustAddByValCallSiteAttr(\n                             callsite,\n@@ -533,22 +562,22 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 }\n                 PassMode::Direct(ref attrs)\n                 | PassMode::Indirect { ref attrs, extra_attrs: None, on_stack: false } => {\n-                    apply(attrs);\n+                    apply(bx.cx, attrs);\n                 }\n                 PassMode::Indirect {\n                     ref attrs,\n                     extra_attrs: Some(ref extra_attrs),\n                     on_stack: _,\n                 } => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(bx.cx, attrs);\n+                    apply(bx.cx, extra_attrs);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(bx.cx, a);\n+                    apply(bx.cx, b);\n                 }\n                 PassMode::Cast(_) => {\n-                    apply(&ArgAttributes::new());\n+                    apply(bx.cx, &ArgAttributes::new());\n                 }\n             }\n         }"}, {"sha": "b3f0c66de68c9fdd22a2ed6cd53a2830fced19c6", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -566,7 +566,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_opt_level, Some(4));\n-    tracked!(mutable_noalias, true);\n+    tracked!(mutable_noalias, Some(true));\n     tracked!(new_llvm_pass_manager, true);\n     tracked!(no_codegen, true);\n     tracked!(no_generate_arange_section, true);"}, {"sha": "53a7d8528d36e0c7aeedc35919f7b4260da5a3d8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -993,6 +993,10 @@ rustc_queries! {\n     query is_freeze_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is freeze\", env.value }\n     }\n+    /// Query backing `TyS::is_unpin`.\n+    query is_unpin_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+        desc { \"computing whether `{}` is `Unpin`\", env.value }\n+    }\n     /// Query backing `TyS::needs_drop`.\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }"}, {"sha": "3a75a6d907d050c997d7be24025f1327f0afa5dc", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n@@ -2318,31 +2318,30 @@ where\n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n                 let address_space = addr_space_of_ty(ty);\n                 let tcx = cx.tcx();\n-                let is_freeze = ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env());\n-                let kind = match mt {\n-                    hir::Mutability::Not => {\n-                        if is_freeze {\n-                            PointerKind::Frozen\n-                        } else {\n-                            PointerKind::Shared\n+                let kind = if tcx.sess.opts.optimize == OptLevel::No {\n+                    // Use conservative pointer kind if not optimizing. This saves us the\n+                    // Freeze/Unpin queries, and can save time in the codegen backend (noalias\n+                    // attributes in LLVM have compile-time cost even in unoptimized builds).\n+                    PointerKind::Shared\n+                } else {\n+                    match mt {\n+                        hir::Mutability::Not => {\n+                            if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n+                                PointerKind::Frozen\n+                            } else {\n+                                PointerKind::Shared\n+                            }\n                         }\n-                    }\n-                    hir::Mutability::Mut => {\n-                        // Previously we would only emit noalias annotations for LLVM >= 6 or in\n-                        // panic=abort mode. That was deemed right, as prior versions had many bugs\n-                        // in conjunction with unwinding, but later versions didn\u2019t seem to have\n-                        // said issues. See issue #31681.\n-                        //\n-                        // Alas, later on we encountered a case where noalias would generate wrong\n-                        // code altogether even with recent versions of LLVM in *safe* code with no\n-                        // unwinding involved. See #54462.\n-                        //\n-                        // For now, do not enable mutable_noalias by default at all, while the\n-                        // issue is being figured out.\n-                        if tcx.sess.opts.debugging_opts.mutable_noalias {\n-                            PointerKind::UniqueBorrowed\n-                        } else {\n-                            PointerKind::Shared\n+                        hir::Mutability::Mut => {\n+                            // References to self-referential structures should not be considered\n+                            // noalias, as another pointer to the structure can be obtained, that\n+                            // is not based-on the original reference. We consider all !Unpin\n+                            // types to be potentially self-referential here.\n+                            if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n+                                PointerKind::UniqueBorrowed\n+                            } else {\n+                                PointerKind::Shared\n+                            }\n                         }\n                     }\n                 };\n@@ -2775,10 +2774,14 @@ where\n                     // and can be marked as both `readonly` and `noalias`, as\n                     // LLVM's definition of `noalias` is based solely on memory\n                     // dependencies rather than pointer equality\n+                    //\n+                    // Due to miscompiles in LLVM < 12, we apply a separate NoAliasMutRef attribute\n+                    // for UniqueBorrowed arguments, so that the codegen backend can decide\n+                    // whether or not to actually emit the attribute.\n                     let no_alias = match kind {\n-                        PointerKind::Shared => false,\n+                        PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n                         PointerKind::UniqueOwned => true,\n-                        PointerKind::Frozen | PointerKind::UniqueBorrowed => !is_return,\n+                        PointerKind::Frozen => !is_return,\n                     };\n                     if no_alias {\n                         attrs.set(ArgAttribute::NoAlias);\n@@ -2787,6 +2790,10 @@ where\n                     if kind == PointerKind::Frozen && !is_return {\n                         attrs.set(ArgAttribute::ReadOnly);\n                     }\n+\n+                    if kind == PointerKind::UniqueBorrowed && !is_return {\n+                        attrs.set(ArgAttribute::NoAliasMutRef);\n+                    }\n                 }\n             }\n         };"}, {"sha": "cff8166974a7acb5efa0c5f77c0486990e927fa7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -741,6 +741,46 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n+    /// Checks whether values of this type `T` implement the `Unpin` trait.\n+    pub fn is_unpin(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))\n+    }\n+\n+    /// Fast path helper for testing if a type is `Unpin`.\n+    ///\n+    /// Returning true means the type is known to be `Unpin`. Returning\n+    /// `false` means nothing -- could be `Unpin`, might not be.\n+    fn is_trivially_unpin(&self) -> bool {\n+        match self.kind() {\n+            ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Str\n+            | ty::Never\n+            | ty::Ref(..)\n+            | ty::RawPtr(_)\n+            | ty::FnDef(..)\n+            | ty::Error(_)\n+            | ty::FnPtr(_) => true,\n+            ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_unpin),\n+            ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_unpin(),\n+            ty::Adt(..)\n+            | ty::Bound(..)\n+            | ty::Closure(..)\n+            | ty::Dynamic(..)\n+            | ty::Foreign(_)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Infer(_)\n+            | ty::Opaque(..)\n+            | ty::Param(_)\n+            | ty::Placeholder(_)\n+            | ty::Projection(_) => false,\n+        }\n+    }\n+\n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely\n     /// non-copy and *might* have a destructor attached; if it returns\n     /// `false`, then `ty` definitely has no destructor (i.e., no drop glue)."}, {"sha": "517051b200b51a1d43b3e18c96573932fd118776", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -997,8 +997,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n-    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n-        \"emit noalias metadata for mutable references (default: no)\"),\n+    mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n     new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n         \"use new LLVM pass manager (default: no)\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "2c3f7762759bfe0c187708335c9386aaa828280f", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -65,7 +65,10 @@ mod attr_impl {\n             const NoCapture = 1 << 2;\n             const NonNull   = 1 << 3;\n             const ReadOnly  = 1 << 4;\n-            const InReg     = 1 << 8;\n+            const InReg     = 1 << 5;\n+            // NoAlias on &mut arguments can only be used with LLVM >= 12 due to miscompiles\n+            // in earlier versions. FIXME: Remove this distinction once possible.\n+            const NoAliasMutRef = 1 << 6;\n         }\n     }\n }"}, {"sha": "e2618da749fb34105767a8610bb9b1fe20103f61", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -1112,7 +1112,7 @@ pub enum PointerKind {\n     /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.\n     Frozen,\n \n-    /// `&mut T`, when we know `noalias` is safe for LLVM.\n+    /// `&mut T` which is `noalias` but not `readonly`.\n     UniqueBorrowed,\n \n     /// `Box<T>`, unlike `UniqueBorrowed`, it also has `noalias` on returns."}, {"sha": "cedc84d97c2d9ca4bae3f218a10c1c1d783e37d4", "filename": "compiler/rustc_ty_utils/src/common_traits.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -18,6 +18,10 @@ fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n     is_item_raw(tcx, query, LangItem::Freeze)\n }\n \n+fn is_unpin_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+    is_item_raw(tcx, query, LangItem::Unpin)\n+}\n+\n fn is_item_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n@@ -37,5 +41,11 @@ fn is_item_raw<'tcx>(\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { is_copy_raw, is_sized_raw, is_freeze_raw, ..*providers };\n+    *providers = ty::query::Providers {\n+        is_copy_raw,\n+        is_sized_raw,\n+        is_freeze_raw,\n+        is_unpin_raw,\n+        ..*providers\n+    };\n }"}, {"sha": "d10a0af8dca25d9d548ca6a369fd66ad06acb3c9", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -1 +1 @@\n-Subproject commit e32a2f928f8b78d534bca2b9e7736413314dc556\n+Subproject commit d10a0af8dca25d9d548ca6a369fd66ad06acb3c9"}, {"sha": "0c34bf1b914b0e835c46e4f7f73be04751410352", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n // ignore-tidy-linelength\n // min-system-llvm-version: 12.0\n \n@@ -43,13 +43,13 @@ pub fn named_borrow<'r>(_: &'r i32) {\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(i16* align 2 dereferenceable(2) %_1)\n+// CHECK: @mutable_unsafe_borrow(i16* noalias align 2 dereferenceable(2) %_1)\n // ... unless this is a mutable borrow, those never alias\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* align 4 dereferenceable(4) %_1)\n+// CHECK: @mutable_borrow(i32* noalias align 4 dereferenceable(4) %_1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n@@ -94,7 +94,7 @@ pub fn helper(_: usize) {\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice([0 x i8]* nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n+// CHECK: @mutable_slice([0 x i8]* noalias nonnull align 1 %_1.0, [[USIZE]] %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {"}, {"sha": "8ca9b98eee2f9dadc42889d919ba57f4b0bd92ff", "filename": "src/test/codegen/noalias-unpin.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-unpin.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O -Z mutable-noalias=yes\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct SelfRef {\n+    self_ref: *mut SelfRef,\n+    _pin: std::marker::PhantomPinned\n+}\n+\n+// CHECK-LABEL: @test_self_ref(\n+// CHECK-NOT: noalias\n+#[no_mangle]\n+pub unsafe fn test_self_ref(s: &mut SelfRef) {\n+    (*s.self_ref).self_ref = std::ptr::null_mut();\n+}"}, {"sha": "6ab28e87cb661efc4def8f4f328dd58b668ac9e3", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97663b6690689379aa0493deb494dfe14627c46b/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=97663b6690689379aa0493deb494dfe14627c46b", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n "}]}