{"sha": "232b9ba129b75fdf6b120c44f3696233915be40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmI5YmExMjliNzVmZGY2YjEyMGM0NGYzNjk2MjMzOTE1YmU0MGU=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-11-04T14:59:04Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-11-04T15:00:44Z"}, "message": "Move range in ui test to ops test in library/core", "tree": {"sha": "1d555c38522588e1a4a8c4ddca2544a24cf7ccbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d555c38522588e1a4a8c4ddca2544a24cf7ccbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232b9ba129b75fdf6b120c44f3696233915be40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232b9ba129b75fdf6b120c44f3696233915be40e", "html_url": "https://github.com/rust-lang/rust/commit/232b9ba129b75fdf6b120c44f3696233915be40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232b9ba129b75fdf6b120c44f3696233915be40e/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56293097f7f877f1350a6cd00f79d03132f16515", "url": "https://api.github.com/repos/rust-lang/rust/commits/56293097f7f877f1350a6cd00f79d03132f16515", "html_url": "https://github.com/rust-lang/rust/commit/56293097f7f877f1350a6cd00f79d03132f16515"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "8f0cd3be4066eaaac0606838163a61767508a639", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/232b9ba129b75fdf6b120c44f3696233915be40e/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232b9ba129b75fdf6b120c44f3696233915be40e/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=232b9ba129b75fdf6b120c44f3696233915be40e", "patch": "@@ -1,6 +1,6 @@\n use core::ops::{Bound, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo};\n \n-// Test the Range structs without the syntactic sugar.\n+// Test the Range structs and syntax.\n \n #[test]\n fn test_range() {\n@@ -94,3 +94,60 @@ fn test_bound_cloned_included() {\n fn test_bound_cloned_excluded() {\n     assert_eq!(Bound::Excluded(&3).cloned(), Bound::Excluded(3));\n }\n+\n+#[test]\n+#[allow(unused_comparisons)]\n+#[allow(unused_mut)]\n+fn test_range_syntax() {\n+    let mut count = 0;\n+    for i in 0_usize..10 {\n+        assert!(i >= 0 && i < 10);\n+        count += i;\n+    }\n+    assert_eq!(count, 45);\n+\n+    let mut count = 0;\n+    let mut range = 0_usize..10;\n+    for i in range {\n+        assert!(i >= 0 && i < 10);\n+        count += i;\n+    }\n+    assert_eq!(count, 45);\n+\n+    let mut count = 0;\n+    let mut rf = 3_usize..;\n+    for i in rf.take(10) {\n+        assert!(i >= 3 && i < 13);\n+        count += i;\n+    }\n+    assert_eq!(count, 75);\n+\n+    let _ = 0_usize..4 + 4 - 3;\n+\n+    fn foo() -> isize {\n+        42\n+    }\n+    let _ = 0..foo();\n+\n+    let _ = { &42..&100 }; // references to literals are OK\n+    let _ = ..42_usize;\n+\n+    // Test we can use two different types with a common supertype.\n+    let x = &42;\n+    {\n+        let y = 42;\n+        let _ = x..&y;\n+    }\n+}\n+\n+#[test]\n+#[allow(dead_code)]\n+fn test_range_syntax_in_return_statement() {\n+    fn return_range_to() -> RangeTo<i32> {\n+        return ..1;\n+    }\n+    fn return_full_range() -> RangeFull {\n+        return ..;\n+    }\n+    // Not much to test.\n+}"}, {"sha": "f3f7508d12434870b3edd509c44dd0da1dc50828", "filename": "src/test/ui/range.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56293097f7f877f1350a6cd00f79d03132f16515/src%2Ftest%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange.rs?ref=56293097f7f877f1350a6cd00f79d03132f16515", "patch": "@@ -1,51 +0,0 @@\n-// run-pass\n-#![allow(unused_braces)]\n-#![allow(unused_comparisons)]\n-#![allow(dead_code)]\n-#![allow(unused_mut)]\n-// Test range syntax.\n-\n-\n-fn foo() -> isize { 42 }\n-\n-// Test that range syntax works in return statements\n-fn return_range_to() -> ::std::ops::RangeTo<i32> { return ..1; }\n-fn return_full_range() -> ::std::ops::RangeFull { return ..; }\n-\n-pub fn main() {\n-    let mut count = 0;\n-    for i in 0_usize..10 {\n-        assert!(i >= 0 && i < 10);\n-        count += i;\n-    }\n-    assert_eq!(count, 45);\n-\n-    let mut count = 0;\n-    let mut range = 0_usize..10;\n-    for i in range {\n-        assert!(i >= 0 && i < 10);\n-        count += i;\n-    }\n-    assert_eq!(count, 45);\n-\n-    let mut count = 0;\n-    let mut rf = 3_usize..;\n-    for i in rf.take(10) {\n-        assert!(i >= 3 && i < 13);\n-        count += i;\n-    }\n-    assert_eq!(count, 75);\n-\n-    let _ = 0_usize..4+4-3;\n-    let _ = 0..foo();\n-\n-    let _ = { &42..&100 }; // references to literals are OK\n-    let _ = ..42_usize;\n-\n-    // Test we can use two different types with a common supertype.\n-    let x = &42;\n-    {\n-        let y = 42;\n-        let _ = x..&y;\n-    }\n-}"}]}