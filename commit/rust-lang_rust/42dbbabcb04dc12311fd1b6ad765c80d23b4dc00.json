{"sha": "42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "node_id": "C_kwDOAAsO6NoAKDQyZGJiYWJjYjA0ZGMxMjMxMWZkMWI2YWQ3NjVjODBkMjNiNGRjMDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-28T02:43:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-24T21:49:29Z"}, "message": "Suggest replacing `_` in type signature of impl for Trait", "tree": {"sha": "56b80b718ec9f55e2d304e0e42e4b5f337bc7f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b80b718ec9f55e2d304e0e42e4b5f337bc7f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "html_url": "https://github.com/rust-lang/rust/commit/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f314e7027fe7084aaab8620c624a0d7bd29e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f314e7027fe7084aaab8620c624a0d7bd29e70", "html_url": "https://github.com/rust-lang/rust/commit/18f314e7027fe7084aaab8620c624a0d7bd29e70"}], "stats": {"total": 162, "additions": 147, "deletions": 15}, "files": [{"sha": "52de1cb88f418de9a3626846f450d6604c985235", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -2563,12 +2563,29 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We proactively collect all the inferred type params to emit a single error per fn def.\n         let mut visitor = HirPlaceholderCollector::default();\n-        for ty in decl.inputs {\n-            visitor.visit_ty(ty);\n-        }\n+        let mut infer_replacements = vec![];\n+\n         walk_generics(&mut visitor, generics);\n \n-        let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n+        let input_tys: Vec<_> = decl\n+            .inputs\n+            .iter()\n+            .enumerate()\n+            .map(|(i, a)| {\n+                if let hir::TyKind::Infer = a.kind && !self.allow_ty_infer() {\n+                    if let Some(suggested_ty) =\n+                      self.suggest_trait_fn_ty_for_impl_fn_infer(hir_id, i) {\n+                        infer_replacements.push((a.span, suggested_ty.to_string()));\n+                        return suggested_ty;\n+                    }\n+                }\n+\n+                // Only visit the type looking for `_` if we didn't fix the type above\n+                visitor.visit_ty(a);\n+                self.ty_of_arg(a, None)\n+            })\n+            .collect();\n+\n         let output_ty = match decl.output {\n             hir::FnRetTy::Return(output) => {\n                 visitor.visit_ty(output);\n@@ -2579,24 +2596,34 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);\n \n-        let fn_ty = tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi);\n+        let fn_ty = tcx.mk_fn_sig(input_tys.into_iter(), output_ty, decl.c_variadic, unsafety, abi);\n         let bare_fn_ty = ty::Binder::bind_with_vars(fn_ty, bound_vars);\n \n-        if !self.allow_ty_infer() {\n+        if !self.allow_ty_infer() && !(visitor.0.is_empty() && infer_replacements.is_empty()) {\n             // We always collect the spans for placeholder types when evaluating `fn`s, but we\n             // only want to emit an error complaining about them if infer types (`_`) are not\n             // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n             // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n \n-            crate::collect::placeholder_type_error(\n+            let mut diag = crate::collect::placeholder_type_error_diag(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()),\n                 generics.params,\n                 visitor.0,\n+                infer_replacements.iter().map(|(s, _)| *s).collect(),\n                 true,\n                 hir_ty,\n                 \"function\",\n             );\n+\n+            if !infer_replacements.is_empty() {\n+                diag.multipart_suggestion(&format!(\n+                    \"try replacing `_` with the type{} in the corresponding trait method signature\",\n+                    if infer_replacements.len() > 1 { \"s\" } else { \"\" }\n+                ), infer_replacements, Applicability::MachineApplicable);\n+            }\n+\n+            diag.emit();\n         }\n \n         // Find any late-bound regions declared in return type that do\n@@ -2624,6 +2651,39 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         bare_fn_ty\n     }\n \n+    /// Given a fn_hir_id for a impl function, suggest the type that is found on the\n+    /// corresponding function in the trait that the impl implements, if it exists.\n+    fn suggest_trait_fn_ty_for_impl_fn_infer(\n+        &self,\n+        fn_hir_id: hir::HirId,\n+        arg_idx: usize,\n+    ) -> Option<Ty<'tcx>> {\n+        let tcx = self.tcx();\n+        let hir = tcx.hir();\n+\n+        let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n+            hir.get(fn_hir_id) else { return None };\n+        let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n+                hir.get(hir.get_parent_node(fn_hir_id)) else { return None };\n+\n+        let trait_ref =\n+            self.instantiate_mono_trait_ref(i.of_trait.as_ref()?, self.ast_ty_to_ty(i.self_ty));\n+\n+        let x: &ty::AssocItem = tcx.associated_items(trait_ref.def_id).find_by_name_and_kind(\n+            tcx,\n+            *ident,\n+            ty::AssocKind::Fn,\n+            trait_ref.def_id,\n+        )?;\n+\n+        let fn_sig = tcx.fn_sig(x.def_id).subst(\n+            tcx,\n+            trait_ref.substs.extend_to(tcx, x.def_id, |param, _| tcx.mk_param_from_def(param)),\n+        );\n+\n+        Some(tcx.erase_late_bound_regions(fn_sig.input(arg_idx)))\n+    }\n+\n     fn validate_late_bound_regions(\n         &self,\n         constrained_regions: FxHashSet<ty::BoundRegionKind>,"}, {"sha": "9df20aa60f9ef8e4982fc363e60cb81b021ef9fe", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -160,6 +160,33 @@ crate fn placeholder_type_error<'tcx>(\n         return;\n     }\n \n+    placeholder_type_error_diag(\n+        tcx,\n+        span,\n+        generics,\n+        placeholder_types,\n+        vec![],\n+        suggest,\n+        hir_ty,\n+        kind,\n+    )\n+    .emit();\n+}\n+\n+crate fn placeholder_type_error_diag<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    span: Option<Span>,\n+    generics: &[hir::GenericParam<'_>],\n+    placeholder_types: Vec<Span>,\n+    additional_spans: Vec<Span>,\n+    suggest: bool,\n+    hir_ty: Option<&hir::Ty<'_>>,\n+    kind: &'static str,\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n+    if placeholder_types.is_empty() {\n+        return bad_placeholder(tcx, additional_spans, kind);\n+    }\n+\n     let type_name = generics.next_type_param_name(None);\n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();\n@@ -182,7 +209,8 @@ crate fn placeholder_type_error<'tcx>(\n         sugg.push((span, format!(\", {}\", type_name)));\n     }\n \n-    let mut err = bad_placeholder(tcx, placeholder_types, kind);\n+    let mut err =\n+        bad_placeholder(tcx, placeholder_types.into_iter().chain(additional_spans).collect(), kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -218,7 +246,8 @@ crate fn placeholder_type_error<'tcx>(\n             );\n         }\n     }\n-    err.emit();\n+\n+    err\n }\n \n fn reject_placeholder_type_signatures_in_item<'tcx>("}, {"sha": "20e762a98c35115ac341095342aec5579383acc8", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.fixed?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+trait Foo<T>: Sized {\n+    fn bar(i: i32, t: T, s: &Self) {}\n+}\n+\n+impl Foo<usize> for () {\n+    fn bar(i: i32, t: usize, s: &()) {}\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+}\n+\n+fn main() {}"}, {"sha": "ae71fd4e390857878f7a48db44b2c18be8e82571", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.rs?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+trait Foo<T>: Sized {\n+    fn bar(i: i32, t: T, s: &Self) {}\n+}\n+\n+impl Foo<usize> for () {\n+    fn bar(i: _, t: _, s: _) {}\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+}\n+\n+fn main() {}"}, {"sha": "56044e4670ba71f0477fca0d41812b10bb604895", "filename": "src/test/ui/did_you_mean/replace-impl-infer-ty-from-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Freplace-impl-infer-ty-from-trait.stderr?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -0,0 +1,17 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/replace-impl-infer-ty-from-trait.rs:9:15\n+   |\n+LL |     fn bar(i: _, t: _, s: _) {}\n+   |               ^     ^     ^ not allowed in type signatures\n+   |               |     |\n+   |               |     not allowed in type signatures\n+   |               not allowed in type signatures\n+   |\n+help: try replacing `_` with the types in the corresponding trait method signature\n+   |\n+LL |     fn bar(i: i32, t: usize, s: &()) {}\n+   |               ~~~     ~~~~~     ~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "64c7a306e5d41bcf6f345bb4f57340e23d8a84f6", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42dbbabcb04dc12311fd1b6ad765c80d23b4dc00/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=42dbbabcb04dc12311fd1b6ad765c80d23b4dc00", "patch": "@@ -560,10 +560,10 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n    |\n-help: use type parameters instead\n+help: try replacing `_` with the type in the corresponding trait method signature\n    |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  +++                   ~\n+LL |     fn clone_from(&mut self, other: &Test9) { *self = Test9; }\n+   |                                     ~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:107:31\n@@ -600,10 +600,10 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n    |\n-help: use type parameters instead\n+help: try replacing `_` with the type in the corresponding trait method signature\n    |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      +++                   ~\n+LL |         fn clone_from(&mut self, other: &FnTest9) { *self = FnTest9; }\n+   |                                         ~~~~~~~~\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:201:14"}]}