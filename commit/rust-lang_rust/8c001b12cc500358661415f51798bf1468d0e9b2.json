{"sha": "8c001b12cc500358661415f51798bf1468d0e9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDAxYjEyY2M1MDAzNTg2NjE0MTVmNTE3OThiZjE0NjhkMGU5YjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T19:31:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T19:31:52Z"}, "message": "Rollup merge of #57480 - Zoxc:query-fix, r=michaelwoerister\n\nClean up and fix a bug in query plumbing\n\nr? @michaelwoerister", "tree": {"sha": "8459d23958e9dad9d429fa59d757a03b02c3f91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8459d23958e9dad9d429fa59d757a03b02c3f91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c001b12cc500358661415f51798bf1468d0e9b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPOOoCRBK7hj4Ov3rIwAAdHIIAEUp7cYnyHttBqc1wg1Ya5+z\n3bOPMO88b/TrgBLln074BKOu47uBb8e+t+DgE42oZfYGXD6a0Z3XQAioms9Kjecc\n5ku86QgYEVXjUlQYbGM5Nl821nkKRUFxHt9A+7fE4TC3AkghgD1D2lcNCVsxt5yO\nxXccE/WbcnhPjWpsRMRNIkMO5WQnTIhkS7R02PbqCpIHG4GD8UqOjZoT9ccBaUdC\n6yg7N5COzltcU8qd1pPH+PD0uYsYq7EFG95wg9NWBasZfRSO6TUFiHTkMwv0/ehx\nnEUzHrEp0sUIGtpGUN6TzpHBeoWbNcMtdEBeHdmt5D1tI/2SqaBVMnFx7L1Fi38=\n=gl+y\n-----END PGP SIGNATURE-----\n", "payload": "tree 8459d23958e9dad9d429fa59d757a03b02c3f91d\nparent 5bc95de47d960f7a4082798237f438ac8d9f225b\nparent 60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547494312 +0100\ncommitter GitHub <noreply@github.com> 1547494312 +0100\n\nRollup merge of #57480 - Zoxc:query-fix, r=michaelwoerister\n\nClean up and fix a bug in query plumbing\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c001b12cc500358661415f51798bf1468d0e9b2", "html_url": "https://github.com/rust-lang/rust/commit/8c001b12cc500358661415f51798bf1468d0e9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c001b12cc500358661415f51798bf1468d0e9b2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc95de47d960f7a4082798237f438ac8d9f225b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc95de47d960f7a4082798237f438ac8d9f225b", "html_url": "https://github.com/rust-lang/rust/commit/5bc95de47d960f7a4082798237f438ac8d9f225b"}, {"sha": "60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "html_url": "https://github.com/rust-lang/rust/commit/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "562cd75a75ff4ac423027ac787ac136114f3bc06", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8c001b12cc500358661415f51798bf1468d0e9b2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c001b12cc500358661415f51798bf1468d0e9b2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=8c001b12cc500358661415f51798bf1468d0e9b2", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n             let null_dep_node = DepNode::new_no_params(::dep_graph::DepKind::Null);\n-            return self.force_query_with_job::<Q>(key, job, null_dep_node).map(|(v, _)| v);\n+            return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n         }\n \n         let dep_node = Q::to_dep_node(self, &key);\n@@ -436,20 +436,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if !dep_node.kind.is_input() {\n             if let Some(dep_node_index) = self.try_mark_green_and_read(&dep_node) {\n-                return self.load_from_disk_and_cache_in_memory::<Q>(key,\n-                                                                    job,\n-                                                                    dep_node_index,\n-                                                                    &dep_node)\n+                return Ok(self.load_from_disk_and_cache_in_memory::<Q>(\n+                    key,\n+                    job,\n+                    dep_node_index,\n+                    &dep_node\n+                ))\n             }\n         }\n \n-        match self.force_query_with_job::<Q>(key, job, dep_node) {\n-            Ok((result, dep_node_index)) => {\n-                self.dep_graph.read_index(dep_node_index);\n-                Ok(result)\n-            }\n-            Err(e) => Err(e)\n-        }\n+        let (result, dep_node_index) = self.force_query_with_job::<Q>(key, job, dep_node);\n+        self.dep_graph.read_index(dep_node_index);\n+        Ok(result)\n     }\n \n     fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'gcx>>(\n@@ -458,7 +456,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         job: JobOwner<'a, 'gcx, Q>,\n         dep_node_index: DepNodeIndex,\n         dep_node: &DepNode\n-    ) -> Result<Q::Value, Box<CycleError<'gcx>>>\n+    ) -> Q::Value\n     {\n         // Note this function can be called concurrently from the same query\n         // We must ensure that this is handled correctly\n@@ -523,7 +521,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok(result)\n+        result\n     }\n \n     #[inline(never)]\n@@ -563,7 +561,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         key: Q::Key,\n         job: JobOwner<'_, 'gcx, Q>,\n         dep_node: DepNode)\n-    -> Result<(Q::Value, DepNodeIndex), Box<CycleError<'gcx>>> {\n+    -> (Q::Value, DepNodeIndex) {\n         // If the following assertion triggers, it can have two reasons:\n         // 1. Something is wrong with DepNode creation, either here or\n         //    in DepGraph::try_mark_green()\n@@ -610,7 +608,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok((result, dep_node_index))\n+        (result, dep_node_index)\n     }\n \n     /// Ensure that either this query has all green inputs or been executed.\n@@ -657,11 +655,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Ensure that only one of them runs the query\n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n-            TryGetJob::JobCompleted(_) => return,\n+            TryGetJob::JobCompleted(result) => {\n+                if let Err(e) = result {\n+                    self.report_cycle(e).emit();\n+                }\n+                return\n+            }\n         };\n-        if let Err(e) = self.force_query_with_job::<Q>(key, job, dep_node) {\n-            self.report_cycle(e).emit();\n-        }\n+        self.force_query_with_job::<Q>(key, job, dep_node);\n     }\n \n     pub(super) fn try_get_query<Q: QueryDescription<'gcx>>("}]}