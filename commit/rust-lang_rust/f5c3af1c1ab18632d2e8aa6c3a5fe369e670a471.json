{"sha": "f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YzNhZjFjMWFiMTg2MzJkMmU4YWE2YzNhNWZlMzY5ZTY3MGE0NzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-08T04:29:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-08T04:29:47Z"}, "message": "Clean up unfinished portions of task tutorial", "tree": {"sha": "1988cde4f72b4f12a2c00091571ffe333d1ab8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1988cde4f72b4f12a2c00091571ffe333d1ab8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471", "html_url": "https://github.com/rust-lang/rust/commit/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7571b0607ee3920a2d29eee35fdf9e7e92442c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7571b0607ee3920a2d29eee35fdf9e7e92442c", "html_url": "https://github.com/rust-lang/rust/commit/0e7571b0607ee3920a2d29eee35fdf9e7e92442c"}], "stats": {"total": 11, "additions": 2, "deletions": 9}, "files": [{"sha": "1593184bce9f3f987805fdb8f593d0ce8efd38c8", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=f5c3af1c1ab18632d2e8aa6c3a5fe369e670a471", "patch": "@@ -36,6 +36,8 @@ explore some typical patterns in concurrent Rust code, and finally\n discuss some of the more exotic synchronization types in the standard\n library.\n \n+> ***Warning:*** This tutorial is incomplete\n+\n ## A note about the libraries\n \n While Rust's type system provides the building blocks needed for safe\n@@ -295,8 +297,6 @@ let result = ports.foldl(0, |accum, port| *accum + port.recv() );\n # fn some_expensive_computation(_i: uint) -> int { 42 }\n ~~~\n \n-# TODO\n-\n # Handling task failure\n \n Rust has a built-in mechanism for raising exceptions, written `fail`\n@@ -451,13 +451,6 @@ fail;\n # };\n ~~~\n \n-\n-# Unfinished notes\n-\n-## Actor patterns\n-\n-## Linearity, option dancing, owned closures\n-\n ## Creating a task with a bi-directional communication path\n \n A very common thing to do is to spawn a child task where the parent"}]}