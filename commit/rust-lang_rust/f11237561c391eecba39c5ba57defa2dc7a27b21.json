{"sha": "f11237561c391eecba39c5ba57defa2dc7a27b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMTIzNzU2MWMzOTFlZWNiYTM5YzViYTU3ZGVmYTJkYzdhMjdiMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T11:02:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T11:02:08Z"}, "message": "Cleanup imports", "tree": {"sha": "a18f4ec5a06c6f08492582cd2a1832bb2fc6bb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a18f4ec5a06c6f08492582cd2a1832bb2fc6bb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11237561c391eecba39c5ba57defa2dc7a27b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11237561c391eecba39c5ba57defa2dc7a27b21", "html_url": "https://github.com/rust-lang/rust/commit/f11237561c391eecba39c5ba57defa2dc7a27b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11237561c391eecba39c5ba57defa2dc7a27b21/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfffea6dc81f802e32d0312b958f20fa1b1d8425", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfffea6dc81f802e32d0312b958f20fa1b1d8425", "html_url": "https://github.com/rust-lang/rust/commit/cfffea6dc81f802e32d0312b958f20fa1b1d8425"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "36ea8d8bf0aa4aa3a11c6c86b7b3a3520101f4f8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -12,24 +12,21 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, HasModule, ImplId, LocalEnumVariantId, LocalImportId, LocalModuleId,\n-    LocalStructFieldId, Lookup, ModuleId, UnionId,\n+    AstItemDef, ConstId, ContainerId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n+    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{self, AsName},\n-    AstId,\n+    AstId, MacroDefId,\n };\n use ra_db::{CrateId, Edition, FileId, FilePosition};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n-    ids::{\n-        AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n-        TypeAliasId,\n-    },\n     ty::{InferenceResult, Namespace, TraitRef},\n     Either, HasSource, Name, Source, Ty,\n };"}, {"sha": "59cda2e896d21ca3b6332ce48221024815eb6680", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -1,12 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir_def::{HasChildSource, HasSource as _, Lookup, VariantId};\n+use hir_def::{AstItemDef, HasChildSource, HasSource as _, Lookup, VariantId};\n use hir_expand::either::Either;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n-    ids::AstItemDef,\n     Const, Enum, EnumVariant, FieldSource, Function, HasBody, Import, MacroDef, Module,\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "7a2810f71aff1d227b197fdc908bfd666dfecf90", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -22,9 +22,10 @@\n \n use std::fmt;\n \n+use hir_expand::HirFileId;\n use ra_db::{CrateId, FileId};\n \n-use crate::{db::HirDatabase, Crate, HirFileId, Module, Name};\n+use crate::{db::HirDatabase, Crate, Module, Name};\n \n impl Crate {\n     pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {"}, {"sha": "dafacba70c373f99106d9dd647ea89994437248c", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -2,9 +2,10 @@\n \n use std::any::Any;\n \n+use hir_expand::HirFileId;\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n \n-use crate::{db::AstDatabase, HirFileId, Name, Source};\n+use crate::{db::AstDatabase, Name, Source};\n \n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};"}, {"sha": "c3c3b05ed3f551e1896b331769cd7f9b59d3e7c3", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n+use hir_def::{AstItemDef, LocationCtx, ModuleId, StructId, StructOrUnionId, UnionId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -9,7 +9,6 @@ use ra_syntax::{\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    ids::{AstItemDef, LocationCtx},\n     AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n     ImplBlock, Local, MacroDef, Module, ModuleDef, ModuleSource, Source, Static, Struct,\n     StructField, Trait, TypeAlias, Union, VariantDef,"}, {"sha": "145837f7fb648ed3f714e157dba9efa98e97b189", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -7,12 +7,6 @@\n \n use ra_db::salsa;\n \n-pub use hir_def::{\n-    AstItemDef, ConstId, EnumId, FunctionId, ItemLoc, LocationCtx, StaticId, StructId, TraitId,\n-    TypeAliasId,\n-};\n-pub use hir_expand::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, MacroFileKind};\n-\n macro_rules! impl_intern_key {\n     ($name:ident) => {\n         impl salsa::InternKey for $name {"}, {"sha": "239798bcc24287a733940a98b4ff0c98e9ff1b80", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -58,7 +58,6 @@ pub use crate::{\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n-    ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n         display::HirDisplay,\n@@ -73,4 +72,6 @@ pub use hir_def::{\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };\n-pub use hir_expand::{either::Either, name::Name, Source};\n+pub use hir_expand::{\n+    either::Either, name::Name, HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Source,\n+};"}, {"sha": "0a836c9130d8d199f6e2b6470226e100580c9a50", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11237561c391eecba39c5ba57defa2dc7a27b21/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f11237561c391eecba39c5ba57defa2dc7a27b21", "patch": "@@ -11,9 +11,11 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    DefWithBodyId,\n+    DefWithBodyId, LocationCtx,\n+};\n+use hir_expand::{\n+    name::AsName, AstId, HirFileId, MacroCallId, MacroCallLoc, MacroFileKind, Source,\n };\n-use hir_expand::{name::AsName, AstId, MacroCallId, MacroCallLoc, MacroFileKind, Source};\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n@@ -24,11 +26,10 @@ use ra_syntax::{\n use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n-    ids::LocationCtx,\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, ScopeDef, Static,\n-    Struct, Trait, Ty, TypeAlias,\n+    GenericParam, HasBody, Local, MacroDef, Module, Name, Path, ScopeDef, Static, Struct, Trait,\n+    Ty, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -544,7 +545,7 @@ fn adjust(\n }\n \n /// Given a `ast::MacroCall`, return what `MacroKindFile` it belongs to.\n-/// FIXME: Not completed  \n+/// FIXME: Not completed\n fn to_macro_file_kind(macro_call: &ast::MacroCall) -> MacroFileKind {\n     let syn = macro_call.syntax();\n     let parent = match syn.parent() {"}]}