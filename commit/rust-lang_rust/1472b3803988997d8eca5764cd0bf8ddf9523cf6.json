{"sha": "1472b3803988997d8eca5764cd0bf8ddf9523cf6", "node_id": "C_kwDOAAsO6NoAKDE0NzJiMzgwMzk4ODk5N2Q4ZWNhNTc2NGNkMGJmOGRkZjk1MjNjZjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T00:46:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T05:22:52Z"}, "message": "Remove unnecessary binder from get_impl_future_output_ty", "tree": {"sha": "fd76c9d2d6145bd38945413e1dff23408b2f0257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd76c9d2d6145bd38945413e1dff23408b2f0257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1472b3803988997d8eca5764cd0bf8ddf9523cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1472b3803988997d8eca5764cd0bf8ddf9523cf6", "html_url": "https://github.com/rust-lang/rust/commit/1472b3803988997d8eca5764cd0bf8ddf9523cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1472b3803988997d8eca5764cd0bf8ddf9523cf6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff003becd8b6bf803202e958623031274ad69c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff003becd8b6bf803202e958623031274ad69c9", "html_url": "https://github.com/rust-lang/rust/commit/aff003becd8b6bf803202e958623031274ad69c9"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "d7f875b2857752d228cdccff34bedcb41d9b9d81", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=1472b3803988997d8eca5764cd0bf8ddf9523cf6", "patch": "@@ -2333,12 +2333,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base: &'tcx hir::Expr<'tcx>,\n         ty: Ty<'tcx>,\n     ) {\n-        let output_ty = match self.get_impl_future_output_ty(ty) {\n-            Some(output_ty) => self.resolve_vars_if_possible(output_ty),\n-            _ => return,\n-        };\n+        let Some(output_ty) = self.get_impl_future_output_ty(ty) else { return; };\n         let mut add_label = true;\n-        if let ty::Adt(def, _) = output_ty.skip_binder().kind() {\n+        if let ty::Adt(def, _) = output_ty.kind() {\n             // no field access on enum type\n             if !def.is_enum() {\n                 if def"}, {"sha": "c6a7a9fd2635e6c401714b51b1cb204038132caf", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=1472b3803988997d8eca5764cd0bf8ddf9523cf6", "patch": "@@ -925,15 +925,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n                 hir::IsAsync::Async => {\n                     let infcx = self.tcx.infer_ctxt().build();\n-                    infcx\n-                        .get_impl_future_output_ty(ty)\n-                        .unwrap_or_else(|| {\n-                            span_bug!(\n-                                fn_decl.output.span(),\n-                                \"failed to get output type of async function\"\n-                            )\n-                        })\n-                        .skip_binder()\n+                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                        span_bug!(\n+                            fn_decl.output.span(),\n+                            \"failed to get output type of async function\"\n+                        )\n+                    })\n                 }\n                 hir::IsAsync::NotAsync => ty,\n             };"}, {"sha": "f34f826ba5f9c39302db6720186176bb095a8a82", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=1472b3803988997d8eca5764cd0bf8ddf9523cf6", "patch": "@@ -1960,7 +1960,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n     ) {\n         let output_ty = match self.get_impl_future_output_ty(ty) {\n-            Some(output_ty) => self.resolve_vars_if_possible(output_ty).skip_binder(),\n+            Some(output_ty) => self.resolve_vars_if_possible(output_ty),\n             _ => return,\n         };\n         let method_exists = self.method_exists(item_name, output_ty, call.hir_id, true);"}, {"sha": "6b6be7359a599ef339de8665c1f280a2a3bdfa0c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1472b3803988997d8eca5764cd0bf8ddf9523cf6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1472b3803988997d8eca5764cd0bf8ddf9523cf6", "patch": "@@ -74,7 +74,7 @@ use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n-    self, error::TypeError, Binder, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n+    self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n     TypeVisitable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n@@ -339,16 +339,15 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n }\n \n impl<'tcx> InferCtxt<'tcx> {\n-    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Binder<'tcx, Ty<'tcx>>> {\n-        if let ty::Opaque(def_id, substs) = ty.kind() {\n-            let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n-            // Future::Output\n-            let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n+    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+        let ty::Opaque(def_id, substs) = *ty.kind() else { return None; };\n \n-            let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n+        let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n+        let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-            for (predicate, _) in bounds.subst_iter_copied(self.tcx, substs) {\n-                let output = predicate\n+        self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n+            |(predicate, _)| {\n+                predicate\n                     .kind()\n                     .map_bound(|kind| match kind {\n                         ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate))\n@@ -358,14 +357,10 @@ impl<'tcx> InferCtxt<'tcx> {\n                         }\n                         _ => None,\n                     })\n-                    .transpose();\n-                if output.is_some() {\n-                    // We don't account for multiple `Future::Output = Ty` constraints.\n-                    return output;\n-                }\n-            }\n-        }\n-        None\n+                    .no_bound_vars()\n+                    .flatten()\n+            },\n+        )\n     }\n }\n \n@@ -2055,8 +2050,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n \n         match (\n-            self.get_impl_future_output_ty(exp_found.expected).map(Binder::skip_binder),\n-            self.get_impl_future_output_ty(exp_found.found).map(Binder::skip_binder),\n+            self.get_impl_future_output_ty(exp_found.expected),\n+            self.get_impl_future_output_ty(exp_found.found),\n         ) {\n             (Some(exp), Some(found)) if self.same_type_modulo_infer(exp, found) => match cause\n                 .code()"}]}