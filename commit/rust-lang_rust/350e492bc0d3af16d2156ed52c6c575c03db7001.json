{"sha": "350e492bc0d3af16d2156ed52c6c575c03db7001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MGU0OTJiYzBkM2FmMTZkMjE1NmVkNTJjNmM1NzVjMDNkYjcwMDE=", "commit": {"author": {"name": "Will Hakes", "email": "info@cwilliamhakes.com", "date": "2019-04-06T02:30:45Z"}, "committer": {"name": "Will Hakes", "email": "info@cwilliamhakes.com", "date": "2019-04-06T02:30:45Z"}, "message": "Change `copytest` parameter name from `y` to `sign`", "tree": {"sha": "56b12a2bc7285ffb4c17a90047c5c898f7ed38e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b12a2bc7285ffb4c17a90047c5c898f7ed38e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/350e492bc0d3af16d2156ed52c6c575c03db7001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/350e492bc0d3af16d2156ed52c6c575c03db7001", "html_url": "https://github.com/rust-lang/rust/commit/350e492bc0d3af16d2156ed52c6c575c03db7001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/350e492bc0d3af16d2156ed52c6c575c03db7001/comments", "author": {"login": "cwhakes", "id": 30961214, "node_id": "MDQ6VXNlcjMwOTYxMjE0", "avatar_url": "https://avatars.githubusercontent.com/u/30961214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhakes", "html_url": "https://github.com/cwhakes", "followers_url": "https://api.github.com/users/cwhakes/followers", "following_url": "https://api.github.com/users/cwhakes/following{/other_user}", "gists_url": "https://api.github.com/users/cwhakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhakes/subscriptions", "organizations_url": "https://api.github.com/users/cwhakes/orgs", "repos_url": "https://api.github.com/users/cwhakes/repos", "events_url": "https://api.github.com/users/cwhakes/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhakes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cwhakes", "id": 30961214, "node_id": "MDQ6VXNlcjMwOTYxMjE0", "avatar_url": "https://avatars.githubusercontent.com/u/30961214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhakes", "html_url": "https://github.com/cwhakes", "followers_url": "https://api.github.com/users/cwhakes/followers", "following_url": "https://api.github.com/users/cwhakes/following{/other_user}", "gists_url": "https://api.github.com/users/cwhakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhakes/subscriptions", "organizations_url": "https://api.github.com/users/cwhakes/orgs", "repos_url": "https://api.github.com/users/cwhakes/repos", "events_url": "https://api.github.com/users/cwhakes/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhakes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b4554e77ef32a97060b1bfffd1f621bf15bb88", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b4554e77ef32a97060b1bfffd1f621bf15bb88", "html_url": "https://github.com/rust-lang/rust/commit/05b4554e77ef32a97060b1bfffd1f621bf15bb88"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "133540ed6b9ca8cc74a19daad483866c12b89269", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/350e492bc0d3af16d2156ed52c6c575c03db7001/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350e492bc0d3af16d2156ed52c6c575c03db7001/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=350e492bc0d3af16d2156ed52c6c575c03db7001", "patch": "@@ -193,11 +193,11 @@ impl f32 {\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n-    /// `y`.\n+    /// `sign`.\n     ///\n-    /// Equal to `self` if the sign of `self` and `y` are the same, otherwise\n+    /// Equal to `self` if the sign of `self` and `sign` are the same, otherwise\n     /// equal to `-self`. If `self` is a `NAN`, then a `NAN` with the sign of\n-    /// `y` is returned.\n+    /// `sign` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -216,8 +216,8 @@ impl f32 {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n-    pub fn copysign(self, y: f32) -> f32 {\n-        unsafe { intrinsics::copysignf32(self, y) }\n+    pub fn copysign(self, sign: f32) -> f32 {\n+        unsafe { intrinsics::copysignf32(self, sign) }\n     }\n \n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding"}, {"sha": "87467aeed8b203bb147397ea2a389f779e338c29", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/350e492bc0d3af16d2156ed52c6c575c03db7001/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350e492bc0d3af16d2156ed52c6c575c03db7001/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=350e492bc0d3af16d2156ed52c6c575c03db7001", "patch": "@@ -171,11 +171,11 @@ impl f64 {\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n-    /// `y`.\n+    /// `sign`.\n     ///\n-    /// Equal to `self` if the sign of `self` and `y` are the same, otherwise\n+    /// Equal to `self` if the sign of `self` and `sign` are the same, otherwise\n     /// equal to `-self`. If `self` is a `NAN`, then a `NAN` with the sign of\n-    /// `y` is returned.\n+    /// `sign` is returned.\n     ///\n     /// # Examples\n     ///\n@@ -194,8 +194,8 @@ impl f64 {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n-    pub fn copysign(self, y: f64) -> f64 {\n-        unsafe { intrinsics::copysignf64(self, y) }\n+    pub fn copysign(self, sign: f64) -> f64 {\n+        unsafe { intrinsics::copysignf64(self, sign) }\n     }\n \n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding"}]}