{"sha": "de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDQ3ZWI5ZjIwY2JjMmEzMzBkNjA5M2E0YWM4YjVlYjczMGIxOTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-13T22:03:32Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:21Z"}, "message": "Add tests for assoc. const defaults", "tree": {"sha": "93ef794f8e7db0e365a2559dc5dcfb575ca1831b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ef794f8e7db0e365a2559dc5dcfb575ca1831b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "html_url": "https://github.com/rust-lang/rust/commit/de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37686edb852f857b0356c6ec41b1c46ed83e9582", "url": "https://api.github.com/repos/rust-lang/rust/commits/37686edb852f857b0356c6ec41b1c46ed83e9582", "html_url": "https://github.com/rust-lang/rust/commit/37686edb852f857b0356c6ec41b1c46ed83e9582"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "0f54d67574d363cf7a48231eb84f22c69a3bf287", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.rs?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,17 @@\n+// compile-fail\n+\n+// Cyclic assoc. const defaults don't error unless *used*\n+trait Tr {\n+    const A: u8 = Self::B;\n+    //~^ ERROR cycle detected when const-evaluating `Tr::A`\n+\n+    const B: u8 = Self::A;\n+}\n+\n+// This impl is *allowed* unless its assoc. consts are used\n+impl Tr for () {}\n+\n+fn main() {\n+    // This triggers the cycle error\n+    assert_eq!(<() as Tr>::A, 0);\n+}"}, {"sha": "4e59519909137856fa3f1d9794900aa632275954", "filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-fail.stderr?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,21 @@\n+error[E0391]: cycle detected when const-evaluating `Tr::A`\n+  --> $DIR/defaults-cyclic-fail.rs:5:19\n+   |\n+LL |     const A: u8 = Self::B;\n+   |                   ^^^^^^^\n+   |\n+note: ...which requires const-evaluating `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A;\n+   |                   ^^^^^^^\n+   = note: ...which again requires const-evaluating `Tr::A`, completing the cycle\n+note: cycle used when processing `main`\n+  --> $DIR/defaults-cyclic-fail.rs:16:16\n+   |\n+LL |     assert_eq!(<() as Tr>::A, 0);\n+   |                ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "1de733cfc37abf1e00e1e159f2a3f592b1e352ec", "filename": "src/test/ui/associated-const/defaults-cyclic-pass.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+\n+// Cyclic assoc. const defaults don't error unless *used*\n+trait Tr {\n+    const A: u8 = Self::B;\n+    const B: u8 = Self::A;\n+}\n+\n+// This impl is *allowed* unless its assoc. consts are used\n+impl Tr for () {}\n+\n+// Overriding either constant breaks the cycle\n+impl Tr for u8 {\n+    const A: u8 = 42;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 100;\n+    const B: u8 = 123;\n+}\n+\n+fn main() {\n+    assert_eq!(<u8 as Tr>::A, 42);\n+    assert_eq!(<u8 as Tr>::B, 42);\n+\n+    assert_eq!(<u16 as Tr>::A, 0);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 100);\n+    assert_eq!(<u32 as Tr>::B, 123);\n+}"}, {"sha": "27435ef34a0e9f77cb2ae32585b4fe1447241ce4", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.rs?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,44 @@\n+// compile-fail\n+\n+trait Tr {\n+    const A: u8 = 255;\n+\n+    // This should not be a constant evaluation error (overflow). The value of\n+    // `Self::A` must not be assumed to hold inside the trait.\n+    const B: u8 = Self::A + 1;\n+    //~^ ERROR any use of this value will cause an error\n+}\n+\n+// An impl that doesn't override any constant will NOT cause a const eval error\n+// just because it's defined, but only if the bad constant is used anywhere.\n+// This matches the behavior without defaults.\n+impl Tr for () {}\n+\n+// An impl that overrides either constant with a suitable value will be fine.\n+impl Tr for u8 {\n+    const A: u8 = 254;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 254;\n+    const B: u8 = 0;\n+}\n+\n+fn main() {\n+    assert_eq!(<() as Tr>::A, 255);\n+    assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+    //~^ ERROR evaluation of constant expression failed\n+\n+    assert_eq!(<u8 as Tr>::A, 254);\n+    assert_eq!(<u8 as Tr>::B, 255);\n+\n+    assert_eq!(<u16 as Tr>::A, 255);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 254);\n+    assert_eq!(<u32 as Tr>::B, 0);\n+}"}, {"sha": "aac1765c4b2d8b6d533cdf1be022f2c1bea335ed", "filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-fail.stderr?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,23 @@\n+error: any use of this value will cause an error\n+  --> $DIR/defaults-not-assumed-fail.rs:8:19\n+   |\n+LL |     const B: u8 = Self::A + 1;\n+   |     --------------^^^^^^^^^^^-\n+   |                   |\n+   |                   attempt to add with overflow\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+   |\n+LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n+   |     ^^^^^^^^^^^-------------^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c08e05c8a3073c35d748cf07a3cc02dfb6c931a1", "filename": "src/test/ui/associated-const/defaults-not-assumed-pass.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de447eb9f20cbc2a330d6093a4ac8b5eb730b193/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-not-assumed-pass.rs?ref=de447eb9f20cbc2a330d6093a4ac8b5eb730b193", "patch": "@@ -0,0 +1,42 @@\n+// run-pass\n+\n+trait Tr {\n+    const A: u8 = 255;\n+\n+    // This should not be a constant evaluation error (overflow). The value of\n+    // `Self::A` must not be assumed to hold inside the trait.\n+    const B: u8 = Self::A + 1;\n+}\n+\n+// An impl that doesn't override any constant will NOT cause a const eval error\n+// just because it's defined, but only if the bad constant is used anywhere.\n+// This matches the behavior without defaults.\n+impl Tr for () {}\n+\n+// An impl that overrides either constant with a suitable value will be fine.\n+impl Tr for u8 {\n+    const A: u8 = 254;\n+}\n+\n+impl Tr for u16 {\n+    const B: u8 = 0;\n+}\n+\n+impl Tr for u32 {\n+    const A: u8 = 254;\n+    const B: u8 = 0;\n+}\n+\n+fn main() {\n+    assert_eq!(<() as Tr>::A, 255);\n+    //assert_eq!(<() as Tr>::B, 0);  // using this is an error\n+\n+    assert_eq!(<u8 as Tr>::A, 254);\n+    assert_eq!(<u8 as Tr>::B, 255);\n+\n+    assert_eq!(<u16 as Tr>::A, 255);\n+    assert_eq!(<u16 as Tr>::B, 0);\n+\n+    assert_eq!(<u32 as Tr>::A, 254);\n+    assert_eq!(<u32 as Tr>::B, 0);\n+}"}]}