{"sha": "b799c1eeb5a86392664ba30d3309382b46ad4ad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTljMWVlYjVhODYzOTI2NjRiYTMwZDMzMDkzODJiNDZhZDRhZDc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-29T19:46:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-29T19:46:47Z"}, "message": "Merge pull request #2759 from devonhollowood/transmute-same-ptr-ptr\n\nDon't lint lifetime-only transmutes", "tree": {"sha": "d78dcc02e02d79f50dae54e44b59a6c49827798a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78dcc02e02d79f50dae54e44b59a6c49827798a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b799c1eeb5a86392664ba30d3309382b46ad4ad7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbDa4nCRBK7hj4Ov3rIwAAdHIIAJbltbPfw4CNPkltDDEoKrJ1\n3uSPccDqZ28dMONBbQHZEoLuJ4fuGAg1Xma3FIAR/pUHi5/e1Ch233tk2ap9bANN\nGk3zheSf8c+RrqUP6QTLo5Oyq/a+GPGjcrt8Q3LKtiGQELwDtE70+jT0QXa0zHZ3\n1Hv7k+NMrrJoo96h9QxRRZ78ZnMoaHFKaCT+Jdvp48pVj0mP5U9RuXe5QeSURRSW\nz/SDH64/0Cf8J6gZCXNPWLObq8PdRNPjw5tiQ+kH0eI3phQ1uaw/LyN2/0gGZovv\nza6Pcoo4bFAnOyAtK0cf0j+HJEg//30eNYOLLTn5ZMVDPjXRYwV1xBaqPFPFD44=\n=UkRG\n-----END PGP SIGNATURE-----\n", "payload": "tree d78dcc02e02d79f50dae54e44b59a6c49827798a\nparent 400aab92325de2aa65a2c724c3b5f4337bca11c0\nparent 9118cd633e177be88a32f2017c98af71fe2080bf\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1527623207 +0200\ncommitter GitHub <noreply@github.com> 1527623207 +0200\n\nMerge pull request #2759 from devonhollowood/transmute-same-ptr-ptr\n\nDon't lint lifetime-only transmutes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b799c1eeb5a86392664ba30d3309382b46ad4ad7", "html_url": "https://github.com/rust-lang/rust/commit/b799c1eeb5a86392664ba30d3309382b46ad4ad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b799c1eeb5a86392664ba30d3309382b46ad4ad7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400aab92325de2aa65a2c724c3b5f4337bca11c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/400aab92325de2aa65a2c724c3b5f4337bca11c0", "html_url": "https://github.com/rust-lang/rust/commit/400aab92325de2aa65a2c724c3b5f4337bca11c0"}, {"sha": "9118cd633e177be88a32f2017c98af71fe2080bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9118cd633e177be88a32f2017c98af71fe2080bf", "html_url": "https://github.com/rust-lang/rust/commit/9118cd633e177be88a32f2017c98af71fe2080bf"}], "stats": {"total": 107, "additions": 79, "deletions": 28}, "files": [{"sha": "21debc347d05116e224d465240b35e7cbd319cab", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b799c1eeb5a86392664ba30d3309382b46ad4ad7/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799c1eeb5a86392664ba30d3309382b46ad4ad7/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=b799c1eeb5a86392664ba30d3309382b46ad4ad7", "patch": "@@ -192,7 +192,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     pub TRANSMUTE_PTR_TO_PTR,\n     complexity,\n-    \"transmutes from a pointer to a reference type\"\n+    \"transmutes from a pointer to a pointer / a reference to a reference\"\n }\n \n pub struct Transmute;\n@@ -363,23 +363,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             }\n                                         )\n                                     } else {\n-                                        span_lint_and_then(\n-                                            cx,\n-                                            TRANSMUTE_PTR_TO_PTR,\n-                                            e.span,\n-                                            \"transmute from a reference to a reference\",\n-                                            |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                                let ty_from_and_mut = ty::TypeAndMut { ty: ty_from, mutbl: from_mutbl };\n-                                                let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: to_mutbl };\n-                                                let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(ty_from_and_mut)).as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                                let sugg = if to_mutbl == Mutability::MutMutable {\n-                                                    sugg_paren.mut_addr_deref()\n-                                                } else {\n-                                                    sugg_paren.addr_deref()\n-                                                };\n-                                                db.span_suggestion(e.span, \"try\", sugg.to_string());\n-                                            },\n-                                        )\n+                                        if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n+                                            span_lint_and_then(\n+                                                cx,\n+                                                TRANSMUTE_PTR_TO_PTR,\n+                                                e.span,\n+                                                \"transmute from a reference to a reference\",\n+                                                |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                                    let ty_from_and_mut = ty::TypeAndMut { ty: ty_from, mutbl: from_mutbl };\n+                                                    let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: to_mutbl };\n+                                                    let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(ty_from_and_mut)).as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n+                                                    let sugg = if to_mutbl == Mutability::MutMutable {\n+                                                        sugg_paren.mut_addr_deref()\n+                                                    } else {\n+                                                        sugg_paren.addr_deref()\n+                                                    };\n+                                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                                },\n+                                            )\n+                                        }\n                                     }\n                                 }\n                             },"}, {"sha": "54e1734e1415b46bc4aef6f4f002db83bff681f0", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b799c1eeb5a86392664ba30d3309382b46ad4ad7/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799c1eeb5a86392664ba30d3309382b46ad4ad7/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=b799c1eeb5a86392664ba30d3309382b46ad4ad7", "patch": "@@ -140,6 +140,29 @@ fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n }\n \n+// Make sure we can modify lifetimes, which is one of the recommended uses\n+// of transmute\n+\n+// Make sure we can do static lifetime transmutes\n+#[warn(transmute_ptr_to_ptr)]\n+unsafe fn transmute_lifetime_to_static<'a, T>(t: &'a T) -> &'static T {\n+    std::mem::transmute::<&'a T, &'static T>(t)\n+}\n+\n+// Make sure we can do non-static lifetime transmutes\n+#[warn(transmute_ptr_to_ptr)]\n+unsafe fn transmute_lifetime<'a, 'b, T>(t: &'a T, u: &'b T) -> &'b T {\n+    std::mem::transmute::<&'a T, &'b T>(t)\n+}\n+\n+struct LifetimeParam<'a> {\n+    s: &'a str,\n+}\n+\n+struct GenericParam<T> {\n+    t: T,\n+}\n+\n #[warn(transmute_ptr_to_ptr)]\n fn transmute_ptr_to_ptr() {\n     let ptr = &1u32 as *const u32;\n@@ -150,13 +173,27 @@ fn transmute_ptr_to_ptr() {\n         let _: *mut f32 = std::mem::transmute(mut_ptr);\n         // ref-ref transmutes; bad\n         let _: &f32 = std::mem::transmute(&1u32);\n+        let _: &f64 = std::mem::transmute(&1f32);\n+        // ^ this test is here because both f32 and f64 are the same TypeVariant, but they are not\n+        // the same type\n         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+        let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n     }\n-    // These should be fine\n+\n+    // these are recommendations for solving the above; if these lint we need to update\n+    // those suggestions\n     let _ = ptr as *const f32;\n     let _ = mut_ptr as *mut f32;\n     let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n     let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n+\n+    // transmute internal lifetimes, should not lint\n+    let s = \"hello world\".to_owned();\n+    let lp = LifetimeParam { s: &s };\n+    let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n+    let _: &GenericParam<&LifetimeParam<'static>> = unsafe {\n+        std::mem::transmute(&GenericParam { t: &lp})\n+    };\n }\n \n fn main() { }"}, {"sha": "abed5065c0a14dd1e992594d0121e15c04b7a3ef", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b799c1eeb5a86392664ba30d3309382b46ad4ad7/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b799c1eeb5a86392664ba30d3309382b46ad4ad7/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=b799c1eeb5a86392664ba30d3309382b46ad4ad7", "patch": "@@ -205,30 +205,42 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a pointer to a pointer\n-   --> $DIR/transmute.rs:149:29\n+   --> $DIR/transmute.rs:172:29\n     |\n-149 |         let _: *const f32 = std::mem::transmute(ptr);\n+172 |         let _: *const f32 = std::mem::transmute(ptr);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n     |\n     = note: `-D transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-   --> $DIR/transmute.rs:150:27\n+   --> $DIR/transmute.rs:173:27\n     |\n-150 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n+173 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n \n error: transmute from a reference to a reference\n-   --> $DIR/transmute.rs:152:23\n+   --> $DIR/transmute.rs:175:23\n     |\n-152 |         let _: &f32 = std::mem::transmute(&1u32);\n+175 |         let _: &f32 = std::mem::transmute(&1u32);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n \n error: transmute from a reference to a reference\n-   --> $DIR/transmute.rs:153:27\n+   --> $DIR/transmute.rs:176:23\n     |\n-153 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+176 |         let _: &f64 = std::mem::transmute(&1f32);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:179:27\n+    |\n+179 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n \n-error: aborting due to 36 previous errors\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:180:37\n+    |\n+180 |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n+    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n+\n+error: aborting due to 38 previous errors\n "}]}