{"sha": "319d778ed306d0b3c35af79c47c702dbdebf6d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWQ3NzhlZDMwNmQwYjNjMzVhZjc5YzQ3YzcwMmRiZGViZjZkMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-28T18:48:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-03T22:41:00Z"}, "message": "Restructure AST so that the associated type definition carries\nbounds like any other \"type parameter\".", "tree": {"sha": "b1861eb5f0ab01a403c3fc93deea9244a72aded2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1861eb5f0ab01a403c3fc93deea9244a72aded2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319d778ed306d0b3c35af79c47c702dbdebf6d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319d778ed306d0b3c35af79c47c702dbdebf6d09", "html_url": "https://github.com/rust-lang/rust/commit/319d778ed306d0b3c35af79c47c702dbdebf6d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319d778ed306d0b3c35af79c47c702dbdebf6d09/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b81c0ebb45d36198fa8a78dcdcb8144e4bb06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b81c0ebb45d36198fa8a78dcdcb8144e4bb06c", "html_url": "https://github.com/rust-lang/rust/commit/01b81c0ebb45d36198fa8a78dcdcb8144e4bb06c"}], "stats": {"total": 203, "additions": 105, "deletions": 98}, "files": [{"sha": "be4139e65ba81de1793dc23e858ed88112a4bb7d", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -81,7 +81,7 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n         e::IIForeignRef(i) => i.id,\n         e::IITraitItemRef(_, &ast::ProvidedMethod(ref m)) => m.id,\n         e::IITraitItemRef(_, &ast::RequiredMethod(ref m)) => m.id,\n-        e::IITraitItemRef(_, &ast::TypeTraitItem(ref ti)) => ti.id,\n+        e::IITraitItemRef(_, &ast::TypeTraitItem(ref ti)) => ti.ty_param.id,\n         e::IIImplItemRef(_, &ast::MethodImplItem(ref m)) => m.id,\n         e::IIImplItemRef(_, &ast::TypeImplItem(ref ti)) => ti.id,\n     };\n@@ -156,7 +156,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n                 match *ti {\n                     ast::ProvidedMethod(ref m) => m.pe_ident(),\n                     ast::RequiredMethod(ref ty_m) => ty_m.ident,\n-                    ast::TypeTraitItem(ref ti) => ti.ident,\n+                    ast::TypeTraitItem(ref ti) => ti.ty_param.ident,\n                 }\n             },\n             ast::IIImplItem(_, ref m) => {"}, {"sha": "4fbffa2a819d55f9b4a74b751d05f73293d6d3c2", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -296,8 +296,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                             self.exported_items.insert(m.id);\n                         }\n                         ast::TypeTraitItem(ref t) => {\n-                            debug!(\"typedef {}\", t.id);\n-                            self.exported_items.insert(t.id);\n+                            debug!(\"typedef {}\", t.ty_param.id);\n+                            self.exported_items.insert(t.ty_param.id);\n                         }\n                     }\n                 }"}, {"sha": "d1345efaf90d8a56db24722b975132afdff8b05a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -1559,19 +1559,19 @@ impl<'a> Resolver<'a> {\n                         }\n                         ast::TypeTraitItem(ref associated_type) => {\n                             let def = DefAssociatedTy(local_def(\n-                                    associated_type.id));\n+                                    associated_type.ty_param.id));\n \n                             let name_bindings =\n-                                self.add_child(associated_type.ident.name,\n+                                self.add_child(associated_type.ty_param.ident.name,\n                                                module_parent.clone(),\n                                                ForbidDuplicateTypesAndValues,\n-                                               associated_type.span);\n+                                               associated_type.ty_param.span);\n                             // NB: not IMPORTABLE\n                             name_bindings.define_type(def,\n-                                                      associated_type.span,\n+                                                      associated_type.ty_param.span,\n                                                       PUBLIC);\n \n-                            (associated_type.ident.name, TypeTraitItemKind)\n+                            (associated_type.ty_param.ident.name, TypeTraitItemKind)\n                         }\n                     };\n \n@@ -4218,7 +4218,7 @@ impl<'a> Resolver<'a> {\n                                             impl_items.as_slice());\n             }\n \n-            ItemTrait(ref generics, ref unbound, ref bounds, ref methods) => {\n+            ItemTrait(ref generics, ref unbound, ref bounds, ref trait_items) => {\n                 // Create a new rib for the self type.\n                 let mut self_type_rib = Rib::new(ItemRibKind);\n \n@@ -4246,13 +4246,13 @@ impl<'a> Resolver<'a> {\n                         _ => {}\n                     }\n \n-                    for method in (*methods).iter() {\n-                        // Create a new rib for the method-specific type\n+                    for trait_item in (*trait_items).iter() {\n+                        // Create a new rib for the trait_item-specific type\n                         // parameters.\n                         //\n                         // FIXME #4951: Do we need a node ID here?\n \n-                        match *method {\n+                        match *trait_item {\n                           ast::RequiredMethod(ref ty_m) => {\n                             this.with_type_parameter_rib\n                                 (HasTypeParameters(&ty_m.generics,\n@@ -4287,8 +4287,9 @@ impl<'a> Resolver<'a> {\n                                                                 ProvidedMethod(m.id)),\n                                                   &**m)\n                           }\n-                          ast::TypeTraitItem(_) => {\n-                              visit::walk_trait_item(this, method);\n+                          ast::TypeTraitItem(ref data) => {\n+                              this.resolve_type_parameter(&data.ty_param);\n+                              visit::walk_trait_item(this, trait_item);\n                           }\n                         }\n                     }\n@@ -4477,20 +4478,25 @@ impl<'a> Resolver<'a> {\n     fn resolve_type_parameters(&mut self,\n                                type_parameters: &OwnedSlice<TyParam>) {\n         for type_parameter in type_parameters.iter() {\n-            for bound in type_parameter.bounds.iter() {\n-                self.resolve_type_parameter_bound(type_parameter.id, bound,\n-                                                  TraitBoundingTypeParameter);\n-            }\n-            match &type_parameter.unbound {\n-                &Some(ref unbound) =>\n-                    self.resolve_type_parameter_bound(\n-                        type_parameter.id, unbound, TraitBoundingTypeParameter),\n-                &None => {}\n-            }\n-            match type_parameter.default {\n-                Some(ref ty) => self.resolve_type(&**ty),\n-                None => {}\n-            }\n+            self.resolve_type_parameter(type_parameter);\n+        }\n+    }\n+\n+    fn resolve_type_parameter(&mut self,\n+                              type_parameter: &TyParam) {\n+        for bound in type_parameter.bounds.iter() {\n+            self.resolve_type_parameter_bound(type_parameter.id, bound,\n+                                              TraitBoundingTypeParameter);\n+        }\n+        match &type_parameter.unbound {\n+            &Some(ref unbound) =>\n+                self.resolve_type_parameter_bound(\n+                    type_parameter.id, unbound, TraitBoundingTypeParameter),\n+            &None => {}\n+        }\n+        match type_parameter.default {\n+            Some(ref ty) => self.resolve_type(&**ty),\n+            None => {}\n         }\n     }\n \n@@ -4577,14 +4583,14 @@ impl<'a> Resolver<'a> {\n                         self.resolve_error(trait_reference.path.span,\n                                            format!(\"`{}` is not a trait\",\n                                                    self.path_names_to_string(\n-                                                        &trait_reference.path)));\n+                                                       &trait_reference.path)));\n \n                         // If it's a typedef, give a note\n                         match def {\n                             DefTy(..) => {\n                                 self.session.span_note(\n-                                                trait_reference.path.span,\n-                                                format!(\"`type` aliases cannot \\\n+                                    trait_reference.path.span,\n+                                    format!(\"`type` aliases cannot \\\n                                                         be used for traits\")\n                                                         .as_slice());\n                             }"}, {"sha": "7f6a73c83fa76fb804422d6e371001da8ac06063", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -86,7 +86,7 @@ impl<'v> Visitor<'v> for Annotator {\n                 }\n             }\n \n-            TypeTraitItem(ref typedef) => (typedef.id, &typedef.attrs),\n+            TypeTraitItem(ref typedef) => (typedef.ty_param.id, &typedef.attrs),\n         };\n         self.annotate(id, attrs, |v| visit::walk_trait_item(v, t));\n     }"}, {"sha": "a4faff8e3bd85c2bc3a0da714c67495c5fdd2dc1", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -298,7 +298,7 @@ fn collect_trait_methods(ccx: &CrateCtxt,\n                                             &*m.pe_fn_decl())\n                                     }\n                                     ast::TypeTraitItem(ref at) => {\n-                                        tcx.sess.span_bug(at.span,\n+                                        tcx.sess.span_bug(at.ty_param.span,\n                                                           \"there shouldn't \\\n                                                            be a type trait \\\n                                                            item here\")\n@@ -315,9 +315,9 @@ fn collect_trait_methods(ccx: &CrateCtxt,\n                             ast::TypeTraitItem(ref ast_associated_type) => {\n                                 let trait_did = local_def(trait_id);\n                                 let associated_type = ty::AssociatedType {\n-                                    name: ast_associated_type.ident.name,\n+                                    name: ast_associated_type.ty_param.ident.name,\n                                     vis: ast::Public,\n-                                    def_id: local_def(ast_associated_type.id),\n+                                    def_id: local_def(ast_associated_type.ty_param.id),\n                                     container: TraitContainer(trait_did),\n                                 };\n \n@@ -345,7 +345,7 @@ fn collect_trait_methods(ccx: &CrateCtxt,\n                                             method.id))\n                                 }\n                                 ast::TypeTraitItem(ref typedef) => {\n-                                    ty::TypeTraitItemId(local_def(typedef.id))\n+                                    ty::TypeTraitItemId(local_def(typedef.ty_param.id))\n                                 }\n                             }\n                         }).collect());\n@@ -463,12 +463,12 @@ fn convert_associated_type(ccx: &CrateCtxt,\n                                       .get_slice(subst::TypeSpace)\n                                       .iter()\n                                       .find(|def| {\n-        def.def_id == local_def(associated_type.id)\n+        def.def_id == local_def(associated_type.ty_param.id)\n     });\n     let type_parameter_def = match type_parameter_def {\n         Some(type_parameter_def) => type_parameter_def,\n         None => {\n-            ccx.tcx().sess.span_bug(associated_type.span,\n+            ccx.tcx().sess.span_bug(associated_type.ty_param.span,\n                                     \"`convert_associated_type()` didn't find \\\n                                      a type parameter ID corresponding to \\\n                                      this type\")\n@@ -477,18 +477,18 @@ fn convert_associated_type(ccx: &CrateCtxt,\n     let param_type = ty::mk_param(ccx.tcx,\n                                   subst::TypeSpace,\n                                   type_parameter_def.index,\n-                                  local_def(associated_type.id));\n-    ccx.tcx.tcache.borrow_mut().insert(local_def(associated_type.id),\n+                                  local_def(associated_type.ty_param.id));\n+    ccx.tcx.tcache.borrow_mut().insert(local_def(associated_type.ty_param.id),\n                                        Polytype {\n                                         generics: ty::Generics::empty(),\n                                         ty: param_type,\n                                        });\n-    write_ty_to_tcx(ccx.tcx, associated_type.id, param_type);\n+    write_ty_to_tcx(ccx.tcx, associated_type.ty_param.id, param_type);\n \n     let associated_type = Rc::new(ty::AssociatedType {\n-        name: associated_type.ident.name,\n+        name: associated_type.ty_param.ident.name,\n         vis: ast::Public,\n-        def_id: local_def(associated_type.id),\n+        def_id: local_def(associated_type.ty_param.id),\n         container: TraitContainer(trait_def.trait_ref.def_id),\n     });\n     ccx.tcx\n@@ -978,7 +978,7 @@ impl<'a,'tcx> AstConv<'tcx> for TraitMethodCtxt<'a,'tcx> {\n                 match *item {\n                     ast::RequiredMethod(_) | ast::ProvidedMethod(_) => {}\n                     ast::TypeTraitItem(ref item) => {\n-                        if local_def(item.id) == associated_type_id {\n+                        if local_def(item.ty_param.id) == associated_type_id {\n                             return ty::mk_param(self.tcx(),\n                                                 subst::TypeSpace,\n                                                 index,\n@@ -1480,7 +1480,7 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n                     types.push(ty::mk_param(ccx.tcx,\n                                             subst::TypeSpace,\n                                             index,\n-                                            local_def(trait_item.id)))\n+                                            local_def(trait_item.ty_param.id)))\n                 }\n                 ast::RequiredMethod(_) | ast::ProvidedMethod(_) => {}\n             }\n@@ -1630,11 +1630,11 @@ fn ty_of_trait_item(ccx: &CrateCtxt, trait_item: &ast::TraitItem)\n                                   \"ty_of_trait_item() on provided method\")\n         }\n         ast::TypeTraitItem(ref associated_type) => {\n-            let parent = ccx.tcx.map.get_parent(associated_type.id);\n+            let parent = ccx.tcx.map.get_parent(associated_type.ty_param.id);\n             let trait_def = match ccx.tcx.map.get(parent) {\n                 ast_map::NodeItem(item) => trait_def_of_item(ccx, &*item),\n                 _ => {\n-                    ccx.tcx.sess.span_bug(associated_type.span,\n+                    ccx.tcx.sess.span_bug(associated_type.ty_param.span,\n                                           \"associated type's parent wasn't \\\n                                            an item?!\")\n                 }\n@@ -1680,8 +1680,8 @@ fn ty_generics_for_trait(ccx: &CrateCtxt,\n                 let def = ty::TypeParameterDef {\n                     space: subst::TypeSpace,\n                     index: generics.types.len(subst::TypeSpace),\n-                    name: associated_type.ident.name,\n-                    def_id: local_def(associated_type.id),\n+                    name: associated_type.ty_param.ident.name,\n+                    def_id: local_def(associated_type.ty_param.id),\n                     bounds: ty::ParamBounds {\n                         builtin_bounds: ty::empty_builtin_bounds(),\n                         trait_bounds: Vec::new(),\n@@ -1690,7 +1690,7 @@ fn ty_generics_for_trait(ccx: &CrateCtxt,\n                     associated_with: Some(local_def(trait_id)),\n                     default: None,\n                 };\n-                ccx.tcx.ty_param_defs.borrow_mut().insert(associated_type.id,\n+                ccx.tcx.ty_param_defs.borrow_mut().insert(associated_type.ty_param.id,\n                                                           def.clone());\n                 generics.types.push(subst::TypeSpace, def);\n             }\n@@ -1810,9 +1810,9 @@ fn ensure_associated_types<'tcx,AC>(this: &AC, trait_id: ast::DefId)\n                                 ast::ProvidedMethod(_) => {}\n                                 ast::TypeTraitItem(ref associated_type) => {\n                                     let info = ty::AssociatedTypeInfo {\n-                                        def_id: local_def(associated_type.id),\n+                                        def_id: local_def(associated_type.ty_param.id),\n                                         index: index,\n-                                        name: associated_type.ident.name,\n+                                        name: associated_type.ty_param.ident.name,\n                                     };\n                                     result.push(info);\n                                     index += 1;"}, {"sha": "fdacc860bb76675f4fcbd961d29d88591403ae3a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -861,10 +861,8 @@ pub enum ImplItem {\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct AssociatedType {\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n+    pub ty_param: TyParam,\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "f049b964ff33d415d77acf27528c60ebd219de52", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -405,7 +405,9 @@ impl<'ast> Map<'ast> {\n                         MethMac(_) => panic!(\"no path elem for {}\", node),\n                     }\n                 }\n-                TypeTraitItem(ref m) => PathName(m.ident.name),\n+                TypeTraitItem(ref m) => {\n+                    PathName(m.ty_param.ident.name)\n+                }\n             },\n             NodeVariant(v) => PathName(v.node.name.name),\n             _ => panic!(\"no path elem for {}\", node)\n@@ -510,7 +512,7 @@ impl<'ast> Map<'ast> {\n                 match *trait_method {\n                     RequiredMethod(ref type_method) => type_method.span,\n                     ProvidedMethod(ref method) => method.span,\n-                    TypeTraitItem(ref typedef) => typedef.span,\n+                    TypeTraitItem(ref typedef) => typedef.ty_param.span,\n                 }\n             }\n             Some(NodeImplItem(ref impl_item)) => {\n@@ -650,7 +652,7 @@ impl Named for TraitItem {\n         match *self {\n             RequiredMethod(ref tm) => tm.ident.name,\n             ProvidedMethod(ref m) => m.name(),\n-            TypeTraitItem(ref at) => at.ident.name,\n+            TypeTraitItem(ref at) => at.ty_param.ident.name,\n         }\n     }\n }\n@@ -783,7 +785,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                             self.insert(m.id, NodeTraitItem(tm));\n                         }\n                         TypeTraitItem(ref typ) => {\n-                            self.insert(typ.id, NodeTraitItem(tm));\n+                            self.insert(typ.ty_param.id, NodeTraitItem(tm));\n                         }\n                     }\n                 }\n@@ -976,7 +978,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n             let trait_item_id = match *trait_item {\n                 ProvidedMethod(ref m) => m.id,\n                 RequiredMethod(ref m) => m.id,\n-                TypeTraitItem(ref ty) => ty.id,\n+                TypeTraitItem(ref ty) => ty.ty_param.id,\n             };\n \n             collector.insert(trait_item_id, NodeTraitItem(trait_item));\n@@ -1080,7 +1082,7 @@ fn node_id_to_string(map: &Map, id: NodeId) -> String {\n                 }\n                 TypeTraitItem(ref t) => {\n                     format!(\"type item {} in {} (id={})\",\n-                            token::get_ident(t.ident),\n+                            token::get_ident(t.ty_param.ident),\n                             map.path_to_string(id),\n                             id)\n                 }"}, {"sha": "035b80f5564e205df18b94c625ceee23d2e4352a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         match *tm {\n             ast::RequiredMethod(ref m) => self.operation.visit_id(m.id),\n             ast::ProvidedMethod(ref m) => self.operation.visit_id(m.id),\n-            ast::TypeTraitItem(ref typ) => self.operation.visit_id(typ.id),\n+            ast::TypeTraitItem(ref typ) => self.operation.visit_id(typ.ty_param.id),\n         }\n         visit::walk_trait_item(self, tm);\n     }"}, {"sha": "3743e08e9a9369699319a8119282bb27235d2a33", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             ast::RequiredMethod(_) | ast::ProvidedMethod(_) => {}\n             ast::TypeTraitItem(ref ti) => {\n                 self.gate_feature(\"associated_types\",\n-                                  ti.span,\n+                                  ti.ty_param.span,\n                                   \"associated types are experimental\")\n             }\n         }"}, {"sha": "6535c8e89fd4e79c22a2ca7d5265169982fb505a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -793,19 +793,16 @@ pub fn noop_fold_typedef<T>(t: Typedef, folder: &mut T)\n \n pub fn noop_fold_associated_type<T>(at: AssociatedType, folder: &mut T)\n                                     -> AssociatedType\n-                                    where T: Folder {\n-    let new_id = folder.new_id(at.id);\n-    let new_span = folder.new_span(at.span);\n-    let new_ident = folder.fold_ident(at.ident);\n+                                    where T: Folder\n+{\n     let new_attrs = at.attrs\n                       .iter()\n                       .map(|attr| folder.fold_attribute((*attr).clone()))\n                       .collect();\n+    let new_param = folder.fold_ty_param(at.ty_param);\n     ast::AssociatedType {\n-        ident: new_ident,\n         attrs: new_attrs,\n-        id: new_id,\n-        span: new_span,\n+        ty_param: new_param,\n     }\n }\n "}, {"sha": "ad445ef331fe97c40c906d830c22e754156a7b61", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -1229,16 +1229,13 @@ impl<'a> Parser<'a> {\n     /// Parses `type Foo;` in a trait declaration only. The `type` keyword has\n     /// already been parsed.\n     fn parse_associated_type(&mut self, attrs: Vec<Attribute>)\n-                             -> AssociatedType {\n-        let lo = self.span.lo;\n-        let ident = self.parse_ident();\n-        let hi = self.span.hi;\n+                             -> AssociatedType\n+    {\n+        let ty_param = self.parse_ty_param();\n         self.expect(&token::Semi);\n         AssociatedType {\n-            id: ast::DUMMY_NODE_ID,\n-            span: mk_sp(lo, hi),\n-            ident: ident,\n             attrs: attrs,\n+            ty_param: ty_param,\n         }\n     }\n "}, {"sha": "b7f6e65fb9367212c3833d4625d0af4d15044a32", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -818,9 +818,11 @@ impl<'a> State<'a> {\n     }\n \n     fn print_associated_type(&mut self, typedef: &ast::AssociatedType)\n-                             -> IoResult<()> {\n+                             -> IoResult<()>\n+    {\n+        try!(self.print_outer_attributes(typedef.attrs[]));\n         try!(self.word_space(\"type\"));\n-        try!(self.print_ident(typedef.ident));\n+        try!(self.print_ty_param(&typedef.ty_param));\n         word(&mut self.s, \";\")\n     }\n \n@@ -2434,30 +2436,34 @@ impl<'a> State<'a> {\n             } else {\n                 let idx = idx - generics.lifetimes.len();\n                 let param = generics.ty_params.get(idx);\n-                match param.unbound {\n-                    Some(TraitTyParamBound(ref tref)) => {\n-                        try!(s.print_trait_ref(tref));\n-                        try!(s.word_space(\"?\"));\n-                    }\n-                    _ => {}\n-                }\n-                try!(s.print_ident(param.ident));\n-                try!(s.print_bounds(\":\", &param.bounds));\n-                match param.default {\n-                    Some(ref default) => {\n-                        try!(space(&mut s.s));\n-                        try!(s.word_space(\"=\"));\n-                        s.print_type(&**default)\n-                    }\n-                    _ => Ok(())\n-                }\n+                s.print_ty_param(param)\n             }\n         }));\n \n         try!(word(&mut self.s, \">\"));\n         Ok(())\n     }\n \n+    pub fn print_ty_param(&mut self, param: &ast::TyParam) -> IoResult<()> {\n+        match param.unbound {\n+            Some(TraitTyParamBound(ref tref)) => {\n+                try!(self.print_trait_ref(tref));\n+                try!(self.word_space(\"?\"));\n+            }\n+            _ => {}\n+        }\n+        try!(self.print_ident(param.ident));\n+        try!(self.print_bounds(\":\", &param.bounds));\n+        match param.default {\n+            Some(ref default) => {\n+                try!(space(&mut self.s));\n+                try!(self.word_space(\"=\"));\n+                self.print_type(&**default)\n+            }\n+            _ => Ok(())\n+        }\n+    }\n+\n     pub fn print_where_clause(&mut self, generics: &ast::Generics)\n                               -> IoResult<()> {\n         if generics.where_clause.predicates.len() == 0 {"}, {"sha": "86ee23d71a6b22dbc733098b8cd9b6e3eac850cf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319d778ed306d0b3c35af79c47c702dbdebf6d09/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=319d778ed306d0b3c35af79c47c702dbdebf6d09", "patch": "@@ -596,7 +596,8 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_method: &'v Tr\n         RequiredMethod(ref method_type) => visitor.visit_ty_method(method_type),\n         ProvidedMethod(ref method) => walk_method_helper(visitor, &**method),\n         TypeTraitItem(ref associated_type) => {\n-            visitor.visit_ident(associated_type.span, associated_type.ident)\n+            visitor.visit_ident(associated_type.ty_param.span,\n+                                associated_type.ty_param.ident)\n         }\n     }\n }"}]}