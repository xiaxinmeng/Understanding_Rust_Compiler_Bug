{"sha": "3bc685842802edfcd2918f911268f8e345cf3c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzY4NTg0MjgwMmVkZmNkMjkxOGY5MTEyNjhmOGUzNDVjZjNjMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-18T12:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-18T12:11:58Z"}, "message": "auto merge of #8551 : huonw/rust/speling, r=alexcrichton\n\n(This doesn't add/remove `u`s or change `ize` to `ise`, or anything like that.)", "tree": {"sha": "7ef40025a4a23dfcd30b30ba648f360fa6fa6d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef40025a4a23dfcd30b30ba648f360fa6fa6d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc685842802edfcd2918f911268f8e345cf3c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc685842802edfcd2918f911268f8e345cf3c26", "html_url": "https://github.com/rust-lang/rust/commit/3bc685842802edfcd2918f911268f8e345cf3c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc685842802edfcd2918f911268f8e345cf3c26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600901152c223faad80d7cb419cecccd71803723", "url": "https://api.github.com/repos/rust-lang/rust/commits/600901152c223faad80d7cb419cecccd71803723", "html_url": "https://github.com/rust-lang/rust/commit/600901152c223faad80d7cb419cecccd71803723"}, {"sha": "6440343a6c26fca12ef2e323fa7738dce9da1986", "url": "https://api.github.com/repos/rust-lang/rust/commits/6440343a6c26fca12ef2e323fa7738dce9da1986", "html_url": "https://github.com/rust-lang/rust/commit/6440343a6c26fca12ef2e323fa7738dce9da1986"}], "stats": {"total": 159, "additions": 80, "deletions": 79}, "files": [{"sha": "8b06c170f035f90c3c735de91d1dc7b26275ebae", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -582,7 +582,7 @@ a referencing source file, or by the name of the crate itself.\n \n Each source file contains a sequence of zero or more `item` definitions,\n and may optionally begin with any number of `attributes` that apply to the containing module.\n-Atributes on the anonymous crate module define important metadata that influences\n+Attributes on the anonymous crate module define important metadata that influences\n the behavior of the compiler.\n \n ~~~~~~~~\n@@ -1273,7 +1273,7 @@ since the typechecker checks that any type with an implementation of `Circle` al\n \n In type-parameterized functions,\n methods of the supertrait may be called on values of subtrait-bound type parameters.\n-Refering to the previous example of `trait Circle : Shape`:\n+Referring to the previous example of `trait Circle : Shape`:\n \n ~~~\n # trait Shape { fn area(&self) -> float; }\n@@ -1914,7 +1914,7 @@ A field access on a record is an [lvalue](#lvalues-rvalues-and-temporaries) refe\n When the field is mutable, it can be [assigned](#assignment-expressions) to.\n \n When the type of the expression to the left of the dot is a pointer to a record or structure,\n-it is automatically derferenced to make the field access possible.\n+it is automatically dereferenced to make the field access possible.\n \n \n ### Vector expressions"}, {"sha": "21b1b377afa6339214821852b13606fbe6dd8641", "filename": "src/etc/cmathconsts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fcmathconsts.c", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fcmathconsts.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcmathconsts.c?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -13,7 +13,7 @@\n #include <math.h>\n #include <stdio.h>\n \n-// must match core::ctypes\n+// must match std::ctypes\n \n #define C_FLT(x) (float)x\n #define C_DBL(x) (double)x"}, {"sha": "51c0da39bd5ac167df3222ce41c469389870b137", "filename": "src/etc/ziggurat_tables.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fziggurat_tables.py", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fziggurat_tables.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fziggurat_tables.py?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -2,7 +2,7 @@\n # xfail-license\n \n # This creates the tables used for distributions implemented using the\n-# ziggurat algorithm in `core::rand::distributions;`. They are\n+# ziggurat algorithm in `std::rand::distributions;`. They are\n # (basically) the tables as used in the ZIGNOR variant (Doornik 2005).\n # They are changed rarely, so the generated file should be checked in\n # to git."}, {"sha": "3d0163d9e259305d5531df46fc615acbaae1364d", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -36,7 +36,7 @@ _rustc_opts_lint=(\n     'path-statement[path statements with no effect]'\n     'missing-trait-doc[detects missing documentation for traits]'\n     'missing-struct-doc[detects missing documentation for structs]'\n-    'ctypes[proper use of core::libc types in foreign modules]'\n+    'ctypes[proper use of std::libc types in foreign modules]'\n     \"unused-mut[detect mut variables which don't need to be mutable]\"\n     'unused-imports[imports that are never used]'\n     'heap-memory[use of any (~ type or @ type) heap memory]'"}, {"sha": "d4d43558110b15482df457b55ca22d40f0dc0119", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -176,7 +176,7 @@ pub fn add_bytes_to_bits_tuple\n /// method that modifies the buffer directory or provides the caller with bytes that can be modifies\n /// results in those bytes being marked as used by the buffer.\n pub trait FixedBuffer {\n-    /// Input a vector of bytes. If the buffer becomes full, proccess it with the provided\n+    /// Input a vector of bytes. If the buffer becomes full, process it with the provided\n     /// function and then clear the buffer.\n     fn input(&mut self, input: &[u8], func: &fn(&[u8]));\n "}, {"sha": "c7f228af332a3bdf246af290ebbc173c2b32df29", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -47,18 +47,18 @@ pub trait Digest {\n     fn output_bits(&self) -> uint;\n \n     /**\n-     * Convenience functon that feeds a string into a digest\n+     * Convenience function that feeds a string into a digest.\n      *\n      * # Arguments\n      *\n-     * * in The string to feed into the digest\n+     * * `input` The string to feed into the digest\n      */\n     fn input_str(&mut self, input: &str) {\n         self.input(input.as_bytes());\n     }\n \n     /**\n-     * Convenience functon that retrieves the result of a digest as a\n+     * Convenience function that retrieves the result of a digest as a\n      * ~str in hexadecimal format.\n      */\n     fn result_str(&mut self) -> ~str {"}, {"sha": "2b1246b0af0078d68986f58b14793ad3ead4d5cc", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -18,7 +18,7 @@ pub struct EnumSet<E> {\n     priv bits: uint\n }\n \n-/// An iterface for casting C-like enum to uint and back.\n+/// An interface for casting C-like enum to uint and back.\n pub trait CLike {\n     /// Converts C-like enum to uint.\n     fn to_uint(&self) -> uint;"}, {"sha": "3b4fad3eaa794e0dffa83aad6a55fff82f02f336", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -156,7 +156,7 @@ impl FileInput {\n     /**\n     Create a `FileInput` object from a vec of files. An empty\n     vec means lines are read from `stdin` (use `from_vec_raw` to stop\n-    this behaviour). Any occurence of `None` represents `stdin`.\n+    this behaviour). Any occurrence of `None` represents `stdin`.\n     */\n     pub fn from_vec(files: ~[Option<Path>]) -> FileInput {\n         FileInput::from_vec_raw("}, {"sha": "aa7c6433f1fccd7ebad5269972c4fd5fdd10e494", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -166,7 +166,7 @@ Constructors for flat pipes that send POD types using memcpy.\n \n This module is currently unsafe because it uses `Clone + Send` as a type\n parameter bounds meaning POD (plain old data), but `Clone + Send` and\n-POD are not equivelant.\n+POD are not equivalent.\n \n */\n pub mod pod {"}, {"sha": "0cea4c1ac6c015f597309cba8168697bba9f00b6", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -365,7 +365,7 @@ pub fn write_boxplot(w: @io::Writer, s: &Summary, width_hint: uint) {\n     w.write_str(histr);\n }\n \n-/// Returns a HashMap with the number of occurences of every element in the\n+/// Returns a HashMap with the number of occurrences of every element in the\n /// sequence that the iterator exposes.\n pub fn freq_count<T: Iterator<U>, U: Eq+Hash>(mut iter: T) -> hashmap::HashMap<U, uint> {\n     let mut map = hashmap::HashMap::new::<U, uint>();"}, {"sha": "d8eb3cfa50000614488cd676f32e0fc1a16449fd", "filename": "src/libextra/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -157,7 +157,7 @@ impl Terminal {\n     /// If the color is a bright color, but the terminal only supports 8 colors,\n     /// the corresponding normal color will be used instead.\n     ///\n-    /// Rturns true if the color was set, false otherwise.\n+    /// Returns true if the color was set, false otherwise.\n     pub fn bg(&self, color: color::Color) -> bool {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {"}, {"sha": "120946ad161e3b710038e32a7a8a61f66719ab13", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -200,7 +200,7 @@ pub mod raw {\n      * Sets the length of a vector\n      *\n      * This will explicitly set the size of the vector, without actually\n-     * modifing its buffers, so it is up to the caller to ensure that\n+     * modifying its buffers, so it is up to the caller to ensure that\n      * the vector is actually the specified size.\n      */\n     #[inline]"}, {"sha": "b8175e43fb6695cee0dab8d25799df390eaebe06", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -33,7 +33,7 @@ and more.\n \n Also, a few conversion functions: `to_bit` and `to_str`.\n \n-Finally, some inquries into the nature of truth: `is_true` and `is_false`.\n+Finally, some inquiries into the nature of truth: `is_true` and `is_false`.\n \n */\n "}, {"sha": "5feb72cb9cd8e4a48c502e62587a4fea5127440f", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -147,7 +147,7 @@ helper methods.\n ## Internationalization\n \n The formatting syntax supported by the `ifmt!` extension supports\n-internationalization by providing \"methods\" which execute various differnet\n+internationalization by providing \"methods\" which execute various different\n outputs depending on the input. The syntax and methods provided are similar to\n other internationalization systems, so again nothing should seem alien.\n Currently two methods are supported by this extension: \"select\" and \"plural\"."}, {"sha": "84295d0bd5a45958969ba979266038e2d4ce121d", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -66,7 +66,7 @@ pub enum Position<'self> {\n     ArgumentNext, ArgumentIs(uint), ArgumentNamed(&'self str)\n }\n \n-/// Enum of alignments which are supoprted.\n+/// Enum of alignments which are supported.\n #[deriving(Eq)]\n pub enum Alignment { AlignLeft, AlignRight, AlignUnknown }\n "}, {"sha": "e51bd4a16b6922d1d5c7a015e30a08b0c97d973e", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -1029,9 +1029,9 @@ pub fn FILE_reader(f: *libc::FILE, cleanup: bool) -> @Reader {\n * # Example\n *\n * ~~~ {.rust}\n-* let stdin = core::io::stdin();\n+* let stdin = std::io::stdin();\n * let line = stdin.read_line();\n-* core::io::print(line);\n+* std::io::print(line);\n * ~~~\n */\n pub fn stdin() -> @Reader {\n@@ -1462,7 +1462,7 @@ pub trait WriterUtil {\n     /// (8 bytes).\n     fn write_le_f64(&self, f: f64);\n \n-    /// Write a litten-endian IEEE754 single-precision floating-point\n+    /// Write a little-endian IEEE754 single-precision floating-point\n     /// (4 bytes).\n     fn write_le_f32(&self, f: f32);\n \n@@ -1598,7 +1598,7 @@ pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n * # Example\n *\n * ~~~ {.rust}\n-* let stdout = core::io::stdout();\n+* let stdout = std::io::stdout();\n * stdout.write_str(\"hello\\n\");\n * ~~~\n */\n@@ -1610,7 +1610,7 @@ pub fn stdout() -> @Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n * # Example\n *\n * ~~~ {.rust}\n-* let stderr = core::io::stderr();\n+* let stderr = std::io::stderr();\n * stderr.write_str(\"hello\\n\");\n * ~~~\n */"}, {"sha": "1d32c5df14ed9ea997996da300c8d3d121e494b1", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -511,7 +511,8 @@ pub trait Iterator<A> {\n         i\n     }\n \n-    /// Return the element that gives the maximum value from the specfied function\n+    /// Return the element that gives the maximum value from the\n+    /// specified function.\n     ///\n     /// # Example\n     ///\n@@ -534,7 +535,8 @@ pub trait Iterator<A> {\n         }).map_move(|(x, _)| x)\n     }\n \n-    /// Return the element that gives the minimum value from the specfied function\n+    /// Return the element that gives the minimum value from the\n+    /// specified function.\n     ///\n     /// # Example\n     ///\n@@ -1541,7 +1543,7 @@ pub struct Repeat<A> {\n }\n \n impl<A: Clone> Repeat<A> {\n-    /// Create a new `Repeat` that enlessly repeats the element `elt`.\n+    /// Create a new `Repeat` that endlessly repeats the element `elt`.\n     #[inline]\n     pub fn new(elt: A) -> Repeat<A> {\n         Repeat{element: elt}"}, {"sha": "52d5f835fe63d4fe1027efea4e1d0b21dee497d9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -125,7 +125,7 @@ pub static neg_infinity: f32 = -1.0_f32/0.0_f32;\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // staticants from cmath.\n-    /// Archimedes' staticant\n+    /// Archimedes' constant\n     pub static pi: f32 = 3.14159265358979323846264338327950288_f32;\n \n     /// pi/2.0"}, {"sha": "3d6f541767ec7db0ab225c69a086015048ecec03", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -411,7 +411,7 @@ pub fn pipe() -> Pipe {\n         // inheritance has to be handled in a different way that I do not\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n-        // first, as in core::run.\n+        // first, as in std::run.\n         let mut fds = Pipe {input: 0 as c_int,\n                     out: 0 as c_int };\n         let res = libc::pipe(&mut fds.input, 1024 as ::libc::c_uint,"}, {"sha": "c11634034230b0471dc00a9b4993f9af32f90e38", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -254,7 +254,7 @@ pub unsafe fn array_each_with_len<T>(arr: **T, len: uint, cb: &fn(*T)) {\n   passing to the provided callback function\n \n   SAFETY NOTE: This will only work with a null-terminated\n-  pointer array. Barely less-dodgey Pointer Arithmetic.\n+  pointer array. Barely less-dodgy Pointer Arithmetic.\n   Dragons be here.\n */\n pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {"}, {"sha": "9e53c596656b264174c72f601ae547bf09941bcc", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -658,7 +658,7 @@ pub fn rng() -> IsaacRng {\n \n /// Create a weak random number generator with a default algorithm and seed.\n ///\n-/// It returns the fatest `Rng` algorithm currently available in Rust without\n+/// It returns the fastest `Rng` algorithm currently available in Rust without\n /// consideration for cryptography or security. If you require a specifically\n /// seeded `Rng` for consistency over time you should pick one algorithm and\n /// create the `Rng` yourself."}, {"sha": "67be7986c33d8a37fa340299d8e9615ba10d3358", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -66,7 +66,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n /// # Example\n ///\n /// ~~~\n-/// use core::rand::distributions::StandardNormal;\n+/// use std::rand::distributions::StandardNormal;\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n@@ -120,7 +120,7 @@ impl Rand for StandardNormal {\n /// # Example\n ///\n /// ~~~\n-/// use core::rand::distributions::Exp1;\n+/// use std::rand::distributions::Exp1;\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;"}, {"sha": "c7613ed3c2f1e0292106c34dc23bc3a24940c960", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -24,7 +24,7 @@ use str::StrSlice;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n-/// In order to provide informative error messages, `E` is reqired to implement `ToStr`.\n+/// In order to provide informative error messages, `E` is required to implement `ToStr`.\n /// It is further recommended for `E` to be a descriptive error type, eg a `enum` for\n /// all possible errors cases.\n #[deriving(Clone, Eq)]"}, {"sha": "d136ddc0fdf1d8a0c026cd75d050ae1b4c054c1d", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -262,7 +262,7 @@ pub trait WriterByteConversions {\n     /// (8 bytes).\n     fn write_le_f64(&mut self, f: f64);\n \n-    /// Write a litten-endian IEEE754 single-precision floating-point\n+    /// Write a little-endian IEEE754 single-precision floating-point\n     /// (4 bytes).\n     fn write_le_f32(&mut self, f: f32);\n "}, {"sha": "9ec1b699b1d1f8f715d4b7d5b8d74fd6eb98f38d", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -19,7 +19,7 @@ file, TCP, UDP, Unix domain sockets.\n Readers and Writers may be composed to add capabilities like string\n parsing, encoding, and compression.\n \n-This will likely live in core::io, not core::rt::io.\n+This will likely live in std::io, not std::rt::io.\n \n # Examples\n \n@@ -93,7 +93,7 @@ Asynchronous interfaces are most often associated with the callback\n (continuation-passing) style popularised by node.js. Such systems rely\n on all computations being run inside an event loop which maintains a\n list of all pending I/O events; when one completes the registered\n-callback is run and the code that made the I/O request continiues.\n+callback is run and the code that made the I/O request continues.\n Such interfaces achieve non-blocking at the expense of being more\n difficult to reason about.\n \n@@ -136,7 +136,7 @@ Rust's I/O employs a combination of techniques to reduce boilerplate\n while still providing feedback about errors. The basic strategy:\n \n * Errors are fatal by default, resulting in task failure\n-* Errors raise the `io_error` conditon which provides an opportunity to inspect\n+* Errors raise the `io_error` condition which provides an opportunity to inspect\n   an IoError object containing details.\n * Return values must have a sensible null or zero value which is returned\n   if a condition is handled successfully. This may be an `Option`, an empty\n@@ -189,7 +189,7 @@ will start passing around null or zero objects when wrapped in a condition handl\n * XXX: How should we use condition handlers that return values?\n * XXX: Should EOF raise default conditions when EOF is not an error?\n \n-# Issues withi/o scheduler affinity, work stealing, task pinning\n+# Issues with i/o scheduler affinity, work stealing, task pinning\n \n # Resource management\n \n@@ -430,7 +430,7 @@ pub trait Reader {\n     ///         println(reader.read_line());\n     ///     }\n     ///\n-    /// # Failue\n+    /// # Failure\n     ///\n     /// Returns `true` on failure.\n     fn eof(&mut self) -> bool;"}, {"sha": "58e86f97f71e16c4893c5e3cf5daee1c8c87b6d3", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -40,17 +40,17 @@ out of `rt` as development proceeds.\n \n Several modules in `core` are clients of `rt`:\n \n-* `core::task` - The user-facing interface to the Rust task model.\n-* `core::task::local_data` - The interface to local data.\n-* `core::gc` - The garbage collector.\n-* `core::unstable::lang` - Miscellaneous lang items, some of which rely on `core::rt`.\n-* `core::condition` - Uses local data.\n-* `core::cleanup` - Local heap destruction.\n-* `core::io` - In the future `core::io` will use an `rt` implementation.\n-* `core::logging`\n-* `core::pipes`\n-* `core::comm`\n-* `core::stackwalk`\n+* `std::task` - The user-facing interface to the Rust task model.\n+* `std::task::local_data` - The interface to local data.\n+* `std::gc` - The garbage collector.\n+* `std::unstable::lang` - Miscellaneous lang items, some of which rely on `std::rt`.\n+* `std::condition` - Uses local data.\n+* `std::cleanup` - Local heap destruction.\n+* `std::io` - In the future `std::io` will use an `rt` implementation.\n+* `std::logging`\n+* `std::pipes`\n+* `std::comm`\n+* `std::stackwalk`\n \n */\n \n@@ -139,7 +139,7 @@ pub mod rc;\n /// scheduler and task context\n pub mod tube;\n \n-/// Simple reimplementation of core::comm\n+/// Simple reimplementation of std::comm\n pub mod comm;\n \n mod select;"}, {"sha": "01a8882e4f9a711974aa6131193d5c944c403784", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -69,7 +69,7 @@ pub struct Coroutine {\n     saved_context: Context\n }\n \n-/// Some tasks have a deciated home scheduler that they must run on.\n+/// Some tasks have a dedicated home scheduler that they must run on.\n pub enum SchedHome {\n     AnySched,\n     Sched(SchedHandle)\n@@ -592,4 +592,3 @@ mod test {\n         }\n     }\n }\n-"}, {"sha": "59833a16ed8b57a6faa1804fc0ae7239bfc0698c", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-Bindings to libuv, along with the default implementation of `core::rt::rtio`.\n+Bindings to libuv, along with the default implementation of `std::rt::rtio`.\n \n UV types consist of the event loop (Loop), Watchers, Requests and\n Callbacks."}, {"sha": "c04004dfbf6c788c26048798c2f85d9abefb4b67", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -23,7 +23,7 @@\n  * There are also a collection of helper functions to ease interacting\n  * with the low-level API.\n  *\n- * As new functionality, existant in uv.h, is added to the rust stdlib,\n+ * As new functionality, existent in uv.h, is added to the rust stdlib,\n  * the mappings should be added in this module.\n  */\n "}, {"sha": "a38254e89d2058114350d6047ccc7ad0a7c8b862", "filename": "src/libstd/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -90,7 +90,7 @@ pub struct ProcessOptions<'self> {\n     in_fd: Option<c_int>,\n \n     /**\n-     * If this is None then a new pipe will be created for the new progam's\n+     * If this is None then a new pipe will be created for the new program's\n      * output and Process.output() will provide a Reader to read from this pipe.\n      *\n      * If this is Some(file-descriptor) then the new process will write its output\n@@ -100,7 +100,7 @@ pub struct ProcessOptions<'self> {\n     out_fd: Option<c_int>,\n \n     /**\n-     * If this is None then a new pipe will be created for the new progam's\n+     * If this is None then a new pipe will be created for the new program's\n      * error stream and Process.error() will provide a Reader to read from this pipe.\n      *\n      * If this is Some(file-descriptor) then the new process will write its error output\n@@ -840,7 +840,7 @@ pub fn process_output(prog: &str, args: &[~str]) -> ProcessOutput {\n  * Note that this is private to avoid race conditions on unix where if\n  * a user calls waitpid(some_process.get_id()) then some_process.finish()\n  * and some_process.destroy() and some_process.finalize() will then either\n- * operate on a none-existant process or, even worse, on a newer process\n+ * operate on a none-existent process or, even worse, on a newer process\n  * with the same id.\n  */\n fn waitpid(pid: pid_t) -> int {"}, {"sha": "98bf963be9aa2bef5033a03bffaba6e7304f565a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -382,7 +382,7 @@ impl<'self, Sep: CharEq> Iterator<&'self str> for CharSplitIterator<'self, Sep>\n     }\n }\n \n-/// An iterator over the start and end indicies of the matches of a\n+/// An iterator over the start and end indices of the matches of a\n /// substring within a larger string\n #[deriving(Clone)]\n pub struct MatchesIndexIterator<'self> {\n@@ -893,7 +893,7 @@ pub mod raw {\n     /// Sets the length of a string\n     ///\n     /// This will explicitly set the size of the string, without actually\n-    /// modifing its buffers, so it is up to the caller to ensure that\n+    /// modifying its buffers, so it is up to the caller to ensure that\n     /// the string is actually the specified size.\n     #[inline]\n     pub unsafe fn set_len(s: &mut ~str, new_len: uint) {"}, {"sha": "820baec6a7956dc882001fa4695b837a905b17ca", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -365,7 +365,7 @@ impl TaskBuilder {\n         spawn::spawn_raw(opts, f);\n     }\n \n-    /// Runs a task, while transfering ownership of one argument to the child.\n+    /// Runs a task, while transferring ownership of one argument to the child.\n     pub fn spawn_with<A:Send>(&mut self, arg: A, f: ~fn(v: A)) {\n         let arg = Cell::new(arg);\n         do self.spawn {\n@@ -474,10 +474,10 @@ pub fn spawn_indestructible(f: ~fn()) {\n \n pub fn spawn_with<A:Send>(arg: A, f: ~fn(v: A)) {\n     /*!\n-     * Runs a task, while transfering ownership of one argument to the\n+     * Runs a task, while transferring ownership of one argument to the\n      * child.\n      *\n-     * This is useful for transfering ownership of noncopyables to\n+     * This is useful for transferring ownership of noncopyables to\n      * another task.\n      *\n      * This function is equivalent to `task().spawn_with(arg, f)`."}, {"sha": "4d84b6d251d23da3f61fc792e4c1450d95c39511", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -28,7 +28,7 @@ pub type Cb<'self> = &'self fn(buf: &[u8]) -> bool;\n  * A trait to implement in order to make a type hashable;\n  * This works in combination with the trait `Hash::Hash`, and\n  * may in the future be merged with that trait or otherwise\n- * modified when default methods and trait inheritence are\n+ * modified when default methods and trait inheritance are\n  * completed.\n  */\n pub trait IterBytes {"}, {"sha": "a8c450a0516128eef47e658bfbd0913e9c414faa", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -31,7 +31,7 @@ pub trait ToStr {\n \n /// Trait for converting a type to a string, consuming it in the process.\n pub trait ToStrConsume {\n-    /// Cosume and convert to a string.\n+    /// Consume and convert to a string.\n     fn into_str(self) -> ~str;\n }\n "}, {"sha": "f286235ca0e18b9694cf584c861bcb736e97ae60", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -39,14 +39,14 @@ pub struct AtomicBool {\n }\n \n /**\n- * A signed atomic integer type, supporting basic atomic aritmetic operations\n+ * A signed atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicInt {\n     priv v: int\n }\n \n /**\n- * An unsigned atomic integer type, supporting basic atomic aritmetic operations\n+ * An unsigned atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicUint {\n     priv v: uint\n@@ -497,7 +497,7 @@ pub unsafe fn atomic_xor<T>(dst: &mut T, val: T, order: Ordering) -> T {\n  * A fence 'A' which has `Release` ordering semantics, synchronizes with a\n  * fence 'B' with (at least) `Acquire` semantics, if and only if there exists\n  * atomic operations X and Y, both operating on some atomic object 'M' such\n- * that A is sequenced before X, Y is synchronized before B and Y obsevers\n+ * that A is sequenced before X, Y is synchronized before B and Y observers\n  * the change to M. This provides a happens-before dependence between A and B.\n  *\n  * Atomic operations with `Release` or `Acquire` semantics can also synchronize"}, {"sha": "7fbe9179f75aa49d575dfc1f29048b56b46c9d05", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -18,7 +18,7 @@ stack closures that emulates Java-style try/finally blocks.\n do || {\n     ...\n }.finally {\n-    alway_run_this();\n+    always_run_this();\n }\n ~~~\n */"}, {"sha": "0642bb1973745423c725e64e3ecabdd8d7942677", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -22,7 +22,7 @@ semantics as C++11. See the LLVM documentation on [[atomics]].\n \n A quick refresher on memory ordering:\n \n-* Acquire - a barrier for aquiring a lock. Subsequent reads and writes\n+* Acquire - a barrier for acquiring a lock. Subsequent reads and writes\n   take place after the barrier.\n * Release - a barrier for releasing a lock. Preceding reads and writes\n   take place before the barrier."}, {"sha": "7c8046a64b2c2de942c172a42ef075e38828734e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -468,7 +468,7 @@ impl<'self, T> Iterator<&'self [T]> for WindowIter<'self, T> {\n /// elements at a time).\n ///\n /// When the vector len is not evenly divided by the chunk size,\n-/// the last slice of the iteration will be the remainer.\n+/// the last slice of the iteration will be the remainder.\n #[deriving(Clone)]\n pub struct ChunkIter<'self, T> {\n     priv v: &'self [T],\n@@ -1930,7 +1930,7 @@ pub mod raw {\n      * Sets the length of a vector\n      *\n      * This will explicitly set the size of the vector, without actually\n-     * modifing its buffers, so it is up to the caller to ensure that\n+     * modifying its buffers, so it is up to the caller to ensure that\n      * the vector is actually the specified size.\n      */\n     #[inline]"}, {"sha": "b01c19a59c18630b00dc07762252e469f4e8a982", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -100,7 +100,7 @@ pub struct Lifetime {\n }\n \n // a \"Path\" is essentially Rust's notion of a name;\n-// for instance: core::cmp::Eq  .  It's represented\n+// for instance: std::cmp::Eq  .  It's represented\n // as a sequence of identifiers, along with a bunch\n // of supporting information.\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n@@ -1093,8 +1093,8 @@ pub enum inlined_item {\n /* hold off on tests ... they appear in a later merge.\n #[cfg(test)]\n mod test {\n-    use core::option::{None, Option, Some};\n-    use core::uint;\n+    use std::option::{None, Option, Some};\n+    use std::uint;\n     use extra;\n     use codemap::*;\n     use super::*;"}, {"sha": "97c1135fe01d2aa732f134596ff2af4232a9ee59", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -36,7 +36,7 @@ const size_t default_log_level = log_err;\n \n // This is a rather ugly parser for strings in the form\n // \"crate1,crate2.mod3,crate3.x=1\". Log levels are 0-255,\n-// with the most likely ones being 0-3 (defined in core::).\n+// with the most likely ones being 0-3 (defined in std::).\n size_t parse_logging_spec(char* spec, log_directive* dirs) {\n     size_t dir = 0;\n     while (dir < max_log_directives && *spec) {"}, {"sha": "c2b15c2fd1bd4d7b9fb11960a2b15eb95581f640", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc685842802edfcd2918f911268f8e345cf3c26/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=3bc685842802edfcd2918f911268f8e345cf3c26", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-use core::io::ReaderUtil;\n-use core::io::Reader;\n+use std::io::ReaderUtil;\n+use std::io::Reader;\n \n fn bar(r:@ReaderUtil) -> ~str { r.read_line() }\n "}]}