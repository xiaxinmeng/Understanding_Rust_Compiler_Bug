{"sha": "932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMmRiZTgxNmU5OGQ4NzRjYTFkN2E3ZjA5MTNjYTlmNjdhOTRhODQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T17:17:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:37Z"}, "message": "Explain unsafety trickery of const functions", "tree": {"sha": "9a37237fe06d7bd3c1d9ac53a9d58f003d63728d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a37237fe06d7bd3c1d9ac53a9d58f003d63728d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "html_url": "https://github.com/rust-lang/rust/commit/932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932dbe816e98d874ca1d7a7f0913ca9f67a94a84/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75d5f18677fadef03cc55887a18c804af527d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75d5f18677fadef03cc55887a18c804af527d9f", "html_url": "https://github.com/rust-lang/rust/commit/b75d5f18677fadef03cc55887a18c804af527d9f"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "054fb5f458117b485b43ed5719b9830961ef1338", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/932dbe816e98d874ca1d7a7f0913ca9f67a94a84/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932dbe816e98d874ca1d7a7f0913ca9f67a94a84/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=932dbe816e98d874ca1d7a7f0913ca9f67a94a84", "patch": "@@ -114,11 +114,20 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                 hir::Unsafety::Normal => Safety::Safe,\n                 hir::Unsafety::Unsafe => Safety::FnUnsafe,\n             };\n-            let safety = if implicit_argument.is_none() && tcx.is_min_const_fn(fn_def_id) {\n-                // the body of `const unsafe fn`s is treated like the body of safe `const fn`s\n-                Safety::Safe\n-            } else {\n-                safety\n+\n+            let safety = match fn_sig.unsafety {\n+                hir::Unsafety::Normal => Safety::Safe,\n+                hir::Unsafety::Unsafe => {\n+                    if tcx.is_min_const_fn(fn_def_id) => {\n+                        // As specified in #55607, a `const unsafe fn` differs\n+                        // from an `unsafe fn` in that its body is still considered\n+                        // safe code by default.\n+                        assert!(!implicit_argument.is_none());\n+                        Safety::Safe\n+                    } else {\n+                        Safety::Unsafe\n+                    }\n+                }\n             };\n \n             let body = tcx.hir.body(body_id);"}]}