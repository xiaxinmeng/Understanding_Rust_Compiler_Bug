{"sha": "872628e99e9fd9625e2c342af9c28137a270ee71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjYyOGU5OWU5ZmQ5NjI1ZTJjMzQyYWY5YzI4MTM3YTI3MGVlNzE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@googlemail.com", "date": "2015-05-04T10:51:57Z"}, "committer": {"name": "llogiq", "email": "bogusandre@googlemail.com", "date": "2015-05-04T10:51:57Z"}, "message": "Merge pull request #43 from Manishearth/approx_const\n\nNew lint: approx_const", "tree": {"sha": "e4e1cd2d7daa2c145798049e69b89447b8989195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e1cd2d7daa2c145798049e69b89447b8989195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872628e99e9fd9625e2c342af9c28137a270ee71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872628e99e9fd9625e2c342af9c28137a270ee71", "html_url": "https://github.com/rust-lang/rust/commit/872628e99e9fd9625e2c342af9c28137a270ee71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872628e99e9fd9625e2c342af9c28137a270ee71/comments", "author": null, "committer": null, "parents": [{"sha": "8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7", "html_url": "https://github.com/rust-lang/rust/commit/8d2328d9a5ed45bf20739b0164dfad2bc97da9a7"}, {"sha": "2cb84b9d15b0cf821fc6ad0b90fb7d731f4a1910", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb84b9d15b0cf821fc6ad0b90fb7d731f4a1910", "html_url": "https://github.com/rust-lang/rust/commit/2cb84b9d15b0cf821fc6ad0b90fb7d731f4a1910"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "211833bacced4cb8eae30d58dca1429120e2f9af", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872628e99e9fd9625e2c342af9c28137a270ee71/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/872628e99e9fd9625e2c342af9c28137a270ee71/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=872628e99e9fd9625e2c342af9c28137a270ee71", "patch": "@@ -15,6 +15,7 @@ Lints included in this crate:\n  - `bad_bit_mask`: Denies expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n  - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n  - `ptr_arg`: Warns on fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+ - `approx_constant`: Warns if the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found and suggests to use the constant\n \n In your code, you may add `#![plugin(clippy)]` to use it (you may also need to include a `#![feature(plugin)]` line)\n "}, {"sha": "8a93bbfa9334b03981ab611e26118067521bb1a3", "filename": "src/approx_const.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/872628e99e9fd9625e2c342af9c28137a270ee71/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872628e99e9fd9625e2c342af9c28137a270ee71/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=872628e99e9fd9625e2c342af9c28137a270ee71", "patch": "@@ -0,0 +1,63 @@\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use rustc::middle::const_eval::lookup_const_by_id;\n+use rustc::middle::def::*;\n+use syntax::ast::*;\n+use syntax::ast_util::{is_comparison_binop, binop_to_string};\n+use syntax::ptr::P;\n+use syntax::codemap::Span;\n+use std::f64::consts as f64;\n+\n+declare_lint! {\n+    pub APPROX_CONSTANT,\n+    Warn,\n+    \"Warn if a user writes an approximate known constant in their code\"\n+}\n+\n+const KNOWN_CONSTS : &'static [(f64, &'static str)] = &[(f64::E, \"E\"), (f64::FRAC_1_PI, \"FRAC_1_PI\"), \n+\t(f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\"), (f64::FRAC_2_PI, \"FRAC_2_PI\"), \n+\t(f64::FRAC_2_SQRT_PI, \"FRAC_2_SQRT_PI\"), (f64::FRAC_PI_2, \"FRAC_PI_2\"), (f64::FRAC_PI_3, \"FRAC_PI_3\"),\n+\t(f64::FRAC_PI_4, \"FRAC_PI_4\"), (f64::FRAC_PI_6, \"FRAC_PI_6\"), (f64::FRAC_PI_8, \"FRAC_PI_8\"), \n+\t(f64::LN_10, \"LN_10\"), (f64::LN_2, \"LN_2\"), (f64::LOG10_E, \"LOG10_E\"), (f64::LOG2_E, \"LOG2_E\"),\n+\t(f64::PI, \"PI\"), (f64::SQRT_2, \"SQRT_2\")];\n+\n+const EPSILON_DIVISOR : f64 = 8192f64; //TODO: test to find a good value\n+\n+#[derive(Copy,Clone)]\n+pub struct ApproxConstant;\n+\n+impl LintPass for ApproxConstant {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(APPROX_CONSTANT)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+\t\tif let &ExprLit(ref lit) = &e.node {\n+\t\t\tcheck_lit(cx, lit, e.span);\n+\t\t}\n+    }\n+}\n+\n+fn check_lit(cx: &Context, lit: &Lit, span: Span) {\n+\tmatch &lit.node {\n+\t\t&LitFloat(ref str, TyF32) => check_known_consts(cx, span, str, \"f32\"),\n+\t\t&LitFloat(ref str, TyF64) => check_known_consts(cx, span, str, \"f64\"),\n+\t\t&LitFloatUnsuffixed(ref str) => check_known_consts(cx, span, str, \"f{32, 64}\"),\n+\t\t_ => ()\n+\t}\n+}\n+\n+fn check_known_consts(cx: &Context, span: Span, str: &str, module: &str) {\n+\tif let Ok(value) = str.parse::<f64>() {\n+\t\tfor &(constant, name) in KNOWN_CONSTS {\n+\t\t\tif within_epsilon(constant, value) {\n+\t\t\t\tcx.span_lint(APPROX_CONSTANT, span, &format!(\n+\t\t\t\t\t\"Approximate value of {}::{} found, consider using it directly.\", module, &name));\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+fn within_epsilon(target: f64, value: f64) -> bool {\n+\tf64::abs(value - target) < f64::abs((if target > value { target } else { value })) / EPSILON_DIVISOR\n+}"}, {"sha": "b2a750f5cc1bbe902e8e870b999e3592c49ed840", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872628e99e9fd9625e2c342af9c28137a270ee71/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872628e99e9fd9625e2c342af9c28137a270ee71/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=872628e99e9fd9625e2c342af9c28137a270ee71", "patch": "@@ -20,6 +20,7 @@ pub mod eq_op;\n pub mod bit_mask;\n pub mod ptr_arg;\n pub mod needless_bool;\n+pub mod approx_const;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -31,11 +32,13 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box bit_mask::BitMask as LintPassObject);\n     reg.register_lint_pass(box ptr_arg::PtrArg as LintPassObject);\n     reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n+    reg.register_lint_pass(box approx_const::ApproxConstant as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n                                            bit_mask::BAD_BIT_MASK, ptr_arg::PTR_ARG,\n-                                           needless_bool::NEEDLESS_BOOL\n+                                           needless_bool::NEEDLESS_BOOL,\n+                                           approx_const::APPROX_CONSTANT\n                                            ]);\n }"}, {"sha": "488c8f16f5bb22eb1af82516bf746f92845cc568", "filename": "tests/compile-fail/approx_const.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/872628e99e9fd9625e2c342af9c28137a270ee71/tests%2Fcompile-fail%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872628e99e9fd9625e2c342af9c28137a270ee71/tests%2Fcompile-fail%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fapprox_const.rs?ref=872628e99e9fd9625e2c342af9c28137a270ee71", "patch": "@@ -0,0 +1,56 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(approx_constant)]\n+#[allow(unused)]\n+fn main() {\n+\tlet my_e = 2.7182; //~ERROR\n+\tlet almost_e = 2.718; //~ERROR\n+\tlet no_e = 2.71;\n+\t\n+\tlet my_1_frac_pi = 0.3183; //~ERROR\n+\tlet no_1_frac_pi = 0.31;\n+\n+\tlet my_frac_1_sqrt_2 = 0.70710678; //~ERROR\n+\tlet almost_frac_1_sqrt_2 = 0.70711; //~ERROR\n+\tlet my_frac_1_sqrt_2 = 0.707;\n+\t\n+\tlet my_frac_2_pi = 0.63661977; //~ERROR\n+\tlet no_frac_2_pi = 0.636;\n+\t\n+\tlet my_frac_2_sq_pi = 1.128379; //~ERROR\n+\tlet no_frac_2_sq_pi = 1.128;\n+\n+\tlet my_frac_2_pi = 1.57079632679; //~ERROR\n+\tlet no_frac_2_pi = 1.5705;\n+\t\n+\tlet my_frac_3_pi = 1.04719755119; //~ERROR\n+\tlet no_frac_3_pi = 1.047;\n+\t\n+\tlet my_frac_4_pi = 0.785398163397; //~ERROR\n+\tlet no_frac_4_pi = 0.785;\n+\n+\tlet my_frac_6_pi = 0.523598775598; //~ERROR\n+\tlet no_frac_6_pi = 0.523;\n+\n+\tlet my_frac_8_pi = 0.3926990816987; //~ERROR\n+\tlet no_frac_8_pi = 0.392;\n+\n+\tlet my_ln_10 = 2.302585092994046; //~ERROR\n+\tlet no_ln_10 = 2.303;\n+\t\n+\tlet my_ln_2 = 0.6931471805599453; //~ERROR\n+\tlet no_ln_2 = 0.693;\n+\n+\tlet my_log10_e = 0.43429448190325176; //~ERROR\n+\tlet no_log10_e = 0.434;\n+\t\n+\tlet my_log2_e = 1.4426950408889634; //~ERROR\n+\tlet no_log2_e = 1.442;\n+\t\n+\tlet my_pi = 3.1415; //~ERROR\n+\tlet almost_pi = 3.141;\n+\t\n+\tlet my_sq2 = 1.4142; //~ERROR\n+\tlet no_sq2 = 1.414;\n+}"}]}