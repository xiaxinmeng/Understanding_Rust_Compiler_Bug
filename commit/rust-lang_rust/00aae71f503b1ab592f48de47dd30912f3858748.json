{"sha": "00aae71f503b1ab592f48de47dd30912f3858748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYWFlNzFmNTAzYjFhYjU5MmY0OGRlNDdkZDMwOTEyZjM4NTg3NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T20:24:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T20:24:10Z"}, "message": "Auto merge of #58302 - SimonSapin:tryfrom, r=alexcrichton\n\nStabilize TryFrom and TryInto with a convert::Infallible empty enum\n\nThis is the plan proposed in https://github.com/rust-lang/rust/issues/33417#issuecomment-423073898", "tree": {"sha": "6a467dcb6c86ff08496ce29b1da9eaabc92538ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a467dcb6c86ff08496ce29b1da9eaabc92538ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00aae71f503b1ab592f48de47dd30912f3858748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00aae71f503b1ab592f48de47dd30912f3858748", "html_url": "https://github.com/rust-lang/rust/commit/00aae71f503b1ab592f48de47dd30912f3858748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00aae71f503b1ab592f48de47dd30912f3858748/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b57fe74a27590289fd657614b8ad1f3eac8a7ad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57fe74a27590289fd657614b8ad1f3eac8a7ad2", "html_url": "https://github.com/rust-lang/rust/commit/b57fe74a27590289fd657614b8ad1f3eac8a7ad2"}, {"sha": "cf267540ebabdeac1f2045819cd6bac561017e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf267540ebabdeac1f2045819cd6bac561017e29", "html_url": "https://github.com/rust-lang/rust/commit/cf267540ebabdeac1f2045819cd6bac561017e29"}], "stats": {"total": 242, "additions": 163, "deletions": 79}, "files": [{"sha": "b714df5d36b6a8866f2ec867401376ef688b89b7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -486,7 +486,7 @@ impl String {\n     /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n     /// [`as_bytes`]: struct.String.html#method.as_bytes\n     /// [`FromUtf8Error`]: struct.FromUtf8Error.html\n-    /// [`Err`]: ../../stdresult/enum.Result.html#variant.Err\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n@@ -2073,48 +2073,17 @@ impl ops::DerefMut for String {\n /// [`String`]: struct.String.html\n /// [`from_str`]: ../../std/str/trait.FromStr.html#tymethod.from_str\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-#[derive(Copy)]\n-pub enum ParseError {}\n+pub type ParseError = core::convert::Infallible;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for String {\n-    type Err = ParseError;\n+    type Err = core::convert::Infallible;\n     #[inline]\n     fn from_str(s: &str) -> Result<String, ParseError> {\n         Ok(String::from(s))\n     }\n }\n \n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl Clone for ParseError {\n-    fn clone(&self) -> ParseError {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl fmt::Debug for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl fmt::Display for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl PartialEq for ParseError {\n-    fn eq(&self, _: &ParseError) -> bool {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl Eq for ParseError {}\n \n /// A trait for converting a value to a `String`.\n ///"}, {"sha": "9c6ecc4350246ebbfe5165bc5dbda656bca1b5f6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -49,7 +49,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -138,7 +138,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for [T; $N] where T: Copy {\n                 type Error = TryFromSliceError;\n \n@@ -147,7 +147,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -161,7 +161,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "6a5abfb408f5bfbbd8109026f438585f724a7f3c", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -218,7 +218,7 @@ impl FromStr for char {\n }\n \n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -233,11 +233,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "f3369c4d94010bdd3bf2e63509c988734073f0c4", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -30,7 +30,7 @@ pub use self::convert::{from_u32, from_digit};\n pub use self::convert::from_u32_unchecked;\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use self::convert::ParseCharError;\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use self::convert::CharTryFromError;\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};"}, {"sha": "5ecfa9cde032e67b84d275dbdffbb8bb3dfdff24", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 123, "deletions": 5, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -41,6 +41,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use fmt;\n+\n /// An identity function.\n ///\n /// Two things are important to note about this function:\n@@ -367,22 +369,26 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -450,7 +456,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -462,9 +468,9 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<T, U> TryFrom<U> for T where U: Into<T> {\n-    type Error = !;\n+    type Error = Infallible;\n \n     fn try_from(value: U) -> Result<Self, Self::Error> {\n         Ok(U::into(value))\n@@ -496,3 +502,115 @@ impl AsRef<str> for str {\n         self\n     }\n }\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// THE NO-ERROR ERROR TYPE\n+////////////////////////////////////////////////////////////////////////////////\n+\n+/// The error type for errors that can never happen.\n+///\n+/// Since this enum has no variant, a value of this type can never actually exist.\n+/// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n+/// to indicate that the result is always [`Ok`].\n+///\n+/// For example, the [`TryFrom`] trait (conversion that returns a [`Result`])\n+/// has a blanket implementation for all types where a reverse [`Into`] implementation exists.\n+///\n+/// ```ignore (illustrates std code, duplicating the impl in a doctest would be an error)\n+/// impl<T, U> TryFrom<U> for T where U: Into<T> {\n+///     type Error = Infallible;\n+///\n+///     fn try_from(value: U) -> Result<Self, Infallible> {\n+///         Ok(U::into(value))  // Never returns `Err`\n+///     }\n+/// }\n+/// ```\n+///\n+/// # Future compatibility\n+///\n+/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n+/// which is unstable in this version of Rust.\n+/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n+///\n+/// ```ignore (illustrates future std change)\n+/// pub type Infallible = !;\n+/// ```\n+///\n+/// \u2026 and eventually deprecate `Infallible`.\n+///\n+///\n+/// However there is one case where `!` syntax can be used\n+/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n+/// Specifically, it is possible implementations for two different function pointer types:\n+///\n+/// ```\n+/// trait MyTrait {}\n+/// impl MyTrait for fn() -> ! {}\n+/// impl MyTrait for fn() -> std::convert::Infallible {}\n+/// ```\n+///\n+/// With `Infallible` being an enum, this code is valid.\n+/// However when `Infallible` becomes an alias for the never type,\n+/// the two `impl`s will start to overlap\n+/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n+///\n+/// [`Ok`]: ../result/enum.Result.html#variant.Ok\n+/// [`Result`]: ../result/enum.Result.html\n+/// [`TryFrom`]: trait.TryFrom.html\n+/// [`Into`]: trait.Into.html\n+/// [never]: ../../std/primitive.never.html\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+#[derive(Copy)]\n+pub enum Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Clone for Infallible {\n+    fn clone(&self) -> Infallible {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Debug for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Display for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialEq for Infallible {\n+    fn eq(&self, _: &Infallible) -> bool {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Eq for Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialOrd for Infallible {\n+    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Ord for Infallible {\n+    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl From<!> for Infallible {\n+    fn from(x: !) -> Self {\n+        x\n+    }\n+}"}, {"sha": "3ceba83afeef83b309ac04a83ff5ed3d7b49ba88", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -2,7 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use convert::TryFrom;\n+use convert::{TryFrom, Infallible};\n use fmt;\n use intrinsics;\n use mem;\n@@ -2000,7 +2000,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -2032,7 +2031,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -2074,7 +2072,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3767,7 +3764,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3799,7 +3795,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3841,7 +3836,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -4504,7 +4498,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub struct TryFromIntError(());\n \n@@ -4519,24 +4513,34 @@ impl TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl From<Infallible> for TryFromIntError {\n+    fn from(x: Infallible) -> TryFromIntError {\n+        match x {}\n+    }\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n-        never\n+        // Match rather than coerce to make sure that code like\n+        // `From<Infallible> for TryFromIntError` above will keep working\n+        // when `Infallible` becomes an alias to `!`.\n+        match never {}\n     }\n }\n \n // no possible bounds violation\n macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4551,7 +4555,7 @@ macro_rules! try_from_unbounded {\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4570,7 +4574,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4589,7 +4593,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n "}, {"sha": "d0021376389772ee42e118508b980bb8942fe495", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -26,7 +26,6 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]\n-#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]"}, {"sha": "1b0bcdd0b5b484d66df7246fe926c65692e42ad5", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -35,7 +35,6 @@\n #![deny(rust_2018_idioms)]\n \n #![feature(nll)]\n-#![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}, {"sha": "06e79dc4e7097bcc738b742a9f27410977fa8cf0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -23,7 +23,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(unicode_internals)]\n #![feature(step_trait)]\n #![feature(slice_concat_ext)]\n-#![feature(try_from)]\n #![feature(reverse_bits)]\n #![feature(try_blocks)]\n "}, {"sha": "17e50a649fa5208a3e34d93ab3ec84ae845cf44c", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -466,14 +466,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -548,7 +548,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "7af569ab350af8ba8d23d8e8c139057b024b4d81", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -296,7 +296,6 @@\n #![feature(str_internals)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n-#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]"}, {"sha": "9f91a9f89eb766013174ba2d7ad8e6b0d9693213", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -78,7 +78,6 @@ use iter::{self, FusedIterator};\n use ops::{self, Deref};\n use rc::Rc;\n use str::FromStr;\n-use string::ParseError;\n use sync::Arc;\n \n use ffi::{OsStr, OsString};\n@@ -1533,7 +1532,7 @@ impl From<String> for PathBuf {\n \n #[stable(feature = \"path_from_str\", since = \"1.32.0\")]\n impl FromStr for PathBuf {\n-    type Err = ParseError;\n+    type Err = core::convert::Infallible;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         Ok(PathBuf::from(s))"}, {"sha": "e9b53f2d1c8df981372aa1ad40f93f418f7f9620", "filename": "src/test/run-pass/try-from-int-error-partial-eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -1,4 +1,3 @@\n-#![feature(try_from)]\n #![allow(unused_must_use)]\n \n use std::convert::TryFrom;"}, {"sha": "e42f2c3e3930df7437885034b2a9f3d96739d6c2", "filename": "src/test/run-pass/try_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Frun-pass%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Frun-pass%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry_from.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -4,9 +4,9 @@\n // This test was added to show the motivation for doing this\n // over `TryFrom` being blanket impl for all `T: From`\n \n-#![feature(try_from, never_type)]\n+#![feature(never_type)]\n \n-use std::convert::TryInto;\n+use std::convert::{TryInto, Infallible};\n \n struct Foo<T> {\n     t: T,\n@@ -32,6 +32,6 @@ impl<T> Into<Vec<T>> for Foo<T> {\n }\n \n pub fn main() {\n-    let _: Result<Vec<i32>, !> = Foo { t: 10 }.try_into();\n+    let _: Result<Vec<i32>, Infallible> = Foo { t: 10 }.try_into();\n }\n "}, {"sha": "6dc81f33dfcc49c7d02e3cc36ea3ce66b434edec", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -1,4 +1,3 @@\n-#![feature(try_from)]\n \n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};"}, {"sha": "1cfb3c1dabae4f6e797fd8e61383d4e7a3c7e0c3", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00aae71f503b1ab592f48de47dd30912f3858748/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=00aae71f503b1ab592f48de47dd30912f3858748", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:7:1\n+  --> $DIR/conflict-with-std.rs:6:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:14:1\n+  --> $DIR/conflict-with-std.rs:13:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:21:1\n+  --> $DIR/conflict-with-std.rs:20:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}