{"sha": "f7b0135c64da13d64fb0add0c96e84289beb07b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjAxMzVjNjRkYTEzZDY0ZmIwYWRkMGM5NmU4NDI4OWJlYjA3YjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T15:58:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T15:58:42Z"}, "message": "Merge #3195\n\n3195: Drop proptest tests r=matklad a=matklad\n\nIt takes waaay to long to compile.\n\nWe should add quickcheck tests when we touch the relevant code next\ntime.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1efc29623af8929e31fc90a34f1588bc24375985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1efc29623af8929e31fc90a34f1588bc24375985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b0135c64da13d64fb0add0c96e84289beb07b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSrgyCRBK7hj4Ov3rIwAAdHIIAEE0vBBM1qsbVCxWEx4zTQCK\naGUgQbQnnxD6NfEj9rAJcHUIgQn7nxbI7BVrfpQGnku1aX1hpFfDsEBP/PHSaq3X\n391pHdDi8iLED/AjVhtjxFj1+HBF1PNj3ClIyeGvgBZE9DBzeyMbf3dLrVrq5QRl\nuzawenaWSS+zQDP4Az/54MspGNDMv2v6BRHB42CO3U1we0sclicLjM7lboh/DKiW\n4IBiXveW0269n8Nn7SyELuHOFXy96pQxl2nBhlHyuJQjVX1Xx39DKT9Uu+YwfRZa\ntrurDjpnhaXZo6lgaEbi7OrHQcJvs76OtUg6K6gP/zCgUNjCZpBwhL2zHtKx8R0=\n=vLQK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1efc29623af8929e31fc90a34f1588bc24375985\nparent b4c30fb8961177809646ccd72a7f62c7fd4fca4f\nparent 57140f1730b4ac39697bfad530409ac8472e4e9d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581955122 +0000\ncommitter GitHub <noreply@github.com> 1581955122 +0000\n\nMerge #3195\n\n3195: Drop proptest tests r=matklad a=matklad\n\nIt takes waaay to long to compile.\n\nWe should add quickcheck tests when we touch the relevant code next\ntime.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b0135c64da13d64fb0add0c96e84289beb07b4", "html_url": "https://github.com/rust-lang/rust/commit/f7b0135c64da13d64fb0add0c96e84289beb07b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b0135c64da13d64fb0add0c96e84289beb07b4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c30fb8961177809646ccd72a7f62c7fd4fca4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c30fb8961177809646ccd72a7f62c7fd4fca4f", "html_url": "https://github.com/rust-lang/rust/commit/b4c30fb8961177809646ccd72a7f62c7fd4fca4f"}, {"sha": "57140f1730b4ac39697bfad530409ac8472e4e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57140f1730b4ac39697bfad530409ac8472e4e9d", "html_url": "https://github.com/rust-lang/rust/commit/57140f1730b4ac39697bfad530409ac8472e4e9d"}], "stats": {"total": 408, "additions": 18, "deletions": 390}, "files": [{"sha": "3a4929a0f417259b0fd04869639b62a8400cb51d", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 183, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -78,21 +78,6 @@ version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n \n-[[package]]\n-name = \"bit-set\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e84c238982c4b1e1ee668d136c510c67a13465279c0cb367ea6baf6310620a80\"\n-dependencies = [\n- \"bit-vec\",\n-]\n-\n-[[package]]\n-name = \"bit-vec\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f59bbe95d4e52a6398ec21238d31577f2b28a9d86807f06ca59d191d8440d0bb\"\n-\n [[package]]\n name = \"bitflags\"\n version = \"1.2.1\"\n@@ -428,12 +413,6 @@ dependencies = [\n  \"byteorder\",\n ]\n \n-[[package]]\n-name = \"fuchsia-cprng\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n-\n [[package]]\n name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n@@ -791,15 +770,6 @@ dependencies = [\n  \"winapi 0.3.8\",\n ]\n \n-[[package]]\n-name = \"num-traits\"\n-version = \"0.2.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n-dependencies = [\n- \"autocfg 1.0.0\",\n-]\n-\n [[package]]\n name = \"num_cpus\"\n version = \"1.12.0\"\n@@ -916,30 +886,6 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n-[[package]]\n-name = \"proptest\"\n-version = \"0.9.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf6147d103a7c9d7598f4105cf049b15c99e2ecd93179bf024f0fd349be5ada4\"\n-dependencies = [\n- \"bit-set\",\n- \"bitflags\",\n- \"byteorder\",\n- \"lazy_static\",\n- \"num-traits\",\n- \"quick-error\",\n- \"rand 0.6.5\",\n- \"rand_chacha 0.1.1\",\n- \"rand_xorshift\",\n- \"regex-syntax\",\n-]\n-\n-[[package]]\n-name = \"quick-error\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n-\n [[package]]\n name = \"quote\"\n version = \"1.0.2\"\n@@ -1025,7 +971,7 @@ dependencies = [\n  \"ra_ide\",\n  \"ra_prof\",\n  \"ra_syntax\",\n- \"rand 0.7.3\",\n+ \"rand\",\n ]\n \n [[package]]\n@@ -1137,7 +1083,6 @@ dependencies = [\n  \"join_to_string\",\n  \"log\",\n  \"once_cell\",\n- \"proptest\",\n  \"ra_assists\",\n  \"ra_cfg\",\n  \"ra_db\",\n@@ -1147,7 +1092,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n- \"rand 0.7.3\",\n+ \"rand\",\n  \"rayon\",\n  \"rustc-hash\",\n  \"superslice\",\n@@ -1168,7 +1113,6 @@ dependencies = [\n  \"join_to_string\",\n  \"log\",\n  \"once_cell\",\n- \"proptest\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_fmt\",\n@@ -1281,7 +1225,6 @@ dependencies = [\n name = \"ra_text_edit\"\n version = \"0.1.0\"\n dependencies = [\n- \"proptest\",\n  \"test_utils\",\n  \"text_unit\",\n ]\n@@ -1317,25 +1260,6 @@ dependencies = [\n  \"ra_vfs\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.6.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-dependencies = [\n- \"autocfg 0.1.7\",\n- \"libc\",\n- \"rand_chacha 0.1.1\",\n- \"rand_core 0.4.2\",\n- \"rand_hc 0.1.0\",\n- \"rand_isaac\",\n- \"rand_jitter\",\n- \"rand_os\",\n- \"rand_pcg 0.1.2\",\n- \"rand_xorshift\",\n- \"winapi 0.3.8\",\n-]\n-\n [[package]]\n name = \"rand\"\n version = \"0.7.3\"\n@@ -1344,20 +1268,10 @@ checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n dependencies = [\n  \"getrandom\",\n  \"libc\",\n- \"rand_chacha 0.2.1\",\n- \"rand_core 0.5.1\",\n- \"rand_hc 0.2.0\",\n- \"rand_pcg 0.2.1\",\n-]\n-\n-[[package]]\n-name = \"rand_chacha\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n-dependencies = [\n- \"autocfg 0.1.7\",\n- \"rand_core 0.3.1\",\n+ \"rand_chacha\",\n+ \"rand_core\",\n+ \"rand_hc\",\n+ \"rand_pcg\",\n ]\n \n [[package]]\n@@ -1367,24 +1281,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n dependencies = [\n  \"c2-chacha\",\n- \"rand_core 0.5.1\",\n+ \"rand_core\",\n ]\n \n-[[package]]\n-name = \"rand_core\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n-dependencies = [\n- \"rand_core 0.4.2\",\n-]\n-\n-[[package]]\n-name = \"rand_core\"\n-version = \"0.4.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\n [[package]]\n name = \"rand_core\"\n version = \"0.5.1\"\n@@ -1394,66 +1293,13 @@ dependencies = [\n  \"getrandom\",\n ]\n \n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n-dependencies = [\n- \"rand_core 0.3.1\",\n-]\n-\n [[package]]\n name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n dependencies = [\n- \"rand_core 0.5.1\",\n-]\n-\n-[[package]]\n-name = \"rand_isaac\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n-dependencies = [\n- \"rand_core 0.3.1\",\n-]\n-\n-[[package]]\n-name = \"rand_jitter\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n-dependencies = [\n- \"libc\",\n- \"rand_core 0.4.2\",\n- \"winapi 0.3.8\",\n-]\n-\n-[[package]]\n-name = \"rand_os\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n-dependencies = [\n- \"cloudabi\",\n- \"fuchsia-cprng\",\n- \"libc\",\n- \"rand_core 0.4.2\",\n- \"rdrand\",\n- \"winapi 0.3.8\",\n-]\n-\n-[[package]]\n-name = \"rand_pcg\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n-dependencies = [\n- \"autocfg 0.1.7\",\n- \"rand_core 0.4.2\",\n+ \"rand_core\",\n ]\n \n [[package]]\n@@ -1462,16 +1308,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429\"\n dependencies = [\n- \"rand_core 0.5.1\",\n-]\n-\n-[[package]]\n-name = \"rand_xorshift\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n-dependencies = [\n- \"rand_core 0.3.1\",\n+ \"rand_core\",\n ]\n \n [[package]]\n@@ -1498,15 +1335,6 @@ dependencies = [\n  \"num_cpus\",\n ]\n \n-[[package]]\n-name = \"rdrand\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n-dependencies = [\n- \"rand_core 0.3.1\",\n-]\n-\n [[package]]\n name = \"redox_syscall\"\n version = \"0.1.56\"\n@@ -1604,7 +1432,7 @@ dependencies = [\n  \"indexmap\",\n  \"log\",\n  \"parking_lot\",\n- \"rand 0.7.3\",\n+ \"rand\",\n  \"rustc-hash\",\n  \"salsa-macros\",\n  \"smallvec\",\n@@ -1753,7 +1581,7 @@ checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n- \"rand 0.7.3\",\n+ \"rand\",\n  \"redox_syscall\",\n  \"remove_dir_all\",\n  \"winapi 0.3.8\","}, {"sha": "d50cf1d20aa573fbab85ce8cf334dee660d5f8b8", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -41,9 +41,3 @@ hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n \n [dev-dependencies]\n insta = \"0.13.0\"\n-\n-[dev-dependencies.proptest]\n-version = \"0.9.0\"\n-# Disable `fork` feature to allow compiling on webassembly\n-default-features = false\n-features = [\"std\", \"bit-set\", \"break-dead-code\"]"}, {"sha": "ad3acce59534a343593a3a2456e26201235efbc9", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -38,9 +38,3 @@ hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n \n [dev-dependencies]\n insta = \"0.13.0\"\n-\n-[dev-dependencies.proptest]\n-version = \"0.9.0\"\n-# Disable `fork` feature to allow compiling on webassembly\n-default-features = false\n-features = [\"std\", \"bit-set\", \"break-dead-code\"]"}, {"sha": "af7b759e5c665f02abbf5e8130383cbcb8913dfb", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -124,31 +124,9 @@ impl LineIndex {\n     }\n }\n \n-#[cfg(test)]\n-/// Simple reference implementation to use in proptests\n-pub fn to_line_col(text: &str, offset: TextUnit) -> LineCol {\n-    let mut res = LineCol { line: 0, col_utf16: 0 };\n-    for (i, c) in text.char_indices() {\n-        if i + c.len_utf8() > offset.to_usize() {\n-            // if it's an invalid offset, inside a multibyte char\n-            // return as if it was at the start of the char\n-            break;\n-        }\n-        if c == '\\n' {\n-            res.line += 1;\n-            res.col_utf16 = 0;\n-        } else {\n-            res.col_utf16 += 1;\n-        }\n-    }\n-    res\n-}\n-\n #[cfg(test)]\n mod test_line_index {\n     use super::*;\n-    use proptest::{prelude::*, proptest};\n-    use ra_text_edit::test_utils::{arb_offset, arb_text};\n \n     #[test]\n     fn test_line_index() {\n@@ -173,44 +151,6 @@ mod test_line_index {\n         assert_eq!(index.line_col(7.into()), LineCol { line: 2, col_utf16: 0 });\n     }\n \n-    fn arb_text_with_offset() -> BoxedStrategy<(TextUnit, String)> {\n-        arb_text().prop_flat_map(|text| (arb_offset(&text), Just(text))).boxed()\n-    }\n-\n-    fn to_line_col(text: &str, offset: TextUnit) -> LineCol {\n-        let mut res = LineCol { line: 0, col_utf16: 0 };\n-        for (i, c) in text.char_indices() {\n-            if i + c.len_utf8() > offset.to_usize() {\n-                // if it's an invalid offset, inside a multibyte char\n-                // return as if it was at the start of the char\n-                break;\n-            }\n-            if c == '\\n' {\n-                res.line += 1;\n-                res.col_utf16 = 0;\n-            } else {\n-                res.col_utf16 += 1;\n-            }\n-        }\n-        res\n-    }\n-\n-    proptest! {\n-        #[test]\n-        fn test_line_index_proptest((offset, text) in arb_text_with_offset()) {\n-            let expected = to_line_col(&text, offset);\n-            let line_index = LineIndex::new(&text);\n-            let actual = line_index.line_col(offset);\n-\n-            assert_eq!(actual, expected);\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod test_utf8_utf16_conv {\n-    use super::*;\n-\n     #[test]\n     fn test_char_len() {\n         assert_eq!('\u30e1'.len_utf8(), 3);"}, {"sha": "75a498151fef31129eaf54d891ceab8bd85d5972", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -297,45 +297,3 @@ impl RunningLineCol {\n         self.col_adjust += range.len() - TextUnit::from(1);\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use proptest::{prelude::*, proptest};\n-    use ra_text_edit::test_utils::{arb_offset, arb_text_with_edit};\n-    use ra_text_edit::TextEdit;\n-\n-    use crate::line_index;\n-\n-    use super::*;\n-\n-    #[derive(Debug)]\n-    struct ArbTextWithEditAndOffset {\n-        text: String,\n-        edit: TextEdit,\n-        edited_text: String,\n-        offset: TextUnit,\n-    }\n-\n-    fn arb_text_with_edit_and_offset() -> BoxedStrategy<ArbTextWithEditAndOffset> {\n-        arb_text_with_edit()\n-            .prop_flat_map(|x| {\n-                let edited_text = x.edit.apply(&x.text);\n-                let arb_offset = arb_offset(&edited_text);\n-                (Just(x), Just(edited_text), arb_offset).prop_map(|(x, edited_text, offset)| {\n-                    ArbTextWithEditAndOffset { text: x.text, edit: x.edit, edited_text, offset }\n-                })\n-            })\n-            .boxed()\n-    }\n-\n-    proptest! {\n-        #[test]\n-        fn test_translate_offset_with_edit(x in arb_text_with_edit_and_offset()) {\n-            let expected = line_index::to_line_col(&x.edited_text, x.offset);\n-            let line_index = LineIndex::new(&x.text);\n-            let actual = translate_offset_with_edit(&line_index, x.offset, &x.edit);\n-\n-            assert_eq!(actual, expected);\n-        }\n-    }\n-}"}, {"sha": "4490ae43bc95efbb78865fcda9257f2288fd5b7b", "filename": "crates/ra_text_edit/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_text_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_text_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2FCargo.toml?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -11,11 +11,5 @@ doctest = false\n [dependencies]\n text_unit = \"0.1.6\"\n \n-[dependencies.proptest]\n-version = \"0.9.0\"\n-# Disable `fork` feature to allow compiling on webassembly\n-default-features = false\n-features = [\"std\", \"bit-set\", \"break-dead-code\"]\n-\n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "f6769e6a64b2eef43135a806ccb4ba5906b7614e", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -1,12 +1,11 @@\n //! FIXME: write short doc here\n \n mod text_edit;\n-pub mod test_utils;\n-\n-pub use crate::text_edit::{TextEdit, TextEditBuilder};\n \n use text_unit::{TextRange, TextUnit};\n \n+pub use crate::text_edit::{TextEdit, TextEditBuilder};\n+\n /// Must not overlap with other `AtomTextEdit`s\n #[derive(Debug, Clone)]\n pub struct AtomTextEdit {"}, {"sha": "d4c7840ffade5b4bde61d1dc7b5e0d9dd97ec2e8", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b4c30fb8961177809646ccd72a7f62c7fd4fca4f/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c30fb8961177809646ccd72a7f62c7fd4fca4f/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=b4c30fb8961177809646ccd72a7f62c7fd4fca4f", "patch": "@@ -1,83 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use crate::{AtomTextEdit, TextEdit};\n-use proptest::prelude::*;\n-use text_unit::{TextRange, TextUnit};\n-\n-pub fn arb_text() -> proptest::string::RegexGeneratorStrategy<String> {\n-    // generate multiple newlines\n-    proptest::string::string_regex(\"(.*\\n?)*\").unwrap()\n-}\n-\n-fn text_offsets(text: &str) -> Vec<TextUnit> {\n-    text.char_indices().map(|(i, _)| TextUnit::from_usize(i)).collect()\n-}\n-\n-pub fn arb_offset(text: &str) -> BoxedStrategy<TextUnit> {\n-    let offsets = text_offsets(text);\n-    // this is necessary to avoid \"Uniform::new called with `low >= high`\" panic\n-    if offsets.is_empty() {\n-        Just(TextUnit::from(0)).boxed()\n-    } else {\n-        prop::sample::select(offsets).boxed()\n-    }\n-}\n-\n-pub fn arb_text_edit(text: &str) -> BoxedStrategy<TextEdit> {\n-    if text.is_empty() {\n-        // only valid edits\n-        return Just(vec![])\n-            .boxed()\n-            .prop_union(\n-                arb_text()\n-                    .prop_map(|text| vec![AtomTextEdit::insert(TextUnit::from(0), text)])\n-                    .boxed(),\n-            )\n-            .prop_map(TextEdit::from_atoms)\n-            .boxed();\n-    }\n-\n-    let offsets = text_offsets(text);\n-    let max_cuts = 7.min(offsets.len());\n-\n-    proptest::sample::subsequence(offsets, 0..max_cuts)\n-        .prop_flat_map(|cuts| {\n-            let strategies: Vec<_> = cuts\n-                .chunks(2)\n-                .map(|chunk| match *chunk {\n-                    [from, to] => {\n-                        let range = TextRange::from_to(from, to);\n-                        Just(AtomTextEdit::delete(range))\n-                            .boxed()\n-                            .prop_union(\n-                                arb_text()\n-                                    .prop_map(move |text| AtomTextEdit::replace(range, text))\n-                                    .boxed(),\n-                            )\n-                            .boxed()\n-                    }\n-                    [x] => arb_text().prop_map(move |text| AtomTextEdit::insert(x, text)).boxed(),\n-                    _ => unreachable!(),\n-                })\n-                .collect();\n-            strategies\n-        })\n-        .prop_map(TextEdit::from_atoms)\n-        .boxed()\n-}\n-\n-#[derive(Debug, Clone)]\n-pub struct ArbTextWithEdit {\n-    pub text: String,\n-    pub edit: TextEdit,\n-}\n-\n-pub fn arb_text_with_edit() -> BoxedStrategy<ArbTextWithEdit> {\n-    let text = arb_text();\n-    text.prop_flat_map(|s| {\n-        let edit = arb_text_edit(&s);\n-        (Just(s), edit)\n-    })\n-    .prop_map(|(text, edit)| ArbTextWithEdit { text, edit })\n-    .boxed()\n-}"}, {"sha": "7ae73b9344d4971ae5b5c9d1c45ca1b59b53043a", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b0135c64da13d64fb0add0c96e84289beb07b4/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b0135c64da13d64fb0add0c96e84289beb07b4/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=f7b0135c64da13d64fb0add0c96e84289beb07b4", "patch": "@@ -1,5 +1,6 @@\n use std::{collections::HashMap, fs, io::prelude::*, io::BufReader, path::Path};\n \n+use anyhow::Context;\n use walkdir::{DirEntry, WalkDir};\n use xtask::project_root;\n \n@@ -50,7 +51,10 @@ fn no_docs_comments() {\n         }\n         let mut reader = BufReader::new(fs::File::open(f.path()).unwrap());\n         let mut line = String::new();\n-        reader.read_line(&mut line).unwrap();\n+        reader\n+            .read_line(&mut line)\n+            .with_context(|| format!(\"Failed to read {}\", f.path().display()))\n+            .unwrap();\n \n         if line.starts_with(\"//!\") {\n             if line.contains(\"FIXME\") {"}]}