{"sha": "c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "node_id": "C_kwDOAAsO6NoAKGMxZTdhMDdjOWM0MTJiMmQzY2E2YjM4NjkwMjNhNDVlZTY4MTJiMDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T19:54:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T19:54:40Z"}, "message": "Auto merge of #7811 - rust-lang:eq-op-testless, r=xFrednet\n\navoid `eq_op` in test code\n\nAdd a check to `eq_op` that will avoid linting in functions annotated with `#[test]`\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: avoid `eq_op` in test functions", "tree": {"sha": "a1b02566f3036fdfa02d6a9d2d1aea98504c4cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b02566f3036fdfa02d6a9d2d1aea98504c4cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "html_url": "https://github.com/rust-lang/rust/commit/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389a74b31aabca4aac3289763eeb2eccedd1b988", "url": "https://api.github.com/repos/rust-lang/rust/commits/389a74b31aabca4aac3289763eeb2eccedd1b988", "html_url": "https://github.com/rust-lang/rust/commit/389a74b31aabca4aac3289763eeb2eccedd1b988"}, {"sha": "e88c956e1e18a99af55af00c8917f8e975d534c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88c956e1e18a99af55af00c8917f8e975d534c5", "html_url": "https://github.com/rust-lang/rust/commit/e88c956e1e18a99af55af00c8917f8e975d534c5"}], "stats": {"total": 118, "additions": 105, "deletions": 13}, "files": [{"sha": "655560afd4250045d8675529fc41bb5abf6f8677", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of};\n+use clippy_utils::{\n+    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of, is_in_test_function,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n@@ -81,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                         if macro_args.len() == 2;\n                         let (lhs, rhs) = (macro_args[0], macro_args[1]);\n                         if eq_expr_value(cx, lhs, rhs);\n-\n+                        if !is_in_test_function(cx.tcx, e.hir_id);\n                         then {\n                             span_lint(\n                                 cx,\n@@ -108,7 +110,10 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n             if macro_with_not_op(&left.kind) || macro_with_not_op(&right.kind) {\n                 return;\n             }\n-            if is_useless_with_eq_exprs(op.node.into()) && eq_expr_value(cx, left, right) {\n+            if is_useless_with_eq_exprs(op.node.into())\n+                && eq_expr_value(cx, left, right)\n+                && !is_in_test_function(cx.tcx, e.hir_id)\n+            {\n                 span_lint(\n                     cx,\n                     EQ_OP,"}, {"sha": "c540e1ebc9cc718764dadb78045e720c566ca7e9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "patch": "@@ -69,11 +69,13 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{self, walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, Body, Constness, Destination, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl,\n-    ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node, Param, Pat,\n-    PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, Arm, BindingAnnotation, Block, Body, Constness, Destination, Expr, ExprKind, FnDecl, ForeignItem, GenericArgs,\n+    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node,\n+    Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n+    UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -2064,16 +2066,72 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     false\n }\n \n-/// Checks whether item either has `test` attribute applied, or\n-/// is a module with `test` in its name.\n-pub fn is_test_module_or_function(tcx: TyCtxt<'_>, item: &Item<'_>) -> bool {\n-    if let Some(def_id) = tcx.hir().opt_local_def_id(item.hir_id()) {\n-        if tcx.has_attr(def_id.to_def_id(), sym::test) {\n-            return true;\n+struct VisitConstTestStruct<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    names: Vec<Symbol>,\n+    found: bool,\n+}\n+impl<'hir> ItemLikeVisitor<'hir> for VisitConstTestStruct<'hir> {\n+    fn visit_item(&mut self, item: &Item<'_>) {\n+        if let ItemKind::Const(ty, _body) = item.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+                // We could also check for the type name `test::TestDescAndFn`\n+                // and the `#[rustc_test_marker]` attribute?\n+                if let Res::Def(DefKind::Struct, _) = path.res {\n+                    let has_test_marker = self\n+                        .tcx\n+                        .hir()\n+                        .attrs(item.hir_id())\n+                        .iter()\n+                        .any(|a| a.has_name(sym::rustc_test_marker));\n+                    if has_test_marker && self.names.contains(&item.ident.name) {\n+                        self.found = true;\n+                    }\n+                }\n+            }\n         }\n     }\n+    fn visit_trait_item(&mut self, _: &TraitItem<'_>) {}\n+    fn visit_impl_item(&mut self, _: &ImplItem<'_>) {}\n+    fn visit_foreign_item(&mut self, _: &ForeignItem<'_>) {}\n+}\n \n-    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().split('_').any(|a| a == \"test\" || a == \"tests\")\n+/// Checks if the function containing the given `HirId` is a `#[test]` function\n+///\n+/// Note: If you use this function, please add a `#[test]` case in `tests/ui_test`.\n+pub fn is_in_test_function(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n+    let names: Vec<_> = tcx\n+        .hir()\n+        .parent_iter(id)\n+        // Since you can nest functions we need to collect all until we leave\n+        // function scope\n+        .filter_map(|(_id, node)| {\n+            if let Node::Item(item) = node {\n+                if let ItemKind::Fn(_, _, _) = item.kind {\n+                    return Some(item.ident.name);\n+                }\n+            }\n+            None\n+        })\n+        .collect();\n+    let parent_mod = tcx.parent_module(id);\n+    let mut vis = VisitConstTestStruct {\n+        tcx,\n+        names,\n+        found: false,\n+    };\n+    tcx.hir().visit_item_likes_in_module(parent_mod, &mut vis);\n+    vis.found\n+}\n+\n+/// Checks whether item either has `test` attribute appelied, or\n+/// is a module with `test` in its name.\n+///\n+/// Note: If you use this function, please add a `#[test]` case in `tests/ui_test`.\n+pub fn is_test_module_or_function(tcx: TyCtxt<'_>, item: &Item<'_>) -> bool {\n+    is_in_test_function(tcx, item.hir_id())\n+        || matches!(item.kind, ItemKind::Mod(..))\n+            && item.ident.name.as_str().split('_').any(|a| a == \"test\" || a == \"tests\")\n }\n \n macro_rules! op_utils {"}, {"sha": "c15835ef2995687327d9227c861b1decd8b3f85d", "filename": "tests/compile-test.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "patch": "@@ -149,6 +149,19 @@ fn run_ui(cfg: &mut compiletest::Config) {\n     compiletest::run_tests(cfg);\n }\n \n+fn run_ui_test(cfg: &mut compiletest::Config) {\n+    cfg.mode = TestMode::Ui;\n+    cfg.src_base = Path::new(\"tests\").join(\"ui_test\");\n+    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", std::fs::canonicalize(\"tests\").unwrap());\n+    let rustcflags = cfg.target_rustcflags.get_or_insert_with(Default::default);\n+    let len = rustcflags.len();\n+    rustcflags.push_str(\" --test\");\n+    compiletest::run_tests(cfg);\n+    if let Some(ref mut flags) = &mut cfg.target_rustcflags {\n+        flags.truncate(len);\n+    }\n+}\n+\n fn run_internal_tests(cfg: &mut compiletest::Config) {\n     // only run internal tests with the internal-tests feature\n     if !RUN_INTERNAL_TESTS {\n@@ -312,6 +325,7 @@ fn compile_test() {\n     prepare_env();\n     let mut config = default_config();\n     run_ui(&mut config);\n+    run_ui_test(&mut config);\n     run_ui_toml(&mut config);\n     run_ui_cargo(&mut config);\n     run_internal_tests(&mut config);"}, {"sha": "f2f5f1e588ed408e8a252148e7c9f48b48001bda", "filename": "tests/ui_test/eq_op.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/tests%2Fui_test%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e7a07c9c412b2d3ca6b3869023a45ee6812b04/tests%2Fui_test%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui_test%2Feq_op.rs?ref=c1e7a07c9c412b2d3ca6b3869023a45ee6812b04", "patch": "@@ -0,0 +1,15 @@\n+#[warn(clippy::eq_op)]\n+#[test]\n+fn eq_op_shouldnt_trigger_in_tests() {\n+    let a = 1;\n+    let result = a + 1 == 1 + a;\n+    assert!(result);\n+}\n+\n+#[test]\n+fn eq_op_macros_shouldnt_trigger_in_tests() {\n+    let a = 1;\n+    let b = 2;\n+    assert_eq!(a, a);\n+    assert_eq!(a + b, b + a);\n+}"}]}