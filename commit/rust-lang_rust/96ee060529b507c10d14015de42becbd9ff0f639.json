{"sha": "96ee060529b507c10d14015de42becbd9ff0f639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZWUwNjA1MjliNTA3YzEwZDE0MDE1ZGU0MmJlY2JkOWZmMGY2Mzk=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-12-01T02:57:07Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-12-01T05:24:36Z"}, "message": "Preserve polarity on negative non-trait impl", "tree": {"sha": "6728ae412cd26618a9072faf0135c9c8b3e5c368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6728ae412cd26618a9072faf0135c9c8b3e5c368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ee060529b507c10d14015de42becbd9ff0f639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ee060529b507c10d14015de42becbd9ff0f639", "html_url": "https://github.com/rust-lang/rust/commit/96ee060529b507c10d14015de42becbd9ff0f639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ee060529b507c10d14015de42becbd9ff0f639/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f33eb7d67d729c095a7ac9bce702f6351396ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f33eb7d67d729c095a7ac9bce702f6351396ba", "html_url": "https://github.com/rust-lang/rust/commit/29f33eb7d67d729c095a7ac9bce702f6351396ba"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "7b1bb6ce7be33e8cc0866bdc2ce6eb572b4b5581", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96ee060529b507c10d14015de42becbd9ff0f639/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ee060529b507c10d14015de42becbd9ff0f639/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=96ee060529b507c10d14015de42becbd9ff0f639", "patch": "@@ -857,6 +857,8 @@ fn format_impl_ref_and_type(\n             ast::ImplPolarity::Positive => \"\",\n         };\n \n+        let polarity_overhead;\n+        let trait_ref_overhead;\n         if let Some(ref trait_ref) = *trait_ref {\n             let result_len = last_line_width(&result);\n             result.push_str(&rewrite_trait_ref(\n@@ -866,11 +868,14 @@ fn format_impl_ref_and_type(\n                 polarity_str,\n                 result_len,\n             )?);\n+            polarity_overhead = 0; // already written\n+            trait_ref_overhead = \" for\".len();\n+        } else {\n+            polarity_overhead = polarity_str.len();\n+            trait_ref_overhead = 0;\n         }\n \n         // Try to put the self type in a single line.\n-        // ` for`\n-        let trait_ref_overhead = if trait_ref.is_some() { 4 } else { 0 };\n         let curly_brace_overhead = if generics.where_clause.predicates.is_empty() {\n             // If there is no where-clause adapt budget for type formatting to take space and curly\n             // brace into account.\n@@ -881,7 +886,10 @@ fn format_impl_ref_and_type(\n         } else {\n             0\n         };\n-        let used_space = last_line_width(&result) + trait_ref_overhead + curly_brace_overhead;\n+        let used_space = last_line_width(&result)\n+            + polarity_overhead\n+            + trait_ref_overhead\n+            + curly_brace_overhead;\n         // 1 = space before the type.\n         let budget = context.budget(used_space + 1);\n         if let Some(self_ty_str) = self_ty.rewrite(context, Shape::legacy(budget, offset)) {\n@@ -890,6 +898,7 @@ fn format_impl_ref_and_type(\n                     result.push_str(\" for \");\n                 } else {\n                     result.push(' ');\n+                    result.push_str(polarity_str);\n                 }\n                 result.push_str(&self_ty_str);\n                 return Some(result);\n@@ -903,8 +912,10 @@ fn format_impl_ref_and_type(\n         result.push_str(&new_line_offset.to_string(context.config));\n         if trait_ref.is_some() {\n             result.push_str(\"for \");\n+        } else {\n+            result.push_str(polarity_str);\n         }\n-        let budget = context.budget(last_line_width(&result));\n+        let budget = context.budget(last_line_width(&result) + polarity_overhead);\n         let type_offset = match context.config.indent_style() {\n             IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n             IndentStyle::Block => new_line_offset,"}]}