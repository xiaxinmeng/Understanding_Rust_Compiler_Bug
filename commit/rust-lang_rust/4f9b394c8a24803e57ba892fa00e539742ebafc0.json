{"sha": "4f9b394c8a24803e57ba892fa00e539742ebafc0", "node_id": "C_kwDOAAsO6NoAKDRmOWIzOTRjOGEyNDgwM2U1N2JhODkyZmEwMGU1Mzk3NDJlYmFmYzA", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-05-29T14:33:37Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-05-30T11:54:29Z"}, "message": "Swap out CURRENT_RUSTC_VERSION to 1.71.0", "tree": {"sha": "ee9a747441ec21a0b0f3c2ea777be96b8cf58415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9a747441ec21a0b0f3c2ea777be96b8cf58415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9b394c8a24803e57ba892fa00e539742ebafc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9b394c8a24803e57ba892fa00e539742ebafc0", "html_url": "https://github.com/rust-lang/rust/commit/4f9b394c8a24803e57ba892fa00e539742ebafc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9b394c8a24803e57ba892fa00e539742ebafc0/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578bcbc2b42191556c4438b80ba37fafa4193e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/578bcbc2b42191556c4438b80ba37fafa4193e82", "html_url": "https://github.com/rust-lang/rust/commit/578bcbc2b42191556c4438b80ba37fafa4193e82"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "0170d52e82a2ef1b024708cdf3884af957fe9675", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -131,7 +131,7 @@ declare_features! (\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n     /// Allows using `#[debugger_visualizer]` attribute.\n-    (accepted, debugger_visualizer, \"CURRENT_RUSTC_VERSION\", Some(95939), None),\n+    (accepted, debugger_visualizer, \"1.71.0\", Some(95939), None),\n     /// Allows rustc to inject a default alloc_error_handler\n     (accepted, default_alloc_error_handler, \"1.68.0\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n@@ -281,7 +281,7 @@ declare_features! (\n     /// Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     /// Allows the use of raw-dylibs (RFC 2627).\n-    (accepted, raw_dylib, \"CURRENT_RUSTC_VERSION\", Some(58713), None),\n+    (accepted, raw_dylib, \"1.71.0\", Some(58713), None),\n     /// Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n     /// Allows relaxing the coherence rules such that"}, {"sha": "dde9890dfa5d68f6b0201cdef549515ec21cd316", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -165,7 +165,7 @@ declare_features! (\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n     /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!\n-    (incomplete, negative_bounds, \"CURRENT_RUSTC_VERSION\", None, None),\n+    (incomplete, negative_bounds, \"1.71.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n@@ -314,15 +314,15 @@ declare_features! (\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Allows builtin # foo() syntax\n-    (active, builtin_syntax, \"CURRENT_RUSTC_VERSION\", Some(110680), None),\n+    (active, builtin_syntax, \"1.71.0\", Some(110680), None),\n     /// Allows `c\"foo\"` literals.\n-    (active, c_str_literals, \"CURRENT_RUSTC_VERSION\", Some(105723), None),\n+    (active, c_str_literals, \"1.71.0\", Some(105723), None),\n     /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n     /// Allows the use of `#[cfg(overflow_checks)` to check if integer overflow behaviour.\n-    (active, cfg_overflow_checks, \"CURRENT_RUSTC_VERSION\", Some(111466), None),\n+    (active, cfg_overflow_checks, \"1.71.0\", Some(111466), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`.\n@@ -338,7 +338,7 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n     /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n-    (active, cfi_encoding, \"CURRENT_RUSTC_VERSION\", Some(89653), None),\n+    (active, cfi_encoding, \"1.71.0\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "59e3f887b523225948bdd3f14074c7cd19edf5c0", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -2624,7 +2624,7 @@ impl ToString for String {\n }\n \n #[cfg(not(no_global_oom_handling))]\n-#[stable(feature = \"fmt_arguments_to_string_specialization\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"fmt_arguments_to_string_specialization\", since = \"1.71.0\")]\n impl ToString for fmt::Arguments<'_> {\n     #[inline]\n     fn to_string(&self) -> String {"}, {"sha": "e1e1a9b408d235cc27b85a7b62bcd6e3d312d5c5", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -531,8 +531,8 @@ impl CStr {\n     /// # }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"cstr_is_empty\", since = \"1.71.0\")]\n+    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"1.71.0\")]\n     pub const fn is_empty(&self) -> bool {\n         // SAFETY: We know there is at least one byte; for empty strings it\n         // is the NUL terminator."}, {"sha": "794a57f09226c035c50fda5d4f157b94f029ca60", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -695,7 +695,7 @@ pub trait BuildHasher {\n     ///     bh.hash_one(&OrderAmbivalentPair(2, 10))\n     /// );\n     /// ```\n-    #[stable(feature = \"build_hasher_simple_hash_one\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"build_hasher_simple_hash_one\", since = \"1.71.0\")]\n     fn hash_one<T: Hash>(&self, x: T) -> u64\n     where\n         Self: Sized,"}, {"sha": "f5c5dd29f505a06de11e3aaa67e02363e371acbe", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -2260,7 +2260,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(ptr: *const T) -> T;\n "}, {"sha": "7f06e170ad0f022d763e1b7434122f3919db0ce4", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -769,8 +769,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn is_positive(self) -> bool {\n                     self.get().is_positive()\n                 }\n@@ -794,8 +794,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn is_negative(self) -> bool {\n                     self.get().is_negative()\n                 }\n@@ -819,8 +819,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn checked_neg(self) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_neg() {\n                         // SAFETY: negation of nonzero cannot yield zero values.\n@@ -851,8 +851,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn overflowing_neg(self) -> ($Ty, bool) {\n                     let (result, overflow) = self.get().overflowing_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n@@ -884,8 +884,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn saturating_neg(self) -> $Ty {\n                     if let Some(result) = self.checked_neg() {\n                         return result;\n@@ -916,16 +916,16 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"1.71.0\")]\n                 pub const fn wrapping_neg(self) -> $Ty {\n                     let result = self.get().wrapping_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n                     unsafe { $Ty::new_unchecked(result) }\n                 }\n             }\n \n-            #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")]\n+            #[stable(feature = \"signed_nonzero_neg\", since = \"1.71.0\")]\n             impl Neg for $Ty {\n                 type Output = $Ty;\n \n@@ -937,7 +937,7 @@ macro_rules! nonzero_signed_operations {\n             }\n \n             forward_ref_unop! { impl Neg, neg for $Ty,\n-                #[stable(feature = \"signed_nonzero_neg\", since = \"CURRENT_RUSTC_VERSION\")] }\n+                #[stable(feature = \"signed_nonzero_neg\", since = \"1.71.0\")] }\n         )+\n     }\n }"}, {"sha": "6e1e862d3cd4952a38f102cc74b999f962754f0d", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -1195,7 +1195,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1236,7 +1236,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "d0cb2f715d067161268ca155f739c249b2ff50a3", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -1139,7 +1139,7 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n #[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n@@ -1256,7 +1256,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n #[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {"}, {"sha": "2fe5164c3f060e1eae3b35dda91bc4bc5eb76fa3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -1305,7 +1305,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1346,7 +1346,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "c87af35fbc44972314bd69f2875ddc3acb954233", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -1854,7 +1854,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_slice_split_at_not_mut\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_slice_split_at_not_mut\", since = \"1.71.0\")]\n     #[rustc_allow_const_fn_unstable(slice_split_at_unchecked)]\n     #[inline]\n     #[track_caller]"}, {"sha": "a1388dfeee643cd2e87b2fde1987d812018aa4da", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -100,7 +100,7 @@ macro_rules! tuple_impls {\n             }\n         }\n \n-        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.71.0\")]\n         impl<T> From<[T; ${count(T)}]> for ($(${ignore(T)} T,)+) {\n             #[inline]\n             #[allow(non_snake_case)]\n@@ -110,7 +110,7 @@ macro_rules! tuple_impls {\n             }\n         }\n \n-        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"array_tuple_conv\", since = \"1.71.0\")]\n         impl<T> From<($(${ignore(T)} T,)+)> for [T; ${count(T)}] {\n             #[inline]\n             #[allow(non_snake_case)]"}, {"sha": "274af08a3881c963c7c7ec4ea47f99c9e03ec286", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -437,7 +437,7 @@ impl<T: AsHandle> AsHandle for &mut T {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n /// This impl allows implementing traits that require `AsHandle` on Arc.\n /// ```\n /// # #[cfg(windows)] mod group_cfg {\n@@ -457,15 +457,15 @@ impl<T: AsHandle> AsHandle for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsHandle> AsHandle for crate::rc::Rc<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         (**self).as_handle()\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsHandle> AsHandle for Box<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {"}, {"sha": "6359835cad5d9221888a7f686d2045caf4eb9078", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9b394c8a24803e57ba892fa00e539742ebafc0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=4f9b394c8a24803e57ba892fa00e539742ebafc0", "patch": "@@ -254,7 +254,7 @@ impl<T: AsSocket> AsSocket for &mut T {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n /// This impl allows implementing traits that require `AsSocket` on Arc.\n /// ```\n /// # #[cfg(windows)] mod group_cfg {\n@@ -274,15 +274,15 @@ impl<T: AsSocket> AsSocket for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsSocket> AsSocket for crate::rc::Rc<T> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         (**self).as_socket()\n     }\n }\n \n-#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"as_windows_ptrs\", since = \"1.71.0\")]\n impl<T: AsSocket> AsSocket for Box<T> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {"}]}