{"sha": "d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYzUwOWFkMWI4YTEzMTAyZTdjYjZiYTJiZjFkMmRjNzVlNTE3N2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T01:47:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T19:14:33Z"}, "message": "Remove a bunch of string builtins. Issue #855", "tree": {"sha": "045c5ba5154157918d0817846b178a33ccfbfcfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045c5ba5154157918d0817846b178a33ccfbfcfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "html_url": "https://github.com/rust-lang/rust/commit/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bc386c53e02665a8aebeea454eac8ff27f2b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bc386c53e02665a8aebeea454eac8ff27f2b7b", "html_url": "https://github.com/rust-lang/rust/commit/a7bc386c53e02665a8aebeea454eac8ff27f2b7b"}], "stats": {"total": 108, "additions": 6, "deletions": 102}, "files": [{"sha": "cac2de8ee3ba9ff7c594570c18f895a90291d344", "filename": "src/lib/str.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "patch": "@@ -3,13 +3,7 @@ export unsafe_from_bytes;\n native \"rust\" mod rustrt {\n     type sbuf;\n     fn str_buf(s: str) -> sbuf;\n-    fn str_byte_len(s: str) -> uint;\n-    fn str_alloc(n_bytes: uint) -> str;\n     fn str_from_vec(b: &[mutable? u8]) -> str;\n-    fn str_from_cstr(cstr: sbuf) -> str;\n-    fn str_from_buf(buf: sbuf, len: uint) -> str;\n-    fn str_push_byte(s: str, byte: uint) -> str;\n-    fn str_slice(s: str, begin: uint, end: uint) -> str;\n     fn refcount<T>(s: str) -> uint;\n }\n "}, {"sha": "1b57d0adb8335943adb456853d080befdf321c30", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "patch": "@@ -140,71 +140,12 @@ vec_alloc_with_data(rust_task *task,\n     return new (mem) rust_evec(alloc, fill * elt_size, (uint8_t*)d);\n }\n \n-extern \"C\" CDECL rust_str*\n-str_alloc(rust_task *task, size_t n_bytes)\n-{\n-    rust_str *st = vec_alloc_with_data(task,\n-                                       n_bytes + 1,  // +1 to fit at least \"\"\n-                                       1, 1,\n-                                       (void*)\"\");\n-    if (!st) {\n-        task->fail();\n-        return NULL;\n-    }\n-    return st;\n-}\n-\n-extern \"C\" CDECL rust_str*\n-str_push_byte(rust_task* task, rust_str* v, size_t byte)\n-{\n-    size_t fill = v->fill;\n-    size_t alloc = next_power_of_two(sizeof(rust_evec) + fill + 1);\n-    if (v->ref_count > 1 || v->alloc < alloc) {\n-        v = vec_alloc_with_data(task, fill + 1, fill, 1, (void*)&v->data[0]);\n-        if (!v) {\n-            task->fail();\n-            return NULL;\n-        }\n-    }\n-    else if (v->ref_count != CONST_REFCOUNT) {\n-        v->ref();\n-    }\n-    v->data[fill-1] = (char)byte;\n-    v->data[fill] = '\\0';\n-    v->fill++;\n-    return v;\n-}\n-\n-extern \"C\" CDECL rust_str*\n-str_slice(rust_task* task, rust_str* v, size_t begin, size_t end)\n-{\n-    size_t len = end - begin;\n-    rust_str *st =\n-        vec_alloc_with_data(task,\n-                            len + 1, // +1 to fit at least '\\0'\n-                            len,\n-                            1,\n-                            len ? v->data + begin : NULL);\n-    if (!st) {\n-        task->fail();\n-        return NULL;\n-    }\n-    st->data[st->fill++] = '\\0';\n-    return st;\n-}\n-\n extern \"C\" CDECL char const *\n str_buf(rust_task *task, rust_str *s)\n {\n     return (char const *)&s->data[0];\n }\n \n-extern \"C\" CDECL size_t\n-str_byte_len(rust_task *task, rust_str *s)\n-{\n-    return s->fill - 1;  // -1 for the '\\0' terminator.\n-}\n-\n extern \"C\" CDECL rust_str *\n str_from_vec(rust_task *task, rust_vec **vp)\n {\n@@ -252,29 +193,6 @@ rust_istr_push(rust_task* task, rust_vec** sp, uint8_t byte) {\n     (*sp)->fill = fill + 1;\n }\n \n-extern \"C\" CDECL rust_str *\n-str_from_cstr(rust_task *task, char *sbuf)\n-{\n-    size_t len = strlen(sbuf) + 1;\n-    rust_str *st = vec_alloc_with_data(task, len, len, 1, sbuf);\n-    if (!st) {\n-        task->fail();\n-        return NULL;\n-    }\n-    return st;\n-}\n-\n-extern \"C\" CDECL rust_str *\n-str_from_buf(rust_task *task, char *buf, unsigned int len) {\n-    rust_str *st = vec_alloc_with_data(task, len + 1, len, 1, buf);\n-    if (!st) {\n-        task->fail();\n-        return NULL;\n-    }\n-    st->data[st->fill++] = '\\0';\n-    return st;\n-}\n-\n extern \"C\" CDECL void *\n rand_new(rust_task *task)\n {"}, {"sha": "1b623da6c2bfe82b72eebf3e3c83b8d16f61593a", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "patch": "@@ -62,16 +62,10 @@ sched_threads\n size_of\n squareroot\n start_task\n-str_alloc\n str_buf\n-str_byte_len\n-str_from_buf\n-str_from_cstr\n str_from_vec\n vec_reserve_shared\n vec_from_buf_shared\n-str_push_byte\n-str_slice\n task_sleep\n task_yield\n task_join"}, {"sha": "eee15a413942ab74e15e0bae38f9ce64f7b06aa5", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "patch": "@@ -118,16 +118,14 @@ fn test_fn() {\n }\n \n native \"rust\" mod native_mod = \"\" {\n-    fn str_byte_len(s: str) -> uint;\n-    // This isn't actually the signature of str_alloc, but since\n-    // we're not calling it that shouldn't matter\n-    fn str_alloc(s: str) -> uint;\n+    fn do_gc();\n+    fn unsupervise();\n }\n \n // FIXME: comparison of native fns\n fn test_native_fn() {\n-    assert (native_mod::str_byte_len == native_mod::str_byte_len);\n-    assert (native_mod::str_byte_len != native_mod::str_alloc);\n+    assert (native_mod::do_gc == native_mod::do_gc);\n+    assert (native_mod::do_gc != native_mod::unsupervise);\n }\n \n fn test_obj() {"}, {"sha": "5ee6d2eaeeebf2a60ca14ca4281daa45140c24a8", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=d0c509ad1b8a13102e7cb6ba2bf1d2dc75e5177e", "patch": "@@ -81,7 +81,7 @@ fn test_in_fn_ctxt() {\n mod test_native_items {\n     native \"rust\" mod rustrt {\n         #[cfg(bogus)]\n-        fn str_byte_len(s: str) -> uint;\n-        fn str_byte_len(s: str) -> uint;\n+        fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n+        fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n     }\n }"}]}