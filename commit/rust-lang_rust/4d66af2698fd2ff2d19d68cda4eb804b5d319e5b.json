{"sha": "4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjZhZjI2OThmZDJmZjJkMTlkNjhjZGE0ZWI4MDRiNWQzMTllNWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T21:48:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "librustc: De-`@mut` the span handler", "tree": {"sha": "73a86f33d06e630b2c45d81532c1f9bda62627d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a86f33d06e630b2c45d81532c1f9bda62627d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "html_url": "https://github.com/rust-lang/rust/commit/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1b535eb1aa7614e40538ca5892a71199f804b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1b535eb1aa7614e40538ca5892a71199f804b9", "html_url": "https://github.com/rust-lang/rust/commit/7e1b535eb1aa7614e40538ca5892a71199f804b9"}], "stats": {"total": 81, "additions": 38, "deletions": 43}, "files": [{"sha": "eaa55ba945dab7079232e0eaeea51d414c6ec539", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -883,7 +883,7 @@ pub fn build_session(sopts: @session::options, demitter: @diagnostic::Emitter)\n pub fn build_session_(sopts: @session::options,\n                       cm: @codemap::CodeMap,\n                       demitter: @diagnostic::Emitter,\n-                      span_diagnostic_handler: @mut diagnostic::SpanHandler)\n+                      span_diagnostic_handler: @diagnostic::SpanHandler)\n                       -> Session {\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,"}, {"sha": "d17e4ae8059dccb8205411d159a25a708a942130", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -209,7 +209,7 @@ pub struct Session_ {\n     // For a library crate, this is always none\n     entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n     entry_type: Cell<Option<EntryFnType>>,\n-    span_diagnostic: @mut diagnostic::SpanHandler,\n+    span_diagnostic: @diagnostic::SpanHandler,\n     filesearch: @filesearch::FileSearch,\n     building_library: Cell<bool>,\n     working_dir: Path,\n@@ -292,7 +292,7 @@ impl Session_ {\n \n         v\n     }\n-    pub fn diagnostic(&self) -> @mut diagnostic::SpanHandler {\n+    pub fn diagnostic(&self) -> @diagnostic::SpanHandler {\n         self.span_diagnostic\n     }\n     pub fn debugging_opt(&self, opt: uint) -> bool {"}, {"sha": "cb6d5e3c99ce71db38ca05923024700d7a703901", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -86,7 +86,7 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n }\n \n fn warn_if_multiple_versions(e: &mut Env,\n-                             diag: @mut SpanHandler,\n+                             diag: @SpanHandler,\n                              crate_cache: &[cache_entry]) {\n     if crate_cache.len() != 0u {\n         let name = crate_cache[crate_cache.len() - 1].crateid.name.clone();"}, {"sha": "fd2deb809842638a0cd79f258dabc455ab2e4fe5", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -57,7 +57,7 @@ pub type encode_inlined_item<'a> = 'a |ecx: &EncodeContext,\n                                              ii: ast::inlined_item|;\n \n pub struct EncodeParams<'a> {\n-    diag: @mut SpanHandler,\n+    diag: @SpanHandler,\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n@@ -83,7 +83,7 @@ struct Stats {\n }\n \n pub struct EncodeContext<'a> {\n-    diag: @mut SpanHandler,\n+    diag: @SpanHandler,\n     tcx: ty::ctxt,\n     stats: @Stats,\n     reexports2: middle::resolve::ExportMap2,"}, {"sha": "d4f940ab486083497baaf3568b7c362af0220131", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -231,8 +231,7 @@ impl Context {\n     }\n }\n \n-pub fn note_crateid_attr(diag: @mut SpanHandler,\n-                         crateid: &CrateId) {\n+pub fn note_crateid_attr(diag: @SpanHandler, crateid: &CrateId) {\n     diag.handler().note(format!(\"crate_id: {}\", crateid.to_str()));\n }\n "}, {"sha": "1f4d54ad4bbfba895887727107010f7e85731e2f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -32,7 +32,7 @@ macro_rules! mywrite( ($wr:expr, $($arg:tt)*) => (\n ) )\n \n pub struct ctxt {\n-    diag: @mut SpanHandler,\n+    diag: @SpanHandler,\n     // Def -> str Callback:\n     ds: extern \"Rust\" fn(DefId) -> ~str,\n     // The type context."}, {"sha": "f1f653a6900ecca5e2470e5de67cce61bece5b7a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -267,7 +267,7 @@ pub type ctxt = @ctxt_;\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n struct ctxt_ {\n-    diag: @mut syntax::diagnostic::SpanHandler,\n+    diag: @syntax::diagnostic::SpanHandler,\n     interner: RefCell<HashMap<intern_key, ~t_box_>>,\n     next_id: Cell<uint>,\n     cstore: @metadata::cstore::CStore,"}, {"sha": "b7532ad72cb5944424c68687e6bd5141348ca618", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -197,7 +197,7 @@ pub type map = @mut HashMap<NodeId, ast_node>;\n pub struct Ctx {\n     map: map,\n     path: path,\n-    diag: @mut SpanHandler,\n+    diag: @SpanHandler,\n }\n \n impl Ctx {\n@@ -418,7 +418,7 @@ impl Visitor<()> for Ctx {\n     }\n }\n \n-pub fn map_crate(diag: @mut SpanHandler, c: &Crate) -> map {\n+pub fn map_crate(diag: @SpanHandler, c: &Crate) -> map {\n     let cx = @mut Ctx {\n         map: @mut HashMap::new(),\n         path: ~[],\n@@ -431,7 +431,7 @@ pub fn map_crate(diag: @mut SpanHandler, c: &Crate) -> map {\n // Used for items loaded from external crate that are being inlined into this\n // crate.  The `path` should be the path to the item but should not include\n // the item itself.\n-pub fn map_decoded_item(diag: @mut SpanHandler,\n+pub fn map_decoded_item(diag: @SpanHandler,\n                         map: map,\n                         path: path,\n                         ii: &inlined_item) {"}, {"sha": "df8b45dbcf5489d266bab933b4c35cfd222f5d8e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -355,8 +355,7 @@ pub fn find_stability<AM: AttrMetaMethods, It: Iterator<AM>>(mut metas: It) -> O\n     None\n }\n \n-pub fn require_unique_names(diagnostic: @mut SpanHandler,\n-                            metas: &[@MetaItem]) {\n+pub fn require_unique_names(diagnostic: @SpanHandler, metas: &[@MetaItem]) {\n     let mut set = HashSet::new();\n     for meta in metas.iter() {\n         let name = meta.name();\n@@ -381,7 +380,7 @@ pub fn require_unique_names(diagnostic: @mut SpanHandler,\n  * present (before fields, if any) with that type; reprensentation\n  * optimizations which would remove it will not be done.\n  */\n-pub fn find_repr_attr(diagnostic: @mut SpanHandler, attr: @ast::MetaItem, acc: ReprAttr)\n+pub fn find_repr_attr(diagnostic: @SpanHandler, attr: @ast::MetaItem, acc: ReprAttr)\n     -> ReprAttr {\n     let mut acc = acc;\n     match attr.node {"}, {"sha": "bb7cb81a31ad5093b3a886f189e79183a8f505a9", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -35,27 +35,27 @@ pub struct SpanHandler {\n }\n \n impl SpanHandler {\n-    pub fn span_fatal(@mut self, sp: Span, msg: &str) -> ! {\n+    pub fn span_fatal(@self, sp: Span, msg: &str) -> ! {\n         self.handler.emit(Some((&*self.cm, sp)), msg, fatal);\n         fail!();\n     }\n-    pub fn span_err(@mut self, sp: Span, msg: &str) {\n+    pub fn span_err(@self, sp: Span, msg: &str) {\n         self.handler.emit(Some((&*self.cm, sp)), msg, error);\n         self.handler.bump_err_count();\n     }\n-    pub fn span_warn(@mut self, sp: Span, msg: &str) {\n+    pub fn span_warn(@self, sp: Span, msg: &str) {\n         self.handler.emit(Some((&*self.cm, sp)), msg, warning);\n     }\n-    pub fn span_note(@mut self, sp: Span, msg: &str) {\n+    pub fn span_note(@self, sp: Span, msg: &str) {\n         self.handler.emit(Some((&*self.cm, sp)), msg, note);\n     }\n-    pub fn span_bug(@mut self, sp: Span, msg: &str) -> ! {\n+    pub fn span_bug(@self, sp: Span, msg: &str) -> ! {\n         self.span_fatal(sp, ice_msg(msg));\n     }\n-    pub fn span_unimpl(@mut self, sp: Span, msg: &str) -> ! {\n+    pub fn span_unimpl(@self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, ~\"unimplemented \" + msg);\n     }\n-    pub fn handler(@mut self) -> @mut Handler {\n+    pub fn handler(@self) -> @mut Handler {\n         self.handler\n     }\n }\n@@ -124,8 +124,8 @@ pub fn ice_msg(msg: &str) -> ~str {\n }\n \n pub fn mk_span_handler(handler: @mut Handler, cm: @codemap::CodeMap)\n-                    -> @mut SpanHandler {\n-    @mut SpanHandler {\n+                       -> @SpanHandler {\n+    @SpanHandler {\n         handler: handler,\n         cm: cm,\n     }\n@@ -327,10 +327,7 @@ fn print_macro_backtrace(cm: &codemap::CodeMap, sp: Span) {\n     }\n }\n \n-pub fn expect<T:Clone>(\n-              diag: @mut SpanHandler,\n-              opt: Option<T>,\n-              msg: || -> ~str)\n+pub fn expect<T:Clone>(diag: @SpanHandler, opt: Option<T>, msg: || -> ~str)\n               -> T {\n     match opt {\n        Some(ref t) => (*t).clone(),"}, {"sha": "9827c02d4b8826b7a8626600a92d4db54dc1722b", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -31,7 +31,7 @@ struct TtFrame {\n }\n \n pub struct TtReader {\n-    sp_diag: @mut SpanHandler,\n+    sp_diag: @SpanHandler,\n     // the unzipped tree:\n     priv stack: RefCell<@mut TtFrame>,\n     /* for MBE-style macro transcription */\n@@ -46,10 +46,10 @@ pub struct TtReader {\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-pub fn new_tt_reader(sp_diag: @mut SpanHandler,\n+pub fn new_tt_reader(sp_diag: @SpanHandler,\n                      interp: Option<HashMap<Ident,@named_match>>,\n                      src: ~[ast::token_tree])\n-                  -> @TtReader {\n+                     -> @TtReader {\n     let r = @TtReader {\n         sp_diag: sp_diag,\n         stack: RefCell::new(@mut TtFrame {"}, {"sha": "e0ab7f1535d02a9c7313c85f8cd2cfd1e6db88e6", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -347,7 +347,7 @@ pub struct lit {\n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n pub fn gather_comments_and_literals(span_diagnostic:\n-                                    @mut diagnostic::SpanHandler,\n+                                        @diagnostic::SpanHandler,\n                                     path: @str,\n                                     srdr: &mut io::Reader)\n                                  -> (~[cmnt], ~[lit]) {"}, {"sha": "5882749cdf1a3fee4342c6808077d3c23efef884", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -29,7 +29,7 @@ pub trait reader {\n     fn is_eof(@self) -> bool;\n     fn next_token(@self) -> TokenAndSpan;\n     fn fatal(@self, ~str) -> !;\n-    fn span_diag(@self) -> @mut SpanHandler;\n+    fn span_diag(@self) -> @SpanHandler;\n     fn peek(@self) -> TokenAndSpan;\n     fn dup(@self) -> @reader;\n }\n@@ -41,7 +41,7 @@ pub struct TokenAndSpan {\n }\n \n pub struct StringReader {\n-    span_diagnostic: @mut SpanHandler,\n+    span_diagnostic: @SpanHandler,\n     src: @str,\n     // The absolute offset within the codemap of the next character to read\n     pos: Cell<BytePos>,\n@@ -57,7 +57,7 @@ pub struct StringReader {\n     peek_span: RefCell<Span>,\n }\n \n-pub fn new_string_reader(span_diagnostic: @mut SpanHandler,\n+pub fn new_string_reader(span_diagnostic: @SpanHandler,\n                          filemap: @codemap::FileMap)\n                       -> @StringReader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap);\n@@ -66,7 +66,7 @@ pub fn new_string_reader(span_diagnostic: @mut SpanHandler,\n }\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n-pub fn new_low_level_string_reader(span_diagnostic: @mut SpanHandler,\n+pub fn new_low_level_string_reader(span_diagnostic: @SpanHandler,\n                                    filemap: @codemap::FileMap)\n                                 -> @StringReader {\n     // Force the initial reader bump to start on a fresh line\n@@ -121,7 +121,7 @@ impl reader for StringReader {\n     fn fatal(@self, m: ~str) -> ! {\n         self.span_diagnostic.span_fatal(self.peek_span.get(), m)\n     }\n-    fn span_diag(@self) -> @mut SpanHandler { self.span_diagnostic }\n+    fn span_diag(@self) -> @SpanHandler { self.span_diagnostic }\n     fn peek(@self) -> TokenAndSpan {\n         // XXX(pcwalton): Bad copy!\n         TokenAndSpan {\n@@ -145,7 +145,7 @@ impl reader for TtReader {\n     fn fatal(@self, m: ~str) -> ! {\n         self.sp_diag.span_fatal(self.cur_span.get(), m);\n     }\n-    fn span_diag(@self) -> @mut SpanHandler { self.sp_diag }\n+    fn span_diag(@self) -> @SpanHandler { self.sp_diag }\n     fn peek(@self) -> TokenAndSpan {\n         TokenAndSpan {\n             tok: self.cur_tok.get(),"}, {"sha": "c20e7f4aaec64b1d2751c0782df74214970db4d6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -42,7 +42,7 @@ pub mod obsolete;\n // info about a parsing session.\n pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n-    span_diagnostic: @mut SpanHandler, // better be the same as the one in the reader!\n+    span_diagnostic: @SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<~[Path]>,\n }\n@@ -56,9 +56,9 @@ pub fn new_parse_sess(demitter: Option<@Emitter>) -> @ParseSess {\n     }\n }\n \n-pub fn new_parse_sess_special_handler(sh: @mut SpanHandler,\n+pub fn new_parse_sess_special_handler(sh: @SpanHandler,\n                                       cm: @codemap::CodeMap)\n-                                   -> @ParseSess {\n+                                      -> @ParseSess {\n     @ParseSess {\n         cm: cm,\n         span_diagnostic: sh,"}, {"sha": "c13bae777c6b7d7ecdb595c4b33198a7b9fa99e0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d66af2698fd2ff2d19d68cda4eb804b5d319e5b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4d66af2698fd2ff2d19d68cda4eb804b5d319e5b", "patch": "@@ -118,7 +118,7 @@ pub static default_columns: uint = 78u;\n // copy forward.\n pub fn print_crate(cm: @CodeMap,\n                    intr: @ident_interner,\n-                   span_diagnostic: @mut diagnostic::SpanHandler,\n+                   span_diagnostic: @diagnostic::SpanHandler,\n                    crate: &ast::Crate,\n                    filename: @str,\n                    input: @mut io::Reader,"}]}