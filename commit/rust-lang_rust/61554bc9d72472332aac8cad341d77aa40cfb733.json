{"sha": "61554bc9d72472332aac8cad341d77aa40cfb733", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTU0YmM5ZDcyNDcyMzMyYWFjOGNhZDM0MWQ3N2FhNDBjZmI3MzM=", "commit": {"author": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-06-25T16:22:32Z"}, "committer": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-06-27T16:35:43Z"}, "message": "Fix misleading \"impl Trait\" error\n\nCloses #84160", "tree": {"sha": "93ac10959e029c4d52c1c7cb9c474f04ee212794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ac10959e029c4d52c1c7cb9c474f04ee212794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61554bc9d72472332aac8cad341d77aa40cfb733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61554bc9d72472332aac8cad341d77aa40cfb733", "html_url": "https://github.com/rust-lang/rust/commit/61554bc9d72472332aac8cad341d77aa40cfb733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61554bc9d72472332aac8cad341d77aa40cfb733/comments", "author": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117799b73ccf434f588528d97596392062535e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/117799b73ccf434f588528d97596392062535e3f", "html_url": "https://github.com/rust-lang/rust/commit/117799b73ccf434f588528d97596392062535e3f"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "afa4d0f1c4de9067948fe5219c5e040df6f907a2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -1481,6 +1481,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     expected,\n                     found,\n                     can_suggest,\n+                    fcx.tcx.hir().get_parent_item(id),\n                 );\n             }\n             if !pointing_at_return_type {"}, {"sha": "54aab271fdb3c767e1d68c833088e33e2be24713", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -52,9 +52,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            pointing_at_return_type =\n-                self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n             let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+            pointing_at_return_type = self.suggest_missing_return_type(\n+                err,\n+                &fn_decl,\n+                expected,\n+                found,\n+                can_suggest,\n+                fn_id,\n+            );\n             self.suggest_missing_break_or_return_expr(\n                 err, expr, &fn_decl, expected, found, blk_id, fn_id,\n             );\n@@ -433,6 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         can_suggest: bool,\n+        fn_id: hir::HirId,\n     ) -> bool {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n@@ -465,7 +472,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                if ty.kind() == expected.kind() {\n+                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n+                let ty = self.normalize_associated_types_in(sp, ty);\n+                if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n                     return true;\n                 }"}, {"sha": "f69629232aed1123ac691d08159fea475431edd0", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -6,6 +6,8 @@ LL |     type A;\n LL |     type B;\n    |     ------- the expected foreign type\n ...\n+LL | fn foo(r: &A) -> &B {\n+   |                  -- expected `&B` because of return type\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |"}, {"sha": "798ce1199a9dc24ac41b70f26fc13f00c5f85b43", "filename": "src/test/ui/retslot-cast.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Fretslot-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Fretslot-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fretslot-cast.stderr?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/retslot-cast.rs:13:5\n    |\n+LL |             -> Option<&Iterator<Item=()>> {\n+   |                -------------------------- expected `Option<&dyn Iterator<Item = ()>>` because of return type\n+...\n LL |     inner(x)\n    |     ^^^^^^^^ expected trait `Iterator<Item = ()>`, found trait `Iterator<Item = ()> + Send`\n    |"}, {"sha": "7b444df85282af77ebe9641e65cdc0d8e95fecc8", "filename": "src/test/ui/typeck/issue-84160.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.rs?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -0,0 +1,9 @@\n+fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+    if false {\n+        return x;\n+    }\n+    return \"test\";\n+    //~^ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "24c188b3fcb70292970b746488577b841c1cd2ad", "filename": "src/test/ui/typeck/issue-84160.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61554bc9d72472332aac8cad341d77aa40cfb733/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-84160.stderr?ref=61554bc9d72472332aac8cad341d77aa40cfb733", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-84160.rs:5:12\n+   |\n+LL | fn mismatched_types_with_reference(x: &u32) -> &u32 {\n+   |                                                ---- expected `&u32` because of return type\n+...\n+LL |     return \"test\";\n+   |            ^^^^^^ expected `u32`, found `str`\n+   |\n+   = note: expected reference `&u32`\n+              found reference `&'static str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}