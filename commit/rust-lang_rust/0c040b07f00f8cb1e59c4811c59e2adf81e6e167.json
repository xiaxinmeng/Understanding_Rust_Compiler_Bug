{"sha": "0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDQwYjA3ZjAwZjhjYjFlNTljNDgxMWM1OWUyYWRmODFlNmUxNjc=", "commit": {"author": {"name": "Ches Martin", "email": "ches@whiskeyandgrits.net", "date": "2015-03-02T04:45:53Z"}, "committer": {"name": "Ches Martin", "email": "ches@whiskeyandgrits.net", "date": "2015-03-20T22:32:07Z"}, "message": "guide: minor copy edits", "tree": {"sha": "00dd5b1710dac87638d05690a5178d8f6f5ee558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00dd5b1710dac87638d05690a5178d8f6f5ee558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "html_url": "https://github.com/rust-lang/rust/commit/0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/comments", "author": {"login": "ches", "id": 13277, "node_id": "MDQ6VXNlcjEzMjc3", "avatar_url": "https://avatars.githubusercontent.com/u/13277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ches", "html_url": "https://github.com/ches", "followers_url": "https://api.github.com/users/ches/followers", "following_url": "https://api.github.com/users/ches/following{/other_user}", "gists_url": "https://api.github.com/users/ches/gists{/gist_id}", "starred_url": "https://api.github.com/users/ches/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ches/subscriptions", "organizations_url": "https://api.github.com/users/ches/orgs", "repos_url": "https://api.github.com/users/ches/repos", "events_url": "https://api.github.com/users/ches/events{/privacy}", "received_events_url": "https://api.github.com/users/ches/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ches", "id": 13277, "node_id": "MDQ6VXNlcjEzMjc3", "avatar_url": "https://avatars.githubusercontent.com/u/13277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ches", "html_url": "https://github.com/ches", "followers_url": "https://api.github.com/users/ches/followers", "following_url": "https://api.github.com/users/ches/following{/other_user}", "gists_url": "https://api.github.com/users/ches/gists{/gist_id}", "starred_url": "https://api.github.com/users/ches/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ches/subscriptions", "organizations_url": "https://api.github.com/users/ches/orgs", "repos_url": "https://api.github.com/users/ches/repos", "events_url": "https://api.github.com/users/ches/events{/privacy}", "received_events_url": "https://api.github.com/users/ches/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3900c089a1305f06c6dbb15d07127b4e3a8f040c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3900c089a1305f06c6dbb15d07127b4e3a8f040c", "html_url": "https://github.com/rust-lang/rust/commit/3900c089a1305f06c6dbb15d07127b4e3a8f040c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "868874e3589d998b10e09ba36f4645ddd8e8ef6a", "filename": "src/doc/trpl/compound-data-types.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md?ref=0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "patch": "@@ -47,7 +47,7 @@ This pattern is very powerful, and we'll see it repeated more later.\n \n There are also a few things you can do with a tuple as a whole, without\n destructuring. You can assign one tuple into another, if they have the same\n-contained types and arity. Tuples have the same arity when they have the same\n+contained types and [arity]. Tuples have the same arity when they have the same\n length.\n \n ```rust\n@@ -357,6 +357,7 @@ tool that will let us deconstruct this sum type (the type theory term for enums)\n in a very elegant way and avoid all these messy `if`/`else`s.\n \n \n+[arity]: ./glossary.html#arity\n [match]: ./match.html\n [game]: ./guessing-game.html#comparing-guesses\n [generics]: ./generics.html"}, {"sha": "5d301cc0aef6ebbd31d1b78148ade07f75cdfd80", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "patch": "@@ -40,14 +40,14 @@ us enforce that it can't leave the current thread.\n \n ### `Sync`\n \n-The second of these two trait is called [`Sync`](../std/marker/trait.Sync.html).\n+The second of these traits is called [`Sync`](../std/marker/trait.Sync.html).\n When a type `T` implements `Sync`, it indicates to the compiler that something\n of this type has no possibility of introducing memory unsafety when used from\n multiple threads concurrently.\n \n For example, sharing immutable data with an atomic reference count is\n threadsafe. Rust provides a type like this, `Arc<T>`, and it implements `Sync`,\n-so that it could be safely shared between threads.\n+so it is safe to share between threads.\n \n These two traits allow you to use the type system to make strong guarantees\n about the properties of your code under concurrency. Before we demonstrate\n@@ -69,7 +69,7 @@ fn main() {\n }\n ```\n \n-The `Thread::scoped()` method accepts a closure, which is executed in a new\n+The `thread::scoped()` method accepts a closure, which is executed in a new\n thread. It's called `scoped` because this thread returns a join guard:\n \n ```\n@@ -208,10 +208,10 @@ Here's the error:\n \n ```text\n <anon>:11:9: 11:22 error: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` [E0277]\n-<anon>:11         Thread::spawn(move || {\n+<anon>:11         thread::spawn(move || {\n                   ^~~~~~~~~~~~~\n <anon>:11:9: 11:22 note: `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` cannot be sent between threads safely\n-<anon>:11         Thread::spawn(move || {\n+<anon>:11         thread::spawn(move || {\n                   ^~~~~~~~~~~~~\n ```\n \n@@ -322,7 +322,6 @@ While this channel is just sending a generic signal, we can send any data that\n is `Send` over the channel!\n \n ```\n-use std::sync::{Arc, Mutex};\n use std::thread;\n use std::sync::mpsc;\n "}, {"sha": "37785c030e6e5e4acc29b044690e1836089ffbef", "filename": "src/doc/trpl/crates-and-modules.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md?ref=0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "patch": "@@ -430,7 +430,7 @@ fn main() {\n }\n ```\n \n-But it is not idiomatic. This is significantly more likely to introducing a\n+But it is not idiomatic. This is significantly more likely to introduce a\n naming conflict. In our short program, it's not a big deal, but as it grows, it\n becomes a problem. If we have conflicting names, Rust will give a compilation\n error. For example, if we made the `japanese` functions public, and tried to do"}, {"sha": "228891f9f052b3a33a59c5f5862155f933562ce8", "filename": "src/doc/trpl/standard-input.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c040b07f00f8cb1e59c4811c59e2adf81e6e167/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=0c040b07f00f8cb1e59c4811c59e2adf81e6e167", "patch": "@@ -115,8 +115,9 @@ doesn't work, so we're okay with that. In most cases, we would want to handle\n the error case explicitly. `expect()` allows us to give an error message if\n this crash happens.\n \n-We will cover the exact details of how all of this works later in the Guide.\n-For now, this gives you enough of a basic understanding to work with.\n+We will cover the exact details of how all of this works later in the Guide in\n+[Error Handling]. For now, this gives you enough of a basic understanding to\n+work with.\n \n Back to the code we were working on! Here's a refresher:\n \n@@ -157,3 +158,6 @@ here.\n \n That's all you need to get basic input from the standard input! It's not too\n complicated, but there are a number of small parts.\n+\n+\n+[Error Handling]: ./error-handling.html"}]}