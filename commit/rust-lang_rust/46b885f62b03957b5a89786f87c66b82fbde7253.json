{"sha": "46b885f62b03957b5a89786f87c66b82fbde7253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Yjg4NWY2MmIwMzk1N2I1YTg5Nzg2Zjg3YzY2YjgyZmJkZTcyNTM=", "commit": {"author": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T15:45:59Z"}, "committer": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T15:57:42Z"}, "message": "Fix stylistic mistakes", "tree": {"sha": "712bd0165942e587301defb4b9fa4f7d9ba91820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712bd0165942e587301defb4b9fa4f7d9ba91820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b885f62b03957b5a89786f87c66b82fbde7253", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJbftl4AAoJEOQhx0GR6hhstCQIAMVZwVZEMsIbEqGd85Fia6/c\nF9iUALyERB+cnAcnpvQ3duhgWLPmJuvlDasWFES6MXRlvFJvC4RMmLnjzx81UYFi\nCRkySw5Myxe5xU1kXkLwWX80WQyK4QrDxxYJz1RYyLhy2Z+UG0vH5IyMdqfF5WmH\n2TdAFKLPEQQ610OwJoDLHcRZqG3A1hj8UzY1NjSX0Lc3Csis6BEXRRxywstJ5iYO\nb8XSICxl7ksPDGv8/PjQc35eE2p/wZHWoAHSV7a8rLG3iJF+GTYB2i0atZ9w4mfx\nK4AyRhVrFi0j124mCszrAMp+vDtT6knSps9eHPI2XrZPyRz2i1XSxbWfAV9nB5I=\n=XMEt\n-----END PGP SIGNATURE-----", "payload": "tree 712bd0165942e587301defb4b9fa4f7d9ba91820\nparent 22d3f669452ed95882e0dd44fab956afa78776be\nauthor Bernardo Meurer <meurerbernardo@gmail.com> 1535039159 -0700\ncommitter Bernardo Meurer <meurerbernardo@gmail.com> 1535039862 -0700\n\nFix stylistic mistakes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b885f62b03957b5a89786f87c66b82fbde7253", "html_url": "https://github.com/rust-lang/rust/commit/46b885f62b03957b5a89786f87c66b82fbde7253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b885f62b03957b5a89786f87c66b82fbde7253/comments", "author": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d3f669452ed95882e0dd44fab956afa78776be", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d3f669452ed95882e0dd44fab956afa78776be", "html_url": "https://github.com/rust-lang/rust/commit/22d3f669452ed95882e0dd44fab956afa78776be"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "dc6d17d34535be0c142315c01995a3e21d1d1c80", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=46b885f62b03957b5a89786f87c66b82fbde7253", "patch": "@@ -380,12 +380,12 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n             Layout(_) =>\n                 \"rustc layout computation failed\",\n             UnterminatedCString(_) =>\n-                \"attempted to get length of a null terminated string, but no null found before end\n+                \"attempted to get length of a null terminated string, but no null found before end \\\n                 of allocation\",\n             HeapAllocZeroBytes =>\n                 \"tried to re-, de- or allocate zero bytes on the heap\",\n             HeapAllocNonPowerOfTwoAlignment(_) =>\n-                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of\n+                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of \\\n                 two\",\n             Unreachable =>\n                 \"entered unreachable code\","}, {"sha": "29c1e32c479fffb0c49b1337efe94e08ae700d19", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=46b885f62b03957b5a89786f87c66b82fbde7253", "patch": "@@ -392,8 +392,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(Value::new_slice(Scalar::Ptr(ptr), s.len() as u64, self.tcx.tcx))\n     }\n \n-    pub(super) fn resolve(&self, def_id: DefId, substs: &'tcx Substs<'tcx>)\n-        -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+    pub(super) fn resolve(\n+        &self,\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>\n+        ) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"substs: {:#?}\", self.substs());\n         trace!(\"param_env: {:#?}\", self.param_env);\n@@ -422,7 +425,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         let did = instance.def_id();\n         if did.is_local()\n             && self.tcx.has_typeck_tables(did)\n-            && self.tcx.typeck_tables_of(did).tainted_by_errors {\n+            && self.tcx.typeck_tables_of(did).tainted_by_errors\n+        {\n             return err!(TypeckError);\n         }\n         trace!(\"load mir {:?}\", instance);\n@@ -777,7 +781,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 last_span = Some(span);\n             }\n             let location = if self.tcx.def_key(instance.def_id()).disambiguated_data.data\n-                == DefPathData::ClosureExpr {\n+                == DefPathData::ClosureExpr\n+            {\n                 \"closure\".to_owned()\n             } else {\n                 instance.to_string()"}, {"sha": "f46d6a1ea7df3f9c29213c8dc45a0354ee96ac22", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b885f62b03957b5a89786f87c66b82fbde7253/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=46b885f62b03957b5a89786f87c66b82fbde7253", "patch": "@@ -773,8 +773,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     /// Turn a place that is a dyn trait (i.e., PlaceExtra::Vtable and the appropriate layout)\n     /// or a slice into the specific fixed-size place and layout that is given by the vtable/len.\n     /// This \"unpacks\" the existential quantifier, so to speak.\n-    pub fn unpack_unsized_mplace(&self, mplace: MPlaceTy<'tcx>)\n-        -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n+    pub fn unpack_unsized_mplace(\n+        &self,\n+        mplace: MPlaceTy<'tcx>\n+        ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n         trace!(\"Unpacking {:?} ({:?})\", *mplace, mplace.layout.ty);\n         let layout = match mplace.extra {\n             PlaceExtra::Vtable(vtable) => {"}]}