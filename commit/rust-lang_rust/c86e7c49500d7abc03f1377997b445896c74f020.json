{"sha": "c86e7c49500d7abc03f1377997b445896c74f020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmU3YzQ5NTAwZDdhYmMwM2YxMzc3OTk3YjQ0NTg5NmM3NGYwMjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-05T17:00:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-06T17:13:02Z"}, "message": "rustbuild: Add helper to abstract hard_link/copy\n\nAlso helps provide context if it fails.", "tree": {"sha": "e673df8f5920b96c23433252089a3953883cfb0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e673df8f5920b96c23433252089a3953883cfb0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86e7c49500d7abc03f1377997b445896c74f020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7c49500d7abc03f1377997b445896c74f020", "html_url": "https://github.com/rust-lang/rust/commit/c86e7c49500d7abc03f1377997b445896c74f020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7c49500d7abc03f1377997b445896c74f020/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655", "url": "https://api.github.com/repos/rust-lang/rust/commits/943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655", "html_url": "https://github.com/rust-lang/rust/commit/943ec3bdfc9ba28e94b6d00a2b53fb2cd8b21655"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "a67f1ba48b560acbf36a5c33bd6d47163de1a1a0", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7c49500d7abc03f1377997b445896c74f020/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7c49500d7abc03f1377997b445896c74f020/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=c86e7c49500d7abc03f1377997b445896c74f020", "patch": "@@ -15,7 +15,7 @@ use std::process::Command;\n \n use build_helper::output;\n \n-use build::util::{exe, staticlib, libdir, mtime, is_dylib};\n+use build::util::{exe, staticlib, libdir, mtime, is_dylib, copy};\n use build::{Build, Compiler, Mode};\n \n /// Build the standard library.\n@@ -32,8 +32,8 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     let libdir = build.sysroot_libdir(compiler, target);\n     let _ = fs::remove_dir_all(&libdir);\n     t!(fs::create_dir_all(&libdir));\n-    t!(fs::hard_link(&build.compiler_rt_built.borrow()[target],\n-                     libdir.join(staticlib(\"compiler-rt\", target))));\n+    copy(&build.compiler_rt_built.borrow()[target],\n+         &libdir.join(staticlib(\"compiler-rt\", target)));\n \n     build_startup_objects(build, target, &libdir);\n \n@@ -77,8 +77,8 @@ pub fn std_link(build: &Build,\n     if host != compiler.host {\n         let _ = fs::remove_dir_all(&libdir);\n         t!(fs::create_dir_all(&libdir));\n-        t!(fs::hard_link(&build.compiler_rt_built.borrow()[target],\n-                         libdir.join(staticlib(\"compiler-rt\", target))));\n+        copy(&build.compiler_rt_built.borrow()[target],\n+             &libdir.join(staticlib(\"compiler-rt\", target)));\n     }\n     add_to_sysroot(&out_dir, &libdir);\n \n@@ -93,7 +93,7 @@ pub fn std_link(build: &Build,\n /// Only required for musl targets that statically link to libc\n fn copy_third_party_objects(build: &Build, target: &str, into: &Path) {\n     for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-        t!(fs::copy(compiler_file(build.cc(target), obj), into.join(obj)));\n+        copy(&compiler_file(build.cc(target), obj), &into.join(obj));\n     }\n }\n \n@@ -119,7 +119,7 @@ fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n     }\n \n     for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n-        t!(fs::copy(compiler_file(build.cc(target), obj), into.join(obj)));\n+        copy(&compiler_file(build.cc(target), obj), &into.join(obj));\n     }\n }\n \n@@ -240,9 +240,10 @@ fn libtest_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n     build.cargo_out(compiler, Mode::Libtest, target).join(\"libtest_shim.rlib\")\n }\n \n-fn compiler_file(compiler: &Path, file: &str) -> String {\n-    output(Command::new(compiler)\n-                   .arg(format!(\"-print-file-name={}\", file))).trim().to_string()\n+fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n+    let out = output(Command::new(compiler)\n+                            .arg(format!(\"-print-file-name={}\", file)));\n+    PathBuf::from(out.trim())\n }\n \n /// Prepare a new compiler from the artifacts in `stage`\n@@ -270,7 +271,7 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     for f in t!(fs::read_dir(&src_libdir)).map(|f| t!(f)) {\n         let filename = f.file_name().into_string().unwrap();\n         if is_dylib(&filename) {\n-            t!(fs::hard_link(&f.path(), sysroot_libdir.join(&filename)));\n+            copy(&f.path(), &sysroot_libdir.join(&filename));\n         }\n     }\n \n@@ -282,15 +283,15 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     t!(fs::create_dir_all(&bindir));\n     let compiler = build.compiler_path(&Compiler::new(stage, host));\n     let _ = fs::remove_file(&compiler);\n-    t!(fs::hard_link(rustc, compiler));\n+    copy(&rustc, &compiler);\n \n     // See if rustdoc exists to link it into place\n     let rustdoc = exe(\"rustdoc\", host);\n     let rustdoc_src = out_dir.join(&rustdoc);\n     let rustdoc_dst = bindir.join(&rustdoc);\n     if fs::metadata(&rustdoc_src).is_ok() {\n         let _ = fs::remove_file(&rustdoc_dst);\n-        t!(fs::hard_link(&rustdoc_src, &rustdoc_dst));\n+        copy(&rustdoc_src, &rustdoc_dst);\n     }\n }\n \n@@ -329,8 +330,7 @@ fn add_to_sysroot(out_dir: &Path, sysroot_dst: &Path) {\n         let (_, path) = paths.iter().map(|path| {\n             (mtime(&path).seconds(), path)\n         }).max().unwrap();\n-        t!(fs::hard_link(&path,\n-                         sysroot_dst.join(path.file_name().unwrap())));\n+        copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n     }\n }\n "}, {"sha": "41cf924d44a92dcf85ddce41ff058e3c5040398c", "filename": "src/bootstrap/build/util.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7c49500d7abc03f1377997b445896c74f020/src%2Fbootstrap%2Fbuild%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7c49500d7abc03f1377997b445896c74f020/src%2Fbootstrap%2Fbuild%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Futil.rs?ref=c86e7c49500d7abc03f1377997b445896c74f020", "patch": "@@ -30,6 +30,15 @@ pub fn mtime(path: &Path) -> FileTime {\n     }).unwrap_or(FileTime::zero())\n }\n \n+pub fn copy(src: &Path, dst: &Path) {\n+    let res = fs::hard_link(src, dst);\n+    let res = res.or_else(|_| fs::copy(src, dst).map(|_| ()));\n+    if let Err(e) = res {\n+        panic!(\"failed to copy `{}` to `{}`: {}\", src.display(),\n+               dst.display(), e)\n+    }\n+}\n+\n pub fn cp_r(src: &Path, dst: &Path) {\n     for f in t!(fs::read_dir(src)) {\n         let f = t!(f);\n@@ -42,7 +51,7 @@ pub fn cp_r(src: &Path, dst: &Path) {\n             cp_r(&path, &dst);\n         } else {\n             let _ = fs::remove_file(&dst);\n-            t!(fs::hard_link(&path, dst));\n+            copy(&path, &dst);\n         }\n     }\n }"}]}