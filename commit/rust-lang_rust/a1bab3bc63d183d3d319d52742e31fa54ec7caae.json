{"sha": "a1bab3bc63d183d3d319d52742e31fa54ec7caae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYmFiM2JjNjNkMTgzZDNkMzE5ZDUyNzQyZTMxZmE1NGVjN2NhYWU=", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-07-22T12:40:24Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-07-27T14:01:38Z"}, "message": "Add primitive type support to disallowed_type lint\n\nFix docs of disallowed_type\n\nAdd ability to name primitive types without import path\n\nMove primitive resolution to clippy_utils path_to_res fn\n\nRefactor Res matching, fix naming and docs from review\n\nUse tcx.def_path_str when emitting the lint", "tree": {"sha": "595cc5375f1de08e22603b2e553914a72e7696cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/595cc5375f1de08e22603b2e553914a72e7696cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1bab3bc63d183d3d319d52742e31fa54ec7caae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bab3bc63d183d3d319d52742e31fa54ec7caae", "html_url": "https://github.com/rust-lang/rust/commit/a1bab3bc63d183d3d319d52742e31fa54ec7caae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1bab3bc63d183d3d319d52742e31fa54ec7caae/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb7a868d39ee19bbe75ec14beb62951f2413052", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb7a868d39ee19bbe75ec14beb62951f2413052", "html_url": "https://github.com/rust-lang/rust/commit/ceb7a868d39ee19bbe75ec14beb62951f2413052"}], "stats": {"total": 158, "additions": 94, "deletions": 64}, "files": [{"sha": "7c76e2322c28fd97ffc8585b81791f3e1cd9fde0", "filename": "clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 35, "deletions": 43, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a1bab3bc63d183d3d319d52742e31fa54ec7caae/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bab3bc63d183d3d319d52742e31fa54ec7caae/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=a1bab3bc63d183d3d319d52742e31fa54ec7caae", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::{\n-    def::Res, def_id::DefId, Crate, Item, ItemKind, PolyTraitRef, TraitBoundModifier, Ty, TyKind, UseKind,\n+    def::Res, def_id::DefId, Crate, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -15,14 +15,12 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// N.B. There is no way to ban primitive types.\n-    ///\n     /// **Example:**\n     ///\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml\n-    /// disallowed-methods = [\"std::collections::BTreeMap\"]\n+    /// disallowed-types = [\"std::collections::BTreeMap\"]\n     /// ```\n     ///\n     /// ```rust,ignore\n@@ -42,7 +40,8 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct DisallowedType {\n     disallowed: FxHashSet<Vec<Symbol>>,\n-    def_ids: FxHashSet<(DefId, Vec<Symbol>)>,\n+    def_ids: FxHashSet<DefId>,\n+    prim_tys: FxHashSet<PrimTy>,\n }\n \n impl DisallowedType {\n@@ -53,6 +52,23 @@ impl DisallowedType {\n                 .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n                 .collect(),\n             def_ids: FxHashSet::default(),\n+            prim_tys: FxHashSet::default(),\n+        }\n+    }\n+\n+    fn check_res_emit(&self, cx: &LateContext<'_>, res: &Res, span: Span) {\n+        match res {\n+            Res::Def(_, did) => {\n+                if self.def_ids.contains(did) {\n+                    emit(cx, &cx.tcx.def_path_str(*did), span);\n+                }\n+            },\n+            Res::PrimTy(prim) => {\n+                if self.prim_tys.contains(prim) {\n+                    emit(cx, prim.name_str(), span);\n+                }\n+            },\n+            _ => {},\n         }\n     }\n }\n@@ -63,60 +79,36 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n         for path in &self.disallowed {\n             let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n-            if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>())\n-            {\n-                self.def_ids.insert((id, path.clone()));\n+            match clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>()) {\n+                Res::Def(_, id) => {\n+                    self.def_ids.insert(id);\n+                },\n+                Res::PrimTy(ty) => {\n+                    self.prim_tys.insert(ty);\n+                },\n+                _ => {},\n             }\n         }\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if_chain! {\n-            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, did) = path.res;\n-            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n-            then {\n-                emit(cx, name, item.span,);\n-            }\n+        if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n+            self.check_res_emit(cx, &path.res, item.span);\n         }\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n-        if_chain! {\n-            if let TyKind::Path(path) = &ty.kind;\n-            if let Some(did) = cx.qpath_res(path, ty.hir_id).opt_def_id();\n-            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n-            then {\n-                emit(cx, name, path.span());\n-            }\n+        if let TyKind::Path(path) = &ty.kind {\n+            self.check_res_emit(cx, &cx.qpath_res(path, ty.hir_id), ty.span);\n         }\n     }\n \n     fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n-        if_chain! {\n-            if let Res::Def(_, did) = poly.trait_ref.path.res;\n-            if let Some((_, name)) = self.def_ids.iter().find(|(id, _)| *id == did);\n-            then {\n-                emit(cx, name, poly.trait_ref.path.span);\n-            }\n-        }\n+        self.check_res_emit(cx, &poly.trait_ref.path.res, poly.trait_ref.path.span);\n     }\n-\n-    // TODO: if non primitive const generics are a thing\n-    // fn check_generic_arg(&mut self, cx: &LateContext<'tcx>, arg: &'tcx GenericArg<'tcx>) {\n-    //     match arg {\n-    //         GenericArg::Const(c) => {},\n-    //     }\n-    // }\n-    // fn check_generic_param(&mut self, cx: &LateContext<'tcx>, param: &'tcx GenericParam<'tcx>) {\n-    //     match param.kind {\n-    //         GenericParamKind::Const { .. } => {},\n-    //     }\n-    // }\n }\n \n-fn emit(cx: &LateContext<'_>, name: &[Symbol], span: Span) {\n-    let name = name.iter().map(|s| s.to_ident_string()).collect::<Vec<_>>().join(\"::\");\n+fn emit(cx: &LateContext<'_>, name: &str, span: Span) {\n     span_lint(\n         cx,\n         DISALLOWED_TYPE,"}, {"sha": "59f878f8b20ab58da70194a9b684dbc2b4b2b931", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1bab3bc63d183d3d319d52742e31fa54ec7caae/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bab3bc63d183d3d319d52742e31fa54ec7caae/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a1bab3bc63d183d3d319d52742e31fa54ec7caae", "patch": "@@ -72,7 +72,7 @@ use rustc_hir::LangItem::{ResultErr, ResultOk};\n use rustc_hir::{\n     def, Arm, BindingAnnotation, Block, Body, Constness, Destination, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl,\n     ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Node, Param, Pat, PatKind, Path,\n-    PathSegment, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n+    PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -490,6 +490,9 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n \n     let (krate, first, path) = match *path {\n         [krate, first, ref path @ ..] => (krate, first, path),\n+        [primitive] => {\n+            return PrimTy::from_name(Symbol::intern(primitive)).map_or(Res::Err, Res::PrimTy);\n+        },\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;"}, {"sha": "dac4446703b0f5e24977580aa667815b866b286f", "filename": "tests/ui-toml/toml_disallowed_type/clippy.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml?ref=a1bab3bc63d183d3d319d52742e31fa54ec7caae", "patch": "@@ -6,4 +6,6 @@ disallowed-types = [\n     \"std::thread::Thread\",\n     \"std::time::Instant\",\n     \"std::io::Read\",\n+    \"std::primitive::usize\",\n+    \"bool\"\n ]"}, {"sha": "0871a3073abd302c4f86b342f01b6203af164fae", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs?ref=a1bab3bc63d183d3d319d52742e31fa54ec7caae", "patch": "@@ -13,13 +13,15 @@ fn bad_return_type() -> fn() -> Sneaky {\n     todo!()\n }\n \n-fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n-    todo!()\n-}\n+fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {}\n \n-fn trait_obj(_: &dyn std::io::Read) {\n-    todo!()\n-}\n+fn trait_obj(_: &dyn std::io::Read) {}\n+\n+fn full_and_single_path_prim(_: usize, _: bool) {}\n+\n+fn const_generics<const C: usize>() {}\n+\n+struct GenArg<const U: usize>([u8; U]);\n \n static BAD: foo::atomic::AtomicPtr<()> = foo::atomic::AtomicPtr::new(std::ptr::null_mut());\n \n@@ -32,4 +34,5 @@ fn main() {\n     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n     let _ = syn::Ident::new(\"\", todo!());\n     let _ = HashMap;\n+    let _: usize = 64_usize;\n }"}, {"sha": "90ce7db2cc4e6b4007fe5d439784b09a5abba4e9", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.stderr", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1bab3bc63d183d3d319d52742e31fa54ec7caae/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr?ref=a1bab3bc63d183d3d319d52742e31fa54ec7caae", "patch": "@@ -21,68 +21,98 @@ LL | fn bad_return_type() -> fn() -> Sneaky {\n error: `std::time::Instant` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:16:28\n    |\n-LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n+LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {}\n    |                            ^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n   --> $DIR/conf_disallowed_type.rs:16:39\n    |\n-LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {\n+LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {}\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::io::Read` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:20:22\n+  --> $DIR/conf_disallowed_type.rs:18:22\n    |\n-LL | fn trait_obj(_: &dyn std::io::Read) {\n+LL | fn trait_obj(_: &dyn std::io::Read) {}\n    |                      ^^^^^^^^^^^^^\n \n+error: `usize` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:20:33\n+   |\n+LL | fn full_and_single_path_prim(_: usize, _: bool) {}\n+   |                                 ^^^^^\n+\n+error: `bool` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:20:43\n+   |\n+LL | fn full_and_single_path_prim(_: usize, _: bool) {}\n+   |                                           ^^^^\n+\n+error: `usize` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:22:28\n+   |\n+LL | fn const_generics<const C: usize>() {}\n+   |                            ^^^^^\n+\n+error: `usize` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:24:24\n+   |\n+LL | struct GenArg<const U: usize>([u8; U]);\n+   |                        ^^^^^\n+\n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:28:48\n+  --> $DIR/conf_disallowed_type.rs:30:48\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:28:12\n+  --> $DIR/conf_disallowed_type.rs:30:12\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:29:13\n+  --> $DIR/conf_disallowed_type.rs:31:13\n    |\n LL |     let _ = Sneaky::now();\n    |             ^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:30:13\n+  --> $DIR/conf_disallowed_type.rs:32:13\n    |\n LL |     let _ = foo::atomic::AtomicU32::new(0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:31:17\n+  --> $DIR/conf_disallowed_type.rs:33:17\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:31:48\n+  --> $DIR/conf_disallowed_type.rs:33:48\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `syn::TypePath` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:32:43\n+  --> $DIR/conf_disallowed_type.rs:34:43\n    |\n LL |     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n    |                                           ^^^^^^^^^^^^^\n \n-error: `proc_macro2::Ident` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:33:13\n+error: `syn::Ident` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:35:13\n    |\n LL |     let _ = syn::Ident::new(\"\", todo!());\n    |             ^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: `usize` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:37:12\n+   |\n+LL |     let _: usize = 64_usize;\n+   |            ^^^^^\n+\n+error: aborting due to 19 previous errors\n "}]}