{"sha": "b0547cea0ae50f49619ded26f43d0d55a1674b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNTQ3Y2VhMGFlNTBmNDk2MTlkZWQyNmY0M2QwZDU1YTE2NzRiMTQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-15T01:56:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-29T12:01:33Z"}, "message": "Move core::alloc::CollectionAllocErr to alloc::collections", "tree": {"sha": "d8a9e6aabff391b23769efea837aee97a0e44c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a9e6aabff391b23769efea837aee97a0e44c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0547cea0ae50f49619ded26f43d0d55a1674b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0547cea0ae50f49619ded26f43d0d55a1674b14", "html_url": "https://github.com/rust-lang/rust/commit/b0547cea0ae50f49619ded26f43d0d55a1674b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0547cea0ae50f49619ded26f43d0d55a1674b14/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121b57b87ae4b58082f38a450373636286a8d678", "url": "https://api.github.com/repos/rust-lang/rust/commits/121b57b87ae4b58082f38a450373636286a8d678", "html_url": "https://github.com/rust-lang/rust/commit/121b57b87ae4b58082f38a450373636286a8d678"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "96e0eb633b2f54cbaa38ad8c230a4c6f165ebc97", "filename": "src/liballoc/collections/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -51,6 +51,35 @@ pub use self::linked_list::LinkedList;\n #[doc(no_inline)]\n pub use self::vec_deque::VecDeque;\n \n+use alloc::{AllocErr, LayoutErr};\n+\n+/// Augments `AllocErr` with a CapacityOverflow variant.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+pub enum CollectionAllocErr {\n+    /// Error due to the computed capacity exceeding the collection's maximum\n+    /// (usually `isize::MAX` bytes).\n+    CapacityOverflow,\n+    /// Error due to the allocator (see the `AllocErr` type's docs).\n+    AllocErr,\n+}\n+\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+impl From<AllocErr> for CollectionAllocErr {\n+    #[inline]\n+    fn from(AllocErr: AllocErr) -> Self {\n+        CollectionAllocErr::AllocErr\n+    }\n+}\n+\n+#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n+impl From<LayoutErr> for CollectionAllocErr {\n+    #[inline]\n+    fn from(_: LayoutErr) -> Self {\n+        CollectionAllocErr::CapacityOverflow\n+    }\n+}\n+\n /// An intermediate trait for specialization of `Extend`.\n #[doc(hidden)]\n trait SpecExtend<I: IntoIterator> {"}, {"sha": "ba92b886138c02efbeec9b421154965da89e41e7", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -30,7 +30,7 @@ use core::slice;\n use core::hash::{Hash, Hasher};\n use core::cmp;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use raw_vec::RawVec;\n use vec::Vec;\n "}, {"sha": "4f2686abf4515fbb11554df4b81dd83114b51976", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -18,8 +18,8 @@ use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n use alloc::{Alloc, Layout, Global, handle_alloc_error};\n-use alloc::CollectionAllocErr;\n-use alloc::CollectionAllocErr::*;\n+use collections::CollectionAllocErr;\n+use collections::CollectionAllocErr::*;\n use boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating"}, {"sha": "6b28687a060de58c059cdaa376192f8d0e0a0f5b", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -66,7 +66,7 @@ use core::ptr;\n use core::str::pattern::Pattern;\n use core::str::lossy;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use borrow::{Cow, ToOwned};\n use boxed::Box;\n use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};"}, {"sha": "fbbaced540e70cace77f7c600b31da99a4c9ed90", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -80,7 +80,7 @@ use core::ptr;\n use core::ptr::NonNull;\n use core::slice;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use borrow::ToOwned;\n use borrow::Cow;\n use boxed::Box;"}, {"sha": "01221aecb6284651aee6a4bf9189b90ec5ca0281", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -385,34 +385,6 @@ impl fmt::Display for CannotReallocInPlace {\n     }\n }\n \n-/// Augments `AllocErr` with a CapacityOverflow variant.\n-// FIXME: should this be in libcore or liballoc?\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub enum CollectionAllocErr {\n-    /// Error due to the computed capacity exceeding the collection's maximum\n-    /// (usually `isize::MAX` bytes).\n-    CapacityOverflow,\n-    /// Error due to the allocator (see the `AllocErr` type's docs).\n-    AllocErr,\n-}\n-\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<AllocErr> for CollectionAllocErr {\n-    #[inline]\n-    fn from(AllocErr: AllocErr) -> Self {\n-        CollectionAllocErr::AllocErr\n-    }\n-}\n-\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<LayoutErr> for CollectionAllocErr {\n-    #[inline]\n-    fn from(_: LayoutErr) -> Self {\n-        CollectionAllocErr::CapacityOverflow\n-    }\n-}\n-\n /// A memory allocator that can be registered as the standard library\u2019s default\n /// though the `#[global_allocator]` attributes.\n ///"}, {"sha": "91912e5f2412ef75eb59c25abba89f0574174c00", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -11,7 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use alloc::CollectionAllocErr;\n+use collections::CollectionAllocErr;\n use cell::Cell;\n use borrow::Borrow;\n use cmp::max;"}, {"sha": "2b319186a8db2ffdb9b997ccdc54140e319e861f", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Global, Alloc, Layout, LayoutErr, CollectionAllocErr, handle_alloc_error};\n+use alloc::{Global, Alloc, Layout, LayoutErr, handle_alloc_error};\n+use collections::CollectionAllocErr;\n use hash::{BuildHasher, Hash, Hasher};\n use marker;\n use mem::{size_of, needs_drop};"}, {"sha": "8d2c82bc0aa848a9c8df2eb30b891e5ddb50fc5e", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0547cea0ae50f49619ded26f43d0d55a1674b14/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=b0547cea0ae50f49619ded26f43d0d55a1674b14", "patch": "@@ -438,7 +438,7 @@ pub use self::hash_map::HashMap;\n pub use self::hash_set::HashSet;\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub use alloc::CollectionAllocErr;\n+pub use alloc_crate::collections::CollectionAllocErr;\n \n mod hash;\n "}]}