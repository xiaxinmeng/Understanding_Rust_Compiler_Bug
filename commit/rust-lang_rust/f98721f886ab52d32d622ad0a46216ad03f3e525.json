{"sha": "f98721f886ab52d32d622ad0a46216ad03f3e525", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODcyMWY4ODZhYjUyZDMyZDYyMmFkMGE0NjIxNmFkMDNmM2U1MjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T19:12:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T19:12:53Z"}, "message": "Auto merge of #82982 - Dylan-DPC:rollup-mt497z7, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #81309 (always eagerly eval consts in Relate)\n - #82217 (Edition-specific preludes)\n - #82807 (rustdoc: Remove redundant enableSearchInput function)\n - #82924 (WASI: Switch to crt1-command.o to enable support for new-style commands)\n - #82949 (Do not attempt to unlock envlock in child process after a fork.)\n - #82955 (fix: wrong word)\n - #82962 (Treat header as first paragraph for shortened markdown descriptions)\n - #82976 (fix error message for copy(_nonoverlapping) overflow)\n - #82977 (Rename `Option::get_or_default` to `get_or_insert_default`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "674536c281cab9ef8e87aa042e6b2d336d43b413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674536c281cab9ef8e87aa042e6b2d336d43b413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98721f886ab52d32d622ad0a46216ad03f3e525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98721f886ab52d32d622ad0a46216ad03f3e525", "html_url": "https://github.com/rust-lang/rust/commit/f98721f886ab52d32d622ad0a46216ad03f3e525", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98721f886ab52d32d622ad0a46216ad03f3e525/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "html_url": "https://github.com/rust-lang/rust/commit/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2"}, {"sha": "e58313248a413a7119c1737a9bb21db7910f89e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58313248a413a7119c1737a9bb21db7910f89e4", "html_url": "https://github.com/rust-lang/rust/commit/e58313248a413a7119c1737a9bb21db7910f89e4"}], "stats": {"total": 332, "additions": 228, "deletions": 104}, "files": [{"sha": "fbd8be22a9de2391ee0138cbfab8c97054ba8c3a", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -2,7 +2,7 @@ use rustc_ast as ast;\n use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_expand::expand::ExpansionConfig;\n use rustc_session::Session;\n-use rustc_span::edition::Edition;\n+use rustc_span::edition::Edition::*;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n@@ -13,7 +13,7 @@ pub fn inject(\n     sess: &Session,\n     alt_std_name: Option<Symbol>,\n ) -> ast::Crate {\n-    let rust_2018 = sess.parse_sess.edition >= Edition::Edition2018;\n+    let edition = sess.parse_sess.edition;\n \n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[Symbol] = if sess.contains_name(&krate.attrs, sym::no_core) {\n@@ -42,7 +42,11 @@ pub fn inject(\n \n     // .rev() to preserve ordering above in combination with insert(0, ...)\n     for &name in names.iter().rev() {\n-        let ident = if rust_2018 { Ident::new(name, span) } else { Ident::new(name, call_site) };\n+        let ident = if edition >= Edition2018 {\n+            Ident::new(name, span)\n+        } else {\n+            Ident::new(name, call_site)\n+        };\n         krate.items.insert(\n             0,\n             cx.item(\n@@ -58,14 +62,18 @@ pub fn inject(\n     // the one with the prelude.\n     let name = names[0];\n \n-    let import_path = if rust_2018 {\n-        [name, sym::prelude, sym::v1].iter().map(|symbol| Ident::new(*symbol, span)).collect()\n-    } else {\n-        [kw::PathRoot, name, sym::prelude, sym::v1]\n-            .iter()\n-            .map(|symbol| Ident::new(*symbol, span))\n-            .collect()\n-    };\n+    let root = (edition == Edition2015).then(|| kw::PathRoot);\n+\n+    let import_path = root\n+        .iter()\n+        .chain(&[name, sym::prelude])\n+        .chain(&[match edition {\n+            Edition2015 => sym::rust_2015,\n+            Edition2018 => sym::rust_2018,\n+            Edition2021 => sym::rust_2021,\n+        }])\n+        .map(|&symbol| Ident::new(symbol, span))\n+        .collect();\n \n     let use_item = cx.item(\n         span,"}, {"sha": "f21545447b2044f11c74ea9a9bc5091378489c8c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -421,12 +421,14 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             let t = relation.relate(a_t, b_t)?;\n             match relation.relate(sz_a, sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n-                // FIXME(#72219) Implement improved diagnostics for mismatched array\n-                // length?\n-                Err(err) if relation.tcx().lazy_normalization() => Err(err),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics.\n+                    //\n+                    // It might seem dubious to eagerly evaluate these constants here,\n+                    // we however cannot end up with errors in `Relate` during both\n+                    // `type_of` and `predicates_of`. This means that evaluating the\n+                    // constants should not cause cycle errors here.\n                     let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n                     let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n                     match (sz_a, sz_b) {"}, {"sha": "6084f67abd78e8824378ed1acc59fb6df20e54e5", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -160,7 +160,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n         let (size, align) = (layout.size, layout.align.abi);\n         let size = size.checked_mul(count, self).ok_or_else(|| {\n-            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n+            err_ub_format!(\n+                \"overflow computing total size of `{}`\",\n+                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n+            )\n         })?;\n \n         // Make sure we check both pointers for an access of the total size and aligment,"}, {"sha": "93c17057590e60274694818f7ca4b516dfae9a91", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -25,7 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n-#![feature(option_get_or_default)]\n+#![feature(option_get_or_insert_default)]\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]"}, {"sha": "6f5fa858e25379bd9ad93a231cf2784da25a2e37", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -392,7 +392,8 @@ impl BasicCoverageBlockData {\n             }\n         }\n         let operand = counter_kind.as_operand_id();\n-        if let Some(replaced) = self.edge_from_bcbs.get_or_default().insert(from_bcb, counter_kind)\n+        if let Some(replaced) =\n+            self.edge_from_bcbs.get_or_insert_default().insert(from_bcb, counter_kind)\n         {\n             Error::from_string(format!(\n                 \"attempt to set an edge counter more than once; from_bcb: \\"}, {"sha": "8544acd6d05eebbb8b30f7d26b1bb83691f72dc9", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -20,7 +20,7 @@ pub enum Edition {\n     Edition2015,\n     /// The 2018 edition\n     Edition2018,\n-    /// The 2021 ediiton\n+    /// The 2021 edition\n     Edition2021,\n }\n "}, {"sha": "79ca3c194cc820107af3ba590ba83e54cafbdd43", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -959,8 +959,11 @@ symbols! {\n         rt,\n         rtm_target_feature,\n         rust,\n+        rust_2015,\n         rust_2015_preview,\n+        rust_2018,\n         rust_2018_preview,\n+        rust_2021,\n         rust_2021_preview,\n         rust_begin_unwind,\n         rust_eh_catch_typeinfo,"}, {"sha": "2fc9ab29f92f46f3cee525d6c4346355f6a492fa", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -108,11 +108,13 @@ pub(super) fn post_mingw() -> CrtObjects {\n }\n \n pub(super) fn pre_wasi_fallback() -> CrtObjects {\n+    // Use crt1-command.o instead of crt1.o to enable support for new-style\n+    // commands. See https://reviews.llvm.org/D81689 for more info.\n     new(&[\n-        (LinkOutputKind::DynamicNoPicExe, &[\"crt1.o\"]),\n-        (LinkOutputKind::DynamicPicExe, &[\"crt1.o\"]),\n-        (LinkOutputKind::StaticNoPicExe, &[\"crt1.o\"]),\n-        (LinkOutputKind::StaticPicExe, &[\"crt1.o\"]),\n+        (LinkOutputKind::DynamicNoPicExe, &[\"crt1-command.o\"]),\n+        (LinkOutputKind::DynamicPicExe, &[\"crt1-command.o\"]),\n+        (LinkOutputKind::StaticNoPicExe, &[\"crt1-command.o\"]),\n+        (LinkOutputKind::StaticPicExe, &[\"crt1-command.o\"]),\n         (LinkOutputKind::WasiReactorExe, &[\"crt1-reactor.o\"]),\n     ])\n }"}, {"sha": "f1a0f455cd0918a8602984a012f00986b75c650b", "filename": "library/core/src/option.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -854,55 +854,55 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts the default value into the option if it is [`None`], then\n+    /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_get_or_default)]\n-    ///\n     /// let mut x = None;\n     ///\n     /// {\n-    ///     let y: &mut u32 = x.get_or_default();\n-    ///     assert_eq!(y, &0);\n+    ///     let y: &mut u32 = x.get_or_insert(5);\n+    ///     assert_eq!(y, &5);\n     ///\n     ///     *y = 7;\n     /// }\n     ///\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_get_or_default\", issue = \"82901\")]\n-    pub fn get_or_default(&mut self) -> &mut T\n-    where\n-        T: Default,\n-    {\n-        self.get_or_insert_with(Default::default)\n+    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n+    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n+        self.get_or_insert_with(|| value)\n     }\n \n-    /// Inserts `value` into the option if it is [`None`], then\n+    /// Inserts the default value into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(option_get_or_insert_default)]\n+    ///\n     /// let mut x = None;\n     ///\n     /// {\n-    ///     let y: &mut u32 = x.get_or_insert(5);\n-    ///     assert_eq!(y, &5);\n+    ///     let y: &mut u32 = x.get_or_insert_default();\n+    ///     assert_eq!(y, &0);\n     ///\n     ///     *y = 7;\n     /// }\n     ///\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    pub fn get_or_insert(&mut self, value: T) -> &mut T {\n-        self.get_or_insert_with(|| value)\n+    #[unstable(feature = \"option_get_or_insert_default\", issue = \"82901\")]\n+    pub fn get_or_insert_default(&mut self) -> &mut T\n+    where\n+        T: Default,\n+    {\n+        self.get_or_insert_with(Default::default)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`],"}, {"sha": "8f57db49496c306c066c7a087e1a0d71b304a199", "filename": "library/core/src/prelude/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fmod.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,5 +1,41 @@\n //! The libcore prelude\n+//!\n+//! This module is intended for users of libcore which do not link to libstd as\n+//! well. This module is imported by default when `#![no_std]` is used in the\n+//! same manner as the standard library's prelude.\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n pub mod v1;\n+\n+/// The 2015 version of the core prelude.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2015\", issue = \"none\")]\n+pub mod rust_2015 {\n+    #[unstable(feature = \"prelude_2015\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+}\n+\n+/// The 2018 version of the core prelude.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2018\", issue = \"none\")]\n+pub mod rust_2018 {\n+    #[unstable(feature = \"prelude_2018\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+}\n+\n+/// The 2021 version of the core prelude.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2021\", issue = \"none\")]\n+pub mod rust_2021 {\n+    #[unstable(feature = \"prelude_2021\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+\n+    // FIXME: Add more things.\n+}"}, {"sha": "c7cb2a69ff73ca6617effdedda60e9ff5f1d53a0", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,8 +1,6 @@\n-//! The core prelude\n+//! The first version of the core prelude.\n //!\n-//! This module is intended for users of libcore which do not link to libstd as\n-//! well. This module is imported by default when `#![no_std]` is used in the\n-//! same manner as the standard library's prelude.\n+//! See the [module-level documentation](super) for more.\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n "}, {"sha": "8149858e10338846d04da9eda1da899e2c4462af", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -302,6 +302,7 @@\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n+#![feature(prelude_2021)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]"}, {"sha": "505b5f3013b357bc2c4d2aefc27f85f7eb9576ac", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -84,3 +84,37 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub mod v1;\n+\n+/// The 2015 version of the prelude of The Rust Standard Library.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2015\", issue = \"none\")]\n+pub mod rust_2015 {\n+    #[unstable(feature = \"prelude_2015\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+}\n+\n+/// The 2018 version of the prelude of The Rust Standard Library.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2018\", issue = \"none\")]\n+pub mod rust_2018 {\n+    #[unstable(feature = \"prelude_2018\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+}\n+\n+/// The 2021 version of the prelude of The Rust Standard Library.\n+///\n+/// See the [module-level documentation](self) for more.\n+#[unstable(feature = \"prelude_2021\", issue = \"none\")]\n+pub mod rust_2021 {\n+    #[unstable(feature = \"prelude_2021\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use super::v1::*;\n+\n+    #[unstable(feature = \"prelude_2021\", issue = \"none\")]\n+    #[doc(no_inline)]\n+    pub use core::prelude::rust_2021::*;\n+}"}, {"sha": "ec89bb6d2a48fb42752bac1492981cedd5601d7f", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,6 +1,6 @@\n //! The first version of the prelude of The Rust Standard Library.\n //!\n-//! See the [module-level documentation](../index.html) for more.\n+//! See the [module-level documentation](super) for more.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "1276edc6af6c8c6b44deed19844a9a46475fbed0", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -62,9 +62,14 @@ pub trait CommandExt: Sealed {\n     /// `fork`. This primarily means that any modifications made to memory on\n     /// behalf of this closure will **not** be visible to the parent process.\n     /// This is often a very constrained environment where normal operations\n-    /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n+    /// like `malloc`, accessing environment variables through [`std::env`]\n+    /// or acquiring a mutex are not guaranteed to work (due to\n     /// other threads perhaps still running when the `fork` was run).\n     ///\n+    /// For further details refer to the [POSIX fork() specification]\n+    /// and the equivalent documentation for any targeted\n+    /// platform, especially the requirements around *async-signal-safety*.\n+    ///\n     /// This also means that all resources such as file descriptors and\n     /// memory-mapped regions got duplicated. It is your responsibility to make\n     /// sure that the closure does not violate library invariants by making\n@@ -73,6 +78,10 @@ pub trait CommandExt: Sealed {\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n+    ///\n+    /// [POSIX fork() specification]:\n+    ///     https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html\n+    /// [`std::env`]: mod@crate::env\n     #[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]\n     unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n     where"}, {"sha": "2eb64a99e599a06406a0dd99a37c864cd660a0a7", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,6 +1,7 @@\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n+use crate::mem;\n use crate::ptr;\n use crate::sys;\n use crate::sys::cvt;\n@@ -45,15 +46,14 @@ impl Command {\n         //\n         // Note that as soon as we're done with the fork there's no need to hold\n         // a lock any more because the parent won't do anything and the child is\n-        // in its own process.\n-        let result = unsafe {\n-            let _env_lock = sys::os::env_lock();\n-            cvt(libc::fork())?\n-        };\n+        // in its own process. Thus the parent drops the lock guard while the child\n+        // forgets it to avoid unlocking it on a new thread, which would be invalid.\n+        let (env_lock, result) = unsafe { (sys::os::env_lock(), cvt(libc::fork())?) };\n \n         let pid = unsafe {\n             match result {\n                 0 => {\n+                    mem::forget(env_lock);\n                     drop(input);\n                     let Err(err) = self.do_exec(theirs, envp.as_ref());\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n@@ -74,7 +74,10 @@ impl Command {\n                     rtassert!(output.write(&bytes).is_ok());\n                     libc::_exit(1)\n                 }\n-                n => n,\n+                n => {\n+                    drop(env_lock);\n+                    n\n+                }\n             }\n         };\n "}, {"sha": "9398f211721b82997152f89cb5d4fc3992c39181", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -210,7 +210,7 @@ fn copy_self_contained_objects(\n                 panic!(\"Target {:?} does not have a \\\"wasi-root\\\" key\", target.triple)\n             })\n             .join(\"lib/wasm32-wasi\");\n-        for &obj in &[\"crt1.o\", \"crt1-reactor.o\"] {\n+        for &obj in &[\"crt1-command.o\", \"crt1-reactor.o\"] {\n             copy_and_stamp(\n                 builder,\n                 &libdir_self_contained,"}, {"sha": "1505fe0369d8608394a861f25ed776221710d743", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1093,6 +1093,7 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n                 Tag::Emphasis => s.push_str(\"</em>\"),\n                 Tag::Strong => s.push_str(\"</strong>\"),\n                 Tag::Paragraph => break,\n+                Tag::Heading(..) => break,\n                 _ => {}\n             },\n             Event::HardBreak | Event::SoftBreak => {"}, {"sha": "ac3ea4c8c5f6fd88fd7b6b4d7ae059ba642c75d9", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -235,6 +235,7 @@ fn test_short_markdown_summary() {\n     t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> \u2026\");\n     t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> \u2026\");\n     t(\"# top header\", \"top header\");\n+    t(\"# top header\\n\\nfollowed by a paragraph\", \"top header\");\n     t(\"## header\", \"header\");\n     t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n     t(\"```\\nfn main() {}\\n```\", \"\");"}, {"sha": "a4621fb8ed5555b4dc4adadb8c8dc831b8d17dd2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -286,11 +286,7 @@ impl Serialize for TypeWithKind {\n     where\n         S: Serializer,\n     {\n-        let mut seq = serializer.serialize_seq(None)?;\n-        seq.serialize_element(&self.ty.name)?;\n-        let x: ItemType = self.kind.into();\n-        seq.serialize_element(&x)?;\n-        seq.end()\n+        (&self.ty.name, ItemType::from(self.kind)).serialize(serializer)\n     }\n }\n "}, {"sha": "42519d596225ba9cc281f14483f390c54d699fb3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -2188,7 +2188,7 @@ function defocusSearchBar() {\n             return \"+\";\n         }\n         // button will collapse the section\n-        // note that this text is also set in the HTML template in render.rs\n+        // note that this text is also set in the HTML template in ../render/mod.rs\n         return \"\\u2212\"; // \"\\u2212\" is \"\u2212\" minus sign\n     }\n \n@@ -2831,17 +2831,10 @@ function defocusSearchBar() {\n         });\n     }\n \n-    function enableSearchInput() {\n-        if (search_input) {\n-            search_input.removeAttribute('disabled');\n-        }\n-    }\n-\n     function addSearchOptions(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n-            enableSearchInput();\n             return;\n         }\n         var savedCrate = getSettingValue(\"saved-filter-crate\");\n@@ -2860,7 +2853,6 @@ function defocusSearchBar() {\n                 elem.value = savedCrate;\n             }\n         }\n-        enableSearchInput();\n     };\n \n     function buildHelperPopup() {\n@@ -2952,7 +2944,7 @@ function defocusSearchBar() {\n         search_input.addEventListener(\"blur\", function() {\n             search_input.placeholder = search_input.origPlaceholder;\n         });\n-        enableSearchInput();\n+        search_input.removeAttribute('disabled');\n \n         var crateSearchDropDown = document.getElementById(\"crate-search\");\n         crateSearchDropDown.addEventListener(\"focus\", loadSearch);"}, {"sha": "c86d8a119718868deece861c72d75cba50bd15f4", "filename": "src/test/pretty/asm.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fasm.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fasm.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -2,7 +2,7 @@\n #![no_std]\n #![feature(asm)]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n "}, {"sha": "4f6a924909029ec7798ae331a20a061d8c04a6b0", "filename": "src/test/pretty/cast-lt.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // pretty-compare-only"}, {"sha": "f4be3c1c63a84e5d8fda7b09ff7cf076ed3bebe6", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // pretty-compare-only"}, {"sha": "1579ea41cfdf1b62ad4fb4f735505e39efff1c67", "filename": "src/test/pretty/expanded-and-path-remap-80832.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // Test for issue 80832"}, {"sha": "dd0b8899b2d9d5ee57d4a8aa2bbf3c00199be497", "filename": "src/test/pretty/issue-12590-c.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fissue-12590-c.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fissue-12590-c.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-12590-c.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // pretty-compare-only"}, {"sha": "199aee05622beed636c3966d6a00f091fae86cdd", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,5 +1,5 @@\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // pretty-compare-only"}, {"sha": "535f57bf6af85776077724557ef3a5408373edf2", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "819ed0b2ddef7c8e6a648faebb670623088af8a7", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -43,20 +43,6 @@ fn main() {\n     assert!(output.stderr.is_empty());\n     assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n \n-    let output = unsafe {\n-        Command::new(&me)\n-            .arg(\"test2\")\n-            .pre_exec(|| {\n-                env::set_var(\"FOO\", \"BAR\");\n-                Ok(())\n-            })\n-            .output()\n-            .unwrap()\n-    };\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-\n     let output = unsafe {\n         Command::new(&me)\n             .arg(\"test3\")"}, {"sha": "6ef698bd6a04f6b140ceb13abc83275b86c503b3", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.full.stderr?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements"}, {"sha": "6ef698bd6a04f6b140ceb13abc83275b86c503b3", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:7:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements"}, {"sha": "a8f533eceaa6d98f9cf1fe8ced240d833d008ef8", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,5 +1,7 @@\n // aux-build:const_generic_lib.rs\n // revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n extern crate const_generic_lib;\n "}, {"sha": "9dc595f37faaeb1488026123baa62321909fec08", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-linelength\n #![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n-use std::ptr;\n+use std::{ptr, mem};\n \n const COPY_ZERO: () = unsafe {\n     // Since we are not copying anything, this should be allowed.\n@@ -26,6 +26,20 @@ const COPY_OOB_2: () = unsafe {\n     //~| previously accepted\n };\n \n+const COPY_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    //~| overflow computing total size of `copy`\n+    //~| previously accepted\n+};\n+const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    //~| overflow computing total size of `copy_nonoverlapping`\n+    //~| previously accepted\n+};\n \n fn main() {\n }"}, {"sha": "2736cdeac690e9c52440a08ce364ba5778b0fd03", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -33,5 +33,37 @@ LL | | };\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: aborting due to 2 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/copy-intrinsic.rs:32:5\n+   |\n+LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n+LL | |     let x = 0;\n+LL | |     let mut y = 0;\n+LL | |     ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/copy-intrinsic.rs:39:5\n+   |\n+LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n+LL | |     let x = 0;\n+LL | |     let mut y = 0;\n+LL | |     ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "4cda07758527ae0e99e653e9cbfd1e4e9594b64e", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -24,10 +24,10 @@ LL |         extern crate std as Vec;\n LL | define_vec!();\n    | -------------- in this macro invocation\n note: `Vec` could also refer to the struct defined here\n-  --> $SRC_DIR/std/src/prelude/v1.rs:LL:COL\n+  --> $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n    |\n-LL | pub use crate::vec::Vec;\n-   |         ^^^^^^^^^^^^^^^\n+LL |     pub use super::v1::*;\n+   |             ^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "fa42611d0b32e656f904ff9d7adeeab33ace2314", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -4,10 +4,10 @@ error[E0530]: match bindings cannot shadow unit variants\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n    | \n-  ::: $SRC_DIR/std/src/prelude/v1.rs:LL:COL\n+  ::: $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n    |\n-LL | pub use crate::option::Option::{self, None, Some};\n-   |                                       ---- the unit variant `None` is defined here\n+LL |     pub use super::v1::*;\n+   |             ------------ the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n   --> $DIR/issue-27033.rs:7:9"}, {"sha": "14a49f20e6b22f9850e8c588f4c779f8e78d7a9b", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -3,7 +3,7 @@\n \n #![feature(type_alias_impl_trait)]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n "}, {"sha": "aa51fc8240d635ff0232d2d536c47e5d3fdaa536", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -15,7 +15,7 @@ Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro\n \n #![no_std /* 0#0 */]\n #[prelude_import /* 0#1 */]\n-use core /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n+use core /* 0#1 */::prelude /* 0#1 */::rust_2018 /* 0#1 */::*;\n #[macro_use /* 0#1 */]\n extern crate core /* 0#1 */;\n #[macro_use /* 0#1 */]"}, {"sha": "ba3b3ee78278480fe5f3ff65c1e684772f226d05", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -35,7 +35,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n \n #![no_std /* 0#0 */]\n #[prelude_import /* 0#1 */]\n-use ::core /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n+use ::core /* 0#1 */::prelude /* 0#1 */::rust_2015 /* 0#1 */::*;\n #[macro_use /* 0#1 */]\n extern crate core /* 0#2 */;\n #[macro_use /* 0#1 */]"}, {"sha": "aeee43b01cc021d62666b1e60c94b746b04f587d", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f98721f886ab52d32d622ad0a46216ad03f3e525/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout?ref=f98721f886ab52d32d622ad0a46216ad03f3e525", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use ::std::prelude::v1::*;\n+use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n // build-pass (FIXME(62277): could be check-pass?)"}]}