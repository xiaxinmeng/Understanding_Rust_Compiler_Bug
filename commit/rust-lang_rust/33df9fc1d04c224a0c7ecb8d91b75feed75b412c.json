{"sha": "33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZGY5ZmMxZDA0YzIyNGEwYzdlY2I4ZDkxYjc1ZmVlZDc1YjQxMmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-29T20:11:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-31T00:10:23Z"}, "message": "std: Remove foreign_stack_size spawn option. Irrelevant to future FFI changes", "tree": {"sha": "0c91f70a46f16da9126cc33dadb3cb050332d5c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c91f70a46f16da9126cc33dadb3cb050332d5c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "html_url": "https://github.com/rust-lang/rust/commit/33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33df9fc1d04c224a0c7ecb8d91b75feed75b412c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "html_url": "https://github.com/rust-lang/rust/commit/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "895de843061a4d6720b9394efea42226e6755ecd", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33df9fc1d04c224a0c7ecb8d91b75feed75b412c/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33df9fc1d04c224a0c7ecb8d91b75feed75b412c/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "patch": "@@ -90,17 +90,9 @@ pub enum SchedMode {\n  *\n  * * sched_mode - The operating mode of the scheduler\n  *\n- * * foreign_stack_size - The size of the foreign stack, in bytes\n- *\n- *     Rust code runs on Rust-specific stacks. When Rust code calls foreign\n- *     code (via functions in foreign modules) it switches to a typical, large\n- *     stack appropriate for running code written in languages like C. By\n- *     default these foreign stacks have unspecified size, but with this\n- *     option their size can be precisely specified.\n  */\n pub struct SchedOpts {\n     mode: SchedMode,\n-    foreign_stack_size: Option<uint>,\n }\n \n /**\n@@ -418,7 +410,6 @@ pub fn default_task_opts() -> TaskOpts {\n         notify_chan: None,\n         sched: SchedOpts {\n             mode: DefaultScheduler,\n-            foreign_stack_size: None\n         }\n     }\n }"}, {"sha": "a698f1342f0452e0dd852aa1941c28d7f0e68279", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33df9fc1d04c224a0c7ecb8d91b75feed75b412c/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33df9fc1d04c224a0c7ecb8d91b75feed75b412c/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "patch": "@@ -84,7 +84,7 @@ use local_data;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;\n use task::rt;\n-use task::{Failure, SchedOpts};\n+use task::{Failure};\n use task::{Success, TaskOpts, TaskResult};\n use task::unkillable;\n use to_bytes::IterBytes;\n@@ -741,7 +741,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             // Create child task.\n             let new_task = match opts.sched.mode {\n                 DefaultScheduler => rt::new_task(),\n-                _ => new_task_in_sched(opts.sched)\n+                _ => new_task_in_sched()\n             };\n             assert!(!new_task.is_null());\n             // Getting killed after here would leak the task.\n@@ -799,11 +799,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n         return result;\n     }\n \n-    fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n-        if opts.foreign_stack_size != None {\n-            fail!(\"foreign_stack_size scheduler option unimplemented\");\n-        }\n-\n+    fn new_task_in_sched() -> *rust_task {\n         unsafe {\n             let sched_id = rt::rust_new_sched(1);\n             rt::rust_new_task_in_sched(sched_id)"}]}