{"sha": "50ab30601503989ecd6501dc3334d61e2d48463c", "node_id": "C_kwDOAAsO6NoAKDUwYWIzMDYwMTUwMzk4OWVjZDY1MDFkYzMzMzRkNjFlMmQ0ODQ2M2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T01:16:10Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T01:16:10Z"}, "message": "Simplify some canonical type alias names", "tree": {"sha": "c314ba46677527ddb2c6e56b6654ad7c64da75c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c314ba46677527ddb2c6e56b6654ad7c64da75c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ab30601503989ecd6501dc3334d61e2d48463c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab30601503989ecd6501dc3334d61e2d48463c", "html_url": "https://github.com/rust-lang/rust/commit/50ab30601503989ecd6501dc3334d61e2d48463c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ab30601503989ecd6501dc3334d61e2d48463c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b1cc197a3a6d0c1ab78a5c6e7cdad17681f1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b1cc197a3a6d0c1ab78a5c6e7cdad17681f1c9", "html_url": "https://github.com/rust-lang/rust/commit/23b1cc197a3a6d0c1ab78a5c6e7cdad17681f1c9"}], "stats": {"total": 107, "additions": 52, "deletions": 55}, "files": [{"sha": "091635e6c73c0b1c18cbac1a16c83b3bb85b537a", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -6,8 +6,7 @@\n //! [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\n \n use crate::infer::canonical::{\n-    Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n-    OriginalQueryValues,\n+    Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, OriginalQueryValues,\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n@@ -40,7 +39,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         value: V,\n         query_state: &mut OriginalQueryValues<'tcx>,\n-    ) -> Canonicalized<'tcx, V>\n+    ) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {\n@@ -59,7 +58,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         value: V,\n         query_state: &mut OriginalQueryValues<'tcx>,\n-    ) -> Canonicalized<'tcx, V>\n+    ) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {\n@@ -99,7 +98,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// out the [chapter in the rustc dev guide][c].\n     ///\n     /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result\n-    pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>\n+    pub fn canonicalize_response<V>(&self, value: V) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {\n@@ -113,7 +112,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         )\n     }\n \n-    pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>\n+    pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {\n@@ -135,7 +134,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         value: V,\n         query_state: &mut OriginalQueryValues<'tcx>,\n-    ) -> Canonicalized<'tcx, V>\n+    ) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {\n@@ -524,7 +523,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n-    ) -> Canonicalized<'tcx, V>\n+    ) -> Canonical<'tcx, V>\n     where\n         V: TypeFoldable<'tcx>,\n     {"}, {"sha": "108011013f58b686a8f6a983e57e94630f7ab204", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -9,7 +9,7 @@\n \n use crate::infer::canonical::substitute::{substitute_value, CanonicalExt};\n use crate::infer::canonical::{\n-    Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty, OriginalQueryValues,\n+    Canonical, CanonicalQueryResponse, CanonicalVarValues, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n };\n use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n@@ -57,7 +57,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, T>>\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n     where\n         T: Debug + TypeFoldable<'tcx>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,"}, {"sha": "614cf1a0051da8b423c96e536cb018646518ab97", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -213,9 +213,7 @@ impl QueryRegionConstraints<'_> {\n     }\n }\n \n-pub type Canonicalized<'tcx, V> = Canonical<'tcx, V>;\n-\n-pub type CanonicalizedQueryResponse<'tcx, T> = &'tcx Canonical<'tcx, QueryResponse<'tcx, T>>;\n+pub type CanonicalQueryResponse<'tcx, T> = &'tcx Canonical<'tcx, QueryResponse<'tcx, T>>;\n \n /// Indicates whether or not we were able to prove the query to be\n /// true."}, {"sha": "53e135bce62a14fc839c1f9f3e4b684a468f9e70", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -626,7 +626,7 @@ pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub inferred_ty: Ty<'tcx>,\n }\n \n-/// Canonicalized user type annotation.\n+/// Canonical user type annotation.\n pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;\n \n impl<'tcx> CanonicalUserType<'tcx> {"}, {"sha": "50c1787ef8c3d20ea323d5151a0493ffd749aa0c", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -4,7 +4,7 @@ use crate::traits::{self, ObligationCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::arena::ArenaAllocatable;\n-use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n+use rustc_middle::infer::canonical::{Canonical, CanonicalQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n use rustc_middle::ty::{GenericArg, ToPredicate};\n@@ -102,7 +102,7 @@ pub trait InferCtxtBuilderExt<'tcx> {\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n         operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, R>>\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + TypeFoldable<'tcx>,\n@@ -130,7 +130,7 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n         operation: impl FnOnce(&ObligationCtxt<'_, 'tcx>, K) -> Fallible<R>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, R>>\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + TypeFoldable<'tcx>,"}, {"sha": "0752280e78aaa07b897c705c59ea2677eed5e1bc", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::{\n-    Canonical, CanonicalVarValues, CanonicalizedQueryResponse, QueryResponse,\n+    Canonical, CanonicalQueryResponse, CanonicalVarValues, QueryResponse,\n };\n use rustc_infer::infer::{InferCtxt, InferOk};\n use rustc_infer::traits::query::Fallible;\n@@ -213,7 +213,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, T>>\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, T>>\n     where\n         T: Debug + TypeFoldable<'tcx>,\n         Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable<'tcx>,"}, {"sha": "2bab380dba011e4041e1212fc4fbb2142b795857", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -102,7 +102,7 @@ pub enum TraitQueryMode {\n     /// spans etc. passed in and hence can do reasonable\n     /// error reporting on their own.\n     Standard,\n-    /// Canonicalized queries get dummy spans and hence\n+    /// Canonical queries get dummy spans and hence\n     /// must generally propagate errors to\n     /// pre-canonicalization callsites.\n     Canonical,"}, {"sha": "e6db96c9e558044826e31fb7d40322fce56d6ed2", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n@@ -16,8 +16,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n }"}, {"sha": "8c9b9610cb6efe6cda5bb4c92a07defc094b8310", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n@@ -16,8 +16,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n         tcx.type_op_eq(canonicalized)\n     }\n }"}, {"sha": "18d7c9b193601c161b258fa926e1c1a30763aba7", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n@@ -27,8 +27,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n         // FIXME this `unchecked_map` is only necessary because the\n         // query is defined as taking a `ParamEnvAnd<Ty>`; it should\n         // take an `ImpliedOutlivesBounds` instead"}, {"sha": "97002b461aa9be0e295584b5e8737ec95f7d1863", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,10 +1,10 @@\n use crate::infer::canonical::{\n-    Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues, QueryRegionConstraints,\n+    Canonical, CanonicalQueryResponse, OriginalQueryValues, QueryRegionConstraints,\n };\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCause;\n-use rustc_infer::infer::canonical::{Canonical, Certainty};\n+use rustc_infer::infer::canonical::Certainty;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -73,8 +73,8 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<'tcx> + 'tcx {\n     /// not captured in the return value.\n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>>;\n \n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,"}, {"sha": "8f0b4de31e6cf147fcad26eb51bcdc69b1850428", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/normalize.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n@@ -18,51 +18,51 @@ where\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n         T::type_op_method(tcx, canonicalized)\n     }\n }\n \n pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'tcx> + Copy {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>>;\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>>;\n }\n \n impl<'tcx> Normalizable<'tcx> for Ty<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n }\n \n impl<'tcx> Normalizable<'tcx> for ty::Predicate<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n }\n \n impl<'tcx> Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n }\n \n impl<'tcx> Normalizable<'tcx> for ty::FnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n }"}, {"sha": "0d42cd8250a19ec0e812207fa502139a4caffa5c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::dropck_outlives::{trivial_dropck_outlives, DropckOutlivesResult};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n@@ -30,8 +30,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, Self::QueryResponse>> {\n         // Subtle: note that we are not invoking\n         // `infcx.at(...).dropck_outlives(...)` here, but rather the\n         // underlying `dropck_outlives` query. This same underlying"}, {"sha": "b63da28e27475a046b067fe40e72e25459688b6c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt};\n \n@@ -32,8 +32,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        mut canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n+        mut canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n         match canonicalized.value.value.predicate.kind().skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => {\n                 canonicalized.value.param_env.remap_constness_with(pred.constness);"}, {"sha": "c51292eba14be183851ca6d819fa36f81300b861", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/subtype.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab30601503989ecd6501dc3334d61e2d48463c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=50ab30601503989ecd6501dc3334d61e2d48463c", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n+use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n@@ -13,8 +13,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n         tcx.type_op_subtype(canonicalized)\n     }\n }"}]}