{"sha": "462f58298a3a75c15509bf57d8935c3954be6685", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmY1ODI5OGEzYTc1YzE1NTA5YmY1N2Q4OTM1YzM5NTRiZTY2ODU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T12:00:26Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:06:51Z"}, "message": "Make helper functions freestanding", "tree": {"sha": "f9d0cd40d5276100db39c8c501e67c4e275a74dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d0cd40d5276100db39c8c501e67c4e275a74dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462f58298a3a75c15509bf57d8935c3954be6685", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl958xsACgkQtAh+UQ6Y\nsWQTJg/+Me/2pWq7fO2fDvgVMw/7n7B1h/F89R+gqe5+CsHsoprnezSTHCbNi0RU\nrabv2mCg0kgEkF0ax92tIhqRqopaxlh+e9I3relmnD2J9uarC5MP+IrYMTPOnDVo\nPqnp+GHAcAzHqIqNnaFgEuFON7KZUmvG/xhD+aJTnyQUX8uLtGRC35nZU88nibYd\no1rx1gitXhhGannxG2hEjFjEQTS3pnqABOiYMY7J/vkHPlGFq5IBZfFpnmLBJ5vy\nB5w8wOjDzPU7x6aVnoMVlLJQY4RNNp/G2xSQxhKiyb/QVdPYtZJ0ldfxwm9E9FJA\nViXwDgOisW3XR3j/Ndmhzq4RKsMoOI3FM9pvD+H9PT8n3Oai3zU+bYjy/ttRpETm\n2hDn/0/hiD+t+Z5JOO1qjH0Q3WYDG54pHS+IblOGenlfcXfqQvN3jqlea90tXkw+\nXRgjYyKvj9fLf6tom7xQ0KP2kYgtGCU0qTOj4Uq9OWIkGg3+CW670eb6qbbbgvWa\nnuostMLFs6leO498kQoaT2p35Zf1HUkDtRG6hfC6xdhtFb8AeOt9axWyRDjxW9sT\n2wN1eG7H9GB5J1oq/aRY6ZiJ1BLmOM9S1HUrRzgXPmBOD8k4XE7nzEsDk1qpyZq8\nY7WNbMd2DFA6NtxffuGxOfK4O104RhpRPFsxt3cCF3x/ukBPmqc=\n=aWmz\n-----END PGP SIGNATURE-----", "payload": "tree f9d0cd40d5276100db39c8c501e67c4e275a74dd\nparent 5fc5490bc84d02408c8fbcc6bf8edd49af06c9a4\nauthor Aaron Hill <aa1ronham@gmail.com> 1601812826 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601827611 -0400\n\nMake helper functions freestanding\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462f58298a3a75c15509bf57d8935c3954be6685", "html_url": "https://github.com/rust-lang/rust/commit/462f58298a3a75c15509bf57d8935c3954be6685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462f58298a3a75c15509bf57d8935c3954be6685/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc5490bc84d02408c8fbcc6bf8edd49af06c9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc5490bc84d02408c8fbcc6bf8edd49af06c9a4", "html_url": "https://github.com/rust-lang/rust/commit/5fc5490bc84d02408c8fbcc6bf8edd49af06c9a4"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "56dcbb9e32f7883b2c62e53c9c2a10a25b8914e2", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/462f58298a3a75c15509bf57d8935c3954be6685/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462f58298a3a75c15509bf57d8935c3954be6685/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=462f58298a3a75c15509bf57d8935c3954be6685", "patch": "@@ -60,20 +60,36 @@ fn convert_path_separator<'a>(\n     };\n }\n \n+#[cfg(unix)]\n+pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    Ok(os_str.as_bytes())\n+}\n+\n+#[cfg(not(unix))]\n+pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+    // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+    // valid.\n+    os_str\n+        .to_str()\n+        .map(|s| s.as_bytes())\n+        .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+}\n+\n+#[cfg(unix)]\n+pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    Ok(OsStr::from_bytes(bytes))\n+}\n+#[cfg(not(unix))]\n+pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    let s = std::str::from_utf8(bytes)\n+        .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+    Ok(OsStr::new(s))\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n \n-    #[cfg(unix)]\n-    fn bytes_to_os_str<'a>(&self, bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-        Ok(OsStr::from_bytes(bytes))\n-    }\n-    #[cfg(not(unix))]\n-    fn bytes_to_os_str<'a>(&self, bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-        let s = std::str::from_utf8(bytes)\n-            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n-        Ok(OsStr::new(s))\n-    }\n-\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n@@ -83,7 +99,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     {\n         let this = self.eval_context_ref();\n         let bytes = this.memory.read_c_str(scalar)?;\n-        self.bytes_to_os_str(bytes)\n+        bytes_to_os_str(bytes)\n     }\n \n     /// Helper function to read an OsString from a 0x0000-terminated sequence of u16,\n@@ -108,22 +124,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         u16vec_to_osstring(u16_vec)\n     }\n \n-    #[cfg(unix)]\n-    fn os_str_to_bytes<'a>(&self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-        Ok(os_str.as_bytes())\n-    }\n-\n-    #[cfg(not(unix))]\n-    fn os_str_to_bytes<'a>(&self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-        // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-        // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-        // valid.\n-        os_str\n-            .to_str()\n-            .map(|s| s.as_bytes())\n-            .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-    }\n-\n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n@@ -136,7 +136,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n \n-        let bytes = self.os_str_to_bytes(os_str)?;\n+        let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         let string_length = u64::try_from(bytes.len()).unwrap();\n@@ -269,3 +269,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }\n+"}, {"sha": "0247c9df006f1eb502e565432c89e60b11a38e2b", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462f58298a3a75c15509bf57d8935c3954be6685/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462f58298a3a75c15509bf57d8935c3954be6685/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=462f58298a3a75c15509bf57d8935c3954be6685", "patch": "@@ -1371,7 +1371,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let result = std::fs::read_link(pathname);\n         match result {\n             Ok(resolved) => {\n-                let mut path_bytes = this.os_str_to_bytes(resolved.as_ref())?;\n+                let mut path_bytes = crate::shims::os_str::os_str_to_bytes(resolved.as_ref())?;\n                 let bufsize: usize = bufsize.try_into().unwrap();\n                 if path_bytes.len() > bufsize {\n                     path_bytes = &path_bytes[..bufsize]"}]}