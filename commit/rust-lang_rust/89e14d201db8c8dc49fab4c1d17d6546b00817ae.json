{"sha": "89e14d201db8c8dc49fab4c1d17d6546b00817ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTE0ZDIwMWRiOGM4ZGM0OWZhYjRjMWQxN2Q2NTQ2YjAwODE3YWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-07T19:53:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-07T19:53:02Z"}, "message": "use_self: switch to hir_ty_to_ty.", "tree": {"sha": "f2a4e4e62350dcdfb27edb94764d6a338e0be97f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a4e4e62350dcdfb27edb94764d6a338e0be97f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e14d201db8c8dc49fab4c1d17d6546b00817ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e14d201db8c8dc49fab4c1d17d6546b00817ae", "html_url": "https://github.com/rust-lang/rust/commit/89e14d201db8c8dc49fab4c1d17d6546b00817ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e14d201db8c8dc49fab4c1d17d6546b00817ae/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18520aa8b2e2aa200c5f1756bfd9ab4d3294c995", "url": "https://api.github.com/repos/rust-lang/rust/commits/18520aa8b2e2aa200c5f1756bfd9ab4d3294c995", "html_url": "https://github.com/rust-lang/rust/commit/18520aa8b2e2aa200c5f1756bfd9ab4d3294c995"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "412bebb9bc6e5eca20d0dd200a9a66affe7f7d36", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 41, "deletions": 50, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/89e14d201db8c8dc49fab4c1d17d6546b00817ae/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e14d201db8c8dc49fab4c1d17d6546b00817ae/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=89e14d201db8c8dc49fab4c1d17d6546b00817ae", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::ty;\n use rustc_middle::ty::{DefIdTree, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n+use rustc_typeck::hir_ty_to_ty;\n \n use crate::utils::{differing_macro_contexts, span_lint_and_sugg};\n \n@@ -80,37 +81,28 @@ fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path<'_>, last_segment: O\n     );\n }\n \n-struct TraitImplTyVisitor<'a, 'tcx> {\n-    item_type: Ty<'tcx>,\n+// FIXME: always use this (more correct) visitor, not just in method signatures.\n+struct SemanticUseSelfVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    trait_type_walker: ty::walk::TypeWalker<'tcx>,\n-    impl_type_walker: ty::walk::TypeWalker<'tcx>,\n+    self_ty: Ty<'tcx>,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for SemanticUseSelfVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n-        let trait_ty = self.trait_type_walker.next();\n-        let impl_ty = self.impl_type_walker.next();\n-\n-        if_chain! {\n-            if let TyKind::Path(QPath::Resolved(_, path)) = &t.kind;\n-\n-            // The implementation and trait types don't match which means that\n-            // the concrete type was specified by the implementation\n-            if impl_ty != trait_ty;\n-            if let Some(impl_ty) = impl_ty;\n-            if self.item_type == impl_ty;\n-            then {\n-                match path.res {\n-                    def::Res::SelfTy(..) => {},\n-                    _ => span_use_self_lint(self.cx, path, None)\n-                }\n+    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = &hir_ty.kind {\n+            match path.res {\n+                def::Res::SelfTy(..) => {},\n+                _ => {\n+                    if hir_ty_to_ty(self.cx.tcx, hir_ty) == self.self_ty {\n+                        span_use_self_lint(self.cx, path, None);\n+                    }\n+                },\n             }\n         }\n \n-        walk_ty(self, t)\n+        walk_ty(self, hir_ty)\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -120,10 +112,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n \n fn check_trait_method_impl_decl<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n-    item_type: Ty<'tcx>,\n     impl_item: &ImplItem<'_>,\n     impl_decl: &'tcx FnDecl<'_>,\n-    impl_trait_ref: &ty::TraitRef<'_>,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n ) {\n     let trait_method = cx\n         .tcx\n@@ -134,34 +125,35 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n     let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n \n-    let impl_method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-    let impl_method_sig = cx.tcx.fn_sig(impl_method_def_id);\n-    let impl_method_sig = cx.tcx.erase_late_bound_regions(&impl_method_sig);\n-\n-    let output_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n+    let output_hir_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n         Some(&**ty)\n     } else {\n         None\n     };\n \n-    // `impl_decl_ty` (of type `hir::Ty`) represents the type declared in the signature.\n-    // `impl_ty` (of type `ty:TyS`) is the concrete type that the compiler has determined for\n-    // that declaration. We use `impl_decl_ty` to see if the type was declared as `Self`\n-    // and use `impl_ty` to check its concrete type.\n-    for (impl_decl_ty, (impl_ty, trait_ty)) in impl_decl.inputs.iter().chain(output_ty).zip(\n-        impl_method_sig\n-            .inputs_and_output\n-            .iter()\n-            .zip(trait_method_sig.inputs_and_output),\n-    ) {\n-        let mut visitor = TraitImplTyVisitor {\n-            cx,\n-            item_type,\n-            trait_type_walker: trait_ty.walk(),\n-            impl_type_walker: impl_ty.walk(),\n-        };\n-\n-        visitor.visit_ty(&impl_decl_ty);\n+    // `impl_hir_ty` (of type `hir::Ty`) represents the type written in the signature.\n+    // `trait_ty` (of type `ty::Ty`) is the semantic type for the signature in the trait.\n+    // We use `impl_hir_ty` to see if the type was written as `Self`,\n+    // `hir_ty_to_ty(...)` to check semantic types of paths, and\n+    // `trait_ty` to determine which parts of the signature in the trait, mention\n+    // the type being implemented verbatim (as opposed to `Self`).\n+    for (impl_hir_ty, trait_ty) in impl_decl\n+        .inputs\n+        .iter()\n+        .chain(output_hir_ty)\n+        .zip(trait_method_sig.inputs_and_output)\n+    {\n+        // Check if the input/output type in the trait method specifies the implemented\n+        // type verbatim, and only suggest `Self` if that isn't the case.\n+        // This avoids suggestions to e.g. replace `Vec<u8>` with `Vec<Self>`,\n+        // in an `impl Trait for u8`, when the trait always uses `Vec<u8>`.\n+        // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n+        let self_ty = impl_trait_ref.self_ty();\n+        if !trait_ty.walk().any(|inner| inner == self_ty.into()) {\n+            let mut visitor = SemanticUseSelfVisitor { cx, self_ty };\n+\n+            visitor.visit_ty(&impl_hir_ty);\n+        }\n     }\n }\n \n@@ -197,8 +189,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n-                                let item_type = cx.tcx.type_of(impl_def_id);\n-                                check_trait_method_impl_decl(cx, item_type, impl_item, impl_decl, &impl_trait_ref);\n+                                check_trait_method_impl_decl(cx, impl_item, impl_decl, impl_trait_ref);\n \n                                 let body = cx.tcx.hir().body(*impl_body_id);\n                                 visitor.visit_body(body);"}]}