{"sha": "b2f07c60564dc1dce5151cb45423371915f5f87b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZjA3YzYwNTY0ZGMxZGNlNTE1MWNiNDU0MjMzNzE5MTVmNWY4N2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:31:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:31:33Z"}, "message": "Collect all fns first so decl order doesn't matter to translation.", "tree": {"sha": "8d2b4b03096e78b5de6fc227a604ca7c16c449a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2b4b03096e78b5de6fc227a604ca7c16c449a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2f07c60564dc1dce5151cb45423371915f5f87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f07c60564dc1dce5151cb45423371915f5f87b", "html_url": "https://github.com/rust-lang/rust/commit/b2f07c60564dc1dce5151cb45423371915f5f87b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2f07c60564dc1dce5151cb45423371915f5f87b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4497e481e99af8806f78deaeb60c67cb88eb5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4497e481e99af8806f78deaeb60c67cb88eb5c5", "html_url": "https://github.com/rust-lang/rust/commit/d4497e481e99af8806f78deaeb60c67cb88eb5c5"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "e778a6d45bfd8ba9d987186db791e885fe86cc9f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b2f07c60564dc1dce5151cb45423371915f5f87b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2f07c60564dc1dce5151cb45423371915f5f87b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b2f07c60564dc1dce5151cb45423371915f5f87b", "patch": "@@ -45,6 +45,7 @@ state type trans_ctxt = rec(session.session sess,\n                             hashmap[str, ValueRef] upcalls,\n                             hashmap[str, ValueRef] fn_names,\n                             hashmap[ast.def_id, ValueRef] fn_ids,\n+                            hashmap[ast.def_id, @ast.item] items,\n                             @glue_fns glues,\n                             namegen names,\n                             str path);\n@@ -974,27 +975,16 @@ fn new_fn_ctxt(@trans_ctxt cx,\n                &ast._fn f,\n                ast.def_id fid) -> @fn_ctxt {\n \n-    let vec[TypeRef] args = vec(T_ptr(type_of(cx, f.output)), // outptr.\n-                                T_taskptr()   // taskptr\n-                                );\n-    let uint arg_n = _vec.len[TypeRef](args);\n-\n-    let vec[TypeRef] T_explicit_args = vec();\n-    for (ast.arg arg in f.inputs) {\n-        T_explicit_args += type_of(cx, arg.ty);\n-    }\n-    args += T_explicit_args;\n-\n-    let ValueRef llfn = decl_cdecl_fn(cx.llmod, name, args, T_void());\n+    let ValueRef llfn = cx.fn_ids.get(fid);\n     cx.fn_names.insert(cx.path, llfn);\n-    cx.fn_ids.insert(fid, llfn);\n \n     let ValueRef lloutptr = llvm.LLVMGetParam(llfn, 0u);\n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 1u);\n \n     let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] llargs = new_def_hash[ValueRef]();\n \n+    let uint arg_n = 2u;\n     for (ast.arg arg in f.inputs) {\n         llargs.insert(arg.id, llvm.LLVMGetParam(llfn, arg_n));\n         arg_n += 1u;\n@@ -1035,6 +1025,42 @@ fn trans_mod(@trans_ctxt cx, &ast._mod m) {\n }\n \n \n+fn collect_item(&@trans_ctxt cx, @ast.item i) -> @trans_ctxt {\n+    alt (i.node) {\n+        case (ast.item_fn(?name, ?f, ?fid)) {\n+            cx.items.insert(fid, i);\n+            let vec[TypeRef] args = vec(T_ptr(type_of(cx, f.output)), // outptr.\n+                                        T_taskptr()   // taskptr\n+                                        );\n+            let vec[TypeRef] T_explicit_args = vec();\n+            for (ast.arg arg in f.inputs) {\n+                T_explicit_args += type_of(cx, arg.ty);\n+            }\n+            args += T_explicit_args;\n+\n+            let str s = cx.names.next(\"_rust_fn\") + \".\" + name;\n+            let ValueRef llfn = decl_cdecl_fn(cx.llmod, s, args, T_void());\n+            cx.fn_ids.insert(fid, llfn);\n+        }\n+\n+        case (ast.item_mod(?name, ?m, ?mid)) {\n+            cx.items.insert(mid, i);\n+        }\n+    }\n+    ret cx;\n+}\n+\n+\n+fn collect_items(@trans_ctxt cx, @ast.crate crate) {\n+\n+    let fold.ast_fold[@trans_ctxt] fld = fold.new_identity_fold[@trans_ctxt]();\n+\n+    fld = @rec( update_env_for_item = bind collect_item(_,_)\n+                with *fld );\n+\n+    fold.fold_crate[@trans_ctxt](cx, fld, crate);\n+}\n+\n fn p2i(ValueRef v) -> ValueRef {\n     ret llvm.LLVMConstPtrToInt(v, T_int());\n }\n@@ -1163,10 +1189,12 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n                    upcalls = new_str_hash[ValueRef](),\n                    fn_names = new_str_hash[ValueRef](),\n                    fn_ids = new_def_hash[ValueRef](),\n+                   items = new_def_hash[@ast.item](),\n                    glues = glues,\n                    names = namegen(0),\n                    path = \"_rust\");\n \n+    collect_items(cx, crate);\n     trans_mod(cx, crate.node.module);\n     trans_exit_task_glue(cx);\n     trans_main_fn(cx, crate_constant(cx));"}]}