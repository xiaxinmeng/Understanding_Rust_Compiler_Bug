{"sha": "c21e25c2622c2a7294189ddc545a0cb9c621631a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWUyNWMyNjIyYzJhNzI5NDE4OWRkYzU0NWEwY2I5YzYyMTYzMWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-26T09:52:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-26T09:52:52Z"}, "message": "simplify match stmt", "tree": {"sha": "04de1c93a0593e2095577a182c1daef70967f53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04de1c93a0593e2095577a182c1daef70967f53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21e25c2622c2a7294189ddc545a0cb9c621631a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21e25c2622c2a7294189ddc545a0cb9c621631a", "html_url": "https://github.com/rust-lang/rust/commit/c21e25c2622c2a7294189ddc545a0cb9c621631a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21e25c2622c2a7294189ddc545a0cb9c621631a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17dd3608477a47741f97b907a61b6d81524ba4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17dd3608477a47741f97b907a61b6d81524ba4e", "html_url": "https://github.com/rust-lang/rust/commit/a17dd3608477a47741f97b907a61b6d81524ba4e"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "d6d1153f2790f09e15695e705765dd8cfcb3f390", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21e25c2622c2a7294189ddc545a0cb9c621631a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21e25c2622c2a7294189ddc545a0cb9c621631a/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=c21e25c2622c2a7294189ddc545a0cb9c621631a", "patch": "@@ -289,11 +289,7 @@ impl<'a> AstValidator<'a> {\n         match expr.kind {\n             ExprKind::Lit(..) | ExprKind::Err => {}\n             ExprKind::Path(..) if allow_paths => {}\n-            ExprKind::Unary(UnOp::Neg, ref inner)\n-                if match inner.kind {\n-                    ExprKind::Lit(_) => true,\n-                    _ => false,\n-                } => {}\n+            ExprKind::Unary(UnOp::Neg, ref inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n             _ => self.err_handler().span_err(\n                 expr.span,\n                 \"arbitrary expressions aren't allowed \\"}]}