{"sha": "0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNGI4ZmZjY2RmYWE0OGU3ZWM2MWQ4ZjhkYzA2ZjE1ZjMxYzgwMGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-07T20:24:15Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-24T19:25:31Z"}, "message": "Add E0605", "tree": {"sha": "313024744fed1e7de35bf0b455035755fbafa41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313024744fed1e7de35bf0b455035755fbafa41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "html_url": "https://github.com/rust-lang/rust/commit/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5977df1c1a934f9892e26a17b38065412ba31d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5977df1c1a934f9892e26a17b38065412ba31d1", "html_url": "https://github.com/rust-lang/rust/commit/d5977df1c1a934f9892e26a17b38065412ba31d1"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "69174dacaaa07fa7d79e541a2e8f59aca99f0270", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "patch": "@@ -209,13 +209,13 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                  \"only `u8` can be cast as `char`, not `{}`\", self.expr_ty).emit();\n             }\n             CastError::NonScalar => {\n-                fcx.type_error_message(self.span,\n-                                       |actual| {\n-                                           format!(\"non-scalar cast: `{}` as `{}`\",\n-                                                   actual,\n-                                                   fcx.ty_to_string(self.cast_ty))\n-                                       },\n-                                       self.expr_ty);\n+                struct_span_err!(fcx.tcx.sess, self.span, E0605,\n+                                 \"non-scalar cast: `{}` as `{}`\",\n+                                 self.expr_ty,\n+                                 fcx.ty_to_string(self.cast_ty))\n+                                .note(\"an `as` expression can only be used to convert between \\\n+                                       primitive types. Consider using the `From` trait\")\n+                                .emit();\n             }\n             CastError::IllegalCast => {\n                 fcx.type_error_message(self.span,"}, {"sha": "a787aadc6781c21a4b9dcb80288b36df2a4a6323", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "patch": "@@ -4225,6 +4225,32 @@ assert!(c, 'V');\n ```\n \"##,\n \n+E0605: r##\"\n+An invalid cast was attempted.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0605\n+let x = 0u8;\n+x as Vec<u8>; // error: non-scalar cast: `u8` as `std::vec::Vec<u8>`\n+\n+// Another example\n+\n+let v = 0 as *const u8; // So here, `v` is a `*const u8`.\n+v as &u8; // error: non-scalar cast: `*const u8` as `&u8`\n+```\n+\n+Only primitive types cast be casted into each others. Examples:\n+\n+```\n+let x = 0u8;\n+x as u32; // ok!\n+\n+let v = 0 as *const u8;\n+v as *const i8; // ok!\n+```\n+\"##,\n+\n E0609: r##\"\n Attempted to access a non-existent field in a struct.\n "}, {"sha": "add3fd8fd8ac28c1b81735672fa0b629a9a663bf", "filename": "src/test/compile-fail/E0605.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fcompile-fail%2FE0605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fcompile-fail%2FE0605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0605.rs?ref=0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 0u8;\n+    x as Vec<u8>; //~ ERROR E0605\n+                  //~| NOTE an `as` expression can only be used to convert between primitive types\n+\n+    let v = 0 as *const u8;\n+    v as &u8; //~ ERROR E0605\n+              //~| NOTE an `as` expression can only be used to convert between primitive types\n+}"}, {"sha": "c79d242dc5e1991859f1b4eb752615d77ffd162b", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "patch": "@@ -20,35 +20,45 @@ error[E0609]: no field `f` on type `fn() {main}`\n 75 |     let _ = main.f as *const u32;\n    |                  ^\n \n-error: non-scalar cast: `*const u8` as `&u8`\n+error[E0605]: non-scalar cast: `*const u8` as `&u8`\n   --> $DIR/cast-rfc0401.rs:39:13\n    |\n 39 |     let _ = v as &u8;\n    |             ^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error: non-scalar cast: `*const u8` as `E`\n+error[E0605]: non-scalar cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:40:13\n    |\n 40 |     let _ = v as E;\n    |             ^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error: non-scalar cast: `*const u8` as `fn()`\n+error[E0605]: non-scalar cast: `*const u8` as `fn()`\n   --> $DIR/cast-rfc0401.rs:41:13\n    |\n 41 |     let _ = v as fn();\n    |             ^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error: non-scalar cast: `*const u8` as `(u32,)`\n+error[E0605]: non-scalar cast: `*const u8` as `(u32,)`\n   --> $DIR/cast-rfc0401.rs:42:13\n    |\n 42 |     let _ = v as (u32,);\n    |             ^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n-error: non-scalar cast: `std::option::Option<&*const u8>` as `*const u8`\n+error[E0605]: non-scalar cast: `std::option::Option<&*const u8>` as `*const u8`\n   --> $DIR/cast-rfc0401.rs:43:13\n    |\n 43 |     let _ = Some(&v) as *const u8;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error: casting `*const u8` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:45:13"}, {"sha": "06b88069002909f977aa5224b7b5641d3f6e793d", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=0e4b8ffccdfaa48e7ec61d8f8dc06f15f31c800f", "patch": "@@ -7,14 +7,16 @@ error[E0308]: mismatched types\n 37 |     write!(hello);\n    |     -------------- in this macro invocation\n \n-error: non-scalar cast: `{integer}` as `()`\n+error[E0605]: non-scalar cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:32:19\n    |\n 32 |     ($x:expr) => ($x as ())\n    |                   ^^^^^^^^\n ...\n 38 |     cast!(2);\n    |     --------- in this macro invocation\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error: aborting due to previous error(s)\n "}]}