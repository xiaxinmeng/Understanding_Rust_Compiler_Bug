{"sha": "04b3cd9f7c8366490590d839ab814d03406eed4a", "node_id": "C_kwDOAAsO6NoAKDA0YjNjZDlmN2M4MzY2NDkwNTkwZDgzOWFiODE0ZDAzNDA2ZWVkNGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-11T17:42:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-12T02:51:33Z"}, "message": "use a loop rather than try_fold", "tree": {"sha": "2f55f78056b52a71892966f97d6cfb7831649a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f55f78056b52a71892966f97d6cfb7831649a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b3cd9f7c8366490590d839ab814d03406eed4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b3cd9f7c8366490590d839ab814d03406eed4a", "html_url": "https://github.com/rust-lang/rust/commit/04b3cd9f7c8366490590d839ab814d03406eed4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b3cd9f7c8366490590d839ab814d03406eed4a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab225ade1ec401ae990904326fccf54936a5e990", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab225ade1ec401ae990904326fccf54936a5e990", "html_url": "https://github.com/rust-lang/rust/commit/ab225ade1ec401ae990904326fccf54936a5e990"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "1465b986293452efa3c8201ebe4e0ae9609dc85b", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04b3cd9f7c8366490590d839ab814d03406eed4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3cd9f7c8366490590d839ab814d03406eed4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=04b3cd9f7c8366490590d839ab814d03406eed4a", "patch": "@@ -524,19 +524,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// avoid allocations.\n     pub fn eval_place_to_op(\n         &self,\n-        place: mir::Place<'tcx>,\n+        mir_place: mir::Place<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         // Do not use the layout passed in as argument if the base we are looking at\n         // here is not the entire place.\n-        let layout = if place.projection.is_empty() { layout } else { None };\n+        let layout = if mir_place.projection.is_empty() { layout } else { None };\n \n-        let base_op = self.local_to_op(self.frame(), place.local, layout)?;\n-\n-        let op = place\n-            .projection\n-            .iter()\n-            .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;\n+        let mut op = self.local_to_op(self.frame(), mir_place.local, layout)?;\n+        // Using `try_fold` turned out to be bad for performance, hence the loop.\n+        for elem in mir_place.projection.iter() {\n+            op = self.operand_projection(&op, elem)?\n+        }\n \n         trace!(\"eval_place_to_op: got {:?}\", *op);\n         // Sanity-check the type we ended up with.\n@@ -545,12 +544,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 *self.tcx,\n                 self.param_env,\n                 self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(\n-                    place.ty(&self.frame().body.local_decls, *self.tcx).ty\n+                    mir_place.ty(&self.frame().body.local_decls, *self.tcx).ty\n                 )?)?,\n                 op.layout,\n             ),\n             \"eval_place of a MIR place with type {:?} produced an interpreter operand with type {:?}\",\n-            place.ty(&self.frame().body.local_decls, *self.tcx).ty,\n+            mir_place.ty(&self.frame().body.local_decls, *self.tcx).ty,\n             op.layout.ty,\n         );\n         Ok(op)"}, {"sha": "2001359d199cf7f6c8bd4f535e35059747e8da46", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/04b3cd9f7c8366490590d839ab814d03406eed4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b3cd9f7c8366490590d839ab814d03406eed4a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=04b3cd9f7c8366490590d839ab814d03406eed4a", "patch": "@@ -432,31 +432,30 @@ where\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn eval_place(\n         &mut self,\n-        place: mir::Place<'tcx>,\n+        mir_place: mir::Place<'tcx>,\n     ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n-        let base_place = self.local_to_place(self.frame_idx(), place.local)?;\n-\n-        let final_place = place\n-            .projection\n-            .iter()\n-            .try_fold(base_place, |op, elem| self.place_projection(&op, elem))?;\n+        let mut place = self.local_to_place(self.frame_idx(), mir_place.local)?;\n+        // Using `try_fold` turned out to be bad for performance, hence the loop.\n+        for elem in mir_place.projection.iter() {\n+            place = self.place_projection(&place, elem)?\n+        }\n \n-        trace!(\"{:?}\", self.dump_place(final_place.place));\n+        trace!(\"{:?}\", self.dump_place(place.place));\n         // Sanity-check the type we ended up with.\n         debug_assert!(\n             mir_assign_valid_types(\n                 *self.tcx,\n                 self.param_env,\n                 self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(\n-                    place.ty(&self.frame().body.local_decls, *self.tcx).ty\n+                    mir_place.ty(&self.frame().body.local_decls, *self.tcx).ty\n                 )?)?,\n-                final_place.layout,\n+                place.layout,\n             ),\n             \"eval_place of a MIR place with type {:?} produced an interpreter place with type {:?}\",\n-            place.ty(&self.frame().body.local_decls, *self.tcx).ty,\n-            final_place.layout.ty,\n+            mir_place.ty(&self.frame().body.local_decls, *self.tcx).ty,\n+            place.layout.ty,\n         );\n-        Ok(final_place)\n+        Ok(place)\n     }\n \n     /// Write an immediate to a place"}]}