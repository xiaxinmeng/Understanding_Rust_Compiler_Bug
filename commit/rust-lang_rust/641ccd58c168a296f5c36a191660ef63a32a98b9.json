{"sha": "641ccd58c168a296f5c36a191660ef63a32a98b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWNjZDU4YzE2OGEyOTZmNWMzNmExOTE2NjBlZjYzYTMyYTk4Yjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-12-12T22:48:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-12-12T22:48:47Z"}, "message": "Fix signature of `__wasilibc_find_relpath`\n\nLooks like this function changed upstream, so it needs to be adjusted\nfor when used by libstd.", "tree": {"sha": "03c21da0cad95b304ff4fdc0a87569356960a9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c21da0cad95b304ff4fdc0a87569356960a9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641ccd58c168a296f5c36a191660ef63a32a98b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641ccd58c168a296f5c36a191660ef63a32a98b9", "html_url": "https://github.com/rust-lang/rust/commit/641ccd58c168a296f5c36a191660ef63a32a98b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641ccd58c168a296f5c36a191660ef63a32a98b9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9469a6aec2f49fa1e2ae670649f293866932253", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9469a6aec2f49fa1e2ae670649f293866932253", "html_url": "https://github.com/rust-lang/rust/commit/e9469a6aec2f49fa1e2ae670649f293866932253"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "04bfdf67e12d28b416ce43d5e89d59503fbe3c05", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/641ccd58c168a296f5c36a191660ef63a32a98b9/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641ccd58c168a296f5c36a191660ef63a32a98b9/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=641ccd58c168a296f5c36a191660ef63a32a98b9", "patch": "@@ -364,7 +364,7 @@ impl OpenOptions {\n \n impl File {\n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n-        let (dir, file) = open_parent(path, wasi::RIGHTS_PATH_OPEN)?;\n+        let (dir, file) = open_parent(path)?;\n         open_at(&dir, &file, opts)\n     }\n \n@@ -452,7 +452,7 @@ impl DirBuilder {\n     }\n \n     pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n-        let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_CREATE_DIRECTORY)?;\n+        let (dir, file) = open_parent(p)?;\n         dir.create_directory(osstr2str(file.as_ref())?)\n     }\n }\n@@ -478,13 +478,13 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_UNLINK_FILE)?;\n+    let (dir, file) = open_parent(p)?;\n     dir.unlink_file(osstr2str(file.as_ref())?)\n }\n \n pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n-    let (old, old_file) = open_parent(old, wasi::RIGHTS_PATH_RENAME_SOURCE)?;\n-    let (new, new_file) = open_parent(new, wasi::RIGHTS_PATH_RENAME_TARGET)?;\n+    let (old, old_file) = open_parent(old)?;\n+    let (new, new_file) = open_parent(new)?;\n     old.rename(osstr2str(old_file.as_ref())?, &new, osstr2str(new_file.as_ref())?)\n }\n \n@@ -495,12 +495,12 @@ pub fn set_perm(_p: &Path, _perm: FilePermissions) -> io::Result<()> {\n }\n \n pub fn rmdir(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_REMOVE_DIRECTORY)?;\n+    let (dir, file) = open_parent(p)?;\n     dir.remove_directory(osstr2str(file.as_ref())?)\n }\n \n pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_READLINK)?;\n+    let (dir, file) = open_parent(p)?;\n     read_link(&dir, &file)\n }\n \n@@ -536,13 +536,13 @@ fn read_link(fd: &WasiFd, file: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_SYMLINK)?;\n+    let (dst, dst_file) = open_parent(dst)?;\n     dst.symlink(osstr2str(src.as_ref())?, osstr2str(dst_file.as_ref())?)\n }\n \n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (src, src_file) = open_parent(src, wasi::RIGHTS_PATH_LINK_SOURCE)?;\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_LINK_TARGET)?;\n+    let (src, src_file) = open_parent(src)?;\n+    let (dst, dst_file) = open_parent(dst)?;\n     src.link(\n         wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n         osstr2str(src_file.as_ref())?,\n@@ -552,12 +552,12 @@ pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n }\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n+    let (dir, file) = open_parent(p)?;\n     metadata_at(&dir, wasi::LOOKUPFLAGS_SYMLINK_FOLLOW, &file)\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n+    let (dir, file) = open_parent(p)?;\n     metadata_at(&dir, 0, &file)\n }\n \n@@ -611,11 +611,11 @@ fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {\n ///\n /// Note that this can fail if `p` doesn't look like it can be opened relative\n /// to any preopened file descriptor.\n-fn open_parent(p: &Path, rights: wasi::Rights) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n+fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n     let p = CString::new(p.as_os_str().as_bytes())?;\n     unsafe {\n         let mut ret = ptr::null();\n-        let fd = libc::__wasilibc_find_relpath(p.as_ptr(), rights, 0, &mut ret);\n+        let fd = __wasilibc_find_relpath(p.as_ptr(), &mut ret);\n         if fd == -1 {\n             let msg = format!(\n                 \"failed to find a preopened file descriptor \\\n@@ -635,6 +635,13 @@ fn open_parent(p: &Path, rights: wasi::Rights) -> io::Result<(ManuallyDrop<WasiF\n \n         return Ok((ManuallyDrop::new(WasiFd::from_raw(fd as u32)), path));\n     }\n+\n+    extern \"C\" {\n+        pub fn __wasilibc_find_relpath(\n+            path: *const libc::c_char,\n+            relative_path: *mut *const libc::c_char,\n+        ) -> libc::c_int;\n+    }\n }\n \n pub fn osstr2str(f: &OsStr) -> io::Result<&str> {"}]}