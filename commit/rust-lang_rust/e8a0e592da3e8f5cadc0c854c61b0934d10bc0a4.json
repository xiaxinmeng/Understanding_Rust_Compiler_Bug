{"sha": "e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTBlNTkyZGEzZThmNWNhZGMwYzg1NGM2MWIwOTM0ZDEwYmMwYTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T20:31:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:07Z"}, "message": "reimplement some of the unsafe stuff which got lost\n\n  - blocks inherit unsafety\n  - remove the --check-unsafe flag\n  - add unsafe annotations where needed to get things to compile", "tree": {"sha": "2811bd2cbb435c064a999537d3b24082ce67e906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2811bd2cbb435c064a999537d3b24082ce67e906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "html_url": "https://github.com/rust-lang/rust/commit/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f994871a3daaa52c22b89057c575e0f65ffae013", "url": "https://api.github.com/repos/rust-lang/rust/commits/f994871a3daaa52c22b89057c575e0f65ffae013", "html_url": "https://github.com/rust-lang/rust/commit/f994871a3daaa52c22b89057c575e0f65ffae013"}], "stats": {"total": 293, "additions": 137, "deletions": 156}, "files": [{"sha": "4a7e238ae55d14d89e82df8c501a5d4f0fb92c0c", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -34,16 +34,14 @@ tag output_type {\n     output_type_exe;\n }\n \n-fn llvm_err(sess: session::session, msg: str) {\n-    unsafe {\n-        let buf = llvm::LLVMRustGetLastError();\n-        if buf == std::ptr::null() {\n-            sess.fatal(msg);\n-        } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n-    }\n+fn llvm_err(sess: session::session, msg: str) unsafe {\n+    let buf = llvm::LLVMRustGetLastError();\n+    if buf == std::ptr::null() {\n+        sess.fatal(msg);\n+    } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n }\n \n-fn link_intrinsics(sess: session::session, llmod: ModuleRef) unsafe {\n+fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n     let path = alt filesearch::search(\n         sess.filesearch(),\n         bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n@@ -90,8 +88,7 @@ mod write {\n         } else { stem = str::substr(output_path, 0u, dot_pos as uint); }\n         ret stem + \".\" + extension;\n     }\n-    fn run_passes(sess: session::session, llmod: ModuleRef, output: str)\n-       unsafe {\n+    fn run_passes(sess: session::session, llmod: ModuleRef, output: str) {\n         let opts = sess.get_opts();\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n         link_intrinsics(sess, llmod);"}, {"sha": "43d138c9e1accb51fcc57470ca573ccdb65a0159", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -325,7 +325,6 @@ fn build_session_options(match: getopts::match)\n \n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n-    let check_unsafe = opt_present(match, \"check-unsafe\");\n \n     let output_type =\n         if parse_only || no_trans {\n@@ -397,8 +396,7 @@ fn build_session_options(match: getopts::match)\n           parse_only: parse_only,\n           no_trans: no_trans,\n           do_gc: do_gc,\n-          stack_growth: stack_growth,\n-          check_unsafe: check_unsafe};\n+          stack_growth: stack_growth};\n     ret sopts;\n }\n "}, {"sha": "1f3f9baab8a90a564fe1214dcee293a1e5955315", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -41,8 +41,7 @@ type options =\n      parse_only: bool,\n      no_trans: bool,\n      do_gc: bool,\n-     stack_growth: bool,\n-     check_unsafe: bool};\n+     stack_growth: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "9562e05bed5755a91773d70aa078e1ee3263c83b", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -956,7 +956,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n       7 {\n         ret \"i\" + std::int::str(llvm::LLVMGetIntTypeWidth(ty) as int);\n       }\n-      8 unsafe {\n+      8 {\n         let s = \"fn(\";\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args: uint = llvm::LLVMCountParamTypes(ty);\n@@ -969,7 +969,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         s += type_to_str_inner(names, outer, out_ty);\n         ret s;\n       }\n-      9 unsafe {\n+      9 {\n         let s: str = \"{\";\n         let n_elts: uint = llvm::LLVMCountStructElementTypes(ty);\n         let elts: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_elts);"}, {"sha": "fe352290d2c81959cd5d89462e801909abd0e753", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -169,27 +169,25 @@ fn find_library_crate_aux(nn: {prefix: str, suffix: str}, crate_name: str,\n     });\n }\n \n-fn get_metadata_section(filename: str) -> option::t<@[u8]> {\n-    unsafe {\n-        let mb = str::as_buf(filename, {|buf|\n-            llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-                                       });\n-        if mb as int == 0 { ret option::none::<@[u8]>; }\n-        let of = mk_object_file(mb);\n-        let si = mk_section_iter(of.llof);\n-        while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n-            let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-            let name = str::str_from_cstr(name_buf);\n-            if str::eq(name, x86::get_meta_sect_name()) {\n-                let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n-                let csz = llvm::LLVMGetSectionSize(si.llsi);\n-                let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n-                ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n-            }\n-            llvm::LLVMMoveToNextSection(si.llsi);\n+fn get_metadata_section(filename: str) -> option::t<@[u8]> unsafe {\n+    let mb = str::as_buf(filename, {|buf|\n+        llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n+                                   });\n+    if mb as int == 0 { ret option::none::<@[u8]>; }\n+    let of = mk_object_file(mb);\n+    let si = mk_section_iter(of.llof);\n+    while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n+        let name_buf = llvm::LLVMGetSectionName(si.llsi);\n+        let name = str::str_from_cstr(name_buf);\n+        if str::eq(name, x86::get_meta_sect_name()) {\n+            let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n+            let csz = llvm::LLVMGetSectionSize(si.llsi);\n+            let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n+            ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n         }\n-        ret option::none::<@[u8]>;\n+        llvm::LLVMMoveToNextSection(si.llsi);\n     }\n+    ret option::none::<@[u8]>;\n }\n \n fn load_library_crate(sess: session::session, span: span, ident: ast::ident,"}, {"sha": "8d3f8f5d82440f00d2b9e9767e4cf4b7dad60f44", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -256,6 +256,8 @@ fn family_has_type_params(fam_ch: u8) -> bool {\n           'u' { true }\n           'p' { true }\n           'F' { true }\n+          'U' { true }\n+          'P' { true }\n           'y' { true }\n           't' { true }\n           'T' { false }\n@@ -285,6 +287,8 @@ fn item_family_to_str(fam: u8) -> str {\n       'u' { ret \"unsafe fn\"; }\n       'p' { ret \"pure fn\"; }\n       'F' { ret \"native fn\"; }\n+      'U' { ret \"unsafe native fn\"; }\n+      'P' { ret \"pure native fn\"; }\n       'y' { ret \"type\"; }\n       'T' { ret \"native type\"; }\n       't' { ret \"type\"; }"}, {"sha": "be5376bc2b6bf2720d5b62eaa3c9fe07acd74c78", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -16,8 +16,7 @@ type ctxt = @{mutable next_tydesc_num: uint};\n \n fn mk_ctxt() -> ctxt { ret @{mutable next_tydesc_num: 0u}; }\n \n-fn add_global(ccx: @crate_ctxt, llval: ValueRef, name: str)\n-   -> ValueRef unsafe {\n+fn add_global(ccx: @crate_ctxt, llval: ValueRef, name: str) -> ValueRef {\n     let llglobal =\n         str::as_buf(name,\n                     {|buf|\n@@ -28,8 +27,7 @@ fn add_global(ccx: @crate_ctxt, llval: ValueRef, name: str)\n     ret llglobal;\n }\n \n-fn add_gc_root(cx: @block_ctxt, llval: ValueRef, ty: ty::t) ->\n-   @block_ctxt unsafe {\n+fn add_gc_root(cx: @block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n     let bcx = cx;\n     if !type_is_gc_relevant(bcx_tcx(cx), ty) ||\n            ty::type_has_dynamic_size(bcx_tcx(cx), ty) {"}, {"sha": "7c54bde66b32f9457c4fc836fd213413b8452dee", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -72,7 +72,7 @@ fn eq_res_info(a: res_info, b: res_info) -> bool {\n }\n \n fn mk_global(ccx: @crate_ctxt, name: str, llval: ValueRef, internal: bool) ->\n-   ValueRef unsafe {\n+   ValueRef {\n     let llglobal =\n         str::as_buf(name,\n                     {|buf|\n@@ -245,7 +245,7 @@ fn s_float(_tcx: ty_ctxt) -> u8 {\n     ret shape_f64; // TODO: x86-64\n }\n \n-fn mk_ctxt(llmod: ModuleRef) -> ctxt unsafe {\n+fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     let llshapetablesty = trans_common::T_named_struct(\"shapes\");\n     let llshapetables =\n         str::as_buf(\"shapes\",\n@@ -580,7 +580,7 @@ fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     ret mk_global(ccx, \"resource_shapes\", C_struct(dtors), true);\n }\n \n-fn gen_shape_tables(ccx: @crate_ctxt) unsafe {\n+fn gen_shape_tables(ccx: @crate_ctxt) {\n     let lltagstable = gen_tag_shapes(ccx);\n     let llresourcestable = gen_resource_shapes(ccx);\n     trans_common::set_struct_body(ccx.shape_cx.llshapetablesty,"}, {"sha": "d0b0523af9372e19b14425314a30d70780392415", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -492,16 +492,16 @@ fn _UndefReturn(Fn: ValueRef) -> ValueRef {\n }\n \n fn Call(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n+    if cx.unreachable { ret _UndefReturn(Fn); }\n     unsafe {\n-        if cx.unreachable { ret _UndefReturn(Fn); }\n         ret llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                 vec::len(Args), noname());\n     }\n }\n \n fn FastCall(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n+    if cx.unreachable { ret _UndefReturn(Fn); }\n     unsafe {\n-        if cx.unreachable { ret _UndefReturn(Fn); }\n         let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                     vec::len(Args), noname());\n         llvm::LLVMSetInstructionCallConv(v, lib::llvm::LLVMFastCallConv);\n@@ -511,8 +511,8 @@ fn FastCall(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n \n fn CallWithConv(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef], Conv: uint)\n    -> ValueRef {\n+    if cx.unreachable { ret _UndefReturn(Fn); }\n     unsafe {\n-        if cx.unreachable { ret _UndefReturn(Fn); }\n         let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                     vec::len(Args), noname());\n         llvm::LLVMSetInstructionCallConv(v, Conv);"}, {"sha": "6ed895aa6559bcff89d818314a7d4e70640748a4", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 35, "deletions": 51, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -427,14 +427,12 @@ fn val_ty(v: ValueRef) -> TypeRef { ret llvm::LLVMTypeOf(v); }\n fn val_str(tn: type_names, v: ValueRef) -> str { ret ty_str(tn, val_ty(v)); }\n \n // Returns the nth element of the given LLVM structure type.\n-fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef {\n-    unsafe {\n-        let elt_count = llvm::LLVMCountStructElementTypes(llstructty);\n-        assert (n < elt_count);\n-        let elt_tys = std::vec::init_elt(T_nil(), elt_count);\n-        llvm::LLVMGetStructElementTypes(llstructty, to_ptr(elt_tys));\n-        ret llvm::LLVMGetElementType(elt_tys[n]);\n-    }\n+fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef unsafe {\n+    let elt_count = llvm::LLVMCountStructElementTypes(llstructty);\n+    assert (n < elt_count);\n+    let elt_tys = std::vec::init_elt(T_nil(), elt_count);\n+    llvm::LLVMGetStructElementTypes(llstructty, to_ptr(elt_tys));\n+    ret llvm::LLVMGetElementType(elt_tys[n]);\n }\n \n fn find_scope_cx(cx: @block_ctxt) -> @block_ctxt {\n@@ -541,10 +539,8 @@ fn T_named_struct(name: str) -> TypeRef {\n     ret str::as_buf(name, {|buf| llvm::LLVMStructCreateNamed(c, buf) });\n }\n \n-fn set_struct_body(t: TypeRef, elts: [TypeRef]) {\n-    unsafe {\n-        llvm::LLVMStructSetBody(t, to_ptr(elts), std::vec::len(elts), False);\n-    }\n+fn set_struct_body(t: TypeRef, elts: [TypeRef]) unsafe {\n+    llvm::LLVMStructSetBody(t, to_ptr(elts), std::vec::len(elts), False);\n }\n \n fn T_empty_struct() -> TypeRef { ret T_struct([]); }\n@@ -581,18 +577,16 @@ fn T_task() -> TypeRef {\n     ret t;\n }\n \n-fn T_tydesc_field(cx: crate_ctxt, field: int) -> TypeRef {\n+fn T_tydesc_field(cx: crate_ctxt, field: int) -> TypeRef unsafe {\n     // Bit of a kludge: pick the fn typeref out of the tydesc..\n \n-    unsafe {\n-        let tydesc_elts: [TypeRef] =\n-            std::vec::init_elt::<TypeRef>(T_nil(),\n-                                          abi::n_tydesc_fields as uint);\n-        llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n-                                        to_ptr::<TypeRef>(tydesc_elts));\n-        let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n-        ret t;\n-    }\n+    let tydesc_elts: [TypeRef] =\n+        std::vec::init_elt::<TypeRef>(T_nil(),\n+                                      abi::n_tydesc_fields as uint);\n+    llvm::LLVMGetStructElementTypes(cx.tydesc_type,\n+                                    to_ptr::<TypeRef>(tydesc_elts));\n+    let t = llvm::LLVMGetElementType(tydesc_elts[field]);\n+    ret t;\n }\n \n fn T_glue_fn(cx: crate_ctxt) -> TypeRef {\n@@ -798,43 +792,33 @@ fn C_postr(s: str) -> ValueRef {\n                     });\n }\n \n-fn C_zero_byte_arr(size: uint) -> ValueRef {\n-    unsafe {\n-        let i = 0u;\n-        let elts: [ValueRef] = [];\n-        while i < size { elts += [C_u8(0u)]; i += 1u; }\n-        ret llvm::LLVMConstArray(T_i8(), std::vec::to_ptr(elts),\n-                                 std::vec::len(elts));\n-    }\n+fn C_zero_byte_arr(size: uint) -> ValueRef unsafe {\n+    let i = 0u;\n+    let elts: [ValueRef] = [];\n+    while i < size { elts += [C_u8(0u)]; i += 1u; }\n+    ret llvm::LLVMConstArray(T_i8(), std::vec::to_ptr(elts),\n+                             std::vec::len(elts));\n }\n \n-fn C_struct(elts: [ValueRef]) -> ValueRef {\n-    unsafe {\n-        ret llvm::LLVMConstStruct(std::vec::to_ptr(elts), std::vec::len(elts),\n-                                  False);\n-    }\n+fn C_struct(elts: [ValueRef]) -> ValueRef unsafe {\n+    ret llvm::LLVMConstStruct(std::vec::to_ptr(elts), std::vec::len(elts),\n+                              False);\n }\n \n-fn C_named_struct(T: TypeRef, elts: [ValueRef]) -> ValueRef {\n-    unsafe {\n-        ret llvm::LLVMConstNamedStruct(T, std::vec::to_ptr(elts),\n-                                       std::vec::len(elts));\n-    }\n+fn C_named_struct(T: TypeRef, elts: [ValueRef]) -> ValueRef unsafe {\n+    ret llvm::LLVMConstNamedStruct(T, std::vec::to_ptr(elts),\n+                                   std::vec::len(elts));\n }\n \n-fn C_array(ty: TypeRef, elts: [ValueRef]) -> ValueRef {\n-    unsafe {\n-        ret llvm::LLVMConstArray(ty, std::vec::to_ptr(elts),\n-                                 std::vec::len(elts));\n-    }\n+fn C_array(ty: TypeRef, elts: [ValueRef]) -> ValueRef unsafe {\n+    ret llvm::LLVMConstArray(ty, std::vec::to_ptr(elts),\n+                             std::vec::len(elts));\n }\n \n-fn C_bytes(bytes: [u8]) -> ValueRef {\n-    unsafe {\n-        ret llvm::LLVMConstString(\n-            unsafe::reinterpret_cast(vec::to_ptr(bytes)),\n-            vec::len(bytes), False);\n-    }\n+fn C_bytes(bytes: [u8]) -> ValueRef unsafe {\n+    ret llvm::LLVMConstString(\n+        unsafe::reinterpret_cast(vec::to_ptr(bytes)),\n+        vec::len(bytes), False);\n }\n \n fn C_shape(ccx: @crate_ctxt, bytes: [u8]) -> ValueRef {"}, {"sha": "a2a63d88306fe5959fc4e6d7f07ec0cc33b51f8b", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -569,7 +569,7 @@ fn create_backwarding_vtbl(cx: @local_ctxt, sp: span, inner_obj_ty: ty::t,\n // finish_vtbl: Given a vector of vtable entries, create the table in\n // read-only memory and return a pointer to it.\n fn finish_vtbl(cx: @local_ctxt, llmethods: [ValueRef], name: str) ->\n-   ValueRef unsafe {\n+   ValueRef {\n     let vtbl = C_struct(llmethods);\n     let vtbl_name = mangle_internal_name_by_path(cx.ccx, cx.path + [name]);\n     let gvar =\n@@ -619,7 +619,7 @@ fn begin_fn(cx: @local_ctxt, sp: span, m: @ty::method,\n // returns the value returned from that call.\n fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n                         ty_params: [ast::ty_param], outer_obj_ty: ty::t,\n-                        _additional_field_tys: [ty::t]) -> ValueRef unsafe {\n+                        _additional_field_tys: [ty::t]) -> ValueRef {\n \n     let llbackwarding_fn = begin_fn(cx, sp, m, ty_params, \"backwarding_fn\");\n     let fcx = new_fn_ctxt(cx, sp, llbackwarding_fn);"}, {"sha": "4b0f4f7b1c101409da5ae960cd6ceadc9bc1d4af", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -1524,15 +1524,13 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n }\n \n fn require_unsafe(sess: session::session, f_purity: ast::purity, sp: span) {\n-    if sess.get_opts().check_unsafe {\n-        alt f_purity {\n-          ast::unsafe_fn. { ret; }\n-          _ {\n-            sess.span_err(\n-                sp,\n-                \"unsafe operation requires unsafe function or block\");\n-          }\n-        }\n+    alt f_purity {\n+      ast::unsafe_fn. { ret; }\n+      _ {\n+        sess.span_err(\n+            sp,\n+            \"unsafe operation requires unsafe function or block\");\n+      }\n     }\n }\n \n@@ -1551,15 +1549,12 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n     alt caller_purity {\n       ast::unsafe_fn. { ret; }\n       ast::impure_fn. {\n-        let sess = ccx.tcx.sess;\n         alt ccx.tcx.def_map.find(callee.id) {\n           some(ast::def_fn(_, ast::unsafe_fn.)) |\n           some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n-            if sess.get_opts().check_unsafe {\n-                ccx.tcx.sess.span_err(\n-                    sp,\n-                    \"safe function calls function marked unsafe\");\n-            }\n+            ccx.tcx.sess.span_err(\n+                sp,\n+                \"safe function calls function marked unsafe\");\n           }\n           _ {\n           }\n@@ -2727,13 +2722,22 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n \n fn check_fn(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n             old_fcx: option::t<@fn_ctxt>) {\n+\n     let decl = f.decl;\n     let body = f.body;\n+\n+    // If old_fcx is some(...), this is a block fn { |x| ... }.\n+    // In that case, the purity is inherited from the context.\n+    let purity = alt old_fcx {\n+      none. { decl.purity }\n+      some(f) { assert decl.purity == ast::impure_fn; f.purity }\n+    };\n+\n     let gather_result = gather_locals(ccx, f, id, old_fcx);\n     let fixups: [ast::node_id] = [];\n     let fcx: @fn_ctxt =\n         @{ret_ty: ty::ty_fn_ret(ccx.tcx, ty::node_id_to_type(ccx.tcx, id)),\n-          purity: decl.purity,\n+          purity: purity,\n           proto: f.proto,\n           var_bindings: gather_result.var_bindings,\n           locals: gather_result.locals,"}, {"sha": "1563e3112ca1e230fdf5d8c01ae779196f60dc45", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -70,7 +70,7 @@ fn run(handle: handle, lib_path: str, prog: str, args: [str],\n     ret {status: status, out: output, err: errput};\n }\n \n-fn writeclose(fd: int, s: option::t<str>) unsafe {\n+fn writeclose(fd: int, s: option::t<str>) {\n     if option::is_some(s) {\n         let writer = io::new_writer(io::fd_buf_writer(fd, option::none));\n         writer.write_str(option::get(s));\n@@ -79,7 +79,7 @@ fn writeclose(fd: int, s: option::t<str>) unsafe {\n     os::libc::close(fd);\n }\n \n-fn readclose(fd: int) -> str unsafe {\n+fn readclose(fd: int) -> str {\n     // Copied from run::program_output\n     let file = os::fd_FILE(fd);\n     let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n@@ -92,7 +92,7 @@ fn readclose(fd: int) -> str unsafe {\n     ret buf;\n }\n \n-fn worker(p: port<request>) unsafe {\n+fn worker(p: port<request>) {\n \n     // FIXME (787): If we declare this inside of the while loop and then\n     // break out of it before it's ever initialized (i.e. we don't run"}, {"sha": "42f744ff865e8d8d0e85cbb5da63f3d4d789c950", "filename": "src/lib/aio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -41,7 +41,7 @@ tag request {\n \n type ctx = chan<request>;\n \n-fn ip_to_sbuf(ip: net::ip_addr) -> *u8 {\n+fn ip_to_sbuf(ip: net::ip_addr) -> *u8 unsafe {\n \n     // FIXME: This is broken. We're creating a vector, getting a pointer\n     // to its buffer, then dropping the vector. On top of that, the vector\n@@ -131,7 +131,7 @@ fn request_task(c: chan<ctx>) {\n           serve(ip, portnum, events, server) {\n             task::spawn(bind server_task(ip, portnum, events, server));\n           }\n-          write(socket, v, status) {\n+          write(socket, v, status) unsafe {\n             rustrt::aio_writedata(socket, vec::unsafe::to_ptr::<u8>(v),\n                                   vec::len::<u8>(v), status);\n           }"}, {"sha": "af568ee8f0cf106eec5b86b8fe720ac1cbc7c115", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -42,9 +42,11 @@ fn debug_obj<T>(x: T, nmethods: uint, nbytes: uint) {\n \n fn debug_fn<T>(x: T) { rustrt::debug_fn::<T>(x); }\n \n-fn ptr_cast<T, U>(x: @T) -> @U { ret rustrt::debug_ptrcast::<T, U>(x); }\n+unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n+    ret rustrt::debug_ptrcast::<T, U>(x);\n+}\n \n-fn refcount<T>(a: @T) -> uint {\n+fn refcount<T>(a: @T) -> uint unsafe {\n     let p: *uint = unsafe::reinterpret_cast(a);\n     ret *p;\n }"}, {"sha": "d1e39a2ea9f8fd68c1295c3229f480ae27bca182", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -3,7 +3,7 @@ import str::sbuf;\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n-fn getenv(n: str) -> option::t<str> {\n+fn getenv(n: str) -> option::t<str> unsafe {\n     let s = str::as_buf(n, {|buf| os::libc::getenv(buf) });\n     ret if unsafe::reinterpret_cast(s) == 0 {\n             option::none::<str>"}, {"sha": "327e565588963c519cc8aea55078699598abd2c1", "filename": "src/lib/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -57,7 +57,7 @@ fn convert_whence(whence: seek_style) -> int {\n resource FILE_res(f: os::libc::FILE) { os::libc::fclose(f); }\n \n obj FILE_buf_reader(f: os::libc::FILE, res: option::t<@FILE_res>) {\n-    fn read(len: uint) -> [u8] {\n+    fn read(len: uint) -> [u8] unsafe {\n         let buf = [];\n         vec::reserve::<u8>(buf, len);\n         let read =\n@@ -239,7 +239,7 @@ type buf_writer =\n     };\n \n obj FILE_writer(f: os::libc::FILE, res: option::t<@FILE_res>) {\n-    fn write(v: [u8]) {\n+    fn write(v: [u8]) unsafe {\n         let len = vec::len::<u8>(v);\n         let vbuf = vec::unsafe::to_ptr::<u8>(v);\n         let nout = os::libc::fwrite(vbuf, len, 1u, f);\n@@ -254,7 +254,7 @@ obj FILE_writer(f: os::libc::FILE, res: option::t<@FILE_res>) {\n resource fd_res(fd: int) { os::libc::close(fd); }\n \n obj fd_buf_writer(fd: int, res: option::t<@fd_res>) {\n-    fn write(v: [u8]) {\n+    fn write(v: [u8]) unsafe {\n         let len = vec::len::<u8>(v);\n         let count = 0u;\n         let vbuf;"}, {"sha": "cb36179587fa501fe0b60336f12558e740bdea87", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -21,7 +21,7 @@ fn arg_vec(prog: str, args: [@str]) -> [sbuf] {\n }\n \n fn spawn_process(prog: str, args: [str], in_fd: int, out_fd: int, err_fd: int)\n-   -> int {\n+   -> int unsafe {\n     // Note: we have to hold on to these vector references while we hold a\n     // pointer to their buffers\n     let prog = prog;"}, {"sha": "7a5660244223e321dac3013ff8c7c25c8083b597", "filename": "src/lib/str.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -426,16 +426,18 @@ type sbuf = *u8;\n \n // NB: This is intentionally unexported because it's easy to misuse (there's\n // no guarantee that the string is rooted). Instead, use as_buf below.\n-fn buf(s: str) -> sbuf {\n+unsafe fn buf(s: str) -> sbuf {\n     let saddr = ptr::addr_of(s);\n     let vaddr: *[u8] = unsafe::reinterpret_cast(saddr);\n     let buf = vec::to_ptr(*vaddr);\n     ret buf;\n }\n \n-fn as_buf<T>(s: str, f: block(sbuf) -> T) -> T { let buf = buf(s); f(buf) }\n+fn as_buf<T>(s: str, f: block(sbuf) -> T) -> T unsafe {\n+    let buf = buf(s); f(buf)\n+}\n \n-fn str_from_cstr(cstr: sbuf) -> str {\n+unsafe fn str_from_cstr(cstr: sbuf) -> str {\n     let res = \"\";\n     let start = cstr;\n     let curr = start;"}, {"sha": "40209f9e54eb2cf159fc0c414d29eb3ff645d7f9", "filename": "src/lib/sys.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsys.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -15,39 +15,27 @@ native \"rust\" mod rustrt {\n }\n \n fn last_os_error() -> str {\n-    //unsafe {\n-        ret rustrt::last_os_error();\n-    //}\n+    ret rustrt::last_os_error();\n }\n \n fn size_of<T>() -> uint {\n-    //unsafe {\n-        ret rustrt::size_of::<T>();\n-    //}\n+    ret rustrt::size_of::<T>();\n }\n \n fn align_of<T>() -> uint {\n-    //unsafe {\n-        ret rustrt::align_of::<T>();\n-    //}\n+    ret rustrt::align_of::<T>();\n }\n \n fn refcount<T>(t: @T) -> uint {\n-    //unsafe {\n-        ret rustrt::refcount::<T>(t);\n-    //}\n+    ret rustrt::refcount::<T>(t);\n }\n \n fn do_gc() -> () {\n-    //unsafe {\n-        ret rustrt::do_gc();\n-    //}\n+    ret rustrt::do_gc();\n }\n \n fn unsupervise() -> () {\n-    //unsafe {\n-        ret rustrt::unsupervise();\n-    //}\n+    ret rustrt::unsupervise();\n }\n \n // Local Variables:"}, {"sha": "de1a749fee35e00c7bbcce701ca1ff171b56c789", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -108,7 +108,7 @@ fn spawn_joinable(-thunk: fn()) -> joinable_task {\n \n // FIXME: make this a fn~ once those are supported.\n fn spawn_inner(-thunk: fn(), notify: option<comm::chan<task_notification>>) ->\n-   task_id {\n+   task_id unsafe {\n     let id = rustrt::new_task();\n \n     let raw_thunk: {code: u32, env: u32} = cast(thunk);"}, {"sha": "04e35e9e979b289ccb614fd0d5ecfa774fb86971", "filename": "src/lib/vec.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -15,9 +15,7 @@ native \"rust\" mod rustrt {\n \n /// Reserves space for `n` elements in the given vector.\n fn reserve<@T>(&v: [mutable? T], n: uint) {\n-    //unsafe {\n-        rustrt::vec_reserve_shared(v, n);\n-    //}\n+    rustrt::vec_reserve_shared(v, n);\n }\n \n pure fn len<T>(v: [mutable? T]) -> uint { unchecked { rusti::vec_len(v) } }\n@@ -353,22 +351,22 @@ iter iter2<@T>(v: [T]) -> (uint, T) {\n mod unsafe {\n     type vec_repr = {mutable fill: uint, mutable alloc: uint, data: u8};\n \n-    fn from_buf<@T>(ptr: *T, elts: uint) -> [T] {\n+    unsafe fn from_buf<@T>(ptr: *T, elts: uint) -> [T] {\n         ret rustrt::vec_from_buf_shared(ptr, elts);\n     }\n \n-    fn set_len<@T>(&v: [T], new_len: uint) {\n+    unsafe fn set_len<@T>(&v: [T], new_len: uint) {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n     }\n \n-    fn to_ptr<@T>(v: [T]) -> *T {\n+    unsafe fn to_ptr<@T>(v: [T]) -> *T {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         ret ::unsafe::reinterpret_cast(addr_of((**repr).data));\n     }\n }\n \n-fn to_ptr<@T>(v: [T]) -> *T { ret unsafe::to_ptr(v); }\n+unsafe fn to_ptr<@T>(v: [T]) -> *T { ret unsafe::to_ptr(v); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "2622afe2e39f0f54330c958adafeddd4b7012c60", "filename": "src/test/compile-fail/unsafe-fn-used-in-bind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-in-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-in-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-in-bind.rs?ref=e8a0e592da3e8f5cadc0c854c61b0934d10bc0a4", "patch": "@@ -0,0 +1,9 @@\n+// -*- rust -*-\n+// error-pattern: unsafe functions can only be called\n+\n+unsafe fn f(x: int, y: int) -> int { ret x + y; }\n+\n+fn main() {\n+    let x = bind f(3, _);\n+    let y = x(4);\n+}"}]}