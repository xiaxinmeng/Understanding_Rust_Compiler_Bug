{"sha": "317e97bae79331cba506da9615850405fa82d937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2U5N2JhZTc5MzMxY2JhNTA2ZGE5NjE1ODUwNDA1ZmE4MmQ5Mzc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T16:06:27Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T16:06:27Z"}, "message": "Fix #2196", "tree": {"sha": "dfb19ce7bc78acc025a5d16a87733d954fdc22e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb19ce7bc78acc025a5d16a87733d954fdc22e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317e97bae79331cba506da9615850405fa82d937", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloe2wMACgkQpp+NIls6\n19kiOA//fdCdVXtTM17SffpKQ++930dseFh/L4LSSWzgVHaQUOhQ40qfS6W7MWf8\n03MWBxratlVHWh62lqdc81BX7i9WwDiP1VEyiuTJc2OuafWkzV5SxR9G6IbQLAv9\np2I/4lSsMDqBbp20SpnM/dPDyIbwnQV+E0f07K+fY5gEjT4p7/hB2z6rHfvKfrye\nXvSAOQ+Vu6aJwxc+mEv+2T6UkDEp2QZ4sKflLXZ9eiRrL9cJg9J6nXPGcvnNy7ll\nQiBEwW+s5SUoPsxdaCJVNdmcRO8QXuk0TqtwkMQmgBkMcavLSnU5DPOc2WapNfI0\nZibGM7BVC335eliTX5XBkag4eoiSvA00JW2pWzdsmQTH9ooJOw3t8CM7JooaZFAy\ndg+B2RUslznYLTPgbKx08Tu1QGtxdQ1vw0rTWnhQjy8YApKdokL9i2GVFq20hvkz\nZGXzHMEZTPXKnkdQV9oLtv58MGfgFlV5thINi4Tm9jvY0RcDm9EVBSJNhfLL36wK\nHuyN5Bfys7sArkmoIdxaKjT2eQBPkB1O+o3GVlDQouJuJTICD0VnxUWGEZmTSjUx\nLZtdhYVb+iOwvzyCVcqc8F1W7QEflocyQrUx/TRghYux+oSly3zfuXpyQA8B3Mmz\ntSkAKtYbK/TG1bc9d7XK0x6NXIcX22FiQOGjr2sxXSpD98tFhQk=\n=k4yO\n-----END PGP SIGNATURE-----", "payload": "tree dfb19ce7bc78acc025a5d16a87733d954fdc22e7\nparent e62727ee514f0820bfc3b70af99bf3cd0e9718bb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511971587 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511971587 +0100\n\nFix #2196\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317e97bae79331cba506da9615850405fa82d937", "html_url": "https://github.com/rust-lang/rust/commit/317e97bae79331cba506da9615850405fa82d937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317e97bae79331cba506da9615850405fa82d937/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62727ee514f0820bfc3b70af99bf3cd0e9718bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62727ee514f0820bfc3b70af99bf3cd0e9718bb", "html_url": "https://github.com/rust-lang/rust/commit/e62727ee514f0820bfc3b70af99bf3cd0e9718bb"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "b037ef6c42b75f9f8b5665d1b75fc9e2e915564b", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 61, "deletions": 62, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/317e97bae79331cba506da9615850405fa82d937/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317e97bae79331cba506da9615850405fa82d937/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=317e97bae79331cba506da9615850405fa82d937", "patch": "@@ -1,9 +1,7 @@\n-use rustc::hir::intravisit::FnKind;\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n-use syntax::ast;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n@@ -90,66 +88,67 @@ impl LintPass for NewWithoutDefault {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'a, 'tcx>,\n-        kind: FnKind<'tcx>,\n-        decl: &'tcx hir::FnDecl,\n-        _: &'tcx hir::Body,\n-        span: Span,\n-        id: ast::NodeId,\n-    ) {\n-        if in_external_macro(cx, span) {\n-            return;\n-        }\n-\n-        if let FnKind::Method(name, sig, _, _) = kind {\n-            if sig.constness == hir::Constness::Const {\n-                // can't be implemented by default\n-                return;\n-            }\n-            if !cx.generics\n-                .expect(\"method must have generics\")\n-                .ty_params\n-                .is_empty()\n-            {\n-                // when the result of `new()` depends on a type parameter we should not require\n-                // an\n-                // impl of `Default`\n-                return;\n-            }\n-            if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n-                let self_ty = cx.tcx\n-                    .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n-                if_chain! {\n-                    if same_tys(cx, self_ty, return_ty(cx, id));\n-                    if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n-                    if !implements_trait(cx, self_ty, default_trait_id, &[]);\n-                    then {\n-                        if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n-                            span_lint_and_then(\n-                                cx,\n-                                NEW_WITHOUT_DEFAULT_DERIVE,\n-                                span,\n-                                &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n-                                |db| {\n-                                    db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n-                                });\n-                        } else {\n-                            span_lint_and_then(\n-                                cx,\n-                                NEW_WITHOUT_DEFAULT,\n-                                span,\n-                                &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty),\n-                                |db| {\n-                                    db.suggest_prepend_item(\n-                                        cx,\n-                                        span,\n-                                        \"try this\",\n-                                        &create_new_without_default_suggest_msg(self_ty),\n-                                    );\n-                                },\n-                            );\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+        if let hir::ItemImpl(_, _, _, _, None, _, ref items) = item.node {\n+            for assoc_item in items {\n+                if let hir::AssociatedItemKind::Method { has_self: false } = assoc_item.kind {\n+                    let impl_item = cx.tcx.hir.impl_item(assoc_item.id);\n+                    if in_external_macro(cx, impl_item.span) {\n+                        return;\n+                    }\n+                    if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n+                        let name = impl_item.name;\n+                        let span = impl_item.span;\n+                        let id = impl_item.id;\n+                        let decl = &sig.decl;\n+                        if sig.constness == hir::Constness::Const {\n+                            // can't be implemented by default\n+                            return;\n+                        }\n+                        if !impl_item.generics\n+                            .ty_params\n+                            .is_empty()\n+                        {\n+                            // when the result of `new()` depends on a type parameter we should not require\n+                            // an\n+                            // impl of `Default`\n+                            return;\n+                        }\n+                        if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n+                            let self_ty = cx.tcx\n+                                .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n+                            if_chain! {\n+                                if same_tys(cx, self_ty, return_ty(cx, id));\n+                                if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+                                if !implements_trait(cx, self_ty, default_trait_id, &[]);\n+                                then {\n+                                    if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            NEW_WITHOUT_DEFAULT_DERIVE,\n+                                            span,\n+                                            &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n+                                            |db| {\n+                                                db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n+                                            });\n+                                    } else {\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            NEW_WITHOUT_DEFAULT,\n+                                            span,\n+                                            &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty),\n+                                            |db| {\n+                                                db.suggest_prepend_item(\n+                                                    cx,\n+                                                    span,\n+                                                    \"try this\",\n+                                                    &create_new_without_default_suggest_msg(self_ty),\n+                                                );\n+                                            },\n+                                        );\n+                                    }\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "e618bf1c231ae62d4e27abf7f0048fb35ce87aa6", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/317e97bae79331cba506da9615850405fa82d937/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317e97bae79331cba506da9615850405fa82d937/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=317e97bae79331cba506da9615850405fa82d937", "patch": "@@ -83,4 +83,10 @@ impl IgnoreGenericNew {\n     pub fn new<T>() -> Self { IgnoreGenericNew } // the derived Default does not make sense here as the result depends on T\n }\n \n+pub trait TraitWithNew: Sized {\n+    fn new() -> Self {\n+        panic!()\n+    }\n+}\n+\n fn main() {}"}]}