{"sha": "6ff471b1cf85dea0e8f83b5212042905aac35143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZjQ3MWIxY2Y4NWRlYTBlOGY4M2I1MjEyMDQyOTA1YWFjMzUxNDM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-28T13:31:03Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-30T17:59:07Z"}, "message": "ty: remove obsolete printer\n\nThis commit removes the obsolete printer and replaces all uses of it\nwith `FmtPrinter`. Of the replaced uses, all but one use was in `debug!`\nlogging, two cases were notable:\n\n- `MonoItem::to_string` is used in `-Z print-mono-items` and therefore\n  affects the output of all codegen-units tests.\n- `DefPathBasedNames` was used in `librustc_codegen_llvm/type_of.rs`\n  with `LLVMStructCreateNamed` and that'll now get different values, but\n  this should result in no functional change.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "61e0a1c61aecc0fa4033cca2b4ea923a54745e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e0a1c61aecc0fa4033cca2b4ea923a54745e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ff471b1cf85dea0e8f83b5212042905aac35143", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl9L6O4ACgkQJZLnbIc4\nH9ki7RAAulctaDOQ1otyZ6X42cb6ItJuiOrz9RdwFh1K/wJZgJwFo3nZk/Pm+uDw\ngiHkeVktPIHf8F9IkzpX2PnUIGgfiPMb5y09k3wmO30r8QZ8bHRTnaH7KJY3UCfK\n14/S4R4zM2tPcbh8hwvGMJ7mkJTlmN1EFOXDrhTVbTOEeU1KJzvpkYeAGfoWaCEp\n748C90nolHQkeAzZzy+b3gQAbg9YGxH64eDjOmYNNlWk9RsrhLkNbYsS6xAKotMJ\nLtBoI+PGyS+hKWI7md+l0azGgNZoHXSyaliSAMDXg/KL3E/PSFjPPnXUPMtSLHuo\nqhx1E0sO6UaiUPAoqsCDXOn9YFF5a8QMBFMMT2x0lEfLe5xl+MrzVsCkJ7EuO59q\npbqJTlP4vAMBFgvNZr1/zLIYrNd4KPHmL3qSSaxz+4G5tRkDYuu5XaDSHeeKKJvr\n1nzsY2w8lXO+Tr7yPSfSYHPPcWpjeDjZ68vW9Gg5Z9b1U/m3p0AAK7ggZYx8KWmr\nTQwHGTW8h/nBO2OsNp0eAR9dmRkGqLXyx1p76YOqCCsaKxCU0f6vlu8UF76eA01f\nbksPvigUHZxMSugCPgCd7UszVBpxLSazyMyANZeKNLVulrY4teW0KYKt5mOSEF/u\nRhyzkeqOQ/OpnUYRsmGfyC/0vAu6X4bdiFyuJkON3Z3UNTKxMz4=\n=jjCs\n-----END PGP SIGNATURE-----", "payload": "tree 61e0a1c61aecc0fa4033cca2b4ea923a54745e6a\nparent 85fbf49ce0e2274d0acf798f6e703747674feec3\nauthor David Wood <david@davidtw.co> 1598621463 +0100\ncommitter David Wood <david@davidtw.co> 1598810347 +0100\n\nty: remove obsolete printer\n\nThis commit removes the obsolete printer and replaces all uses of it\nwith `FmtPrinter`. Of the replaced uses, all but one use was in `debug!`\nlogging, two cases were notable:\n\n- `MonoItem::to_string` is used in `-Z print-mono-items` and therefore\n  affects the output of all codegen-units tests.\n- `DefPathBasedNames` was used in `librustc_codegen_llvm/type_of.rs`\n  with `LLVMStructCreateNamed` and that'll now get different values, but\n  this should result in no functional change.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff471b1cf85dea0e8f83b5212042905aac35143", "html_url": "https://github.com/rust-lang/rust/commit/6ff471b1cf85dea0e8f83b5212042905aac35143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ff471b1cf85dea0e8f83b5212042905aac35143/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 1049, "additions": 385, "deletions": 664}, "files": [{"sha": "60a4e36260056b43d9ea540173bd16b5b87c59ff", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -4,7 +4,6 @@ use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiExt, TyAndLayout};\n-use rustc_middle::ty::print::obsolete::DefPathBasedNames;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n@@ -60,9 +59,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n         // ty::Dynamic(..) |\n         ty::Foreign(..) |\n         ty::Str => {\n-            let mut name = String::with_capacity(32);\n-            let printer = DefPathBasedNames::new(cx.tcx, true, true);\n-            printer.push_type_name(layout.ty, &mut name, false);\n+            let mut name = layout.ty.to_string();\n             if let (&ty::Adt(def, _), &Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {"}, {"sha": "607b5459673f3b5499f8f4be093cc9d4a5ff8b77", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\n             \"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n-            self.to_string(cx.tcx(), true),\n+            self,\n             self.to_raw_string(),\n             cx.codegen_unit().name()\n         );\n@@ -45,7 +45,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n \n         debug!(\n             \"END IMPLEMENTING '{} ({})' in cgu {}\",\n-            self.to_string(cx.tcx(), true),\n+            self,\n             self.to_raw_string(),\n             cx.codegen_unit().name()\n         );\n@@ -59,7 +59,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     ) {\n         debug!(\n             \"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n-            self.to_string(cx.tcx(), true),\n+            self,\n             self.to_raw_string(),\n             cx.codegen_unit().name()\n         );\n@@ -80,7 +80,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n \n         debug!(\n             \"END PREDEFINING '{} ({})' in cgu {}\",\n-            self.to_string(cx.tcx(), true),\n+            self,\n             self.to_raw_string(),\n             cx.codegen_unit().name()\n         );"}, {"sha": "245e07d096eb915b7f1502db07cf4d9431e366cf", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,6 +1,5 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n-use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n@@ -171,30 +170,6 @@ impl<'tcx> MonoItem<'tcx> {\n         !tcx.subst_and_check_impossible_predicates((def_id, &substs))\n     }\n \n-    pub fn to_string(&self, tcx: TyCtxt<'tcx>, debug: bool) -> String {\n-        return match *self {\n-            MonoItem::Fn(instance) => to_string_internal(tcx, \"fn \", instance, debug),\n-            MonoItem::Static(def_id) => {\n-                let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n-                to_string_internal(tcx, \"static \", instance, debug)\n-            }\n-            MonoItem::GlobalAsm(..) => \"global_asm\".to_string(),\n-        };\n-\n-        fn to_string_internal<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n-            prefix: &str,\n-            instance: Instance<'tcx>,\n-            debug: bool,\n-        ) -> String {\n-            let mut result = String::with_capacity(32);\n-            result.push_str(prefix);\n-            let printer = DefPathBasedNames::new(tcx, false, false);\n-            printer.push_instance_as_string(instance, &mut result, debug);\n-            result\n-        }\n-    }\n-\n     pub fn local_span(&self, tcx: TyCtxt<'tcx>) -> Option<Span> {\n         match *self {\n             MonoItem::Fn(Instance { def, .. }) => {\n@@ -229,6 +204,18 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {\n     }\n }\n \n+impl<'tcx> fmt::Display for MonoItem<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            MonoItem::Fn(instance) => write!(f, \"fn {}\", instance),\n+            MonoItem::Static(def_id) => {\n+                write!(f, \"static {}\", Instance::new(def_id, InternalSubsts::empty()))\n+            }\n+            MonoItem::GlobalAsm(..) => write!(f, \"global_asm\"),\n+        }\n+    }\n+}\n+\n pub struct CodegenUnit<'tcx> {\n     /// A name for this CGU. Incremental compilation requires that\n     /// name be unique amongst **all** crates. Therefore, it should"}, {"sha": "bfeef7892c361584b4210eb2d4b264325b2846db", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -9,8 +9,6 @@ use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n mod pretty;\n pub use self::pretty::*;\n \n-pub mod obsolete;\n-\n // FIXME(eddyb) false positive, the lifetime parameters are used with `P:  Printer<...>`.\n #[allow(unused_lifetimes)]\n pub trait Print<'tcx, P> {"}, {"sha": "2ea7cd2a6dc7acb118d8d104ed771bd83515132a", "filename": "compiler/rustc_middle/src/ty/print/obsolete.rs", "status": "removed", "additions": 0, "deletions": 251, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fobsolete.rs?ref=85fbf49ce0e2274d0acf798f6e703747674feec3", "patch": "@@ -1,251 +0,0 @@\n-//! Allows for producing a unique string key for a mono item.\n-//! These keys are used by the handwritten auto-tests, so they need to be\n-//! predictable and human-readable.\n-//!\n-//! Note: A lot of this could looks very similar to what's already in `ty::print`.\n-//! FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n-\n-use crate::bug;\n-use crate::ty::subst::SubstsRef;\n-use crate::ty::{self, Const, Instance, Ty, TyCtxt};\n-use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n-use std::fmt::Write;\n-use std::iter;\n-\n-/// Same as `unique_type_name()` but with the result pushed onto the given\n-/// `output` parameter.\n-pub struct DefPathBasedNames<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    omit_disambiguators: bool,\n-    omit_local_crate_name: bool,\n-}\n-\n-impl DefPathBasedNames<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>, omit_disambiguators: bool, omit_local_crate_name: bool) -> Self {\n-        DefPathBasedNames { tcx, omit_disambiguators, omit_local_crate_name }\n-    }\n-\n-    // Pushes the type name of the specified type to the provided string.\n-    // If `debug` is true, printing normally unprintable types is allowed\n-    // (e.g. `ty::GeneratorWitness`). This parameter should only be set when\n-    // this method is being used for logging purposes (e.g. with `debug!` or `info!`)\n-    // When being used for codegen purposes, `debug` should be set to `false`\n-    // in order to catch unexpected types that should never end up in a type name.\n-    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n-        match t.kind {\n-            ty::Bool => output.push_str(\"bool\"),\n-            ty::Char => output.push_str(\"char\"),\n-            ty::Str => output.push_str(\"str\"),\n-            ty::Never => output.push_str(\"!\"),\n-            ty::Int(ty) => output.push_str(ty.name_str()),\n-            ty::Uint(ty) => output.push_str(ty.name_str()),\n-            ty::Float(ty) => output.push_str(ty.name_str()),\n-            ty::Adt(adt_def, substs) => {\n-                self.push_def_path(adt_def.did, output);\n-                self.push_generic_params(substs, iter::empty(), output, debug);\n-            }\n-            ty::Tuple(component_types) => {\n-                output.push('(');\n-                for component_type in component_types {\n-                    self.push_type_name(component_type.expect_ty(), output, debug);\n-                    output.push_str(\", \");\n-                }\n-                if !component_types.is_empty() {\n-                    output.pop();\n-                    output.pop();\n-                }\n-                output.push(')');\n-            }\n-            ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n-                output.push('*');\n-                match mutbl {\n-                    hir::Mutability::Not => output.push_str(\"const \"),\n-                    hir::Mutability::Mut => output.push_str(\"mut \"),\n-                }\n-\n-                self.push_type_name(inner_type, output, debug);\n-            }\n-            ty::Ref(_, inner_type, mutbl) => {\n-                output.push('&');\n-                output.push_str(mutbl.prefix_str());\n-\n-                self.push_type_name(inner_type, output, debug);\n-            }\n-            ty::Array(inner_type, len) => {\n-                output.push('[');\n-                self.push_type_name(inner_type, output, debug);\n-                let len = len.eval_usize(self.tcx, ty::ParamEnv::reveal_all());\n-                write!(output, \"; {}\", len).unwrap();\n-                output.push(']');\n-            }\n-            ty::Slice(inner_type) => {\n-                output.push('[');\n-                self.push_type_name(inner_type, output, debug);\n-                output.push(']');\n-            }\n-            ty::Dynamic(ref trait_data, ..) => {\n-                if let Some(principal) = trait_data.principal() {\n-                    self.push_def_path(principal.def_id(), output);\n-                    self.push_generic_params(\n-                        principal.skip_binder().substs,\n-                        trait_data.projection_bounds(),\n-                        output,\n-                        debug,\n-                    );\n-                } else {\n-                    output.push_str(\"dyn '_\");\n-                }\n-            }\n-            ty::Foreign(did) => self.push_def_path(did, output),\n-            ty::FnDef(..) | ty::FnPtr(_) => {\n-                let sig = t.fn_sig(self.tcx);\n-                output.push_str(sig.unsafety().prefix_str());\n-\n-                let abi = sig.abi();\n-                if abi != ::rustc_target::spec::abi::Abi::Rust {\n-                    output.push_str(\"extern \\\"\");\n-                    output.push_str(abi.name());\n-                    output.push_str(\"\\\" \");\n-                }\n-\n-                output.push_str(\"fn(\");\n-\n-                let sig =\n-                    self.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-\n-                if !sig.inputs().is_empty() {\n-                    for &parameter_type in sig.inputs() {\n-                        self.push_type_name(parameter_type, output, debug);\n-                        output.push_str(\", \");\n-                    }\n-                    output.pop();\n-                    output.pop();\n-                }\n-\n-                if sig.c_variadic {\n-                    if !sig.inputs().is_empty() {\n-                        output.push_str(\", ...\");\n-                    } else {\n-                        output.push_str(\"...\");\n-                    }\n-                }\n-\n-                output.push(')');\n-\n-                if !sig.output().is_unit() {\n-                    output.push_str(\" -> \");\n-                    self.push_type_name(sig.output(), output, debug);\n-                }\n-            }\n-            ty::Generator(def_id, substs, _) | ty::Closure(def_id, substs) => {\n-                self.push_def_path(def_id, output);\n-                let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n-                let substs = substs.truncate_to(self.tcx, generics);\n-                self.push_generic_params(substs, iter::empty(), output, debug);\n-            }\n-            ty::Param(_) => {\n-                output.push_str(&t.to_string());\n-            }\n-            ty::Error(_)\n-            | ty::Bound(..)\n-            | ty::Infer(_)\n-            | ty::Placeholder(..)\n-            | ty::Projection(..)\n-            | ty::GeneratorWitness(_)\n-            | ty::Opaque(..) => {\n-                if debug {\n-                    output.push_str(&format!(\"`{:?}`\", t));\n-                } else {\n-                    bug!(\n-                        \"DefPathBasedNames: trying to create type name for unexpected type: {:?}\",\n-                        t,\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n-    // Pushes the the name of the specified const to the provided string.\n-    // If `debug` is true, the unprintable types of constants will be printed with `fmt::Debug`\n-    // (see `push_type_name` for more details).\n-    pub fn push_const_name(&self, ct: &Const<'tcx>, output: &mut String, debug: bool) {\n-        write!(output, \"{}\", ct).unwrap();\n-        output.push_str(\": \");\n-        self.push_type_name(ct.ty, output, debug);\n-    }\n-\n-    pub fn push_def_path(&self, def_id: DefId, output: &mut String) {\n-        let def_path = self.tcx.def_path(def_id);\n-\n-        // some_crate::\n-        if !(self.omit_local_crate_name && def_id.is_local()) {\n-            output.push_str(&self.tcx.crate_name(def_path.krate).as_str());\n-            output.push_str(\"::\");\n-        }\n-\n-        // foo::bar::ItemName::\n-        for part in self.tcx.def_path(def_id).data {\n-            if self.omit_disambiguators {\n-                write!(output, \"{}::\", part.data.as_symbol()).unwrap();\n-            } else {\n-                write!(output, \"{}[{}]::\", part.data.as_symbol(), part.disambiguator).unwrap();\n-            }\n-        }\n-\n-        // remove final \"::\"\n-        output.pop();\n-        output.pop();\n-    }\n-\n-    fn push_generic_params<I>(\n-        &self,\n-        substs: SubstsRef<'tcx>,\n-        projections: I,\n-        output: &mut String,\n-        debug: bool,\n-    ) where\n-        I: Iterator<Item = ty::PolyExistentialProjection<'tcx>>,\n-    {\n-        let mut projections = projections.peekable();\n-        if substs.non_erasable_generics().next().is_none() && projections.peek().is_none() {\n-            return;\n-        }\n-\n-        output.push('<');\n-\n-        for type_parameter in substs.types() {\n-            self.push_type_name(type_parameter, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        for projection in projections {\n-            let projection = projection.skip_binder();\n-            let name = &self.tcx.associated_item(projection.item_def_id).ident.as_str();\n-            output.push_str(name);\n-            output.push_str(\"=\");\n-            self.push_type_name(projection.ty, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        for const_parameter in substs.consts() {\n-            self.push_const_name(const_parameter, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        output.pop();\n-        output.pop();\n-\n-        output.push('>');\n-    }\n-\n-    pub fn push_instance_as_string(\n-        &self,\n-        instance: Instance<'tcx>,\n-        output: &mut String,\n-        debug: bool,\n-    ) {\n-        self.push_def_path(instance.def_id(), output);\n-        self.push_generic_params(instance.substs, iter::empty(), output, debug);\n-    }\n-}"}, {"sha": "43cac8e5ee6114f604dff4bfde15f6eaaab3f7a6", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -191,7 +191,6 @@ use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n-use rustc_middle::ty::print::obsolete::DefPathBasedNames;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_session::config::EntryFnType;\n@@ -348,7 +347,7 @@ fn collect_items_rec<'tcx>(\n         // We've been here already, no need to search again.\n         return;\n     }\n-    debug!(\"BEGIN collect_items_rec({})\", starting_point.node.to_string(tcx, true));\n+    debug!(\"BEGIN collect_items_rec({})\", starting_point.node);\n \n     let mut neighbors = Vec::new();\n     let recursion_depth_reset;\n@@ -397,7 +396,7 @@ fn collect_items_rec<'tcx>(\n         recursion_depths.insert(def_id, depth);\n     }\n \n-    debug!(\"END collect_items_rec({})\", starting_point.node.to_string(tcx, true));\n+    debug!(\"END collect_items_rec({})\", starting_point.node);\n }\n \n fn record_accesses<'a, 'tcx: 'a>(\n@@ -992,7 +991,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n                         debug!(\n                             \"RootCollector: ADT drop-glue for {}\",\n-                            def_id_to_string(self.tcx, def_id)\n+                            self.tcx.def_path_str(def_id.to_def_id())\n                         );\n \n                         let ty = Instance::new(def_id.to_def_id(), InternalSubsts::empty())\n@@ -1004,14 +1003,14 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n             hir::ItemKind::GlobalAsm(..) => {\n                 debug!(\n                     \"RootCollector: ItemKind::GlobalAsm({})\",\n-                    def_id_to_string(self.tcx, self.tcx.hir().local_def_id(item.hir_id))\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                 );\n                 self.output.push(dummy_spanned(MonoItem::GlobalAsm(item.hir_id)));\n             }\n             hir::ItemKind::Static(..) => {\n-                let def_id = self.tcx.hir().local_def_id(item.hir_id);\n-                debug!(\"RootCollector: ItemKind::Static({})\", def_id_to_string(self.tcx, def_id));\n-                self.output.push(dummy_spanned(MonoItem::Static(def_id.to_def_id())));\n+                let def_id = self.tcx.hir().local_def_id(item.hir_id).to_def_id();\n+                debug!(\"RootCollector: ItemKind::Static({})\", self.tcx.def_path_str(def_id));\n+                self.output.push(dummy_spanned(MonoItem::Static(def_id)));\n             }\n             hir::ItemKind::Const(..) => {\n                 // const items only generate mono items if they are\n@@ -1134,7 +1133,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n \n             debug!(\n                 \"create_mono_items_for_default_impls(item={})\",\n-                def_id_to_string(tcx, impl_def_id)\n+                tcx.def_path_str(impl_def_id.to_def_id())\n             );\n \n             if let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n@@ -1218,13 +1217,6 @@ fn collect_neighbours<'tcx>(\n     MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(&body);\n }\n \n-fn def_id_to_string(tcx: TyCtxt<'_>, def_id: LocalDefId) -> String {\n-    let mut output = String::new();\n-    let printer = DefPathBasedNames::new(tcx, false, false);\n-    printer.push_def_path(def_id.to_def_id(), &mut output);\n-    output\n-}\n-\n fn collect_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     value: ConstValue<'tcx>,"}, {"sha": "5747c016357a9b98ca2543a443be3a51deb85bd1", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -246,7 +246,7 @@ where\n \n                 debug!(\n                     \" - {} [{:?}] [{}] estimated size {}\",\n-                    mono_item.to_string(tcx, true),\n+                    mono_item,\n                     linkage,\n                     symbol_hash,\n                     mono_item.size_estimate(tcx)\n@@ -374,7 +374,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         let mut item_keys: Vec<_> = items\n             .iter()\n             .map(|i| {\n-                let mut output = i.to_string(tcx, false);\n+                let mut output = i.to_string();\n                 output.push_str(\" @@\");\n                 let mut empty = Vec::new();\n                 let cgus = item_to_cgus.get_mut(i).unwrap_or(&mut empty);"}, {"sha": "7289ceee95b1c28b850ac097ab6765c4ff1adc4a", "filename": "src/test/codegen-units/item-collection/cross-crate-generic-functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -6,15 +6,15 @@\n // aux-build:cgu_generic_function.rs\n extern crate cgu_generic_function;\n \n-//~ MONO_ITEM fn cross_crate_generic_functions::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn cgu_generic_function::bar[0]<u32>\n-    //~ MONO_ITEM fn cgu_generic_function::foo[0]<u32>\n+    //~ MONO_ITEM fn cgu_generic_function::bar::<u32>\n+    //~ MONO_ITEM fn cgu_generic_function::foo::<u32>\n     let _ = cgu_generic_function::foo(1u32);\n \n-    //~ MONO_ITEM fn cgu_generic_function::bar[0]<u64>\n-    //~ MONO_ITEM fn cgu_generic_function::foo[0]<u64>\n+    //~ MONO_ITEM fn cgu_generic_function::bar::<u64>\n+    //~ MONO_ITEM fn cgu_generic_function::foo::<u64>\n     let _ = cgu_generic_function::foo(2u64);\n \n     // This should not introduce a codegen item"}, {"sha": "dc0984c8a981510c4c55fb37ea81fe25c7711038", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -8,7 +8,7 @@ extern crate cgu_export_trait_method;\n \n use cgu_export_trait_method::Trait;\n \n-//~ MONO_ITEM fn cross_crate_trait_method::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     // The object code of these methods is contained in the external crate, so\n@@ -19,31 +19,31 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     // Currently, no object code is generated for trait methods with default\n     // implementations, unless they are actually called from somewhere. Therefore\n     // we cannot import the implementations and have to create our own inline.\n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl[0]<u32>\n+    //~ MONO_ITEM fn <u32 as cgu_export_trait_method::Trait>::with_default_impl\n     let _ = Trait::with_default_impl(0u32);\n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl[0]<char>\n+    //~ MONO_ITEM fn <char as cgu_export_trait_method::Trait>::with_default_impl\n     let _ = Trait::with_default_impl('c');\n \n \n \n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<u32, &str>\n+    //~ MONO_ITEM fn <u32 as cgu_export_trait_method::Trait>::with_default_impl_generic::<&str>\n     let _ = Trait::with_default_impl_generic(0u32, \"abc\");\n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<u32, bool>\n+    //~ MONO_ITEM fn <u32 as cgu_export_trait_method::Trait>::with_default_impl_generic::<bool>\n     let _ = Trait::with_default_impl_generic(0u32, false);\n \n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<char, i16>\n+    //~ MONO_ITEM fn <char as cgu_export_trait_method::Trait>::with_default_impl_generic::<i16>\n     let _ = Trait::with_default_impl_generic('x', 1i16);\n-    //~ MONO_ITEM fn cgu_export_trait_method::Trait[0]::with_default_impl_generic[0]<char, i32>\n+    //~ MONO_ITEM fn <char as cgu_export_trait_method::Trait>::with_default_impl_generic::<i32>\n     let _ = Trait::with_default_impl_generic('y', 0i32);\n \n-    //~ MONO_ITEM fn cgu_export_trait_method::{{impl}}[1]::without_default_impl_generic[0]<char>\n+    //~ MONO_ITEM fn <u32 as cgu_export_trait_method::Trait>::without_default_impl_generic::<char>\n     let _: (u32, char) = Trait::without_default_impl_generic('c');\n-    //~ MONO_ITEM fn cgu_export_trait_method::{{impl}}[1]::without_default_impl_generic[0]<bool>\n+    //~ MONO_ITEM fn <u32 as cgu_export_trait_method::Trait>::without_default_impl_generic::<bool>\n     let _: (u32, bool) = Trait::without_default_impl_generic(false);\n \n-    //~ MONO_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<char>\n+    //~ MONO_ITEM fn <char as cgu_export_trait_method::Trait>::without_default_impl_generic::<char>\n     let _: (char, char) = Trait::without_default_impl_generic('c');\n-    //~ MONO_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<bool>\n+    //~ MONO_ITEM fn <char as cgu_export_trait_method::Trait>::without_default_impl_generic::<bool>\n     let _: (char, bool) = Trait::without_default_impl_generic(false);\n \n     0"}, {"sha": "adde5745feb5fba1d07c4c3ff8de5b3051f97900", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -4,33 +4,33 @@\n \n #![feature(start)]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<drop_in_place_intrinsic::StructWithDtor[0]> @@ drop_in_place_intrinsic-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDtor> - shim(Some(StructWithDtor)) @@ drop_in_place_intrinsic-cgu.0[Internal]\n struct StructWithDtor(u32);\n \n impl Drop for StructWithDtor {\n-    //~ MONO_ITEM fn drop_in_place_intrinsic::{{impl}}[0]::drop[0]\n+    //~ MONO_ITEM fn <StructWithDtor as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn drop_in_place_intrinsic::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<[drop_in_place_intrinsic::StructWithDtor[0]; 2]> @@ drop_in_place_intrinsic-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<[StructWithDtor; 2]> - shim(Some([StructWithDtor; 2])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n     let x = [StructWithDtor(0), StructWithDtor(1)];\n \n     drop_slice_in_place(&x);\n \n     0\n }\n \n-//~ MONO_ITEM fn drop_in_place_intrinsic::drop_slice_in_place[0]\n+//~ MONO_ITEM fn drop_slice_in_place\n fn drop_slice_in_place(x: &[StructWithDtor]) {\n     unsafe {\n         // This is the interesting thing in this test case: Normally we would\n         // not have drop-glue for the unsized [StructWithDtor]. This has to be\n         // generated though when the drop_in_place() intrinsic is used.\n-        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<[drop_in_place_intrinsic::StructWithDtor[0]]> @@ drop_in_place_intrinsic-cgu.0[Internal]\n-        ::std::ptr::drop_in_place(x as *const _ as *mut [StructWithDtor]);\n+        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<[StructWithDtor]> - shim(Some([StructWithDtor])) @@ drop_in_place_intrinsic-cgu.0[Internal]\n+        ::std::intrinsics::drop_in_place(x as *const _ as *mut [StructWithDtor]);\n     }\n }"}, {"sha": "2329dec385fd11b1861bdbb9e449b588d83d4599", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]\n@@ -13,26 +14,26 @@ fn take_fn_pointer<T1, T2>(f: fn(T1, T2), x: T1, y: T2) {\n     (f)(x, y)\n }\n \n-//~ MONO_ITEM fn function_as_argument::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n \n-    //~ MONO_ITEM fn function_as_argument::take_fn_once[0]<u32, &str, fn(u32, &str)>\n-    //~ MONO_ITEM fn function_as_argument::function[0]<u32, &str>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32, &str), (u32, &str)>\n+    //~ MONO_ITEM fn take_fn_once::<u32, &str, fn(u32, &str) {function::<u32, &str>}>\n+    //~ MONO_ITEM fn function::<u32, &str>\n+    //~ MONO_ITEM fn <fn(u32, &str) {function::<u32, &str>} as std::ops::FnOnce<(u32, &str)>>::call_once - shim(fn(u32, &str) {function::<u32, &str>})\n     take_fn_once(function, 0u32, \"abc\");\n \n-    //~ MONO_ITEM fn function_as_argument::take_fn_once[0]<char, f64, fn(char, f64)>\n-    //~ MONO_ITEM fn function_as_argument::function[0]<char, f64>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(char, f64), (char, f64)>\n+    //~ MONO_ITEM fn take_fn_once::<char, f64, fn(char, f64) {function::<char, f64>}>\n+    //~ MONO_ITEM fn function::<char, f64>\n+    //~ MONO_ITEM fn <fn(char, f64) {function::<char, f64>} as std::ops::FnOnce<(char, f64)>>::call_once - shim(fn(char, f64) {function::<char, f64>})\n     take_fn_once(function, 'c', 0f64);\n \n-    //~ MONO_ITEM fn function_as_argument::take_fn_pointer[0]<i32, ()>\n-    //~ MONO_ITEM fn function_as_argument::function[0]<i32, ()>\n+    //~ MONO_ITEM fn take_fn_pointer::<i32, ()>\n+    //~ MONO_ITEM fn function::<i32, ()>\n     take_fn_pointer(function, 0i32, ());\n \n-    //~ MONO_ITEM fn function_as_argument::take_fn_pointer[0]<f32, i64>\n-    //~ MONO_ITEM fn function_as_argument::function[0]<f32, i64>\n+    //~ MONO_ITEM fn take_fn_pointer::<f32, i64>\n+    //~ MONO_ITEM fn function::<f32, i64>\n     take_fn_pointer(function, 0f32, 0i64);\n \n     0"}, {"sha": "45e4a0d6d76fd6aaf8fd249620350201e5c980ec", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -37,41 +37,41 @@ enum EnumNoDrop<T1, T2> {\n struct NonGenericNoDrop(i32);\n \n struct NonGenericWithDrop(i32);\n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::NonGenericWithDrop[0]> @@ generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<NonGenericWithDrop> - shim(Some(NonGenericWithDrop)) @@ generic_drop_glue-cgu.0[Internal]\n \n impl Drop for NonGenericWithDrop {\n-    //~ MONO_ITEM fn generic_drop_glue::{{impl}}[2]::drop[0]\n+    //~ MONO_ITEM fn <NonGenericWithDrop as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn generic_drop_glue::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::StructWithDrop[0]<i8, char>> @@ generic_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<i8, char>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop<i8, char>> - shim(Some(StructWithDrop<i8, char>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <StructWithDrop<i8, char> as std::ops::Drop>::drop\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::StructWithDrop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>> @@ generic_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop<&str, NonGenericNoDrop>> - shim(Some(StructWithDrop<&str, NonGenericNoDrop>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <StructWithDrop<&str, NonGenericNoDrop> as std::ops::Drop>::drop\n     let _ = StructWithDrop { x: \"&str\", y: NonGenericNoDrop(0) }.y;\n \n     // Should produce no drop glue\n     let _ = StructNoDrop { x: 'a', y: 0u32 }.x;\n \n     // This is supposed to generate drop-glue because it contains a field that\n     // needs to be dropped.\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::StructNoDrop[0]<generic_drop_glue::NonGenericWithDrop[0], f64>> @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructNoDrop<NonGenericWithDrop, f64>> - shim(Some(StructNoDrop<NonGenericWithDrop, f64>)) @@ generic_drop_glue-cgu.0[Internal]\n     let _ = StructNoDrop { x: NonGenericWithDrop(0), y: 0f64 }.y;\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::EnumWithDrop[0]<i32, i64>> @@ generic_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<i32, i64>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop<i32, i64>> - shim(Some(EnumWithDrop<i32, i64>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <EnumWithDrop<i32, i64> as std::ops::Drop>::drop\n     let _ = match EnumWithDrop::A::<i32, i64>(0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as i32\n     };\n \n-    //~MONO_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::EnumWithDrop[0]<f64, f32>> @@ generic_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<f64, f32>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop<f64, f32>> - shim(Some(EnumWithDrop<f64, f32>)) @@ generic_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <EnumWithDrop<f64, f32> as std::ops::Drop>::drop\n     let _ = match EnumWithDrop::B::<f64, f32>(1.0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as f64"}, {"sha": "04383bb8edb7c9eb0be4fc8f6acd19a673f8c93f", "filename": "src/test/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -16,39 +16,39 @@ fn foo3<T1, T2, T3>(a: T1, b: T2, c: T3) -> (T1, T2, T3) {\n }\n \n // This function should be instantiated even if no used\n-//~ MONO_ITEM fn generic_functions::lifetime_only[0]\n+//~ MONO_ITEM fn lifetime_only\n pub fn lifetime_only<'a>(a: &'a u32) -> &'a u32 {\n     a\n }\n \n-//~ MONO_ITEM fn generic_functions::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn generic_functions::foo1[0]<i32>\n+    //~ MONO_ITEM fn foo1::<i32>\n     let _ = foo1(2i32);\n-    //~ MONO_ITEM fn generic_functions::foo1[0]<i64>\n+    //~ MONO_ITEM fn foo1::<i64>\n     let _ = foo1(2i64);\n-    //~ MONO_ITEM fn generic_functions::foo1[0]<&str>\n+    //~ MONO_ITEM fn foo1::<&str>\n     let _ = foo1(\"abc\");\n-    //~ MONO_ITEM fn generic_functions::foo1[0]<char>\n+    //~ MONO_ITEM fn foo1::<char>\n     let _ = foo1('v');\n \n-    //~ MONO_ITEM fn generic_functions::foo2[0]<i32, i32>\n+    //~ MONO_ITEM fn foo2::<i32, i32>\n     let _ = foo2(2i32, 2i32);\n-    //~ MONO_ITEM fn generic_functions::foo2[0]<i64, &str>\n+    //~ MONO_ITEM fn foo2::<i64, &str>\n     let _ = foo2(2i64, \"abc\");\n-    //~ MONO_ITEM fn generic_functions::foo2[0]<&str, usize>\n+    //~ MONO_ITEM fn foo2::<&str, usize>\n     let _ = foo2(\"a\", 2usize);\n-    //~ MONO_ITEM fn generic_functions::foo2[0]<char, ()>\n+    //~ MONO_ITEM fn foo2::<char, ()>\n     let _ = foo2('v', ());\n \n-    //~ MONO_ITEM fn generic_functions::foo3[0]<i32, i32, i32>\n+    //~ MONO_ITEM fn foo3::<i32, i32, i32>\n     let _ = foo3(2i32, 2i32, 2i32);\n-    //~ MONO_ITEM fn generic_functions::foo3[0]<i64, &str, char>\n+    //~ MONO_ITEM fn foo3::<i64, &str, char>\n     let _ = foo3(2i64, \"abc\", 'c');\n-    //~ MONO_ITEM fn generic_functions::foo3[0]<i16, &str, usize>\n+    //~ MONO_ITEM fn foo3::<i16, &str, usize>\n     let _ = foo3(0i16, \"a\", 2usize);\n-    //~ MONO_ITEM fn generic_functions::foo3[0]<char, (), ()>\n+    //~ MONO_ITEM fn foo3::<char, (), ()>\n     let _ = foo3('v', (), ());\n \n     0"}, {"sha": "dd5367ef0380ab51c91d529f0b437e7e93898409", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -30,41 +30,41 @@ pub struct LifeTimeOnly<'a> {\n \n impl<'a> LifeTimeOnly<'a> {\n \n-    //~ MONO_ITEM fn generic_impl::{{impl}}[1]::foo[0]\n+    //~ MONO_ITEM fn LifeTimeOnly::foo\n     pub fn foo(&self) {}\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[1]::bar[0]\n+    //~ MONO_ITEM fn LifeTimeOnly::bar\n     pub fn bar(&'a self) {}\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[1]::baz[0]\n+    //~ MONO_ITEM fn LifeTimeOnly::baz\n     pub fn baz<'b>(&'b self) {}\n \n     pub fn non_instantiated<T>(&self) {}\n }\n \n-//~ MONO_ITEM fn generic_impl::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::new[0]<i32>\n-    //~ MONO_ITEM fn generic_impl::id[0]<i32>\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::get[0]<i32, i16>\n+    //~ MONO_ITEM fn Struct::<i32>::new\n+    //~ MONO_ITEM fn id::<i32>\n+    //~ MONO_ITEM fn Struct::<i32>::get::<i16>\n     let _ = Struct::new(0i32).get(0i16);\n \n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::new[0]<i64>\n-    //~ MONO_ITEM fn generic_impl::id[0]<i64>\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::get[0]<i64, i16>\n+    //~ MONO_ITEM fn Struct::<i64>::new\n+    //~ MONO_ITEM fn id::<i64>\n+    //~ MONO_ITEM fn Struct::<i64>::get::<i16>\n     let _ = Struct::new(0i64).get(0i16);\n \n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::new[0]<char>\n-    //~ MONO_ITEM fn generic_impl::id[0]<char>\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::get[0]<char, i16>\n+    //~ MONO_ITEM fn Struct::<char>::new\n+    //~ MONO_ITEM fn id::<char>\n+    //~ MONO_ITEM fn Struct::<char>::get::<i16>\n     let _ = Struct::new('c').get(0i16);\n \n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::new[0]<&str>\n-    //~ MONO_ITEM fn generic_impl::id[0]<&str>\n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::get[0]<generic_impl::Struct[0]<&str>, i16>\n+    //~ MONO_ITEM fn Struct::<&str>::new\n+    //~ MONO_ITEM fn id::<&str>\n+    //~ MONO_ITEM fn Struct::<Struct<&str>>::get::<i16>\n     let _ = Struct::new(Struct::new(\"str\")).get(0i16);\n \n-    //~ MONO_ITEM fn generic_impl::{{impl}}[0]::new[0]<generic_impl::Struct[0]<&str>>\n-    //~ MONO_ITEM fn generic_impl::id[0]<generic_impl::Struct[0]<&str>>\n+    //~ MONO_ITEM fn Struct::<Struct<&str>>::new\n+    //~ MONO_ITEM fn id::<Struct<&str>>\n     let _ = (Struct::new(Struct::new(\"str\")).f)(Struct::new(\"str\"));\n \n     0"}, {"sha": "c01398eb2341c6262d9d0bdbd1b769ba33934169", "filename": "src/test/codegen-units/item-collection/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -11,14 +11,14 @@ trait SomeTrait {\n // discovered.\n pub fn generic_function<T>(x: T) -> (T, i32) {\n     impl SomeTrait for i64 {\n-        //~ MONO_ITEM fn impl_in_non_instantiated_generic::generic_function[0]::{{impl}}[0]::foo[0]\n+        //~ MONO_ITEM fn generic_function::<impl SomeTrait for i64>::foo\n         fn foo(&self) {}\n     }\n \n     (x, 0)\n }\n \n-//~ MONO_ITEM fn impl_in_non_instantiated_generic::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     0i64.foo();"}, {"sha": "63966a7ec97b3d74d203f04110c6ff884d1b9efc", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -19,20 +19,20 @@ impl<T> Trait for Struct<T> {\n     fn bar(&self) {}\n }\n \n-//~ MONO_ITEM fn instantiation_through_vtable::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     let s1 = Struct { _a: 0u32 };\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<instantiation_through_vtable::Struct[0]<u32>> @@ instantiation_through_vtable-cgu.0[Internal]\n-    //~ MONO_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u32>\n-    //~ MONO_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u32>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct<u32>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n+    //~ MONO_ITEM fn <Struct<u32> as Trait>::foo\n+    //~ MONO_ITEM fn <Struct<u32> as Trait>::bar\n     let _ = &s1 as &Trait;\n \n     let s1 = Struct { _a: 0u64 };\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<instantiation_through_vtable::Struct[0]<u64>> @@ instantiation_through_vtable-cgu.0[Internal]\n-    //~ MONO_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u64>\n-    //~ MONO_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u64>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct<u64>> - shim(None) @@ instantiation_through_vtable-cgu.0[Internal]\n+    //~ MONO_ITEM fn <Struct<u64> as Trait>::foo\n+    //~ MONO_ITEM fn <Struct<u64> as Trait>::bar\n     let _ = &s1 as &Trait;\n \n     0"}, {"sha": "d37d7f7d9b2b33f1030e92a7fbd7d0725724a9b0", "filename": "src/test/codegen-units/item-collection/items-within-generic-items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -4,13 +4,13 @@\n #![feature(start)]\n \n fn generic_fn<T>(a: T) -> (T, i32) {\n-    //~ MONO_ITEM fn items_within_generic_items::generic_fn[0]::nested_fn[0]\n+    //~ MONO_ITEM fn generic_fn::nested_fn\n     fn nested_fn(a: i32) -> i32 {\n         a + 1\n     }\n \n     let x = {\n-        //~ MONO_ITEM fn items_within_generic_items::generic_fn[0]::nested_fn[1]\n+        //~ MONO_ITEM fn generic_fn::nested_fn\n         fn nested_fn(a: i32) -> i32 {\n             a + 2\n         }\n@@ -21,14 +21,14 @@ fn generic_fn<T>(a: T) -> (T, i32) {\n     return (a, x + nested_fn(0));\n }\n \n-//~ MONO_ITEM fn items_within_generic_items::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn items_within_generic_items::generic_fn[0]<i64>\n+    //~ MONO_ITEM fn generic_fn::<i64>\n     let _ = generic_fn(0i64);\n-    //~ MONO_ITEM fn items_within_generic_items::generic_fn[0]<u16>\n+    //~ MONO_ITEM fn generic_fn::<u16>\n     let _ = generic_fn(0u16);\n-    //~ MONO_ITEM fn items_within_generic_items::generic_fn[0]<i8>\n+    //~ MONO_ITEM fn generic_fn::<i8>\n     let _ = generic_fn(0i8);\n \n     0"}, {"sha": "b58377168143255b54fa3a236cf49481fc23c9bf", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -5,35 +5,35 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<non_generic_drop_glue::StructWithDrop[0]> @@ non_generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<StructWithDrop> - shim(Some(StructWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n struct StructWithDrop {\n     x: i32\n }\n \n impl Drop for StructWithDrop {\n-    //~ MONO_ITEM fn non_generic_drop_glue::{{impl}}[0]::drop[0]\n+    //~ MONO_ITEM fn <StructWithDrop as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n struct StructNoDrop {\n     x: i32\n }\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<non_generic_drop_glue::EnumWithDrop[0]> @@ non_generic_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<EnumWithDrop> - shim(Some(EnumWithDrop)) @@ non_generic_drop_glue-cgu.0[Internal]\n enum EnumWithDrop {\n     A(i32)\n }\n \n impl Drop for EnumWithDrop {\n-    //~ MONO_ITEM fn non_generic_drop_glue::{{impl}}[1]::drop[0]\n+    //~ MONO_ITEM fn <EnumWithDrop as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n enum EnumNoDrop {\n     A(i32)\n }\n \n-//~ MONO_ITEM fn non_generic_drop_glue::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = StructWithDrop { x: 0 }.x;"}, {"sha": "092e64562c525d3d1108857077e8c78ca535b636", "filename": "src/test/codegen-units/item-collection/non-generic-functions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -3,63 +3,63 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn non_generic_functions::foo[0]\n+//~ MONO_ITEM fn foo\n fn foo() {\n     {\n-        //~ MONO_ITEM fn non_generic_functions::foo[0]::foo[0]\n+        //~ MONO_ITEM fn foo::foo\n         fn foo() {}\n         foo();\n     }\n \n     {\n-        //~ MONO_ITEM fn non_generic_functions::foo[0]::foo[1]\n+        //~ MONO_ITEM fn foo::foo\n         fn foo() {}\n         foo();\n     }\n }\n \n-//~ MONO_ITEM fn non_generic_functions::bar[0]\n+//~ MONO_ITEM fn bar\n fn bar() {\n-    //~ MONO_ITEM fn non_generic_functions::bar[0]::baz[0]\n+    //~ MONO_ITEM fn bar::baz\n     fn baz() {}\n     baz();\n }\n \n struct Struct { _x: i32 }\n \n impl Struct {\n-    //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]\n+    //~ MONO_ITEM fn Struct::foo\n     fn foo() {\n         {\n-            //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]::foo[0]\n+            //~ MONO_ITEM fn Struct::foo::foo\n             fn foo() {}\n             foo();\n         }\n \n         {\n-            //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::foo[0]::foo[1]\n+            //~ MONO_ITEM fn Struct::foo::foo\n             fn foo() {}\n             foo();\n         }\n     }\n \n-    //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]\n+    //~ MONO_ITEM fn Struct::bar\n     fn bar(&self) {\n         {\n-            //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]::foo[0]\n+            //~ MONO_ITEM fn Struct::bar::foo\n             fn foo() {}\n             foo();\n         }\n \n         {\n-            //~ MONO_ITEM fn non_generic_functions::{{impl}}[0]::bar[0]::foo[1]\n+            //~ MONO_ITEM fn Struct::bar::foo\n             fn foo() {}\n             foo();\n         }\n     }\n }\n \n-//~ MONO_ITEM fn non_generic_functions::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     foo();"}, {"sha": "2be7eba1d84a71733c5d2465f29212332a3499b4", "filename": "src/test/codegen-units/item-collection/overloaded-operators.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -12,7 +12,7 @@ pub struct Indexable {\n impl Index<usize> for Indexable {\n     type Output = u8;\n \n-    //~ MONO_ITEM fn overloaded_operators::{{impl}}[0]::index[0]\n+    //~ MONO_ITEM fn <Indexable as std::ops::Index<usize>>::index\n     fn index(&self, index: usize) -> &Self::Output {\n         if index >= 3 {\n             &self.data[0]\n@@ -23,7 +23,7 @@ impl Index<usize> for Indexable {\n }\n \n impl IndexMut<usize> for Indexable {\n-    //~ MONO_ITEM fn overloaded_operators::{{impl}}[1]::index_mut[0]\n+    //~ MONO_ITEM fn <Indexable as std::ops::IndexMut<usize>>::index_mut\n     fn index_mut(&mut self, index: usize) -> &mut Self::Output {\n         if index >= 3 {\n             &mut self.data[0]\n@@ -34,16 +34,16 @@ impl IndexMut<usize> for Indexable {\n }\n \n \n-//~ MONO_ITEM fn overloaded_operators::{{impl}}[5]::eq[0]\n-//~ MONO_ITEM fn overloaded_operators::{{impl}}[5]::ne[0]\n+//~ MONO_ITEM fn <Equatable as std::cmp::PartialEq>::eq\n+//~ MONO_ITEM fn <Equatable as std::cmp::PartialEq>::ne\n #[derive(PartialEq)]\n pub struct Equatable(u32);\n \n \n impl Add<u32> for Equatable {\n     type Output = u32;\n \n-    //~ MONO_ITEM fn overloaded_operators::{{impl}}[2]::add[0]\n+    //~ MONO_ITEM fn <Equatable as std::ops::Add<u32>>::add\n     fn add(self, rhs: u32) -> u32 {\n         self.0 + rhs\n     }\n@@ -52,7 +52,7 @@ impl Add<u32> for Equatable {\n impl Deref for Equatable {\n     type Target = u32;\n \n-    //~ MONO_ITEM fn overloaded_operators::{{impl}}[3]::deref[0]\n+    //~ MONO_ITEM fn <Equatable as std::ops::Deref>::deref\n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }"}, {"sha": "287ec8f24ebc3b73a6952bf5225601649329fc69", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -6,10 +6,10 @@ pub static FN : fn() = foo::<i32>;\n \n pub fn foo<T>() { }\n \n-//~ MONO_ITEM fn static_init::foo[0]<T>\n-//~ MONO_ITEM static static_init::FN[0]\n+//~ MONO_ITEM fn foo::<T>\n+//~ MONO_ITEM static FN\n \n-//~ MONO_ITEM fn static_init::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     0"}, {"sha": "49a8d3dff639433f202f0593dead4bf2d37bd8a0", "filename": "src/test/codegen-units/item-collection/statics-and-consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -37,7 +37,7 @@ fn foo() {\n     };\n }\n \n-//~ MONO_ITEM fn statics_and_consts::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     foo();\n@@ -46,9 +46,9 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     0\n }\n \n-//~ MONO_ITEM static statics_and_consts::STATIC1[0]\n+//~ MONO_ITEM static STATIC1\n \n-//~ MONO_ITEM fn statics_and_consts::foo[0]\n-//~ MONO_ITEM static statics_and_consts::foo[0]::STATIC2[0]\n-//~ MONO_ITEM static statics_and_consts::foo[0]::STATIC2[1]\n-//~ MONO_ITEM static statics_and_consts::foo[0]::STATIC2[2]\n+//~ MONO_ITEM fn foo\n+//~ MONO_ITEM static foo::STATIC2\n+//~ MONO_ITEM static foo::STATIC2\n+//~ MONO_ITEM static foo::STATIC2"}, {"sha": "a816cb0324135782a6dcc7b26078acdf75b3661f", "filename": "src/test/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -10,15 +10,15 @@ pub trait SomeTrait {\n \n impl SomeTrait for i64 {\n \n-    //~ MONO_ITEM fn trait_implementations::{{impl}}[0]::foo[0]\n+    //~ MONO_ITEM fn <i64 as SomeTrait>::foo\n     fn foo(&self) {}\n \n     fn bar<T>(&self, _: T) {}\n }\n \n impl SomeTrait for i32 {\n \n-    //~ MONO_ITEM fn trait_implementations::{{impl}}[1]::foo[0]\n+    //~ MONO_ITEM fn <i32 as SomeTrait>::foo\n     fn foo(&self) {}\n \n     fn bar<T>(&self, _: T) {}\n@@ -32,7 +32,7 @@ pub trait SomeGenericTrait<T> {\n // Concrete impl of generic trait\n impl SomeGenericTrait<u32> for f64 {\n \n-    //~ MONO_ITEM fn trait_implementations::{{impl}}[2]::foo[0]\n+    //~ MONO_ITEM fn <f64 as SomeGenericTrait<u32>>::foo\n     fn foo(&self, _: u32) {}\n \n     fn bar<T2>(&self, _: u32, _: T2) {}\n@@ -45,28 +45,28 @@ impl<T> SomeGenericTrait<T> for f32 {\n     fn bar<T2>(&self, _: T, _: T2) {}\n }\n \n-//~ MONO_ITEM fn trait_implementations::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[1]::bar[0]<char>\n+   //~ MONO_ITEM fn <i32 as SomeTrait>::bar::<char>\n    0i32.bar('x');\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[2]::bar[0]<&str>\n+   //~ MONO_ITEM fn <f64 as SomeGenericTrait<u32>>::bar::<&str>\n    0f64.bar(0u32, \"&str\");\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[2]::bar[0]<()>\n+   //~ MONO_ITEM fn <f64 as SomeGenericTrait<u32>>::bar::<()>\n    0f64.bar(0u32, ());\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[3]::foo[0]<char>\n+   //~ MONO_ITEM fn <f32 as SomeGenericTrait<char>>::foo\n    0f32.foo('x');\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[3]::foo[0]<i64>\n+   //~ MONO_ITEM fn <f32 as SomeGenericTrait<i64>>::foo\n    0f32.foo(-1i64);\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<u32, ()>\n+   //~ MONO_ITEM fn <f32 as SomeGenericTrait<u32>>::bar::<()>\n    0f32.bar(0u32, ());\n \n-   //~ MONO_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<&str, &str>\n+   //~ MONO_ITEM fn <f32 as SomeGenericTrait<&str>>::bar::<&str>\n    0f32.bar(\"&str\", \"&str\");\n \n    0"}, {"sha": "6817b33c611436d788de39618989d9d20ea1c981", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]\n@@ -26,33 +27,33 @@ fn take_foo_mut<T, F: FnMut(T) -> T>(mut f: F, arg: T) -> T {\n     (f)(arg)\n }\n \n-//~ MONO_ITEM fn trait_method_as_argument::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo_once[0]<u32, fn(u32) -> u32>\n-    //~ MONO_ITEM fn trait_method_as_argument::{{impl}}[0]::foo[0]\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32) -> u32, (u32)>\n+    //~ MONO_ITEM fn take_foo_once::<u32, fn(u32) -> u32 {<u32 as Trait>::foo}>\n+    //~ MONO_ITEM fn <u32 as Trait>::foo\n+    //~ MONO_ITEM fn <fn(u32) -> u32 {<u32 as Trait>::foo} as std::ops::FnOnce<(u32,)>>::call_once - shim(fn(u32) -> u32 {<u32 as Trait>::foo})\n     take_foo_once(Trait::foo, 0u32);\n \n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo_once[0]<char, fn(char) -> char>\n-    //~ MONO_ITEM fn trait_method_as_argument::Trait[0]::foo[0]<char>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(char) -> char, (char)>\n+    //~ MONO_ITEM fn take_foo_once::<char, fn(char) -> char {<char as Trait>::foo}>\n+    //~ MONO_ITEM fn <char as Trait>::foo\n+    //~ MONO_ITEM fn <fn(char) -> char {<char as Trait>::foo} as std::ops::FnOnce<(char,)>>::call_once - shim(fn(char) -> char {<char as Trait>::foo})\n     take_foo_once(Trait::foo, 'c');\n \n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo[0]<u32, fn(u32) -> u32>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::Fn[0]::call[0]<fn(u32) -> u32, (u32)>\n+    //~ MONO_ITEM fn take_foo::<u32, fn(u32) -> u32 {<u32 as Trait>::foo}>\n+    //~ MONO_ITEM fn <fn(u32) -> u32 {<u32 as Trait>::foo} as std::ops::Fn<(u32,)>>::call - shim(fn(u32) -> u32 {<u32 as Trait>::foo})\n     take_foo(Trait::foo, 0u32);\n \n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo[0]<char, fn(char) -> char>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::Fn[0]::call[0]<fn(char) -> char, (char)>\n+    //~ MONO_ITEM fn take_foo::<char, fn(char) -> char {<char as Trait>::foo}>\n+    //~ MONO_ITEM fn <fn(char) -> char {<char as Trait>::foo} as std::ops::Fn<(char,)>>::call - shim(fn(char) -> char {<char as Trait>::foo})\n     take_foo(Trait::foo, 'c');\n \n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo_mut[0]<u32, fn(u32) -> u32>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(char) -> char, (char)>\n+    //~ MONO_ITEM fn take_foo_mut::<u32, fn(u32) -> u32 {<u32 as Trait>::foo}>\n+    //~ MONO_ITEM fn <fn(u32) -> u32 {<u32 as Trait>::foo} as std::ops::FnMut<(u32,)>>::call_mut - shim(fn(u32) -> u32 {<u32 as Trait>::foo})\n     take_foo_mut(Trait::foo, 0u32);\n \n-    //~ MONO_ITEM fn trait_method_as_argument::take_foo_mut[0]<char, fn(char) -> char>\n-    //~ MONO_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(u32) -> u32, (u32)>\n+    //~ MONO_ITEM fn take_foo_mut::<char, fn(char) -> char {<char as Trait>::foo}>\n+    //~ MONO_ITEM fn <fn(char) -> char {<char as Trait>::foo} as std::ops::FnMut<(char,)>>::call_mut - shim(fn(char) -> char {<char as Trait>::foo})\n     take_foo_mut(Trait::foo, 'c');\n \n     0"}, {"sha": "bfcdb6fa142bcde2869a386012f129bce586e9dd", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -13,7 +13,7 @@ impl SomeTrait for i8 {\n \n     // For the non-generic foo(), we should generate a codegen-item even if it\n     // is not called anywhere\n-    //~ MONO_ITEM fn trait_method_default_impl::SomeTrait[0]::foo[0]<i8>\n+    //~ MONO_ITEM fn <i8 as SomeTrait>::foo\n }\n \n trait SomeGenericTrait<T1> {\n@@ -27,7 +27,7 @@ impl SomeGenericTrait<u64> for i32 {\n \n     // For the non-generic foo(), we should generate a codegen-item even if it\n     // is not called anywhere\n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::foo[0]<i32, T1>\n+    //~ MONO_ITEM fn <i32 as SomeGenericTrait<T1>>::foo\n }\n \n // Non-generic impl of generic trait\n@@ -36,25 +36,25 @@ impl<T1> SomeGenericTrait<T1> for u32 {\n     // since nothing is monomorphic here, nothing should be generated unless used somewhere.\n }\n \n-//~ MONO_ITEM fn trait_method_default_impl::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn trait_method_default_impl::SomeTrait[0]::bar[0]<i8, char>\n+    //~ MONO_ITEM fn <i8 as SomeTrait>::bar::<char>\n     let _ = 1i8.bar('c');\n \n-    //~ MONO_ITEM fn trait_method_default_impl::SomeTrait[0]::bar[0]<i8, &str>\n+    //~ MONO_ITEM fn <i8 as SomeTrait>::bar::<&str>\n     let _ = 2i8.bar(\"&str\");\n \n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i32, u64, char>\n+    //~ MONO_ITEM fn <i32 as SomeGenericTrait<u64>>::bar::<char>\n     0i32.bar(0u64, 'c');\n \n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i32, u64, &str>\n+    //~ MONO_ITEM fn <i32 as SomeGenericTrait<u64>>::bar::<&str>\n     0i32.bar(0u64, \"&str\");\n \n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i8, &[char; 1]>\n+    //~ MONO_ITEM fn <u32 as SomeGenericTrait<i8>>::bar::<&[char; 1]>\n     0u32.bar(0i8, &['c']);\n \n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i16, ()>\n+    //~ MONO_ITEM fn <u32 as SomeGenericTrait<i16>>::bar::<()>\n     0u32.bar(0i16, ());\n \n     0"}, {"sha": "c0489a6a2592f3ea522b6069a95fc4ab96f2d67b", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -5,15 +5,15 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::Root[0]> @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Root> - shim(Some(Root)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Root(Intermediate);\n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::Intermediate[0]> @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Intermediate> - shim(Some(Intermediate)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Intermediate(Leaf);\n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::Leaf[0]> @@ transitive_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Leaf> - shim(Some(Leaf)) @@ transitive_drop_glue-cgu.0[Internal]\n struct Leaf;\n \n impl Drop for Leaf {\n-    //~ MONO_ITEM fn transitive_drop_glue::{{impl}}[0]::drop[0]\n+    //~ MONO_ITEM fn <Leaf as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n@@ -25,21 +25,21 @@ impl<T> Drop for LeafGen<T> {\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn transitive_drop_glue::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = Root(Intermediate(Leaf));\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::RootGen[0]<u32>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::IntermediateGen[0]<u32>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::LeafGen[0]<u32>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<u32>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<RootGen<u32>> - shim(Some(RootGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<IntermediateGen<u32>> - shim(Some(IntermediateGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LeafGen<u32>> - shim(Some(LeafGen<u32>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <LeafGen<u32> as std::ops::Drop>::drop\n     let _ = RootGen(IntermediateGen(LeafGen(0u32)));\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::RootGen[0]<i16>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::IntermediateGen[0]<i16>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::LeafGen[0]<i16>> @@ transitive_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<i16>\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<RootGen<i16>> - shim(Some(RootGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<IntermediateGen<i16>> - shim(Some(IntermediateGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LeafGen<i16>> - shim(Some(LeafGen<i16>)) @@ transitive_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn <LeafGen<i16> as std::ops::Drop>::drop\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n \n     0"}, {"sha": "d34835ae69117dd9a9ee165da4f115206e367e54", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -5,22 +5,22 @@\n #![deny(dead_code)]\n #![feature(start)]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<tuple_drop_glue::Dropped[0]> @@ tuple_drop_glue-cgu.0[Internal]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Dropped> - shim(Some(Dropped)) @@ tuple_drop_glue-cgu.0[Internal]\n struct Dropped;\n \n impl Drop for Dropped {\n-    //~ MONO_ITEM fn tuple_drop_glue::{{impl}}[0]::drop[0]\n+    //~ MONO_ITEM fn <Dropped as std::ops::Drop>::drop\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn tuple_drop_glue::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, tuple_drop_glue::Dropped[0])> @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(u32, Dropped)> - shim(Some((u32, Dropped))) @@ tuple_drop_glue-cgu.0[Internal]\n     let x = (0u32, Dropped);\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(i16, (tuple_drop_glue::Dropped[0], bool))> @@ tuple_drop_glue-cgu.0[Internal]\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(tuple_drop_glue::Dropped[0], bool)> @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(i16, (Dropped, bool))> - shim(Some((i16, (Dropped, bool)))) @@ tuple_drop_glue-cgu.0[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(Dropped, bool)> - shim(Some((Dropped, bool)))  @@ tuple_drop_glue-cgu.0[Internal]\n     let x = (0i16, (Dropped, true));\n \n     0"}, {"sha": "17b92eae00d0680e9eea740db9a87bccc8f82043", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -3,7 +3,7 @@\n #![deny(dead_code)]\n #![crate_type = \"rlib\"]\n \n-//~ MONO_ITEM fn unreferenced_const_fn::foo[0] @@ unreferenced_const_fn-cgu.0[External]\n+//~ MONO_ITEM fn foo @@ unreferenced_const_fn-cgu.0[External]\n pub const fn foo(x: u32) -> u32 {\n     x + 0xf00\n }"}, {"sha": "9421bf106ba1af019715e1e2f29b6062c9c96735", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -43,19 +43,19 @@ struct Wrapper<T: ?Sized>(*const T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n \n-//~ MONO_ITEM fn unsizing::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     // simple case\n     let bool_sized = &true;\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<bool> @@ unsizing-cgu.0[Internal]\n-    //~ MONO_ITEM fn unsizing::{{impl}}[0]::foo[0]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<bool> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn <bool as Trait>::foo\n     let _bool_unsized = bool_sized as &Trait;\n \n     let char_sized = &'a';\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<char> @@ unsizing-cgu.0[Internal]\n-    //~ MONO_ITEM fn unsizing::{{impl}}[1]::foo[0]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<char> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn <char as Trait>::foo\n     let _char_unsized = char_sized as &Trait;\n \n     // struct field\n@@ -64,14 +64,14 @@ fn start(_: isize, _: *const *const u8) -> isize {\n         _b: 2,\n         _c: 3.0f64\n     };\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<f64> @@ unsizing-cgu.0[Internal]\n-    //~ MONO_ITEM fn unsizing::{{impl}}[2]::foo[0]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<f64> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn <f64 as Trait>::foo\n     let _struct_unsized = struct_sized as &Struct<Trait>;\n \n     // custom coercion\n     let wrapper_sized = Wrapper(&0u32);\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ unsizing-cgu.0[Internal]\n-    //~ MONO_ITEM fn unsizing::{{impl}}[3]::foo[0]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<u32> - shim(None) @@ unsizing-cgu.0[Internal]\n+    //~ MONO_ITEM fn <u32 as Trait>::foo\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n \n     0"}, {"sha": "561dc1a5c0763c617a7eee9fa8c90bc2f2650e77", "filename": "src/test/codegen-units/item-collection/unused-traits-and-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -74,4 +74,4 @@ impl NonGeneric {\n }\n \n // Only the non-generic methods should be instantiated:\n-//~ MONO_ITEM fn unused_traits_and_generics::{{impl}}[3]::foo[0]\n+//~ MONO_ITEM fn NonGeneric::foo"}, {"sha": "3de1bdb86c198eaa3bd07b9be7e43362dad6ba75", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -12,13 +12,13 @@\n // aux-build:cgu_extern_drop_glue.rs\n extern crate cgu_extern_drop_glue;\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<cgu_extern_drop_glue::Struct[0]> @@ extern_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<cgu_extern_drop_glue::Struct> - shim(Some(cgu_extern_drop_glue::Struct)) @@ extern_drop_glue-fallback.cgu[External]\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-//~ MONO_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[External]\n+//~ MONO_ITEM fn user @@ extern_drop_glue[External]\n pub fn user() {\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::LocalStruct[0]> @@ extern_drop_glue-fallback.cgu[External]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<LocalStruct> - shim(Some(LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n     let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n }\n \n@@ -27,9 +27,9 @@ pub mod mod1 {\n \n     struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-    //~ MONO_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[External]\n+    //~ MONO_ITEM fn mod1::user @@ extern_drop_glue-mod1[External]\n     pub fn user() {\n-        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::mod1[0]::LocalStruct[0]> @@ extern_drop_glue-fallback.cgu[External]\n+        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<mod1::LocalStruct> - shim(Some(mod1::LocalStruct)) @@ extern_drop_glue-fallback.cgu[External]\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n     }\n }"}, {"sha": "02930f96bd102a8aadfd22e40a4348fca078afb2", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -9,23 +9,23 @@\n // aux-build:cgu_generic_function.rs\n extern crate cgu_generic_function;\n \n-//~ MONO_ITEM fn extern_generic::user[0] @@ extern_generic[Internal]\n+//~ MONO_ITEM fn user @@ extern_generic[Internal]\n fn user() {\n     let _ = cgu_generic_function::foo(\"abc\");\n }\n \n mod mod1 {\n     use cgu_generic_function;\n \n-    //~ MONO_ITEM fn extern_generic::mod1[0]::user[0] @@ extern_generic-mod1[Internal]\n+    //~ MONO_ITEM fn mod1::user @@ extern_generic-mod1[Internal]\n     fn user() {\n         let _ = cgu_generic_function::foo(\"abc\");\n     }\n \n     mod mod1 {\n         use cgu_generic_function;\n \n-        //~ MONO_ITEM fn extern_generic::mod1[0]::mod1[0]::user[0] @@ extern_generic-mod1-mod1[Internal]\n+        //~ MONO_ITEM fn mod1::mod1::user @@ extern_generic-mod1-mod1[Internal]\n         fn user() {\n             let _ = cgu_generic_function::foo(\"abc\");\n         }\n@@ -35,18 +35,18 @@ mod mod1 {\n mod mod2 {\n     use cgu_generic_function;\n \n-    //~ MONO_ITEM fn extern_generic::mod2[0]::user[0] @@ extern_generic-mod2[Internal]\n+    //~ MONO_ITEM fn mod2::user @@ extern_generic-mod2[Internal]\n     fn user() {\n         let _ = cgu_generic_function::foo(\"abc\");\n     }\n }\n \n mod mod3 {\n-    //~ MONO_ITEM fn extern_generic::mod3[0]::non_user[0] @@ extern_generic-mod3[Internal]\n+    //~ MONO_ITEM fn mod3::non_user @@ extern_generic-mod3[Internal]\n     fn non_user() {}\n }\n \n // Make sure the two generic functions from the extern crate get instantiated\n // once for the current crate\n-//~ MONO_ITEM fn cgu_generic_function::foo[0]<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]\n-//~ MONO_ITEM fn cgu_generic_function::bar[0]<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]\n+//~ MONO_ITEM fn cgu_generic_function::foo::<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]\n+//~ MONO_ITEM fn cgu_generic_function::bar::<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]"}, {"sha": "91ae6022931980c07e21b2da8a6dae90f504550a", "filename": "src/test/codegen-units/partitioning/incremental-merging.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/incremental-merging\n@@ -14,28 +13,28 @@\n // while `ccc` and `ddd` are supposed to stay untouched.\n \n pub mod aaa {\n-    //~ MONO_ITEM fn incremental_merging::aaa[0]::foo[0] @@ incremental_merging-aaa--incremental_merging-bbb[External]\n+    //~ MONO_ITEM fn aaa::foo @@ incremental_merging-aaa--incremental_merging-bbb[External]\n     pub fn foo(a: u64) -> u64 {\n         a + 1\n     }\n }\n \n pub mod bbb {\n-    //~ MONO_ITEM fn incremental_merging::bbb[0]::foo[0] @@ incremental_merging-aaa--incremental_merging-bbb[External]\n+    //~ MONO_ITEM fn bbb::foo @@ incremental_merging-aaa--incremental_merging-bbb[External]\n     pub fn foo(a: u64, b: u64) -> u64 {\n         a + b + 1\n     }\n }\n \n pub mod ccc {\n-    //~ MONO_ITEM fn incremental_merging::ccc[0]::foo[0] @@ incremental_merging-ccc[External]\n+    //~ MONO_ITEM fn ccc::foo @@ incremental_merging-ccc[External]\n     pub fn foo(a: u64, b: u64, c: u64) -> u64 {\n         a + b + c + 1\n     }\n }\n \n pub mod ddd {\n-    //~ MONO_ITEM fn incremental_merging::ddd[0]::foo[0] @@ incremental_merging-ddd[External]\n+    //~ MONO_ITEM fn ddd::foo @@ incremental_merging-ddd[External]\n     pub fn foo(a: u64, b: u64, c: u64, d: u64) -> u64 {\n         a + b + c + d + 1\n     }"}, {"sha": "410b77b0050b7ff17583100c935d9f64c1e05e29", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -12,10 +12,10 @@ extern crate cgu_explicit_inlining;\n // This test makes sure that items inlined from external crates are privately\n // instantiated in every codegen unit they are used in.\n \n-//~ MONO_ITEM fn cgu_explicit_inlining::inlined[0] @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod1[Internal]\n-//~ MONO_ITEM fn cgu_explicit_inlining::always_inlined[0] @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod2[Internal]\n+//~ MONO_ITEM fn cgu_explicit_inlining::inlined @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod1[Internal]\n+//~ MONO_ITEM fn cgu_explicit_inlining::always_inlined @@ inlining_from_extern_crate[Internal] inlining_from_extern_crate-mod2[Internal]\n \n-//~ MONO_ITEM fn inlining_from_extern_crate::user[0] @@ inlining_from_extern_crate[External]\n+//~ MONO_ITEM fn user @@ inlining_from_extern_crate[External]\n pub fn user()\n {\n     cgu_explicit_inlining::inlined();\n@@ -28,7 +28,7 @@ pub fn user()\n pub mod mod1 {\n     use cgu_explicit_inlining;\n \n-    //~ MONO_ITEM fn inlining_from_extern_crate::mod1[0]::user[0] @@ inlining_from_extern_crate-mod1[External]\n+    //~ MONO_ITEM fn mod1::user @@ inlining_from_extern_crate-mod1[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::inlined();\n@@ -41,7 +41,7 @@ pub mod mod1 {\n pub mod mod2 {\n     use cgu_explicit_inlining;\n \n-    //~ MONO_ITEM fn inlining_from_extern_crate::mod2[0]::user[0] @@ inlining_from_extern_crate-mod2[External]\n+    //~ MONO_ITEM fn mod2::user @@ inlining_from_extern_crate-mod2[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::always_inlined();"}, {"sha": "98108615ce9ba5819440d29bb48f6dd881229025", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -8,37 +8,37 @@\n #![allow(dead_code)]\n #![crate_type = \"rlib\"]\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Struct[0]> @@ local_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Struct> - shim(Some(Struct)) @@ local_drop_glue-fallback.cgu[External]\n struct Struct {\n     _a: u32,\n }\n \n impl Drop for Struct {\n-    //~ MONO_ITEM fn local_drop_glue::{{impl}}[0]::drop[0] @@ local_drop_glue-fallback.cgu[External]\n+    //~ MONO_ITEM fn <Struct as std::ops::Drop>::drop @@ local_drop_glue-fallback.cgu[External]\n     fn drop(&mut self) {}\n }\n \n-//~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Outer[0]> @@ local_drop_glue-fallback.cgu[External]\n+//~ MONO_ITEM fn std::intrinsics::drop_in_place::<Outer> - shim(Some(Outer)) @@ local_drop_glue-fallback.cgu[External]\n struct Outer {\n     _a: Struct,\n }\n \n-//~ MONO_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[External]\n+//~ MONO_ITEM fn user @@ local_drop_glue[External]\n pub fn user() {\n     let _ = Outer { _a: Struct { _a: 0 } };\n }\n \n pub mod mod1 {\n     use super::Struct;\n \n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::mod1[0]::Struct2[0]> @@ local_drop_glue-fallback.cgu[External]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<mod1::Struct2> - shim(Some(mod1::Struct2)) @@ local_drop_glue-fallback.cgu[External]\n     struct Struct2 {\n         _a: Struct,\n-        //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, local_drop_glue::Struct[0])> @@ local_drop_glue-fallback.cgu[Internal]\n+        //~ MONO_ITEM fn std::intrinsics::drop_in_place::<(u32, Struct)> - shim(Some((u32, Struct))) @@ local_drop_glue-fallback.cgu[Internal]\n         _b: (u32, Struct),\n     }\n \n-    //~ MONO_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[External]\n+    //~ MONO_ITEM fn mod1::user @@ local_drop_glue-mod1[External]\n     pub fn user() {\n         let _ = Struct2 { _a: Struct { _a: 0 }, _b: (0, Struct { _a: 0 }) };\n     }"}, {"sha": "9a7743bbf4686c17760c61df4a4c9e5f174e8b70", "filename": "src/test/codegen-units/partitioning/local-generic.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,34 +1,33 @@\n-// ignore-tidy-linelength\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/local-generic\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-//~ MONO_ITEM fn local_generic::generic[0]<u32> @@ local_generic.volatile[External]\n-//~ MONO_ITEM fn local_generic::generic[0]<u64> @@ local_generic.volatile[External]\n-//~ MONO_ITEM fn local_generic::generic[0]<char> @@ local_generic.volatile[External]\n-//~ MONO_ITEM fn local_generic::generic[0]<&str> @@ local_generic.volatile[External]\n+//~ MONO_ITEM fn generic::<u32> @@ local_generic.volatile[External]\n+//~ MONO_ITEM fn generic::<u64> @@ local_generic.volatile[External]\n+//~ MONO_ITEM fn generic::<char> @@ local_generic.volatile[External]\n+//~ MONO_ITEM fn generic::<&str> @@ local_generic.volatile[External]\n pub fn generic<T>(x: T) -> T { x }\n \n-//~ MONO_ITEM fn local_generic::user[0] @@ local_generic[Internal]\n+//~ MONO_ITEM fn user @@ local_generic[Internal]\n fn user() {\n     let _ = generic(0u32);\n }\n \n mod mod1 {\n     pub use super::generic;\n \n-    //~ MONO_ITEM fn local_generic::mod1[0]::user[0] @@ local_generic-mod1[Internal]\n+    //~ MONO_ITEM fn mod1::user @@ local_generic-mod1[Internal]\n     fn user() {\n         let _ = generic(0u64);\n     }\n \n     mod mod1 {\n         use super::generic;\n \n-        //~ MONO_ITEM fn local_generic::mod1[0]::mod1[0]::user[0] @@ local_generic-mod1-mod1[Internal]\n+        //~ MONO_ITEM fn mod1::mod1::user @@ local_generic-mod1-mod1[Internal]\n         fn user() {\n             let _ = generic('c');\n         }\n@@ -38,7 +37,7 @@ mod mod1 {\n mod mod2 {\n     use super::generic;\n \n-    //~ MONO_ITEM fn local_generic::mod2[0]::user[0] @@ local_generic-mod2[Internal]\n+    //~ MONO_ITEM fn mod2::user @@ local_generic-mod2[Internal]\n     fn user() {\n         let _ = generic(\"abc\");\n     }"}, {"sha": "a24943348f3ac9f1499e9a535baf165e58651656", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -9,7 +9,7 @@\n \n mod inline {\n \n-    //~ MONO_ITEM fn local_inlining_but_not_all::inline[0]::inlined_function[0] @@ local_inlining_but_not_all-inline[External]\n+    //~ MONO_ITEM fn inline::inlined_function @@ local_inlining_but_not_all-inline[External]\n     #[inline]\n     pub fn inlined_function()\n     {\n@@ -20,7 +20,7 @@ mod inline {\n pub mod user1 {\n     use super::inline;\n \n-    //~ MONO_ITEM fn local_inlining_but_not_all::user1[0]::foo[0] @@ local_inlining_but_not_all-user1[External]\n+    //~ MONO_ITEM fn user1::foo @@ local_inlining_but_not_all-user1[External]\n     pub fn foo() {\n         inline::inlined_function();\n     }\n@@ -29,15 +29,15 @@ pub mod user1 {\n pub mod user2 {\n     use super::inline;\n \n-    //~ MONO_ITEM fn local_inlining_but_not_all::user2[0]::bar[0] @@ local_inlining_but_not_all-user2[External]\n+    //~ MONO_ITEM fn user2::bar @@ local_inlining_but_not_all-user2[External]\n     pub fn bar() {\n         inline::inlined_function();\n     }\n }\n \n pub mod non_user {\n \n-    //~ MONO_ITEM fn local_inlining_but_not_all::non_user[0]::baz[0] @@ local_inlining_but_not_all-non_user[External]\n+    //~ MONO_ITEM fn non_user::baz @@ local_inlining_but_not_all-non_user[External]\n     pub fn baz() {\n \n     }"}, {"sha": "0cc652eeb5298315f5a2f1ce548ceaf2ac7573f8", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -10,7 +10,7 @@\n mod inline {\n \n     // Important: This function should show up in all codegen units where it is inlined\n-    //~ MONO_ITEM fn local_inlining::inline[0]::inlined_function[0] @@ local_inlining-user1[Internal] local_inlining-user2[Internal]\n+    //~ MONO_ITEM fn inline::inlined_function @@ local_inlining-user1[Internal] local_inlining-user2[Internal]\n     #[inline(always)]\n     pub fn inlined_function()\n     {\n@@ -21,7 +21,7 @@ mod inline {\n pub mod user1 {\n     use super::inline;\n \n-    //~ MONO_ITEM fn local_inlining::user1[0]::foo[0] @@ local_inlining-user1[External]\n+    //~ MONO_ITEM fn user1::foo @@ local_inlining-user1[External]\n     pub fn foo() {\n         inline::inlined_function();\n     }\n@@ -30,15 +30,15 @@ pub mod user1 {\n pub mod user2 {\n     use super::inline;\n \n-    //~ MONO_ITEM fn local_inlining::user2[0]::bar[0] @@ local_inlining-user2[External]\n+    //~ MONO_ITEM fn user2::bar @@ local_inlining-user2[External]\n     pub fn bar() {\n         inline::inlined_function();\n     }\n }\n \n pub mod non_user {\n \n-    //~ MONO_ITEM fn local_inlining::non_user[0]::baz[0] @@ local_inlining-non_user[External]\n+    //~ MONO_ITEM fn non_user::baz @@ local_inlining-non_user[External]\n     pub fn baz() {\n \n     }"}, {"sha": "0c8a67aeb3dad3c820f91b5c9902aba6dc18dd98", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -9,7 +9,7 @@\n \n mod inline {\n \n-    //~ MONO_ITEM fn local_transitive_inlining::inline[0]::inlined_function[0] @@ local_transitive_inlining-indirect_user[Internal]\n+    //~ MONO_ITEM fn inline::inlined_function @@ local_transitive_inlining-indirect_user[Internal]\n     #[inline(always)]\n     pub fn inlined_function()\n     {\n@@ -20,7 +20,7 @@ mod inline {\n mod direct_user {\n     use super::inline;\n \n-    //~ MONO_ITEM fn local_transitive_inlining::direct_user[0]::foo[0] @@ local_transitive_inlining-indirect_user[Internal]\n+    //~ MONO_ITEM fn direct_user::foo @@ local_transitive_inlining-indirect_user[Internal]\n     #[inline(always)]\n     pub fn foo() {\n         inline::inlined_function();\n@@ -30,15 +30,15 @@ mod direct_user {\n pub mod indirect_user {\n     use super::direct_user;\n \n-    //~ MONO_ITEM fn local_transitive_inlining::indirect_user[0]::bar[0] @@ local_transitive_inlining-indirect_user[External]\n+    //~ MONO_ITEM fn indirect_user::bar @@ local_transitive_inlining-indirect_user[External]\n     pub fn bar() {\n         direct_user::foo();\n     }\n }\n \n pub mod non_user {\n \n-    //~ MONO_ITEM fn local_transitive_inlining::non_user[0]::baz[0] @@ local_transitive_inlining-non_user[External]\n+    //~ MONO_ITEM fn non_user::baz @@ local_transitive_inlining-non_user[External]\n     pub fn baz() {\n \n     }"}, {"sha": "f9b8f52b0bb9e7fe0aae9f8fbea48ff2ba080d42", "filename": "src/test/codegen-units/partitioning/regular-modules.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,72 +1,71 @@\n-// ignore-tidy-linelength\n // We specify -C incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/regular-modules\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-//~ MONO_ITEM fn regular_modules::foo[0] @@ regular_modules[Internal]\n+//~ MONO_ITEM fn foo @@ regular_modules[Internal]\n fn foo() {}\n \n-//~ MONO_ITEM fn regular_modules::bar[0] @@ regular_modules[Internal]\n+//~ MONO_ITEM fn bar @@ regular_modules[Internal]\n fn bar() {}\n \n-//~ MONO_ITEM static regular_modules::BAZ[0] @@ regular_modules[Internal]\n+//~ MONO_ITEM static BAZ @@ regular_modules[Internal]\n static BAZ: u64 = 0;\n \n mod mod1 {\n \n-    //~ MONO_ITEM fn regular_modules::mod1[0]::foo[0] @@ regular_modules-mod1[Internal]\n+    //~ MONO_ITEM fn mod1::foo @@ regular_modules-mod1[Internal]\n     fn foo() {}\n-    //~ MONO_ITEM fn regular_modules::mod1[0]::bar[0] @@ regular_modules-mod1[Internal]\n+    //~ MONO_ITEM fn mod1::bar @@ regular_modules-mod1[Internal]\n     fn bar() {}\n-    //~ MONO_ITEM static regular_modules::mod1[0]::BAZ[0] @@ regular_modules-mod1[Internal]\n+    //~ MONO_ITEM static mod1::BAZ @@ regular_modules-mod1[Internal]\n     static BAZ: u64 = 0;\n \n     mod mod1 {\n-        //~ MONO_ITEM fn regular_modules::mod1[0]::mod1[0]::foo[0] @@ regular_modules-mod1-mod1[Internal]\n+        //~ MONO_ITEM fn mod1::mod1::foo @@ regular_modules-mod1-mod1[Internal]\n         fn foo() {}\n-        //~ MONO_ITEM fn regular_modules::mod1[0]::mod1[0]::bar[0] @@ regular_modules-mod1-mod1[Internal]\n+        //~ MONO_ITEM fn mod1::mod1::bar @@ regular_modules-mod1-mod1[Internal]\n         fn bar() {}\n-        //~ MONO_ITEM static regular_modules::mod1[0]::mod1[0]::BAZ[0] @@ regular_modules-mod1-mod1[Internal]\n+        //~ MONO_ITEM static mod1::mod1::BAZ @@ regular_modules-mod1-mod1[Internal]\n         static BAZ: u64 = 0;\n     }\n \n     mod mod2 {\n-        //~ MONO_ITEM fn regular_modules::mod1[0]::mod2[0]::foo[0] @@ regular_modules-mod1-mod2[Internal]\n+        //~ MONO_ITEM fn mod1::mod2::foo @@ regular_modules-mod1-mod2[Internal]\n         fn foo() {}\n-        //~ MONO_ITEM fn regular_modules::mod1[0]::mod2[0]::bar[0] @@ regular_modules-mod1-mod2[Internal]\n+        //~ MONO_ITEM fn mod1::mod2::bar @@ regular_modules-mod1-mod2[Internal]\n         fn bar() {}\n-        //~ MONO_ITEM static regular_modules::mod1[0]::mod2[0]::BAZ[0] @@ regular_modules-mod1-mod2[Internal]\n+        //~ MONO_ITEM static mod1::mod2::BAZ @@ regular_modules-mod1-mod2[Internal]\n         static BAZ: u64 = 0;\n     }\n }\n \n mod mod2 {\n \n-    //~ MONO_ITEM fn regular_modules::mod2[0]::foo[0] @@ regular_modules-mod2[Internal]\n+    //~ MONO_ITEM fn mod2::foo @@ regular_modules-mod2[Internal]\n     fn foo() {}\n-    //~ MONO_ITEM fn regular_modules::mod2[0]::bar[0] @@ regular_modules-mod2[Internal]\n+    //~ MONO_ITEM fn mod2::bar @@ regular_modules-mod2[Internal]\n     fn bar() {}\n-    //~ MONO_ITEM static regular_modules::mod2[0]::BAZ[0] @@ regular_modules-mod2[Internal]\n+    //~ MONO_ITEM static mod2::BAZ @@ regular_modules-mod2[Internal]\n     static BAZ: u64 = 0;\n \n     mod mod1 {\n-        //~ MONO_ITEM fn regular_modules::mod2[0]::mod1[0]::foo[0] @@ regular_modules-mod2-mod1[Internal]\n+        //~ MONO_ITEM fn mod2::mod1::foo @@ regular_modules-mod2-mod1[Internal]\n         fn foo() {}\n-        //~ MONO_ITEM fn regular_modules::mod2[0]::mod1[0]::bar[0] @@ regular_modules-mod2-mod1[Internal]\n+        //~ MONO_ITEM fn mod2::mod1::bar @@ regular_modules-mod2-mod1[Internal]\n         fn bar() {}\n-        //~ MONO_ITEM static regular_modules::mod2[0]::mod1[0]::BAZ[0] @@ regular_modules-mod2-mod1[Internal]\n+        //~ MONO_ITEM static mod2::mod1::BAZ @@ regular_modules-mod2-mod1[Internal]\n         static BAZ: u64 = 0;\n     }\n \n     mod mod2 {\n-        //~ MONO_ITEM fn regular_modules::mod2[0]::mod2[0]::foo[0] @@ regular_modules-mod2-mod2[Internal]\n+        //~ MONO_ITEM fn mod2::mod2::foo @@ regular_modules-mod2-mod2[Internal]\n         fn foo() {}\n-        //~ MONO_ITEM fn regular_modules::mod2[0]::mod2[0]::bar[0] @@ regular_modules-mod2-mod2[Internal]\n+        //~ MONO_ITEM fn mod2::mod2::bar @@ regular_modules-mod2-mod2[Internal]\n         fn bar() {}\n-        //~ MONO_ITEM static regular_modules::mod2[0]::mod2[0]::BAZ[0] @@ regular_modules-mod2-mod2[Internal]\n+        //~ MONO_ITEM static mod2::mod2::BAZ @@ regular_modules-mod2-mod2[Internal]\n         static BAZ: u64 = 0;\n     }\n }"}, {"sha": "eb3196439ba8b308fa5796e7118f2f2436714601", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -9,10 +9,10 @@\n // aux-build:shared_generics_aux.rs\n extern crate shared_generics_aux;\n \n-//~ MONO_ITEM fn shared_generics::foo[0]\n+//~ MONO_ITEM fn foo\n pub fn foo() {\n \n-    //~ MONO_ITEM fn shared_generics_aux::generic_fn[0]<u16> @@ shared_generics_aux-in-shared_generics.volatile[External]\n+    //~ MONO_ITEM fn shared_generics_aux::generic_fn::<u16> @@ shared_generics_aux-in-shared_generics.volatile[External]\n     let _ = shared_generics_aux::generic_fn(0u16, 1u16);\n \n     // This should not generate a monomorphization because it's already"}, {"sha": "02d6467577f4c0674fc39f45f5fc45fe3bc90122", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -4,34 +4,34 @@\n \n #![crate_type=\"rlib\"]\n \n-//~ MONO_ITEM static statics::FOO[0] @@ statics[Internal]\n+//~ MONO_ITEM static FOO @@ statics[Internal]\n static FOO: u32 = 0;\n \n-//~ MONO_ITEM static statics::BAR[0] @@ statics[Internal]\n+//~ MONO_ITEM static BAR @@ statics[Internal]\n static BAR: u32 = 0;\n \n-//~ MONO_ITEM fn statics::function[0] @@ statics[External]\n+//~ MONO_ITEM fn function @@ statics[External]\n pub fn function() {\n-    //~ MONO_ITEM static statics::function[0]::FOO[0] @@ statics[Internal]\n+    //~ MONO_ITEM static function::FOO @@ statics[Internal]\n     static FOO: u32 = 0;\n \n-    //~ MONO_ITEM static statics::function[0]::BAR[0] @@ statics[Internal]\n+    //~ MONO_ITEM static function::BAR @@ statics[Internal]\n     static BAR: u32 = 0;\n }\n \n pub mod mod1 {\n-    //~ MONO_ITEM static statics::mod1[0]::FOO[0] @@ statics-mod1[Internal]\n+    //~ MONO_ITEM static mod1::FOO @@ statics-mod1[Internal]\n     static FOO: u32 = 0;\n \n-    //~ MONO_ITEM static statics::mod1[0]::BAR[0] @@ statics-mod1[Internal]\n+    //~ MONO_ITEM static mod1::BAR @@ statics-mod1[Internal]\n     static BAR: u32 = 0;\n \n-    //~ MONO_ITEM fn statics::mod1[0]::function[0] @@ statics-mod1[External]\n+    //~ MONO_ITEM fn mod1::function @@ statics-mod1[External]\n     pub fn function() {\n-        //~ MONO_ITEM static statics::mod1[0]::function[0]::FOO[0] @@ statics-mod1[Internal]\n+        //~ MONO_ITEM static mod1::function::FOO @@ statics-mod1[Internal]\n         static FOO: u32 = 0;\n \n-        //~ MONO_ITEM static statics::mod1[0]::function[0]::BAR[0] @@ statics-mod1[Internal]\n+        //~ MONO_ITEM static mod1::function::BAR @@ statics-mod1[Internal]\n         static BAR: u32 = 0;\n     }\n }"}, {"sha": "03dbac6179d7c5abc72e29216670def34a6d24d9", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -28,7 +28,7 @@ mod mod1 {\n         fn do_something_else(&self, x: T) -> T { x }\n     }\n \n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::id[0]<i64> @@ vtable_through_const-mod1.volatile[Internal]\n+    //~ MONO_ITEM fn mod1::id::<i64> @@ vtable_through_const-mod1.volatile[Internal]\n     fn id<T>(x: T) -> T { x }\n \n     // These are referenced, so they produce mono-items (see start())\n@@ -43,8 +43,8 @@ mod mod1 {\n         fn do_something_else(&self) {}\n     }\n \n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::Trait2[0]::do_something[0]<u32> @@ vtable_through_const-mod1.volatile[Internal]\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::Trait2[0]::do_something_else[0]<u32> @@ vtable_through_const-mod1.volatile[Internal]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait2>::do_something @@ vtable_through_const-mod1.volatile[Internal]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait2>::do_something_else @@ vtable_through_const-mod1.volatile[Internal]\n     impl Trait2 for u32 {}\n \n     pub trait Trait2Gen<T> {\n@@ -63,30 +63,30 @@ mod mod1 {\n     pub const ID_I64: fn(i64) -> i64 = id::<i64>;\n }\n \n-//~ MONO_ITEM fn vtable_through_const::start[0]\n+//~ MONO_ITEM fn start\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    //~ MONO_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ vtable_through_const[Internal]\n+    //~ MONO_ITEM fn std::intrinsics::drop_in_place::<u32> - shim(None) @@ vtable_through_const[Internal]\n \n     // Since Trait1::do_something() is instantiated via its default implementation,\n     // it is considered a generic and is instantiated here only because it is\n     // referenced in this module.\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::Trait1[0]::do_something_else[0]<u32> @@ vtable_through_const-mod1.volatile[External]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait1>::do_something_else @@ vtable_through_const-mod1.volatile[External]\n \n     // Although it is never used, Trait1::do_something_else() has to be\n     // instantiated locally here too, otherwise the <&u32 as &Trait1> vtable\n     // could not be fully constructed.\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::Trait1[0]::do_something[0]<u32> @@ vtable_through_const-mod1.volatile[External]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait1>::do_something @@ vtable_through_const-mod1.volatile[External]\n     mod1::TRAIT1_REF.do_something();\n \n     // Same as above\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::{{impl}}[1]::do_something[0]<u8> @@ vtable_through_const-mod1.volatile[External]\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::{{impl}}[1]::do_something_else[0]<u8> @@ vtable_through_const-mod1.volatile[External]\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::{{impl}}[3]::do_something[0]<u8> @@ vtable_through_const-mod1.volatile[Internal]\n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::{{impl}}[3]::do_something_else[0]<u8> @@ vtable_through_const-mod1.volatile[Internal]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait1Gen<u8>>::do_something @@ vtable_through_const-mod1.volatile[External]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait1Gen<u8>>::do_something_else @@ vtable_through_const-mod1.volatile[External]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait2Gen<u8>>::do_something @@ vtable_through_const-mod1.volatile[Internal]\n+    //~ MONO_ITEM fn <u32 as mod1::Trait2Gen<u8>>::do_something_else @@ vtable_through_const-mod1.volatile[Internal]\n     mod1::TRAIT1_GEN_REF.do_something(0u8);\n \n-    //~ MONO_ITEM fn vtable_through_const::mod1[0]::id[0]<char> @@ vtable_through_const-mod1.volatile[External]\n+    //~ MONO_ITEM fn mod1::id::<char> @@ vtable_through_const-mod1.volatile[External]\n     mod1::ID_CHAR('x');\n \n     0"}, {"sha": "13be99635a518b5f29fb3ac4368c4a996ea78100", "filename": "src/test/codegen-units/polymorphization/unused_type_parameters.rs", "status": "modified", "additions": 73, "deletions": 74, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff471b1cf85dea0e8f83b5212042905aac35143/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs?ref=6ff471b1cf85dea0e8f83b5212042905aac35143", "patch": "@@ -1,5 +1,4 @@\n // compile-flags:-Zpolymorphize=on -Zprint-mono-items=lazy -Copt-level=1\n-// ignore-tidy-linelength\n \n #![crate_type = \"rlib\"]\n \n@@ -10,44 +9,44 @@ mod functions {\n     // Function doesn't have any type parameters to be unused.\n     pub fn no_parameters() {}\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::no_parameters[0]\n+//~ MONO_ITEM fn functions::no_parameters\n \n     // Function has an unused type parameter.\n     pub fn unused<T>() {\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::unused[0]<T>\n+//~ MONO_ITEM fn functions::unused::<T>\n \n     // Function uses type parameter in value of a binding.\n     pub fn used_binding_value<T: Default>() {\n         let _: T = Default::default();\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_value[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_value[0]<u64>\n+//~ MONO_ITEM fn functions::used_binding_value::<u32>\n+//~ MONO_ITEM fn functions::used_binding_value::<u64>\n \n     // Function uses type parameter in type of a binding.\n     pub fn used_binding_type<T>() {\n         let _: Option<T> = None;\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_type[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_type[0]<u64>\n+//~ MONO_ITEM fn functions::used_binding_type::<u32>\n+//~ MONO_ITEM fn functions::used_binding_type::<u64>\n \n     // Function uses type parameter in argument.\n     pub fn used_argument<T>(_: T) {\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_argument[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_argument[0]<u64>\n+//~ MONO_ITEM fn functions::used_argument::<u32>\n+//~ MONO_ITEM fn functions::used_argument::<u64>\n //\n     // Function uses type parameter in substitutions to another function.\n     pub fn used_substs<T>() {\n         unused::<T>()\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_substs[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_substs[0]<u64>\n+//~ MONO_ITEM fn functions::used_substs::<u32>\n+//~ MONO_ITEM fn functions::used_substs::<u64>\n }\n \n \n@@ -57,16 +56,16 @@ mod closures {\n         let _ = || {};\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::no_parameters[0]\n+//~ MONO_ITEM fn closures::no_parameters\n \n     // Function has an unused type parameter in parent and closure.\n     pub fn unused<T>() -> u32 {\n         let add_one = |x: u32| x + 1;\n         add_one(3)\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::unused[0]::{{closure}}[0]<T, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::unused[0]<T>\n+//~ MONO_ITEM fn closures::unused::<T>::{{closure}}#0\n+//~ MONO_ITEM fn closures::unused::<T>\n \n     // Function has an unused type parameter in closure, but not in parent.\n     pub fn used_parent<T: Default>() -> u32 {\n@@ -75,9 +74,9 @@ mod closures {\n         add_one(3)\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]::{{closure}}[0]<T, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]<u64>\n+//~ MONO_ITEM fn closures::used_parent::<T>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_parent::<u32>\n+//~ MONO_ITEM fn closures::used_parent::<u64>\n \n     // Function uses type parameter in value of a binding in closure.\n     pub fn used_binding_value<T: Default>() -> T {\n@@ -89,10 +88,10 @@ mod closures {\n         x()\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()) -> u64, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]<u64>\n+//~ MONO_ITEM fn closures::used_binding_value::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_value::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_value::<u32>\n+//~ MONO_ITEM fn closures::used_binding_value::<u64>\n \n     // Function uses type parameter in type of a binding in closure.\n     pub fn used_binding_type<T>() -> Option<T> {\n@@ -104,21 +103,21 @@ mod closures {\n         x()\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()) -> core::option[0]::Option[0]<u32>, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()) -> core::option[0]::Option[0]<u64>, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]<u64>\n+//~ MONO_ITEM fn closures::used_binding_type::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_type::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_type::<u32>\n+//~ MONO_ITEM fn closures::used_binding_type::<u64>\n \n     // Function and closure uses type parameter in argument.\n     pub fn used_argument<T>(t: T) -> u32 {\n         let x = |_: T| 3;\n         x(t)\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn((u64)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]<u64>\n+//~ MONO_ITEM fn closures::used_argument::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument::<u32>\n+//~ MONO_ITEM fn closures::used_argument::<u64>\n \n     // Closure uses type parameter in argument.\n     pub fn used_argument_closure<T: Default>() -> u32 {\n@@ -127,10 +126,10 @@ mod closures {\n         x(t)\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn((u64)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]<u64>\n+//~ MONO_ITEM fn closures::used_argument_closure::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument_closure::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument_closure::<u32>\n+//~ MONO_ITEM fn closures::used_argument_closure::<u64>\n \n     // Closure uses type parameter as upvar.\n     pub fn used_upvar<T: Default>() -> T {\n@@ -139,21 +138,21 @@ mod closures {\n         y()\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]::{{closure}}[0]<u32, i32, extern \"rust-call\" fn(()) -> u32, (u32)>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]::{{closure}}[0]<u64, i32, extern \"rust-call\" fn(()) -> u64, (u64)>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]<u64>\n+//~ MONO_ITEM fn closures::used_upvar::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_upvar::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_upvar::<u32>\n+//~ MONO_ITEM fn closures::used_upvar::<u64>\n \n     // Closure uses type parameter in substitutions to another function.\n     pub fn used_substs<T>() {\n         let x = || super::functions::unused::<T>();\n         x()\n     }\n \n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()), ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()), ()>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]<u64>\n+//~ MONO_ITEM fn closures::used_substs::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_substs::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_substs::<u32>\n+//~ MONO_ITEM fn closures::used_substs::<u64>\n }\n \n mod methods {\n@@ -164,55 +163,55 @@ mod methods {\n         pub fn unused_impl() {\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::unused_impl[0]<F>\n+//~ MONO_ITEM fn methods::Foo::<F>::unused_impl\n \n         // Function has an unused type parameter from impl and fn.\n         pub fn unused_both<G: Default>() {\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::unused_both[0]<F, G>\n+//~ MONO_ITEM fn methods::Foo::<F>::unused_both::<G>\n \n         // Function uses type parameter from impl.\n         pub fn used_impl() {\n             let _: F = Default::default();\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_impl[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_impl[0]<u64>\n+//~ MONO_ITEM fn methods::Foo::<u32>::used_impl\n+//~ MONO_ITEM fn methods::Foo::<u64>::used_impl\n \n         // Function uses type parameter from impl.\n         pub fn used_fn<G: Default>() {\n             let _: G = Default::default();\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_fn[0]<F, u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_fn[0]<F, u64>\n+//~ MONO_ITEM fn methods::Foo::<F>::used_fn::<u32>\n+//~ MONO_ITEM fn methods::Foo::<F>::used_fn::<u64>\n \n         // Function uses type parameter from impl.\n         pub fn used_both<G: Default>() {\n             let _: F = Default::default();\n             let _: G = Default::default();\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_both[0]<u32, u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_both[0]<u64, u64>\n+//~ MONO_ITEM fn methods::Foo::<u32>::used_both::<u32>\n+//~ MONO_ITEM fn methods::Foo::<u64>::used_both::<u64>\n \n         // Function uses type parameter in substitutions to another function.\n         pub fn used_substs() {\n             super::functions::unused::<F>()\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_substs[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_substs[0]<u64>\n+//~ MONO_ITEM fn methods::Foo::<u32>::used_substs\n+//~ MONO_ITEM fn methods::Foo::<u64>::used_substs\n \n         // Function has an unused type parameter from impl and fn.\n         pub fn closure_unused_all<G: Default>() -> u32 {\n             let add_one = |x: u32| x + 1;\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_unused_all[0]::{{closure}}[0]<F, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_unused_all[0]<F, G>\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_unused_all::<G>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_unused_all::<G>\n \n         // Function uses type parameter from impl and fn in closure.\n         pub fn closure_used_both<G: Default>() -> u32 {\n@@ -225,10 +224,10 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]::{{closure}}[0]<u32, u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]::{{closure}}[0]<u64, u64, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]<u32, u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]<u64, u64>\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_both::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_both::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_both::<u32>\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_both::<u64>\n \n         // Function uses type parameter from fn in closure.\n         pub fn closure_used_fn<G: Default>() -> u32 {\n@@ -240,10 +239,10 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]::{{closure}}[0]<F, u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]::{{closure}}[0]<F, u64, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]<F, u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]<F, u64>\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u32>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u32>\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u64>\n \n         // Function uses type parameter from impl in closure.\n         pub fn closure_used_impl<G: Default>() -> u32 {\n@@ -255,21 +254,21 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]::{{closure}}[0]<u32, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]::{{closure}}[0]<u64, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]<u32, G>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]<u64, G>\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_impl::<G>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_impl::<G>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_impl::<G>\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_impl::<G>\n \n         // Closure uses type parameter in substitutions to another function.\n         pub fn closure_used_substs() {\n             let x = || super::functions::unused::<F>();\n             x()\n         }\n \n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()), ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()), ()>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]<u64>\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_substs::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_substs::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_substs\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_substs\n     }\n }\n \n@@ -306,8 +305,8 @@ fn dispatch<T: Default>() {\n     let _ = methods::Foo::<T>::closure_used_substs();\n }\n \n-//~ MONO_ITEM fn unused_type_parameters::dispatch[0]<u32>\n-//~ MONO_ITEM fn unused_type_parameters::dispatch[0]<u64>\n+//~ MONO_ITEM fn dispatch::<u32>\n+//~ MONO_ITEM fn dispatch::<u64>\n \n pub fn foo() {\n     // Generate two copies of each function to check that where the type parameter is unused,\n@@ -316,8 +315,8 @@ pub fn foo() {\n     dispatch::<u64>();\n }\n \n-//~ MONO_ITEM fn unused_type_parameters::foo[0] @@ unused_type_parameters-cgu.0[External]\n+//~ MONO_ITEM fn foo @@ unused_type_parameters-cgu.0[External]\n \n // These are all the items that aren't relevant to the test.\n-//~ MONO_ITEM fn core::default[0]::{{impl}}[6]::default[0]\n-//~ MONO_ITEM fn core::default[0]::{{impl}}[7]::default[0]\n+//~ MONO_ITEM fn <u32 as std::default::Default>::default\n+//~ MONO_ITEM fn <u64 as std::default::Default>::default"}]}