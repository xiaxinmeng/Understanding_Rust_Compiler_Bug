{"sha": "2fcd870711ce267c79408ec631f7eba8e0afcdf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmY2Q4NzA3MTFjZTI2N2M3OTQwOGVjNjMxZjdlYmE4ZTBhZmNkZjY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-11T22:29:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-11T22:29:17Z"}, "message": "Box `DiagnosticBuilder`.\n\nIt's a large type -- 176 bytes on 64-bit. And it's passed around and\nreturned from a lot of functions, including within PResult.\n\nThis commit boxes it, which reduces memory traffic. In particular,\n`PResult` shrinks to 16 bytes in the best case; this reduces instruction\ncounts by up to 2% on various workloads.", "tree": {"sha": "ec66b517eaeed4b79e9884ed6c390a923ec59348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec66b517eaeed4b79e9884ed6c390a923ec59348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fcd870711ce267c79408ec631f7eba8e0afcdf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcd870711ce267c79408ec631f7eba8e0afcdf6", "html_url": "https://github.com/rust-lang/rust/commit/2fcd870711ce267c79408ec631f7eba8e0afcdf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fcd870711ce267c79408ec631f7eba8e0afcdf6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "html_url": "https://github.com/rust-lang/rust/commit/2b8116dced2c6c5d02e1c4359e89dc0919d6001b"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "c626dd0434d52ffff5dfa4c926a09b0d634e84da", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=2fcd870711ce267c79408ec631f7eba8e0afcdf6", "patch": "@@ -37,7 +37,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler.flags.external_macro_backtrace);\n+                                          db.handler().flags.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    db.message(),"}, {"sha": "7b8902f125aee1ed3aa6bc87376c07c23b99782a", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=2fcd870711ce267c79408ec631f7eba8e0afcdf6", "patch": "@@ -18,8 +18,17 @@ use log::debug;\n /// extending `HandlerFlags`, accessed via `self.handler.flags`.\n #[must_use]\n #[derive(Clone)]\n-pub struct DiagnosticBuilder<'a> {\n-    pub handler: &'a Handler,\n+pub struct DiagnosticBuilder<'a>(Box<DiagnosticBuilderInner<'a>>);\n+\n+/// This is a large type, and often used as a return value, especially within\n+/// the frequently-used `PResult` type. In theory, return value optimization\n+/// (RVO) should avoid unnecessary copying. In practice, it does not (at the\n+/// time of writing). The split between `DiagnosticBuilder` and\n+/// `DiagnosticBuilderInner` exists to avoid many `memcpy` calls.\n+#[must_use]\n+#[derive(Clone)]\n+struct DiagnosticBuilderInner<'a> {\n+    handler: &'a Handler,\n     diagnostic: Diagnostic,\n     allow_suggestions: bool,\n }\n@@ -52,7 +61,7 @@ macro_rules! forward {\n     ) => {\n         $(#[$attrs])*\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.diagnostic.$n($($name),*);\n+            self.0.diagnostic.$n($($name),*);\n             self\n         }\n     };\n@@ -69,7 +78,7 @@ macro_rules! forward {\n     ) => {\n         $(#[$attrs])*\n         pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.diagnostic.$n($($name),*);\n+            self.0.diagnostic.$n($($name),*);\n             self\n         }\n     };\n@@ -79,24 +88,28 @@ impl<'a> Deref for DiagnosticBuilder<'a> {\n     type Target = Diagnostic;\n \n     fn deref(&self) -> &Diagnostic {\n-        &self.diagnostic\n+        &self.0.diagnostic\n     }\n }\n \n impl<'a> DerefMut for DiagnosticBuilder<'a> {\n     fn deref_mut(&mut self) -> &mut Diagnostic {\n-        &mut self.diagnostic\n+        &mut self.0.diagnostic\n     }\n }\n \n impl<'a> DiagnosticBuilder<'a> {\n+    pub fn handler(&self) -> &'a Handler{\n+        self.0.handler\n+    }\n+\n     /// Emit the diagnostic.\n     pub fn emit(&mut self) {\n         if self.cancelled() {\n             return;\n         }\n \n-        self.handler.emit_db(&self);\n+        self.0.handler.emit_db(&self);\n         self.cancel();\n     }\n \n@@ -115,8 +128,8 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Buffers the diagnostic for later emission, unless handler\n     /// has disabled such buffering.\n     pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n-        if self.handler.flags.dont_buffer_diagnostics ||\n-            self.handler.flags.treat_err_as_bug.is_some()\n+        if self.0.handler.flags.dont_buffer_diagnostics ||\n+            self.0.handler.flags.treat_err_as_bug.is_some()\n         {\n             self.emit();\n             return;\n@@ -126,7 +139,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         // implements `Drop`.\n         let diagnostic;\n         unsafe {\n-            diagnostic = std::ptr::read(&self.diagnostic);\n+            diagnostic = std::ptr::read(&self.0.diagnostic);\n             std::mem::forget(self);\n         };\n         // Logging here is useful to help track down where in logs an error was\n@@ -144,7 +157,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         span: Option<S>,\n     ) -> &mut Self {\n         let span = span.map(|s| s.into()).unwrap_or_else(|| MultiSpan::new());\n-        self.diagnostic.sub(level, message, span, None);\n+        self.0.diagnostic.sub(level, message, span, None);\n         self\n     }\n \n@@ -160,7 +173,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// locally in whichever way makes the most sense.\n     pub fn delay_as_bug(&mut self) {\n         self.level = Level::Bug;\n-        self.handler.delay_as_bug(self.diagnostic.clone());\n+        self.0.handler.delay_as_bug(self.0.diagnostic.clone());\n         self.cancel();\n     }\n \n@@ -171,7 +184,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// then the snippet will just include that `Span`, which is\n     /// called the primary span.\n     pub fn span_label<T: Into<String>>(&mut self, span: Span, label: T) -> &mut Self {\n-        self.diagnostic.span_label(span, label);\n+        self.0.diagnostic.span_label(span, label);\n         self\n     }\n \n@@ -208,10 +221,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.multipart_suggestion(\n+        self.0.diagnostic.multipart_suggestion(\n             msg,\n             suggestion,\n             applicability,\n@@ -225,29 +238,28 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.tool_only_multipart_suggestion(\n+        self.0.diagnostic.tool_only_multipart_suggestion(\n             msg,\n             suggestion,\n             applicability,\n         );\n         self\n     }\n \n-\n     pub fn span_suggestion(\n         &mut self,\n         sp: Span,\n         msg: &str,\n         suggestion: String,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.span_suggestion(\n+        self.0.diagnostic.span_suggestion(\n             sp,\n             msg,\n             suggestion,\n@@ -263,10 +275,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestions: impl Iterator<Item = String>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.span_suggestions(\n+        self.0.diagnostic.span_suggestions(\n             sp,\n             msg,\n             suggestions,\n@@ -282,10 +294,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestion: String,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.span_suggestion_short(\n+        self.0.diagnostic.span_suggestion_short(\n             sp,\n             msg,\n             suggestion,\n@@ -301,10 +313,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestion: String,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.span_suggestion_hidden(\n+        self.0.diagnostic.span_suggestion_hidden(\n             sp,\n             msg,\n             suggestion,\n@@ -320,10 +332,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         suggestion: String,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        if !self.allow_suggestions {\n+        if !self.0.allow_suggestions {\n             return self\n         }\n-        self.diagnostic.tool_only_span_suggestion(\n+        self.0.diagnostic.tool_only_span_suggestion(\n             sp,\n             msg,\n             suggestion,\n@@ -336,7 +348,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n     pub fn allow_suggestions(&mut self, allow: bool) -> &mut Self {\n-        self.allow_suggestions = allow;\n+        self.0.allow_suggestions = allow;\n         self\n     }\n \n@@ -359,19 +371,18 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Creates a new `DiagnosticBuilder` with an already constructed\n     /// diagnostic.\n-    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n-                         -> DiagnosticBuilder<'a> {\n-        DiagnosticBuilder {\n+    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n+        DiagnosticBuilder(Box::new(DiagnosticBuilderInner {\n             handler,\n             diagnostic,\n             allow_suggestions: true,\n-        }\n+        }))\n     }\n }\n \n impl<'a> Debug for DiagnosticBuilder<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.diagnostic.fmt(f)\n+        self.0.diagnostic.fmt(f)\n     }\n }\n \n@@ -381,7 +392,7 @@ impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n             let mut db = DiagnosticBuilder::new(\n-                self.handler,\n+                self.0.handler,\n                 Level::Bug,\n                 \"the following error was constructed but not emitted\",\n             );"}, {"sha": "66608361c8d44863119ca08761cc6958074cab07", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=2fcd870711ce267c79408ec631f7eba8e0afcdf6", "patch": "@@ -385,7 +385,7 @@ impl Emitter for EmitterWriter {\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler.flags.external_macro_backtrace);\n+                                          db.handler().flags.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    &db.styled_message(),"}, {"sha": "2441a027f9940b7e2f6faf53521753f7833ac491", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fcd870711ce267c79408ec631f7eba8e0afcdf6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2fcd870711ce267c79408ec631f7eba8e0afcdf6", "patch": "@@ -13,6 +13,8 @@ use crate::symbol::Symbol;\n \n use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+#[cfg(target_arch = \"x86_64\")]\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use syntax_pos::edition::Edition;\n@@ -38,6 +40,11 @@ crate mod unescape_error_reporting;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n+// `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n+// (See also the comment on `DiagnosticBuilderInner`.)\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PResult<'_, bool>, 16);\n+\n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]"}]}