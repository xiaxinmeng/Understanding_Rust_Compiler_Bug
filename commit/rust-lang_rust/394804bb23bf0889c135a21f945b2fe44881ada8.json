{"sha": "394804bb23bf0889c135a21f945b2fe44881ada8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDgwNGJiMjNiZjA4ODljMTM1YTIxZjk0NWIyZmU0NDg4MWFkYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T06:59:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T06:59:34Z"}, "message": "Auto merge of #86857 - fee1-dead:add-attr, r=oli-obk\n\nAdd #[default_method_body_is_const]\n\n`@rustbot` label F-const_trait_impl", "tree": {"sha": "0030a38c5ace1a12c5d171be0d2fa6155e2516a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0030a38c5ace1a12c5d171be0d2fa6155e2516a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/394804bb23bf0889c135a21f945b2fe44881ada8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/394804bb23bf0889c135a21f945b2fe44881ada8", "html_url": "https://github.com/rust-lang/rust/commit/394804bb23bf0889c135a21f945b2fe44881ada8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/394804bb23bf0889c135a21f945b2fe44881ada8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f0db5e0a315a252946a9e52a76c73579da53dd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0db5e0a315a252946a9e52a76c73579da53dd0", "html_url": "https://github.com/rust-lang/rust/commit/1f0db5e0a315a252946a9e52a76c73579da53dd0"}, {"sha": "7c9e214bc3c2d61b15ded23cf219c8415795789c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9e214bc3c2d61b15ded23cf219c8415795789c", "html_url": "https://github.com/rust-lang/rust/commit/7c9e214bc3c2d61b15ded23cf219c8415795789c"}], "stats": {"total": 299, "additions": 265, "deletions": 34}, "files": [{"sha": "24a5a007dedf693cf5ae83b2f2bd92ff41c24daf", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -349,6 +349,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    // RFC 2632\n+    gated!(\n+        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n+        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n+        as `const`, which may be removed or renamed in the future.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:"}, {"sha": "084ce510e7e381b02badeb7a580a7350c5d021a2", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -952,6 +952,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.get_impl_data(id).defaultness\n     }\n \n+    fn get_impl_constness(&self, id: DefIndex) -> hir::Constness {\n+        self.get_impl_data(id).constness\n+    }\n+\n     fn get_coerce_unsized_info(&self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {\n         self.get_impl_data(id).coerce_unsized_info\n     }"}, {"sha": "d96034c951c6c9454a89490ddb3ead4072aa8f9c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -168,6 +168,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_no_builtins => { cdata.root.no_builtins }\n     symbol_mangling_version => { cdata.root.symbol_mangling_version }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n+    impl_constness => { cdata.get_impl_constness(def_id.index) }\n     reachable_non_generics => {\n         let reachable_non_generics = tcx\n             .exported_symbols(cdata.cnum)"}, {"sha": "19c4da51968cbfcd8b30afddaaa0b35a508a0750", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -1412,7 +1412,7 @@ impl EncodeContext<'a, 'tcx> {\n                     adt_def.repr,\n                 )\n             }\n-            hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n+            hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 let polarity = self.tcx.impl_polarity(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n@@ -1437,8 +1437,13 @@ impl EncodeContext<'a, 'tcx> {\n                     }\n                 });\n \n-                let data =\n-                    ImplData { polarity, defaultness, parent_impl: parent, coerce_unsized_info };\n+                let data = ImplData {\n+                    polarity,\n+                    defaultness,\n+                    constness,\n+                    parent_impl: parent,\n+                    coerce_unsized_info,\n+                };\n \n                 EntryKind::Impl(self.lazy(data))\n             }"}, {"sha": "0d67ff32a3f3e4bdf44340b17d4d6b4aa3710634", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -390,6 +390,7 @@ struct TraitData {\n #[derive(TyEncodable, TyDecodable)]\n struct ImplData {\n     polarity: ty::ImplPolarity,\n+    constness: hir::Constness,\n     defaultness: hir::Defaultness,\n     parent_impl: Option<DefId>,\n "}, {"sha": "5c32c0fdb6cc8774433dfb12830ff05a44c7289f", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -18,7 +18,7 @@ use rustc_index::vec::Idx;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -465,6 +465,9 @@ impl<'hir> Map<'hir> {\n     /// Returns the `ConstContext` of the body associated with this `LocalDefId`.\n     ///\n     /// Panics if `LocalDefId` does not have an associated body.\n+    ///\n+    /// This should only be used for determining the context of a body, a return\n+    /// value of `Some` does not always suggest that the owner of the body is `const`.\n     pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {\n         let hir_id = self.local_def_id_to_hir_id(did);\n         let ccx = match self.body_owner_kind(hir_id) {\n@@ -473,6 +476,11 @@ impl<'hir> Map<'hir> {\n \n             BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,\n             BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,\n+            BodyOwnerKind::Fn\n+                if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>\n+            {\n+                ConstContext::ConstFn\n+            }\n             BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,\n         };\n "}, {"sha": "bc471aff2d02e092065666a05f7cb0b73e1f86d7", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -1144,6 +1144,10 @@ rustc_queries! {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n     }\n \n+    query impl_constness(def_id: DefId) -> hir::Constness {\n+        desc { |tcx| \"looking up whether `{}` is a const impl\", tcx.def_path_str(def_id) }\n+    }\n+\n     query check_item_well_formed(key: LocalDefId) -> () {\n         desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n     }"}, {"sha": "f8b66badb8a4c2c3f8a9c0f1d760a539d192e6ca", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -235,12 +235,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n-                // Some functions we support even if they are non-const -- but avoid testing\n-                // that for const fn!\n-                ecx.hook_panic_fn(instance, args)?;\n-                // We certainly do *not* want to actually call the fn\n-                // though, so be sure we return here.\n-                throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                // allow calling functions marked with #[default_method_body_is_const].\n+                if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n+                    // Some functions we support even if they are non-const -- but avoid testing\n+                    // that for const fn!\n+                    ecx.hook_panic_fn(instance, args)?;\n+                    // We certainly do *not* want to actually call the fn\n+                    // though, so be sure we return here.\n+                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                }\n             }\n         }\n         // This is a const fn. Call it."}, {"sha": "646ae8ced7eb442398cee5b2a3808cb8c5567a86", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -886,8 +886,34 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 }\n \n                 if !tcx.is_const_fn_raw(callee) {\n-                    self.check_op(ops::FnCallNonConst);\n-                    return;\n+                    let mut permitted = false;\n+\n+                    let callee_trait = tcx.trait_of_item(callee);\n+                    if let Some(trait_id) = callee_trait {\n+                        if tcx.has_attr(caller, sym::default_method_body_is_const) {\n+                            // permit call to non-const fn when caller has default_method_body_is_const..\n+                            if tcx.trait_of_item(caller) == callee_trait {\n+                                // ..and caller and callee are in the same trait.\n+                                permitted = true;\n+                            }\n+                        }\n+                        let mut const_impls = true;\n+                        tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n+                            if const_impls {\n+                                if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n+                                    const_impls = false;\n+                                }\n+                            }\n+                        });\n+                        if const_impls {\n+                            permitted = true;\n+                        }\n+                    }\n+\n+                    if !permitted {\n+                        self.check_op(ops::FnCallNonConst);\n+                        return;\n+                    }\n                 }\n \n                 // If the `const fn` we are trying to call is not const-stable, ensure that we have"}, {"sha": "71231830e99a7afe2b2746264eec5efbf97efc87", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -98,6 +98,9 @@ impl CheckAttrVisitor<'tcx> {\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n                 sym::cmse_nonsecure_entry => self.check_cmse_nonsecure_entry(attr, span, target),\n+                sym::default_method_body_is_const => {\n+                    self.check_default_method_body_is_const(attr, span, target)\n+                }\n                 _ => true,\n             };\n             // lint-only checks\n@@ -1465,6 +1468,29 @@ impl CheckAttrVisitor<'tcx> {\n             }\n         }\n     }\n+\n+    /// default_method_body_is_const should only be applied to trait methods with default bodies.\n+    fn check_default_method_body_is_const(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Method(MethodKind::Trait { body: true }) => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"attribute should be applied to a trait method with body\",\n+                    )\n+                    .span_label(*span, \"not a trait method or missing a body\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {"}, {"sha": "6ee54cfe37f306cbbc9a18cdf1885ae8b7c668dc", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -8,6 +8,7 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -85,34 +86,41 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n                     let did = imp.of_trait.as_ref()?.trait_def_id()?;\n-                    let trait_fn_cnt = self\n-                        .tcx\n-                        .associated_item_def_ids(did)\n-                        .iter()\n-                        .filter(|did| {\n-                            matches!(\n-                                self.tcx.associated_item(**did),\n-                                ty::AssocItem { kind: ty::AssocKind::Fn, .. }\n-                            )\n-                        })\n-                        .count();\n+                    let mut to_implement = FxHashSet::default();\n+\n+                    for did in self.tcx.associated_item_def_ids(did) {\n+                        if let ty::AssocItem {\n+                            kind: ty::AssocKind::Fn, ident, defaultness, ..\n+                        } = self.tcx.associated_item(*did)\n+                        {\n+                            // we can ignore functions that do not have default bodies:\n+                            // if those are unimplemented it will be catched by typeck.\n+                            if defaultness.has_value()\n+                                && !self.tcx.has_attr(*did, sym::default_method_body_is_const)\n+                            {\n+                                to_implement.insert(ident);\n+                            }\n+                        }\n+                    }\n \n-                    let impl_fn_cnt = imp\n+                    for it in imp\n                         .items\n                         .iter()\n                         .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n-                        .count();\n+                    {\n+                        to_implement.remove(&it.ident);\n+                    }\n \n-                    // number of trait functions unequal to functions in impl,\n-                    // meaning that one or more provided/default functions of the\n-                    // trait are used.\n-                    if trait_fn_cnt != impl_fn_cnt {\n+                    // all nonconst trait functions (not marked with #[default_method_body_is_const])\n+                    // must be implemented\n+                    if !to_implement.is_empty() {\n                         self.tcx\n                             .sess\n                             .struct_span_err(\n                                 item.span,\n-                                \"const trait implementations may not use default functions\",\n+                                \"const trait implementations may not use non-const default functions\",\n                             )\n+                            .note(&format!(\"`{}` not implemented\", to_implement.into_iter().map(|id| id.to_string()).collect::<Vec<_>>().join(\"`, `\")))\n                             .emit();\n                     }\n                 }"}, {"sha": "9a78d1ac0be80de96062b556a33b5a05fd2ca62c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -462,6 +462,7 @@ symbols! {\n         decode,\n         default_alloc_error_handler,\n         default_lib_allocator,\n+        default_method_body_is_const,\n         default_type_parameter_fallback,\n         default_type_params,\n         delay_span_bug_from_inside_query,"}, {"sha": "b0d644ae028ce3711036c58254eea6329fef759b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -168,6 +168,16 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n     }\n }\n \n+fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let item = tcx.hir().expect_item(hir_id);\n+    if let hir::ItemKind::Impl(impl_) = &item.kind {\n+        impl_.constness\n+    } else {\n+        bug!(\"`impl_constness` called on {:?}\", item);\n+    }\n+}\n+\n /// Calculates the `Sized` constraint.\n ///\n /// In fact, there are only a few options for the types in the constraint:\n@@ -535,6 +545,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        impl_constness,\n         conservative_is_privately_uninhabited: conservative_is_privately_uninhabited_raw,\n         ..*providers\n     };"}, {"sha": "338ac3d25053635ec6fe0a4fd65c54b2a703d0e4", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+#[default_method_body_is_const] //~ ERROR attribute should be applied\n+trait A {\n+    #[default_method_body_is_const] //~ ERROR attribute should be applied\n+    fn no_body(self);\n+\n+    #[default_method_body_is_const]\n+    fn correct_use(&self) {}\n+}\n+\n+#[default_method_body_is_const] //~ ERROR attribute should be applied\n+fn main() {}"}, {"sha": "3af71d6ff78fb016c0e80a46d8bfba29bcf84ea5", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -0,0 +1,32 @@\n+error: attribute should be applied to a trait method with body\n+  --> $DIR/attr-misuse.rs:4:1\n+   |\n+LL |   #[default_method_body_is_const]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / trait A {\n+LL | |     #[default_method_body_is_const]\n+LL | |     fn no_body(self);\n+LL | |\n+LL | |     #[default_method_body_is_const]\n+LL | |     fn correct_use(&self) {}\n+LL | | }\n+   | |_- not a trait method or missing a body\n+\n+error: attribute should be applied to a trait method with body\n+  --> $DIR/attr-misuse.rs:13:1\n+   |\n+LL | #[default_method_body_is_const]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() {}\n+   | ------------ not a trait method or missing a body\n+\n+error: attribute should be applied to a trait method with body\n+  --> $DIR/attr-misuse.rs:6:5\n+   |\n+LL |     #[default_method_body_is_const]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn no_body(self);\n+   |     ----------------- not a trait method or missing a body\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d08c01750c37949948a2576bb46dd1c12dd2f024", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -0,0 +1,31 @@\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)] // FIXME is this needed?\n+#![allow(incomplete_features)]\n+\n+trait ConstDefaultFn: Sized {\n+    fn b(self);\n+\n+    #[default_method_body_is_const]\n+    fn a(self) {\n+        self.b();\n+    }\n+}\n+\n+struct NonConstImpl;\n+struct ConstImpl;\n+\n+impl ConstDefaultFn for NonConstImpl {\n+    fn b(self) {}\n+}\n+\n+impl const ConstDefaultFn for ConstImpl {\n+    fn b(self) {}\n+}\n+\n+const fn test() {\n+    NonConstImpl.a();\n+    //~^ ERROR calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+    ConstImpl.a();\n+}\n+\n+fn main() {}"}, {"sha": "d52e83609489ba605741d748aaa211c10f9d82d7", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-default-method-bodies.rs:26:5\n+   |\n+LL |     NonConstImpl.a();\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "def7c34b4e50e2e4cf6435bad316f251e0802ff2", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -8,13 +8,31 @@ trait Tr {\n         println!(\"lul\");\n         self.req();\n     }\n+\n+    #[default_method_body_is_const]\n+    fn default() {}\n }\n \n struct S;\n \n impl const Tr for S {\n     fn req(&self) {}\n+} //~^^ ERROR const trait implementations may not use non-const default functions\n+\n+impl const Tr for u8 {\n+    fn req(&self) {}\n+    fn prov(&self) {}\n }\n-//~^^^ ERROR const trait implementations may not use default functions\n+\n+impl const Tr for u16 {\n+    fn prov(&self) {}\n+    fn default() {}\n+} //~^^^ ERROR not all trait items implemented\n+\n+\n+impl const Tr for u32 {\n+    fn req(&self) {}\n+    fn default() {}\n+} //~^^^ ERROR const trait implementations may not use non-const default functions\n \n fn main() {}"}, {"sha": "eb7f899b4dee212bed27ba19d81da55fb4c2ba78", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/394804bb23bf0889c135a21f945b2fe44881ada8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr?ref=394804bb23bf0889c135a21f945b2fe44881ada8", "patch": "@@ -1,10 +1,33 @@\n-error: const trait implementations may not use default functions\n-  --> $DIR/impl-with-default-fn.rs:15:1\n+error: const trait implementations may not use non-const default functions\n+  --> $DIR/impl-with-default-fn.rs:18:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n LL | | }\n    | |_^\n+   |\n+   = note: `prov` not implemented\n+\n+error: const trait implementations may not use non-const default functions\n+  --> $DIR/impl-with-default-fn.rs:33:1\n+   |\n+LL | / impl const Tr for u32 {\n+LL | |     fn req(&self) {}\n+LL | |     fn default() {}\n+LL | | }\n+   | |_^\n+   |\n+   = note: `prov` not implemented\n+\n+error[E0046]: not all trait items implemented, missing: `req`\n+  --> $DIR/impl-with-default-fn.rs:27:1\n+   |\n+LL |     fn req(&self);\n+   |     -------------- `req` from trait\n+...\n+LL | impl const Tr for u16 {\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `req` in implementation\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0046`."}]}