{"sha": "3061777c4815ebaac8eff14d3fc1773045ce359d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjE3NzdjNDgxNWViYWFjOGVmZjE0ZDNmYzE3NzMwNDVjZTM1OWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-06-18T17:31:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-06-18T17:31:56Z"}, "message": "bless you", "tree": {"sha": "0ff5b86adac85c3a883a05ab8c5503cd8d38c51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff5b86adac85c3a883a05ab8c5503cd8d38c51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3061777c4815ebaac8eff14d3fc1773045ce359d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3061777c4815ebaac8eff14d3fc1773045ce359d", "html_url": "https://github.com/rust-lang/rust/commit/3061777c4815ebaac8eff14d3fc1773045ce359d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3061777c4815ebaac8eff14d3fc1773045ce359d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c08cf8e5e3370d9d17891974cc97f3993771d6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c08cf8e5e3370d9d17891974cc97f3993771d6a", "html_url": "https://github.com/rust-lang/rust/commit/3c08cf8e5e3370d9d17891974cc97f3993771d6a"}], "stats": {"total": 1176, "additions": 340, "deletions": 836}, "files": [{"sha": "610531c7b4c9e8fad03dcd8703b3fbe66565b542", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -5,9 +5,8 @@ use std::mem;\n // Make sure we error with the right kind of error on a too large slice.\n const TEST: () = { unsafe {\n     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n-    let _val = &*slice; //~ ERROR: any use of this value will cause an error\n+    let _val = &*slice; //~ ERROR: evaluation of constant value failed\n     //~| slice is bigger than largest supported object\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n } };\n \n fn main() {}"}, {"sha": "5665a9c3e05239c853efb8059e19c40a4d189f60", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,18 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/dangling.rs:8:16\n    |\n-LL | / const TEST: () = { unsafe {\n-LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n-LL | |     let _val = &*slice;\n-   | |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n-LL | |\n-LL | |\n-LL | | } };\n-   | |____-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     let _val = &*slice;\n+   |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4df541eeeb4e9ae14e6da37f044e831a73db56ee", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -8,8 +8,7 @@ const FOO: i32 = foo();\n const fn foo() -> i32 {\n     unsafe {\n         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n-        //~^ error: any use of this value will cause an error [const_err]\n-        //~| WARN this was previously accepted by the compiler but is being phased out\n+        //~^ error: evaluation of constant value failed\n     }\n     1\n "}, {"sha": "327e2911205a3f465aa5d407b612893d2a84585e", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,19 +1,15 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/alloc_intrinsic_errors.rs:10:17\n    |\n LL | const FOO: i32 = foo();\n-   | -----------------------\n+   |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n ...\n LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2\n    |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:10:17\n-   |                 inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "baa1848e9c31ac264ca8595c41b81b58e4a36c03", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -17,8 +17,7 @@ const fn wat(x: u64) -> &'static u64 {\n     unsafe { transmute(&x) }\n }\n const X: u64 = *wat(42);\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     println!(\"{}\", X);"}, {"sha": "49ec9eb047be441413a62dc0154abb96d95706aa", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,14 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-49296.rs:19:16\n    |\n LL | const X: u64 = *wat(42);\n-   | ---------------^^^^^^^^-\n-   |                |\n-   |                pointer to alloc1 was dereferenced after this allocation got freed\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                ^^^^^^^^ pointer to alloc1 was dereferenced after this allocation got freed\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ffde14f894e65ab2b5fae9c4939c0b0e1efbe66d", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.32bit.stderr", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,30 +1,17 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-incorrect-vtable.rs:19:14\n    |\n-LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: alignment `1000` is not a power of 2\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid vtable: alignment `1000` is not a power of 2\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:25:14\n-   |\n-LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: size is bigger than largest supported object\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-incorrect-vtable.rs:24:14\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid vtable: size is bigger than largest supported object\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-incorrect-vtable.rs:36:1\n+  --> $DIR/ub-incorrect-vtable.rs:34:1\n    |\n LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n@@ -36,7 +23,7 @@ LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-incorrect-vtable.rs:41:1\n+  --> $DIR/ub-incorrect-vtable.rs:39:1\n    |\n LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };"}, {"sha": "2ad164a8c35f759c6fd6ddf2ae3c8d6b2c5eea9f", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.64bit.stderr", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,30 +1,17 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-incorrect-vtable.rs:19:14\n    |\n-LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: alignment `1000` is not a power of 2\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid vtable: alignment `1000` is not a power of 2\n \n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:25:14\n-   |\n-LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: size is bigger than largest supported object\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-incorrect-vtable.rs:24:14\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid vtable: size is bigger than largest supported object\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-incorrect-vtable.rs:36:1\n+  --> $DIR/ub-incorrect-vtable.rs:34:1\n    |\n LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n@@ -36,7 +23,7 @@ LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-incorrect-vtable.rs:41:1\n+  --> $DIR/ub-incorrect-vtable.rs:39:1\n    |\n LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };"}, {"sha": "4ec853576c91bd4b7a202f230c370f9db0662e9d", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -17,14 +17,12 @@ trait Trait {}\n \n const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted by the compiler\n+//~^ ERROR evaluation of constant value failed\n //~| invalid vtable: alignment `1000` is not a power of 2\n \n const INVALID_VTABLE_SIZE: &dyn Trait =\n     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted by the compiler\n+//~^ ERROR evaluation of constant value failed\n //~| invalid vtable: size is bigger than largest supported object\n \n #[repr(transparent)]"}, {"sha": "9d3b88e803ebd43d82bb34e0fe5763710b5acef9", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -9,29 +9,14 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n                00 00 00 00                                     \u2502 ....\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n-LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n-LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n-LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to null!\n-LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n-LL | |\n-LL | |     mem::transmute(out_of_bounds_ptr)\n-LL | | } };\n-   | |____-\n-   |\n-note: the lint level is defined here\n-  --> $DIR/ub-nonnull.rs:15:8\n-   |\n-LL | #[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n-   |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     let out_of_bounds_ptr = &ptr[255];\n+   |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:24:1\n+  --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -42,7 +27,7 @@ LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:26:1\n+  --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -53,7 +38,7 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:34:1\n+  --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .0: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -64,7 +49,7 @@ LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:42:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n@@ -75,7 +60,7 @@ LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:48:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "bc230374ebf84bd810697a0d1be46fe63c48d270", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -9,29 +9,14 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n                00 00 00 00 00 00 00 00                         \u2502 ........\n            }\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ub-nonnull.rs:19:30\n    |\n-LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n-LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n-LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to null!\n-LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n-LL | |\n-LL | |     mem::transmute(out_of_bounds_ptr)\n-LL | | } };\n-   | |____-\n-   |\n-note: the lint level is defined here\n-  --> $DIR/ub-nonnull.rs:15:8\n-   |\n-LL | #[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n-   |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     let out_of_bounds_ptr = &ptr[255];\n+   |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:24:1\n+  --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -42,7 +27,7 @@ LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:26:1\n+  --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -53,7 +38,7 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:34:1\n+  --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .0: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -64,7 +49,7 @@ LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:42:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n@@ -75,7 +60,7 @@ LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:48:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "259707b8028da33ed0b6288655850180741b233a", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -16,8 +16,7 @@ const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n     // Use address-of-element for pointer arithmetic. This could wrap around to null!\n-    let out_of_bounds_ptr = &ptr[255]; //~ ERROR any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    let out_of_bounds_ptr = &ptr[255]; //~ ERROR evaluation of constant value failed\n     mem::transmute(out_of_bounds_ptr)\n } };\n "}, {"sha": "0022d19e95395d734da46f03810340a10f2cfefc", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,26 +1,17 @@\n-warning: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:5:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n-   | -----------------------------------\n-   |\n-note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:14:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:18:1\n+  --> $DIR/validate_uninhabited_zsts.rs:17:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n@@ -41,7 +32,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:18:35\n+  --> $DIR/validate_uninhabited_zsts.rs:17:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,6 +42,6 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |\n    = note: enums with no variants have no valid value\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to 2 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "0022d19e95395d734da46f03810340a10f2cfefc", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,26 +1,17 @@\n-warning: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:5:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n-   | -----------------------------------\n-   |\n-note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:14:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:18:1\n+  --> $DIR/validate_uninhabited_zsts.rs:17:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n@@ -41,7 +32,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:18:35\n+  --> $DIR/validate_uninhabited_zsts.rs:17:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,6 +42,6 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |\n    = note: enums with no variants have no valid value\n \n-error: aborting due to previous error; 3 warnings emitted\n+error: aborting due to 2 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f6b6a1f53eb9f2c54dc1f23aad21e22b0cae6cda", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -3,9 +3,8 @@\n \n const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }\n-    //~^ WARN any use of this value will cause an error [const_err]\n+    //~^ ERROR evaluation of constant value failed\n     //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "902a668488b8773d0754c1e6efdc2324f86631eb", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 49, "deletions": 98, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -13,186 +13,137 @@ use std::intrinsics;\n // unsigned types:\n \n const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // signed types:\n \n const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // and make sure we capture y < 0:\n \n const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // Repeat it all over for `unchecked_shr`\n \n // unsigned types:\n \n const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // signed types:\n \n const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // and make sure we capture y < 0:\n \n const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // Other arithmetic functions:\n \n const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n // capture fault with zero value\n \n const _: u32 = unsafe { std::intrinsics::ctlz_nonzero(0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n const _: u32 = unsafe { std::intrinsics::cttz_nonzero(0) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "22e8c8dabc970a139b63d58e2fa635411e03b009", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 147, "deletions": 392, "changes": 539, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,542 +1,297 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-int-unchecked.rs:15:29\n    |\n LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                             |\n-   |                             overflowing shift by 8 in `unchecked_shl`\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 8 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:18:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:17:31\n    |\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 16 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 16 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:21:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:19:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 32 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 32 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:24:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:21:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 64 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:27:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:23:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 128 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 128 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:33:29\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:28:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n-   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                             |\n-   |                             overflowing shift by 8 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 8 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:36:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:30:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 16 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 16 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:39:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:32:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 32 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 32 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:42:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:34:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 64 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:45:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:36:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 128 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 128 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:51:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:41:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 255 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 255 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:54:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:43:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 65535 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 65535 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:57:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:45:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 4294967295 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 4294967295 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:60:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:47:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 18446744073709551615 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 18446744073709551615 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:63:37\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:49:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n-   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                     |\n-   |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:70:40\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:55:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                        |\n-   |                                        overflowing shift by 250 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 250 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:73:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:57:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 65523 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 65523 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:76:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:59:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 4294967271 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 4294967271 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:79:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:61:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 18446744073709551586 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 18446744073709551586 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:82:44\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:63:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n-   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                            |\n-   |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:90:29\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:70:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                             |\n-   |                             overflowing shift by 8 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 8 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:93:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:72:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 16 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 16 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:96:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:74:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 32 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 32 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:99:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:76:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 64 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:102:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:78:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 128 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 128 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:108:29\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:83:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n-   | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                             |\n-   |                             overflowing shift by 8 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 8 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:111:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:85:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 16 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 16 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:114:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:87:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 32 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 32 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:117:31\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:89:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n-   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                               |\n-   |                               overflowing shift by 64 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:120:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:91:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 128 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 128 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:126:33\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:96:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n-   | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                 |\n-   |                                 overflowing shift by 255 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 255 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:129:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:98:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 65535 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 65535 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:132:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:100:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 4294967295 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 4294967295 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:135:35\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:102:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n-   | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                   |\n-   |                                   overflowing shift by 18446744073709551615 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 18446744073709551615 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:138:37\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:104:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n-   | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                     |\n-   |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:145:40\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:110:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n-   | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                        |\n-   |                                        overflowing shift by 250 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 250 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:148:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:112:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 65523 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 65523 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:151:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:114:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 4294967271 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 4294967271 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:154:42\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:116:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n-   | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                          |\n-   |                                          overflowing shift by 18446744073709551586 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 18446744073709551586 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:157:44\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:118:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n-   | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                                            |\n-   |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:163:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:123:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         overflow executing `unchecked_add`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:167:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:126:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         overflow executing `unchecked_sub`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:171:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:129:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         overflow executing `unchecked_mul`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:175:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:132:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         dividing by zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dividing by zero\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:178:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:134:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         overflow executing `unchecked_div`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_div`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:182:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:137:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         calculating the remainder with a divisor of zero\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calculating the remainder with a divisor of zero\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:185:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:139:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         overflow executing `unchecked_rem`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_rem`\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:191:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:144:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::ctlz_nonzero(0) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         `ctlz_nonzero` called on 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ctlz_nonzero` called on 0\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:194:25\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-int-unchecked.rs:146:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::cttz_nonzero(0) };\n-   | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                         |\n-   |                         `cttz_nonzero` called on 0\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `cttz_nonzero` called on 0\n \n error: aborting due to 49 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8cee5b506513623094dc9717d12b5beceb21bcde", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,5 +1,4 @@\n-// build-fail\n-\n+// error-pattern: evaluation of constant value failed\n #![feature(const_unreachable_unchecked)]\n \n const unsafe fn foo(x: bool) -> bool {\n@@ -9,12 +8,8 @@ const unsafe fn foo(x: bool) -> bool {\n     }\n }\n \n-#[warn(const_err)]\n const BAR: bool = unsafe { foo(false) };\n \n fn main() {\n   assert_eq!(BAR, true);\n-  //~^ ERROR E0080\n-  //~| ERROR erroneous constant\n-  //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "ecdd0ca3f54c1bf995b840caf38afa1c3d50d99a", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,44 +1,20 @@\n-warning: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n LL |     unsafe { intrinsics::unreachable() }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              entering unreachable code\n    |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n-   |              inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:8:18\n-   |              inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:13:28\n    | \n-  ::: $DIR/const_unsafe_unreachable_ub.rs:13:1\n+  ::: $DIR/const_unsafe_unreachable_ub.rs:7:18\n    |\n+LL |         false => std::hint::unreachable_unchecked(),\n+   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:7:18\n+...\n LL | const BAR: bool = unsafe { foo(false) };\n-   | ----------------------------------------\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const_unsafe_unreachable_ub.rs:12:8\n-   |\n-LL | #[warn(const_err)]\n-   |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_unsafe_unreachable_ub.rs:16:14\n-   |\n-LL |   assert_eq!(BAR, true);\n-   |              ^^^ referenced constant has errors\n-\n-error: erroneous constant used\n-  --> $DIR/const_unsafe_unreachable_ub.rs:16:3\n-   |\n-LL |   assert_eq!(BAR, true);\n-   |   ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:11:28\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "563535f4e384fdbb3c37168bd665149d1968c874", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -8,12 +8,11 @@ struct Struct {\n }\n \n pub const DIFFERENT_ALLOC: usize = {\n-    //~^ NOTE\n     let uninit = std::mem::MaybeUninit::<Struct>::uninit();\n     let base_ptr: *const Struct = &uninit as *const _ as *const Struct;\n     let uninit2 = std::mem::MaybeUninit::<Struct>::uninit();\n     let field_ptr: *const Struct = &uninit2 as *const _ as *const Struct;\n-    let offset = unsafe { field_ptr.offset_from(base_ptr) };\n+    let offset = unsafe { field_ptr.offset_from(base_ptr) }; //~NOTE inside `DIFFERENT_ALLOC` at\n     offset as usize\n };\n \n@@ -23,17 +22,15 @@ pub const NOT_PTR: usize = {\n };\n \n pub const NOT_MULTIPLE_OF_SIZE: isize = {\n-    //~^ NOTE\n     let data = [5u8, 6, 7];\n     let base_ptr = data.as_ptr();\n     let field_ptr = &data[1] as *const u8 as *const u16;\n-    unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n+    unsafe { field_ptr.offset_from(base_ptr as *const u16) } //~NOTE inside `NOT_MULTIPLE_OF_SIZE` at\n };\n \n pub const OFFSET_FROM_NULL: isize = {\n-    //~^ NOTE\n     let ptr = 0 as *const u8;\n-    unsafe { ptr.offset_from(ptr) }\n+    unsafe { ptr.offset_from(ptr) } //~NOTE inside `OFFSET_FROM_NULL` at\n };\n \n pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC"}, {"sha": "f39fee8a62a5dac49f0390a3b4092d553e9c120c", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 33, "deletions": 60, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,27 +1,16 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    ptr_offset_from cannot compute offset of pointers into different allocations.\n-   |                    inside `ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:16:27\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  ptr_offset_from cannot compute offset of pointers into different allocations.\n+   |                  inside `ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_from_ub.rs:10:1\n+  ::: $DIR/offset_from_ub.rs:15:27\n    |\n-LL | / pub const DIFFERENT_ALLOC: usize = {\n-LL | |\n-LL | |     let uninit = std::mem::MaybeUninit::<Struct>::uninit();\n-LL | |     let base_ptr: *const Struct = &uninit as *const _ as *const Struct;\n-...  |\n-LL | |     offset as usize\n-LL | | };\n-   | |__-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     let offset = unsafe { field_ptr.offset_from(base_ptr) };\n+   |                           ------------------------------- inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:15:27\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -31,64 +20,47 @@ LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                    |\n    |                    unable to turn bytes into a pointer\n    |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `NOT_PTR` at $DIR/offset_from_ub.rs:22:14\n+   |                    inside `NOT_PTR` at $DIR/offset_from_ub.rs:21:14\n    | \n-  ::: $DIR/offset_from_ub.rs:20:1\n+  ::: $DIR/offset_from_ub.rs:19:1\n    |\n LL | / pub const NOT_PTR: usize = {\n LL | |\n LL | |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n LL | | };\n    | |__-\n    |\n+   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    exact_div: 1_isize cannot be divided by 2_isize without remainder\n-   |                    inside `ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:30:14\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  exact_div: 1_isize cannot be divided by 2_isize without remainder\n+   |                  inside `ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_from_ub.rs:25:1\n+  ::: $DIR/offset_from_ub.rs:28:14\n    |\n-LL | / pub const NOT_MULTIPLE_OF_SIZE: isize = {\n-LL | |\n-LL | |     let data = [5u8, 6, 7];\n-LL | |     let base_ptr = data.as_ptr();\n-LL | |     let field_ptr = &data[1] as *const u8 as *const u16;\n-LL | |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n+   |              --------------------------------------------- inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:28:14\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    null pointer is not a valid pointer for this operation\n-   |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:36:14\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  null pointer is not a valid pointer for this operation\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    | \n-  ::: $DIR/offset_from_ub.rs:33:1\n-   |\n-LL | / pub const OFFSET_FROM_NULL: isize = {\n-LL | |\n-LL | |     let ptr = 0 as *const u8;\n-LL | |     unsafe { ptr.offset_from(ptr) }\n-LL | | };\n-   | |__-\n+  ::: $DIR/offset_from_ub.rs:33:14\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { ptr.offset_from(ptr) }\n+   |              -------------------- inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:33:14\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -98,9 +70,9 @@ LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                    |\n    |                    unable to turn bytes into a pointer\n    |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                    inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:43:14\n+   |                    inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:40:14\n    | \n-  ::: $DIR/offset_from_ub.rs:39:1\n+  ::: $DIR/offset_from_ub.rs:36:1\n    |\n LL | / pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n LL | |\n@@ -115,3 +87,4 @@ LL | | };\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e25bef0624de063e1055be715b2f49efc31f970f", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 29, "deletions": 64, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,147 +1,114 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `BEFORE_START` at $DIR/offset_ub.rs:6:46\n    | \n-  ::: $DIR/offset_ub.rs:6:1\n+  ::: $DIR/offset_ub.rs:6:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   | ------------------------------------------------------------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:6:46\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  pointer arithmetic failed: pointer must be in-bounds at offset 2, but is outside bounds of allocN which has size 1\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `AFTER_END` at $DIR/offset_ub.rs:7:43\n    | \n-  ::: $DIR/offset_ub.rs:7:1\n+  ::: $DIR/offset_ub.rs:7:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   | --------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:7:43\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  pointer arithmetic failed: pointer must be in-bounds at offset 101, but is outside bounds of allocN which has size 100\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `AFTER_ARRAY` at $DIR/offset_ub.rs:8:45\n    | \n-  ::: $DIR/offset_ub.rs:8:1\n+  ::: $DIR/offset_ub.rs:8:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   | ------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:8:45\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `OVERFLOW` at $DIR/offset_ub.rs:10:43\n    | \n-  ::: $DIR/offset_ub.rs:10:1\n+  ::: $DIR/offset_ub.rs:10:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   | ----------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:10:43\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `UNDERFLOW` at $DIR/offset_ub.rs:11:44\n    | \n-  ::: $DIR/offset_ub.rs:11:1\n+  ::: $DIR/offset_ub.rs:11:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   | -----------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:11:44\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:12:56\n    | \n-  ::: $DIR/offset_ub.rs:12:1\n+  ::: $DIR/offset_ub.rs:12:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   | ---------------------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:12:56\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:57\n    | \n-  ::: $DIR/offset_ub.rs:13:1\n+  ::: $DIR/offset_ub.rs:13:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   | --------------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:57\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  pointer arithmetic failed: pointer must be in-bounds at offset 1, but is outside bounds of allocN which has size 0\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:15:50\n    | \n-  ::: $DIR/offset_ub.rs:15:1\n+  ::: $DIR/offset_ub.rs:15:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   | -------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:15:50\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -158,26 +125,23 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n    | ---------------------------------------------------------------------------------------------\n    |\n+   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  pointer arithmetic failed: 0x0 is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:19:50\n    | \n-  ::: $DIR/offset_ub.rs:19:1\n+  ::: $DIR/offset_ub.rs:19:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   | -------------------------------------------------------------------------------\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:19:50\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -199,3 +163,4 @@ LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).off\n \n error: aborting due to 11 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "aa8f511e07268694dc2b0a8a8e66f9ef0e505326", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -62,8 +62,8 @@ const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n \n const _: *const u8 =\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n+//~| pointer must be in-bounds\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error"}, {"sha": "f00f40b32548153dec764041eca1ad61069d25c8", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3061777c4815ebaac8eff14d3fc1773045ce359d/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=3061777c4815ebaac8eff14d3fc1773045ce359d", "patch": "@@ -1,33 +1,22 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  pointer arithmetic failed: pointer must be in-bounds at offset $TWO_WORDS, but is outside bounds of alloc2 which has size $WORD\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `_` at $DIR/ptr_comparisons.rs:61:34\n    | \n-  ::: $DIR/ptr_comparisons.rs:61:1\n+  ::: $DIR/ptr_comparisons.rs:61:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   | -------------------------------------------------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:61:34\n \n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:64:33\n    |\n-LL | / const _: *const u8 =\n-LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n-   |                                   |\n-   |                                   memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:68:27\n@@ -37,6 +26,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    |                           |\n    |                           cannot cast pointer to integer because it was not created by cast from integer\n    |\n+   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n@@ -53,3 +43,4 @@ LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}]}