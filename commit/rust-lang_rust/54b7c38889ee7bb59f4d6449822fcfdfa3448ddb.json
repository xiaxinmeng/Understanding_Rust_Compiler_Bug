{"sha": "54b7c38889ee7bb59f4d6449822fcfdfa3448ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjdjMzg4ODllZTdiYjU5ZjRkNjQ0OTgyMmZjZmRmYTM0NDhkZGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-18T15:10:21Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-20T13:43:41Z"}, "message": "Drop NodeHeader type from BTree code\n\nWe no longer have a separate header because the shared root is gone; all code\ncan work solely with leafs now.", "tree": {"sha": "20f091fbeaf9f042cb696cc0c4b06dd819f2ec65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f091fbeaf9f042cb696cc0c4b06dd819f2ec65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb", "html_url": "https://github.com/rust-lang/rust/commit/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c04fda751352fe00884782e7adf792a5e2a91c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c04fda751352fe00884782e7adf792a5e2a91c4", "html_url": "https://github.com/rust-lang/rust/commit/3c04fda751352fe00884782e7adf792a5e2a91c4"}], "stats": {"total": 46, "additions": 5, "deletions": 41}, "files": [{"sha": "6ebb98c42cd4f8ecef6fee0628ed665325a0003e", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b7c38889ee7bb59f4d6449822fcfdfa3448ddb/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=54b7c38889ee7bb59f4d6449822fcfdfa3448ddb", "patch": "@@ -44,34 +44,7 @@ const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;\n pub const CAPACITY: usize = 2 * B - 1;\n \n-/// The underlying representation of leaf nodes. Note that it is often unsafe to actually store\n-/// these, since only the first `len` keys and values are assumed to be initialized. As such,\n-/// these should always be put behind pointers, and specifically behind `BoxedNode` in the owned\n-/// case.\n-///\n-/// We have a separate type for the header and rely on it matching the prefix of `LeafNode`, in\n-/// order to statically allocate a single dummy node to avoid allocations. This struct is\n-/// `repr(C)` to prevent them from being reordered. `LeafNode` does not just contain a\n-/// `NodeHeader` because we do not want unnecessary padding between `len` and the keys.\n-/// Crucially, `NodeHeader` can be safely transmuted to different K and V. (This is exploited\n-/// by `as_header`.)\n-#[repr(C)]\n-struct NodeHeader<K, V> {\n-    /// We use `*const` as opposed to `*mut` so as to be covariant in `K` and `V`.\n-    /// This either points to an actual node or is null.\n-    parent: *const InternalNode<K, V>,\n-\n-    /// This node's index into the parent node's `edges` array.\n-    /// `*node.parent.edges[node.parent_idx]` should be the same thing as `node`.\n-    /// This is only guaranteed to be initialized when `parent` is non-null.\n-    parent_idx: MaybeUninit<u16>,\n-\n-    /// The number of keys and values this node stores.\n-    ///\n-    /// This next to `parent_idx` to encourage the compiler to join `len` and\n-    /// `parent_idx` into the same 32-bit word, reducing space overhead.\n-    len: u16,\n-}\n+/// The underlying representation of leaf nodes.\n #[repr(C)]\n struct LeafNode<K, V> {\n     /// We use `*const` as opposed to `*mut` so as to be covariant in `K` and `V`.\n@@ -141,10 +114,7 @@ impl<K, V> InternalNode<K, V> {\n /// A managed, non-null pointer to a node. This is either an owned pointer to\n /// `LeafNode<K, V>` or an owned pointer to `InternalNode<K, V>`.\n ///\n-/// All of these types have a `NodeHeader<K, V>` prefix, meaning that they have at\n-/// least the same size as `NodeHeader<K, V>` and store the same kinds of data at the same\n-/// offsets; and they have a pointer alignment at least as large as `NodeHeader<K, V>`'s.\n-/// However, `BoxedNode` contains no information as to which of the three types\n+/// However, `BoxedNode` contains no information as to which of the two types\n /// of nodes it actually contains, and, partially due to this lack of information,\n /// has no destructor.\n struct BoxedNode<K, V> {\n@@ -279,8 +249,6 @@ impl<K, V> Root<K, V> {\n ///   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the\n ///   `NodeRef` points to an internal node, and when this is `LeafOrInternal` the\n ///   `NodeRef` could be pointing to either type of node.\n-///\n-///   Turning this into a `NodeHeader` reference is always safe.\n pub struct NodeRef<BorrowType, K, V, Type> {\n     /// The number of levels below the node.\n     height: usize,\n@@ -322,7 +290,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     /// Note that, despite being safe, calling this function can have the side effect\n     /// of invalidating mutable references that unsafe code has created.\n     pub fn len(&self) -> usize {\n-        self.as_header().len as usize\n+        self.as_leaf().len as usize\n     }\n \n     /// Returns the height of this node in the whole tree. Zero height denotes the\n@@ -353,10 +321,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         unsafe { self.node.as_ref() }\n     }\n \n-    fn as_header(&self) -> &NodeHeader<K, V> {\n-        unsafe { &*(self.node.as_ptr() as *const NodeHeader<K, V>) }\n-    }\n-\n     /// Borrows a view into the keys stored in the node.\n     pub fn keys(&self) -> &[K] {\n         self.reborrow().into_key_slice()\n@@ -377,7 +341,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        let parent_as_leaf = self.as_header().parent as *const LeafNode<K, V>;\n+        let parent_as_leaf = self.as_leaf().parent as *const LeafNode<K, V>;\n         if let Some(non_zero) = NonNull::new(parent_as_leaf as *mut _) {\n             Ok(Handle {\n                 node: NodeRef {\n@@ -386,7 +350,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n                     root: self.root,\n                     _marker: PhantomData,\n                 },\n-                idx: unsafe { usize::from(*self.as_header().parent_idx.as_ptr()) },\n+                idx: unsafe { usize::from(*self.as_leaf().parent_idx.as_ptr()) },\n                 _marker: PhantomData,\n             })\n         } else {"}]}