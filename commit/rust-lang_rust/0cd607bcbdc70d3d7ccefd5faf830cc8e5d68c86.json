{"sha": "0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZDYwN2JjYmRjNzBkM2Q3Y2NlZmQ1ZmFmODMwY2M4ZTVkNjhjODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-10T19:57:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-10T20:02:31Z"}, "message": "rt: Shutdown gracefully on failure\n\nWhen the kernel fails, kill all tasks and wait for the schedulers to stop\ninstead of just exiting. I'm sure there are tons of lurking issues here but\nthis is enough to fail without leaking (at least in the absence of cleanups).", "tree": {"sha": "0e531d1593e88a8dd3e3f783d16257568652cf93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e531d1593e88a8dd3e3f783d16257568652cf93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "html_url": "https://github.com/rust-lang/rust/commit/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ad0514087f985ce1c1aad126b28b8e17e2e005", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ad0514087f985ce1c1aad126b28b8e17e2e005", "html_url": "https://github.com/rust-lang/rust/commit/f6ad0514087f985ce1c1aad126b28b8e17e2e005"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "89c06885683544f57071be34667ffcc5fcd12eee", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "patch": "@@ -134,6 +134,14 @@ int rust_kernel::start_task_threads()\n     return rval;\n }\n \n+void\n+rust_kernel::fail() {\n+    for(size_t i = 0; i < num_threads; ++i) {\n+        rust_scheduler *thread = threads[i];\n+        thread->kill_all_tasks();\n+    }\n+}\n+\n rust_task_id\n rust_kernel::create_task(rust_task *spawner, const char *name) {\n     rust_scheduler *thread = threads[rand(&rctx) % num_threads];"}, {"sha": "774f7f4d0a4923648a7c8b3ed9950953315e4925", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "patch": "@@ -52,6 +52,8 @@ class rust_kernel {\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n \n+    void fail();\n+\n     int start_task_threads();\n \n #ifdef __WIN32__"}, {"sha": "33e607a85e19cc58b7613498a36debb0707e8026", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "patch": "@@ -71,7 +71,21 @@ rust_scheduler::fail() {\n         name, this);\n     I(this, kernel->rval == 0);\n     kernel->rval = 1;\n-    exit(1);\n+    kernel->fail();\n+}\n+\n+void\n+rust_scheduler::kill_all_tasks() {\n+    I(this, !lock.lock_held_by_current_thread());\n+    scoped_lock with(lock);\n+\n+    for (size_t i = 0; i < running_tasks.length(); i++) {\n+        running_tasks[i]->kill();\n+    }\n+\n+    for (size_t i = 0; i < blocked_tasks.length(); i++) {\n+        blocked_tasks[i]->kill();\n+    }\n }\n \n size_t"}, {"sha": "b4a70e51f686a5bc3ec2a4a6f5553f3a0ff985a8", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "patch": "@@ -81,6 +81,8 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n \n     void log_state();\n \n+    void kill_all_tasks();\n+\n     rust_task *create_task(rust_task *spawner, const char *name);\n \n     virtual void run();"}, {"sha": "cd8d9b96e2e00a4698c511846adb9f98031a91ed", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "patch": "@@ -195,8 +195,8 @@ upcall_fail(rust_task *task,\n             size_t line) {\n     LOG_UPCALL_ENTRY(task);\n     LOG_ERR(task, upcall, \"upcall fail '%s', %s:%\" PRIdPTR, expr, file, line);\n-    task->fail();\n     task->die();\n+    task->fail();\n     task->notify_tasks_waiting_to_join();\n     task->yield(4);\n }"}]}