{"sha": "6afa32a2504fa90b48f74979bb4061cb397e9270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZmEzMmEyNTA0ZmE5MGI0OGY3NDk3OWJiNDA2MWNiMzk3ZTkyNzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-12T18:28:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-09T01:45:44Z"}, "message": "std: Don't always create stdin for children\n\nFor example if `Command::output` or `Command::status` is used then stdin is just\nimmediately closed. Add an option for this so as an optimization we can avoid\ncreating pipes entirely.\n\nThis should help reduce the number of active file descriptors when spawning\nprocesses on Unix and the number of active handles on Windows.", "tree": {"sha": "b325bcb62312baba1cf50bc5806f9f9ab505c76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b325bcb62312baba1cf50bc5806f9f9ab505c76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afa32a2504fa90b48f74979bb4061cb397e9270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afa32a2504fa90b48f74979bb4061cb397e9270", "html_url": "https://github.com/rust-lang/rust/commit/6afa32a2504fa90b48f74979bb4061cb397e9270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afa32a2504fa90b48f74979bb4061cb397e9270/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46c99abe8671479c48b003bf06e98eda7eb85ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46c99abe8671479c48b003bf06e98eda7eb85ab", "html_url": "https://github.com/rust-lang/rust/commit/d46c99abe8671479c48b003bf06e98eda7eb85ab"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "fe5e49ecb09bb5b0b3f5f09a27b2b0aa89958699", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6afa32a2504fa90b48f74979bb4061cb397e9270", "patch": "@@ -295,7 +295,7 @@ impl Command {\n     /// By default, stdin, stdout and stderr are inherited from the parent.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn spawn(&mut self) -> io::Result<Child> {\n-        self.inner.spawn(imp::Stdio::Inherit).map(Child::from_inner)\n+        self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)\n     }\n \n     /// Executes the command as a child process, waiting for it to finish and\n@@ -318,7 +318,7 @@ impl Command {\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {\n-        self.inner.spawn(imp::Stdio::MakePipe).map(Child::from_inner)\n+        self.inner.spawn(imp::Stdio::MakePipe, false).map(Child::from_inner)\n             .and_then(|p| p.wait_with_output())\n     }\n \n@@ -340,7 +340,8 @@ impl Command {\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn status(&mut self) -> io::Result<ExitStatus> {\n-        self.spawn().and_then(|mut p| p.wait())\n+        self.inner.spawn(imp::Stdio::Inherit, false).map(Child::from_inner)\n+                  .and_then(|mut p| p.wait())\n     }\n }\n "}, {"sha": "5696cb2b52f7318124227ee2a4a3269a7d9264f7", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=6afa32a2504fa90b48f74979bb4061cb397e9270", "patch": "@@ -216,7 +216,7 @@ impl Command {\n         self.stderr = Some(stderr);\n     }\n \n-    pub fn spawn(&mut self, default: Stdio)\n+    pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n \n@@ -225,7 +225,7 @@ impl Command {\n                                       \"nul byte found in provided data\"));\n         }\n \n-        let (ours, theirs) = try!(self.setup_io(default));\n+        let (ours, theirs) = try!(self.setup_io(default, needs_stdin));\n         let (input, output) = try!(sys::pipe::anon_pipe());\n \n         let pid = unsafe {\n@@ -298,7 +298,7 @@ impl Command {\n                                   \"nul byte found in provided data\")\n         }\n \n-        match self.setup_io(default) {\n+        match self.setup_io(default, true) {\n             Ok((_, theirs)) => unsafe { self.do_exec(theirs) },\n             Err(e) => e,\n         }\n@@ -408,8 +408,11 @@ impl Command {\n     }\n \n \n-    fn setup_io(&self, default: Stdio) -> io::Result<(StdioPipes, ChildPipes)> {\n-        let stdin = self.stdin.as_ref().unwrap_or(&default);\n+    fn setup_io(&self, default: Stdio, needs_stdin: bool)\n+                -> io::Result<(StdioPipes, ChildPipes)> {\n+        let null = Stdio::Null;\n+        let default_stdin = if needs_stdin {&default} else {&null};\n+        let stdin = self.stdin.as_ref().unwrap_or(default_stdin);\n         let stdout = self.stdout.as_ref().unwrap_or(&default);\n         let stderr = self.stderr.as_ref().unwrap_or(&default);\n         let (their_stdin, our_stdin) = try!(stdin.to_child_stdio(true));"}, {"sha": "524c932eed439488e4936d8fe2409c2113c65dd8", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afa32a2504fa90b48f74979bb4061cb397e9270/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=6afa32a2504fa90b48f74979bb4061cb397e9270", "patch": "@@ -123,7 +123,7 @@ impl Command {\n         self.stderr = Some(stderr);\n     }\n \n-    pub fn spawn(&mut self, default: Stdio)\n+    pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n         // To have the spawning semantics of unix/windows stay the same, we need\n         // to read the *child's* PATH if one is provided. See #15149 for more\n@@ -181,7 +181,9 @@ impl Command {\n             stdout: None,\n             stderr: None,\n         };\n-        let stdin = self.stdin.as_ref().unwrap_or(&default);\n+        let null = Stdio::Null;\n+        let default_stdin = if needs_stdin {&default} else {&null};\n+        let stdin = self.stdin.as_ref().unwrap_or(default_stdin);\n         let stdout = self.stdout.as_ref().unwrap_or(&default);\n         let stderr = self.stderr.as_ref().unwrap_or(&default);\n         let stdin = try!(stdin.to_handle(c::STD_INPUT_HANDLE, &mut pipes.stdin));"}]}