{"sha": "b9287a83c5691568827f056bea0241a0bdb72f18", "node_id": "C_kwDOAAsO6NoAKGI5Mjg3YTgzYzU2OTE1Njg4MjdmMDU2YmVhMDI0MWEwYmRiNzJmMTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T22:16:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:54:04Z"}, "message": "Directly encode DefId in metadata.", "tree": {"sha": "d830ace337bc30a2a51ed3d8d2de1e49beaa77f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d830ace337bc30a2a51ed3d8d2de1e49beaa77f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9287a83c5691568827f056bea0241a0bdb72f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9287a83c5691568827f056bea0241a0bdb72f18", "html_url": "https://github.com/rust-lang/rust/commit/b9287a83c5691568827f056bea0241a0bdb72f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9287a83c5691568827f056bea0241a0bdb72f18/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6142f50845171bba9975be096f0fd4ea2a056fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6142f50845171bba9975be096f0fd4ea2a056fdf", "html_url": "https://github.com/rust-lang/rust/commit/6142f50845171bba9975be096f0fd4ea2a056fdf"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "3933a0d19a4ad2052088823f1b76e5f2a4be0d36", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b9287a83c5691568827f056bea0241a0bdb72f18", "patch": "@@ -388,6 +388,17 @@ impl<'a, 'tcx> LazyQueryDecodable<'a, 'tcx, Option<DeprecationEntry>>\n     }\n }\n \n+impl<'a, 'tcx> LazyQueryDecodable<'a, 'tcx, Option<DefId>> for Option<RawDefId> {\n+    fn decode_query(\n+        self,\n+        cdata: CrateMetadataRef<'a>,\n+        _: TyCtxt<'tcx>,\n+        _: impl FnOnce() -> !,\n+    ) -> Option<DefId> {\n+        self.map(|raw_def_id| raw_def_id.decode(cdata))\n+    }\n+}\n+\n impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -406,8 +417,9 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.cdata.unwrap()\n     }\n \n+    #[inline]\n     fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {\n-        if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }\n+        self.cdata().map_encoded_cnum_to_current(cnum)\n     }\n \n     fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {\n@@ -718,8 +730,7 @@ impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a\n     }\n }\n \n-impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>\n-    for Lazy<Table<I, T>>\n+impl<'a, 'tcx, I: Idx, T> Decodable<DecodeContext<'a, 'tcx>> for Lazy<Table<I, T>>\n where\n     Option<T>: FixedSizeEncoding,\n {\n@@ -856,6 +867,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))\n     }\n \n+    #[inline]\n+    pub(super) fn map_encoded_cnum_to_current(self, cnum: CrateNum) -> CrateNum {\n+        if cnum == LOCAL_CRATE { self.cnum } else { self.cnum_map[cnum] }\n+    }\n+\n     fn kind(self, item_id: DefIndex) -> EntryKind {\n         self.maybe_kind(item_id).unwrap_or_else(|| {\n             bug!("}, {"sha": "e967750aebb522c15473b75bd4b035d024b76ab6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b9287a83c5691568827f056bea0241a0bdb72f18", "patch": "@@ -147,8 +147,7 @@ impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a\n     }\n }\n \n-impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>\n-    for Lazy<Table<I, T>>\n+impl<'a, 'tcx, I: Idx, T> Encodable<EncodeContext<'a, 'tcx>> for Lazy<Table<I, T>>\n where\n     Option<T>: FixedSizeEncoding,\n {\n@@ -1285,7 +1284,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.encode_ident_span(def_id, impl_item.ident(self.tcx));\n         self.encode_item_type(def_id);\n         if let Some(trait_item_def_id) = impl_item.trait_item_def_id {\n-            record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);\n+            self.tables.trait_item_def_id.set(def_id.index, trait_item_def_id.into());\n         }\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1457,7 +1456,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     let trait_def = self.tcx.trait_def(trait_ref.def_id);\n                     if let Some(mut an) = trait_def.ancestors(self.tcx, def_id).ok() {\n                         if let Some(specialization_graph::Node::Impl(parent)) = an.nth(1) {\n-                            record!(self.tables.impl_parent[def_id] <- parent);\n+                            self.tables.impl_parent.set(def_id.index, parent.into());\n                         }\n                     }\n "}, {"sha": "43ccfc64e0563978adf8f7c7b6dfd7a083ff3c2a", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b9287a83c5691568827f056bea0241a0bdb72f18", "patch": "@@ -1,3 +1,4 @@\n+use crate::creader::CrateMetadataRef;\n use decoder::Metadata;\n use def_path_hash_map::DefPathHashMapRef;\n use table::{Table, TableBuilder};\n@@ -8,7 +9,7 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, DefIndex, DefPathHash, StableCrateId};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n@@ -237,6 +238,29 @@ crate struct CrateRoot<'tcx> {\n     symbol_mangling_version: SymbolManglingVersion,\n }\n \n+/// On-disk representation of `DefId`.\n+/// This creates a type-safe way to enforce that we remap the CrateNum between the on-disk\n+/// representation and the compilation session.\n+#[derive(Copy, Clone)]\n+crate struct RawDefId {\n+    krate: u32,\n+    index: u32,\n+}\n+\n+impl Into<RawDefId> for DefId {\n+    fn into(self) -> RawDefId {\n+        RawDefId { krate: self.krate.as_u32(), index: self.index.as_u32() }\n+    }\n+}\n+\n+impl RawDefId {\n+    fn decode(self, cdata: CrateMetadataRef<'_>) -> DefId {\n+        let krate = CrateNum::from_u32(self.krate);\n+        let krate = cdata.map_encoded_cnum_to_current(krate);\n+        DefId { krate, index: DefIndex::from_u32(self.index) }\n+    }\n+}\n+\n #[derive(Encodable, Decodable)]\n crate struct CrateDep {\n     pub name: Symbol,\n@@ -309,7 +333,7 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     thir_abstract_const: Table<DefIndex, Lazy!(&'tcx [thir::abstract_const::Node<'tcx>])>,\n-    impl_parent: Table<DefIndex, Lazy!(DefId)>,\n+    impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     impl_constness: Table<DefIndex, hir::Constness>,\n     impl_defaultness: Table<DefIndex, hir::Defaultness>,\n@@ -322,7 +346,7 @@ define_tables! {\n     generator_kind: Table<DefIndex, Lazy!(hir::GeneratorKind)>,\n     trait_def: Table<DefIndex, Lazy!(ty::TraitDef)>,\n \n-    trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n+    trait_item_def_id: Table<DefIndex, RawDefId>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n     expn_that_defined: Table<DefIndex, Lazy<ExpnId>>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,"}, {"sha": "b336649d36670eb2bfd3ee17eb66ca3c4f7c98d6", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9287a83c5691568827f056bea0241a0bdb72f18/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=b9287a83c5691568827f056bea0241a0bdb72f18", "patch": "@@ -200,6 +200,34 @@ impl FixedSizeEncoding for Option<DefPathHash> {\n     }\n }\n \n+// We directly encode RawDefId because using a `Lazy` would incur a 50% overhead in the worst case.\n+impl FixedSizeEncoding for Option<RawDefId> {\n+    fixed_size_encoding_byte_len_and_defaults!(2 * u32::BYTE_LEN);\n+\n+    #[inline]\n+    fn from_bytes(b: &[u8]) -> Self {\n+        let krate = u32::from_bytes(&b[0..4]);\n+        let index = u32::from_bytes(&b[4..8]);\n+        if krate == 0 {\n+            return None;\n+        }\n+        Some(RawDefId { krate: krate - 1, index })\n+    }\n+\n+    #[inline]\n+    fn write_to_bytes(self, b: &mut [u8]) {\n+        match self {\n+            None => 0u32.write_to_bytes(b),\n+            Some(RawDefId { krate, index }) => {\n+                // CrateNum is less than `CrateNum::MAX_AS_U32`.\n+                debug_assert!(krate < u32::MAX);\n+                (1 + krate).write_to_bytes(&mut b[0..4]);\n+                index.write_to_bytes(&mut b[4..8]);\n+            }\n+        }\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `Lazy<T>` impl, but in the general case we might not need / want to\n // fit every `usize` in `u32`."}]}