{"sha": "2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzZjZGFlM2UwOTFlZThmZTY2MjcxM2U4OWE1NmNlZmZjNmUxOWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T00:07:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-07T20:00:52Z"}, "message": "Document visibility in the manual/tutorial\n\nThis removes the warning \"Note\" about visibility not being fully defined, as it\nshould now be considered fully defined with further bugs being considered just\nbugs in the implementation.", "tree": {"sha": "804c557da6346fa3351a6e8061858a71bb71a8fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/804c557da6346fa3351a6e8061858a71bb71a8fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "html_url": "https://github.com/rust-lang/rust/commit/2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c76cdae3e091ee8fe662713e89a56ceffc6e19c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7d1431760c788e5a471194fa85675033d0ed72", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7d1431760c788e5a471194fa85675033d0ed72", "html_url": "https://github.com/rust-lang/rust/commit/de7d1431760c788e5a471194fa85675033d0ed72"}], "stats": {"total": 186, "additions": 174, "deletions": 12}, "files": [{"sha": "98978e3e5a3588631a6d0a234ad86bd2d20377cf", "filename": "doc/rust.md", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/2c76cdae3e091ee8fe662713e89a56ceffc6e19c/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c76cdae3e091ee8fe662713e89a56ceffc6e19c/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "patch": "@@ -1501,6 +1501,167 @@ is `extern \"abi\" fn(A1, ..., An) -> R`,\n where `A1...An` are the declared types of its arguments\n and `R` is the decalred return type.\n \n+## Visibility and Privacy\n+\n+These two terms are often used interchangeably, and what they are attempting to\n+convey is the answer to the question \"Can this item be used at this location?\"\n+\n+Rust's name resolution operates on a global hierarchy of namespaces. Each level\n+in the hierarchy can be thought of as some item. The items are one of those\n+mentioned above, but also include external crates. Declaring or defining a new\n+module can be thought of as inserting a new tree into the hierarchy at the\n+location of the definition.\n+\n+To control whether interfaces can be used across modules, Rust checks each use\n+of an item to see whether it should be allowed or not. This is where privacy\n+warnings are generated, or otherwise \"you used a private item of another module\n+and weren't allowed to.\"\n+\n+By default, everything in rust is *private*, with two exceptions. The first\n+exception is that struct fields are public by default (but the struct itself is\n+still private by default), and the remaining exception is that enum variants in\n+a `pub` enum are the default visibility of the enum container itself.. You are\n+allowed to alter this default visibility with the `pub` keyword (or `priv`\n+keyword for struct fields and enum variants). When an item is declared as `pub`,\n+it can be thought of as being accessible to the outside world. For example:\n+\n+~~~\n+// Declare a private struct\n+struct Foo;\n+\n+// Declare a public struct with a private field\n+pub struct Bar {\n+    priv field: int\n+}\n+\n+// Declare a public enum with public and private variants\n+pub enum State {\n+    PubliclyAccessibleState,\n+    priv PrivatelyAccessibleState\n+}\n+~~~\n+\n+With the notion of an item being either public or private, Rust allows item\n+accesses in two cases:\n+\n+1. If an item is public, then it can be used externally through any of its\n+   public ancestors.\n+2. If an item is private, it may be accessed by the current module and its\n+   descendants.\n+\n+These two cases are surprisingly powerful for creating module hierarchies\n+exposing public APIs while hiding internal implementation details. To help\n+explain, here's a few use cases and what they would entail.\n+\n+* A library developer needs to expose functionality to crates which link against\n+  their library. As a consequence of the first case, this means that anything\n+  which is usable externally must be `pub` from the root down to the destination\n+  item. Any private item in the chain will disallow external accesses.\n+\n+* A crate needs a global available \"helper module\" to itself, but it doesn't\n+  want to expose the helper module as a public API. To accomplish this, the root\n+  of the crate's hierarchy would have a private module which then internally has\n+  a \"public api\". Because the entire crate is an ancestor of the root, then the\n+  entire local crate can access this private module through the second case.\n+\n+* When writing unit tests for a module, it's often a common idiom to have an\n+  immediate child of the module to-be-tested named `mod test`. This module could\n+  access any items of the parent module through the second case, meaning that\n+  internal implementation details could also be seamlessly tested from the child\n+  module.\n+\n+In the second case, it mentions that a private item \"can be accessed\" by the\n+current module and its descendants, but the exact meaning of accessing an item\n+depends on what the item is. Accessing a module, for example, would mean looking\n+inside of it (to import more items). On the other hand, accessing a function\n+would mean that it is invoked.\n+\n+Here's an example of a program which exemplifies the three cases outlined above.\n+\n+~~~\n+// This module is private, meaning that no external crate can access this\n+// module. Because it is private at the root of this current crate, however, any\n+// module in the crate may access any publicly visible item in this module.\n+mod crate_helper_module {\n+\n+    // This function can be used by anything in the current crate\n+    pub fn crate_helper() {}\n+\n+    // This function *cannot* be used by anything else in the crate. It is not\n+    // publicly visible outside of the `crate_helper_module`, so only this\n+    // current module and its descendants may access it.\n+    fn implementation_detail() {}\n+}\n+\n+// This function is \"public to the root\" meaning that it's available to external\n+// crates linking against this one.\n+pub fn public_api() {}\n+\n+// Similarly to 'public_api', this module is public so external crates may look\n+// inside of it.\n+pub mod submodule {\n+    use crate_helper_module;\n+\n+    pub fn my_method() {\n+        // Any item in the local crate may invoke the helper module's public\n+        // interface through a combination of the two rules above.\n+        crate_helper_module::crate_helper();\n+    }\n+\n+    // This function is hidden to any module which is not a descendant of\n+    // `submodule`\n+    fn my_implementation() {}\n+\n+    #[cfg(test)]\n+    mod test {\n+\n+        #[test]\n+        fn test_my_implementation() {\n+            // Because this module is a descendant of `submodule`, it's allowed\n+            // to access private items inside of `submodule` without a privacy\n+            // violation.\n+            super::my_implementation();\n+        }\n+    }\n+}\n+~~~\n+\n+For a rust program to pass the privacy checking pass, all paths must be valid\n+accesses given the two rules above. This includes all use statements,\n+expressions, types, etc.\n+\n+### Re-exporting and Visibility\n+\n+Rust allows publicly re-exporting items through a `pub use` directive. Because\n+this is a public directive, this allows the item to be used in the current\n+module through the rules above. It essentially allows public access into the\n+re-exported item. For example, this program is valid:\n+\n+~~~\n+pub use api = self::implementation;\n+\n+mod implementation {\n+    pub fn f() {}\n+}\n+~~~\n+\n+This means that any external crate referencing `implementation::f` would receive\n+a privacy violation, while the path `api::f` would be allowed.\n+\n+When re-exporting a private item, it can be thought of as allowing the \"privacy\n+chain\" being short-circuited through the reexport instead of passing through the\n+namespace hierarchy as it normally would.\n+\n+### Glob imports and Visibility\n+\n+Currently glob imports are considered an \"experimental\" language feature. For\n+sanity purpose along with helping the implementation, glob imports will only\n+import public items from their destination, not private items.\n+\n+> **Note:** This is subject to change, glob exports may be removed entirely or\n+> they could possibly import private items for a privacy error to later be\n+> issued if the item is used.\n+\n ## Attributes\n \n ~~~~~~~~{.ebnf .gram}"}, {"sha": "b2da355b12201a823ebaaa05c262ddcb1a5203e8", "filename": "doc/tutorial.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2c76cdae3e091ee8fe662713e89a56ceffc6e19c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c76cdae3e091ee8fe662713e89a56ceffc6e19c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2c76cdae3e091ee8fe662713e89a56ceffc6e19c", "patch": "@@ -2322,19 +2322,18 @@ fn main() {\n \n The `::farm::chicken` construct is what we call a 'path'.\n \n-Because it's starting with a `::`, it's also a 'global path',\n-which qualifies an item by its full path in the module hierarchy\n-relative to the crate root.\n+Because it's starting with a `::`, it's also a 'global path', which qualifies\n+an item by its full path in the module hierarchy relative to the crate root.\n \n-If the path were to start with a regular identifier, like `farm::chicken`, it would be\n-a 'local path' instead. We'll get to them later.\n+If the path were to start with a regular identifier, like `farm::chicken`, it\n+would be a 'local path' instead. We'll get to them later.\n \n-Now, if you actually tried to compile this code example, you'll notice\n-that you get a `unresolved name: 'farm::chicken'` error. That's because per default,\n-items (`fn`, `struct`, `static`, `mod`, ...) are only visible inside the module\n-they are defined in.\n+Now, if you actually tried to compile this code example, you'll notice that you\n+get a `function 'chicken' is private` error. That's because by default, items\n+(`fn`, `struct`, `static`, `mod`, ...) are private.\n \n-To make them visible outside their containing modules, you need to mark them _public_ with `pub`:\n+To make them visible outside their containing modules, you need to mark them\n+_public_ with `pub`:\n \n ~~~~\n mod farm {\n@@ -2356,7 +2355,8 @@ Rust doesn't support encapsulation: both struct fields and methods can\n be private. But this encapsulation is at the module level, not the\n struct level.\n \n-For convenience, fields are _public_ by default, and can be made _private_ with the `priv` keyword:\n+For convenience, fields are _public_ by default, and can be made _private_ with\n+the `priv` keyword:\n \n ~~~\n mod farm {\n@@ -2393,7 +2393,8 @@ fn main() {\n # fn make_me_a_chicken() -> farm::Chicken { 0 }\n ~~~\n \n-> ***Note:*** Visibility rules are currently buggy and not fully defined, you might have to add or remove `pub` along a path until it works.\n+Exact details and specifications about visibility rules can be found in the Rust\n+manual.\n \n ## Files and modules\n "}]}