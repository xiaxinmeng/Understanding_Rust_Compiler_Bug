{"sha": "7a9709b08a57620a791259b53d71a59acf8f7b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOTcwOWIwOGE1NzYyMGE3OTEyNTliNTNkNzFhNTlhY2Y4ZjdiNWM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-24T22:55:54Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:58Z"}, "message": "Fix bootstrap rustc build", "tree": {"sha": "71e2bd74b087217acafd84a245a3565ee4e8c377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71e2bd74b087217acafd84a245a3565ee4e8c377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9709b08a57620a791259b53d71a59acf8f7b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9709b08a57620a791259b53d71a59acf8f7b5c", "html_url": "https://github.com/rust-lang/rust/commit/7a9709b08a57620a791259b53d71a59acf8f7b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9709b08a57620a791259b53d71a59acf8f7b5c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee857c4c3ecb15d4bc5aebe4fa7ba67dce797b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee857c4c3ecb15d4bc5aebe4fa7ba67dce797b5", "html_url": "https://github.com/rust-lang/rust/commit/4ee857c4c3ecb15d4bc5aebe4fa7ba67dce797b5"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "dbc54291f4087c25858d77cbefdaf5931d3b0813", "filename": "src/librustc_data_structures/box_region.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7a9709b08a57620a791259b53d71a59acf8f7b5c/src%2Flibrustc_data_structures%2Fbox_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9709b08a57620a791259b53d71a59acf8f7b5c/src%2Flibrustc_data_structures%2Fbox_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbox_region.rs?ref=7a9709b08a57620a791259b53d71a59acf8f7b5c", "patch": "@@ -25,6 +25,7 @@ pub struct PinnedGenerator<I, A, R> {\n }\n \n impl<I, A, R> PinnedGenerator<I, A, R> {\n+    #[cfg(bootstrap)]\n     pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n         generator: T,\n     ) -> (I, Self) {\n@@ -39,6 +40,22 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         (init, result)\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n+        generator: T,\n+    ) -> (I, Self) {\n+        let mut result = PinnedGenerator { generator: Box::pin(generator) };\n+\n+        // Run it to the first yield to set it up\n+        let init = match Pin::new(&mut result.generator).resume(()) {\n+            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n+            _ => panic!(),\n+        };\n+\n+        (init, result)\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n         BOX_REGION_ARG.with(|i| {\n             i.set(Action::Access(AccessAction(closure)));\n@@ -50,13 +67,35 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         }\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n+        BOX_REGION_ARG.with(|i| {\n+            i.set(Action::Access(AccessAction(closure)));\n+        });\n+\n+        // Call the generator, which in turn will call the closure in BOX_REGION_ARG\n+        if let GeneratorState::Complete(_) = Pin::new(&mut self.generator).resume(()) {\n+            panic!()\n+        }\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub fn complete(&mut self) -> R {\n         // Tell the generator we want it to complete, consuming it and yielding a result\n         BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n \n         let result = Pin::new(&mut self.generator).resume();\n         if let GeneratorState::Complete(r) = result { r } else { panic!() }\n     }\n+\n+    #[cfg(not(bootstrap))]\n+    pub fn complete(&mut self) -> R {\n+        // Tell the generator we want it to complete, consuming it and yielding a result\n+        BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n+\n+        let result = Pin::new(&mut self.generator).resume(());\n+        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n+    }\n }\n \n #[derive(PartialEq)]"}]}