{"sha": "2156f6733e9bee83be265d35447bb25091d7e9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTZmNjczM2U5YmVlODNiZTI2NWQzNTQ0N2JiMjUwOTFkN2U5YjI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-14T20:19:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-14T20:23:43Z"}, "message": "Clean up unused cx parameters", "tree": {"sha": "410f17a9222927ca69adc96af62b803e60010b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410f17a9222927ca69adc96af62b803e60010b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2156f6733e9bee83be265d35447bb25091d7e9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2156f6733e9bee83be265d35447bb25091d7e9b2", "html_url": "https://github.com/rust-lang/rust/commit/2156f6733e9bee83be265d35447bb25091d7e9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2156f6733e9bee83be265d35447bb25091d7e9b2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c93a95b1f72c5a247ac8f20d9aeecc597eb4f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c93a95b1f72c5a247ac8f20d9aeecc597eb4f60", "html_url": "https://github.com/rust-lang/rust/commit/3c93a95b1f72c5a247ac8f20d9aeecc597eb4f60"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "89f6873565a5d94283fe2f7a34e8ba1570a8fe52", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2156f6733e9bee83be265d35447bb25091d7e9b2/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2156f6733e9bee83be265d35447bb25091d7e9b2/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=2156f6733e9bee83be265d35447bb25091d7e9b2", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n         };\n \n         match expr.node {\n-            hir::ExprKind::Match(ref res, _, _) if is_try(cx, expr).is_some() => {\n+            hir::ExprKind::Match(ref res, _, _) if is_try(expr).is_some() => {\n                 if let hir::ExprKind::Call(ref func, ref args) = res.node {\n                     if let hir::ExprKind::Path(ref path) = func.node {\n                         if match_qpath(path, &paths::TRY_INTO_RESULT) && args.len() == 1 {"}, {"sha": "46aec1fa343f3e6f397615af3dd1f180010dd803", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2156f6733e9bee83be265d35447bb25091d7e9b2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2156f6733e9bee83be265d35447bb25091d7e9b2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2156f6733e9bee83be265d35447bb25091d7e9b2", "patch": "@@ -950,8 +950,8 @@ pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<I\n \n /// Checks if a given expression is a match expression expanded from the `?`\n /// operator or the `try` macro.\n-pub fn is_try<'a>(cx: &'_ LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Expr> {\n-    fn is_ok(cx: &'_ LateContext<'_, '_>, arm: &Arm) -> bool {\n+pub fn is_try(expr: &Expr) -> Option<&Expr> {\n+    fn is_ok(arm: &Arm) -> bool {\n         if_chain! {\n             if let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node;\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n@@ -984,8 +984,8 @@ pub fn is_try<'a>(cx: &'_ LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Exp\n             if arms.len() == 2;\n             if arms[0].pats.len() == 1 && arms[0].guard.is_none();\n             if arms[1].pats.len() == 1 && arms[1].guard.is_none();\n-            if (is_ok(cx, &arms[0]) && is_err(&arms[1])) ||\n-                (is_ok(cx, &arms[1]) && is_err(&arms[0]));\n+            if (is_ok(&arms[0]) && is_err(&arms[1])) ||\n+                (is_ok(&arms[1]) && is_err(&arms[0]));\n             then {\n                 return Some(expr);\n             }"}]}