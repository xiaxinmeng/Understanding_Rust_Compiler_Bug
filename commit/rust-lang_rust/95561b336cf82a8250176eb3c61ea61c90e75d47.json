{"sha": "95561b336cf82a8250176eb3c61ea61c90e75d47", "node_id": "C_kwDOAAsO6NoAKDk1NTYxYjMzNmNmODJhODI1MDE3NmViM2M2MWVhNjFjOTBlNzVkNDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T03:56:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T03:56:33Z"}, "message": "Auto merge of #94584 - pnkfelix:inject-use-suggestion-sites, r=ekuber\n\nMore robust fallback for `use` suggestion\n\nOur old way to suggest where to add `use`s would first look for pre-existing `use`s in the relevant crate/module, and if there are *no* uses, it would fallback on trying to use another item as the basis for the suggestion.\n\nBut this was fragile, as illustrated in issue #87613\n\nThis PR instead identifies span of the first token after any inner attributes, and uses *that* as the fallback for the `use` suggestion.\n\nFix #87613", "tree": {"sha": "24a6e221528437c7354ea1f0fe87d86908e374e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a6e221528437c7354ea1f0fe87d86908e374e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95561b336cf82a8250176eb3c61ea61c90e75d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95561b336cf82a8250176eb3c61ea61c90e75d47", "html_url": "https://github.com/rust-lang/rust/commit/95561b336cf82a8250176eb3c61ea61c90e75d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95561b336cf82a8250176eb3c61ea61c90e75d47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984204814e00f60c5e1ec99e2e184f326782a586", "url": "https://api.github.com/repos/rust-lang/rust/commits/984204814e00f60c5e1ec99e2e184f326782a586", "html_url": "https://github.com/rust-lang/rust/commit/984204814e00f60c5e1ec99e2e184f326782a586"}, {"sha": "8f4c6b039d49cbba6a1122043fac5fd29fde92ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c6b039d49cbba6a1122043fac5fd29fde92ba", "html_url": "https://github.com/rust-lang/rust/commit/8f4c6b039d49cbba6a1122043fac5fd29fde92ba"}], "stats": {"total": 393, "additions": 291, "deletions": 102}, "files": [{"sha": "f5c4affdce2d182d6fd25aef414c6c224e2461ae", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -510,7 +510,7 @@ pub struct WhereEqPredicate {\n pub struct Crate {\n     pub attrs: Vec<Attribute>,\n     pub items: Vec<P<Item>>,\n-    pub span: Span,\n+    pub spans: ModSpans,\n     /// Must be equal to `CRATE_NODE_ID` after the crate root is expanded, but may hold\n     /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.\n     pub id: NodeId,\n@@ -2317,11 +2317,25 @@ pub enum ModKind {\n     /// or with definition outlined to a separate file `mod foo;` and already loaded from it.\n     /// The inner span is from the first token past `{` to the last token until `}`,\n     /// or from the first to the last token in the loaded file.\n-    Loaded(Vec<P<Item>>, Inline, Span),\n+    Loaded(Vec<P<Item>>, Inline, ModSpans),\n     /// Module with definition outlined to a separate file `mod foo;` but not yet loaded from it.\n     Unloaded,\n }\n \n+#[derive(Copy, Clone, Encodable, Decodable, Debug)]\n+pub struct ModSpans {\n+    /// `inner_span` covers the body of the module; for a file module, its the whole file.\n+    /// For an inline module, its the span inside the `{ ... }`, not including the curly braces.\n+    pub inner_span: Span,\n+    pub inject_use_span: Span,\n+}\n+\n+impl Default for ModSpans {\n+    fn default() -> ModSpans {\n+        ModSpans { inner_span: Default::default(), inject_use_span: Default::default() }\n+    }\n+}\n+\n /// Foreign module declaration.\n ///\n /// E.g., `extern { .. }` or `extern \"C\" { .. }`."}, {"sha": "9d79fe53d5c4f91ba72879678f1ec5830f61f13e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -1009,8 +1009,9 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         ItemKind::Mod(unsafety, mod_kind) => {\n             visit_unsafety(unsafety, vis);\n             match mod_kind {\n-                ModKind::Loaded(items, _inline, inner_span) => {\n+                ModKind::Loaded(items, _inline, ModSpans { inner_span, inject_use_span }) => {\n                     vis.visit_span(inner_span);\n+                    vis.visit_span(inject_use_span);\n                     items.flat_map_in_place(|item| vis.flat_map_item(item));\n                 }\n                 ModKind::Unloaded => {}\n@@ -1121,11 +1122,13 @@ pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n }\n \n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n-    let Crate { attrs, items, span, id, is_placeholder: _ } = krate;\n+    let Crate { attrs, items, spans, id, is_placeholder: _ } = krate;\n     vis.visit_id(id);\n     visit_attrs(attrs, vis);\n     items.flat_map_in_place(|item| vis.flat_map_item(item));\n-    vis.visit_span(span);\n+    let ModSpans { inner_span, inject_use_span } = spans;\n+    vis.visit_span(inner_span);\n+    vis.visit_span(inject_use_span);\n }\n \n // Mutates one item into possibly many items.\n@@ -1558,7 +1561,7 @@ impl DummyAstNode for Crate {\n         Crate {\n             attrs: Default::default(),\n             items: Default::default(),\n-            span: Default::default(),\n+            spans: Default::default(),\n             id: DUMMY_NODE_ID,\n             is_placeholder: Default::default(),\n         }"}, {"sha": "dc9bc3440d05b0251d9a057628260c3d6be0aeed", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -291,7 +291,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(_, ref mod_kind) => match mod_kind {\n-                ModKind::Loaded(items, _, inner_span) => {\n+                ModKind::Loaded(items, _, ModSpans { inner_span, inject_use_span: _ }) => {\n                     hir::ItemKind::Mod(self.lower_mod(items, *inner_span))\n                 }\n                 ModKind::Unloaded => panic!(\"`mod` items should have been loaded by now\"),"}, {"sha": "c1680be9c0ad5af0acecf4c90a45d897cb68de3b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -452,7 +452,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         self.with_hir_id_owner(CRATE_NODE_ID, |lctx| {\n-            let module = lctx.lower_mod(&c.items, c.span);\n+            let module = lctx.lower_mod(&c.items, c.spans.inner_span);\n             lctx.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n             hir::OwnerNode::Crate(lctx.arena.alloc(module))\n         });"}, {"sha": "e2553ab40cad4035dbc2c8b8d5ffdbb4bbbeec89", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -112,7 +112,7 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n     fn visit_crate(&mut self, c: &mut ast::Crate) {\n         let prev_tests = mem::take(&mut self.tests);\n         noop_visit_crate(c, self);\n-        self.add_test_cases(ast::CRATE_NODE_ID, c.span, prev_tests);\n+        self.add_test_cases(ast::CRATE_NODE_ID, c.spans.inner_span, prev_tests);\n \n         // Create a main function to run our tests\n         c.items.push(mk_main(&mut self.cx));\n@@ -129,7 +129,8 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n \n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n-        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., span)) = item.kind {\n+        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., ref spans)) = item.kind {\n+            let ast::ModSpans { inner_span: span, inject_use_span: _ } = *spans;\n             let prev_tests = mem::take(&mut self.tests);\n             noop_visit_item_kind(&mut item.kind, self);\n             self.add_test_cases(item.id, span, prev_tests);"}, {"sha": "1263f31f6aa1b9635373a5cd02a431550cec8d43", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -67,7 +67,7 @@ impl Annotatable {\n             Annotatable::Param(ref p) => p.span,\n             Annotatable::FieldDef(ref sf) => sf.span,\n             Annotatable::Variant(ref v) => v.span,\n-            Annotatable::Crate(ref c) => c.span,\n+            Annotatable::Crate(ref c) => c.spans.inner_span,\n         }\n     }\n "}, {"sha": "fe4698d09fd5282ff464d4ffce22a53b8862ed83", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -12,8 +12,8 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{AssocItemKind, AstLike, AstLikeWrapper, AttrStyle, ExprKind, ForeignItemKind};\n-use rustc_ast::{Inline, ItemKind, MacArgs, MacStmtStyle, MetaItemKind, ModKind, NestedMetaItem};\n-use rustc_ast::{NodeId, PatKind, StmtKind, TyKind};\n+use rustc_ast::{Inline, ItemKind, MacArgs, MacStmtStyle, MetaItemKind, ModKind};\n+use rustc_ast::{NestedMetaItem, NodeId, PatKind, StmtKind, TyKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -364,7 +364,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     pub fn expand_crate(&mut self, krate: ast::Crate) -> ast::Crate {\n-        let file_path = match self.cx.source_map().span_to_filename(krate.span) {\n+        let file_path = match self.cx.source_map().span_to_filename(krate.spans.inner_span) {\n             FileName::Real(name) => name\n                 .into_local_path()\n                 .expect(\"attempting to resolve a file path in an external file\"),\n@@ -1091,7 +1091,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n             ModKind::Unloaded => {\n                 // We have an outline `mod foo;` so we need to parse the file.\n                 let old_attrs_len = attrs.len();\n-                let ParsedExternalMod { items, inner_span, file_path, dir_path, dir_ownership } =\n+                let ParsedExternalMod { items, spans, file_path, dir_path, dir_ownership } =\n                     parse_external_mod(\n                         &ecx.sess,\n                         ident,\n@@ -1112,7 +1112,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n                     );\n                 }\n \n-                *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);\n+                *mod_kind = ModKind::Loaded(items, Inline::No, spans);\n                 node.attrs = attrs;\n                 if node.attrs.len() > old_attrs_len {\n                     // If we loaded an out-of-line module and added some inner attributes,"}, {"sha": "2a059f3519d1e6367b76ca2650b392ee3ff63ab2", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -1,6 +1,6 @@\n use crate::base::ModuleData;\n use rustc_ast::ptr::P;\n-use rustc_ast::{token, Attribute, Inline, Item};\n+use rustc_ast::{token, Attribute, Inline, Item, ModSpans};\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_parse::new_parser_from_file;\n use rustc_parse::validate_attr;\n@@ -28,7 +28,7 @@ pub struct ModulePathSuccess {\n \n crate struct ParsedExternalMod {\n     pub items: Vec<P<Item>>,\n-    pub inner_span: Span,\n+    pub spans: ModSpans,\n     pub file_path: PathBuf,\n     pub dir_path: PathBuf,\n     pub dir_ownership: DirOwnership,\n@@ -69,13 +69,13 @@ crate fn parse_external_mod(\n         (items, inner_span, mp.file_path)\n     };\n     // (1) ...instead, we return a dummy module.\n-    let (items, inner_span, file_path) =\n+    let (items, spans, file_path) =\n         result.map_err(|err| err.report(sess, span)).unwrap_or_default();\n \n     // Extract the directory path for submodules of the module.\n     let dir_path = file_path.parent().unwrap_or(&file_path).to_owned();\n \n-    ParsedExternalMod { items, inner_span, file_path, dir_path, dir_ownership }\n+    ParsedExternalMod { items, spans, file_path, dir_path, dir_ownership }\n }\n \n crate fn mod_dir_path("}, {"sha": "15af5fdc5f8e22cb175c18129b44eaf699ba6199", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -49,7 +49,7 @@ pub fn placeholder(\n         AstFragmentKind::Crate => AstFragment::Crate(ast::Crate {\n             attrs: Default::default(),\n             items: Default::default(),\n-            span,\n+            spans: ast::ModSpans { inner_span: span, ..Default::default() },\n             id,\n             is_placeholder: true,\n         }),"}, {"sha": "f667aec03c577f438c5b037d585367d4c42772f6", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -899,7 +899,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn report_unused_deps(&mut self, krate: &ast::Crate) {\n         // Make a point span rather than covering the whole file\n-        let span = krate.span.shrink_to_lo();\n+        let span = krate.spans.inner_span.shrink_to_lo();\n         // Complain about anything left over\n         for (name, entry) in self.sess.opts.externs.iter() {\n             if let ExternLocation::FoundInLibrarySearchDirectories = entry.location {"}, {"sha": "a3e66464fbc8fdde4f45002a1c01d6830394a836", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -331,7 +331,7 @@ pub fn fake_token_stream(sess: &ParseSess, nt: &Nonterminal) -> TokenStream {\n pub fn fake_token_stream_for_crate(sess: &ParseSess, krate: &ast::Crate) -> TokenStream {\n     let source = pprust::crate_to_string_for_macros(krate);\n     let filename = FileName::macro_expansion_source_code(&source);\n-    parse_stream_from_source_str(filename, source, sess, Some(krate.span))\n+    parse_stream_from_source_str(filename, source, sess, Some(krate.spans.inner_span))\n }\n \n pub fn parse_cfg_attr("}, {"sha": "178bb62e0b25a6f9ca63e357f98c011f0eedb98f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -27,8 +27,8 @@ use tracing::debug;\n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, ast::Crate> {\n-        let (attrs, items, span) = self.parse_mod(&token::Eof)?;\n-        Ok(ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false })\n+        let (attrs, items, spans) = self.parse_mod(&token::Eof)?;\n+        Ok(ast::Crate { attrs, items, spans, id: DUMMY_NODE_ID, is_placeholder: false })\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n@@ -52,10 +52,11 @@ impl<'a> Parser<'a> {\n     pub fn parse_mod(\n         &mut self,\n         term: &TokenKind,\n-    ) -> PResult<'a, (Vec<Attribute>, Vec<P<Item>>, Span)> {\n+    ) -> PResult<'a, (Vec<Attribute>, Vec<P<Item>>, ModSpans)> {\n         let lo = self.token.span;\n         let attrs = self.parse_inner_attributes()?;\n \n+        let post_attr_lo = self.token.span;\n         let mut items = vec![];\n         while let Some(item) = self.parse_item(ForceCollect::No)? {\n             items.push(item);\n@@ -72,7 +73,9 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok((attrs, items, lo.to(self.prev_token.span)))\n+        let inject_use_span = post_attr_lo.data().with_hi(post_attr_lo.lo());\n+        let mod_spans = ModSpans { inner_span: lo.to(self.prev_token.span), inject_use_span };\n+        Ok((attrs, items, mod_spans))\n     }\n }\n "}, {"sha": "77fd71159381a2c1c3a76035dfdcf2a02b82e2c7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -71,7 +71,6 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n-use std::ops::ControlFlow;\n use std::{cmp, fmt, iter, mem, ptr};\n use tracing::debug;\n \n@@ -315,74 +314,70 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n     }\n }\n \n+#[derive(Debug)]\n struct UsePlacementFinder {\n     target_module: NodeId,\n-    span: Option<Span>,\n-    found_use: bool,\n+    first_legal_span: Option<Span>,\n+    first_use_span: Option<Span>,\n }\n \n impl UsePlacementFinder {\n     fn check(krate: &Crate, target_module: NodeId) -> (Option<Span>, bool) {\n-        let mut finder = UsePlacementFinder { target_module, span: None, found_use: false };\n-        if let ControlFlow::Continue(..) = finder.check_mod(&krate.items, CRATE_NODE_ID) {\n-            visit::walk_crate(&mut finder, krate);\n-        }\n-        (finder.span, finder.found_use)\n-    }\n-\n-    fn check_mod(&mut self, items: &[P<ast::Item>], node_id: NodeId) -> ControlFlow<()> {\n-        if self.span.is_some() {\n-            return ControlFlow::Break(());\n-        }\n-        if node_id != self.target_module {\n-            return ControlFlow::Continue(());\n-        }\n-        // find a use statement\n-        for item in items {\n-            match item.kind {\n-                ItemKind::Use(..) => {\n-                    // don't suggest placing a use before the prelude\n-                    // import or other generated ones\n-                    if !item.span.from_expansion() {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        self.found_use = true;\n-                        return ControlFlow::Break(());\n-                    }\n-                }\n-                // don't place use before extern crate\n-                ItemKind::ExternCrate(_) => {}\n-                // but place them before the first other item\n-                _ => {\n-                    if self.span.map_or(true, |span| item.span < span)\n-                        && !item.span.from_expansion()\n-                    {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        // don't insert between attributes and an item\n-                        // find the first attribute on the item\n-                        // FIXME: This is broken for active attributes.\n-                        for attr in &item.attrs {\n-                            if !attr.span.is_dummy()\n-                                && self.span.map_or(true, |span| attr.span < span)\n-                            {\n-                                self.span = Some(attr.span.shrink_to_lo());\n-                            }\n-                        }\n-                    }\n-                }\n+        let mut finder =\n+            UsePlacementFinder { target_module, first_legal_span: None, first_use_span: None };\n+        finder.visit_crate(krate);\n+        if let Some(use_span) = finder.first_use_span {\n+            (Some(use_span), true)\n+        } else {\n+            (finder.first_legal_span, false)\n+        }\n+    }\n+}\n+\n+fn is_span_suitable_for_use_injection(s: Span) -> bool {\n+    // don't suggest placing a use before the prelude\n+    // import or other generated ones\n+    !s.from_expansion()\n+}\n+\n+fn search_for_any_use_in_items(items: &[P<ast::Item>]) -> Option<Span> {\n+    for item in items {\n+        if let ItemKind::Use(..) = item.kind {\n+            if is_span_suitable_for_use_injection(item.span) {\n+                return Some(item.span.shrink_to_lo());\n             }\n         }\n-        ControlFlow::Continue(())\n     }\n+    return None;\n }\n \n impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n+    fn visit_crate(&mut self, c: &Crate) {\n+        if self.target_module == CRATE_NODE_ID {\n+            let inject = c.spans.inject_use_span;\n+            if is_span_suitable_for_use_injection(inject) {\n+                self.first_legal_span = Some(inject);\n+            }\n+            self.first_use_span = search_for_any_use_in_items(&c.items);\n+            return;\n+        } else {\n+            visit::walk_crate(self, c);\n+        }\n+    }\n+\n     fn visit_item(&mut self, item: &'tcx ast::Item) {\n-        if let ItemKind::Mod(_, ModKind::Loaded(items, ..)) = &item.kind {\n-            if let ControlFlow::Break(..) = self.check_mod(items, item.id) {\n+        if self.target_module == item.id {\n+            if let ItemKind::Mod(_, ModKind::Loaded(items, _inline, mod_spans)) = &item.kind {\n+                let inject = mod_spans.inject_use_span;\n+                if is_span_suitable_for_use_injection(inject) {\n+                    self.first_legal_span = Some(inject);\n+                }\n+                self.first_use_span = search_for_any_use_in_items(items);\n                 return;\n             }\n+        } else {\n+            visit::walk_item(self, item);\n         }\n-        visit::walk_item(self, item);\n     }\n }\n \n@@ -1282,7 +1277,7 @@ impl<'a> Resolver<'a> {\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n-            krate.span,\n+            krate.spans.inner_span,\n             session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n             &mut module_map,\n         );\n@@ -1295,7 +1290,7 @@ impl<'a> Resolver<'a> {\n             &mut FxHashMap::default(),\n         );\n \n-        let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n+        let definitions = Definitions::new(session.local_stable_crate_id(), krate.spans.inner_span);\n         let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();"}, {"sha": "010405cfd52ee9c055d09e4724ef65eb5eaf79d2", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -2011,6 +2011,10 @@ pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n }\n \n fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Option<Span>, bool) {\n+    // FIXME(#94854): this code uses an out-of-date method for inferring a span\n+    // to suggest. It would be better to thread the ModSpans from the AST into\n+    // the HIR, and then use that to drive the suggestion here.\n+\n     let mut span = None;\n     let mut found_use = false;\n     let (module, _, _) = tcx.hir().get_module(target_module);"}, {"sha": "1d28bbde79c1370bb95092ac25a0ce3cd040cdfc", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -39,7 +39,7 @@ crate fn early_resolve_intra_doc_links(\n \n     // Overridden `visit_item` below doesn't apply to the crate root,\n     // so we have to visit its attributes and reexports separately.\n-    loader.load_links_in_attrs(&krate.attrs, krate.span);\n+    loader.load_links_in_attrs(&krate.attrs, krate.spans.inner_span);\n     loader.process_module_children_or_reexports(CRATE_DEF_ID.to_def_id());\n     visit::walk_crate(&mut loader, krate);\n     loader.add_foreign_traits_in_scope();"}, {"sha": "746ced689d4482cc2d2d928f93e3dcc33d74c5e5", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "b0aaa663f38c8146d5b6e28e2c2d73cdca9db5ee", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"span\":{\"lo\":0,\"hi\":0},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "1afc3501a327779f6b6a902e0eab50bcb1979395", "filename": "src/test/ui/proc-macro/amputate-span.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.fixed?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -0,0 +1,69 @@\n+// aux-build:amputate-span.rs\n+// run-rustfix\n+// edition:2018\n+// compile-flags: --extern amputate_span\n+\n+// This test has been crafted to ensure the following things:\n+//\n+// 1. There's a resolution error that prompts the compiler to suggest\n+//    adding a `use` item.\n+//\n+// 2. There are no `use` or `extern crate` items in the source\n+//    code. In fact, there is only one item, the `fn main`\n+//    declaration.\n+//\n+// 3. The single `fn main` declaration has an attribute attached to it\n+//    that just deletes the first token from the given item.\n+//\n+// You need all of these conditions to hold in order to replicate the\n+// scenario that yielded issue 87613, where the compiler's suggestion\n+// looks like:\n+//\n+// ```\n+// help: consider importing this struct\n+//    |\n+// 47 | hey */ async use std::process::Command;\n+//    |              ++++++++++++++++++++++++++\n+// ```\n+//\n+// The first condition is necessary to force the compiler issue a\n+// suggestion. The second condition is necessary to force the\n+// suggestion to be issued at a span associated with the sole\n+// `fn`-item of this crate. The third condition is necessary in order\n+// to yield the weird state where the associated span of the `fn`-item\n+// does not actually cover all of the original source code of the\n+// `fn`-item (which is why we are calling it an \"amputated\" span\n+// here).\n+//\n+// Note that satisfying conditions 2 and 3 requires the use of the\n+// `--extern` compile flag.\n+//\n+// You might ask yourself: What code would do such a thing?  The\n+// answer is: the #[tokio::main] attribute does *exactly* this (as\n+// well as injecting some other code into the `fn main` that it\n+// constructs).\n+\n+use std::process::Command;\n+\n+#[amputate_span::drop_first_token]\n+/* what the\n+hey */ async fn main() {\n+    Command::new(\"git\"); //~ ERROR [E0433]\n+}\n+\n+// (The /* ... */ comment in the above is not part of the original\n+// bug. It is just meant to illustrate one particular facet of the\n+// original non-ideal behavior, where we were transcribing the\n+// trailing comment as part of the emitted suggestion, for better or\n+// for worse.)\n+\n+#[allow(dead_code)]\n+mod inner {\n+    use std::process::Command;\n+\n+#[amputate_span::drop_first_token]\n+        /* another interesting\n+    case */ async fn foo() {\n+        Command::new(\"git\"); //~ ERROR [E0433]\n+    }\n+}"}, {"sha": "894a06dd5f6610dd89477518872f44ec99e01b17", "filename": "src/test/ui/proc-macro/amputate-span.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -0,0 +1,65 @@\n+// aux-build:amputate-span.rs\n+// run-rustfix\n+// edition:2018\n+// compile-flags: --extern amputate_span\n+\n+// This test has been crafted to ensure the following things:\n+//\n+// 1. There's a resolution error that prompts the compiler to suggest\n+//    adding a `use` item.\n+//\n+// 2. There are no `use` or `extern crate` items in the source\n+//    code. In fact, there is only one item, the `fn main`\n+//    declaration.\n+//\n+// 3. The single `fn main` declaration has an attribute attached to it\n+//    that just deletes the first token from the given item.\n+//\n+// You need all of these conditions to hold in order to replicate the\n+// scenario that yielded issue 87613, where the compiler's suggestion\n+// looks like:\n+//\n+// ```\n+// help: consider importing this struct\n+//    |\n+// 47 | hey */ async use std::process::Command;\n+//    |              ++++++++++++++++++++++++++\n+// ```\n+//\n+// The first condition is necessary to force the compiler issue a\n+// suggestion. The second condition is necessary to force the\n+// suggestion to be issued at a span associated with the sole\n+// `fn`-item of this crate. The third condition is necessary in order\n+// to yield the weird state where the associated span of the `fn`-item\n+// does not actually cover all of the original source code of the\n+// `fn`-item (which is why we are calling it an \"amputated\" span\n+// here).\n+//\n+// Note that satisfying conditions 2 and 3 requires the use of the\n+// `--extern` compile flag.\n+//\n+// You might ask yourself: What code would do such a thing?  The\n+// answer is: the #[tokio::main] attribute does *exactly* this (as\n+// well as injecting some other code into the `fn main` that it\n+// constructs).\n+\n+#[amputate_span::drop_first_token]\n+/* what the\n+hey */ async fn main() {\n+    Command::new(\"git\"); //~ ERROR [E0433]\n+}\n+\n+// (The /* ... */ comment in the above is not part of the original\n+// bug. It is just meant to illustrate one particular facet of the\n+// original non-ideal behavior, where we were transcribing the\n+// trailing comment as part of the emitted suggestion, for better or\n+// for worse.)\n+\n+#[allow(dead_code)]\n+mod inner {\n+    #[amputate_span::drop_first_token]\n+        /* another interesting\n+    case */ async fn foo() {\n+        Command::new(\"git\"); //~ ERROR [E0433]\n+    }\n+}"}, {"sha": "9553ba3da5428ee91217f36a8daf186fef9411e0", "filename": "src/test/ui/proc-macro/amputate-span.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -0,0 +1,25 @@\n+error[E0433]: failed to resolve: use of undeclared type `Command`\n+  --> $DIR/amputate-span.rs:49:5\n+   |\n+LL |     Command::new(\"git\");\n+   |     ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::process::Command;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `Command`\n+  --> $DIR/amputate-span.rs:63:9\n+   |\n+LL |         Command::new(\"git\");\n+   |         ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL |     use std::process::Command;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "1a82119ae95e5239b1f2cff5e1786715be93a5b2", "filename": "src/test/ui/proc-macro/auxiliary/amputate-span.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn drop_first_token(attr: TokenStream, input: TokenStream) -> TokenStream {\n+    assert!(attr.is_empty());\n+    input.into_iter().skip(1).collect()\n+}"}, {"sha": "d1686f7fd2b9cc55a92613411420939c6b44ccac", "filename": "src/test/ui/resolve/use_suggestion_placement.fixed", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -14,13 +14,9 @@ mod m {\n }\n \n mod foo {\n-    // FIXME: UsePlacementFinder is broken because active attributes are\n-    // removed, and thus the `derive` attribute here is not in the AST.\n-    // An inert attribute should work, though.\n-    // #[derive(Debug)]\n     use std::path::Path;\n \n-#[allow(warnings)]\n+#[derive(Debug)]\n     pub struct Foo;\n \n     // test whether the use suggestion isn't"}, {"sha": "5be91f27092fa1f3c5040473d32b4c69084898e6", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -10,11 +10,7 @@ mod m {\n }\n \n mod foo {\n-    // FIXME: UsePlacementFinder is broken because active attributes are\n-    // removed, and thus the `derive` attribute here is not in the AST.\n-    // An inert attribute should work, though.\n-    // #[derive(Debug)]\n-    #[allow(warnings)]\n+    #[derive(Debug)]\n     pub struct Foo;\n \n     // test whether the use suggestion isn't"}, {"sha": "0aadd82f6c29253cd290b5f39c864af59b91f9a2", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `Path` in this scope\n-  --> $DIR/use_suggestion_placement.rs:22:16\n+  --> $DIR/use_suggestion_placement.rs:18:16\n    |\n LL |     type Bar = Path;\n    |                ^^^^ not found in this scope\n@@ -10,7 +10,7 @@ LL |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n-  --> $DIR/use_suggestion_placement.rs:27:13\n+  --> $DIR/use_suggestion_placement.rs:23:13\n    |\n LL |     let _ = A;\n    |             ^ not found in this scope\n@@ -21,7 +21,7 @@ LL | use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n-  --> $DIR/use_suggestion_placement.rs:32:23\n+  --> $DIR/use_suggestion_placement.rs:28:23\n    |\n LL |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope"}, {"sha": "64d96a5c6a6e4c7ef3186209e2eceefe2748f80b", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -124,7 +124,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         mut self,\n         krate: &'ast ast::Crate,\n     ) -> Result<FileModMap<'ast>, ModuleResolutionError> {\n-        let root_filename = self.parse_sess.span_to_filename(krate.span);\n+        let root_filename = self.parse_sess.span_to_filename(krate.spans.inner_span);\n         self.directory.path = match root_filename {\n             FileName::Real(ref p) => p.parent().unwrap_or(Path::new(\"\")).to_path_buf(),\n             _ => PathBuf::new(),\n@@ -135,7 +135,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.visit_mod_from_ast(&krate.items)?;\n         }\n \n-        let snippet_provider = self.parse_sess.snippet_provider(krate.span);\n+        let snippet_provider = self.parse_sess.snippet_provider(krate.spans.inner_span);\n \n         self.file_map.insert(\n             root_filename,"}, {"sha": "268c72649a65a9c93155429dd76e71facc761f2c", "filename": "src/tools/rustfmt/src/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -113,7 +113,7 @@ impl<'a> Parser<'a> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n-                Ok(result) => Some(result),\n+                Ok((a, i, spans)) => Some((a, i, spans.inner_span)),\n                 Err(mut e) => {\n                     e.emit();\n                     if sess.can_reset_errors() {"}, {"sha": "3ebfa551d1cbc2e17ca5eac859328fdddb8e3421", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95561b336cf82a8250176eb3c61ea61c90e75d47/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=95561b336cf82a8250176eb3c61ea61c90e75d47", "patch": "@@ -915,7 +915,11 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let ident_str = rewrite_ident(&self.get_context(), ident).to_owned();\n         self.push_str(&ident_str);\n \n-        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, inner_span) = mod_kind {\n+        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, ref spans) = mod_kind {\n+            let ast::ModSpans {\n+                inner_span,\n+                inject_use_span: _,\n+            } = *spans;\n             match self.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => {\n                     let indent_str = self.block_indent.to_string_with_newline(self.config);"}]}