{"sha": "460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGM4YmJkZWM4NTYxYTU4MWQwMzVmOTc2N2I3ZGQxYmEzNmNmZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T08:27:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T14:10:28Z"}, "message": "Curley tokens", "tree": {"sha": "8bfba509776ea2c58ca6b47c668603c63a4b9d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bfba509776ea2c58ca6b47c668603c63a4b9d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "html_url": "https://github.com/rust-lang/rust/commit/460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c5d8591952cbb017fd6679a1ef29a86e1499025", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5d8591952cbb017fd6679a1ef29a86e1499025", "html_url": "https://github.com/rust-lang/rust/commit/1c5d8591952cbb017fd6679a1ef29a86e1499025"}], "stats": {"total": 182, "additions": 49, "deletions": 133}, "files": [{"sha": "0958f52f1f7bafe7d5707beefdf354f6c8d1e9b6", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use ra_syntax::{\n     algo::{neighbor, SyntaxRewriter},\n     ast::{self, edit::AstNodeEdit, make},\n-    AstNode, AstToken, Direction, InsertPosition, SyntaxElement, T,\n+    AstNode, Direction, InsertPosition, SyntaxElement, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -82,7 +82,7 @@ fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTre\n             .filter(|it| it.kind() != T!['{'] && it.kind() != T!['}']),\n     );\n     let use_tree_list = lhs.use_tree_list()?;\n-    let pos = InsertPosition::Before(use_tree_list.r_curly_token()?.syntax().clone().into());\n+    let pos = InsertPosition::Before(use_tree_list.r_curly_token()?.into());\n     let use_tree_list = use_tree_list.insert_children(pos, to_insert);\n     Some(lhs.with_use_tree_list(use_tree_list))\n }"}, {"sha": "7e14349d2b4682d6eafb7b86de87bbb1ae804c0a", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -98,7 +98,7 @@ impl ast::ItemList {\n             None => match self.l_curly_token() {\n                 Some(it) => (\n                     \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default(),\n-                    InsertPosition::After(it.syntax().clone().into()),\n+                    InsertPosition::After(it.into()),\n                 ),\n                 None => return self.clone(),\n             },\n@@ -142,7 +142,7 @@ impl ast::RecordFieldList {\n         macro_rules! after_l_curly {\n             () => {{\n                 let anchor = match self.l_curly_token() {\n-                    Some(it) => it.syntax().clone().into(),\n+                    Some(it) => it.into(),\n                     None => return self.clone(),\n                 };\n                 InsertPosition::After(anchor)"}, {"sha": "eee98ebc224819c6a09ee7cf96cebfb31c2884d1", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -416,11 +416,17 @@ impl ast::RangePat {\n }\n \n impl ast::TokenTree {\n-    pub fn left_delimiter(&self) -> Option<ast::LeftDelimiter> {\n-        self.syntax().first_child_or_token()?.into_token().and_then(ast::LeftDelimiter::cast)\n-    }\n-\n-    pub fn right_delimiter(&self) -> Option<ast::RightDelimiter> {\n-        self.syntax().last_child_or_token()?.into_token().and_then(ast::RightDelimiter::cast)\n+    pub fn left_delimiter_token(&self) -> Option<SyntaxToken> {\n+        self.syntax().first_child_or_token()?.into_token().filter(|it| match it.kind() {\n+            T!['{'] | T!['('] | T!['['] => true,\n+            _ => false,\n+        })\n+    }\n+\n+    pub fn right_delimiter_token(&self) -> Option<SyntaxToken> {\n+        self.syntax().last_child_or_token()?.into_token().filter(|it| match it.kind() {\n+            T!['{'] | T!['('] | T!['['] => true,\n+            _ => false,\n+        })\n     }\n }"}, {"sha": "3c917257ce939ddfe47aba8f1ca634b75c964242", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -146,9 +146,9 @@ impl AstNode for RecordFieldDefList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldDefList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordFieldDef> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldDef {\n@@ -251,9 +251,9 @@ impl AstNode for EnumVariantList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl EnumVariantList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn variants(&self) -> AstChildren<EnumVariant> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n@@ -347,9 +347,9 @@ impl AstNode for ItemList {\n }\n impl ast::ModuleItemOwner for ItemList {}\n impl ItemList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn impl_items(&self) -> AstChildren<ImplItem> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstDef {\n@@ -1337,9 +1337,9 @@ impl AstNode for MatchArmList {\n }\n impl ast::AttrsOwner for MatchArmList {}\n impl MatchArmList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn arms(&self) -> AstChildren<MatchArm> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchArm {\n@@ -1417,11 +1417,11 @@ impl AstNode for RecordFieldList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn fields(&self) -> AstChildren<RecordField> { support::children(&self.syntax) }\n     pub fn dotdot_token(&self) -> Option<Dotdot> { support::token(&self.syntax) }\n     pub fn spread(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordField {\n@@ -1709,14 +1709,14 @@ impl AstNode for RecordFieldPatList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl RecordFieldPatList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn pats(&self) -> AstChildren<RecordInnerPat> { support::children(&self.syntax) }\n     pub fn record_field_pats(&self) -> AstChildren<RecordFieldPat> {\n         support::children(&self.syntax)\n     }\n     pub fn bind_pats(&self) -> AstChildren<BindPat> { support::children(&self.syntax) }\n     pub fn dotdot_token(&self) -> Option<Dotdot> { support::token(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldPat {\n@@ -2165,10 +2165,10 @@ impl AstNode for Block {\n impl ast::AttrsOwner for Block {}\n impl ast::ModuleItemOwner for Block {}\n impl Block {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn statements(&self) -> AstChildren<Stmt> { support::children(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParamList {\n@@ -2311,9 +2311,9 @@ impl AstNode for UseTreeList {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl UseTreeList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn use_trees(&self) -> AstChildren<UseTree> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternCrateItem {\n@@ -2557,9 +2557,9 @@ impl AstNode for ExternItemList {\n }\n impl ast::ModuleItemOwner for ExternItemList {}\n impl ExternItemList {\n-    pub fn l_curly_token(&self) -> Option<LCurly> { support::token(&self.syntax) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['{']) }\n     pub fn extern_items(&self) -> AstChildren<ExternItem> { support::children(&self.syntax) }\n-    pub fn r_curly_token(&self) -> Option<RCurly> { support::token(&self.syntax) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternBlock {"}, {"sha": "4cbc1d7935d1becb5f3fe974903110a2c9dde03f", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -1366,94 +1366,6 @@ impl AstToken for RDollar {\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum LeftDelimiter {\n-    LParen(LParen),\n-    LBrack(LBrack),\n-    LCurly(LCurly),\n-}\n-impl From<LParen> for LeftDelimiter {\n-    fn from(node: LParen) -> LeftDelimiter { LeftDelimiter::LParen(node) }\n-}\n-impl From<LBrack> for LeftDelimiter {\n-    fn from(node: LBrack) -> LeftDelimiter { LeftDelimiter::LBrack(node) }\n-}\n-impl From<LCurly> for LeftDelimiter {\n-    fn from(node: LCurly) -> LeftDelimiter { LeftDelimiter::LCurly(node) }\n-}\n-impl std::fmt::Display for LeftDelimiter {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for LeftDelimiter {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            L_PAREN | L_BRACK | L_CURLY => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            L_PAREN => LeftDelimiter::LParen(LParen { syntax }),\n-            L_BRACK => LeftDelimiter::LBrack(LBrack { syntax }),\n-            L_CURLY => LeftDelimiter::LCurly(LCurly { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            LeftDelimiter::LParen(it) => &it.syntax,\n-            LeftDelimiter::LBrack(it) => &it.syntax,\n-            LeftDelimiter::LCurly(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum RightDelimiter {\n-    RParen(RParen),\n-    RBrack(RBrack),\n-    RCurly(RCurly),\n-}\n-impl From<RParen> for RightDelimiter {\n-    fn from(node: RParen) -> RightDelimiter { RightDelimiter::RParen(node) }\n-}\n-impl From<RBrack> for RightDelimiter {\n-    fn from(node: RBrack) -> RightDelimiter { RightDelimiter::RBrack(node) }\n-}\n-impl From<RCurly> for RightDelimiter {\n-    fn from(node: RCurly) -> RightDelimiter { RightDelimiter::RCurly(node) }\n-}\n-impl std::fmt::Display for RightDelimiter {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for RightDelimiter {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            R_PAREN | R_BRACK | R_CURLY => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            R_PAREN => RightDelimiter::RParen(RParen { syntax }),\n-            R_BRACK => RightDelimiter::RBrack(RBrack { syntax }),\n-            R_CURLY => RightDelimiter::RCurly(RCurly { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            RightDelimiter::RParen(it) => &it.syntax,\n-            RightDelimiter::RBrack(it) => &it.syntax,\n-            RightDelimiter::RCurly(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum RangeSeparator {\n     Dotdot(Dotdot),\n     Dotdotdot(Dotdotdot),"}, {"sha": "1483dc08eaab546b00786a147f9f683d97bf0bff", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460c8bbdec8561a581d035f9767b7dd1ba36cfd7/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=460c8bbdec8561a581d035f9767b7dd1ba36cfd7", "patch": "@@ -335,7 +335,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RecordFieldDefList,\n         }\n \n-        struct RecordFieldDefList { LCurly, fields: [RecordFieldDef], RCurly }\n+        struct RecordFieldDefList { T!['{'], fields: [RecordFieldDef], T!['}'] }\n         struct RecordFieldDef: VisibilityOwner, NameOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner { }\n \n         struct TupleFieldDefList { LParen, fields: [TupleFieldDef], RParen }\n@@ -348,9 +348,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             variant_list: EnumVariantList,\n         }\n         struct EnumVariantList {\n-            LCurly,\n+            T!['{'],\n             variants: [EnumVariant],\n-            RCurly\n+            T!['}']\n         }\n         struct EnumVariant: VisibilityOwner, NameOwner, DocCommentsOwner, AttrsOwner {\n             FieldDefList,\n@@ -372,9 +372,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         struct ItemList: ModuleItemOwner {\n-            LCurly,\n+            T!['{'],\n             impl_items: [ImplItem],\n-            RCurly\n+            T!['}']\n         }\n \n         struct ConstDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n@@ -469,7 +469,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct Literal { LiteralToken }\n \n         struct MatchExpr: AttrsOwner { T![match], Expr, MatchArmList }\n-        struct MatchArmList: AttrsOwner { LCurly, arms: [MatchArm], RCurly }\n+        struct MatchArmList: AttrsOwner { T!['{'], arms: [MatchArm], T!['}'] }\n         struct MatchArm: AttrsOwner {\n             pat: Pat,\n             guard: MatchGuard,\n@@ -480,11 +480,11 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n \n         struct RecordLit { Path, RecordFieldList}\n         struct RecordFieldList {\n-            LCurly,\n+            T!['{'],\n             fields: [RecordField],\n             Dotdot,\n             spread: Expr,\n-            RCurly\n+            T!['}']\n         }\n         struct RecordField: AttrsOwner { NameRef, Colon, Expr }\n \n@@ -503,12 +503,12 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n \n         struct RecordPat { RecordFieldPatList, Path }\n         struct RecordFieldPatList {\n-            LCurly,\n+            T!['{'],\n             pats: [RecordInnerPat],\n             record_field_pats: [RecordFieldPat],\n             bind_pats: [BindPat],\n             Dotdot,\n-            RCurly\n+            T!['}']\n         }\n         struct RecordFieldPat: AttrsOwner, NameOwner { Colon, Pat }\n \n@@ -556,10 +556,10 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n         struct Condition { T![let], Pat, Eq, Expr }\n         struct Block: AttrsOwner, ModuleItemOwner {\n-            LCurly,\n+            T!['{'],\n             statements: [Stmt],\n             Expr,\n-            RCurly,\n+            T!['}'],\n         }\n         struct ParamList {\n             LParen,\n@@ -580,7 +580,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             Path, Star, UseTreeList, Alias\n         }\n         struct Alias: NameOwner { T![as] }\n-        struct UseTreeList { LCurly, use_trees: [UseTree], RCurly }\n+        struct UseTreeList { T!['{'], use_trees: [UseTree], T!['}'] }\n         struct ExternCrateItem: AttrsOwner, VisibilityOwner {\n             T![extern], T![crate], NameRef, Alias,\n         }\n@@ -619,9 +619,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         struct ExternItemList: ModuleItemOwner {\n-            LCurly,\n+            T!['{'],\n             extern_items: [ExternItem],\n-            RCurly\n+            T!['}']\n         }\n \n         struct ExternBlock {\n@@ -769,8 +769,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n     },\n \n     token_enums: &ast_enums! {\n-        enum LeftDelimiter { LParen, LBrack, LCurly }\n-        enum RightDelimiter { RParen, RBrack, RCurly }\n         enum RangeSeparator { Dotdot, Dotdotdot, Dotdoteq}\n \n         enum BinOp {"}]}