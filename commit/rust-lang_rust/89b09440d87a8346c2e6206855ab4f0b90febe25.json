{"sha": "89b09440d87a8346c2e6206855ab4f0b90febe25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YjA5NDQwZDg3YTgzNDZjMmU2MjA2ODU1YWI0ZjBiOTBmZWJlMjU=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-13T10:55:00Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-19T09:10:54Z"}, "message": "Allow syntax extensions to return multiple items, closes #16723.\n\nThis patch replaces `MacItem` with `MacItems`.", "tree": {"sha": "409f4efc49ca0d40a8e58abaf1483765a4dbd19a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/409f4efc49ca0d40a8e58abaf1483765a4dbd19a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b09440d87a8346c2e6206855ab4f0b90febe25", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b09440d87a8346c2e6206855ab4f0b90febe25", "html_url": "https://github.com/rust-lang/rust/commit/89b09440d87a8346c2e6206855ab4f0b90febe25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b09440d87a8346c2e6206855ab4f0b90febe25/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3889f6979647b9bd2dc5f5132d80e3e5b405a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3889f6979647b9bd2dc5f5132d80e3e5b405a5", "html_url": "https://github.com/rust-lang/rust/commit/af3889f6979647b9bd2dc5f5132d80e3e5b405a5"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "d3c39284f55822f5d701d39d1df7176a4cebf859", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=89b09440d87a8346c2e6206855ab4f0b90febe25", "patch": "@@ -13,7 +13,7 @@ use std::collections::HashMap;\n use ast;\n use ast::{Ident, Name, TokenTree};\n use codemap::Span;\n-use ext::base::{ExtCtxt, MacExpr, MacItem, MacResult};\n+use ext::base::{ExtCtxt, MacExpr, MacResult, MacItems};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n@@ -102,7 +102,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::new(token::gensym((\n         \"__register_diagnostic_\".to_string() + token::get_ident(*code).get()\n     ).as_slice()));\n-    MacItem::new(quote_item!(ecx, mod $sym {}).unwrap())\n+    MacItems::new(vec![quote_item!(ecx, mod $sym {}).unwrap()].into_iter())\n }\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -133,7 +133,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         })\n     });\n-    MacItem::new(quote_item!(ecx,\n+    MacItems::new(vec![quote_item!(ecx,\n         pub static $name: [(&'static str, &'static str), ..$count] = $expr;\n-    ).unwrap())\n+    ).unwrap()].into_iter())\n }"}, {"sha": "fbbbea541a61cc145b63de183c27c5a606fb7a2f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=89b09440d87a8346c2e6206855ab4f0b90febe25", "patch": "@@ -203,25 +203,20 @@ impl MacResult for MacPat {\n         Some(self.p)\n     }\n }\n-/// A convenience type for macros that return a single item.\n-pub struct MacItem {\n-    i: P<ast::Item>\n+/// A type for macros that return multiple items.\n+pub struct MacItems {\n+    items: SmallVector<P<ast::Item>>\n }\n-impl MacItem {\n-    pub fn new(i: P<ast::Item>) -> Box<MacResult+'static> {\n-        box MacItem { i: i } as Box<MacResult+'static>\n+\n+impl MacItems {\n+    pub fn new<I: Iterator<P<ast::Item>>>(mut it: I) -> Box<MacResult+'static> {\n+        box MacItems { items: it.collect() } as Box<MacResult+'static>\n     }\n }\n-impl MacResult for MacItem {\n-    fn make_items(self: Box<MacItem>) -> Option<SmallVector<P<ast::Item>>> {\n-        Some(SmallVector::one(self.i))\n-    }\n-    fn make_stmt(self: Box<MacItem>) -> Option<P<ast::Stmt>> {\n-        Some(P(codemap::respan(\n-            self.i.span,\n-            ast::StmtDecl(\n-                P(codemap::respan(self.i.span, ast::DeclItem(self.i))),\n-                ast::DUMMY_NODE_ID))))\n+\n+impl MacResult for MacItems {\n+    fn make_items(self: Box<MacItems>) -> Option<SmallVector<P<ast::Item>>> {\n+        Some(self.items)\n     }\n }\n "}, {"sha": "269afea52c2625a9052fe42d42f37821667162b7", "filename": "src/test/auxiliary/issue_16723_multiple_items_syntax_ext.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_16723_multiple_items_syntax_ext.rs?ref=89b09440d87a8346c2e6206855ab4f0b90febe25", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// ignore-stage1\n+#![feature(plugin_registrar, managed_boxes, quote)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::ext::base::{ExtCtxt, MacResult, MacItems};\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"multiple_items\", expand)\n+}\n+\n+fn expand(cx: &mut ExtCtxt, _: codemap::Span, _: &[ast::TokenTree]) -> Box<MacResult+'static> {\n+    MacItems::new(vec![\n+        quote_item!(cx, struct Struct1;).unwrap(),\n+        quote_item!(cx, struct Struct2;).unwrap()\n+    ].into_iter())\n+}"}, {"sha": "431ae1b13dd248f8abcdbf9f5331f2d19bcbdb63", "filename": "src/test/run-pass-fulldeps/issue_16723_multiple_items_syntax_ext.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b09440d87a8346c2e6206855ab4f0b90febe25/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue_16723_multiple_items_syntax_ext.rs?ref=89b09440d87a8346c2e6206855ab4f0b90febe25", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+// aux-build:issue_16723_multiple_items_syntax_ext.rs\n+#![feature(phase)]\n+\n+#[phase(plugin)] extern crate issue_16723_multiple_items_syntax_ext;\n+\n+multiple_items!()\n+\n+impl Struct1 {\n+    fn foo() {}\n+}\n+impl Struct2 {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    Struct1::foo();\n+    Struct2::foo();\n+    println!(\"hallo\");\n+}"}]}