{"sha": "31ae4f9fde9b23100c26e5642030128a7e1444ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYWU0ZjlmZGU5YjIzMTAwYzI2ZTU2NDIwMzAxMjhhN2UxNDQ0ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-27T04:46:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-27T04:46:32Z"}, "message": "Auto merge of #49249 - gnzlbg:simd_minmax, r=alexcrichton\n\nimplement minmax intrinsics\n\nThis adds the `simd_{fmin,fmax}` intrinsics, which do a vertical (lane-wise) `min`/`max` for floating point vectors that's equivalent to Rust's `min`/`max` for `f32`/`f64`.\n\nIt might make sense to make `{f32,f64}::{min,max}` use the `minnum` and `minmax` intrinsics as well.\n\n---\n\n~~HELP: I need some help with these. Either I should go to sleep or there must be something that I must be missing. AFAICT I am calling the `maxnum` builder correctly, yet rustc/LLVM seem to insert a call to `llvm.minnum` there instead...~~ EDIT: Rust's LLVM version is too old :/", "tree": {"sha": "b63dae1cd9281a7e71732837b10dbad0f94ac929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b63dae1cd9281a7e71732837b10dbad0f94ac929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31ae4f9fde9b23100c26e5642030128a7e1444ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31ae4f9fde9b23100c26e5642030128a7e1444ef", "html_url": "https://github.com/rust-lang/rust/commit/31ae4f9fde9b23100c26e5642030128a7e1444ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31ae4f9fde9b23100c26e5642030128a7e1444ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989b25718bbfdcc5615cdc5880e5573eb8b9688f", "url": "https://api.github.com/repos/rust-lang/rust/commits/989b25718bbfdcc5615cdc5880e5573eb8b9688f", "html_url": "https://github.com/rust-lang/rust/commit/989b25718bbfdcc5615cdc5880e5573eb8b9688f"}, {"sha": "56aaf344c444943f3c9cefe9d88ed27b43f0a731", "url": "https://api.github.com/repos/rust-lang/rust/commits/56aaf344c444943f3c9cefe9d88ed27b43f0a731", "html_url": "https://github.com/rust-lang/rust/commit/56aaf344c444943f3c9cefe9d88ed27b43f0a731"}], "stats": {"total": 149, "additions": 148, "deletions": 1}, "files": [{"sha": "dba2e918f6f3a10a3fb44618bfcd55d6909de825", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -1248,6 +1248,9 @@ extern \"C\" {\n                                          IsNaN: bool)\n                                          -> ValueRef;\n \n+    pub fn LLVMRustBuildMinNum(B: BuilderRef, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n+    pub fn LLVMRustBuildMaxNum(B: BuilderRef, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n+\n     pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMBuildPtrDiff(B: BuilderRef,"}, {"sha": "db803ca8209d9c67870e9bd5da01d1e19b9450b9", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -917,6 +917,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    pub fn minnum(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"minnum\");\n+        unsafe {\n+            let instr = llvm::LLVMRustBuildMinNum(self.llbuilder, lhs, rhs);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildMinNum is not available in LLVM version < 6.0\");\n+            }\n+            instr\n+        }\n+    }\n+    pub fn maxnum(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n+        self.count_insn(\"maxnum\");\n+        unsafe {\n+            let instr = llvm::LLVMRustBuildMaxNum(self.llbuilder, lhs, rhs);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildMaxNum is not available in LLVM version < 6.0\");\n+            }\n+            instr\n+        }\n+    }\n+\n     pub fn select(&self, cond: ValueRef, then_val: ValueRef, else_val: ValueRef) -> ValueRef {\n         self.count_insn(\"select\");\n         unsafe {"}, {"sha": "5c67f8091141bf3cf1d52d1311759912d62023ce", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -1432,6 +1432,8 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         simd_and: TyUint, TyInt => and;\n         simd_or: TyUint, TyInt => or;\n         simd_xor: TyUint, TyInt => xor;\n+        simd_fmax: TyFloat => maxnum;\n+        simd_fmin: TyFloat => minnum;\n     }\n     span_bug!(span, \"unknown SIMD intrinsic\");\n }"}, {"sha": "377e3a891840f786bb36baed7aa71fdf2d6abf9c", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -355,7 +355,8 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_rem\" |\n         \"simd_div\" | \"simd_shl\" | \"simd_shr\" |\n-        \"simd_and\" | \"simd_or\" | \"simd_xor\" => {\n+        \"simd_and\" | \"simd_or\" | \"simd_xor\" |\n+        \"simd_fmin\" | \"simd_fmax\" => {\n             (1, vec![param(0), param(0)], param(0))\n         }\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),"}, {"sha": "df8602d0803a459d848040a2f3e2d299391e33a9", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -1503,3 +1503,23 @@ LLVMBuildExactUDiv(LLVMBuilderRef B, LLVMValueRef LHS,\n   return wrap(unwrap(B)->CreateExactUDiv(unwrap(LHS), unwrap(RHS), Name));\n }\n #endif\n+\n+#if LLVM_VERSION_GE(6, 0)\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildMinNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n+    return wrap(unwrap(B)->CreateMinNum(unwrap(LHS),unwrap(RHS)));\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildMaxNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n+    return wrap(unwrap(B)->CreateMaxNum(unwrap(LHS),unwrap(RHS)));\n+}\n+#else\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildMinNum(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+   return nullptr;\n+}\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildMaxNum(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+   return nullptr;\n+}\n+#endif"}, {"sha": "6663b841808f1e97886320aadd61b6c73ee9ec1b", "filename": "src/test/codegen/simd-intrinsic-float-minmax.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+// min-llvm-version 6.0\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_fmin<T>(x: T, y: T) -> T;\n+    fn simd_fmax<T>(x: T, y: T) -> T;\n+}\n+\n+// CHECK-LABEL: @fmin\n+#[no_mangle]\n+pub unsafe fn fmin(a: f32x4, b: f32x4) -> f32x4 {\n+    // CHECK: call <4 x float> @llvm.minnum.v4f32\n+    simd_fmin(a, b)\n+}\n+\n+// FIXME(49261)\n+// // C_HECK-LABEL: @fmax\n+// #[no_mangle]\n+// pub unsafe fn fmax(a: f32x4, b: f32x4) -> f32x4 {\n+// // C_HECK: call <4 x float> @llvm.maxnum.v4f32\n+//     simd_fmax(a, b)\n+// }"}, {"sha": "f4fb8e12250b57d42695c9172c52f0e495254e21", "filename": "src/test/run-fail/simd-intrinsic-float-minmax.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Ftest%2Frun-fail%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ae4f9fde9b23100c26e5642030128a7e1444ef/src%2Ftest%2Frun-fail%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fsimd-intrinsic-float-minmax.rs?ref=31ae4f9fde9b23100c26e5642030128a7e1444ef", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten\n+// min-llvm-version 6.0\n+// error-pattern: panicked\n+\n+// Test that the simd_f{min,max} intrinsics produce the correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#[allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_fmin<T>(x: T, y: T) -> T;\n+    fn simd_fmax<T>(x: T, y: T) -> T;\n+}\n+\n+fn main() {\n+    let x = f32x4(1.0, 2.0, 3.0, 4.0);\n+    let y = f32x4(2.0, 1.0, 4.0, 3.0);\n+    let nan = ::std::f32::NAN;\n+    let n = f32x4(nan, nan, nan, nan);\n+\n+    unsafe {\n+        let min0 = simd_fmin(x, y);\n+        let min1 = simd_fmin(y, x);\n+        assert_eq!(min0, min1);\n+        let e = f32x4(1.0, 1.0, 3.0, 3.0);\n+        assert_eq!(min0, e);\n+        let minn = simd_fmin(x, n);\n+        assert_eq!(minn, x);\n+        let minn = simd_fmin(y, n);\n+        assert_eq!(minn, y);\n+\n+        // FIXME(49261)\n+        let max0 = simd_fmax(x, y);\n+        let max1 = simd_fmax(y, x);\n+        assert_eq!(max0, max1);\n+        let e = f32x4(2.0, 2.0, 4.0, 4.0);\n+        assert_eq!(max0, e);\n+        let maxn = simd_fmax(x, n);\n+        assert_eq!(maxn, x);\n+        let maxn = simd_fmax(y, n);\n+        assert_eq!(maxn, y);\n+    }\n+}"}]}