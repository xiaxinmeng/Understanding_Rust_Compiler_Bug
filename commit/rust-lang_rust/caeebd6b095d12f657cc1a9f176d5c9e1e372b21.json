{"sha": "caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "node_id": "C_kwDOAAsO6NoAKGNhZWViZDZiMDk1ZDEyZjY1N2NjMWE5ZjE3NmQ1YzllMWUzNzJiMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-08T20:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-08T20:50:41Z"}, "message": "Auto merge of #8374 - Alexendoo:bless-revisions, r=camsteffen\n\nSupport `cargo dev bless` for tests with revisions\n\nchangelog: internal: Support `cargo dev bless` for tests with revisions\n\nPreviously bless wouldn't pick up the saved stderr from `target/debug/tests/manual_assert.stage-id.edition2021.stderr` or `target/debug/tests/manual_assert.stage-id.edition2018.stderr` due to there being multiple revisions of the test output\n\nThis tweaks compile-test so the built files end up in e.g. `target/debug/tests/ui`, `target/debug/tests/ui-cargo` rather than share the `tests` dir. `cargo dev bless` then uses that to update all the `.stdout/stdout/fixed` files it can find\n\nAlso removes an empty file I found, and the logic to remove empty outputs as compiletest doesn't produce empty `.stdout/stderr` files", "tree": {"sha": "f6a0afd64de0f56af8391d1dc55bae844187b6c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a0afd64de0f56af8391d1dc55bae844187b6c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "html_url": "https://github.com/rust-lang/rust/commit/caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caeebd6b095d12f657cc1a9f176d5c9e1e372b21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2590701b2ac9004418c5ec49896f2cf2c5016df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2590701b2ac9004418c5ec49896f2cf2c5016df5", "html_url": "https://github.com/rust-lang/rust/commit/2590701b2ac9004418c5ec49896f2cf2c5016df5"}, {"sha": "04dce4aed45540db007a2d1f70c5c02af8e64422", "url": "https://api.github.com/repos/rust-lang/rust/commits/04dce4aed45540db007a2d1f70c5c02af8e64422", "html_url": "https://github.com/rust-lang/rust/commit/04dce4aed45540db007a2d1f70c5c02af8e64422"}], "stats": {"total": 146, "additions": 56, "deletions": 90}, "files": [{"sha": "b0fb39e8169968aa57624a6d988879a11021b02c", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/caeebd6b095d12f657cc1a9f176d5c9e1e372b21/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeebd6b095d12f657cc1a9f176d5c9e1e372b21/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "patch": "@@ -5,9 +5,7 @@ use std::ffi::OsStr;\n use std::fs;\n use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n-use walkdir::WalkDir;\n-\n-use crate::clippy_project_root;\n+use walkdir::{DirEntry, WalkDir};\n \n #[cfg(not(windows))]\n static CARGO_CLIPPY_EXE: &str = \"cargo-clippy\";\n@@ -24,43 +22,25 @@ static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::ne\n ///\n /// Panics if the path to a test file is broken\n pub fn bless(ignore_timestamp: bool) {\n-    let test_suite_dirs = [\n-        clippy_project_root().join(\"tests\").join(\"ui\"),\n-        clippy_project_root().join(\"tests\").join(\"ui-internal\"),\n-        clippy_project_root().join(\"tests\").join(\"ui-toml\"),\n-        clippy_project_root().join(\"tests\").join(\"ui-cargo\"),\n-    ];\n-    for test_suite_dir in &test_suite_dirs {\n-        WalkDir::new(test_suite_dir)\n-            .into_iter()\n-            .filter_map(Result::ok)\n-            .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n-            .for_each(|f| {\n-                let test_name = f.path().strip_prefix(test_suite_dir).unwrap();\n-                for &ext in &[\"stdout\", \"stderr\", \"fixed\"] {\n-                    let test_name_ext = format!(\"stage-id.{}\", ext);\n-                    update_reference_file(\n-                        f.path().with_extension(ext),\n-                        test_name.with_extension(test_name_ext),\n-                        ignore_timestamp,\n-                    );\n-                }\n-            });\n-    }\n+    let extensions = [\"stdout\", \"stderr\", \"fixed\"].map(OsStr::new);\n+\n+    WalkDir::new(build_dir())\n+        .into_iter()\n+        .map(Result::unwrap)\n+        .filter(|entry| entry.path().extension().map_or(false, |ext| extensions.contains(&ext)))\n+        .for_each(|entry| update_reference_file(&entry, ignore_timestamp));\n }\n \n-fn update_reference_file(reference_file_path: PathBuf, test_name: PathBuf, ignore_timestamp: bool) {\n-    let test_output_path = build_dir().join(test_name);\n-    let relative_reference_file_path = reference_file_path.strip_prefix(clippy_project_root()).unwrap();\n+fn update_reference_file(test_output_entry: &DirEntry, ignore_timestamp: bool) {\n+    let test_output_path = test_output_entry.path();\n \n-    // If compiletest did not write any changes during the test run,\n-    // we don't have to update anything\n-    if !test_output_path.exists() {\n-        return;\n-    }\n+    let reference_file_name = test_output_entry.file_name().to_str().unwrap().replace(\".stage-id\", \"\");\n+    let reference_file_path = Path::new(\"tests\")\n+        .join(test_output_path.strip_prefix(build_dir()).unwrap())\n+        .with_file_name(reference_file_name);\n \n     // If the test output was not updated since the last clippy build, it may be outdated\n-    if !ignore_timestamp && !updated_since_clippy_build(&test_output_path).unwrap_or(true) {\n+    if !ignore_timestamp && !updated_since_clippy_build(test_output_entry).unwrap_or(true) {\n         return;\n     }\n \n@@ -69,23 +49,14 @@ fn update_reference_file(reference_file_path: PathBuf, test_name: PathBuf, ignor\n \n     if test_output_file != reference_file {\n         // If a test run caused an output file to change, update the reference file\n-        println!(\"updating {}\", &relative_reference_file_path.display());\n+        println!(\"updating {}\", reference_file_path.display());\n         fs::copy(test_output_path, &reference_file_path).expect(\"Could not update reference file\");\n-\n-        // We need to re-read the file now because it was potentially updated from copying\n-        let reference_file = fs::read(&reference_file_path).unwrap_or_default();\n-\n-        if reference_file.is_empty() {\n-            // If we copied over an empty output file, we remove the now empty reference file\n-            println!(\"removing {}\", &relative_reference_file_path.display());\n-            fs::remove_file(reference_file_path).expect(\"Could not remove reference file\");\n-        }\n     }\n }\n \n-fn updated_since_clippy_build(path: &Path) -> Option<bool> {\n+fn updated_since_clippy_build(entry: &DirEntry) -> Option<bool> {\n     let clippy_build_time = (*CLIPPY_BUILD_TIME)?;\n-    let modified = fs::metadata(path).ok()?.modified().ok()?;\n+    let modified = entry.metadata().ok()?.modified().ok()?;\n     Some(modified >= clippy_build_time)\n }\n "}, {"sha": "ab7e2540405d3a97552964e97e5d37a17fb565c3", "filename": "tests/compile-test.rs", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/caeebd6b095d12f657cc1a9f176d5c9e1e372b21/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeebd6b095d12f657cc1a9f176d5c9e1e372b21/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=caeebd6b095d12f657cc1a9f176d5c9e1e372b21", "patch": "@@ -11,6 +11,7 @@ use std::env::{self, remove_var, set_var, var_os};\n use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::io;\n+use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n use test_utils::IS_RUSTC_TEST_SUITE;\n \n@@ -64,11 +65,11 @@ extern crate tokio;\n /// dependencies must be added to Cargo.toml at the project root. Test\n /// dependencies that are not *directly* used by this test module require an\n /// `extern crate` declaration.\n-fn extern_flags() -> String {\n+static EXTERN_FLAGS: SyncLazy<String> = SyncLazy::new(|| {\n     let current_exe_depinfo = {\n         let mut path = env::current_exe().unwrap();\n         path.set_extension(\"d\");\n-        std::fs::read_to_string(path).unwrap()\n+        fs::read_to_string(path).unwrap()\n     };\n     let mut crates: HashMap<&str, &str> = HashMap::with_capacity(TEST_DEPENDENCIES.len());\n     for line in current_exe_depinfo.lines() {\n@@ -112,24 +113,25 @@ fn extern_flags() -> String {\n         .into_iter()\n         .map(|(name, path)| format!(\" --extern {}={}\", name, path))\n         .collect()\n-}\n+});\n \n-fn default_config() -> compiletest::Config {\n+fn base_config(test_dir: &str) -> compiletest::Config {\n     let mut config = compiletest::Config {\n         edition: Some(\"2021\".into()),\n+        mode: TestMode::Ui,\n         ..compiletest::Config::default()\n     };\n \n     if let Ok(filters) = env::var(\"TESTNAME\") {\n-        config.filters = filters.split(',').map(std::string::ToString::to_string).collect();\n+        config.filters = filters.split(',').map(ToString::to_string).collect();\n     }\n \n     if let Some(path) = option_env!(\"RUSTC_LIB_PATH\") {\n         let path = PathBuf::from(path);\n         config.run_lib_path = path.clone();\n         config.compile_lib_path = path;\n     }\n-    let current_exe_path = std::env::current_exe().unwrap();\n+    let current_exe_path = env::current_exe().unwrap();\n     let deps_path = current_exe_path.parent().unwrap();\n     let profile_path = deps_path.parent().unwrap();\n \n@@ -143,10 +145,11 @@ fn default_config() -> compiletest::Config {\n         \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{}{}\",\n         deps_path.display(),\n         host_libs,\n-        extern_flags(),\n+        &*EXTERN_FLAGS,\n     ));\n \n-    config.build_base = profile_path.join(\"test\");\n+    config.src_base = Path::new(\"tests\").join(test_dir);\n+    config.build_base = profile_path.join(\"test\").join(test_dir);\n     config.rustc_path = profile_path.join(if cfg!(windows) {\n         \"clippy-driver.exe\"\n     } else {\n@@ -155,38 +158,31 @@ fn default_config() -> compiletest::Config {\n     config\n }\n \n-fn run_ui(cfg: &mut compiletest::Config) {\n-    cfg.mode = TestMode::Ui;\n-    cfg.src_base = Path::new(\"tests\").join(\"ui\");\n+fn run_ui() {\n+    let config = base_config(\"ui\");\n     // use tests/clippy.toml\n-    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", std::fs::canonicalize(\"tests\").unwrap());\n-    compiletest::run_tests(cfg);\n+    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", fs::canonicalize(\"tests\").unwrap());\n+    compiletest::run_tests(&config);\n }\n \n-fn run_ui_test(cfg: &mut compiletest::Config) {\n-    cfg.mode = TestMode::Ui;\n-    cfg.src_base = Path::new(\"tests\").join(\"ui_test\");\n-    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", std::fs::canonicalize(\"tests\").unwrap());\n-    let rustcflags = cfg.target_rustcflags.get_or_insert_with(Default::default);\n-    let len = rustcflags.len();\n+fn run_ui_test() {\n+    let mut config = base_config(\"ui_test\");\n+    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", fs::canonicalize(\"tests\").unwrap());\n+    let rustcflags = config.target_rustcflags.get_or_insert_with(Default::default);\n     rustcflags.push_str(\" --test\");\n-    compiletest::run_tests(cfg);\n-    if let Some(ref mut flags) = &mut cfg.target_rustcflags {\n-        flags.truncate(len);\n-    }\n+    compiletest::run_tests(&config);\n }\n \n-fn run_internal_tests(cfg: &mut compiletest::Config) {\n+fn run_internal_tests() {\n     // only run internal tests with the internal-tests feature\n     if !RUN_INTERNAL_TESTS {\n         return;\n     }\n-    cfg.mode = TestMode::Ui;\n-    cfg.src_base = Path::new(\"tests\").join(\"ui-internal\");\n-    compiletest::run_tests(cfg);\n+    let config = base_config(\"ui-internal\");\n+    compiletest::run_tests(&config);\n }\n \n-fn run_ui_toml(config: &mut compiletest::Config) {\n+fn run_ui_toml() {\n     fn run_tests(config: &compiletest::Config, mut tests: Vec<tester::TestDescAndFn>) -> Result<bool, io::Error> {\n         let mut result = true;\n         let opts = compiletest::test_opts(config);\n@@ -222,12 +218,12 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n         Ok(result)\n     }\n \n-    config.mode = TestMode::Ui;\n-    config.src_base = Path::new(\"tests\").join(\"ui-toml\").canonicalize().unwrap();\n+    let mut config = base_config(\"ui-toml\");\n+    config.src_base = config.src_base.canonicalize().unwrap();\n \n-    let tests = compiletest::make_tests(config);\n+    let tests = compiletest::make_tests(&config);\n \n-    let res = run_tests(config, tests);\n+    let res = run_tests(&config, tests);\n     match res {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n@@ -237,7 +233,7 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n     }\n }\n \n-fn run_ui_cargo(config: &mut compiletest::Config) {\n+fn run_ui_cargo() {\n     fn run_tests(\n         config: &compiletest::Config,\n         filters: &[String],\n@@ -310,13 +306,13 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n         return;\n     }\n \n-    config.mode = TestMode::Ui;\n-    config.src_base = Path::new(\"tests\").join(\"ui-cargo\").canonicalize().unwrap();\n+    let mut config = base_config(\"ui-cargo\");\n+    config.src_base = config.src_base.canonicalize().unwrap();\n \n-    let tests = compiletest::make_tests(config);\n+    let tests = compiletest::make_tests(&config);\n \n     let current_dir = env::current_dir().unwrap();\n-    let res = run_tests(config, &config.filters, tests);\n+    let res = run_tests(&config, &config.filters, tests);\n     env::set_current_dir(current_dir).unwrap();\n \n     match res {\n@@ -331,12 +327,11 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n #[test]\n fn compile_test() {\n     set_var(\"CLIPPY_DISABLE_DOCS_LINKS\", \"true\");\n-    let mut config = default_config();\n-    run_ui(&mut config);\n-    run_ui_test(&mut config);\n-    run_ui_toml(&mut config);\n-    run_ui_cargo(&mut config);\n-    run_internal_tests(&mut config);\n+    run_ui();\n+    run_ui_test();\n+    run_ui_toml();\n+    run_ui_cargo();\n+    run_internal_tests();\n }\n \n /// Restores an env var on drop"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/non_expressive_names.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2590701b2ac9004418c5ec49896f2cf2c5016df5/tests%2Fui%2Fnon_expressive_names.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2590701b2ac9004418c5ec49896f2cf2c5016df5/tests%2Fui%2Fnon_expressive_names.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stdout?ref=2590701b2ac9004418c5ec49896f2cf2c5016df5"}]}