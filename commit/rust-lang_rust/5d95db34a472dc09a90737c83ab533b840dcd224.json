{"sha": "5d95db34a472dc09a90737c83ab533b840dcd224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTVkYjM0YTQ3MmRjMDlhOTA3MzdjODNhYjUzM2I4NDBkY2QyMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-28T13:23:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-28T13:23:07Z"}, "message": "Auto merge of #51630 - joshlf:map-split-perf, r=dtolnay\n\nOptimize RefCell refcount tracking\n\nAddress the performance concern raised in https://github.com/rust-lang/rust/pull/51466#issuecomment-398255276\n\ncc @dtolnay  @nnethercote @rust-lang/wg-compiler-performance\n\ncc @RalfJung @jhjourdan for soundness concerns\n\nCan somebody kick off a perf run on this? I'm not sure how that's done, but I understand it has to be started manually.\n\nThe idea of this change is to switch to representing mutable refcount as values below 0 to eliminate some branching that was required with the old algorithm.", "tree": {"sha": "5c110943f3ff5516511a14e93af0b5abd6450452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c110943f3ff5516511a14e93af0b5abd6450452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d95db34a472dc09a90737c83ab533b840dcd224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d95db34a472dc09a90737c83ab533b840dcd224", "html_url": "https://github.com/rust-lang/rust/commit/5d95db34a472dc09a90737c83ab533b840dcd224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d95db34a472dc09a90737c83ab533b840dcd224/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f79d2f86af73da483f4fe8e2422c15c79221d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f79d2f86af73da483f4fe8e2422c15c79221d32", "html_url": "https://github.com/rust-lang/rust/commit/9f79d2f86af73da483f4fe8e2422c15c79221d32"}, {"sha": "851cc39503a53b38ecbdd03bd391289e095bd7ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/851cc39503a53b38ecbdd03bd391289e095bd7ca", "html_url": "https://github.com/rust-lang/rust/commit/851cc39503a53b38ecbdd03bd391289e095bd7ca"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "21edc6dfee4e591677ff8f4eed37e317032c2a63", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=5d95db34a472dc09a90737c83ab533b840dcd224", "patch": "@@ -570,20 +570,31 @@ impl Display for BorrowMutError {\n     }\n }\n \n-// Values [1, MIN_WRITING-1] represent the number of `Ref` active. Values in\n-// [MIN_WRITING, MAX-1] represent the number of `RefMut` active. Multiple\n-// `RefMut`s can only be active at a time if they refer to distinct,\n-// nonoverlapping components of a `RefCell` (e.g., different ranges of a slice).\n+// Positive values represent the number of `Ref` active. Negative values\n+// represent the number of `RefMut` active. Multiple `RefMut`s can only be\n+// active at a time if they refer to distinct, nonoverlapping components of a\n+// `RefCell` (e.g., different ranges of a slice).\n //\n // `Ref` and `RefMut` are both two words in size, and so there will likely never\n // be enough `Ref`s or `RefMut`s in existence to overflow half of the `usize`\n-// range. Thus, a `BorrowFlag` will probably never overflow. However, this is\n-// not a guarantee, as a pathological program could repeatedly create and then\n-// mem::forget `Ref`s or `RefMut`s. Thus, all code must explicitly check for\n-// overflow in order to avoid unsafety.\n-type BorrowFlag = usize;\n+// range. Thus, a `BorrowFlag` will probably never overflow or underflow.\n+// However, this is not a guarantee, as a pathological program could repeatedly\n+// create and then mem::forget `Ref`s or `RefMut`s. Thus, all code must\n+// explicitly check for overflow and underflow in order to avoid unsafety, or at\n+// least behave correctly in the event that overflow or underflow happens (e.g.,\n+// see BorrowRef::new).\n+type BorrowFlag = isize;\n const UNUSED: BorrowFlag = 0;\n-const MIN_WRITING: BorrowFlag = (!0)/2 + 1; // 0b1000...\n+\n+#[inline(always)]\n+fn is_writing(x: BorrowFlag) -> bool {\n+    x < UNUSED\n+}\n+\n+#[inline(always)]\n+fn is_reading(x: BorrowFlag) -> bool {\n+    x > UNUSED\n+}\n \n impl<T> RefCell<T> {\n     /// Creates a new `RefCell` containing `value`.\n@@ -1022,12 +1033,11 @@ impl<'b> BorrowRef<'b> {\n     #[inline]\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {\n         let b = borrow.get();\n-        if b >= MIN_WRITING {\n+        if is_writing(b) || b == isize::max_value() {\n+            // If there's currently a writing borrow, or if incrementing the\n+            // refcount would overflow into a writing borrow.\n             None\n         } else {\n-            // Prevent the borrow counter from overflowing into\n-            // a writing borrow.\n-            assert!(b < MIN_WRITING - 1);\n             borrow.set(b + 1);\n             Some(BorrowRef { borrow })\n         }\n@@ -1038,7 +1048,7 @@ impl<'b> Drop for BorrowRef<'b> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n-        debug_assert!(borrow < MIN_WRITING && borrow != UNUSED);\n+        debug_assert!(is_reading(borrow));\n         self.borrow.set(borrow - 1);\n     }\n }\n@@ -1047,12 +1057,12 @@ impl<'b> Clone for BorrowRef<'b> {\n     #[inline]\n     fn clone(&self) -> BorrowRef<'b> {\n         // Since this Ref exists, we know the borrow flag\n-        // is not set to WRITING.\n+        // is a reading borrow.\n         let borrow = self.borrow.get();\n-        debug_assert!(borrow != UNUSED);\n+        debug_assert!(is_reading(borrow));\n         // Prevent the borrow counter from overflowing into\n         // a writing borrow.\n-        assert!(borrow < MIN_WRITING - 1);\n+        assert!(borrow != isize::max_value());\n         self.borrow.set(borrow + 1);\n         BorrowRef { borrow: self.borrow }\n     }\n@@ -1251,12 +1261,8 @@ impl<'b> Drop for BorrowRefMut<'b> {\n     #[inline]\n     fn drop(&mut self) {\n         let borrow = self.borrow.get();\n-        debug_assert!(borrow >= MIN_WRITING);\n-        self.borrow.set(if borrow == MIN_WRITING {\n-            UNUSED\n-        } else {\n-            borrow - 1\n-        });\n+        debug_assert!(is_writing(borrow));\n+        self.borrow.set(borrow + 1);\n     }\n }\n \n@@ -1266,10 +1272,10 @@ impl<'b> BorrowRefMut<'b> {\n         // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial\n         // mutable reference, and so there must currently be no existing\n         // references. Thus, while clone increments the mutable refcount, here\n-        // we simply go directly from UNUSED to MIN_WRITING.\n+        // we explicitly only allow going from UNUSED to UNUSED - 1.\n         match borrow.get() {\n             UNUSED => {\n-                borrow.set(MIN_WRITING);\n+                borrow.set(UNUSED - 1);\n                 Some(BorrowRefMut { borrow: borrow })\n             },\n             _ => None,\n@@ -1284,10 +1290,10 @@ impl<'b> BorrowRefMut<'b> {\n     #[inline]\n     fn clone(&self) -> BorrowRefMut<'b> {\n         let borrow = self.borrow.get();\n-        debug_assert!(borrow >= MIN_WRITING);\n-        // Prevent the borrow counter from overflowing.\n-        assert!(borrow != !0);\n-        self.borrow.set(borrow + 1);\n+        debug_assert!(is_writing(borrow));\n+        // Prevent the borrow counter from underflowing.\n+        assert!(borrow != isize::min_value());\n+        self.borrow.set(borrow - 1);\n         BorrowRefMut { borrow: self.borrow }\n     }\n }"}, {"sha": "5490acf4bd6c1424d065ebc0479361526ace3fd6", "filename": "src/test/compile-fail/not-panic-safe-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-2.rs?ref=5d95db34a472dc09a90737c83ab533b840dcd224", "patch": "@@ -19,5 +19,5 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n fn main() {\n     assert::<Rc<RefCell<i32>>>();\n     //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n-    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a\n }"}, {"sha": "0fac395a115828fe1cb716482bde512e2042bd71", "filename": "src/test/compile-fail/not-panic-safe-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs?ref=5d95db34a472dc09a90737c83ab533b840dcd224", "patch": "@@ -19,5 +19,5 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n fn main() {\n     assert::<Arc<RefCell<i32>>>();\n     //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n-    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a\n }"}, {"sha": "bf0392018b5dda96659993bbfe740efc1faabe90", "filename": "src/test/compile-fail/not-panic-safe-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-4.rs?ref=5d95db34a472dc09a90737c83ab533b840dcd224", "patch": "@@ -18,5 +18,5 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n fn main() {\n     assert::<&RefCell<i32>>();\n     //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n-    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a\n }"}, {"sha": "950f0a0b53aecaa5d4aa942f03a770053b65bd01", "filename": "src/test/compile-fail/not-panic-safe-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d95db34a472dc09a90737c83ab533b840dcd224/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-6.rs?ref=5d95db34a472dc09a90737c83ab533b840dcd224", "patch": "@@ -18,5 +18,5 @@ fn assert<T: UnwindSafe + ?Sized>() {}\n fn main() {\n     assert::<*mut RefCell<i32>>();\n     //~^ ERROR the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a\n-    //~| ERROR the type `std::cell::UnsafeCell<usize>` may contain interior mutability and a\n+    //~| ERROR the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a\n }"}]}